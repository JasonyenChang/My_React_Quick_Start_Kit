(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{250:function(t,n,e){!function(n,e){t.exports=e()}("undefined"!=typeof self&&self,function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=195)}([function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(103);e.d(n,"geoArea",function(){return r.c});var i=e(197);e.d(n,"geoBounds",function(){return i.a});var o=e(198);e.d(n,"geoCentroid",function(){return o.a});var u=e(104);e.d(n,"geoCircle",function(){return u.b});var a=e(65);e.d(n,"geoClipExtent",function(){return a.b});var c=e(217);e.d(n,"geoContains",function(){return c.a});var f=e(122);e.d(n,"geoDistance",function(){return f.a});var s=e(218);e.d(n,"geoGraticule",function(){return s.a}),e.d(n,"geoGraticule10",function(){return s.b});var l=e(219);e.d(n,"geoInterpolate",function(){return l.a});var h=e(123);e.d(n,"geoLength",function(){return h.a});var p=e(220);e.d(n,"geoPath",function(){return p.a});var v=e(125);e.d(n,"geoAlbers",function(){return v.a});var d=e(230);e.d(n,"geoAlbersUsa",function(){return d.a});var g=e(231);e.d(n,"geoAzimuthalEqualArea",function(){return g.b}),e.d(n,"geoAzimuthalEqualAreaRaw",function(){return g.a});var b=e(232);e.d(n,"geoAzimuthalEquidistant",function(){return b.b}),e.d(n,"geoAzimuthalEquidistantRaw",function(){return b.a});var y=e(233);e.d(n,"geoConicConformal",function(){return y.b}),e.d(n,"geoConicConformalRaw",function(){return y.a});var j=e(68);e.d(n,"geoConicEqualArea",function(){return j.b}),e.d(n,"geoConicEqualAreaRaw",function(){return j.a});var O=e(234);e.d(n,"geoConicEquidistant",function(){return O.b}),e.d(n,"geoConicEquidistantRaw",function(){return O.a});var _=e(127);e.d(n,"geoEquirectangular",function(){return _.a}),e.d(n,"geoEquirectangularRaw",function(){return _.b});var m=e(235);e.d(n,"geoGnomonic",function(){return m.a}),e.d(n,"geoGnomonicRaw",function(){return m.b});var w=e(236);e.d(n,"geoIdentity",function(){return w.a});var x=e(17);e.d(n,"geoProjection",function(){return x.a}),e.d(n,"geoProjectionMutator",function(){return x.b});var E=e(71);e.d(n,"geoMercator",function(){return E.a}),e.d(n,"geoMercatorRaw",function(){return E.c});var M=e(237);e.d(n,"geoOrthographic",function(){return M.a}),e.d(n,"geoOrthographicRaw",function(){return M.b});var T=e(238);e.d(n,"geoStereographic",function(){return T.a}),e.d(n,"geoStereographicRaw",function(){return T.b});var S=e(239);e.d(n,"geoTransverseMercator",function(){return S.a}),e.d(n,"geoTransverseMercatorRaw",function(){return S.b});var k=e(50);e.d(n,"geoRotation",function(){return k.a});var C=e(22);e.d(n,"geoStream",function(){return C.a});var P=e(51);e.d(n,"geoTransform",function(){return P.a})},function(t,n,e){"use strict";e.d(n,"a",function(){return r}),e.d(n,"f",function(){return i}),e.d(n,"g",function(){return o}),e.d(n,"h",function(){return u}),e.d(n,"m",function(){return a}),e.d(n,"n",function(){return c}),e.d(n,"p",function(){return f}),e.d(n,"q",function(){return s}),e.d(n,"r",function(){return l}),e.d(n,"t",function(){return h}),e.d(n,"w",function(){return p}),e.d(n,"x",function(){return v}),e.d(n,"y",function(){return d}),e.d(n,"F",function(){return g}),e.d(n,"k",function(){return b}),e.d(n,"l",function(){return y}),e.d(n,"s",function(){return j}),e.d(n,"o",function(){return O}),e.d(n,"u",function(){return _}),e.d(n,"C",function(){return m}),e.d(n,"D",function(){return w}),e.d(n,"E",function(){return x}),e.d(n,"H",function(){return E}),e.d(n,"j",function(){return M}),e.d(n,"v",function(){return T}),n.z=function(t){return t?t/Math.sin(t):1},n.e=function(t){return t>1?O:t<-1?-O:Math.asin(t)},n.b=function(t){return t>1?0:t<-1?j:Math.acos(t)},n.B=S,n.G=function(t){return((t=a(2*t))-1)/(t+1)},n.A=function(t){return(a(t)-a(-t))/2},n.i=function(t){return(a(t)+a(-t))/2},n.d=function(t){return f(t+S(t*t+1))},n.c=function(t){return f(t+S(t*t-1))};var r=Math.abs,i=Math.atan,o=Math.atan2,u=(Math.ceil,Math.cos),a=Math.exp,c=Math.floor,f=Math.log,s=Math.max,l=Math.min,h=Math.pow,p=Math.round,v=Math.sign||function(t){return t>0?1:t<0?-1:0},d=Math.sin,g=Math.tan,b=1e-6,y=1e-12,j=Math.PI,O=j/2,_=j/4,m=Math.SQRT1_2,w=S(2),x=S(j),E=2*j,M=180/j,T=j/180;function S(t){return t>0?Math.sqrt(t):0}},function(t,n,e){function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var i=e(3),o=e(77),u=e(76),a=e(356),c=e(139),f=e(39),s=e(84),l=function(t){function n(e){var o;void 0===e&&(e={state:{}});var u=r(r(o=t.call(this)||this));return i(u,{_onChangeTimer:null,DataSet:n,isDataSet:!0,views:{}},e),o}!function(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n}(n,t);var e=n.prototype;return e._getUniqueViewName=function(){for(var t=a("view_");this.views[t];)t=a("view_");return t},e.createView=function(t,n){void 0===n&&(n={});var e=this;if(o(t)&&(t=e._getUniqueViewName()),u(t)&&(n=t,t=e._getUniqueViewName()),e.views[t])throw new Error("data view exists: "+t);var r=new f(e,n);return e.views[t]=r,r},e.getView=function(t){return this.views[t]},e.setView=function(t,n){this.views[t]=n},e.setState=function(t,n){var e=this;e.state[t]=n,e._onChangeTimer&&(clearTimeout(e._onChangeTimer),e._onChangeTimer=null),e._onChangeTimer=setTimeout(function(){e.emit("statechange",t,n)},16)},n}(c);i(l,{CONSTANTS:s,DataSet:l,DataView:f,View:f,connectors:{},transforms:{},registerConnector:function(t,n){l.connectors[t]=n},getConnector:function(t){return l.connectors[t]||l.connectors.default},registerTransform:function(t,n){l.transforms[t]=n},getTransform:function(t){return l.transforms[t]||l.transforms.default}},s),f.DataSet=l,i(l.prototype,{view:l.prototype.createView}),l.version="0.10.1",t.exports=l},function(t,n){function e(t,n){for(var e in n)n.hasOwnProperty(e)&&"constructor"!==e&&void 0!==n[e]&&(t[e]=n[e])}t.exports=function(t,n,r,i){return n&&e(t,n),r&&e(t,r),i&&e(t,i),t}},function(t,n,e){"use strict";e.d(n,"i",function(){return r}),e.d(n,"j",function(){return i}),e.d(n,"o",function(){return o}),e.d(n,"l",function(){return u}),e.d(n,"q",function(){return a}),e.d(n,"w",function(){return c}),e.d(n,"h",function(){return f}),e.d(n,"r",function(){return s}),e.d(n,"a",function(){return l}),e.d(n,"d",function(){return h}),e.d(n,"e",function(){return p}),e.d(n,"g",function(){return v}),e.d(n,"f",function(){return d}),e.d(n,"k",function(){return g}),e.d(n,"n",function(){return b}),e.d(n,"p",function(){return y}),e.d(n,"t",function(){return j}),e.d(n,"s",function(){return O}),e.d(n,"u",function(){return _}),e.d(n,"v",function(){return m}),n.b=function(t){return t>1?0:t<-1?o:Math.acos(t)},n.c=function(t){return t>1?u:t<-1?-u:Math.asin(t)},n.m=function(t){return(t=j(t/2))*t};var r=1e-6,i=1e-12,o=Math.PI,u=o/2,a=o/4,c=2*o,f=180/o,s=o/180,l=Math.abs,h=Math.atan,p=Math.atan2,v=Math.cos,d=Math.ceil,g=Math.exp,b=(Math.floor,Math.log),y=Math.pow,j=Math.sin,O=Math.sign||function(t){return t>0?1:t<0?-1:0},_=Math.sqrt,m=Math.tan},function(t,n,e){"use strict";e.d(n,"i",function(){return r}),e.d(n,"j",function(){return i}),e.d(n,"o",function(){return o}),e.d(n,"l",function(){return u}),e.d(n,"q",function(){return a}),e.d(n,"w",function(){return c}),e.d(n,"h",function(){return f}),e.d(n,"r",function(){return s}),e.d(n,"a",function(){return l}),e.d(n,"d",function(){return h}),e.d(n,"e",function(){return p}),e.d(n,"g",function(){return v}),e.d(n,"f",function(){return d}),e.d(n,"k",function(){return g}),e.d(n,"n",function(){return b}),e.d(n,"p",function(){return y}),e.d(n,"t",function(){return j}),e.d(n,"s",function(){return O}),e.d(n,"u",function(){return _}),e.d(n,"v",function(){return m}),n.b=function(t){return t>1?0:t<-1?o:Math.acos(t)},n.c=function(t){return t>1?u:t<-1?-u:Math.asin(t)},n.m=function(t){return(t=j(t/2))*t};var r=1e-6,i=1e-12,o=Math.PI,u=o/2,a=o/4,c=2*o,f=180/o,s=o/180,l=Math.abs,h=Math.atan,p=Math.atan2,v=Math.cos,d=Math.ceil,g=Math.exp,b=(Math.floor,Math.log),y=Math.pow,j=Math.sin,O=Math.sign||function(t){return t>0?1:t<0?-1:0},_=Math.sqrt,m=Math.tan},function(t,n,e){var r=e(41),i=Array.isArray?Array.isArray:function(t){return r(t,"Array")};t.exports=i},function(t,n,e){var r=e(6),i=e(10),o="Invalid fields: it must be an array!";t.exports={getField:function(t,n){var e=t.field,o=t.fields;if(i(e))return e;if(r(e))return console.warn("Invalid field: it must be a string!"),e[0];if(console.warn("Invalid field: it must be a string! will try to get fields instead."),i(o))return o;if(r(o)&&o.length)return o[0];if(n)return n;throw new TypeError("Invalid field: it must be a string!")},getFields:function(t,n){var e=t.field,u=t.fields;if(r(u))return u;if(i(u))return console.warn(o),[u];if(console.warn(o+" will try to get field instead."),i(e))return console.warn(o),[e];if(r(e)&&e.length)return console.warn(o),e;if(n)return n;throw new TypeError(o)}}},function(t,n,e){var r;try{r=e(169)}catch(t){}r||(r=window._),t.exports=r},function(t,n,e){var r=e(76),i=e(6);t.exports=function(t,n){if(t)if(i(t))for(var e=0,o=t.length;e<o&&!1!==n(t[e],e);e++);else if(r(t))for(var u in t)if(t.hasOwnProperty(u)&&!1===n(t[u],u))break}},function(t,n,e){var r=e(41);t.exports=function(t){return r(t,"String")}},function(t,n,e){var r=e(41);t.exports=function(t){return r(t,"Function")}},function(t,n,e){"use strict";var r=e(8),i=e(16).Graph;function o(t,n,e,i){var o;do{o=r.uniqueId(i)}while(t.hasNode(o));return e.dummy=n,t.setNode(o,e),o}function u(t){return r.max(r.map(t.nodes(),function(n){var e=t.node(n).rank;if(!r.isUndefined(e))return e}))}t.exports={addDummyNode:o,simplify:function(t){var n=(new i).setGraph(t.graph());return r.forEach(t.nodes(),function(e){n.setNode(e,t.node(e))}),r.forEach(t.edges(),function(e){var r=n.edge(e.v,e.w)||{weight:0,minlen:1},i=t.edge(e);n.setEdge(e.v,e.w,{weight:r.weight+i.weight,minlen:Math.max(r.minlen,i.minlen)})}),n},asNonCompoundGraph:function(t){var n=new i({multigraph:t.isMultigraph()}).setGraph(t.graph());return r.forEach(t.nodes(),function(e){t.children(e).length||n.setNode(e,t.node(e))}),r.forEach(t.edges(),function(e){n.setEdge(e,t.edge(e))}),n},successorWeights:function(t){var n=r.map(t.nodes(),function(n){var e={};return r.forEach(t.outEdges(n),function(n){e[n.w]=(e[n.w]||0)+t.edge(n).weight}),e});return r.zipObject(t.nodes(),n)},predecessorWeights:function(t){var n=r.map(t.nodes(),function(n){var e={};return r.forEach(t.inEdges(n),function(n){e[n.v]=(e[n.v]||0)+t.edge(n).weight}),e});return r.zipObject(t.nodes(),n)},intersectRect:function(t,n){var e,r,i=t.x,o=t.y,u=n.x-i,a=n.y-o,c=t.width/2,f=t.height/2;if(!u&&!a)throw new Error("Not possible to find intersection inside of the rectangle");Math.abs(a)*c>Math.abs(u)*f?(a<0&&(f=-f),e=f*u/a,r=f):(u<0&&(c=-c),e=c,r=c*a/u);return{x:i+e,y:o+r}},buildLayerMatrix:function(t){var n=r.map(r.range(u(t)+1),function(){return[]});return r.forEach(t.nodes(),function(e){var i=t.node(e),o=i.rank;r.isUndefined(o)||(n[o][i.order]=e)}),n},normalizeRanks:function(t){var n=r.minBy(r.map(t.nodes(),function(n){return t.node(n).rank}));r.forEach(t.nodes(),function(e){var i=t.node(e);r.has(i,"rank")&&(i.rank-=n)})},removeEmptyRanks:function(t){var n=r.minBy(r.map(t.nodes(),function(n){return t.node(n).rank})),e=[];r.forEach(t.nodes(),function(r){var i=t.node(r).rank-n;e[i]||(e[i]=[]),e[i].push(r)});var i=0,o=t.graph().nodeRankFactor;r.forEach(e,function(n,e){r.isUndefined(n)&&e%o!=0?--i:i&&r.forEach(n,function(n){t.node(n).rank+=i})})},addBorderNode:function(t,n,e,r){var i={width:0,height:0};arguments.length>=4&&(i.rank=e,i.order=r);return o(t,"border",i,n)},maxRank:u,partition:function(t,n){var e={lhs:[],rhs:[]};return r.forEach(t,function(t){n(t)?e.lhs.push(t):e.rhs.push(t)}),e},time:function(t,n){var e=r.now();try{return n()}finally{console.log(t+" time: "+(r.now()-e)+"ms")}},notime:function(t,n){return n()}}},function(t,n,e){var r;try{r=e(169)}catch(t){}r||(r=window._),t.exports=r},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(109);e.d(n,"bisect",function(){return r.c}),e.d(n,"bisectRight",function(){return r.b}),e.d(n,"bisectLeft",function(){return r.a});var i=e(30);e.d(n,"ascending",function(){return i.a});var o=e(110);e.d(n,"bisector",function(){return o.a});var u=e(201);e.d(n,"cross",function(){return u.a});var a=e(202);e.d(n,"descending",function(){return a.a});var c=e(112);e.d(n,"deviation",function(){return c.a});var f=e(114);e.d(n,"extent",function(){return f.a});var s=e(203);e.d(n,"histogram",function(){return s.a});var l=e(206);e.d(n,"thresholdFreedmanDiaconis",function(){return l.a});var h=e(207);e.d(n,"thresholdScott",function(){return h.a});var p=e(118);e.d(n,"thresholdSturges",function(){return p.a});var v=e(208);e.d(n,"max",function(){return v.a});var d=e(209);e.d(n,"mean",function(){return d.a});var g=e(210);e.d(n,"median",function(){return g.a});var b=e(211);e.d(n,"merge",function(){return b.a});var y=e(119);e.d(n,"min",function(){return y.a});var j=e(111);e.d(n,"pairs",function(){return j.a});var O=e(212);e.d(n,"permute",function(){return O.a});var _=e(66);e.d(n,"quantile",function(){return _.a});var m=e(116);e.d(n,"range",function(){return m.a});var w=e(213);e.d(n,"scan",function(){return w.a});var x=e(214);e.d(n,"shuffle",function(){return x.a});var E=e(215);e.d(n,"sum",function(){return E.a});var M=e(117);e.d(n,"ticks",function(){return M.a}),e.d(n,"tickIncrement",function(){return M.b}),e.d(n,"tickStep",function(){return M.c});var T=e(120);e.d(n,"transpose",function(){return T.a});var S=e(113);e.d(n,"variance",function(){return S.a});var k=e(216);e.d(n,"zip",function(){return k.a})},function(t,n,e){var r=e(6),i=e(11),o=e(10),u=e(352),a=e(353);t.exports=function(t,n,e){void 0===e&&(e=[]);var c,f=t;return e&&e.length&&(f=a(t,e)),i(n)?c=n:r(n)?c=function(t){return"_"+n.map(function(n){return t[n]}).join("-")}:o(n)&&(c=function(t){return"_"+t[n]}),u(f,c)}},function(t,n,e){var r;try{r=e(433)}catch(t){}r||(r=window.graphlib),t.exports=r},function(t,n,e){"use strict";n.a=function(t){return v(function(){return t})()},n.b=v;var r=e(226),i=e(227),o=e(65),u=e(105),a=e(67),c=e(4),f=e(50),s=e(51),l=e(70),h=e(228),p=Object(s.b)({point:function(t,n){this.stream.point(t*c.r,n*c.r)}});function v(t){var n,e,s,v,d,g,b,y,j,O,_=150,m=480,w=250,x=0,E=0,M=0,T=0,S=0,k=null,C=r.a,P=null,N=a.a,R=.5,B=Object(h.a)(L,R);function A(t){return[(t=d(t[0]*c.r,t[1]*c.r))[0]*_+e,s-t[1]*_]}function I(t){return(t=d.invert((t[0]-e)/_,(s-t[1])/_))&&[t[0]*c.h,t[1]*c.h]}function L(t,r){return[(t=n(t,r))[0]*_+e,s-t[1]*_]}function z(){d=Object(u.a)(v=Object(f.b)(M,T,S),n);var t=n(x,E);return e=m-t[0]*_,s=w+t[1]*_,q()}function q(){return j=O=null,A}return A.stream=function(t){return j&&O===t?j:j=p(C(v,B(N(O=t))))},A.clipAngle=function(t){return arguments.length?(C=+t?Object(i.a)(k=t*c.r,6*c.r):(k=null,r.a),q()):k*c.h},A.clipExtent=function(t){return arguments.length?(N=null==t?(P=g=b=y=null,a.a):Object(o.a)(P=+t[0][0],g=+t[0][1],b=+t[1][0],y=+t[1][1]),q()):null==P?null:[[P,g],[b,y]]},A.scale=function(t){return arguments.length?(_=+t,z()):_},A.translate=function(t){return arguments.length?(m=+t[0],w=+t[1],z()):[m,w]},A.center=function(t){return arguments.length?(x=t[0]%360*c.r,E=t[1]%360*c.r,z()):[x*c.h,E*c.h]},A.rotate=function(t){return arguments.length?(M=t[0]%360*c.r,T=t[1]%360*c.r,S=t.length>2?t[2]%360*c.r:0,z()):[M*c.h,T*c.h,S*c.h]},A.precision=function(t){return arguments.length?(B=Object(h.a)(L,R=t*t),q()):Object(c.u)(R)},A.fitExtent=function(t,n){return Object(l.a)(A,t,n)},A.fitSize=function(t,n){return Object(l.b)(A,t,n)},function(){return n=t.apply(this,arguments),A.invert=n.invert&&I,z()}}},function(t,n,e){"use strict";n.a=function(t){return v(function(){return t})()},n.b=v;var r=e(336),i=e(338),o=e(145),u=e(144),a=e(150),c=e(5),f=e(78),s=e(81),l=e(154),h=e(339),p=Object(s.b)({point:function(t,n){this.stream.point(t*c.r,n*c.r)}});function v(t){var n,e,s,v,d,g,b,y,j,O,_=150,m=480,w=250,x=0,E=0,M=0,T=0,S=0,k=null,C=r.a,P=null,N=a.a,R=.5,B=Object(h.a)(L,R);function A(t){return[(t=d(t[0]*c.r,t[1]*c.r))[0]*_+e,s-t[1]*_]}function I(t){return(t=d.invert((t[0]-e)/_,(s-t[1])/_))&&[t[0]*c.h,t[1]*c.h]}function L(t,r){return[(t=n(t,r))[0]*_+e,s-t[1]*_]}function z(){d=Object(u.a)(v=Object(f.b)(M,T,S),n);var t=n(x,E);return e=m-t[0]*_,s=w+t[1]*_,q()}function q(){return j=O=null,A}return A.stream=function(t){return j&&O===t?j:j=p(C(v,B(N(O=t))))},A.clipAngle=function(t){return arguments.length?(C=+t?Object(i.a)(k=t*c.r,6*c.r):(k=null,r.a),q()):k*c.h},A.clipExtent=function(t){return arguments.length?(N=null==t?(P=g=b=y=null,a.a):Object(o.a)(P=+t[0][0],g=+t[0][1],b=+t[1][0],y=+t[1][1]),q()):null==P?null:[[P,g],[b,y]]},A.scale=function(t){return arguments.length?(_=+t,z()):_},A.translate=function(t){return arguments.length?(m=+t[0],w=+t[1],z()):[m,w]},A.center=function(t){return arguments.length?(x=t[0]%360*c.r,E=t[1]%360*c.r,z()):[x*c.h,E*c.h]},A.rotate=function(t){return arguments.length?(M=t[0]%360*c.r,T=t[1]%360*c.r,S=t.length>2?t[2]%360*c.r:0,z()):[M*c.h,T*c.h,S*c.h]},A.precision=function(t){return arguments.length?(B=Object(h.a)(L,R=t*t),q()):Object(c.u)(R)},A.fitExtent=Object(l.a)(A),A.fitSize=Object(l.b)(A),function(){return n=t.apply(this,arguments),A.invert=n.invert&&I,z()}}},function(t,n,e){!function(t){"use strict";function n(t){if(0===t.length)return 0;for(var n,e=t[0],r=0,i=1;i<t.length;i++)n=e+t[i],Math.abs(e)>=Math.abs(t[i])?r+=e-n+t[i]:r+=t[i]-n+e,e=n;return e+r}function e(t){if(0===t.length)throw new Error("mean requires at least one data point");return n(t)/t.length}function r(t,n){var r,i,o=e(t),u=0;if(2===n)for(i=0;i<t.length;i++)u+=(r=t[i]-o)*r;else for(i=0;i<t.length;i++)u+=Math.pow(t[i]-o,n);return u}function i(t){if(0===t.length)throw new Error("variance requires at least one data point");return r(t,2)/t.length}function o(t){if(1===t.length)return 0;var n=i(t);return Math.sqrt(n)}function u(t){if(0===t.length)throw new Error("mode requires at least one data point");if(1===t.length)return t[0];for(var n=t[0],e=NaN,r=0,i=1,o=1;o<t.length+1;o++)t[o]!==n?(r<i&&(r=i,e=n),i=1,n=t[o]):i++;return e}function a(t){return t.slice().sort(function(t,n){return t-n})}function c(t){if(0===t.length)throw new Error("min requires at least one data point");for(var n=t[0],e=1;e<t.length;e++)t[e]<n&&(n=t[e]);return n}function f(t){if(0===t.length)throw new Error("max requires at least one data point");for(var n=t[0],e=1;e<t.length;e++)t[e]>n&&(n=t[e]);return n}function s(t,n){var e=t.length*n;if(0===t.length)throw new Error("quantile requires at least one data point.");if(n<0||1<n)throw new Error("quantiles must be between 0 and 1");return 1===n?t[t.length-1]:0===n?t[0]:e%1!=0?t[Math.ceil(e)-1]:t.length%2==0?(t[e-1]+t[e])/2:t[e]}function l(t,n,e,r){for(e=e||0,r=r||t.length-1;e<r;){if(600<r-e){var i=r-e+1,o=n-e+1,u=Math.log(i),a=.5*Math.exp(2*u/3),c=.5*Math.sqrt(u*a*(i-a)/i);o-i/2<0&&(c*=-1),l(t,n,Math.max(e,Math.floor(n-o*a/i+c)),Math.min(r,Math.floor(n+(i-o)*a/i+c)))}var f=t[n],s=e,p=r;for(h(t,e,n),t[r]>f&&h(t,e,r);s<p;){for(h(t,s,p),s++,p--;t[s]<f;)s++;for(;t[p]>f;)p--}t[e]===f?h(t,e,p):h(t,++p,r),p<=n&&(e=p+1),n<=p&&(r=p-1)}}function h(t,n,e){var r=t[n];t[n]=t[e],t[e]=r}function p(t,n){var e=t.slice();if(Array.isArray(n)){!function(t,n){for(var e=[0],r=0;r<n.length;r++)e.push(g(t.length,n[r]));e.push(t.length-1),e.sort(d);for(var i=[0,e.length-1];i.length;){var o=Math.ceil(i.pop()),u=Math.floor(i.pop());if(!(o-u<=1)){var a=Math.floor((u+o)/2);v(t,e[a],e[u],e[o]),i.push(u,a,a,o)}}}(e,n);for(var r=[],i=0;i<n.length;i++)r[i]=s(e,n[i]);return r}return v(e,g(e.length,n),0,e.length-1),s(e,n)}function v(t,n,e,r){n%1==0?l(t,n,e,r):(l(t,n=Math.floor(n),e,r),l(t,n+1,n+1,r))}function d(t,n){return t-n}function g(t,n){var e=t*n;return 1===n?t-1:0===n?0:e%1!=0?Math.ceil(e)-1:t%2==0?e-.5:e}function b(t,n){if(n<t[0])return 0;if(n>t[t.length-1])return 1;var e=function(t,n){for(var e=0,r=0,i=t.length;r<i;)n<=t[e=r+i>>>1]?i=e:r=-~e;return r}(t,n);if(t[e]!==n)return e/t.length;e++;var r=function(t,n){for(var e=0,r=0,i=t.length;r<i;)n>=t[e=r+i>>>1]?r=-~e:i=e;return r}(t,n);if(r===e)return e/t.length;var i=r-e+1;return i*(r+e)/2/i/t.length}function y(t){var n=p(t,.75),e=p(t,.25);if("number"==typeof n&&"number"==typeof e)return n-e}function j(t){return+p(t,.5)}function O(t){for(var n=j(t),e=[],r=0;r<t.length;r++)e.push(Math.abs(t[r]-n));return j(e)}function _(t,n){n=n||Math.random;for(var e,r,i=t.length;0<i;)r=Math.floor(n()*i--),e=t[i],t[i]=t[r],t[r]=e;return t}function m(t,n){return _(t.slice().slice(),n)}function w(t){for(var n,e=0,r=0;r<t.length;r++)0!==r&&t[r]===n||(n=t[r],e++);return e}function x(t,n){for(var e=[],r=0;r<t;r++){for(var i=[],o=0;o<n;o++)i.push(0);e.push(i)}return e}function E(t,n,e,r){var i;if(0<t){var o=(e[n]-e[t-1])/(n-t+1);i=r[n]-r[t-1]-(n-t+1)*o*o}else i=r[n]-e[n]*e[n]/(n+1);return i<0?0:i}function M(t,n,e,r,i,o,u){if(!(n<t)){var a=Math.floor((t+n)/2);r[e][a]=r[e-1][a-1],i[e][a]=a;var c=e;e<t&&(c=Math.max(c,i[e][t-1]||0)),c=Math.max(c,i[e-1][a]||0);var f,s,l,h=a-1;n<r.length-1&&(h=Math.min(h,i[e][n+1]||0));for(var p=h;c<=p&&!((f=E(p,a,o,u))+r[e-1][c-1]>=r[e][a]);--p)(s=E(c,a,o,u)+r[e-1][c-1])<r[e][a]&&(r[e][a]=s,i[e][a]=c),c++,(l=f+r[e-1][p-1])<r[e][a]&&(r[e][a]=l,i[e][a]=p);M(t,a-1,e,r,i,o,u),M(a+1,n,e,r,i,o,u)}}function T(t,n){if(t.length!==n.length)throw new Error("sampleCovariance requires samples with equal lengths");if(t.length<2)throw new Error("sampleCovariance requires at least two data points in each sample");for(var r=e(t),i=e(n),o=0,u=0;u<t.length;u++)o+=(t[u]-r)*(n[u]-i);return o/(t.length-1)}function S(t){if(t.length<2)throw new Error("sampleVariance requires at least two data points");return r(t,2)/(t.length-1)}function k(t){var n=S(t);return Math.sqrt(n)}function C(t,n,e,r){return(t*n+e*r)/(n+r)}function P(t){if(0===t.length)throw new Error("rootMeanSquare requires at least one data point");for(var n=0,e=0;e<t.length;e++)n+=Math.pow(t[e],2);return Math.sqrt(n/t.length)}function N(){this.totalCount=0,this.data={}}function R(){this.weights=[],this.bias=0}N.prototype.train=function(t,n){for(var e in this.data[n]||(this.data[n]={}),t){var r=t[e];void 0===this.data[n][e]&&(this.data[n][e]={}),void 0===this.data[n][e][r]&&(this.data[n][e][r]=0),this.data[n][e][r]++}this.totalCount++},N.prototype.score=function(t){var n,e={};for(var r in t){var i=t[r];for(n in this.data)e[n]={},this.data[n][r]?e[n][r+"_"+i]=(this.data[n][r][i]||0)/this.totalCount:e[n][r+"_"+i]=0}var o={};for(n in e)for(var u in o[n]=0,e[n])o[n]+=e[n][u];return o},R.prototype.predict=function(t){if(t.length!==this.weights.length)return null;for(var n=0,e=0;e<this.weights.length;e++)n+=this.weights[e]*t[e];return 0<(n+=this.bias)?1:0},R.prototype.train=function(t,n){if(0!==n&&1!==n)return null;t.length!==this.weights.length&&(this.weights=t,this.bias=1);var e=this.predict(t);if(e!==n){for(var r=n-e,i=0;i<this.weights.length;i++)this.weights[i]+=r*t[i];this.bias+=r}return this};var B=1e-4;function A(t){if(t<0)throw new Error("factorial requires a non-negative value");if(Math.floor(t)!==t)throw new Error("factorial requires an integer input");for(var n=1,e=2;e<=t;e++)n*=e;return n}var I=[.9999999999999971,57.15623566586292,-59.59796035547549,14.136097974741746,-.4919138160976202,3399464998481189e-20,4652362892704858e-20,-9837447530487956e-20,.0001580887032249125,-.00021026444172410488,.00021743961811521265,-.0001643181065367639,8441822398385275e-20,-26190838401581408e-21,36899182659531625e-22],L=Math.log(Math.sqrt(2*Math.PI)),z={1:{.995:0,.99:0,.975:0,.95:0,.9:.02,.5:.45,.1:2.71,.05:3.84,.025:5.02,.01:6.63,.005:7.88},2:{.995:.01,.99:.02,.975:.05,.95:.1,.9:.21,.5:1.39,.1:4.61,.05:5.99,.025:7.38,.01:9.21,.005:10.6},3:{.995:.07,.99:.11,.975:.22,.95:.35,.9:.58,.5:2.37,.1:6.25,.05:7.81,.025:9.35,.01:11.34,.005:12.84},4:{.995:.21,.99:.3,.975:.48,.95:.71,.9:1.06,.5:3.36,.1:7.78,.05:9.49,.025:11.14,.01:13.28,.005:14.86},5:{.995:.41,.99:.55,.975:.83,.95:1.15,.9:1.61,.5:4.35,.1:9.24,.05:11.07,.025:12.83,.01:15.09,.005:16.75},6:{.995:.68,.99:.87,.975:1.24,.95:1.64,.9:2.2,.5:5.35,.1:10.65,.05:12.59,.025:14.45,.01:16.81,.005:18.55},7:{.995:.99,.99:1.25,.975:1.69,.95:2.17,.9:2.83,.5:6.35,.1:12.02,.05:14.07,.025:16.01,.01:18.48,.005:20.28},8:{.995:1.34,.99:1.65,.975:2.18,.95:2.73,.9:3.49,.5:7.34,.1:13.36,.05:15.51,.025:17.53,.01:20.09,.005:21.96},9:{.995:1.73,.99:2.09,.975:2.7,.95:3.33,.9:4.17,.5:8.34,.1:14.68,.05:16.92,.025:19.02,.01:21.67,.005:23.59},10:{.995:2.16,.99:2.56,.975:3.25,.95:3.94,.9:4.87,.5:9.34,.1:15.99,.05:18.31,.025:20.48,.01:23.21,.005:25.19},11:{.995:2.6,.99:3.05,.975:3.82,.95:4.57,.9:5.58,.5:10.34,.1:17.28,.05:19.68,.025:21.92,.01:24.72,.005:26.76},12:{.995:3.07,.99:3.57,.975:4.4,.95:5.23,.9:6.3,.5:11.34,.1:18.55,.05:21.03,.025:23.34,.01:26.22,.005:28.3},13:{.995:3.57,.99:4.11,.975:5.01,.95:5.89,.9:7.04,.5:12.34,.1:19.81,.05:22.36,.025:24.74,.01:27.69,.005:29.82},14:{.995:4.07,.99:4.66,.975:5.63,.95:6.57,.9:7.79,.5:13.34,.1:21.06,.05:23.68,.025:26.12,.01:29.14,.005:31.32},15:{.995:4.6,.99:5.23,.975:6.27,.95:7.26,.9:8.55,.5:14.34,.1:22.31,.05:25,.025:27.49,.01:30.58,.005:32.8},16:{.995:5.14,.99:5.81,.975:6.91,.95:7.96,.9:9.31,.5:15.34,.1:23.54,.05:26.3,.025:28.85,.01:32,.005:34.27},17:{.995:5.7,.99:6.41,.975:7.56,.95:8.67,.9:10.09,.5:16.34,.1:24.77,.05:27.59,.025:30.19,.01:33.41,.005:35.72},18:{.995:6.26,.99:7.01,.975:8.23,.95:9.39,.9:10.87,.5:17.34,.1:25.99,.05:28.87,.025:31.53,.01:34.81,.005:37.16},19:{.995:6.84,.99:7.63,.975:8.91,.95:10.12,.9:11.65,.5:18.34,.1:27.2,.05:30.14,.025:32.85,.01:36.19,.005:38.58},20:{.995:7.43,.99:8.26,.975:9.59,.95:10.85,.9:12.44,.5:19.34,.1:28.41,.05:31.41,.025:34.17,.01:37.57,.005:40},21:{.995:8.03,.99:8.9,.975:10.28,.95:11.59,.9:13.24,.5:20.34,.1:29.62,.05:32.67,.025:35.48,.01:38.93,.005:41.4},22:{.995:8.64,.99:9.54,.975:10.98,.95:12.34,.9:14.04,.5:21.34,.1:30.81,.05:33.92,.025:36.78,.01:40.29,.005:42.8},23:{.995:9.26,.99:10.2,.975:11.69,.95:13.09,.9:14.85,.5:22.34,.1:32.01,.05:35.17,.025:38.08,.01:41.64,.005:44.18},24:{.995:9.89,.99:10.86,.975:12.4,.95:13.85,.9:15.66,.5:23.34,.1:33.2,.05:36.42,.025:39.36,.01:42.98,.005:45.56},25:{.995:10.52,.99:11.52,.975:13.12,.95:14.61,.9:16.47,.5:24.34,.1:34.28,.05:37.65,.025:40.65,.01:44.31,.005:46.93},26:{.995:11.16,.99:12.2,.975:13.84,.95:15.38,.9:17.29,.5:25.34,.1:35.56,.05:38.89,.025:41.92,.01:45.64,.005:48.29},27:{.995:11.81,.99:12.88,.975:14.57,.95:16.15,.9:18.11,.5:26.34,.1:36.74,.05:40.11,.025:43.19,.01:46.96,.005:49.65},28:{.995:12.46,.99:13.57,.975:15.31,.95:16.93,.9:18.94,.5:27.34,.1:37.92,.05:41.34,.025:44.46,.01:48.28,.005:50.99},29:{.995:13.12,.99:14.26,.975:16.05,.95:17.71,.9:19.77,.5:28.34,.1:39.09,.05:42.56,.025:45.72,.01:49.59,.005:52.34},30:{.995:13.79,.99:14.95,.975:16.79,.95:18.49,.9:20.6,.5:29.34,.1:40.26,.05:43.77,.025:46.98,.01:50.89,.005:53.67},40:{.995:20.71,.99:22.16,.975:24.43,.95:26.51,.9:29.05,.5:39.34,.1:51.81,.05:55.76,.025:59.34,.01:63.69,.005:66.77},50:{.995:27.99,.99:29.71,.975:32.36,.95:34.76,.9:37.69,.5:49.33,.1:63.17,.05:67.5,.025:71.42,.01:76.15,.005:79.49},60:{.995:35.53,.99:37.48,.975:40.48,.95:43.19,.9:46.46,.5:59.33,.1:74.4,.05:79.08,.025:83.3,.01:88.38,.005:91.95},70:{.995:43.28,.99:45.44,.975:48.76,.95:51.74,.9:55.33,.5:69.33,.1:85.53,.05:90.53,.025:95.02,.01:100.42,.005:104.22},80:{.995:51.17,.99:53.54,.975:57.15,.95:60.39,.9:64.28,.5:79.33,.1:96.58,.05:101.88,.025:106.63,.01:112.33,.005:116.32},90:{.995:59.2,.99:61.75,.975:65.65,.95:69.13,.9:73.29,.5:89.33,.1:107.57,.05:113.14,.025:118.14,.01:124.12,.005:128.3},100:{.995:67.33,.99:70.06,.975:74.22,.95:77.93,.9:82.36,.5:99.33,.1:118.5,.05:124.34,.025:129.56,.01:135.81,.005:140.17}},q=Math.sqrt(2*Math.PI),F={gaussian:function(t){return Math.exp(-.5*t*t)/q}},D={nrd:function(t){var n=k(t),e=y(t);return"number"==typeof e&&(n=Math.min(n,e/1.34)),1.06*n*Math.pow(t.length,-.2)}};function G(t,n,e){var r,i;if(void 0===n)r=F.gaussian;else if("string"==typeof n){if(!F[n])throw new Error('Unknown kernel "'+n+'"');r=F[n]}else r=n;if(void 0===e)i=D.nrd(t);else if("string"==typeof e){if(!D[e])throw new Error('Unknown bandwidth method "'+e+'"');i=D[e](t)}else i=e;return function(n){var e=0,o=0;for(e=0;e<t.length;e++)o+=r((n-t[e])/i);return o/i/t.length}}var H=Math.sqrt(2*Math.PI);function U(t){for(var n=t,e=t,r=1;r<15;r++)n+=e*=t*t/(2*r+1);return Math.round(1e4*(.5+n/H*Math.exp(-t*t/2)))/1e4}for(var V=[],W=0;W<=3.09;W+=.01)V.push(U(W));function Y(t){var n=1/(1+.5*Math.abs(t)),e=n*Math.exp(-Math.pow(t,2)-1.26551223+1.00002368*n+.37409196*Math.pow(n,2)+.09678418*Math.pow(n,3)-.18628806*Math.pow(n,4)+.27886807*Math.pow(n,5)-1.13520398*Math.pow(n,6)+1.48851587*Math.pow(n,7)-.82215223*Math.pow(n,8)+.17087277*Math.pow(n,9));return 0<=t?1-e:e-1}function $(t){var n=8*(Math.PI-3)/(3*Math.PI*(4-Math.PI)),e=Math.sqrt(Math.sqrt(Math.pow(2/(Math.PI*n)+Math.log(1-t*t)/2,2)-Math.log(1-t*t)/n)-(2/(Math.PI*n)+Math.log(1-t*t)/2));return 0<=t?e:-e}function J(t){if("number"==typeof t)return t<0?-1:0===t?0:1;throw new TypeError("not a number")}t.linearRegression=function(t){var n,e,r=t.length;if(1===r)e=t[n=0][1];else{for(var i,o,u,a=0,c=0,f=0,s=0,l=0;l<r;l++)a+=o=(i=t[l])[0],c+=u=i[1],f+=o*o,s+=o*u;e=c/r-(n=(r*s-a*c)/(r*f-a*a))*a/r}return{m:n,b:e}},t.linearRegressionLine=function(t){return function(n){return t.b+t.m*n}},t.standardDeviation=o,t.rSquared=function(t,n){if(t.length<2)return 1;for(var e,r=0,i=0;i<t.length;i++)r+=t[i][1];e=r/t.length;for(var o=0,u=0;u<t.length;u++)o+=Math.pow(e-t[u][1],2);for(var a=0,c=0;c<t.length;c++)a+=Math.pow(t[c][1]-n(t[c][0]),2);return 1-a/o},t.mode=function(t){return u(a(t))},t.modeFast=function(t){for(var n,e=new Map,r=0,i=0;i<t.length;i++){var o=e.get(t[i]);void 0===o?o=1:o++,r<o&&(n=t[i],r=o),e.set(t[i],o)}if(0===r)throw new Error("mode requires at last one data point");return n},t.modeSorted=u,t.min=c,t.max=f,t.extent=function(t){if(0===t.length)throw new Error("extent requires at least one data point");for(var n=t[0],e=t[0],r=1;r<t.length;r++)t[r]>e&&(e=t[r]),t[r]<n&&(n=t[r]);return[n,e]},t.minSorted=function(t){return t[0]},t.maxSorted=function(t){return t[t.length-1]},t.extentSorted=function(t){return[t[0],t[t.length-1]]},t.sum=n,t.sumSimple=function(t){for(var n=0,e=0;e<t.length;e++)n+=t[e];return n},t.product=function(t){for(var n=1,e=0;e<t.length;e++)n*=t[e];return n},t.quantile=p,t.quantileSorted=s,t.quantileRank=function(t,n){return b(a(t),n)},t.quantileRankSorted=b,t.interquartileRange=y,t.iqr=y,t.medianAbsoluteDeviation=O,t.mad=O,t.chunk=function(t,n){var e=[];if(n<1)throw new Error("chunk size must be a positive number");if(Math.floor(n)!==n)throw new Error("chunk size must be an integer");for(var r=0;r<t.length;r+=n)e.push(t.slice(r,r+n));return e},t.sampleWithReplacement=function(t,n,e){if(0===t.length)return[];e=e||Math.random;for(var r=t.length,i=[],o=0;o<n;o++){var u=Math.floor(e()*r);i.push(t[u])}return i},t.shuffle=m,t.shuffleInPlace=_,t.sample=function(t,n,e){return m(t,e).slice(0,n)},t.ckmeans=function(t,n){if(n>t.length)throw new Error("cannot generate more classes than there are data values");var e=a(t);if(1===w(e))return[e];var r=x(n,e.length),i=x(n,e.length);!function(t,n,e){for(var r,i=n[0].length,o=t[Math.floor(i/2)],u=[],a=[],c=0;c<i;++c)r=t[c]-o,0===c?(u.push(r),a.push(r*r)):(u.push(u[c-1]+r),a.push(a[c-1]+r*r)),n[0][c]=E(0,c,u,a),e[0][c]=0;for(var f=1;f<n.length;++f)M(f<n.length-1?f:i-1,i-1,f,n,e,u,a)}(e,r,i);for(var o=[],u=i[0].length-1,c=i.length-1;0<=c;c--){var f=i[c][u];o[c]=e.slice(f,u+1),0<c&&(u=f-1)}return o},t.uniqueCountSorted=w,t.sumNthPowerDeviations=r,t.equalIntervalBreaks=function(t,n){if(t.length<2)return t;for(var e=c(t),r=f(t),i=[e],o=(r-e)/n,u=1;u<n;u++)i.push(i[0]+o*u);return i.push(r),i},t.sampleCovariance=T,t.sampleCorrelation=function(t,n){return T(t,n)/k(t)/k(n)},t.sampleVariance=S,t.sampleStandardDeviation=k,t.sampleSkewness=function(t){if(t.length<3)throw new Error("sampleSkewness requires at least three data points");for(var n,r=e(t),i=0,o=0,u=0;u<t.length;u++)i+=(n=t[u]-r)*n,o+=n*n*n;var a=t.length-1,c=Math.sqrt(i/a),f=t.length;return f*o/((f-1)*(f-2)*Math.pow(c,3))},t.sampleKurtosis=function(t){var n=t.length;if(n<4)throw new Error("sampleKurtosis requires at least four data points");for(var r,i=e(t),o=0,u=0,a=0;a<n;a++)o+=(r=t[a]-i)*r,u+=r*r*r*r;return(n-1)/((n-2)*(n-3))*(n*(n+1)*u/(o*o)-3*(n-1))},t.permutationsHeap=function(t){for(var n=new Array(t.length),e=[t.slice()],r=0;r<t.length;r++)n[r]=0;for(r=0;r<t.length;)if(n[r]<r){var i=0;r%2!=0&&(i=n[r]);var o=t[i];t[i]=t[r],t[r]=o,e.push(t.slice()),n[r]++,r=0}else n[r]=0,r++;return e},t.combinations=function t(n,e){var r,i,o,u,a=[];for(r=0;r<n.length;r++)if(1===e)a.push([n[r]]);else for(o=t(n.slice(r+1,n.length),e-1),i=0;i<o.length;i++)(u=o[i]).unshift(n[r]),a.push(u);return a},t.combinationsReplacement=function t(n,e){for(var r=[],i=0;i<n.length;i++)if(1===e)r.push([n[i]]);else for(var o=t(n.slice(i,n.length),e-1),u=0;u<o.length;u++)r.push([n[i]].concat(o[u]));return r},t.addToMean=function(t,n,e){return t+(e-t)/(n+1)},t.combineMeans=C,t.combineVariances=function(t,n,e,r,i,o){var u=C(n,e,i,o);return(e*(t+Math.pow(n-u,2))+o*(r+Math.pow(i-u,2)))/(e+o)},t.geometricMean=function(t){if(0===t.length)throw new Error("geometricMean requires at least one data point");for(var n=1,e=0;e<t.length;e++){if(t[e]<=0)throw new Error("geometricMean requires only positive numbers as input");n*=t[e]}return Math.pow(n,1/t.length)},t.harmonicMean=function(t){if(0===t.length)throw new Error("harmonicMean requires at least one data point");for(var n=0,e=0;e<t.length;e++){if(t[e]<=0)throw new Error("harmonicMean requires only positive numbers as input");n+=1/t[e]}return t.length/n},t.average=e,t.mean=e,t.median=j,t.medianSorted=function(t){return s(t,.5)},t.subtractFromMean=function(t,n,e){return(t*n-e)/(n-1)},t.rootMeanSquare=P,t.rms=P,t.variance=i,t.tTest=function(t,n){return(e(t)-n)/(o(t)/Math.sqrt(t.length))},t.tTestTwoSample=function(t,n,r){var i=t.length,o=n.length;if(!i||!o)return null;r||(r=0);var u=e(t),a=e(n),c=S(t),f=S(n);if("number"==typeof u&&"number"==typeof a&&"number"==typeof c&&"number"==typeof f){var s=((i-1)*c+(o-1)*f)/(i+o-2);return(u-a-r)/Math.sqrt(s*(1/i+1/o))}},t.BayesianClassifier=N,t.bayesian=N,t.PerceptronModel=R,t.perceptron=R,t.epsilon=B,t.factorial=A,t.gamma=function t(n){if("number"==typeof(e=n)&&isFinite(e)&&Math.floor(e)===e)return n<=0?NaN:A(n-1);var e;if(--n<0)return Math.PI/(Math.sin(Math.PI*-n)*t(-n));var r=n+.25;return Math.pow(n/Math.E,n)*Math.sqrt(2*Math.PI*(n+1/6))*(1+1/144/Math.pow(r,2)-1/12960/Math.pow(r,3)-257/207360/Math.pow(r,4)-52/2612736/Math.pow(r,5)+5741173/9405849600/Math.pow(r,6)+37529/18811699200/Math.pow(r,7))},t.gammaln=function(t){if(t<=0)return 1/0;t--;for(var n=I[0],e=1;e<15;e++)n+=I[e]/(t+e);var r=5.2421875+t;return L+Math.log(n)-r+(t+.5)*Math.log(r)},t.bernoulliDistribution=function(t){if(t<0||1<t)throw new Error("bernoulliDistribution requires probability to be between 0 and 1 inclusive");return[1-t,t]},t.binomialDistribution=function(t,n){if(!(n<0||1<n||t<=0||t%1!=0)){for(var e=0,r=0,i=[],o=1;i[e]=o*Math.pow(n,e)*Math.pow(1-n,t-e),r+=i[e],o=o*(t-++e+1)/e,r<1-B;);return i}},t.poissonDistribution=function(t){if(!(t<=0)){for(var n=0,e=0,r=[],i=1;r[n]=Math.exp(-t)*Math.pow(t,n)/i,e+=r[n],i*=++n,e<1-B;);return r}},t.chiSquaredDistributionTable=z,t.chiSquaredGoodnessOfFit=function(t,n,r){for(var i,o,u=0,a=n(e(t)),c=[],f=[],s=0;s<t.length;s++)void 0===c[t[s]]&&(c[t[s]]=0),c[t[s]]++;for(s=0;s<c.length;s++)void 0===c[s]&&(c[s]=0);for(o in a)o in c&&(f[+o]=a[o]*t.length);for(o=f.length-1;0<=o;o--)f[o]<3&&(f[o-1]+=f[o],f.pop(),c[o-1]+=c[o],c.pop());for(o=0;o<c.length;o++)u+=Math.pow(c[o]-f[o],2)/f[o];return i=c.length-1-1,z[i][r]<u},t.kernelDensityEstimation=G,t.kde=G,t.zScore=function(t,n,e){return(t-n)/e},t.cumulativeStdNormalProbability=function(t){var n=Math.abs(t),e=Math.min(Math.round(100*n),V.length-1);return 0<=t?V[e]:+(1-V[e]).toFixed(4)},t.standardNormalTable=V,t.errorFunction=Y,t.erf=Y,t.inverseErrorFunction=$,t.probit=function(t){return 0===t?t=B:1<=t&&(t=1-B),Math.sqrt(2)*$(2*t-1)},t.permutationTest=function(t,n,r,i){if(void 0===i&&(i=1e4),void 0===r&&(r="two_side"),"two_side"!==r&&"greater"!==r&&"less"!==r)throw new Error("`alternative` must be either 'two_side', 'greater', or 'less'");for(var o=e(t)-e(n),u=new Array(i),a=t.concat(n),c=Math.floor(a.length/2),f=0;f<i;f++){_(a);var s=a.slice(0,c),l=a.slice(c,a.length),h=e(s)-e(l);u[f]=h}var p=0;if("two_side"===r)for(f=0;f<=i;f++)Math.abs(u[f])>=Math.abs(o)&&(p+=1);else if("greater"===r)for(f=0;f<=i;f++)u[f]>=o&&(p+=1);else for(f=0;f<=i;f++)u[f]<=o&&(p+=1);return p/i},t.bisect=function(t,n,e,r,i){if("function"!=typeof t)throw new TypeError("func must be a function");for(var o=0;o<r;o++){var u=(n+e)/2;if(0===t(u)||Math.abs((e-n)/2)<i)return u;J(t(u))===J(t(n))?n=u:e=u}throw new Error("maximum number of iterations exceeded")},t.quickselect=l,t.sign=J,t.numericSort=a,Object.defineProperty(t,"__esModule",{value:!0})}(n)},function(t,n,e){"use strict";n.a=function(){}},function(t,n,e){"use strict";n.c=o,n.b=u,e.d(n,"d",function(){return a});var r=e(0),i=e(1);function o(t,n){var e,r=t*Object(i.y)(n),o=30;do{n-=e=(n+Object(i.y)(n)-r)/(1+Object(i.h)(n))}while(Object(i.a)(e)>i.k&&--o>0);return n/2}function u(t,n,e){function r(r,u){return[t*r*Object(i.h)(u=o(e,u)),n*Object(i.y)(u)]}return r.invert=function(r,o){return o=Object(i.e)(o/n),[r/(t*Object(i.h)(o)),Object(i.e)((2*o+Object(i.y)(2*o))/e)]},r}var a=u(i.D/i.o,i.D,i.s);n.a=function(){return Object(r.geoProjection)(a).scale(169.529)}},function(t,n,e){"use strict";function r(t,n){t&&o.hasOwnProperty(t.type)&&o[t.type](t,n)}var i={Feature:function(t,n){r(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,i=-1,o=e.length;++i<o;)r(e[i].geometry,n)}},o={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){u(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)u(e[r],n,0)},Polygon:function(t,n){a(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)a(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,i=-1,o=e.length;++i<o;)r(e[i],n)}};function u(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function a(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)u(t[e],n,1);n.polygonEnd()}n.a=function(t,n){t&&i.hasOwnProperty(t.type)?i[t.type](t,n):r(t,n)}},function(t,n,e){"use strict";var r=e(14),i=e(0),o=e(1);function u(t,n){return Object(o.a)(t[0]-n[0])<o.k&&Object(o.a)(t[1]-n[1])<o.k}function a(t,n){for(var e,r,i,o=-1,u=t.length,a=t[0],c=[];++o<u;){r=((e=t[o])[0]-a[0])/n,i=(e[1]-a[1])/n;for(var f=0;f<n;++f)c.push([a[0]+f*r,a[1]+f*i]);a=e}return c.push(e),c}n.a=function(t,n){var e=function(t){var n,e,i,u,c,f,s,l=[],h=t[0].length;for(s=0;s<h;++s)e=(n=t[0][s])[0][0],i=n[0][1],u=n[1][1],c=n[2][0],f=n[2][1],l.push(a([[e+o.k,i+o.k],[e+o.k,u-o.k],[c-o.k,u-o.k],[c-o.k,f+o.k]],30));for(s=t[1].length-1;s>=0;--s)e=(n=t[1][s])[0][0],i=n[0][1],u=n[1][1],c=n[2][0],f=n[2][1],l.push(a([[c-o.k,f-o.k],[c-o.k,u+o.k],[e+o.k,u+o.k],[e+o.k,i-o.k]],30));return{type:"Polygon",coordinates:[Object(r.merge)(l)]}}(n),c=(n=n.map(function(t){return t.map(function(t){return[[t[0][0]*o.v,t[0][1]*o.v],[t[1][0]*o.v,t[1][1]*o.v],[t[2][0]*o.v,t[2][1]*o.v]]})})).map(function(n){return n.map(function(n){var e,r=t(n[0][0],n[0][1])[0],i=t(n[2][0],n[2][1])[0],o=t(n[1][0],n[0][1])[1],u=t(n[1][0],n[1][1])[1];return o>u&&(e=o,o=u,u=e),[[r,o],[i,u]]})});function f(e,r){for(var i=r<0?-1:1,o=n[+(r<0)],u=0,a=o.length-1;u<a&&e>o[u][2][0];++u);var c=t(e-o[u][1][0],r);return c[0]+=t(o[u][1][0],i*r>i*o[u][0][1]?o[u][0][1]:r)[0],c}t.invert&&(f.invert=function(e,r){for(var i=c[+(r<0)],o=n[+(r<0)],a=0,s=i.length;a<s;++a){var l=i[a];if(l[0][0]<=e&&e<l[1][0]&&l[0][1]<=r&&r<l[1][1]){var h=t.invert(e-t(o[a][1][0],0)[0],r);return h[0]+=o[a][1][0],u(f(h[0],h[1]),[e,r])?h:null}}});var s=Object(i.geoProjection)(f),l=s.stream;return s.stream=function(t){var n=s.rotate(),r=l(t),o=(s.rotate([0,0]),l(t));return s.rotate(n),r.sphere=function(){Object(i.geoStream)(e,o)},r},s}},function(t,n,e){var r=e(9),i=e(11),o=Object.keys?function(t){return Object.keys(t)}:function(t){var n=[];return r(t,function(e,r){i(t)&&"prototype"===r||n.push(r)}),n};t.exports=o},function(t,n,e){"use strict";n.a=function(){}},function(t,n,e){"use strict";function r(t,n){t&&o.hasOwnProperty(t.type)&&o[t.type](t,n)}var i={Feature:function(t,n){r(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,i=-1,o=e.length;++i<o;)r(e[i].geometry,n)}},o={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){u(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)u(e[r],n,0)},Polygon:function(t,n){a(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)a(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,i=-1,o=e.length;++i<o;)r(e[i],n)}};function u(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function a(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)u(t[e],n,1);n.polygonEnd()}n.a=function(t,n){t&&i.hasOwnProperty(t.type)?i[t.type](t,n):r(t,n)}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){var r=e(3);t.exports={assign:r}},function(t,n,e){"use strict";function r(){this.reset()}n.a=function(){return new r},r.prototype={constructor:r,reset:function(){this.s=this.t=0},add:function(t){o(i,t,this.t),o(this,i.s,this.s),this.s?this.t+=i.t:this.s=i.t},valueOf:function(){return this.s}};var i=new r;function o(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}},function(t,n,e){"use strict";n.a=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}},function(t,n,e){"use strict";var r=e(0),i=e(1);n.a=function(t){var n=0,e=Object(r.geoProjectionMutator)(t),o=e(n);return o.parallel=function(t){return arguments.length?e(n=t*i.v):n*i.j},o}},function(t,n,e){var r=e(9),i=e(54),o=Object.prototype.hasOwnProperty;t.exports=function(t,n){if(null===t||!i(t))return{};var e={};return r(n,function(n){o.call(t,n)&&(e[n]=t[n])}),e}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(349);e.d(n,"path",function(){return r.a})},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(369);e.d(n,"cluster",function(){return r.a});var i=e(86);e.d(n,"hierarchy",function(){return i.c});var o=e(381);e.d(n,"pack",function(){return o.a});var u=e(160);e.d(n,"packSiblings",function(){return u.a});var a=e(161);e.d(n,"packEnclose",function(){return a.a});var c=e(383);e.d(n,"partition",function(){return c.a});var f=e(384);e.d(n,"stratify",function(){return f.a});var s=e(385);e.d(n,"tree",function(){return s.a});var l=e(386);e.d(n,"treemap",function(){return l.a});var h=e(387);e.d(n,"treemapBinary",function(){return h.a});var p=e(45);e.d(n,"treemapDice",function(){return p.a});var v=e(55);e.d(n,"treemapSlice",function(){return v.a});var d=e(388);e.d(n,"treemapSliceDice",function(){return d.a});var g=e(88);e.d(n,"treemapSquarify",function(){return g.a});var b=e(389);e.d(n,"treemapResquarify",function(){return b.a})},function(t,n,e){"use strict";n.g=function(t){return[Object(r.e)(t[1],t[0]),Object(r.c)(t[2])]},n.a=function(t){var n=t[0],e=t[1],i=Object(r.g)(e);return[i*Object(r.g)(n),i*Object(r.t)(n),Object(r.t)(e)]},n.d=function(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]},n.c=function(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]},n.b=function(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]},n.f=function(t,n){return[t[0]*n,t[1]*n,t[2]*n]},n.e=function(t){var n=Object(r.u)(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n};var r=e(4)},function(t,n,e){"use strict";n.a=function(t){return null===t?NaN:+t}},function(t,n,e){"use strict";n.b=function(t){return function(n,e){var i=Object(r.g)(n),o=Object(r.g)(e),u=t(i*o);return[u*o*Object(r.t)(n),u*Object(r.t)(e)]}},n.a=function(t){return function(n,e){var i=Object(r.u)(n*n+e*e),o=t(i),u=Object(r.t)(o),a=Object(r.g)(o);return[Object(r.e)(n*u,i*a),Object(r.c)(i&&e*u/i)]}};var r=e(4)},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){return[t*Object(i.h)(n),n]}o.invert=function(t,n){return[t/Object(i.h)(n),n]},n.a=function(){return Object(r.geoProjection)(o).scale(152.63)}},function(t,n,e){function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var i=e(139),o=e(3),u=e(40),a=e(40),c=e(320),f=e(9),s=e(6),l=e(54),h=e(140),p=e(76),v=e(10),d=e(24),g=e(32);var b=function(t){function n(n,e){var i,u=r(r(i=t.call(this)||this));if(e=e||{},(n=n||{}).isDataSet||(e=n,n=null),o(u,{dataSet:n,loose:!n,dataType:"table",isView:!0,isDataView:!0,origin:[],rows:[],transforms:[],watchingStates:null},e),!u.loose){var a=u.watchingStates;n.on("statechange",function(t){s(a)?a.indexOf(t)>-1&&u._reExecute():u._reExecute()})}return i}!function(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n}(n,t);var e=n.prototype;return e._parseStateExpression=function(t){var n=this.dataSet,e=/^\$state\.(\w+)/.exec(t);return e?n.state[e[1]]:t},e._preparseOptions=function(t){var n=this,e=function(t){var n={};return f(t,function(t,e){p(t)&&t.isView?n[e]=t:s(t)?n[e]=t.concat([]):l(t)?n[e]=u(t):n[e]=t}),n}(t);return n.loose?e:(f(e,function(t,r){v(t)&&/^\$state\./.test(t)&&(e[r]=n._parseStateExpression(t))}),e)},e._prepareSource=function(t,e){var r=this,i=n.DataSet;if(r._source={source:t,options:e},e)e=r._preparseOptions(e),r.origin=i.getConnector(e.type)(t,e,r);else if(t instanceof n||v(t))r.origin=i.getConnector("default")(t,r.dataSet);else if(s(t))r.origin=t;else{if(!p(t)||!t.type)throw new TypeError("Invalid source");e=r._preparseOptions(t),r.origin=i.getConnector(e.type)(e,r)}return r.rows=a(r.origin),r},e.source=function(t,n){return this._prepareSource(t,n),this._reExecuteTransforms(),this.trigger("change"),this},e.transform=function(t){void 0===t&&(t={});return this.transforms.push(t),this._executeTransform(t),this},e._executeTransform=function(t){t=this._preparseOptions(t),n.DataSet.getTransform(t.type)(this,t)},e._reExecuteTransforms=function(){var t=this;t.transforms.forEach(function(n){t._executeTransform(n)})},e.addRow=function(t){this.rows.push(t)},e.removeRow=function(t){this.rows.splice(t,1)},e.updateRow=function(t,n){o(this.rows[t],n)},e.findRows=function(t){return this.rows.filter(function(n){return h(n,t)})},e.findRow=function(t){return c(this.rows,t)},e.getColumnNames=function(){var t=this.rows[0];return t?d(t):[]},e.getColumnName=function(t){return this.getColumnNames()[t]},e.getColumnIndex=function(t){return this.getColumnNames().indexOf(t)},e.getColumn=function(t){return this.rows.map(function(n){return n[t]})},e.getColumnData=function(t){return this.getColumn(t)},e.getSubset=function(t,n,e){for(var r=[],i=t;i<=n;i++)r.push(g(this.rows[i],e));return r},e.toString=function(t){return t?JSON.stringify(this.rows,null,2):JSON.stringify(this.rows)},e._reExecute=function(){var t=this._source,n=t.source,e=t.options;this._prepareSource(n,e),this._reExecuteTransforms(),this.trigger("change")},n}(i);t.exports=b},function(t,n,e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=e(6);t.exports=function t(n){if("object"!==(void 0===n?"undefined":r(n))||null===n)return n;var e=void 0;if(i(n)){e=[];for(var o=0,u=n.length;o<u;o++)"object"===r(n[o])&&null!=n[o]?e[o]=t(n[o]):e[o]=n[o]}else for(var a in e={},n)"object"===r(n[a])&&null!=n[a]?e[a]=t(n[a]):e[a]=n[a];return e}},function(t,n){var e={}.toString;t.exports=function(t,n){return e.call(t)==="[object "+n+"]"}},function(t,n,e){"use strict";function r(){this.reset()}n.a=function(){return new r},r.prototype={constructor:r,reset:function(){this.s=this.t=0},add:function(t){o(i,t,this.t),o(this,i.s,this.s),this.s?this.t+=i.t:this.s=i.t},valueOf:function(){return this.s}};var i=new r;function o(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}},function(t,n,e){"use strict";n.g=function(t){return[Object(r.e)(t[1],t[0]),Object(r.c)(t[2])]},n.a=function(t){var n=t[0],e=t[1],i=Object(r.g)(e);return[i*Object(r.g)(n),i*Object(r.t)(n),Object(r.t)(e)]},n.d=function(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]},n.c=function(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]},n.b=function(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]},n.f=function(t,n){return[t[0]*n,t[1]*n,t[2]*n]},n.e=function(t){var n=Object(r.u)(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n};var r=e(5)},function(t,n,e){"use strict";n.b=function(t){return function(n,e){var i=Object(r.g)(n),o=Object(r.g)(e),u=t(i*o);return[u*o*Object(r.t)(n),u*Object(r.t)(e)]}},n.a=function(t){return function(n,e){var i=Object(r.u)(n*n+e*e),o=t(i),u=Object(r.t)(o),a=Object(r.g)(o);return[Object(r.e)(n*u,i*a),Object(r.c)(i&&e*u/i)]}};var r=e(5)},function(t,n,e){"use strict";n.a=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f}},function(t,n,e){"use strict";e.d(n,"a",function(){return r}),e.d(n,"d",function(){return i}),e.d(n,"e",function(){return o}),e.d(n,"h",function(){return u}),e.d(n,"i",function(){return a}),e.d(n,"k",function(){return c}),e.d(n,"l",function(){return f}),e.d(n,"f",function(){return s}),e.d(n,"j",function(){return l}),e.d(n,"g",function(){return h}),e.d(n,"m",function(){return p}),n.b=function(t){return t>1?0:t<-1?l:Math.acos(t)},n.c=function(t){return t>=1?h:t<=-1?-h:Math.asin(t)};var r=Math.abs,i=Math.atan2,o=Math.cos,u=Math.max,a=Math.min,c=Math.sin,f=Math.sqrt,s=1e-12,l=Math.PI,h=l/2,p=2*l},function(t,n,e){"use strict";n.a=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}},function(t,n,e){"use strict";n.a=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}},function(t,n,e){"use strict";e.d(n,"f",function(){return h}),e.d(n,"g",function(){return p}),e.d(n,"a",function(){return r}),e.d(n,"b",function(){return i}),e.d(n,"c",function(){return o}),e.d(n,"e",function(){return u}),n.d=g;var r,i,o,u,a=e(513),c=e(191),f=e(192),s=e(100),l=e(99),h=1e-6,p=1e-12;function v(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function d(t,n){return n[1]-t[1]||n[0]-t[0]}function g(t,n){var e,h,p,v=t.sort(d).pop();for(u=[],i=new Array(t.length),r=new l.b,o=new l.b;;)if(p=f.c,v&&(!p||v[1]<p.y||v[1]===p.y&&v[0]<p.x))v[0]===e&&v[1]===h||(Object(a.a)(v),e=v[0],h=v[1]),v=t.pop();else{if(!p)break;Object(a.b)(p.arc)}if(Object(c.d)(),n){var g=+n[0][0],b=+n[0][1],y=+n[1][0],j=+n[1][1];Object(s.a)(g,b,y,j),Object(c.b)(g,b,y,j)}this.edges=u,this.cells=i,r=o=u=i=null}g.prototype={constructor:g,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return Object(c.a)(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a=e.site,c=-1,f=n[i[o-1]],s=f.left===a?f.right:f.left;++c<o;)u=s,s=(f=n[i[c]]).left===a?f.right:f.left,u&&s&&r<u.index&&r<s.index&&v(a,u,s)<0&&t.push([a.data,u.data,s.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],f=n-i.site[1],s=c*c+f*f;do{i=o.cells[r=u],u=null,i.halfedges.forEach(function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],f=n-a[1],l=c*c+f*f;l<s&&(s=l,u=a.index)}})}while(null!==u);return o._found=r,null==e||s<=e*e?i.site:null}}},function(t,n,e){"use strict";n.b=u;var r=e(105),i=e(4);function o(t,n){return[t>i.o?t-i.w:t<-i.o?t+i.w:t,n]}function u(t,n,e){return(t%=i.w)?n||e?Object(r.a)(c(t),f(n,e)):c(t):n||e?f(n,e):o}function a(t){return function(n,e){return[(n+=t)>i.o?n-i.w:n<-i.o?n+i.w:n,e]}}function c(t){var n=a(t);return n.invert=a(-t),n}function f(t,n){var e=Object(i.g)(t),r=Object(i.t)(t),o=Object(i.g)(n),u=Object(i.t)(n);function a(t,n){var a=Object(i.g)(n),c=Object(i.g)(t)*a,f=Object(i.t)(t)*a,s=Object(i.t)(n),l=s*e+c*r;return[Object(i.e)(f*o-l*u,c*e-s*r),Object(i.c)(l*o+f*u)]}return a.invert=function(t,n){var a=Object(i.g)(n),c=Object(i.g)(t)*a,f=Object(i.t)(t)*a,s=Object(i.t)(n),l=s*o-f*u;return[Object(i.e)(f*o+s*u,c*e+l*r),Object(i.c)(l*e-c*r)]},a}o.invert=o,n.a=function(t){function n(n){return(n=t(n[0]*i.r,n[1]*i.r))[0]*=i.h,n[1]*=i.h,n}return t=u(t[0]*i.r,t[1]*i.r,t.length>2?t[2]*i.r:0),n.invert=function(n){return(n=t.invert(n[0]*i.r,n[1]*i.r))[0]*=i.h,n[1]*=i.h,n},n}},function(t,n,e){"use strict";function r(t){return function(n){var e=new i;for(var r in t)e[r]=t[r];return e.stream=n,e}}function i(){}n.b=r,n.a=function(t){return{stream:r(t)}},i.prototype={constructor:i,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}}},function(t,n,e){"use strict";var r=e(1);n.a=function(t,n,e,i,o,u,a,c){function f(f,s){if(!s)return[t*f/r.s,0];var l=s*s,h=t+l*(n+l*(e+l*i)),p=s*(o-1+l*(u-c+l*a)),v=(h*h+p*p)/(2*p),d=f*Object(r.e)(h/v)/r.s;return[v*Object(r.y)(d),s*(1+l*c)+v*(1-Object(r.h)(d))]}return arguments.length<8&&(c=0),f.invert=function(f,s){var l,h,p=r.s*f/t,v=s,d=50;do{var g=v*v,b=t+g*(n+g*(e+g*i)),y=v*(o-1+g*(u-c+g*a)),j=b*b+y*y,O=2*y,_=j/O,m=_*_,w=Object(r.e)(b/_)/r.s,x=p*w,E=b*b,M=(2*n+g*(4*e+6*g*i))*v,T=o+g*(3*u+5*g*a),S=(2*(b*M+y*(T-1))*O-j*(2*(T-1)))/(O*O),k=Object(r.h)(x),C=Object(r.y)(x),P=_*k,N=_*C,R=p/r.s*(1/Object(r.B)(1-E/m))*(M*_-b*S)/m,B=N-f,A=v*(1+g*c)+_-P-s,I=S*C+P*R,L=P*w,z=1+S-(S*k-N*R),q=N*w,F=I*q-z*L;if(!F)break;p-=l=(A*I-B*z)/F,v-=h=(B*q-A*L)/F}while((Object(r.a)(l)>r.k||Object(r.a)(h)>r.k)&&--d>0);return[p,v]},f}},function(t,n,e){"use strict";var r=e(0),i=e(1),o=e(294);function u(t,n){return t&&n&&t[0]===n[0]&&t[1]===n[1]}function a(t){return t.project.invert||t.children&&t.children.some(a)}n.a=function(t,n,e){function c(t,e){var r,o=n(t,e),u=o.project([t*i.j,e*i.j]);return(r=o.transform)?[r[0]*u[0]+r[1]*u[1]+r[2],-(r[3]*u[0]+r[4]*u[1]+r[5])]:(u[1]=-u[1],u)}e=null==e?-i.s/6:e,function t(n,e){n.edges=function(t){for(var n=t.length,e=[],r=t[n-1],i=0;i<n;++i)e.push([r,r=t[i]]);return e}(n.face);if(e.face){var r=n.shared=function(t,n){for(var e,r,i=t.length,o=null,u=0;u<i;++u){e=t[u];for(var a=n.length;--a>=0;)if(r=n[a],e[0]===r[0]&&e[1]===r[1]){if(o)return[o,e];o=e}}}(n.face,e.face),i=Object(o.a)(r.map(e.project),r.map(n.project));n.transform=e.transform?Object(o.c)(e.transform,i):i;for(var a=e.edges,c=0,f=a.length;c<f;++c)u(r[0],a[c][1])&&u(r[1],a[c][0])&&(a[c]=n),u(r[0],a[c][0])&&u(r[1],a[c][1])&&(a[c]=n);for(a=n.edges,c=0,f=a.length;c<f;++c)u(r[0],a[c][0])&&u(r[1],a[c][1])&&(a[c]=e),u(r[0],a[c][1])&&u(r[1],a[c][0])&&(a[c]=e)}else n.transform=e.transform;n.children&&n.children.forEach(function(e){t(e,n)});return n}(t,{transform:[Object(i.h)(e),Object(i.y)(e),0,-Object(i.y)(e),Object(i.h)(e),0]}),a(t)&&(c.invert=function(e,r){var u=function t(e,r){var u=e.project.invert,a=e.transform,c=r;a&&(a=Object(o.b)(a),c=[a[0]*c[0]+a[1]*c[1]+a[2],a[3]*c[0]+a[4]*c[1]+a[5]]);if(u&&e===function(t){return n(t[0]*i.v,t[1]*i.v)}(f=u(c)))return f;var f,s=e.children;for(var l=0,h=s&&s.length;l<h;++l)if(f=t(s[l],r))return f}(t,[e,-r]);return u&&(u[0]*=i.v,u[1]*=i.v,u)});var f=Object(r.geoProjection)(c),s=f.stream;return f.stream=function(n){var e=f.rotate(),o=s(n),u=(f.rotate([0,0]),s(n));return f.rotate(e),o.sphere=function(){u.polygonStart(),u.lineStart(),function t(n,e,o){var u,a,c=e.edges,f=c.length,s={type:"MultiPoint",coordinates:e.face},l=e.face.filter(function(t){return 90!==Object(i.a)(t[1])}),h=Object(r.geoBounds)({type:"MultiPoint",coordinates:l}),p=!1,v=-1,d=h[1][0]-h[0][0];var g=180===d||360===d?[(h[0][0]+h[1][0])/2,(h[0][1]+h[1][1])/2]:Object(r.geoCentroid)(s);if(o)for(;++v<f&&c[v]!==o;);++v;for(var b=0;b<f;++b)a=c[(b+v)%f],Array.isArray(a)?(p||(n.point((u=Object(r.geoInterpolate)(a[0],g)(i.k))[0],u[1]),p=!0),n.point((u=Object(r.geoInterpolate)(a[1],g)(i.k))[0],u[1])):(p=!1,a!==o&&t(n,a,e))}(u,t),u.lineEnd(),u.polygonEnd()},o},f}},function(t,n,e){var r=e(321),i=e(41);t.exports=function(t){if(!r(t)||!i(t,"Object"))return!1;if(null===Object.getPrototypeOf(t))return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return Object.getPrototypeOf(t)===n}},function(t,n,e){"use strict";n.a=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f}},function(t,n,e){var r=e(41);t.exports=function(t){return r(t,"Number")}},function(t,n){t.exports=function(t,n){void 0===n&&(n=1);for(var e=t[0],r=t[1],i=[],o=e;o<r;)i.push(o),o+=n;return i.push(r),i}},function(t,n,e){var r=e(19),i=r.standardDeviation,o=r.interquartileRange;t.exports={silverman:function(t){var n=i(t),e=4*Math.pow(n,5),r=3*t.length;return Math.pow(e/r,.2)},nrd:function(t){var n=i(t),e=o(t);return"number"==typeof e&&(n=Math.min(n,e/1.34)),1.06*n*Math.pow(t.length,-.2)}}},function(t,n,e){"use strict";var r=e(8);t.exports={longestPath:function(t){var n={};r.forEach(t.sources(),function e(i){var o=t.node(i);if(r.has(n,i))return o.rank;n[i]=!0;var u=r.minBy(r.map(t.outEdges(i),function(n){return e(n.w)-t.edge(n).minlen}));u!==Number.POSITIVE_INFINITY&&void 0!==u&&null!==u||(u=0);return o.rank=u})},slack:function(t,n){return t.node(n.w).rank-t.node(n.v).rank-t.edge(n).minlen}}},function(t,n,e){"use strict";function r(t){this._context=t}r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},n.a=function(t){return new r(t)}},function(t,n,e){"use strict";n.a=function(){}},function(t,n,e){"use strict";function r(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function i(t){this._context=t}n.b=r,n.a=i,i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:r(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:r(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}}},function(t,n,e){"use strict";function r(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function i(t,n){this._context=t,this._k=(1-n)/6}n.b=r,n.a=i,i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:r(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:r(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new i(t,n)}return e.tension=function(n){return t(+n)},e})(0)},function(t,n,e){var r=e(193),i=function(){function t(t,n){void 0===n&&(n={});this.options=n,this.rootNode=r(t,n)}return t.prototype.execute=function(){throw new Error("please override this method")},t}();t.exports=i},function(t,n,e){"use strict";n.a=s;var r=e(4),i=e(106),o=e(200),u=e(107),a=e(14),c=1e9,f=-c;function s(t,n,e,s){function l(r,i){return t<=r&&r<=e&&n<=i&&i<=s}function h(r,i,o,u){var a=0,c=0;if(null==r||(a=p(r,o))!==(c=p(i,o))||d(r,i)<0^o>0)do{u.point(0===a||3===a?t:e,a>1?s:n)}while((a=(a+o+4)%4)!==c);else u.point(i[0],i[1])}function p(i,o){return Object(r.a)(i[0]-t)<r.i?o>0?0:3:Object(r.a)(i[0]-e)<r.i?o>0?2:1:Object(r.a)(i[1]-n)<r.i?o>0?1:0:o>0?3:2}function v(t,n){return d(t.x,n.x)}function d(t,n){var e=p(t,1),r=p(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(r){var p,d,g,b,y,j,O,_,m,w,x,E=r,M=Object(i.a)(),T={point:S,lineStart:function(){T.point=k,d&&d.push(g=[]);w=!0,m=!1,O=_=NaN},lineEnd:function(){p&&(k(b,y),j&&m&&M.rejoin(),p.push(M.result()));T.point=S,m&&E.lineEnd()},polygonStart:function(){E=M,p=[],d=[],x=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,r=d.length;e<r;++e)for(var i,o,u=d[e],a=1,c=u.length,f=u[0],l=f[0],h=f[1];a<c;++a)i=l,o=h,f=u[a],l=f[0],h=f[1],o<=s?h>s&&(l-i)*(s-o)>(h-o)*(t-i)&&++n:h<=s&&(l-i)*(s-o)<(h-o)*(t-i)&&--n;return n}(),e=x&&n,i=(p=Object(a.merge)(p)).length;(e||i)&&(r.polygonStart(),e&&(r.lineStart(),h(null,null,1,r),r.lineEnd()),i&&Object(u.a)(p,v,n,h,r),r.polygonEnd());E=r,p=d=g=null}};function S(t,n){l(t,n)&&E.point(t,n)}function k(r,i){var u=l(r,i);if(d&&g.push([r,i]),w)b=r,y=i,j=u,w=!1,u&&(E.lineStart(),E.point(r,i));else if(u&&m)E.point(r,i);else{var a=[O=Math.max(f,Math.min(c,O)),_=Math.max(f,Math.min(c,_))],h=[r=Math.max(f,Math.min(c,r)),i=Math.max(f,Math.min(c,i))];Object(o.a)(a,h,t,n,e,s)?(m||(E.lineStart(),E.point(a[0],a[1])),E.point(h[0],h[1]),u||E.lineEnd(),x=!1):u&&(E.lineStart(),E.point(r,i),x=!1)}O=r,_=i,m=u}return T}}n.b=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=s(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}}},function(t,n,e){"use strict";var r=e(36);n.a=function(t,n,e){if(null==e&&(e=r.a),i=t.length){if((n=+n)<=0||i<2)return+e(t[0],0,t);if(n>=1)return+e(t[i-1],i-1,t);var i,o=(i-1)*n,u=Math.floor(o),a=+e(t[u],u,t);return a+(+e(t[u+1],u+1,t)-a)*(o-u)}}},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";n.a=u;var r=e(4),i=e(69),o=e(229);function u(t,n){var e=Object(r.t)(t),i=(e+Object(r.t)(n))/2;if(Object(r.a)(i)<r.i)return Object(o.a)(t);var u=1+e*(2*i-e),a=Object(r.u)(u)/i;function c(t,n){var e=Object(r.u)(u-2*i*Object(r.t)(n))/i;return[e*Object(r.t)(t*=i),a-e*Object(r.g)(t)]}return c.invert=function(t,n){var e=a-n;return[Object(r.e)(t,Object(r.a)(e))/i*Object(r.s)(e),Object(r.c)((u-(t*t+e*e)*i*i)/(2*i))]},c}n.b=function(){return Object(i.a)(u).scale(155.424).center([0,33.6442])}},function(t,n,e){"use strict";n.a=function(t){var n=0,e=r.o/3,o=Object(i.b)(t),u=o(n,e);return u.parallels=function(t){return arguments.length?o(n=t[0]*r.r,e=t[1]*r.r):[n*r.h,e*r.h]},u};var r=e(4),i=e(17)},function(t,n,e){"use strict";n.a=o,n.b=function(t,n,e){return o(t,[[0,0],n],e)};var r=e(22),i=e(124);function o(t,n,e){var o=n[1][0]-n[0][0],u=n[1][1]-n[0][1],a=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=a&&t.clipExtent(null),Object(r.a)(e,t.stream(i.a));var c=i.a.result(),f=Math.min(o/(c[1][0]-c[0][0]),u/(c[1][1]-c[0][1])),s=+n[0][0]+(o-f*(c[1][0]+c[0][0]))/2,l=+n[0][1]+(u-f*(c[1][1]+c[0][1]))/2;return null!=a&&t.clipExtent(a),t.scale(150*f).translate([s,l])}},function(t,n,e){"use strict";n.c=u,n.b=a;var r=e(4),i=e(50),o=e(17);function u(t,n){return[t,Object(r.n)(Object(r.v)((r.l+n)/2))]}function a(t){var n,e,a,c=Object(o.a)(t),f=c.center,s=c.scale,l=c.translate,h=c.clipExtent,p=null;function v(){var o=r.o*s(),f=c(Object(i.a)(c.rotate()).invert([0,0]));return h(null==p?[[f[0]-o,f[1]-o],[f[0]+o,f[1]+o]]:t===u?[[Math.max(f[0]-o,p),n],[Math.min(f[0]+o,e),a]]:[[p,Math.max(f[1]-o,n)],[e,Math.min(f[1]+o,a)]])}return c.scale=function(t){return arguments.length?(s(t),v()):s()},c.translate=function(t){return arguments.length?(l(t),v()):l()},c.center=function(t){return arguments.length?(f(t),v()):f()},c.clipExtent=function(t){return arguments.length?(null==t?p=n=e=a=null:(p=+t[0][0],n=+t[0][1],e=+t[1][0],a=+t[1][1]),v()):null==p?null:[[p,n],[e,a]]},v()}u.invert=function(t,n){return[t,2*Object(r.d)(Object(r.k)(n))-r.l]},n.a=function(){return a(u).scale(961/r.w)}},function(t,n,e){"use strict";n.a=o;var r=e(0),i=e(1);function o(t,n){var e=Object(i.B)(1-Object(i.y)(n));return[2/i.E*t*e,i.E*(1-e)]}o.invert=function(t,n){var e=(e=n/i.E-1)*e;return[e>0?t*Object(i.B)(i.s/e)/2:0,Object(i.e)(1-e)]},n.b=function(){return Object(r.geoProjection)(o).scale(95.6464).center([0,30])}},function(t,n,e){"use strict";e.d(n,"b",function(){return u}),e.d(n,"d",function(){return a}),n.c=c;var r=e(0),i=e(21),o=e(38),u=.7109889596207567,a=.0528035274542;function c(t,n){return n>-u?((t=Object(i.d)(t,n))[1]+=a,t):Object(o.b)(t,n)}c.invert=function(t,n){return n>-u?i.d.invert(t,n-a):o.b.invert(t,n)},n.a=function(){return Object(r.geoProjection)(c).rotate([-20,-55]).scale(164.263).center([0,-5.4036])}},function(t,n,e){"use strict";var r=[[0,90],[-90,0],[0,0],[90,0],[180,0],[0,-90]];n.a=[[0,2,1],[0,3,2],[5,1,2],[5,2,3],[0,1,4],[0,4,3],[5,4,1],[5,3,4]].map(function(t){return t.map(function(t){return r[t]})})},function(t,n,e){"use strict";var r=e(0),i=e(1);n.a=function(t){var n=t(i.o,0)[0]-t(-i.o,0)[0];function e(e,r){var o=Object(i.a)(e)<i.o,u=t(o?e:e>0?e-i.s:e+i.s,r),a=(u[0]-u[1])*i.C,c=(u[0]+u[1])*i.C;if(o)return[a,c];var f=n*i.C,s=a>0^c>0?-1:1;return[s*a-Object(i.x)(c)*f,s*c-Object(i.x)(a)*f]}return t.invert&&(e.invert=function(e,r){var o=(e+r)*i.C,u=(r-e)*i.C,a=Object(i.a)(o)<.5*n&&Object(i.a)(u)<.5*n;if(!a){var c=n*i.C,f=o>0^u>0?-1:1,s=-f*e+(u>0?1:-1)*c,l=-f*r+(o>0?1:-1)*c;o=(-s-l)*i.C,u=(s-l)*i.C}var h=t.invert(o,u);return a||(h[0]+=o>0?i.s:-i.s),h}),Object(r.geoProjection)(e).rotate([-90,-90,45]).clipAngle(179.999)}},function(t,n){var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t){var n=void 0===t?"undefined":e(t);return null!==t&&"object"===n||"function"===n}},function(t,n){t.exports=function(t){return null===t||void 0===t}},function(t,n,e){"use strict";n.b=u;var r=e(144),i=e(5);function o(t,n){return[t>i.o?t-i.w:t<-i.o?t+i.w:t,n]}function u(t,n,e){return(t%=i.w)?n||e?Object(r.a)(c(t),f(n,e)):c(t):n||e?f(n,e):o}function a(t){return function(n,e){return[(n+=t)>i.o?n-i.w:n<-i.o?n+i.w:n,e]}}function c(t){var n=a(t);return n.invert=a(-t),n}function f(t,n){var e=Object(i.g)(t),r=Object(i.t)(t),o=Object(i.g)(n),u=Object(i.t)(n);function a(t,n){var a=Object(i.g)(n),c=Object(i.g)(t)*a,f=Object(i.t)(t)*a,s=Object(i.t)(n),l=s*e+c*r;return[Object(i.e)(f*o-l*u,c*e-s*r),Object(i.c)(l*o+f*u)]}return a.invert=function(t,n){var a=Object(i.g)(n),c=Object(i.g)(t)*a,f=Object(i.t)(t)*a,s=Object(i.t)(n),l=s*o-f*u;return[Object(i.e)(f*o+s*u,c*e+l*r),Object(i.c)(l*e-c*r)]},a}o.invert=o,n.a=function(t){function n(n){return(n=t(n[0]*i.r,n[1]*i.r))[0]*=i.h,n[1]*=i.h,n}return t=u(t[0]*i.r,t[1]*i.r,t.length>2?t[2]*i.r:0),n.invert=function(n){return(n=t.invert(n[0]*i.r,n[1]*i.r))[0]*=i.h,n[1]*=i.h,n},n}},function(t,n,e){"use strict";n.a=o;var r=e(5),i=e(80);function o(t,n){var e=Object(r.t)(t),i=(e+Object(r.t)(n))/2,o=1+e*(2*i-e),u=Object(r.u)(o)/i;function a(t,n){var e=Object(r.u)(o-2*i*Object(r.t)(n))/i;return[e*Object(r.t)(t*=i),u-e*Object(r.g)(t)]}return a.invert=function(t,n){var e=u-n;return[Object(r.e)(t,e)/i,Object(r.c)((o-(t*t+e*e)*i*i)/(2*i))]},a}n.b=function(){return Object(i.a)(o).scale(155.424).center([0,33.6442])}},function(t,n,e){"use strict";n.a=function(t){var n=0,e=r.o/3,o=Object(i.b)(t),u=o(n,e);return u.parallels=function(t){return arguments.length?o(n=t[0]*r.r,e=t[1]*r.r):[n*r.h,e*r.h]},u};var r=e(5),i=e(18)},function(t,n,e){"use strict";function r(t){function n(){}var e=n.prototype=Object.create(i.prototype);for(var r in t)e[r]=t[r];return function(t){var e=new n;return e.stream=t,e}}function i(){}n.b=r,n.a=function(t){return{stream:r(t)}},i.prototype={point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}}},function(t,n,e){"use strict";n.c=o,n.b=u;var r=e(18),i=e(5);function o(t,n){return[t,Object(i.n)(Object(i.v)((i.l+n)/2))]}function u(t){var n,e=Object(r.a)(t),o=e.scale,u=e.translate,a=e.clipExtent;return e.scale=function(t){return arguments.length?(o(t),n&&e.clipExtent(null),e):o()},e.translate=function(t){return arguments.length?(u(t),n&&e.clipExtent(null),e):u()},e.clipExtent=function(t){if(!arguments.length)return n?null:a();if(n=null==t){var r=i.o*o(),c=u();t=[[c[0]-r,c[1]-r],[c[0]+r,c[1]+r]]}return a(t),e},e.clipExtent(null)}o.invert=function(t,n){return[t,2*Object(i.d)(Object(i.k)(n))-i.l]},n.a=function(){return u(o).scale(961/i.w)}},function(t,n,e){var r=e(9),i=e(11),o=Object.values?function(t){return Object.values(t)}:function(t){var n=[];return r(t,function(e,r){i(t)&&"prototype"===r||n.push(e)}),n};t.exports=o},function(t,n){t.exports={HIERARCHY:"hierarchy",GEO:"geo",HEX:"hex",GRAPH:"graph",TABLE:"table",GEO_GRATICULE:"geo-graticule",STATISTICS_METHODS:["max","mean","median","min","mode","product","standardDeviation","sum","sumSimple","variance"]}},function(t,n,e){"use strict";var r={},i={},o=34,u=10,a=13;function c(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}n.a=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function f(t,n){var c,f=[],s=t.length,l=0,h=0,p=s<=0,v=!1;function d(){if(p)return i;if(v)return v=!1,r;var n,c,f=l;if(t.charCodeAt(f)===o){for(;l++<s&&t.charCodeAt(l)!==o||t.charCodeAt(++l)===o;);return(n=l)>=s?p=!0:(c=t.charCodeAt(l++))===u?v=!0:c===a&&(v=!0,t.charCodeAt(l)===u&&++l),t.slice(f+1,n-1).replace(/""/g,'"')}for(;l<s;){if((c=t.charCodeAt(n=l++))===u)v=!0;else if(c===a)v=!0,t.charCodeAt(l)===u&&++l;else if(c!==e)continue;return t.slice(f,n)}return p=!0,t.slice(f,s)}for(t.charCodeAt(s-1)===u&&--s,t.charCodeAt(s-1)===a&&--s;(c=d())!==i;){for(var g=[];c!==r&&c!==i;)g.push(c),c=d();n&&null==(g=n(g,h++))||f.push(g)}return f}function s(n){return n.map(l).join(t)}function l(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,i=f(t,function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=c(t);return function(r,i){return n(e(r),i,t)}}(t,n):c(t)});return i.columns=r||[],i},parseRows:f,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(l).join(t)].concat(n.map(function(n){return e.map(function(t){return l(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(s).join("\n")}}}},function(t,n,e){"use strict";n.c=v,n.b=b,n.a=y;var r=e(370),i=e(371),o=e(372),u=e(373),a=e(374),c=e(375),f=e(376),s=e(377),l=e(378),h=e(379),p=e(380);function v(t,n){var e,r,i,o,u,a=new y(t),c=+t.value&&(a.value=t.value),f=[a];for(null==n&&(n=d);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)f.push(r=e.children[o]=new y(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(b)}function d(t){return t.children}function g(t){t.data=t.data.data}function b(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function y(t){this.data=t,this.depth=this.height=0,this.parent=null}y.prototype=v.prototype={constructor:y,count:r.a,each:i.a,eachAfter:u.a,eachBefore:o.a,sum:a.a,sort:c.a,path:f.a,ancestors:s.a,descendants:l.a,leaves:h.a,links:p.a,copy:function(){return v(this).eachBefore(g)}}},function(t,n,e){"use strict";function r(t){if("function"!=typeof t)throw new Error;return t}n.a=function(t){return null==t?null:r(t)},n.b=r},function(t,n,e){"use strict";e.d(n,"b",function(){return o}),n.c=u;var r=e(45),i=e(55),o=(1+Math.sqrt(5))/2;function u(t,n,e,o,u,a){for(var c,f,s,l,h,p,v,d,g,b,y,j=[],O=n.children,_=0,m=0,w=O.length,x=n.value;_<w;){s=u-e,l=a-o;do{h=O[m++].value}while(!h&&m<w);for(p=v=h,y=h*h*(b=Math.max(l/s,s/l)/(x*t)),g=Math.max(v/y,y/p);m<w;++m){if(h+=f=O[m].value,f<p&&(p=f),f>v&&(v=f),y=h*h*b,(d=Math.max(v/y,y/p))>g){h-=f;break}g=d}j.push(c={value:h,dice:s<l,children:O.slice(_,m)}),c.dice?Object(r.a)(c,e,o,u,x?o+=l*h/x:a):Object(i.a)(c,e,o,x?e+=s*h/x:u,a),x-=h,_=m}return j}n.a=function t(n){function e(t,e,r,i,o){u(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(o)},function(t,n,e){"use strict";var r=e(165);n.a=function(t){if(null==t)return r.a;var n,e,i=t.scale[0],o=t.scale[1],u=t.translate[0],a=t.translate[1];return function(t,r){r||(n=e=0);var c=2,f=t.length,s=new Array(f);for(s[0]=(n+=t[0])*i+u,s[1]=(e+=t[1])*o+a;c<f;)s[c]=t[c],++c;return s}}},function(t,n,e){"use strict";n.b=u;var r=e(392),i=e(89);function o(t,n){var e=n.id,r=n.bbox,i=null==n.properties?{}:n.properties,o=u(t,n);return null==e&&null==r?{type:"Feature",properties:i,geometry:o}:null==r?{type:"Feature",id:e,properties:i,geometry:o}:{type:"Feature",id:e,bbox:r,properties:i,geometry:o}}function u(t,n){var e=Object(i.a)(t.transform),o=t.arcs;function u(t,n){n.length&&n.pop();for(var i=o[t<0?~t:t],u=0,a=i.length;u<a;++u)n.push(e(i[u],u));t<0&&Object(r.a)(n,a)}function a(t){return e(t)}function c(t){for(var n=[],e=0,r=t.length;e<r;++e)u(t[e],n);return n.length<2&&n.push(n[0]),n}function f(t){for(var n=c(t);n.length<4;)n.push(n[0]);return n}function s(t){return t.map(f)}return function t(n){var e,r=n.type;switch(r){case"GeometryCollection":return{type:r,geometries:n.geometries.map(t)};case"Point":e=a(n.coordinates);break;case"MultiPoint":e=n.coordinates.map(a);break;case"LineString":e=c(n.arcs);break;case"MultiLineString":e=n.arcs.map(c);break;case"Polygon":e=s(n.arcs);break;case"MultiPolygon":e=n.arcs.map(s);break;default:return null}return{type:r,coordinates:e}}(n)}n.a=function(t,n){return"GeometryCollection"===n.type?{type:"FeatureCollection",features:n.geometries.map(function(n){return o(t,n)})}:o(t,n)}},function(t,n){t.exports=function(t){return null!==t&&"function"!=typeof t&&isFinite(t.length)}},function(t,n){function e(t){return Math.abs(t)<=1?.5:0}t.exports={boxcar:e,cosine:function(t){return Math.abs(t)<=1?Math.PI/4*Math.cos(Math.PI/2*t):0},epanechnikov:function(t){return Math.abs(t)<1?.75*(1-t*t):0},gaussian:function(t){return.3989422804*Math.exp(-.5*t*t)},quartic:function(t){if(Math.abs(t)<1){var n=1-t*t;return.9375*n*n}return 0},triangular:function(t){var n=Math.abs(t);return n<1?1-n:0},tricube:function(t){return Math.abs(t)<1?70/81*function(t){var n=1-Math.pow(Math.abs(t),3);return Math.pow(n,3)}(t):0},triweight:function(t){if(Math.abs(t)<1){var n=1-t*t;return 35/32*n*n*n}return 0},uniform:e}},function(t,n,e){"use strict";var r=e(13);t.exports=a;var i="\0",o="\0",u="";function a(t){this._isDirected=!r.has(t,"directed")||t.directed,this._isMultigraph=!!r.has(t,"multigraph")&&t.multigraph,this._isCompound=!!r.has(t,"compound")&&t.compound,this._label=void 0,this._defaultNodeLabelFn=r.constant(void 0),this._defaultEdgeLabelFn=r.constant(void 0),this._nodes={},this._isCompound&&(this._parent={},this._children={},this._children[o]={}),this._in={},this._preds={},this._out={},this._sucs={},this._edgeObjs={},this._edgeLabels={}}function c(t,n){t[n]?t[n]++:t[n]=1}function f(t,n){--t[n]||delete t[n]}function s(t,n,e,o){var a=""+n,c=""+e;if(!t&&a>c){var f=a;a=c,c=f}return a+u+c+u+(r.isUndefined(o)?i:o)}function l(t,n){return s(t,n.v,n.w,n.name)}a.prototype._nodeCount=0,a.prototype._edgeCount=0,a.prototype.isDirected=function(){return this._isDirected},a.prototype.isMultigraph=function(){return this._isMultigraph},a.prototype.isCompound=function(){return this._isCompound},a.prototype.setGraph=function(t){return this._label=t,this},a.prototype.graph=function(){return this._label},a.prototype.setDefaultNodeLabel=function(t){return r.isFunction(t)||(t=r.constant(t)),this._defaultNodeLabelFn=t,this},a.prototype.nodeCount=function(){return this._nodeCount},a.prototype.nodes=function(){return r.keys(this._nodes)},a.prototype.sources=function(){var t=this;return r.filter(this.nodes(),function(n){return r.isEmpty(t._in[n])})},a.prototype.sinks=function(){var t=this;return r.filter(this.nodes(),function(n){return r.isEmpty(t._out[n])})},a.prototype.setNodes=function(t,n){var e=arguments,i=this;return r.each(t,function(t){e.length>1?i.setNode(t,n):i.setNode(t)}),this},a.prototype.setNode=function(t,n){return r.has(this._nodes,t)?(arguments.length>1&&(this._nodes[t]=n),this):(this._nodes[t]=arguments.length>1?n:this._defaultNodeLabelFn(t),this._isCompound&&(this._parent[t]=o,this._children[t]={},this._children[o][t]=!0),this._in[t]={},this._preds[t]={},this._out[t]={},this._sucs[t]={},++this._nodeCount,this)},a.prototype.node=function(t){return this._nodes[t]},a.prototype.hasNode=function(t){return r.has(this._nodes,t)},a.prototype.removeNode=function(t){var n=this;if(r.has(this._nodes,t)){var e=function(t){n.removeEdge(n._edgeObjs[t])};delete this._nodes[t],this._isCompound&&(this._removeFromParentsChildList(t),delete this._parent[t],r.each(this.children(t),function(t){n.setParent(t)}),delete this._children[t]),r.each(r.keys(this._in[t]),e),delete this._in[t],delete this._preds[t],r.each(r.keys(this._out[t]),e),delete this._out[t],delete this._sucs[t],--this._nodeCount}return this},a.prototype.setParent=function(t,n){if(!this._isCompound)throw new Error("Cannot set parent in a non-compound graph");if(r.isUndefined(n))n=o;else{for(var e=n+="";!r.isUndefined(e);e=this.parent(e))if(e===t)throw new Error("Setting "+n+" as parent of "+t+" would create a cycle");this.setNode(n)}return this.setNode(t),this._removeFromParentsChildList(t),this._parent[t]=n,this._children[n][t]=!0,this},a.prototype._removeFromParentsChildList=function(t){delete this._children[this._parent[t]][t]},a.prototype.parent=function(t){if(this._isCompound){var n=this._parent[t];if(n!==o)return n}},a.prototype.children=function(t){if(r.isUndefined(t)&&(t=o),this._isCompound){var n=this._children[t];if(n)return r.keys(n)}else{if(t===o)return this.nodes();if(this.hasNode(t))return[]}},a.prototype.predecessors=function(t){var n=this._preds[t];if(n)return r.keys(n)},a.prototype.successors=function(t){var n=this._sucs[t];if(n)return r.keys(n)},a.prototype.neighbors=function(t){var n=this.predecessors(t);if(n)return r.union(n,this.successors(t))},a.prototype.isLeaf=function(t){return 0===(this.isDirected()?this.successors(t):this.neighbors(t)).length},a.prototype.filterNodes=function(t){var n=new this.constructor({directed:this._isDirected,multigraph:this._isMultigraph,compound:this._isCompound});n.setGraph(this.graph());var e=this;r.each(this._nodes,function(e,r){t(r)&&n.setNode(r,e)}),r.each(this._edgeObjs,function(t){n.hasNode(t.v)&&n.hasNode(t.w)&&n.setEdge(t,e.edge(t))});var i={};return this._isCompound&&r.each(n.nodes(),function(t){n.setParent(t,function t(r){var o=e.parent(r);return void 0===o||n.hasNode(o)?(i[r]=o,o):o in i?i[o]:t(o)}(t))}),n},a.prototype.setDefaultEdgeLabel=function(t){return r.isFunction(t)||(t=r.constant(t)),this._defaultEdgeLabelFn=t,this},a.prototype.edgeCount=function(){return this._edgeCount},a.prototype.edges=function(){return r.values(this._edgeObjs)},a.prototype.setPath=function(t,n){var e=this,i=arguments;return r.reduce(t,function(t,r){return i.length>1?e.setEdge(t,r,n):e.setEdge(t,r),r}),this},a.prototype.setEdge=function(){var t,n,e,i,o=!1,u=arguments[0];"object"==typeof u&&null!==u&&"v"in u?(t=u.v,n=u.w,e=u.name,2===arguments.length&&(i=arguments[1],o=!0)):(t=u,n=arguments[1],e=arguments[3],arguments.length>2&&(i=arguments[2],o=!0)),t=""+t,n=""+n,r.isUndefined(e)||(e=""+e);var a=s(this._isDirected,t,n,e);if(r.has(this._edgeLabels,a))return o&&(this._edgeLabels[a]=i),this;if(!r.isUndefined(e)&&!this._isMultigraph)throw new Error("Cannot set a named edge when isMultigraph = false");this.setNode(t),this.setNode(n),this._edgeLabels[a]=o?i:this._defaultEdgeLabelFn(t,n,e);var f=function(t,n,e,r){var i=""+n,o=""+e;if(!t&&i>o){var u=i;i=o,o=u}var a={v:i,w:o};r&&(a.name=r);return a}(this._isDirected,t,n,e);return t=f.v,n=f.w,Object.freeze(f),this._edgeObjs[a]=f,c(this._preds[n],t),c(this._sucs[t],n),this._in[n][a]=f,this._out[t][a]=f,this._edgeCount++,this},a.prototype.edge=function(t,n,e){var r=1===arguments.length?l(this._isDirected,arguments[0]):s(this._isDirected,t,n,e);return this._edgeLabels[r]},a.prototype.hasEdge=function(t,n,e){var i=1===arguments.length?l(this._isDirected,arguments[0]):s(this._isDirected,t,n,e);return r.has(this._edgeLabels,i)},a.prototype.removeEdge=function(t,n,e){var r=1===arguments.length?l(this._isDirected,arguments[0]):s(this._isDirected,t,n,e),i=this._edgeObjs[r];return i&&(t=i.v,n=i.w,delete this._edgeLabels[r],delete this._edgeObjs[r],f(this._preds[n],t),f(this._sucs[t],n),delete this._in[n][r],delete this._out[t][r],this._edgeCount--),this},a.prototype.inEdges=function(t,n){var e=this._in[t];if(e){var i=r.values(e);return n?r.filter(i,function(t){return t.v===n}):i}},a.prototype.outEdges=function(t,n){var e=this._out[t];if(e){var i=r.values(e);return n?r.filter(i,function(t){return t.w===n}):i}},a.prototype.nodeEdges=function(t,n){var e=this.inEdges(t,n);if(e)return e.concat(this.outEdges(t,n))}},function(t,n,e){"use strict";e.d(n,"b",function(){return r});var r="$";function i(){}function o(t,n){var e=new i;if(t instanceof i)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,o=-1,u=t.length;if(null==n)for(;++o<u;)e.set(o,t[o]);else for(;++o<u;)e.set(n(r=t[o],o,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}i.prototype=o.prototype={constructor:i,has:function(t){return r+t in this},get:function(t){return this[r+t]},set:function(t,n){return this[r+t]=n,this},remove:function(t){var n=r+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===r&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===r&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===r&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===r&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===r&&++t;return t},empty:function(){for(var t in this)if(t[0]===r)return!1;return!0},each:function(t){for(var n in this)n[0]===r&&t(this[n],n.slice(1),this)}},n.a=o},function(t,n,e){"use strict";var r=e(33),i=e(27),o=e(60),u=e(96);n.a=function(){var t=u.a,n=u.b,e=Object(i.a)(!0),a=null,c=o.a,f=null;function s(i){var o,u,s,l=i.length,h=!1;for(null==a&&(f=c(s=Object(r.path)())),o=0;o<=l;++o)!(o<l&&e(u=i[o],o,i))===h&&((h=!h)?f.lineStart():f.lineEnd()),h&&f.point(+t(u,o,i),+n(u,o,i));if(s)return f=null,s+""||null}return s.x=function(n){return arguments.length?(t="function"==typeof n?n:Object(i.a)(+n),s):t},s.y=function(t){return arguments.length?(n="function"==typeof t?t:Object(i.a)(+t),s):n},s.defined=function(t){return arguments.length?(e="function"==typeof t?t:Object(i.a)(!!t),s):e},s.curve=function(t){return arguments.length?(c=t,null!=a&&(f=c(a)),s):c},s.context=function(t){return arguments.length?(null==t?a=f=null:f=c(a=t),s):a},s}},function(t,n,e){"use strict";n.a=function(t){return t[0]},n.b=function(t){return t[1]}},function(t,n,e){"use strict";n.a=o;var r=e(46),i=e(63);function o(t,n,e){var i=t._x1,o=t._y1,u=t._x2,a=t._y2;if(t._l01_a>r.f){var c=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,f=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*c-t._x0*t._l12_2a+t._x2*t._l01_2a)/f,o=(o*c-t._y0*t._l12_2a+t._y2*t._l01_2a)/f}if(t._l23_a>r.f){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);u=(u*s+t._x1*t._l23_2a-n*t._l12_2a)/l,a=(a*s+t._y1*t._l23_2a-e*t._l12_2a)/l}t._context.bezierCurveTo(i,o,u,a,t._x2,t._y2)}function u(t,n){this._context=t,this._alpha=n}u.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:o(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new u(t,n):new i.a(t,0)}return e.alpha=function(n){return t(+n)},e})(.5)},function(t,n,e){"use strict";n.b=i;var r=e(48);function i(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}n.a=function(t){var n=t.map(i);return Object(r.a)(t).sort(function(t,e){return n[t]-n[e]})}},function(t,n,e){"use strict";function r(){this._=null}function i(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function o(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function u(t){for(;t.L;)t=t.L;return t}n.a=function(t){t.U=t.C=t.L=t.R=t.P=t.N=null},r.prototype={constructor:r,insert:function(t,n){var e,r,a;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=u(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(a=r.R)&&a.C?(e.C=a.C=!1,r.C=!0,t=r):(t===e.R&&(i(this,e),e=(t=e).U),e.C=!1,r.C=!0,o(this,r)):(a=r.L)&&a.C?(e.C=a.C=!1,r.C=!0,t=r):(t===e.L&&(o(this,e),e=(t=e).U),e.C=!1,r.C=!0,i(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,a=t.U,c=t.L,f=t.R;if(e=c?f?u(f):c:f,a?a.L===t?a.L=e:a.R=e:this._=e,c&&f?(r=e.C,e.C=t.C,e.L=c,c.U=e,e!==f?(a=e.U,e.U=t.U,t=e.R,a.L=t,e.R=f,f.U=e):(e.U=a,a=e,t=e.R)):(r=t.C,t=e),t&&(t.U=a),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===a.L){if((n=a.R).C&&(n.C=!1,a.C=!0,i(this,a),n=a.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,o(this,n),n=a.R),n.C=a.C,a.C=n.R.C=!1,i(this,a),t=this._;break}}else if((n=a.L).C&&(n.C=!1,a.C=!0,o(this,a),n=a.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,i(this,n),n=a.L),n.C=a.C,a.C=n.L.C=!1,o(this,a),t=this._;break}n.C=!0,t=a,a=a.U}while(!t.C);t&&(t.C=!1)}}},n.b=r},function(t,n,e){"use strict";n.c=function(t,n,e,o){var u=[null,null],a=r.e.push(u)-1;u.left=t,u.right=n,e&&i(u,t,n,e);o&&i(u,n,t,o);return r.b[t.index].halfedges.push(a),r.b[n.index].halfedges.push(a),u},n.b=function(t,n,e){var r=[n,e];return r.left=t,r},n.d=i,n.a=function(t,n,e,i){var a,c=r.e.length;for(;c--;)u(a=r.e[c],t,n,e,i)&&o(a,t,n,e,i)&&(Math.abs(a[0][0]-a[1][0])>r.f||Math.abs(a[0][1]-a[1][1])>r.f)||delete r.e[c]};var r=e(49);function i(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function o(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],f=u[1],s=0,l=1,h=a[0]-c,p=a[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-f,p||!(o>0)){if(o/=p,p<0){if(o<s)return;o<l&&(l=o)}else if(p>0){if(o>l)return;o>s&&(s=o)}if(o=i-f,p||!(o<0)){if(o/=p,p<0){if(o>l)return;o>s&&(s=o)}else if(p>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[c+s*h,f+s*p]),l<1&&(t[1]=[c+l*h,f+l*p]),!0)}}}}}function u(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],f=t.left,s=t.right,l=f[0],h=f[1],p=s[0],v=s[1],d=(l+p)/2,g=(h+v)/2;if(v===h){if(d<n||d>=r)return;if(l>p){if(c){if(c[1]>=i)return}else c=[d,e];o=[d,i]}else{if(c){if(c[1]<e)return}else c=[d,i];o=[d,e]}}else if(a=g-(u=(l-p)/(v-h))*d,u<-1||u>1)if(l>p){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<v){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}},function(t,n,e){var r={compactBox:e(516),dendrogram:e(518),indented:e(520),mindmap:e(522)};t.exports=r},function(t,n,e){var r=e(194),i=["LR","RL","TB","BT","H","V"],o=["LR","RL","H"],u=i[0];t.exports=function(t,n,e){var a=n.direction||u;if(n.isHorizontal=function(t){return o.indexOf(t)>-1}(a),a&&-1===i.indexOf(a))throw new TypeError("Invalid direction: "+a);if(a===i[0])e(t,n);else if(a===i[1])e(t,n),t.right2left();else if(a===i[2])e(t,n);else if(a===i[3])e(t,n),t.bottom2top();else if(a===i[4]||a===i[5]){var c=r(t,n),f=c.left,s=c.right;e(f,n),e(s,n),n.isHorizontal?f.right2left():f.bottom2top(),s.translate(f.x-s.x,f.y-s.y),t.x=f.x,t.y=s.y;var l=t.getBoundingBox();n.isHorizontal?l.top<0&&t.translate(0,-l.top):l.left<0&&t.translate(-l.left,0)}return t.translate(-(t.x+t.width/2+t.hgap),-(t.y+t.height/2+t.vgap)),t}},function(t,n,e){"use strict";e.d(n,"a",function(){return h}),e.d(n,"b",function(){return v});var r,i,o,u,a,c=e(29),f=e(4),s=e(20),l=e(22),h=Object(c.a)(),p=Object(c.a)(),v={point:s.a,lineStart:s.a,lineEnd:s.a,polygonStart:function(){h.reset(),v.lineStart=d,v.lineEnd=g},polygonEnd:function(){var t=+h;p.add(t<0?f.w+t:t),this.lineStart=this.lineEnd=this.point=s.a},sphere:function(){p.add(f.w)}};function d(){v.point=b}function g(){y(r,i)}function b(t,n){v.point=y,r=t,i=n,t*=f.r,n*=f.r,o=t,u=Object(f.g)(n=n/2+f.q),a=Object(f.t)(n)}function y(t,n){t*=f.r,n=(n*=f.r)/2+f.q;var e=t-o,r=e>=0?1:-1,i=r*e,c=Object(f.g)(n),s=Object(f.t)(n),l=a*s,p=u*c+l*Object(f.g)(i),v=l*r*Object(f.t)(i);h.add(Object(f.e)(v,p)),o=t,u=c,a=s}n.c=function(t){return p.reset(),Object(l.a)(t,v),2*p}},function(t,n,e){"use strict";n.a=a;var r=e(35),i=e(199),o=e(4),u=e(50);function a(t,n,e,i,u,a){if(e){var f=Object(o.g)(n),s=Object(o.t)(n),l=i*e;null==u?(u=n+i*o.w,a=n-l/2):(u=c(f,u),a=c(f,a),(i>0?u<a:u>a)&&(u+=i*o.w));for(var h,p=u;i>0?p>a:p<a;p-=l)h=Object(r.g)([f,-s*Object(o.g)(p),-s*Object(o.t)(p)]),t.point(h[0],h[1])}}function c(t,n){(n=Object(r.a)(n))[0]-=t,Object(r.e)(n);var e=Object(o.b)(-n[1]);return((-n[2]<0?-e:e)+o.w-o.i)%o.w}n.b=function(){var t,n,e=Object(i.a)([0,0]),r=Object(i.a)(90),c=Object(i.a)(6),f={point:function(e,r){t.push(e=n(e,r)),e[0]*=o.h,e[1]*=o.h}};function s(){var i=e.apply(this,arguments),s=r.apply(this,arguments)*o.r,l=c.apply(this,arguments)*o.r;return t=[],n=Object(u.b)(-i[0]*o.r,-i[1]*o.r,0).invert,a(f,s,l,1),i={type:"Polygon",coordinates:[t]},t=n=null,i}return s.center=function(t){return arguments.length?(e="function"==typeof t?t:Object(i.a)([+t[0],+t[1]]),s):e},s.radius=function(t){return arguments.length?(r="function"==typeof t?t:Object(i.a)(+t),s):r},s.precision=function(t){return arguments.length?(c="function"==typeof t?t:Object(i.a)(+t),s):c},s}},function(t,n,e){"use strict";n.a=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}},function(t,n,e){"use strict";var r=e(20);n.a=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:r.a,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}},function(t,n,e){"use strict";var r=e(108);function i(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function o(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}n.a=function(t,n,e,u,a){var c,f,s=[],l=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,o=t[0],u=t[n];if(Object(r.a)(o,u)){for(a.lineStart(),c=0;c<n;++c)a.point((o=t[c])[0],o[1]);a.lineEnd()}else s.push(e=new i(o,t,null,!0)),l.push(e.o=new i(o,null,e,!1)),s.push(e=new i(u,t,null,!1)),l.push(e.o=new i(u,null,e,!0))}}),s.length){for(l.sort(n),o(s),o(l),c=0,f=l.length;c<f;++c)l[c].e=e=!e;for(var h,p,v=s[0];;){for(var d=v,g=!0;d.v;)if((d=d.n)===v)return;h=d.z,a.lineStart();do{if(d.v=d.o.v=!0,d.e){if(g)for(c=0,f=h.length;c<f;++c)a.point((p=h[c])[0],p[1]);else u(d.x,d.n.x,1,a);d=d.n}else{if(g)for(h=d.p.z,c=h.length-1;c>=0;--c)a.point((p=h[c])[0],p[1]);else u(d.x,d.p.x,-1,a);d=d.p}h=(d=d.o).z,g=!g}while(!d.v);a.lineEnd()}}}},function(t,n,e){"use strict";var r=e(4);n.a=function(t,n){return Object(r.a)(t[0]-n[0])<r.i&&Object(r.a)(t[1]-n[1])<r.i}},function(t,n,e){"use strict";e.d(n,"b",function(){return u}),e.d(n,"a",function(){return a});var r=e(30),i=e(110),o=Object(i.a)(r.a),u=o.right,a=o.left;n.c=u},function(t,n,e){"use strict";var r=e(30);n.a=function(t){return 1===t.length&&(t=function(t){return function(n,e){return Object(r.a)(t(n),e)}}(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}},function(t,n,e){"use strict";function r(t,n){return[t,n]}n.b=r,n.a=function(t,n){null==n&&(n=r);for(var e=0,i=t.length-1,o=t[0],u=new Array(i<0?0:i);e<i;)u[e]=n(o,o=t[++e]);return u}},function(t,n,e){"use strict";var r=e(113);n.a=function(t,n){var e=Object(r.a)(t,n);return e?Math.sqrt(e):e}},function(t,n,e){"use strict";var r=e(36);n.a=function(t,n){var e,i,o=t.length,u=0,a=-1,c=0,f=0;if(null==n)for(;++a<o;)isNaN(e=Object(r.a)(t[a]))||(f+=(i=e-c)*(e-(c+=i/++u)));else for(;++a<o;)isNaN(e=Object(r.a)(n(t[a],a,t)))||(f+=(i=e-c)*(e-(c+=i/++u)));if(u>1)return f/(u-1)}},function(t,n,e){"use strict";n.a=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}},function(t,n,e){"use strict";e.d(n,"b",function(){return i}),e.d(n,"a",function(){return o});var r=Array.prototype,i=r.slice,o=r.map},function(t,n,e){"use strict";n.a=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}},function(t,n,e){"use strict";n.b=u,n.c=function(t,n,e){var u=Math.abs(n-t)/Math.max(0,e),a=Math.pow(10,Math.floor(Math.log(u)/Math.LN10)),c=u/a;c>=r?a*=10:c>=i?a*=5:c>=o&&(a*=2);return n<t?-a:a};var r=Math.sqrt(50),i=Math.sqrt(10),o=Math.sqrt(2);function u(t,n,e){var u=(n-t)/Math.max(0,e),a=Math.floor(Math.log(u)/Math.LN10),c=u/Math.pow(10,a);return a>=0?(c>=r?10:c>=i?5:c>=o?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(c>=r?10:c>=i?5:c>=o?2:1)}n.a=function(t,n,e){var r,i,o,a,c=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=u(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++c<i;)o[c]=(t+c)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++c<i;)o[c]=(t-c)/a;return r&&o.reverse(),o}},function(t,n,e){"use strict";n.a=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}},function(t,n,e){"use strict";n.a=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}},function(t,n,e){"use strict";var r=e(119);function i(t){return t.length}n.a=function(t){if(!(u=t.length))return[];for(var n=-1,e=Object(r.a)(t,i),o=new Array(e);++n<e;)for(var u,a=-1,c=o[n]=new Array(u);++a<u;)c[a]=t[a][n];return o}},function(t,n,e){"use strict";var r=e(29),i=e(35),o=e(4),u=Object(r.a)();n.a=function(t,n){var e=n[0],r=n[1],a=[Object(o.t)(e),-Object(o.g)(e),0],c=0,f=0;u.reset();for(var s=0,l=t.length;s<l;++s)if(p=(h=t[s]).length)for(var h,p,v=h[p-1],d=v[0],g=v[1]/2+o.q,b=Object(o.t)(g),y=Object(o.g)(g),j=0;j<p;++j,d=_,b=w,y=x,v=O){var O=h[j],_=O[0],m=O[1]/2+o.q,w=Object(o.t)(m),x=Object(o.g)(m),E=_-d,M=E>=0?1:-1,T=M*E,S=T>o.o,k=b*w;if(u.add(Object(o.e)(k*M*Object(o.t)(T),y*x+k*Object(o.g)(T))),c+=S?E+M*o.w:E,S^d>=e^_>=e){var C=Object(i.c)(Object(i.a)(v),Object(i.a)(O));Object(i.e)(C);var P=Object(i.c)(a,C);Object(i.e)(P);var N=(S^E>=0?-1:1)*Object(o.c)(P[2]);(r>N||r===N&&(C[0]||C[1]))&&(f+=S^E>=0?1:-1)}}return(c<-o.i||c<o.i&&u<-o.i)^1&f}},function(t,n,e){"use strict";var r=e(123),i=[null,null],o={type:"LineString",coordinates:i};n.a=function(t,n){return i[0]=t,i[1]=n,Object(r.a)(o)}},function(t,n,e){"use strict";var r,i,o,u=e(29),a=e(4),c=e(20),f=e(22),s=Object(u.a)(),l={sphere:c.a,point:c.a,lineStart:function(){l.point=p,l.lineEnd=h},lineEnd:c.a,polygonStart:c.a,polygonEnd:c.a};function h(){l.point=l.lineEnd=c.a}function p(t,n){t*=a.r,n*=a.r,r=t,i=Object(a.t)(n),o=Object(a.g)(n),l.point=v}function v(t,n){t*=a.r,n*=a.r;var e=Object(a.t)(n),u=Object(a.g)(n),c=Object(a.a)(t-r),f=Object(a.g)(c),l=u*Object(a.t)(c),h=o*e-i*u*f,p=i*e+o*u*f;s.add(Object(a.e)(Object(a.u)(l*l+h*h),p)),r=t,i=e,o=u}n.a=function(t){return s.reset(),Object(f.a)(t,l),+s}},function(t,n,e){"use strict";var r=e(20),i=1/0,o=i,u=-i,a=u,c={point:function(t,n){t<i&&(i=t);t>u&&(u=t);n<o&&(o=n);n>a&&(a=n)},lineStart:r.a,lineEnd:r.a,polygonStart:r.a,polygonEnd:r.a,result:function(){var t=[[i,o],[u,a]];return u=a=-(o=i=1/0),t}};n.a=c},function(t,n,e){"use strict";var r=e(68);n.a=function(){return Object(r.b)().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}},function(t,n,e){"use strict";var r=e(106),i=e(107),o=e(4),u=e(121),a=e(14);function c(t){return t.length>1}function f(t,n){return((t=t.x)[0]<0?t[1]-o.l-o.i:o.l-t[1])-((n=n.x)[0]<0?n[1]-o.l-o.i:o.l-n[1])}n.a=function(t,n,e,o){return function(s,l){var h,p,v,d=n(l),g=s.invert(o[0],o[1]),b=Object(r.a)(),y=n(b),j=!1,O={point:_,lineStart:w,lineEnd:x,polygonStart:function(){O.point=E,O.lineStart=M,O.lineEnd=T,p=[],h=[]},polygonEnd:function(){O.point=_,O.lineStart=w,O.lineEnd=x,p=Object(a.merge)(p);var t=Object(u.a)(h,g);p.length?(j||(l.polygonStart(),j=!0),Object(i.a)(p,f,t,e,l)):t&&(j||(l.polygonStart(),j=!0),l.lineStart(),e(null,null,1,l),l.lineEnd()),j&&(l.polygonEnd(),j=!1),p=h=null},sphere:function(){l.polygonStart(),l.lineStart(),e(null,null,1,l),l.lineEnd(),l.polygonEnd()}};function _(n,e){var r=s(n,e);t(n=r[0],e=r[1])&&l.point(n,e)}function m(t,n){var e=s(t,n);d.point(e[0],e[1])}function w(){O.point=m,d.lineStart()}function x(){O.point=_,d.lineEnd()}function E(t,n){v.push([t,n]);var e=s(t,n);y.point(e[0],e[1])}function M(){y.lineStart(),v=[]}function T(){E(v[0][0],v[0][1]),y.lineEnd();var t,n,e,r,i=y.clean(),o=b.result(),u=o.length;if(v.pop(),h.push(v),v=null,u)if(1&i){if((n=(e=o[0]).length-1)>0){for(j||(l.polygonStart(),j=!0),l.lineStart(),t=0;t<n;++t)l.point((r=e[t])[0],r[1]);l.lineEnd()}}else u>1&&2&i&&o.push(o.pop().concat(o.shift())),p.push(o.filter(c))}return O}}},function(t,n,e){"use strict";n.b=i;var r=e(17);function i(t,n){return[t,n]}i.invert=i,n.a=function(){return Object(r.a)(i).scale(152.63)}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(240);e.d(n,"geoAiry",function(){return r.b}),e.d(n,"geoAiryRaw",function(){return r.a});var i=e(129);e.d(n,"geoAitoff",function(){return i.b}),e.d(n,"geoAitoffRaw",function(){return i.a});var o=e(241);e.d(n,"geoArmadillo",function(){return o.b}),e.d(n,"geoArmadilloRaw",function(){return o.a});var u=e(130);e.d(n,"geoAugust",function(){return u.b}),e.d(n,"geoAugustRaw",function(){return u.a});var a=e(242);e.d(n,"geoBaker",function(){return a.b}),e.d(n,"geoBakerRaw",function(){return a.a});var c=e(243);e.d(n,"geoBerghaus",function(){return c.b}),e.d(n,"geoBerghausRaw",function(){return c.a});var f=e(131);e.d(n,"geoBoggs",function(){return f.b}),e.d(n,"geoBoggsRaw",function(){return f.a});var s=e(244);e.d(n,"geoBonne",function(){return s.b}),e.d(n,"geoBonneRaw",function(){return s.a});var l=e(245);e.d(n,"geoBottomley",function(){return l.b}),e.d(n,"geoBottomleyRaw",function(){return l.a});var h=e(246);e.d(n,"geoBromley",function(){return h.b}),e.d(n,"geoBromleyRaw",function(){return h.a});var p=e(247);e.d(n,"geoChamberlin",function(){return p.c}),e.d(n,"geoChamberlinRaw",function(){return p.b}),e.d(n,"geoChamberlinAfrica",function(){return p.a});var v=e(72);e.d(n,"geoCollignon",function(){return v.b}),e.d(n,"geoCollignonRaw",function(){return v.a});var d=e(248);e.d(n,"geoCraig",function(){return d.b}),e.d(n,"geoCraigRaw",function(){return d.a});var g=e(249);e.d(n,"geoCraster",function(){return g.b}),e.d(n,"geoCrasterRaw",function(){return g.a});var b=e(132);e.d(n,"geoCylindricalEqualArea",function(){return b.b}),e.d(n,"geoCylindricalEqualAreaRaw",function(){return b.a});var y=e(250);e.d(n,"geoCylindricalStereographic",function(){return y.b}),e.d(n,"geoCylindricalStereographicRaw",function(){return y.a});var j=e(251);e.d(n,"geoEckert1",function(){return j.a}),e.d(n,"geoEckert1Raw",function(){return j.b});var O=e(252);e.d(n,"geoEckert2",function(){return O.a}),e.d(n,"geoEckert2Raw",function(){return O.b});var _=e(253);e.d(n,"geoEckert3",function(){return _.a}),e.d(n,"geoEckert3Raw",function(){return _.b});var m=e(254);e.d(n,"geoEckert4",function(){return m.a}),e.d(n,"geoEckert4Raw",function(){return m.b});var w=e(255);e.d(n,"geoEckert5",function(){return w.a}),e.d(n,"geoEckert5Raw",function(){return w.b});var x=e(256);e.d(n,"geoEckert6",function(){return x.a}),e.d(n,"geoEckert6Raw",function(){return x.b});var E=e(257);e.d(n,"geoEisenlohr",function(){return E.a}),e.d(n,"geoEisenlohrRaw",function(){return E.b});var M=e(258);e.d(n,"geoFahey",function(){return M.a}),e.d(n,"geoFaheyRaw",function(){return M.b});var T=e(259);e.d(n,"geoFoucaut",function(){return T.a}),e.d(n,"geoFoucautRaw",function(){return T.b});var S=e(260);e.d(n,"geoGilbert",function(){return S.a});var k=e(261);e.d(n,"geoGingery",function(){return k.a}),e.d(n,"geoGingeryRaw",function(){return k.b});var C=e(262);e.d(n,"geoGinzburg4",function(){return C.a}),e.d(n,"geoGinzburg4Raw",function(){return C.b});var P=e(263);e.d(n,"geoGinzburg5",function(){return P.a}),e.d(n,"geoGinzburg5Raw",function(){return P.b});var N=e(264);e.d(n,"geoGinzburg6",function(){return N.a}),e.d(n,"geoGinzburg6Raw",function(){return N.b});var R=e(265);e.d(n,"geoGinzburg8",function(){return R.a}),e.d(n,"geoGinzburg8Raw",function(){return R.b});var B=e(266);e.d(n,"geoGinzburg9",function(){return B.a}),e.d(n,"geoGinzburg9Raw",function(){return B.b});var A=e(133);e.d(n,"geoGringorten",function(){return A.a}),e.d(n,"geoGringortenRaw",function(){return A.b});var I=e(135);e.d(n,"geoGuyou",function(){return I.a}),e.d(n,"geoGuyouRaw",function(){return I.b});var L=e(268);e.d(n,"geoHammer",function(){return L.a}),e.d(n,"geoHammerRaw",function(){return L.b});var z=e(269);e.d(n,"geoHammerRetroazimuthal",function(){return z.a}),e.d(n,"geoHammerRetroazimuthalRaw",function(){return z.b});var q=e(270);e.d(n,"geoHealpix",function(){return q.a}),e.d(n,"geoHealpixRaw",function(){return q.b});var F=e(271);e.d(n,"geoHill",function(){return F.a}),e.d(n,"geoHillRaw",function(){return F.b});var D=e(136);e.d(n,"geoHomolosine",function(){return D.a}),e.d(n,"geoHomolosineRaw",function(){return D.b});var G=e(23);e.d(n,"geoInterrupt",function(){return G.a});var H=e(272);e.d(n,"geoInterruptedBoggs",function(){return H.a});var U=e(273);e.d(n,"geoInterruptedHomolosine",function(){return U.a});var V=e(274);e.d(n,"geoInterruptedMollweide",function(){return V.a});var W=e(275);e.d(n,"geoInterruptedMollweideHemispheres",function(){return W.a});var Y=e(276);e.d(n,"geoInterruptedSinuMollweide",function(){return Y.a});var $=e(277);e.d(n,"geoInterruptedSinusoidal",function(){return $.a});var J=e(278);e.d(n,"geoKavrayskiy7",function(){return J.a}),e.d(n,"geoKavrayskiy7Raw",function(){return J.b});var K=e(279);e.d(n,"geoLagrange",function(){return K.a}),e.d(n,"geoLagrangeRaw",function(){return K.b});var X=e(280);e.d(n,"geoLarrivee",function(){return X.a}),e.d(n,"geoLarriveeRaw",function(){return X.b});var Z=e(281);e.d(n,"geoLaskowski",function(){return Z.a}),e.d(n,"geoLaskowskiRaw",function(){return Z.b});var Q=e(282);e.d(n,"geoLittrow",function(){return Q.a}),e.d(n,"geoLittrowRaw",function(){return Q.b});var tt=e(283);e.d(n,"geoLoximuthal",function(){return tt.a}),e.d(n,"geoLoximuthalRaw",function(){return tt.b});var nt=e(284);e.d(n,"geoMiller",function(){return nt.a}),e.d(n,"geoMillerRaw",function(){return nt.b});var et=e(285);e.d(n,"geoModifiedStereographic",function(){return et.a}),e.d(n,"geoModifiedStereographicRaw",function(){return et.g}),e.d(n,"geoModifiedStereographicAlaska",function(){return et.b}),e.d(n,"geoModifiedStereographicGs48",function(){return et.c}),e.d(n,"geoModifiedStereographicGs50",function(){return et.d}),e.d(n,"geoModifiedStereographicMiller",function(){return et.f}),e.d(n,"geoModifiedStereographicLee",function(){return et.e});var rt=e(21);e.d(n,"geoMollweide",function(){return rt.a}),e.d(n,"geoMollweideRaw",function(){return rt.d});var it=e(286);e.d(n,"geoMtFlatPolarParabolic",function(){return it.a}),e.d(n,"geoMtFlatPolarParabolicRaw",function(){return it.b});var ot=e(287);e.d(n,"geoMtFlatPolarQuartic",function(){return ot.a}),e.d(n,"geoMtFlatPolarQuarticRaw",function(){return ot.b});var ut=e(288);e.d(n,"geoMtFlatPolarSinusoidal",function(){return ut.a}),e.d(n,"geoMtFlatPolarSinusoidalRaw",function(){return ut.b});var at=e(289);e.d(n,"geoNaturalEarth",function(){return at.a}),e.d(n,"geoNaturalEarthRaw",function(){return at.b});var ct=e(290);e.d(n,"geoNaturalEarth2",function(){return ct.a}),e.d(n,"geoNaturalEarth2Raw",function(){return ct.b});var ft=e(291);e.d(n,"geoNellHammer",function(){return ft.a}),e.d(n,"geoNellHammerRaw",function(){return ft.b});var st=e(292);e.d(n,"geoPatterson",function(){return st.a}),e.d(n,"geoPattersonRaw",function(){return st.b});var lt=e(293);e.d(n,"geoPolyconic",function(){return lt.a}),e.d(n,"geoPolyconicRaw",function(){return lt.b});var ht=e(53);e.d(n,"geoPolyhedral",function(){return ht.a});var pt=e(295);e.d(n,"geoPolyhedralButterfly",function(){return pt.a});var vt=e(296);e.d(n,"geoPolyhedralCollignon",function(){return vt.a});var dt=e(297);e.d(n,"geoPolyhedralWaterman",function(){return dt.a});var gt=e(298);e.d(n,"geoProject",function(){return gt.a});var bt=e(302);e.d(n,"geoGringortenQuincuncial",function(){return bt.a});var yt=e(137);e.d(n,"geoPeirceQuincuncial",function(){return yt.a}),e.d(n,"geoPierceQuincuncial",function(){return yt.a});var jt=e(303);e.d(n,"geoQuantize",function(){return jt.a});var Ot=e(75);e.d(n,"geoQuincuncial",function(){return Ot.a});var _t=e(304);e.d(n,"geoRectangularPolyconic",function(){return _t.a}),e.d(n,"geoRectangularPolyconicRaw",function(){return _t.b});var mt=e(305);e.d(n,"geoRobinson",function(){return mt.a}),e.d(n,"geoRobinsonRaw",function(){return mt.b});var wt=e(306);e.d(n,"geoSatellite",function(){return wt.a}),e.d(n,"geoSatelliteRaw",function(){return wt.b});var xt=e(73);e.d(n,"geoSinuMollweide",function(){return xt.a}),e.d(n,"geoSinuMollweideRaw",function(){return xt.c});var Et=e(38);e.d(n,"geoSinusoidal",function(){return Et.a}),e.d(n,"geoSinusoidalRaw",function(){return Et.b});var Mt=e(307);e.d(n,"geoStitch",function(){return Mt.a});var Tt=e(308);e.d(n,"geoTimes",function(){return Tt.a}),e.d(n,"geoTimesRaw",function(){return Tt.b});var St=e(309);e.d(n,"geoTwoPointAzimuthal",function(){return St.a}),e.d(n,"geoTwoPointAzimuthalRaw",function(){return St.b}),e.d(n,"geoTwoPointAzimuthalUsa",function(){return St.c});var kt=e(310);e.d(n,"geoTwoPointEquidistant",function(){return kt.a}),e.d(n,"geoTwoPointEquidistantRaw",function(){return kt.b}),e.d(n,"geoTwoPointEquidistantUsa",function(){return kt.c});var Ct=e(311);e.d(n,"geoVanDerGrinten",function(){return Ct.a}),e.d(n,"geoVanDerGrintenRaw",function(){return Ct.b});var Pt=e(312);e.d(n,"geoVanDerGrinten2",function(){return Pt.a}),e.d(n,"geoVanDerGrinten2Raw",function(){return Pt.b});var Nt=e(313);e.d(n,"geoVanDerGrinten3",function(){return Nt.a}),e.d(n,"geoVanDerGrinten3Raw",function(){return Nt.b});var Rt=e(314);e.d(n,"geoVanDerGrinten4",function(){return Rt.a}),e.d(n,"geoVanDerGrinten4Raw",function(){return Rt.b});var Bt=e(315);e.d(n,"geoWagner4",function(){return Bt.a}),e.d(n,"geoWagner4Raw",function(){return Bt.b});var At=e(316);e.d(n,"geoWagner6",function(){return At.a}),e.d(n,"geoWagner6Raw",function(){return At.b});var It=e(317);e.d(n,"geoWagner7",function(){return It.a}),e.d(n,"geoWagner7Raw",function(){return It.b});var Lt=e(318);e.d(n,"geoWiechel",function(){return Lt.a}),e.d(n,"geoWiechelRaw",function(){return Lt.b});var zt=e(319);e.d(n,"geoWinkel3",function(){return zt.a}),e.d(n,"geoWinkel3Raw",function(){return zt.b})},function(t,n,e){"use strict";n.a=o;var r=e(0),i=e(1);function o(t,n){var e=Object(i.h)(n),r=Object(i.z)(Object(i.b)(e*Object(i.h)(t/=2)));return[2*e*Object(i.y)(t)*r,Object(i.y)(n)*r]}o.invert=function(t,n){if(!(t*t+4*n*n>i.s*i.s+i.k)){var e=t,r=n,o=25;do{var u,a=Object(i.y)(e),c=Object(i.y)(e/2),f=Object(i.h)(e/2),s=Object(i.y)(r),l=Object(i.h)(r),h=Object(i.y)(2*r),p=s*s,v=l*l,d=c*c,g=1-v*f*f,b=g?Object(i.b)(l*f)*Object(i.B)(u=1/g):u=0,y=2*b*l*c-t,j=b*s-n,O=u*(v*d+b*l*f*p),_=u*(.5*a*h-2*b*s*c),m=.25*u*(h*c-b*s*v*a),w=u*(p*f+b*d*l),x=_*m-w*O;if(!x)break;var E=(j*_-y*w)/x,M=(y*m-j*O)/x;e-=E,r-=M}while((Object(i.a)(E)>i.k||Object(i.a)(M)>i.k)&&--o>0);return[e,r]}},n.b=function(){return Object(r.geoProjection)(o).scale(152.63)}},function(t,n,e){"use strict";n.a=o;var r=e(0),i=e(1);function o(t,n){var e=Object(i.F)(n/2),r=Object(i.B)(1-e*e),o=1+r*Object(i.h)(t/=2),u=Object(i.y)(t)*r/o,a=e/o,c=u*u,f=a*a;return[4/3*u*(3+c-3*f),4/3*a*(3+3*c-f)]}o.invert=function(t,n){if(n*=3/8,!(t*=3/8)&&Object(i.a)(n)>1)return null;var e=1+t*t+n*n,r=Object(i.B)((e-Object(i.B)(e*e-4*n*n))/2),o=Object(i.e)(r)/3,u=r?Object(i.c)(Object(i.a)(n/r))/3:Object(i.d)(Object(i.a)(t))/3,a=Object(i.h)(o),c=Object(i.i)(u),f=c*c-a*a;return[2*Object(i.x)(t)*Object(i.g)(Object(i.A)(u)*a,.25-f),2*Object(i.x)(n)*Object(i.g)(c*Object(i.y)(o),.25+f)]},n.b=function(){return Object(r.geoProjection)(o).scale(66.1603)}},function(t,n,e){"use strict";n.a=c;var r=e(0),i=e(21),o=e(1),u=2.00276,a=1.11072;function c(t,n){var e=Object(i.c)(o.s,n);return[u*t/(1/Object(o.h)(n)+a/Object(o.h)(e)),(n+o.D*Object(o.y)(e))/u]}c.invert=function(t,n){var e,r,i=u*n,c=n<0?-o.u:o.u,f=25;do{r=i-o.D*Object(o.y)(c),c-=e=(Object(o.y)(2*c)+2*c-o.s*Object(o.y)(r))/(2*Object(o.h)(2*c)+2+o.s*Object(o.h)(r)*o.D*Object(o.h)(c))}while(Object(o.a)(e)>o.k&&--f>0);return r=i-o.D*Object(o.y)(c),[t*(1/Object(o.h)(r)+a/Object(o.h)(c))/u,r]},n.b=function(){return Object(r.geoProjection)(c).scale(160.857)}},function(t,n,e){"use strict";n.a=o;var r=e(1),i=e(31);function o(t){var n=Object(r.h)(t);function e(t,e){return[t*n,Object(r.y)(e)/n]}return e.invert=function(t,e){return[t/n,Object(r.e)(e*n)]},e}n.b=function(){return Object(i.a)(o).parallel(38.58).scale(195.044)}},function(t,n,e){"use strict";n.b=u;var r=e(0),i=e(1),o=e(134);function u(t,n){var e=Object(i.x)(t),r=Object(i.x)(n),o=Object(i.h)(n),u=Object(i.h)(t)*o,a=Object(i.y)(t)*o,c=Object(i.y)(r*n);t=Object(i.a)(Object(i.g)(a,c)),n=Object(i.e)(u),Object(i.a)(t-i.o)>i.k&&(t%=i.o);var f=function(t,n){if(n===i.o)return[0,0];var e,r,o=Object(i.y)(n),u=o*o,a=u*u,c=1+a,f=1+3*a,s=1-a,l=Object(i.e)(1/Object(i.B)(c)),h=s+u*c*l,p=(1-o)/h,v=Object(i.B)(p),d=p*c,g=Object(i.B)(d),b=v*s;if(0===t)return[0,-(b+u*g)];var y,j=Object(i.h)(n),O=1/j,_=2*o*j,m=(-h*j-(-3*u+l*f)*_*(1-o))/(h*h),w=-O*_,x=-O*(u*c*m+p*f*_),E=-2*O*(s*(.5*m/v)-2*u*v*_),M=4*t/i.s;if(t>.222*i.s||n<i.s/4&&t>.175*i.s){if(e=(b+u*Object(i.B)(d*(1+a)-b*b))/(1+a),t>i.s/4)return[e,e];var T=e,S=.5*e;e=.5*(S+T),r=50;do{var k=Object(i.B)(d-e*e),C=e*(E+w*k)+x*Object(i.e)(e/g)-M;if(!C)break;C<0?S=e:T=e,e=.5*(S+T)}while(Object(i.a)(T-S)>i.k&&--r>0)}else{e=i.k,r=25;do{var P=e*e,N=Object(i.B)(d-P),R=E+w*N,B=e*R+x*Object(i.e)(e/g)-M,A=R+(x-w*P)/N;e-=y=N?B/A:0}while(Object(i.a)(y)>i.k&&--r>0)}return[e,-b-u*Object(i.B)(d-e*e)]}(t>i.s/4?i.o-t:t,n);return t>i.s/4&&(c=f[0],f[0]=-f[1],f[1]=-c),f[0]*=e,f[1]*=-r,f}u.invert=function(t,n){Object(i.a)(t)>1&&(t=2*Object(i.x)(t)-t),Object(i.a)(n)>1&&(n=2*Object(i.x)(n)-n);var e=Object(i.x)(t),r=Object(i.x)(n),o=-e*t,u=-r*n,a=u/o<1,c=function(t,n){var e=0,r=1,o=.5,u=50;for(;;){var a=o*o,c=Object(i.B)(o),f=Object(i.e)(1/Object(i.B)(1+a)),s=1-a+o*(1+a)*f,l=(1-c)/s,h=Object(i.B)(l),p=l*(1+a),v=h*(1-a),d=p-t*t,g=Object(i.B)(d),b=n+v+o*g;if(Object(i.a)(r-e)<i.l||0==--u||0===b)break;b>0?e=o:r=o,o=.5*(e+r)}if(!u)return null;var y=Object(i.e)(c),j=Object(i.h)(y),O=1/j,_=2*c*j,m=(-s*j-(-3*o+f*(1+3*a))*_*(1-c))/(s*s),w=-2*O*(.5*m/h*(1-a)-2*o*h*_),x=-O*_,E=-O*(o*(1+a)*m+l*(1+3*a)*_);return[i.s/4*(t*(w+x*g)+E*Object(i.e)(t/Object(i.B)(p))),y]}(a?u:o,a?o:u),f=c[0],s=c[1],l=Object(i.h)(s);return a&&(f=-i.o-f),[e*(Object(i.g)(Object(i.y)(f)*l,-Object(i.y)(s))+i.s),r*Object(i.e)(Object(i.h)(f)*l)]},n.a=function(){return Object(r.geoProjection)(Object(o.a)(u)).scale(239.75)}},function(t,n,e){"use strict";var r=e(1);n.a=function(t){var n=t(r.o,0)[0]-t(-r.o,0)[0];function e(e,i){var o=e>0?-.5:.5,u=t(e+o*r.s,i);return u[0]-=o*n,u}return t.invert&&(e.invert=function(e,i){var o=e>0?-.5:.5,u=t.invert(e+o*n,i),a=u[0]-o*r.s;return a<-r.s?a+=2*r.s:a>r.s&&(a-=2*r.s),u[0]=a,u}),e}},function(t,n,e){"use strict";n.b=a;var r=e(0),i=e(267),o=e(1),u=e(134);function a(t,n){var e=(o.D-1)/(o.D+1),r=Object(o.B)(1-e*e),u=Object(i.a)(o.o,r*r),a=Object(o.p)(Object(o.F)(o.s/4+Object(o.a)(n)/2)),c=Object(o.m)(-1*a)/Object(o.B)(e),f=function(t,n){var e=t*t,r=n+1,i=1-e-n*n;return[.5*((t>=0?o.o:-o.o)-Object(o.g)(i,2*t)),-.25*Object(o.p)(i*i+4*e)+.5*Object(o.p)(r*r+e)]}(c*Object(o.h)(-1*t),c*Object(o.y)(-1*t)),s=Object(i.b)(f[0],f[1],r*r);return[-s[1],(n>=0?1:-1)*(.5*u-s[0])]}a.invert=function(t,n){var e=(o.D-1)/(o.D+1),r=Object(o.B)(1-e*e),u=Object(i.a)(o.o,r*r),a=Object(i.c)(.5*u-n,-t,r*r),c=function(t,n){var e=n[0]*n[0]+n[1]*n[1];return[(t[0]*n[0]+t[1]*n[1])/e,(t[1]*n[0]-t[0]*n[1])/e]}(a[0],a[1]);return[Object(o.g)(c[1],c[0])/-1,2*Object(o.f)(Object(o.m)(-.5*Object(o.p)(e*c[0]*c[0]+e*c[1]*c[1])))-o.o]},n.a=function(){return Object(r.geoProjection)(Object(u.a)(a)).scale(151.496)}},function(t,n,e){"use strict";n.b=c;var r=e(0),i=e(1),o=e(21),u=e(38),a=e(73);function c(t,n){return Object(i.a)(n)>a.b?((t=Object(o.d)(t,n))[1]-=n>0?a.d:-a.d,t):Object(u.b)(t,n)}c.invert=function(t,n){return Object(i.a)(n)>a.b?o.d.invert(t,n+(n>0?a.d:-a.d)):u.b.invert(t,n)},n.a=function(){return Object(r.geoProjection)(c).scale(152.63)}},function(t,n,e){"use strict";var r=e(135),i=e(75);n.a=function(){return Object(i.a)(r.b).scale(111.48)}},function(t,n,e){"use strict";var r=e(0),i=e(1);n.a=function(t,n,e){var o=Object(r.geoInterpolate)(n,e),u=o(.5),a=Object(r.geoRotation)([-u[0],-u[1]])(n),c=o.distance/2,f=-Object(i.e)(Object(i.y)(a[1]*i.v)/Object(i.y)(c)),s=[-u[0],-u[1],-(a[0]>0?i.s-f:f)*i.j],l=Object(r.geoProjection)(t(c)).rotate(s),h=Object(r.geoRotation)(s),p=l.center;return delete l.rotate,l.center=function(t){return arguments.length?p(h(t)):h.invert(p())},l.clipAngle(90)}},function(t,n,e){var r;
/*!
 * EventEmitter v5.1.0 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */!function(n){"use strict";function i(){}var o=i.prototype,u=n.EventEmitter;function a(t,n){for(var e=t.length;e--;)if(t[e].listener===n)return e;return-1}function c(t){return function(){return this[t].apply(this,arguments)}}o.getListeners=function(t){var n,e,r=this._getEvents();if(t instanceof RegExp)for(e in n={},r)r.hasOwnProperty(e)&&t.test(e)&&(n[e]=r[e]);else n=r[t]||(r[t]=[]);return n},o.flattenListeners=function(t){var n,e=[];for(n=0;n<t.length;n+=1)e.push(t[n].listener);return e},o.getListenersAsObject=function(t){var n,e=this.getListeners(t);return e instanceof Array&&((n={})[t]=e),n||e},o.addListener=function(t,n){if(!function t(n){return"function"==typeof n||n instanceof RegExp||!(!n||"object"!=typeof n)&&t(n.listener)}(n))throw new TypeError("listener must be a function");var e,r=this.getListenersAsObject(t),i="object"==typeof n;for(e in r)r.hasOwnProperty(e)&&-1===a(r[e],n)&&r[e].push(i?n:{listener:n,once:!1});return this},o.on=c("addListener"),o.addOnceListener=function(t,n){return this.addListener(t,{listener:n,once:!0})},o.once=c("addOnceListener"),o.defineEvent=function(t){return this.getListeners(t),this},o.defineEvents=function(t){for(var n=0;n<t.length;n+=1)this.defineEvent(t[n]);return this},o.removeListener=function(t,n){var e,r,i=this.getListenersAsObject(t);for(r in i)i.hasOwnProperty(r)&&-1!==(e=a(i[r],n))&&i[r].splice(e,1);return this},o.off=c("removeListener"),o.addListeners=function(t,n){return this.manipulateListeners(!1,t,n)},o.removeListeners=function(t,n){return this.manipulateListeners(!0,t,n)},o.manipulateListeners=function(t,n,e){var r,i,o=t?this.removeListener:this.addListener,u=t?this.removeListeners:this.addListeners;if("object"!=typeof n||n instanceof RegExp)for(r=e.length;r--;)o.call(this,n,e[r]);else for(r in n)n.hasOwnProperty(r)&&(i=n[r])&&("function"==typeof i?o.call(this,r,i):u.call(this,r,i));return this},o.removeEvent=function(t){var n,e=typeof t,r=this._getEvents();if("string"===e)delete r[t];else if(t instanceof RegExp)for(n in r)r.hasOwnProperty(n)&&t.test(n)&&delete r[n];else delete this._events;return this},o.removeAllListeners=c("removeEvent"),o.emitEvent=function(t,n){var e,r,i,o,u=this.getListenersAsObject(t);for(o in u)if(u.hasOwnProperty(o))for(e=u[o].slice(0),i=0;i<e.length;i++)!0===(r=e[i]).once&&this.removeListener(t,r.listener),r.listener.apply(this,n||[])===this._getOnceReturnValue()&&this.removeListener(t,r.listener);return this},o.trigger=c("emitEvent"),o.emit=function(t){var n=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,n)},o.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},o._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},o._getEvents=function(){return this._events||(this._events={})},i.noConflict=function(){return n.EventEmitter=u,i},void 0===(r=function(){return i}.call(n,e,n,t))||(t.exports=r)}(this||{})},function(t,n,e){var r=e(24),i=e(77);t.exports=function(t,n){var e=r(n),o=e.length;if(i(t))return!o;for(var u=0;u<o;u+=1){var a=e[u];if(n[a]!==t[a]||!(a in t))return!1}return!0}},function(t,n,e){var r=e(11),i=e(10),o=e(0),u=e(128),a=e(322);t.exports=function(t,n){if(r(t))return n?t:t();if(i(t)){if(o[t])return n?o[t]:o[t]();if(u[t])return n?u[t]:u[t]();if(a[t])return n?a[t]:a[t]()}return null}},function(t,n,e){"use strict";e.d(n,"a",function(){return h}),e.d(n,"b",function(){return v});var r,i,o,u,a,c=e(42),f=e(5),s=e(25),l=e(26),h=Object(c.a)(),p=Object(c.a)(),v={point:s.a,lineStart:s.a,lineEnd:s.a,polygonStart:function(){h.reset(),v.lineStart=d,v.lineEnd=g},polygonEnd:function(){var t=+h;p.add(t<0?f.w+t:t),this.lineStart=this.lineEnd=this.point=s.a},sphere:function(){p.add(f.w)}};function d(){v.point=b}function g(){y(r,i)}function b(t,n){v.point=y,r=t,i=n,t*=f.r,n*=f.r,o=t,u=Object(f.g)(n=n/2+f.q),a=Object(f.t)(n)}function y(t,n){t*=f.r,n=(n*=f.r)/2+f.q;var e=t-o,r=e>=0?1:-1,i=r*e,c=Object(f.g)(n),s=Object(f.t)(n),l=a*s,p=u*c+l*Object(f.g)(i),v=l*r*Object(f.t)(i);h.add(Object(f.e)(v,p)),o=t,u=c,a=s}n.c=function(t){return p.reset(),Object(l.a)(t,v),2*p}},function(t,n,e){"use strict";n.a=a;var r=e(43),i=e(326),o=e(5),u=e(78);function a(t,n,e,i,u,a){if(e){var f=Object(o.g)(n),s=Object(o.t)(n),l=i*e;null==u?(u=n+i*o.w,a=n-l/2):(u=c(f,u),a=c(f,a),(i>0?u<a:u>a)&&(u+=i*o.w));for(var h,p=u;i>0?p>a:p<a;p-=l)h=Object(r.g)([f,-s*Object(o.g)(p),-s*Object(o.t)(p)]),t.point(h[0],h[1])}}function c(t,n){(n=Object(r.a)(n))[0]-=t,Object(r.e)(n);var e=Object(o.b)(-n[1]);return((-n[2]<0?-e:e)+o.w-o.i)%o.w}n.b=function(){var t,n,e=Object(i.a)([0,0]),r=Object(i.a)(90),c=Object(i.a)(6),f={point:function(e,r){t.push(e=n(e,r)),e[0]*=o.h,e[1]*=o.h}};function s(){var i=e.apply(this,arguments),s=r.apply(this,arguments)*o.r,l=c.apply(this,arguments)*o.r;return t=[],n=Object(u.b)(-i[0]*o.r,-i[1]*o.r,0).invert,a(f,s,l,1),i={type:"Polygon",coordinates:[t]},t=n=null,i}return s.center=function(t){return arguments.length?(e="function"==typeof t?t:Object(i.a)([+t[0],+t[1]]),s):e},s.radius=function(t){return arguments.length?(r="function"==typeof t?t:Object(i.a)(+t),s):r},s.precision=function(t){return arguments.length?(c="function"==typeof t?t:Object(i.a)(+t),s):c},s}},function(t,n,e){"use strict";n.a=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}},function(t,n,e){"use strict";n.a=s;var r=e(5),i=e(146),o=e(327),u=e(147),a=e(14),c=1e9,f=-c;function s(t,n,e,s){function l(r,i){return t<=r&&r<=e&&n<=i&&i<=s}function h(r,i,o,u){var a=0,c=0;if(null==r||(a=p(r,o))!==(c=p(i,o))||d(r,i)<0^o>0)do{u.point(0===a||3===a?t:e,a>1?s:n)}while((a=(a+o+4)%4)!==c);else u.point(i[0],i[1])}function p(i,o){return Object(r.a)(i[0]-t)<r.i?o>0?0:3:Object(r.a)(i[0]-e)<r.i?o>0?2:1:Object(r.a)(i[1]-n)<r.i?o>0?1:0:o>0?3:2}function v(t,n){return d(t.x,n.x)}function d(t,n){var e=p(t,1),r=p(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(r){var p,d,g,b,y,j,O,_,m,w,x,E=r,M=Object(i.a)(),T={point:S,lineStart:function(){T.point=k,d&&d.push(g=[]);w=!0,m=!1,O=_=NaN},lineEnd:function(){p&&(k(b,y),j&&m&&M.rejoin(),p.push(M.result()));T.point=S,m&&E.lineEnd()},polygonStart:function(){E=M,p=[],d=[],x=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,r=d.length;e<r;++e)for(var i,o,u=d[e],a=1,c=u.length,f=u[0],l=f[0],h=f[1];a<c;++a)i=l,o=h,f=u[a],l=f[0],h=f[1],o<=s?h>s&&(l-i)*(s-o)>(h-o)*(t-i)&&++n:h<=s&&(l-i)*(s-o)<(h-o)*(t-i)&&--n;return n}(),e=x&&n,i=(p=Object(a.merge)(p)).length;(e||i)&&(r.polygonStart(),e&&(r.lineStart(),h(null,null,1,r),r.lineEnd()),i&&Object(u.a)(p,v,n,h,r),r.polygonEnd());E=r,p=d=g=null}};function S(t,n){l(t,n)&&E.point(t,n)}function k(r,i){var u=l(r,i);if(d&&g.push([r,i]),w)b=r,y=i,j=u,w=!1,u&&(E.lineStart(),E.point(r,i));else if(u&&m)E.point(r,i);else{var a=[O=Math.max(f,Math.min(c,O)),_=Math.max(f,Math.min(c,_))],h=[r=Math.max(f,Math.min(c,r)),i=Math.max(f,Math.min(c,i))];Object(o.a)(a,h,t,n,e,s)?(m||(E.lineStart(),E.point(a[0],a[1])),E.point(h[0],h[1]),u||E.lineEnd(),x=!1):u&&(E.lineStart(),E.point(r,i),x=!1)}O=r,_=i,m=u}return T}}n.b=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=s(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}}},function(t,n,e){"use strict";var r=e(25);n.a=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:r.a,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}},function(t,n,e){"use strict";var r=e(148);function i(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function o(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}n.a=function(t,n,e,u,a){var c,f,s=[],l=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,o=t[0],u=t[n];if(Object(r.a)(o,u)){for(a.lineStart(),c=0;c<n;++c)a.point((o=t[c])[0],o[1]);a.lineEnd()}else s.push(e=new i(o,t,null,!0)),l.push(e.o=new i(o,null,e,!1)),s.push(e=new i(u,t,null,!1)),l.push(e.o=new i(u,null,e,!0))}}),s.length){for(l.sort(n),o(s),o(l),c=0,f=l.length;c<f;++c)l[c].e=e=!e;for(var h,p,v=s[0];;){for(var d=v,g=!0;d.v;)if((d=d.n)===v)return;h=d.z,a.lineStart();do{if(d.v=d.o.v=!0,d.e){if(g)for(c=0,f=h.length;c<f;++c)a.point((p=h[c])[0],p[1]);else u(d.x,d.n.x,1,a);d=d.n}else{if(g)for(h=d.p.z,c=h.length-1;c>=0;--c)a.point((p=h[c])[0],p[1]);else u(d.x,d.p.x,-1,a);d=d.p}h=(d=d.o).z,g=!g}while(!d.v);a.lineEnd()}}}},function(t,n,e){"use strict";var r=e(5);n.a=function(t,n){return Object(r.a)(t[0]-n[0])<r.i&&Object(r.a)(t[1]-n[1])<r.i}},function(t,n,e){"use strict";var r,i,o,u=e(42),a=e(5),c=e(25),f=e(26),s=Object(u.a)(),l={sphere:c.a,point:c.a,lineStart:function(){l.point=p,l.lineEnd=h},lineEnd:c.a,polygonStart:c.a,polygonEnd:c.a};function h(){l.point=l.lineEnd=c.a}function p(t,n){t*=a.r,n*=a.r,r=t,i=Object(a.t)(n),o=Object(a.g)(n),l.point=v}function v(t,n){t*=a.r,n*=a.r;var e=Object(a.t)(n),u=Object(a.g)(n),c=Object(a.a)(t-r),f=Object(a.g)(c),l=u*Object(a.t)(c),h=o*e-i*u*f,p=i*e+o*u*f;s.add(Object(a.e)(Object(a.u)(l*l+h*h),p)),r=t,i=e,o=u}n.a=function(t){return s.reset(),Object(f.a)(t,l),+s}},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";var r=e(25),i=1/0,o=i,u=-i,a=u,c={point:function(t,n){t<i&&(i=t);t>u&&(u=t);n<o&&(o=n);n>a&&(a=n)},lineStart:r.a,lineEnd:r.a,polygonStart:r.a,polygonEnd:r.a,result:function(){var t=[[i,o],[u,a]];return u=a=-(o=i=1/0),t}};n.a=c},function(t,n,e){"use strict";var r=e(79);n.a=function(){return Object(r.b)().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}},function(t,n,e){"use strict";var r=e(146),i=e(147),o=e(5),u=e(337),a=e(14);function c(t){return t.length>1}function f(t,n){return((t=t.x)[0]<0?t[1]-o.l-o.i:o.l-t[1])-((n=n.x)[0]<0?n[1]-o.l-o.i:o.l-n[1])}n.a=function(t,n,e,o){return function(s,l){var h,p,v,d=n(l),g=s.invert(o[0],o[1]),b=Object(r.a)(),y=n(b),j=!1,O={point:_,lineStart:w,lineEnd:x,polygonStart:function(){O.point=E,O.lineStart=M,O.lineEnd=T,p=[],h=[]},polygonEnd:function(){O.point=_,O.lineStart=w,O.lineEnd=x,p=Object(a.merge)(p);var t=Object(u.a)(h,g);p.length?(j||(l.polygonStart(),j=!0),Object(i.a)(p,f,t,e,l)):t&&(j||(l.polygonStart(),j=!0),l.lineStart(),e(null,null,1,l),l.lineEnd()),j&&(l.polygonEnd(),j=!1),p=h=null},sphere:function(){l.polygonStart(),l.lineStart(),e(null,null,1,l),l.lineEnd(),l.polygonEnd()}};function _(n,e){var r=s(n,e);t(n=r[0],e=r[1])&&l.point(n,e)}function m(t,n){var e=s(t,n);d.point(e[0],e[1])}function w(){O.point=m,d.lineStart()}function x(){O.point=_,d.lineEnd()}function E(t,n){v.push([t,n]);var e=s(t,n);y.point(e[0],e[1])}function M(){y.lineStart(),v=[]}function T(){E(v[0][0],v[0][1]),y.lineEnd();var t,n,e,r,i=y.clean(),o=b.result(),u=o.length;if(v.pop(),h.push(v),v=null,u)if(1&i){if((n=(e=o[0]).length-1)>0){for(j||(l.polygonStart(),j=!0),l.lineStart(),t=0;t<n;++t)l.point((r=e[t])[0],r[1]);l.lineEnd()}}else u>1&&2&i&&o.push(o.pop().concat(o.shift())),p.push(o.filter(c))}return O}}},function(t,n,e){"use strict";n.b=function(t){return function(n,e){return o(t,[[0,0],n],e)}},n.a=function(t){return function(n,e){return o(t,n,e)}};var r=e(26),i=e(151);function o(t,n,e){var o=n[1][0]-n[0][0],u=n[1][1]-n[0][1],a=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=a&&t.clipExtent(null),Object(r.a)(e,t.stream(i.a));var c=i.a.result(),f=Math.min(o/(c[1][0]-c[0][0]),u/(c[1][1]-c[0][1])),s=+n[0][0]+(o-f*(c[1][0]+c[0][0]))/2,l=+n[0][1]+(u-f*(c[1][1]+c[0][1]))/2;return null!=a&&t.clipExtent(a),t.scale(150*f).translate([s,l])}},function(t,n,e){"use strict";n.b=i;var r=e(18);function i(t,n){return[t,n]}i.invert=i,n.a=function(){return Object(r.a)(i).scale(152.63)}},function(t,n,e){var r=e(6);t.exports=function t(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(r(n))for(var i=0;i<n.length;i+=1)t(n[i],e);else e.push(n);return e}},function(t,n){t.exports=function(t){for(var n=1/t,e=[],r=0;r<=1;r+=n)e.push(r);return e}},function(t,n,e){var r=e(159),i=e(40),o=e(0).geoPath,u=e(2),a=u.GEO,c=u.registerConnector,f=o();function s(t,n,e){e.dataType=a;var o=i(t.features);return o.forEach(function(t){t.name=t.properties.name,t.longitude=[],t.latitude=[];var n=t.pathData=f(t);r(n)._path.forEach(function(n){t.longitude.push(n[1]),t.latitude.push(n[2])});var e=f.centroid(t);t.centroidX=e[0],t.centroidY=e[1]}),o}c("geo",s),c("geojson",s),c("GeoJSON",s),t.exports=s},function(t,n,e){var r=e(362),i=e(363),o=e(364);function u(t){if(!(this instanceof u))return new u(t);this._path=i(t)?t:r(t),this._path=o(this._path),this._path=function(t){for(var n=[],e=["L",0,0],r=0,i=t.length;r<i;r++){var o=t[r];switch(o[0]){case"M":e=["L",o[1],o[2]],n.push(o);break;case"Z":n.push(e);break;default:n.push(o)}}return n}(this._path)}function a(t,n,e,r){var i=t-e,o=n-r;return Math.sqrt(i*i+o*o)}t.exports=u,u.prototype.at=function(t,n){return this._walk(t,n).pos},u.prototype.length=function(){return this._walk(null).length},u.prototype._walk=function(t,n){var e=[0,0],r=[0,0,0],i=0;"number"==typeof t&&(t*=1.045);for(var o=0;o<this._path.length;o++){var u=this._path[o];if("M"===u[0]){if(e[0]=u[1],e[1]=u[2],0===t)return{length:i,pos:e}}else if("C"===u[0]){r[0]=e[0],r[1]=e[1],r[2]=i;for(var c=100,f=0;f<=c;f++){var s=v(u,p=f/c),l=d(u,p);if(i+=a(e[0],e[1],s,l),e[0]=s,e[1]=l,"number"==typeof t&&i>=t){var h=(i-t)/(i-r[2]);return{length:i,pos:[e[0]*(1-h)+r[0]*h,e[1]*(1-h)+r[1]*h]}}r[0]=e[0],r[1]=e[1],r[2]=i}}else if("Q"===u[0]){r[0]=e[0],r[1]=e[1],r[2]=i;for(c=100,f=0;f<=c;f++){var p;s=g(u,p=f/c),l=b(u,p);if(i+=a(e[0],e[1],s,l),e[0]=s,e[1]=l,"number"==typeof t&&i>=t){h=(i-t)/(i-r[2]);return{length:i,pos:[e[0]*(1-h)+r[0]*h,e[1]*(1-h)+r[1]*h]}}r[0]=e[0],r[1]=e[1],r[2]=i}}else if("L"===u[0]){if(r[0]=e[0],r[1]=e[1],r[2]=i,i+=a(e[0],e[1],u[1],u[2]),e[0]=u[1],e[1]=u[2],"number"==typeof t&&i>=t){h=(i-t)/(i-r[2]);return{length:i,pos:[e[0]*(1-h)+r[0]*h,e[1]*(1-h)+r[1]*h]}}r[0]=e[0],r[1]=e[1],r[2]=i}}return{length:i/1.045,pos:e};function v(t,n){return Math.pow(1-n,3)*e[0]+3*Math.pow(1-n,2)*n*t[1]+3*(1-n)*Math.pow(n,2)*t[3]+Math.pow(n,3)*t[5]}function d(t,n){return Math.pow(1-n,3)*e[1]+3*Math.pow(1-n,2)*n*t[2]+3*(1-n)*Math.pow(n,2)*t[4]+Math.pow(n,3)*t[6]}function g(t,n){return Math.pow(1-n,2)*e[0]+2*(1-n)*n*t[1]+Math.pow(n,2)*t[3]}function b(t,n){return Math.pow(1-n,2)*e[1]+2*(1-n)*n*t[2]+Math.pow(n,2)*t[4]}}},function(t,n,e){"use strict";n.b=c;var r=e(161);function i(t,n,e){var r=t.x,i=t.y,o=n.r+e.r,u=t.r+e.r,a=n.x-r,c=n.y-i,f=a*a+c*c;if(f){var s=.5+((u*=u)-(o*=o))/(2*f),l=Math.sqrt(Math.max(0,2*o*(u+f)-(u-=f)*u-o*o))/(2*f);e.x=r+s*a+l*c,e.y=i+s*c-l*a}else e.x=r+u,e.y=i}function o(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function u(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function a(t){this._=t,this.next=null,this.previous=null}function c(t){if(!(f=t.length))return 0;var n,e,c,f,s,l,h,p,v,d,g;if((n=t[0]).x=0,n.y=0,!(f>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(f>2))return n.r+e.r;i(e,n,c=t[2]),n=new a(n),e=new a(e),c=new a(c),n.next=c.previous=e,e.next=n.previous=c,c.next=e.previous=n;t:for(h=3;h<f;++h){i(n._,e._,c=t[h]),c=new a(c),p=e.next,v=n.previous,d=e._.r,g=n._.r;do{if(d<=g){if(o(p._,c._)){e=p,n.next=e,e.previous=n,--h;continue t}d+=p._.r,p=p.next}else{if(o(v._,c._)){(n=v).next=e,e.previous=n,--h;continue t}g+=v._.r,v=v.previous}}while(p!==v.next);for(c.previous=n,c.next=e,n.next=e.previous=e=c,s=u(n);(c=c.next)!==e;)(l=u(c))<s&&(n=c,s=l);e=n.next}for(n=[e._],c=e;(c=c.next)!==e;)n.push(c._);for(c=Object(r.a)(n),h=0;h<f;++h)(n=t[h]).x-=c.x,n.y-=c.y;return c.r}n.a=function(t){return c(t),t}},function(t,n,e){"use strict";var r=e(382);function i(t,n){var e,r;if(a(n,t))return[n];for(e=0;e<t.length;++e)if(o(n,t[e])&&a(f(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(o(f(t[e],t[r]),n)&&o(f(t[e],n),t[r])&&o(f(t[r],n),t[e])&&a(s(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function o(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function u(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function a(t,n){for(var e=0;e<n.length;++e)if(!u(t,n[e]))return!1;return!0}function c(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return f(t[0],t[1]);case 3:return s(t[0],t[1],t[2])}}function f(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,f=u-r,s=a-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+u+f/l*s)/2,r:(l+i+a)/2}}function s(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-u,p=r-f,v=i-a,d=i-s,g=c-o,b=l-o,y=r*r+i*i-o*o,j=y-u*u-a*a+c*c,O=y-f*f-s*s+l*l,_=p*v-h*d,m=(v*O-d*j)/(2*_)-r,w=(d*g-v*b)/_,x=(p*j-h*O)/(2*_)-i,E=(h*b-p*g)/_,M=w*w+E*E-1,T=2*(o+m*w+x*E),S=m*m+x*x-o*o,k=-(M?(T+Math.sqrt(T*T-4*M*S))/(2*M):S/T);return{x:r+m+w*k,y:i+x+E*k,r:k}}n.a=function(t){for(var n,e,o=0,a=(t=Object(r.a)(r.b.call(t))).length,f=[];o<a;)n=t[o],e&&u(e,n)?++o:(e=c(f=i(f,n)),o=0);return e}},function(t,n,e){"use strict";n.a=function(){return 0},n.b=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}},function(t,n,e){"use strict";var r=e(89);n.a=function(t){var n,e=Object(r.a)(t.transform),i=1/0,o=i,u=-i,a=-i;function c(t){(t=e(t))[0]<i&&(i=t[0]),t[0]>u&&(u=t[0]),t[1]<o&&(o=t[1]),t[1]>a&&(a=t[1])}function f(t){switch(t.type){case"GeometryCollection":t.geometries.forEach(f);break;case"Point":c(t.coordinates);break;case"MultiPoint":t.coordinates.forEach(c)}}for(n in t.arcs.forEach(function(t){for(var n,r=-1,c=t.length;++r<c;)(n=e(t[r],r))[0]<i&&(i=n[0]),n[0]>u&&(u=n[0]),n[1]<o&&(o=n[1]),n[1]>a&&(a=n[1])}),t.objects)f(t.objects[n]);return[i,o,u,a]}},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";n.a=function(t,n){var e={},r={},i={},o=[],u=-1;function a(t,n){for(var r in t){var i=t[r];delete n[i.start],delete i.start,delete i.end,i.forEach(function(t){e[t<0?~t:t]=1}),o.push(i)}}return n.forEach(function(e,r){var i,o=t.arcs[e<0?~e:e];o.length<3&&!o[1][0]&&!o[1][1]&&(i=n[++u],n[u]=e,n[r]=i)}),n.forEach(function(n){var e,o,u=function(n){var e,r=t.arcs[n<0?~n:n],i=r[0];t.transform?(e=[0,0],r.forEach(function(t){e[0]+=t[0],e[1]+=t[1]})):e=r[r.length-1];return n<0?[e,i]:[i,e]}(n),a=u[0],c=u[1];if(e=i[a])if(delete i[e.end],e.push(n),e.end=c,o=r[c]){delete r[o.start];var f=o===e?e:e.concat(o);r[f.start=e.start]=i[f.end=o.end]=f}else r[e.start]=i[e.end]=e;else if(e=r[c])if(delete r[e.start],e.unshift(n),e.start=a,o=i[a]){delete i[o.end];var s=o===e?e:o.concat(e);r[s.start=o.start]=i[s.end=e.end]=s}else r[e.start]=i[e.end]=e;else r[(e=[n]).start=a]=i[e.end=c]=e}),a(i,r),a(r,i),n.forEach(function(t){e[t<0?~t:t]||o.push([t])}),o}},function(t,n,e){"use strict";var r=e(165);n.a=function(t){if(null==t)return r.a;var n,e,i=t.scale[0],o=t.scale[1],u=t.translate[0],a=t.translate[1];return function(t,r){r||(n=e=0);var c=2,f=t.length,s=new Array(f),l=Math.round((t[0]-u)/i),h=Math.round((t[1]-a)/o);for(s[0]=l-n,n=l,s[1]=h-e,e=h;c<f;)s[c]=t[c],++c;return s}}},function(t,n,e){var r=e(91),i=Array.prototype.indexOf;t.exports=function(t,n){return!!r(t)&&i.call(t,n)>-1}},function(t,n,e){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,u=200,a="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",c="Expected a function",f="__lodash_hash_undefined__",s=500,l="__lodash_placeholder__",h=1,p=2,v=4,d=1,g=2,b=1,y=2,j=4,O=8,_=16,m=32,w=64,x=128,E=256,M=512,T=30,S="...",k=800,C=16,P=1,N=2,R=1/0,B=9007199254740991,A=1.7976931348623157e308,I=NaN,L=4294967295,z=L-1,q=L>>>1,F=[["ary",x],["bind",b],["bindKey",y],["curry",O],["curryRight",_],["flip",M],["partial",m],["partialRight",w],["rearg",E]],D="[object Arguments]",G="[object Array]",H="[object AsyncFunction]",U="[object Boolean]",V="[object Date]",W="[object DOMException]",Y="[object Error]",$="[object Function]",J="[object GeneratorFunction]",K="[object Map]",X="[object Number]",Z="[object Null]",Q="[object Object]",tt="[object Proxy]",nt="[object RegExp]",et="[object Set]",rt="[object String]",it="[object Symbol]",ot="[object Undefined]",ut="[object WeakMap]",at="[object WeakSet]",ct="[object ArrayBuffer]",ft="[object DataView]",st="[object Float32Array]",lt="[object Float64Array]",ht="[object Int8Array]",pt="[object Int16Array]",vt="[object Int32Array]",dt="[object Uint8Array]",gt="[object Uint8ClampedArray]",bt="[object Uint16Array]",yt="[object Uint32Array]",jt=/\b__p \+= '';/g,Ot=/\b(__p \+=) '' \+/g,_t=/(__e\(.*?\)|\b__t\)) \+\n'';/g,mt=/&(?:amp|lt|gt|quot|#39);/g,wt=/[&<>"']/g,xt=RegExp(mt.source),Et=RegExp(wt.source),Mt=/<%-([\s\S]+?)%>/g,Tt=/<%([\s\S]+?)%>/g,St=/<%=([\s\S]+?)%>/g,kt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Ct=/^\w*$/,Pt=/^\./,Nt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Rt=/[\\^$.*+?()[\]{}|]/g,Bt=RegExp(Rt.source),At=/^\s+|\s+$/g,It=/^\s+/,Lt=/\s+$/,zt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,qt=/\{\n\/\* \[wrapped with (.+)\] \*/,Ft=/,? & /,Dt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Gt=/\\(\\)?/g,Ht=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ut=/\w*$/,Vt=/^[-+]0x[0-9a-f]+$/i,Wt=/^0b[01]+$/i,Yt=/^\[object .+?Constructor\]$/,$t=/^0o[0-7]+$/i,Jt=/^(?:0|[1-9]\d*)$/,Kt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Xt=/($^)/,Zt=/['\n\r\u2028\u2029\\]/g,Qt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",tn="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",nn="[\\ud800-\\udfff]",en="["+tn+"]",rn="["+Qt+"]",on="\\d+",un="[\\u2700-\\u27bf]",an="[a-z\\xdf-\\xf6\\xf8-\\xff]",cn="[^\\ud800-\\udfff"+tn+on+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",fn="\\ud83c[\\udffb-\\udfff]",sn="[^\\ud800-\\udfff]",ln="(?:\\ud83c[\\udde6-\\uddff]){2}",hn="[\\ud800-\\udbff][\\udc00-\\udfff]",pn="[A-Z\\xc0-\\xd6\\xd8-\\xde]",vn="(?:"+an+"|"+cn+")",dn="(?:"+pn+"|"+cn+")",gn="(?:"+rn+"|"+fn+")"+"?",bn="[\\ufe0e\\ufe0f]?"+gn+("(?:\\u200d(?:"+[sn,ln,hn].join("|")+")[\\ufe0e\\ufe0f]?"+gn+")*"),yn="(?:"+[un,ln,hn].join("|")+")"+bn,jn="(?:"+[sn+rn+"?",rn,ln,hn,nn].join("|")+")",On=RegExp("['’]","g"),_n=RegExp(rn,"g"),mn=RegExp(fn+"(?="+fn+")|"+jn+bn,"g"),wn=RegExp([pn+"?"+an+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[en,pn,"$"].join("|")+")",dn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[en,pn+vn,"$"].join("|")+")",pn+"?"+vn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",pn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)","\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)",on,yn].join("|"),"g"),xn=RegExp("[\\u200d\\ud800-\\udfff"+Qt+"\\ufe0e\\ufe0f]"),En=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Mn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Tn=-1,Sn={};Sn[st]=Sn[lt]=Sn[ht]=Sn[pt]=Sn[vt]=Sn[dt]=Sn[gt]=Sn[bt]=Sn[yt]=!0,Sn[D]=Sn[G]=Sn[ct]=Sn[U]=Sn[ft]=Sn[V]=Sn[Y]=Sn[$]=Sn[K]=Sn[X]=Sn[Q]=Sn[nt]=Sn[et]=Sn[rt]=Sn[ut]=!1;var kn={};kn[D]=kn[G]=kn[ct]=kn[ft]=kn[U]=kn[V]=kn[st]=kn[lt]=kn[ht]=kn[pt]=kn[vt]=kn[K]=kn[X]=kn[Q]=kn[nt]=kn[et]=kn[rt]=kn[it]=kn[dt]=kn[gt]=kn[bt]=kn[yt]=!0,kn[Y]=kn[$]=kn[ut]=!1;var Cn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pn=parseFloat,Nn=parseInt,Rn="object"==typeof t&&t&&t.Object===Object&&t,Bn="object"==typeof self&&self&&self.Object===Object&&self,An=Rn||Bn||Function("return this")(),In="object"==typeof n&&n&&!n.nodeType&&n,Ln=In&&"object"==typeof r&&r&&!r.nodeType&&r,zn=Ln&&Ln.exports===In,qn=zn&&Rn.process,Fn=function(){try{return qn&&qn.binding&&qn.binding("util")}catch(t){}}(),Dn=Fn&&Fn.isArrayBuffer,Gn=Fn&&Fn.isDate,Hn=Fn&&Fn.isMap,Un=Fn&&Fn.isRegExp,Vn=Fn&&Fn.isSet,Wn=Fn&&Fn.isTypedArray;function Yn(t,n){return t.set(n[0],n[1]),t}function $n(t,n){return t.add(n),t}function Jn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function Kn(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(r,u,e(u),t)}return r}function Xn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function Zn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function Qn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function te(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var u=t[e];n(u,e,t)&&(o[i++]=u)}return o}function ne(t,n){return!!(null==t?0:t.length)&&le(t,n,0)>-1}function ee(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function re(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function ie(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function oe(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function ue(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function ae(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var ce=de("length");function fe(t,n,e){var r;return e(t,function(t,e,i){if(n(t,e,i))return r=e,!1}),r}function se(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function le(t,n,e){return n==n?function(t,n,e){var r=e-1,i=t.length;for(;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):se(t,pe,e)}function he(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function pe(t){return t!=t}function ve(t,n){var e=null==t?0:t.length;return e?ye(t,n)/e:I}function de(t){return function(n){return null==n?o:n[t]}}function ge(t){return function(n){return null==t?o:t[n]}}function be(t,n,e,r,i){return i(t,function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)}),e}function ye(t,n){for(var e,r=-1,i=t.length;++r<i;){var u=n(t[r]);u!==o&&(e=e===o?u:e+u)}return e}function je(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function Oe(t){return function(n){return t(n)}}function _e(t,n){return re(n,function(n){return t[n]})}function me(t,n){return t.has(n)}function we(t,n){for(var e=-1,r=t.length;++e<r&&le(n,t[e],0)>-1;);return e}function xe(t,n){for(var e=t.length;e--&&le(n,t[e],0)>-1;);return e}var Ee=ge({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Me=ge({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Te(t){return"\\"+Cn[t]}function Se(t){return xn.test(t)}function ke(t){var n=-1,e=Array(t.size);return t.forEach(function(t,r){e[++n]=[r,t]}),e}function Ce(t,n){return function(e){return t(n(e))}}function Pe(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e];u!==n&&u!==l||(t[e]=l,o[i++]=e)}return o}function Ne(t){var n=-1,e=Array(t.size);return t.forEach(function(t){e[++n]=t}),e}function Re(t){var n=-1,e=Array(t.size);return t.forEach(function(t){e[++n]=[t,t]}),e}function Be(t){return Se(t)?function(t){var n=mn.lastIndex=0;for(;mn.test(t);)++n;return n}(t):ce(t)}function Ae(t){return Se(t)?function(t){return t.match(mn)||[]}(t):function(t){return t.split("")}(t)}var Ie=ge({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Le=function t(n){var e=(n=null==n?An:Le.defaults(An.Object(),n,Le.pick(An,Mn))).Array,r=n.Date,i=n.Error,Qt=n.Function,tn=n.Math,nn=n.Object,en=n.RegExp,rn=n.String,on=n.TypeError,un=e.prototype,an=Qt.prototype,cn=nn.prototype,fn=n["__core-js_shared__"],sn=an.toString,ln=cn.hasOwnProperty,hn=0,pn=function(){var t=/[^.]+$/.exec(fn&&fn.keys&&fn.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),vn=cn.toString,dn=sn.call(nn),gn=An._,bn=en("^"+sn.call(ln).replace(Rt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),yn=zn?n.Buffer:o,jn=n.Symbol,mn=n.Uint8Array,xn=yn?yn.allocUnsafe:o,Cn=Ce(nn.getPrototypeOf,nn),Rn=nn.create,Bn=cn.propertyIsEnumerable,In=un.splice,Ln=jn?jn.isConcatSpreadable:o,qn=jn?jn.iterator:o,Fn=jn?jn.toStringTag:o,ce=function(){try{var t=Do(nn,"defineProperty");return t({},"",{}),t}catch(t){}}(),ge=n.clearTimeout!==An.clearTimeout&&n.clearTimeout,ze=r&&r.now!==An.Date.now&&r.now,qe=n.setTimeout!==An.setTimeout&&n.setTimeout,Fe=tn.ceil,De=tn.floor,Ge=nn.getOwnPropertySymbols,He=yn?yn.isBuffer:o,Ue=n.isFinite,Ve=un.join,We=Ce(nn.keys,nn),Ye=tn.max,$e=tn.min,Je=r.now,Ke=n.parseInt,Xe=tn.random,Ze=un.reverse,Qe=Do(n,"DataView"),tr=Do(n,"Map"),nr=Do(n,"Promise"),er=Do(n,"Set"),rr=Do(n,"WeakMap"),ir=Do(nn,"create"),or=rr&&new rr,ur={},ar=hu(Qe),cr=hu(tr),fr=hu(nr),sr=hu(er),lr=hu(rr),hr=jn?jn.prototype:o,pr=hr?hr.valueOf:o,vr=hr?hr.toString:o;function dr(t){if(ka(t)&&!ya(t)&&!(t instanceof jr)){if(t instanceof yr)return t;if(ln.call(t,"__wrapped__"))return pu(t)}return new yr(t)}var gr=function(){function t(){}return function(n){if(!Sa(n))return{};if(Rn)return Rn(n);t.prototype=n;var e=new t;return t.prototype=o,e}}();function br(){}function yr(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=o}function jr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=L,this.__views__=[]}function Or(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function _r(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function mr(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function wr(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new mr;++n<e;)this.add(t[n])}function xr(t){var n=this.__data__=new _r(t);this.size=n.size}function Er(t,n){var e=ya(t),r=!e&&ba(t),i=!e&&!r&&ma(t),o=!e&&!r&&!i&&La(t),u=e||r||i||o,a=u?je(t.length,rn):[],c=a.length;for(var f in t)!n&&!ln.call(t,f)||u&&("length"==f||i&&("offset"==f||"parent"==f)||o&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||$o(f,c))||a.push(f);return a}function Mr(t){var n=t.length;return n?t[wi(0,n-1)]:o}function Tr(t,n){return fu(io(t),Ir(n,0,t.length))}function Sr(t){return fu(io(t))}function kr(t,n,e){(e===o||va(t[n],e))&&(e!==o||n in t)||Br(t,n,e)}function Cr(t,n,e){var r=t[n];ln.call(t,n)&&va(r,e)&&(e!==o||n in t)||Br(t,n,e)}function Pr(t,n){for(var e=t.length;e--;)if(va(t[e][0],n))return e;return-1}function Nr(t,n,e,r){return Dr(t,function(t,i,o){n(r,t,e(t),o)}),r}function Rr(t,n){return t&&oo(n,oc(n),t)}function Br(t,n,e){"__proto__"==n&&ce?ce(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function Ar(t,n){for(var r=-1,i=n.length,u=e(i),a=null==t;++r<i;)u[r]=a?o:tc(t,n[r]);return u}function Ir(t,n,e){return t==t&&(e!==o&&(t=t<=e?t:e),n!==o&&(t=t>=n?t:n)),t}function Lr(t,n,e,r,i,u){var a,c=n&h,f=n&p,s=n&v;if(e&&(a=i?e(t,r,i,u):e(t)),a!==o)return a;if(!Sa(t))return t;var l=ya(t);if(l){if(a=function(t){var n=t.length,e=t.constructor(n);return n&&"string"==typeof t[0]&&ln.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!c)return io(t,a)}else{var d=Uo(t),g=d==$||d==J;if(ma(t))return Zi(t,c);if(d==Q||d==D||g&&!i){if(a=f||g?{}:Wo(t),!c)return f?function(t,n){return oo(t,Ho(t),n)}(t,function(t,n){return t&&oo(n,uc(n),t)}(a,t)):function(t,n){return oo(t,Go(t),n)}(t,Rr(a,t))}else{if(!kn[d])return i?t:{};a=function(t,n,e,r){var i=t.constructor;switch(n){case ct:return Qi(t);case U:case V:return new i(+t);case ft:return function(t,n){var e=n?Qi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,r);case st:case lt:case ht:case pt:case vt:case dt:case gt:case bt:case yt:return to(t,r);case K:return function(t,n,e){return oe(n?e(ke(t),h):ke(t),Yn,new t.constructor)}(t,r,e);case X:case rt:return new i(t);case nt:return function(t){var n=new t.constructor(t.source,Ut.exec(t));return n.lastIndex=t.lastIndex,n}(t);case et:return function(t,n,e){return oe(n?e(Ne(t),h):Ne(t),$n,new t.constructor)}(t,r,e);case it:return function(t){return pr?nn(pr.call(t)):{}}(t)}}(t,d,Lr,c)}}u||(u=new xr);var b=u.get(t);if(b)return b;u.set(t,a);var y=l?o:(s?f?Bo:Ro:f?uc:oc)(t);return Xn(y||t,function(r,i){y&&(r=t[i=r]),Cr(a,i,Lr(r,n,e,i,t,u))}),a}function zr(t,n,e){var r=e.length;if(null==t)return!r;for(t=nn(t);r--;){var i=e[r],u=n[i],a=t[i];if(a===o&&!(i in t)||!u(a))return!1}return!0}function qr(t,n,e){if("function"!=typeof t)throw new on(c);return ou(function(){t.apply(o,e)},n)}function Fr(t,n,e,r){var i=-1,o=ne,a=!0,c=t.length,f=[],s=n.length;if(!c)return f;e&&(n=re(n,Oe(e))),r?(o=ee,a=!1):n.length>=u&&(o=me,a=!1,n=new wr(n));t:for(;++i<c;){var l=t[i],h=null==e?l:e(l);if(l=r||0!==l?l:0,a&&h==h){for(var p=s;p--;)if(n[p]===h)continue t;f.push(l)}else o(n,h,r)||f.push(l)}return f}dr.templateSettings={escape:Mt,evaluate:Tt,interpolate:St,variable:"",imports:{_:dr}},dr.prototype=br.prototype,dr.prototype.constructor=dr,yr.prototype=gr(br.prototype),yr.prototype.constructor=yr,jr.prototype=gr(br.prototype),jr.prototype.constructor=jr,Or.prototype.clear=function(){this.__data__=ir?ir(null):{},this.size=0},Or.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},Or.prototype.get=function(t){var n=this.__data__;if(ir){var e=n[t];return e===f?o:e}return ln.call(n,t)?n[t]:o},Or.prototype.has=function(t){var n=this.__data__;return ir?n[t]!==o:ln.call(n,t)},Or.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=ir&&n===o?f:n,this},_r.prototype.clear=function(){this.__data__=[],this.size=0},_r.prototype.delete=function(t){var n=this.__data__,e=Pr(n,t);return!(e<0||(e==n.length-1?n.pop():In.call(n,e,1),--this.size,0))},_r.prototype.get=function(t){var n=this.__data__,e=Pr(n,t);return e<0?o:n[e][1]},_r.prototype.has=function(t){return Pr(this.__data__,t)>-1},_r.prototype.set=function(t,n){var e=this.__data__,r=Pr(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},mr.prototype.clear=function(){this.size=0,this.__data__={hash:new Or,map:new(tr||_r),string:new Or}},mr.prototype.delete=function(t){var n=qo(this,t).delete(t);return this.size-=n?1:0,n},mr.prototype.get=function(t){return qo(this,t).get(t)},mr.prototype.has=function(t){return qo(this,t).has(t)},mr.prototype.set=function(t,n){var e=qo(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(t){return this.__data__.set(t,f),this},wr.prototype.has=function(t){return this.__data__.has(t)},xr.prototype.clear=function(){this.__data__=new _r,this.size=0},xr.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},xr.prototype.get=function(t){return this.__data__.get(t)},xr.prototype.has=function(t){return this.__data__.has(t)},xr.prototype.set=function(t,n){var e=this.__data__;if(e instanceof _r){var r=e.__data__;if(!tr||r.length<u-1)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new mr(r)}return e.set(t,n),this.size=e.size,this};var Dr=co(Jr),Gr=co(Kr,!0);function Hr(t,n){var e=!0;return Dr(t,function(t,r,i){return e=!!n(t,r,i)}),e}function Ur(t,n,e){for(var r=-1,i=t.length;++r<i;){var u=t[r],a=n(u);if(null!=a&&(c===o?a==a&&!Ia(a):e(a,c)))var c=a,f=u}return f}function Vr(t,n){var e=[];return Dr(t,function(t,r,i){n(t,r,i)&&e.push(t)}),e}function Wr(t,n,e,r,i){var o=-1,u=t.length;for(e||(e=Yo),i||(i=[]);++o<u;){var a=t[o];n>0&&e(a)?n>1?Wr(a,n-1,e,r,i):ie(i,a):r||(i[i.length]=a)}return i}var Yr=fo(),$r=fo(!0);function Jr(t,n){return t&&Yr(t,n,oc)}function Kr(t,n){return t&&$r(t,n,oc)}function Xr(t,n){return te(n,function(n){return Ea(t[n])})}function Zr(t,n){for(var e=0,r=(n=$i(n,t)).length;null!=t&&e<r;)t=t[lu(n[e++])];return e&&e==r?t:o}function Qr(t,n,e){var r=n(t);return ya(t)?r:ie(r,e(t))}function ti(t){return null==t?t===o?ot:Z:Fn&&Fn in nn(t)?function(t){var n=ln.call(t,Fn),e=t[Fn];try{t[Fn]=o;var r=!0}catch(t){}var i=vn.call(t);return r&&(n?t[Fn]=e:delete t[Fn]),i}(t):function(t){return vn.call(t)}(t)}function ni(t,n){return t>n}function ei(t,n){return null!=t&&ln.call(t,n)}function ri(t,n){return null!=t&&n in nn(t)}function ii(t,n,r){for(var i=r?ee:ne,u=t[0].length,a=t.length,c=a,f=e(a),s=1/0,l=[];c--;){var h=t[c];c&&n&&(h=re(h,Oe(n))),s=$e(h.length,s),f[c]=!r&&(n||u>=120&&h.length>=120)?new wr(c&&h):o}h=t[0];var p=-1,v=f[0];t:for(;++p<u&&l.length<s;){var d=h[p],g=n?n(d):d;if(d=r||0!==d?d:0,!(v?me(v,g):i(l,g,r))){for(c=a;--c;){var b=f[c];if(!(b?me(b,g):i(t[c],g,r)))continue t}v&&v.push(g),l.push(d)}}return l}function oi(t,n,e){var r=null==(t=ru(t,n=$i(n,t)))?t:t[lu(xu(n))];return null==r?o:Jn(r,t,e)}function ui(t){return ka(t)&&ti(t)==D}function ai(t,n,e,r,i){return t===n||(null==t||null==n||!ka(t)&&!ka(n)?t!=t&&n!=n:function(t,n,e,r,i,u){var a=ya(t),c=ya(n),f=a?G:Uo(t),s=c?G:Uo(n),l=(f=f==D?Q:f)==Q,h=(s=s==D?Q:s)==Q,p=f==s;if(p&&ma(t)){if(!ma(n))return!1;a=!0,l=!1}if(p&&!l)return u||(u=new xr),a||La(t)?Po(t,n,e,r,i,u):function(t,n,e,r,i,o,u){switch(e){case ft:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case ct:return!(t.byteLength!=n.byteLength||!o(new mn(t),new mn(n)));case U:case V:case X:return va(+t,+n);case Y:return t.name==n.name&&t.message==n.message;case nt:case rt:return t==n+"";case K:var a=ke;case et:var c=r&d;if(a||(a=Ne),t.size!=n.size&&!c)return!1;var f=u.get(t);if(f)return f==n;r|=g,u.set(t,n);var s=Po(a(t),a(n),r,i,o,u);return u.delete(t),s;case it:if(pr)return pr.call(t)==pr.call(n)}return!1}(t,n,f,e,r,i,u);if(!(e&d)){var v=l&&ln.call(t,"__wrapped__"),b=h&&ln.call(n,"__wrapped__");if(v||b){var y=v?t.value():t,j=b?n.value():n;return u||(u=new xr),i(y,j,e,r,u)}}return!!p&&(u||(u=new xr),function(t,n,e,r,i,u){var a=e&d,c=Ro(t),f=c.length,s=Ro(n).length;if(f!=s&&!a)return!1;for(var l=f;l--;){var h=c[l];if(!(a?h in n:ln.call(n,h)))return!1}var p=u.get(t);if(p&&u.get(n))return p==n;var v=!0;u.set(t,n),u.set(n,t);for(var g=a;++l<f;){h=c[l];var b=t[h],y=n[h];if(r)var j=a?r(y,b,h,n,t,u):r(b,y,h,t,n,u);if(!(j===o?b===y||i(b,y,e,r,u):j)){v=!1;break}g||(g="constructor"==h)}if(v&&!g){var O=t.constructor,_=n.constructor;O!=_&&"constructor"in t&&"constructor"in n&&!("function"==typeof O&&O instanceof O&&"function"==typeof _&&_ instanceof _)&&(v=!1)}return u.delete(t),u.delete(n),v}(t,n,e,r,i,u))}(t,n,e,r,ai,i))}function ci(t,n,e,r){var i=e.length,u=i,a=!r;if(null==t)return!u;for(t=nn(t);i--;){var c=e[i];if(a&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++i<u;){var f=(c=e[i])[0],s=t[f],l=c[1];if(a&&c[2]){if(s===o&&!(f in t))return!1}else{var h=new xr;if(r)var p=r(s,l,f,t,n,h);if(!(p===o?ai(l,s,d|g,r,h):p))return!1}}return!0}function fi(t){return!(!Sa(t)||function(t){return!!pn&&pn in t}(t))&&(Ea(t)?bn:Yt).test(hu(t))}function si(t){return"function"==typeof t?t:null==t?Pc:"object"==typeof t?ya(t)?gi(t[0],t[1]):di(t):Fc(t)}function li(t){if(!Qo(t))return We(t);var n=[];for(var e in nn(t))ln.call(t,e)&&"constructor"!=e&&n.push(e);return n}function hi(t){if(!Sa(t))return function(t){var n=[];if(null!=t)for(var e in nn(t))n.push(e);return n}(t);var n=Qo(t),e=[];for(var r in t)("constructor"!=r||!n&&ln.call(t,r))&&e.push(r);return e}function pi(t,n){return t<n}function vi(t,n){var r=-1,i=Oa(t)?e(t.length):[];return Dr(t,function(t,e,o){i[++r]=n(t,e,o)}),i}function di(t){var n=Fo(t);return 1==n.length&&n[0][2]?nu(n[0][0],n[0][1]):function(e){return e===t||ci(e,t,n)}}function gi(t,n){return Ko(t)&&tu(n)?nu(lu(t),n):function(e){var r=tc(e,t);return r===o&&r===n?nc(e,t):ai(n,r,d|g)}}function bi(t,n,e,r,i){t!==n&&Yr(n,function(u,a){if(Sa(u))i||(i=new xr),function(t,n,e,r,i,u,a){var c=t[e],f=n[e],s=a.get(f);if(s)kr(t,e,s);else{var l=u?u(c,f,e+"",t,n,a):o,h=l===o;if(h){var p=ya(f),v=!p&&ma(f),d=!p&&!v&&La(f);l=f,p||v||d?ya(c)?l=c:_a(c)?l=io(c):v?(h=!1,l=Zi(f,!0)):d?(h=!1,l=to(f,!0)):l=[]:Na(f)||ba(f)?(l=c,ba(c)?l=Va(c):(!Sa(c)||r&&Ea(c))&&(l=Wo(f))):h=!1}h&&(a.set(f,l),i(l,f,r,u,a),a.delete(f)),kr(t,e,l)}}(t,n,a,e,bi,r,i);else{var c=r?r(t[a],u,a+"",t,n,i):o;c===o&&(c=u),kr(t,a,c)}},uc)}function yi(t,n){var e=t.length;if(e)return $o(n+=n<0?e:0,e)?t[n]:o}function ji(t,n,e){var r=-1;return n=re(n.length?n:[Pc],Oe(zo())),function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}(vi(t,function(t,e,i){return{criteria:re(n,function(n){return n(t)}),index:++r,value:t}}),function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,o=n.criteria,u=i.length,a=e.length;++r<u;){var c=no(i[r],o[r]);if(c){if(r>=a)return c;var f=e[r];return c*("desc"==f?-1:1)}}return t.index-n.index}(t,n,e)})}function Oi(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var u=n[r],a=Zr(t,u);e(a,u)&&Si(o,$i(u,t),a)}return o}function _i(t,n,e,r){var i=r?he:le,o=-1,u=n.length,a=t;for(t===n&&(n=io(n)),e&&(a=re(t,Oe(e)));++o<u;)for(var c=0,f=n[o],s=e?e(f):f;(c=i(a,s,c,r))>-1;)a!==t&&In.call(a,c,1),In.call(t,c,1);return t}function mi(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;$o(i)?In.call(t,i,1):Fi(t,i)}}return t}function wi(t,n){return t+De(Xe()*(n-t+1))}function xi(t,n){var e="";if(!t||n<1||n>B)return e;do{n%2&&(e+=t),(n=De(n/2))&&(t+=t)}while(n);return e}function Ei(t,n){return uu(eu(t,n,Pc),t+"")}function Mi(t){return Mr(vc(t))}function Ti(t,n){var e=vc(t);return fu(e,Ir(n,0,e.length))}function Si(t,n,e,r){if(!Sa(t))return t;for(var i=-1,u=(n=$i(n,t)).length,a=u-1,c=t;null!=c&&++i<u;){var f=lu(n[i]),s=e;if(i!=a){var l=c[f];(s=r?r(l,f,c):o)===o&&(s=Sa(l)?l:$o(n[i+1])?[]:{})}Cr(c,f,s),c=c[f]}return t}var ki=or?function(t,n){return or.set(t,n),t}:Pc,Ci=ce?function(t,n){return ce(t,"toString",{configurable:!0,enumerable:!1,value:Sc(n),writable:!0})}:Pc;function Pi(t){return fu(vc(t))}function Ni(t,n,r){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(r=r>o?o:r)<0&&(r+=o),o=n>r?0:r-n>>>0,n>>>=0;for(var u=e(o);++i<o;)u[i]=t[i+n];return u}function Ri(t,n){var e;return Dr(t,function(t,r,i){return!(e=n(t,r,i))}),!!e}function Bi(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=q){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!Ia(u)&&(e?u<=n:u<n)?r=o+1:i=o}return i}return Ai(t,n,Pc,e)}function Ai(t,n,e,r){n=e(n);for(var i=0,u=null==t?0:t.length,a=n!=n,c=null===n,f=Ia(n),s=n===o;i<u;){var l=De((i+u)/2),h=e(t[l]),p=h!==o,v=null===h,d=h==h,g=Ia(h);if(a)var b=r||d;else b=s?d&&(r||p):c?d&&p&&(r||!v):f?d&&p&&!v&&(r||!g):!v&&!g&&(r?h<=n:h<n);b?i=l+1:u=l}return $e(u,z)}function Ii(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e],a=n?n(u):u;if(!e||!va(a,c)){var c=a;o[i++]=0===u?0:u}}return o}function Li(t){return"number"==typeof t?t:Ia(t)?I:+t}function zi(t){if("string"==typeof t)return t;if(ya(t))return re(t,zi)+"";if(Ia(t))return vr?vr.call(t):"";var n=t+"";return"0"==n&&1/t==-R?"-0":n}function qi(t,n,e){var r=-1,i=ne,o=t.length,a=!0,c=[],f=c;if(e)a=!1,i=ee;else if(o>=u){var s=n?null:Eo(t);if(s)return Ne(s);a=!1,i=me,f=new wr}else f=n?[]:c;t:for(;++r<o;){var l=t[r],h=n?n(l):l;if(l=e||0!==l?l:0,a&&h==h){for(var p=f.length;p--;)if(f[p]===h)continue t;n&&f.push(h),c.push(l)}else i(f,h,e)||(f!==c&&f.push(h),c.push(l))}return c}function Fi(t,n){return null==(t=ru(t,n=$i(n,t)))||delete t[lu(xu(n))]}function Di(t,n,e,r){return Si(t,n,e(Zr(t,n)),r)}function Gi(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?Ni(t,r?0:o,r?o+1:i):Ni(t,r?o+1:0,r?i:o)}function Hi(t,n){var e=t;return e instanceof jr&&(e=e.value()),oe(n,function(t,n){return n.func.apply(n.thisArg,ie([t],n.args))},e)}function Ui(t,n,r){var i=t.length;if(i<2)return i?qi(t[0]):[];for(var o=-1,u=e(i);++o<i;)for(var a=t[o],c=-1;++c<i;)c!=o&&(u[o]=Fr(u[o]||a,t[c],n,r));return qi(Wr(u,1),n,r)}function Vi(t,n,e){for(var r=-1,i=t.length,u=n.length,a={};++r<i;){var c=r<u?n[r]:o;e(a,t[r],c)}return a}function Wi(t){return _a(t)?t:[]}function Yi(t){return"function"==typeof t?t:Pc}function $i(t,n){return ya(t)?t:Ko(t,n)?[t]:su(Wa(t))}var Ji=Ei;function Ki(t,n,e){var r=t.length;return e=e===o?r:e,!n&&e>=r?t:Ni(t,n,e)}var Xi=ge||function(t){return An.clearTimeout(t)};function Zi(t,n){if(n)return t.slice();var e=t.length,r=xn?xn(e):new t.constructor(e);return t.copy(r),r}function Qi(t){var n=new t.constructor(t.byteLength);return new mn(n).set(new mn(t)),n}function to(t,n){var e=n?Qi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function no(t,n){if(t!==n){var e=t!==o,r=null===t,i=t==t,u=Ia(t),a=n!==o,c=null===n,f=n==n,s=Ia(n);if(!c&&!s&&!u&&t>n||u&&a&&f&&!c&&!s||r&&a&&f||!e&&f||!i)return 1;if(!r&&!u&&!s&&t<n||s&&e&&i&&!r&&!u||c&&e&&i||!a&&i||!f)return-1}return 0}function eo(t,n,r,i){for(var o=-1,u=t.length,a=r.length,c=-1,f=n.length,s=Ye(u-a,0),l=e(f+s),h=!i;++c<f;)l[c]=n[c];for(;++o<a;)(h||o<u)&&(l[r[o]]=t[o]);for(;s--;)l[c++]=t[o++];return l}function ro(t,n,r,i){for(var o=-1,u=t.length,a=-1,c=r.length,f=-1,s=n.length,l=Ye(u-c,0),h=e(l+s),p=!i;++o<l;)h[o]=t[o];for(var v=o;++f<s;)h[v+f]=n[f];for(;++a<c;)(p||o<u)&&(h[v+r[a]]=t[o++]);return h}function io(t,n){var r=-1,i=t.length;for(n||(n=e(i));++r<i;)n[r]=t[r];return n}function oo(t,n,e,r){var i=!e;e||(e={});for(var u=-1,a=n.length;++u<a;){var c=n[u],f=r?r(e[c],t[c],c,e,t):o;f===o&&(f=t[c]),i?Br(e,c,f):Cr(e,c,f)}return e}function uo(t,n){return function(e,r){var i=ya(e)?Kn:Nr,o=n?n():{};return i(e,t,zo(r,2),o)}}function ao(t){return Ei(function(n,e){var r=-1,i=e.length,u=i>1?e[i-1]:o,a=i>2?e[2]:o;for(u=t.length>3&&"function"==typeof u?(i--,u):o,a&&Jo(e[0],e[1],a)&&(u=i<3?o:u,i=1),n=nn(n);++r<i;){var c=e[r];c&&t(n,c,r,u)}return n})}function co(t,n){return function(e,r){if(null==e)return e;if(!Oa(e))return t(e,r);for(var i=e.length,o=n?i:-1,u=nn(e);(n?o--:++o<i)&&!1!==r(u[o],o,u););return e}}function fo(t){return function(n,e,r){for(var i=-1,o=nn(n),u=r(n),a=u.length;a--;){var c=u[t?a:++i];if(!1===e(o[c],c,o))break}return n}}function so(t){return function(n){var e=Se(n=Wa(n))?Ae(n):o,r=e?e[0]:n.charAt(0),i=e?Ki(e,1).join(""):n.slice(1);return r[t]()+i}}function lo(t){return function(n){return oe(Ec(bc(n).replace(On,"")),t,"")}}function ho(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=gr(t.prototype),r=t.apply(e,n);return Sa(r)?r:e}}function po(t){return function(n,e,r){var i=nn(n);if(!Oa(n)){var u=zo(e,3);n=oc(n),e=function(t){return u(i[t],t,i)}}var a=t(n,e,r);return a>-1?i[u?n[a]:a]:o}}function vo(t){return No(function(n){var e=n.length,r=e,i=yr.prototype.thru;for(t&&n.reverse();r--;){var u=n[r];if("function"!=typeof u)throw new on(c);if(i&&!a&&"wrapper"==Io(u))var a=new yr([],!0)}for(r=a?r:e;++r<e;){var f=Io(u=n[r]),s="wrapper"==f?Ao(u):o;a=s&&Xo(s[0])&&s[1]==(x|O|m|E)&&!s[4].length&&1==s[9]?a[Io(s[0])].apply(a,s[3]):1==u.length&&Xo(u)?a[f]():a.thru(u)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&ya(r))return a.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}})}function go(t,n,r,i,u,a,c,f,s,l){var h=n&x,p=n&b,v=n&y,d=n&(O|_),g=n&M,j=v?o:ho(t);return function b(){for(var y=arguments.length,O=e(y),_=y;_--;)O[_]=arguments[_];if(d)var m=Lo(b),w=function(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}(O,m);if(i&&(O=eo(O,i,u,d)),a&&(O=ro(O,a,c,d)),y-=w,d&&y<l){var x=Pe(O,m);return wo(t,n,go,b.placeholder,r,O,x,f,s,l-y)}var E=p?r:this,M=v?E[t]:t;return y=O.length,f?O=function(t,n){for(var e=t.length,r=$e(n.length,e),i=io(t);r--;){var u=n[r];t[r]=$o(u,e)?i[u]:o}return t}(O,f):g&&y>1&&O.reverse(),h&&s<y&&(O.length=s),this&&this!==An&&this instanceof b&&(M=j||ho(M)),M.apply(E,O)}}function bo(t,n){return function(e,r){return function(t,n,e,r){return Jr(t,function(t,i,o){n(r,e(t),i,o)}),r}(e,t,n(r),{})}}function yo(t,n){return function(e,r){var i;if(e===o&&r===o)return n;if(e!==o&&(i=e),r!==o){if(i===o)return r;"string"==typeof e||"string"==typeof r?(e=zi(e),r=zi(r)):(e=Li(e),r=Li(r)),i=t(e,r)}return i}}function jo(t){return No(function(n){return n=re(n,Oe(zo())),Ei(function(e){var r=this;return t(n,function(t){return Jn(t,r,e)})})})}function Oo(t,n){var e=(n=n===o?" ":zi(n)).length;if(e<2)return e?xi(n,t):n;var r=xi(n,Fe(t/Be(n)));return Se(n)?Ki(Ae(r),0,t).join(""):r.slice(0,t)}function _o(t){return function(n,r,i){return i&&"number"!=typeof i&&Jo(n,r,i)&&(r=i=o),n=Da(n),r===o?(r=n,n=0):r=Da(r),function(t,n,r,i){for(var o=-1,u=Ye(Fe((n-t)/(r||1)),0),a=e(u);u--;)a[i?u:++o]=t,t+=r;return a}(n,r,i=i===o?n<r?1:-1:Da(i),t)}}function mo(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=Ua(n),e=Ua(e)),t(n,e)}}function wo(t,n,e,r,i,u,a,c,f,s){var l=n&O;n|=l?m:w,(n&=~(l?w:m))&j||(n&=~(b|y));var h=[t,n,i,l?u:o,l?a:o,l?o:u,l?o:a,c,f,s],p=e.apply(o,h);return Xo(t)&&iu(p,h),p.placeholder=r,au(p,t,n)}function xo(t){var n=tn[t];return function(t,e){if(t=Ua(t),e=null==e?0:$e(Ga(e),292)){var r=(Wa(t)+"e").split("e");return+((r=(Wa(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Eo=er&&1/Ne(new er([,-0]))[1]==R?function(t){return new er(t)}:Ic;function Mo(t){return function(n){var e=Uo(n);return e==K?ke(n):e==et?Re(n):function(t,n){return re(n,function(n){return[n,t[n]]})}(n,t(n))}}function To(t,n,r,i,u,a,f,s){var h=n&y;if(!h&&"function"!=typeof t)throw new on(c);var p=i?i.length:0;if(p||(n&=~(m|w),i=u=o),f=f===o?f:Ye(Ga(f),0),s=s===o?s:Ga(s),p-=u?u.length:0,n&w){var v=i,d=u;i=u=o}var g=h?o:Ao(t),M=[t,n,r,i,u,v,d,a,f,s];if(g&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<(b|y|x),u=r==x&&e==O||r==x&&e==E&&t[7].length<=n[8]||r==(x|E)&&n[7].length<=n[8]&&e==O;if(!o&&!u)return t;r&b&&(t[2]=n[2],i|=e&b?0:j);var a=n[3];if(a){var c=t[3];t[3]=c?eo(c,a,n[4]):a,t[4]=c?Pe(t[3],l):n[4]}(a=n[5])&&(c=t[5],t[5]=c?ro(c,a,n[6]):a,t[6]=c?Pe(t[5],l):n[6]),(a=n[7])&&(t[7]=a),r&x&&(t[8]=null==t[8]?n[8]:$e(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(M,g),t=M[0],n=M[1],r=M[2],i=M[3],u=M[4],!(s=M[9]=M[9]===o?h?0:t.length:Ye(M[9]-p,0))&&n&(O|_)&&(n&=~(O|_)),n&&n!=b)T=n==O||n==_?function(t,n,r){var i=ho(t);return function u(){for(var a=arguments.length,c=e(a),f=a,s=Lo(u);f--;)c[f]=arguments[f];var l=a<3&&c[0]!==s&&c[a-1]!==s?[]:Pe(c,s);return(a-=l.length)<r?wo(t,n,go,u.placeholder,o,c,l,o,o,r-a):Jn(this&&this!==An&&this instanceof u?i:t,this,c)}}(t,n,s):n!=m&&n!=(b|m)||u.length?go.apply(o,M):function(t,n,r,i){var o=n&b,u=ho(t);return function n(){for(var a=-1,c=arguments.length,f=-1,s=i.length,l=e(s+c),h=this&&this!==An&&this instanceof n?u:t;++f<s;)l[f]=i[f];for(;c--;)l[f++]=arguments[++a];return Jn(h,o?r:this,l)}}(t,n,r,i);else var T=function(t,n,e){var r=n&b,i=ho(t);return function n(){return(this&&this!==An&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,r);return au((g?ki:iu)(T,M),t,n)}function So(t,n,e,r){return t===o||va(t,cn[e])&&!ln.call(r,e)?n:t}function ko(t,n,e,r,i,u){return Sa(t)&&Sa(n)&&(u.set(n,t),bi(t,n,o,ko,u),u.delete(n)),t}function Co(t){return Na(t)?o:t}function Po(t,n,e,r,i,u){var a=e&d,c=t.length,f=n.length;if(c!=f&&!(a&&f>c))return!1;var s=u.get(t);if(s&&u.get(n))return s==n;var l=-1,h=!0,p=e&g?new wr:o;for(u.set(t,n),u.set(n,t);++l<c;){var v=t[l],b=n[l];if(r)var y=a?r(b,v,l,n,t,u):r(v,b,l,t,n,u);if(y!==o){if(y)continue;h=!1;break}if(p){if(!ae(n,function(t,n){if(!me(p,n)&&(v===t||i(v,t,e,r,u)))return p.push(n)})){h=!1;break}}else if(v!==b&&!i(v,b,e,r,u)){h=!1;break}}return u.delete(t),u.delete(n),h}function No(t){return uu(eu(t,o,ju),t+"")}function Ro(t){return Qr(t,oc,Go)}function Bo(t){return Qr(t,uc,Ho)}var Ao=or?function(t){return or.get(t)}:Ic;function Io(t){for(var n=t.name+"",e=ur[n],r=ln.call(ur,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function Lo(t){return(ln.call(dr,"placeholder")?dr:t).placeholder}function zo(){var t=dr.iteratee||Nc;return t=t===Nc?si:t,arguments.length?t(arguments[0],arguments[1]):t}function qo(t,n){var e=t.__data__;return function(t){var n=typeof t;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==t:null===t}(n)?e["string"==typeof n?"string":"hash"]:e.map}function Fo(t){for(var n=oc(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,tu(i)]}return n}function Do(t,n){var e=function(t,n){return null==t?o:t[n]}(t,n);return fi(e)?e:o}var Go=Ge?function(t){return null==t?[]:(t=nn(t),te(Ge(t),function(n){return Bn.call(t,n)}))}:Hc,Ho=Ge?function(t){for(var n=[];t;)ie(n,Go(t)),t=Cn(t);return n}:Hc,Uo=ti;function Vo(t,n,e){for(var r=-1,i=(n=$i(n,t)).length,o=!1;++r<i;){var u=lu(n[r]);if(!(o=null!=t&&e(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Ta(i)&&$o(u,i)&&(ya(t)||ba(t))}function Wo(t){return"function"!=typeof t.constructor||Qo(t)?{}:gr(Cn(t))}function Yo(t){return ya(t)||ba(t)||!!(Ln&&t&&t[Ln])}function $o(t,n){return!!(n=null==n?B:n)&&("number"==typeof t||Jt.test(t))&&t>-1&&t%1==0&&t<n}function Jo(t,n,e){if(!Sa(e))return!1;var r=typeof n;return!!("number"==r?Oa(e)&&$o(n,e.length):"string"==r&&n in e)&&va(e[n],t)}function Ko(t,n){if(ya(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!Ia(t))||Ct.test(t)||!kt.test(t)||null!=n&&t in nn(n)}function Xo(t){var n=Io(t),e=dr[n];if("function"!=typeof e||!(n in jr.prototype))return!1;if(t===e)return!0;var r=Ao(e);return!!r&&t===r[0]}(Qe&&Uo(new Qe(new ArrayBuffer(1)))!=ft||tr&&Uo(new tr)!=K||nr&&"[object Promise]"!=Uo(nr.resolve())||er&&Uo(new er)!=et||rr&&Uo(new rr)!=ut)&&(Uo=function(t){var n=ti(t),e=n==Q?t.constructor:o,r=e?hu(e):"";if(r)switch(r){case ar:return ft;case cr:return K;case fr:return"[object Promise]";case sr:return et;case lr:return ut}return n});var Zo=fn?Ea:Uc;function Qo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||cn)}function tu(t){return t==t&&!Sa(t)}function nu(t,n){return function(e){return null!=e&&e[t]===n&&(n!==o||t in nn(e))}}function eu(t,n,r){return n=Ye(n===o?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=Ye(i.length-n,0),a=e(u);++o<u;)a[o]=i[n+o];o=-1;for(var c=e(n+1);++o<n;)c[o]=i[o];return c[n]=r(a),Jn(t,this,c)}}function ru(t,n){return n.length<2?t:Zr(t,Ni(n,0,-1))}var iu=cu(ki),ou=qe||function(t,n){return An.setTimeout(t,n)},uu=cu(Ci);function au(t,n,e){var r=n+"";return uu(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(zt,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return Xn(F,function(e){var r="_."+e[0];n&e[1]&&!ne(t,r)&&t.push(r)}),t.sort()}(function(t){var n=t.match(qt);return n?n[1].split(Ft):[]}(r),e)))}function cu(t){var n=0,e=0;return function(){var r=Je(),i=C-(r-e);if(e=r,i>0){if(++n>=k)return arguments[0]}else n=0;return t.apply(o,arguments)}}function fu(t,n){var e=-1,r=t.length,i=r-1;for(n=n===o?r:n;++e<n;){var u=wi(e,i),a=t[u];t[u]=t[e],t[e]=a}return t.length=n,t}var su=function(t){var n=ca(t,function(t){return e.size===s&&e.clear(),t}),e=n.cache;return n}(function(t){var n=[];return Pt.test(t)&&n.push(""),t.replace(Nt,function(t,e,r,i){n.push(r?i.replace(Gt,"$1"):e||t)}),n});function lu(t){if("string"==typeof t||Ia(t))return t;var n=t+"";return"0"==n&&1/t==-R?"-0":n}function hu(t){if(null!=t){try{return sn.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function pu(t){if(t instanceof jr)return t.clone();var n=new yr(t.__wrapped__,t.__chain__);return n.__actions__=io(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var vu=Ei(function(t,n){return _a(t)?Fr(t,Wr(n,1,_a,!0)):[]}),du=Ei(function(t,n){var e=xu(n);return _a(e)&&(e=o),_a(t)?Fr(t,Wr(n,1,_a,!0),zo(e,2)):[]}),gu=Ei(function(t,n){var e=xu(n);return _a(e)&&(e=o),_a(t)?Fr(t,Wr(n,1,_a,!0),o,e):[]});function bu(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:Ga(e);return i<0&&(i=Ye(r+i,0)),se(t,zo(n,3),i)}function yu(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return e!==o&&(i=Ga(e),i=e<0?Ye(r+i,0):$e(i,r-1)),se(t,zo(n,3),i,!0)}function ju(t){return null!=t&&t.length?Wr(t,1):[]}function Ou(t){return t&&t.length?t[0]:o}var _u=Ei(function(t){var n=re(t,Wi);return n.length&&n[0]===t[0]?ii(n):[]}),mu=Ei(function(t){var n=xu(t),e=re(t,Wi);return n===xu(e)?n=o:e.pop(),e.length&&e[0]===t[0]?ii(e,zo(n,2)):[]}),wu=Ei(function(t){var n=xu(t),e=re(t,Wi);return(n="function"==typeof n?n:o)&&e.pop(),e.length&&e[0]===t[0]?ii(e,o,n):[]});function xu(t){var n=null==t?0:t.length;return n?t[n-1]:o}var Eu=Ei(Mu);function Mu(t,n){return t&&t.length&&n&&n.length?_i(t,n):t}var Tu=No(function(t,n){var e=null==t?0:t.length,r=Ar(t,n);return mi(t,re(n,function(t){return $o(t,e)?+t:t}).sort(no)),r});function Su(t){return null==t?t:Ze.call(t)}var ku=Ei(function(t){return qi(Wr(t,1,_a,!0))}),Cu=Ei(function(t){var n=xu(t);return _a(n)&&(n=o),qi(Wr(t,1,_a,!0),zo(n,2))}),Pu=Ei(function(t){var n=xu(t);return n="function"==typeof n?n:o,qi(Wr(t,1,_a,!0),o,n)});function Nu(t){if(!t||!t.length)return[];var n=0;return t=te(t,function(t){if(_a(t))return n=Ye(t.length,n),!0}),je(n,function(n){return re(t,de(n))})}function Ru(t,n){if(!t||!t.length)return[];var e=Nu(t);return null==n?e:re(e,function(t){return Jn(n,o,t)})}var Bu=Ei(function(t,n){return _a(t)?Fr(t,n):[]}),Au=Ei(function(t){return Ui(te(t,_a))}),Iu=Ei(function(t){var n=xu(t);return _a(n)&&(n=o),Ui(te(t,_a),zo(n,2))}),Lu=Ei(function(t){var n=xu(t);return n="function"==typeof n?n:o,Ui(te(t,_a),o,n)}),zu=Ei(Nu);var qu=Ei(function(t){var n=t.length,e=n>1?t[n-1]:o;return Ru(t,e="function"==typeof e?(t.pop(),e):o)});function Fu(t){var n=dr(t);return n.__chain__=!0,n}function Du(t,n){return n(t)}var Gu=No(function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,i=function(n){return Ar(n,t)};return!(n>1||this.__actions__.length)&&r instanceof jr&&$o(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:Du,args:[i],thisArg:o}),new yr(r,this.__chain__).thru(function(t){return n&&!t.length&&t.push(o),t})):this.thru(i)});var Hu=uo(function(t,n,e){ln.call(t,e)?++t[e]:Br(t,e,1)});var Uu=po(bu),Vu=po(yu);function Wu(t,n){return(ya(t)?Xn:Dr)(t,zo(n,3))}function Yu(t,n){return(ya(t)?Zn:Gr)(t,zo(n,3))}var $u=uo(function(t,n,e){ln.call(t,e)?t[e].push(n):Br(t,e,[n])});var Ju=Ei(function(t,n,r){var i=-1,o="function"==typeof n,u=Oa(t)?e(t.length):[];return Dr(t,function(t){u[++i]=o?Jn(n,t,r):oi(t,n,r)}),u}),Ku=uo(function(t,n,e){Br(t,e,n)});function Xu(t,n){return(ya(t)?re:vi)(t,zo(n,3))}var Zu=uo(function(t,n,e){t[e?0:1].push(n)},function(){return[[],[]]});var Qu=Ei(function(t,n){if(null==t)return[];var e=n.length;return e>1&&Jo(t,n[0],n[1])?n=[]:e>2&&Jo(n[0],n[1],n[2])&&(n=[n[0]]),ji(t,Wr(n,1),[])}),ta=ze||function(){return An.Date.now()};function na(t,n,e){return n=e?o:n,n=t&&null==n?t.length:n,To(t,x,o,o,o,o,n)}function ea(t,n){var e;if("function"!=typeof n)throw new on(c);return t=Ga(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=o),e}}var ra=Ei(function(t,n,e){var r=b;if(e.length){var i=Pe(e,Lo(ra));r|=m}return To(t,r,n,e,i)}),ia=Ei(function(t,n,e){var r=b|y;if(e.length){var i=Pe(e,Lo(ia));r|=m}return To(n,r,t,e,i)});function oa(t,n,e){var r,i,u,a,f,s,l=0,h=!1,p=!1,v=!0;if("function"!=typeof t)throw new on(c);function d(n){var e=r,u=i;return r=i=o,l=n,a=t.apply(u,e)}function g(t){var e=t-s;return s===o||e>=n||e<0||p&&t-l>=u}function b(){var t=ta();if(g(t))return y(t);f=ou(b,function(t){var e=n-(t-s);return p?$e(e,u-(t-l)):e}(t))}function y(t){return f=o,v&&r?d(t):(r=i=o,a)}function j(){var t=ta(),e=g(t);if(r=arguments,i=this,s=t,e){if(f===o)return function(t){return l=t,f=ou(b,n),h?d(t):a}(s);if(p)return f=ou(b,n),d(s)}return f===o&&(f=ou(b,n)),a}return n=Ua(n)||0,Sa(e)&&(h=!!e.leading,u=(p="maxWait"in e)?Ye(Ua(e.maxWait)||0,n):u,v="trailing"in e?!!e.trailing:v),j.cancel=function(){f!==o&&Xi(f),l=0,r=s=i=f=o},j.flush=function(){return f===o?a:y(ta())},j}var ua=Ei(function(t,n){return qr(t,1,n)}),aa=Ei(function(t,n,e){return qr(t,Ua(n)||0,e)});function ca(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new on(c);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return e.cache=o.set(i,u)||o,u};return e.cache=new(ca.Cache||mr),e}function fa(t){if("function"!=typeof t)throw new on(c);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}ca.Cache=mr;var sa=Ji(function(t,n){var e=(n=1==n.length&&ya(n[0])?re(n[0],Oe(zo())):re(Wr(n,1),Oe(zo()))).length;return Ei(function(r){for(var i=-1,o=$e(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return Jn(t,this,r)})}),la=Ei(function(t,n){var e=Pe(n,Lo(la));return To(t,m,o,n,e)}),ha=Ei(function(t,n){var e=Pe(n,Lo(ha));return To(t,w,o,n,e)}),pa=No(function(t,n){return To(t,E,o,o,o,n)});function va(t,n){return t===n||t!=t&&n!=n}var da=mo(ni),ga=mo(function(t,n){return t>=n}),ba=ui(function(){return arguments}())?ui:function(t){return ka(t)&&ln.call(t,"callee")&&!Bn.call(t,"callee")},ya=e.isArray,ja=Dn?Oe(Dn):function(t){return ka(t)&&ti(t)==ct};function Oa(t){return null!=t&&Ta(t.length)&&!Ea(t)}function _a(t){return ka(t)&&Oa(t)}var ma=He||Uc,wa=Gn?Oe(Gn):function(t){return ka(t)&&ti(t)==V};function xa(t){if(!ka(t))return!1;var n=ti(t);return n==Y||n==W||"string"==typeof t.message&&"string"==typeof t.name&&!Na(t)}function Ea(t){if(!Sa(t))return!1;var n=ti(t);return n==$||n==J||n==H||n==tt}function Ma(t){return"number"==typeof t&&t==Ga(t)}function Ta(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=B}function Sa(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function ka(t){return null!=t&&"object"==typeof t}var Ca=Hn?Oe(Hn):function(t){return ka(t)&&Uo(t)==K};function Pa(t){return"number"==typeof t||ka(t)&&ti(t)==X}function Na(t){if(!ka(t)||ti(t)!=Q)return!1;var n=Cn(t);if(null===n)return!0;var e=ln.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&sn.call(e)==dn}var Ra=Un?Oe(Un):function(t){return ka(t)&&ti(t)==nt};var Ba=Vn?Oe(Vn):function(t){return ka(t)&&Uo(t)==et};function Aa(t){return"string"==typeof t||!ya(t)&&ka(t)&&ti(t)==rt}function Ia(t){return"symbol"==typeof t||ka(t)&&ti(t)==it}var La=Wn?Oe(Wn):function(t){return ka(t)&&Ta(t.length)&&!!Sn[ti(t)]};var za=mo(pi),qa=mo(function(t,n){return t<=n});function Fa(t){if(!t)return[];if(Oa(t))return Aa(t)?Ae(t):io(t);if(qn&&t[qn])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[qn]());var n=Uo(t);return(n==K?ke:n==et?Ne:vc)(t)}function Da(t){return t?(t=Ua(t))===R||t===-R?(t<0?-1:1)*A:t==t?t:0:0===t?t:0}function Ga(t){var n=Da(t),e=n%1;return n==n?e?n-e:n:0}function Ha(t){return t?Ir(Ga(t),0,L):0}function Ua(t){if("number"==typeof t)return t;if(Ia(t))return I;if(Sa(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=Sa(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(At,"");var e=Wt.test(t);return e||$t.test(t)?Nn(t.slice(2),e?2:8):Vt.test(t)?I:+t}function Va(t){return oo(t,uc(t))}function Wa(t){return null==t?"":zi(t)}var Ya=ao(function(t,n){if(Qo(n)||Oa(n))oo(n,oc(n),t);else for(var e in n)ln.call(n,e)&&Cr(t,e,n[e])}),$a=ao(function(t,n){oo(n,uc(n),t)}),Ja=ao(function(t,n,e,r){oo(n,uc(n),t,r)}),Ka=ao(function(t,n,e,r){oo(n,oc(n),t,r)}),Xa=No(Ar);var Za=Ei(function(t){return t.push(o,So),Jn(Ja,o,t)}),Qa=Ei(function(t){return t.push(o,ko),Jn(cc,o,t)});function tc(t,n,e){var r=null==t?o:Zr(t,n);return r===o?e:r}function nc(t,n){return null!=t&&Vo(t,n,ri)}var ec=bo(function(t,n,e){t[n]=e},Sc(Pc)),rc=bo(function(t,n,e){ln.call(t,n)?t[n].push(e):t[n]=[e]},zo),ic=Ei(oi);function oc(t){return Oa(t)?Er(t):li(t)}function uc(t){return Oa(t)?Er(t,!0):hi(t)}var ac=ao(function(t,n,e){bi(t,n,e)}),cc=ao(function(t,n,e,r){bi(t,n,e,r)}),fc=No(function(t,n){var e={};if(null==t)return e;var r=!1;n=re(n,function(n){return n=$i(n,t),r||(r=n.length>1),n}),oo(t,Bo(t),e),r&&(e=Lr(e,h|p|v,Co));for(var i=n.length;i--;)Fi(e,n[i]);return e});var sc=No(function(t,n){return null==t?{}:function(t,n){return Oi(t,n,function(n,e){return nc(t,e)})}(t,n)});function lc(t,n){if(null==t)return{};var e=re(Bo(t),function(t){return[t]});return n=zo(n),Oi(t,e,function(t,e){return n(t,e[0])})}var hc=Mo(oc),pc=Mo(uc);function vc(t){return null==t?[]:_e(t,oc(t))}var dc=lo(function(t,n,e){return n=n.toLowerCase(),t+(e?gc(n):n)});function gc(t){return xc(Wa(t).toLowerCase())}function bc(t){return(t=Wa(t))&&t.replace(Kt,Ee).replace(_n,"")}var yc=lo(function(t,n,e){return t+(e?"-":"")+n.toLowerCase()}),jc=lo(function(t,n,e){return t+(e?" ":"")+n.toLowerCase()}),Oc=so("toLowerCase");var _c=lo(function(t,n,e){return t+(e?"_":"")+n.toLowerCase()});var mc=lo(function(t,n,e){return t+(e?" ":"")+xc(n)});var wc=lo(function(t,n,e){return t+(e?" ":"")+n.toUpperCase()}),xc=so("toUpperCase");function Ec(t,n,e){return t=Wa(t),(n=e?o:n)===o?function(t){return En.test(t)}(t)?function(t){return t.match(wn)||[]}(t):function(t){return t.match(Dt)||[]}(t):t.match(n)||[]}var Mc=Ei(function(t,n){try{return Jn(t,o,n)}catch(t){return xa(t)?t:new i(t)}}),Tc=No(function(t,n){return Xn(n,function(n){n=lu(n),Br(t,n,ra(t[n],t))}),t});function Sc(t){return function(){return t}}var kc=vo(),Cc=vo(!0);function Pc(t){return t}function Nc(t){return si("function"==typeof t?t:Lr(t,h))}var Rc=Ei(function(t,n){return function(e){return oi(e,t,n)}}),Bc=Ei(function(t,n){return function(e){return oi(t,e,n)}});function Ac(t,n,e){var r=oc(n),i=Xr(n,r);null!=e||Sa(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=Xr(n,oc(n)));var o=!(Sa(e)&&"chain"in e&&!e.chain),u=Ea(t);return Xn(i,function(e){var r=n[e];t[e]=r,u&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__);return(e.__actions__=io(this.__actions__)).push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,ie([this.value()],arguments))})}),t}function Ic(){}var Lc=jo(re),zc=jo(Qn),qc=jo(ae);function Fc(t){return Ko(t)?de(lu(t)):function(t){return function(n){return Zr(n,t)}}(t)}var Dc=_o(),Gc=_o(!0);function Hc(){return[]}function Uc(){return!1}var Vc=yo(function(t,n){return t+n},0),Wc=xo("ceil"),Yc=yo(function(t,n){return t/n},1),$c=xo("floor");var Jc=yo(function(t,n){return t*n},1),Kc=xo("round"),Xc=yo(function(t,n){return t-n},0);return dr.after=function(t,n){if("function"!=typeof n)throw new on(c);return t=Ga(t),function(){if(--t<1)return n.apply(this,arguments)}},dr.ary=na,dr.assign=Ya,dr.assignIn=$a,dr.assignInWith=Ja,dr.assignWith=Ka,dr.at=Xa,dr.before=ea,dr.bind=ra,dr.bindAll=Tc,dr.bindKey=ia,dr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return ya(t)?t:[t]},dr.chain=Fu,dr.chunk=function(t,n,r){n=(r?Jo(t,n,r):n===o)?1:Ye(Ga(n),0);var i=null==t?0:t.length;if(!i||n<1)return[];for(var u=0,a=0,c=e(Fe(i/n));u<i;)c[a++]=Ni(t,u,u+=n);return c},dr.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},dr.concat=function(){var t=arguments.length;if(!t)return[];for(var n=e(t-1),r=arguments[0],i=t;i--;)n[i-1]=arguments[i];return ie(ya(r)?io(r):[r],Wr(n,1))},dr.cond=function(t){var n=null==t?0:t.length,e=zo();return t=n?re(t,function(t){if("function"!=typeof t[1])throw new on(c);return[e(t[0]),t[1]]}):[],Ei(function(e){for(var r=-1;++r<n;){var i=t[r];if(Jn(i[0],this,e))return Jn(i[1],this,e)}})},dr.conforms=function(t){return function(t){var n=oc(t);return function(e){return zr(e,t,n)}}(Lr(t,h))},dr.constant=Sc,dr.countBy=Hu,dr.create=function(t,n){var e=gr(t);return null==n?e:Rr(e,n)},dr.curry=function t(n,e,r){var i=To(n,O,o,o,o,o,o,e=r?o:e);return i.placeholder=t.placeholder,i},dr.curryRight=function t(n,e,r){var i=To(n,_,o,o,o,o,o,e=r?o:e);return i.placeholder=t.placeholder,i},dr.debounce=oa,dr.defaults=Za,dr.defaultsDeep=Qa,dr.defer=ua,dr.delay=aa,dr.difference=vu,dr.differenceBy=du,dr.differenceWith=gu,dr.drop=function(t,n,e){var r=null==t?0:t.length;return r?Ni(t,(n=e||n===o?1:Ga(n))<0?0:n,r):[]},dr.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?Ni(t,0,(n=r-(n=e||n===o?1:Ga(n)))<0?0:n):[]},dr.dropRightWhile=function(t,n){return t&&t.length?Gi(t,zo(n,3),!0,!0):[]},dr.dropWhile=function(t,n){return t&&t.length?Gi(t,zo(n,3),!0):[]},dr.fill=function(t,n,e,r){var i=null==t?0:t.length;return i?(e&&"number"!=typeof e&&Jo(t,n,e)&&(e=0,r=i),function(t,n,e,r){var i=t.length;for((e=Ga(e))<0&&(e=-e>i?0:i+e),(r=r===o||r>i?i:Ga(r))<0&&(r+=i),r=e>r?0:Ha(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},dr.filter=function(t,n){return(ya(t)?te:Vr)(t,zo(n,3))},dr.flatMap=function(t,n){return Wr(Xu(t,n),1)},dr.flatMapDeep=function(t,n){return Wr(Xu(t,n),R)},dr.flatMapDepth=function(t,n,e){return e=e===o?1:Ga(e),Wr(Xu(t,n),e)},dr.flatten=ju,dr.flattenDeep=function(t){return null!=t&&t.length?Wr(t,R):[]},dr.flattenDepth=function(t,n){return null!=t&&t.length?Wr(t,n=n===o?1:Ga(n)):[]},dr.flip=function(t){return To(t,M)},dr.flow=kc,dr.flowRight=Cc,dr.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},dr.functions=function(t){return null==t?[]:Xr(t,oc(t))},dr.functionsIn=function(t){return null==t?[]:Xr(t,uc(t))},dr.groupBy=$u,dr.initial=function(t){return null!=t&&t.length?Ni(t,0,-1):[]},dr.intersection=_u,dr.intersectionBy=mu,dr.intersectionWith=wu,dr.invert=ec,dr.invertBy=rc,dr.invokeMap=Ju,dr.iteratee=Nc,dr.keyBy=Ku,dr.keys=oc,dr.keysIn=uc,dr.map=Xu,dr.mapKeys=function(t,n){var e={};return n=zo(n,3),Jr(t,function(t,r,i){Br(e,n(t,r,i),t)}),e},dr.mapValues=function(t,n){var e={};return n=zo(n,3),Jr(t,function(t,r,i){Br(e,r,n(t,r,i))}),e},dr.matches=function(t){return di(Lr(t,h))},dr.matchesProperty=function(t,n){return gi(t,Lr(n,h))},dr.memoize=ca,dr.merge=ac,dr.mergeWith=cc,dr.method=Rc,dr.methodOf=Bc,dr.mixin=Ac,dr.negate=fa,dr.nthArg=function(t){return t=Ga(t),Ei(function(n){return yi(n,t)})},dr.omit=fc,dr.omitBy=function(t,n){return lc(t,fa(zo(n)))},dr.once=function(t){return ea(2,t)},dr.orderBy=function(t,n,e,r){return null==t?[]:(ya(n)||(n=null==n?[]:[n]),ya(e=r?o:e)||(e=null==e?[]:[e]),ji(t,n,e))},dr.over=Lc,dr.overArgs=sa,dr.overEvery=zc,dr.overSome=qc,dr.partial=la,dr.partialRight=ha,dr.partition=Zu,dr.pick=sc,dr.pickBy=lc,dr.property=Fc,dr.propertyOf=function(t){return function(n){return null==t?o:Zr(t,n)}},dr.pull=Eu,dr.pullAll=Mu,dr.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?_i(t,n,zo(e,2)):t},dr.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?_i(t,n,o,e):t},dr.pullAt=Tu,dr.range=Dc,dr.rangeRight=Gc,dr.rearg=pa,dr.reject=function(t,n){return(ya(t)?te:Vr)(t,fa(zo(n,3)))},dr.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=zo(n,3);++r<o;){var u=t[r];n(u,r,t)&&(e.push(u),i.push(r))}return mi(t,i),e},dr.rest=function(t,n){if("function"!=typeof t)throw new on(c);return Ei(t,n=n===o?n:Ga(n))},dr.reverse=Su,dr.sampleSize=function(t,n,e){return n=(e?Jo(t,n,e):n===o)?1:Ga(n),(ya(t)?Tr:Ti)(t,n)},dr.set=function(t,n,e){return null==t?t:Si(t,n,e)},dr.setWith=function(t,n,e,r){return r="function"==typeof r?r:o,null==t?t:Si(t,n,e,r)},dr.shuffle=function(t){return(ya(t)?Sr:Pi)(t)},dr.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&Jo(t,n,e)?(n=0,e=r):(n=null==n?0:Ga(n),e=e===o?r:Ga(e)),Ni(t,n,e)):[]},dr.sortBy=Qu,dr.sortedUniq=function(t){return t&&t.length?Ii(t):[]},dr.sortedUniqBy=function(t,n){return t&&t.length?Ii(t,zo(n,2)):[]},dr.split=function(t,n,e){return e&&"number"!=typeof e&&Jo(t,n,e)&&(n=e=o),(e=e===o?L:e>>>0)?(t=Wa(t))&&("string"==typeof n||null!=n&&!Ra(n))&&!(n=zi(n))&&Se(t)?Ki(Ae(t),0,e):t.split(n,e):[]},dr.spread=function(t,n){if("function"!=typeof t)throw new on(c);return n=null==n?0:Ye(Ga(n),0),Ei(function(e){var r=e[n],i=Ki(e,0,n);return r&&ie(i,r),Jn(t,this,i)})},dr.tail=function(t){var n=null==t?0:t.length;return n?Ni(t,1,n):[]},dr.take=function(t,n,e){return t&&t.length?Ni(t,0,(n=e||n===o?1:Ga(n))<0?0:n):[]},dr.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?Ni(t,(n=r-(n=e||n===o?1:Ga(n)))<0?0:n,r):[]},dr.takeRightWhile=function(t,n){return t&&t.length?Gi(t,zo(n,3),!1,!0):[]},dr.takeWhile=function(t,n){return t&&t.length?Gi(t,zo(n,3)):[]},dr.tap=function(t,n){return n(t),t},dr.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new on(c);return Sa(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),oa(t,n,{leading:r,maxWait:n,trailing:i})},dr.thru=Du,dr.toArray=Fa,dr.toPairs=hc,dr.toPairsIn=pc,dr.toPath=function(t){return ya(t)?re(t,lu):Ia(t)?[t]:io(su(Wa(t)))},dr.toPlainObject=Va,dr.transform=function(t,n,e){var r=ya(t),i=r||ma(t)||La(t);if(n=zo(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:Sa(t)&&Ea(o)?gr(Cn(t)):{}}return(i?Xn:Jr)(t,function(t,r,i){return n(e,t,r,i)}),e},dr.unary=function(t){return na(t,1)},dr.union=ku,dr.unionBy=Cu,dr.unionWith=Pu,dr.uniq=function(t){return t&&t.length?qi(t):[]},dr.uniqBy=function(t,n){return t&&t.length?qi(t,zo(n,2)):[]},dr.uniqWith=function(t,n){return n="function"==typeof n?n:o,t&&t.length?qi(t,o,n):[]},dr.unset=function(t,n){return null==t||Fi(t,n)},dr.unzip=Nu,dr.unzipWith=Ru,dr.update=function(t,n,e){return null==t?t:Di(t,n,Yi(e))},dr.updateWith=function(t,n,e,r){return r="function"==typeof r?r:o,null==t?t:Di(t,n,Yi(e),r)},dr.values=vc,dr.valuesIn=function(t){return null==t?[]:_e(t,uc(t))},dr.without=Bu,dr.words=Ec,dr.wrap=function(t,n){return la(Yi(n),t)},dr.xor=Au,dr.xorBy=Iu,dr.xorWith=Lu,dr.zip=zu,dr.zipObject=function(t,n){return Vi(t||[],n||[],Cr)},dr.zipObjectDeep=function(t,n){return Vi(t||[],n||[],Si)},dr.zipWith=qu,dr.entries=hc,dr.entriesIn=pc,dr.extend=$a,dr.extendWith=Ja,Ac(dr,dr),dr.add=Vc,dr.attempt=Mc,dr.camelCase=dc,dr.capitalize=gc,dr.ceil=Wc,dr.clamp=function(t,n,e){return e===o&&(e=n,n=o),e!==o&&(e=(e=Ua(e))==e?e:0),n!==o&&(n=(n=Ua(n))==n?n:0),Ir(Ua(t),n,e)},dr.clone=function(t){return Lr(t,v)},dr.cloneDeep=function(t){return Lr(t,h|v)},dr.cloneDeepWith=function(t,n){return Lr(t,h|v,n="function"==typeof n?n:o)},dr.cloneWith=function(t,n){return Lr(t,v,n="function"==typeof n?n:o)},dr.conformsTo=function(t,n){return null==n||zr(t,n,oc(n))},dr.deburr=bc,dr.defaultTo=function(t,n){return null==t||t!=t?n:t},dr.divide=Yc,dr.endsWith=function(t,n,e){t=Wa(t),n=zi(n);var r=t.length,i=e=e===o?r:Ir(Ga(e),0,r);return(e-=n.length)>=0&&t.slice(e,i)==n},dr.eq=va,dr.escape=function(t){return(t=Wa(t))&&Et.test(t)?t.replace(wt,Me):t},dr.escapeRegExp=function(t){return(t=Wa(t))&&Bt.test(t)?t.replace(Rt,"\\$&"):t},dr.every=function(t,n,e){var r=ya(t)?Qn:Hr;return e&&Jo(t,n,e)&&(n=o),r(t,zo(n,3))},dr.find=Uu,dr.findIndex=bu,dr.findKey=function(t,n){return fe(t,zo(n,3),Jr)},dr.findLast=Vu,dr.findLastIndex=yu,dr.findLastKey=function(t,n){return fe(t,zo(n,3),Kr)},dr.floor=$c,dr.forEach=Wu,dr.forEachRight=Yu,dr.forIn=function(t,n){return null==t?t:Yr(t,zo(n,3),uc)},dr.forInRight=function(t,n){return null==t?t:$r(t,zo(n,3),uc)},dr.forOwn=function(t,n){return t&&Jr(t,zo(n,3))},dr.forOwnRight=function(t,n){return t&&Kr(t,zo(n,3))},dr.get=tc,dr.gt=da,dr.gte=ga,dr.has=function(t,n){return null!=t&&Vo(t,n,ei)},dr.hasIn=nc,dr.head=Ou,dr.identity=Pc,dr.includes=function(t,n,e,r){t=Oa(t)?t:vc(t),e=e&&!r?Ga(e):0;var i=t.length;return e<0&&(e=Ye(i+e,0)),Aa(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&le(t,n,e)>-1},dr.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:Ga(e);return i<0&&(i=Ye(r+i,0)),le(t,n,i)},dr.inRange=function(t,n,e){return n=Da(n),e===o?(e=n,n=0):e=Da(e),function(t,n,e){return t>=$e(n,e)&&t<Ye(n,e)}(t=Ua(t),n,e)},dr.invoke=ic,dr.isArguments=ba,dr.isArray=ya,dr.isArrayBuffer=ja,dr.isArrayLike=Oa,dr.isArrayLikeObject=_a,dr.isBoolean=function(t){return!0===t||!1===t||ka(t)&&ti(t)==U},dr.isBuffer=ma,dr.isDate=wa,dr.isElement=function(t){return ka(t)&&1===t.nodeType&&!Na(t)},dr.isEmpty=function(t){if(null==t)return!0;if(Oa(t)&&(ya(t)||"string"==typeof t||"function"==typeof t.splice||ma(t)||La(t)||ba(t)))return!t.length;var n=Uo(t);if(n==K||n==et)return!t.size;if(Qo(t))return!li(t).length;for(var e in t)if(ln.call(t,e))return!1;return!0},dr.isEqual=function(t,n){return ai(t,n)},dr.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:o)?e(t,n):o;return r===o?ai(t,n,o,e):!!r},dr.isError=xa,dr.isFinite=function(t){return"number"==typeof t&&Ue(t)},dr.isFunction=Ea,dr.isInteger=Ma,dr.isLength=Ta,dr.isMap=Ca,dr.isMatch=function(t,n){return t===n||ci(t,n,Fo(n))},dr.isMatchWith=function(t,n,e){return e="function"==typeof e?e:o,ci(t,n,Fo(n),e)},dr.isNaN=function(t){return Pa(t)&&t!=+t},dr.isNative=function(t){if(Zo(t))throw new i(a);return fi(t)},dr.isNil=function(t){return null==t},dr.isNull=function(t){return null===t},dr.isNumber=Pa,dr.isObject=Sa,dr.isObjectLike=ka,dr.isPlainObject=Na,dr.isRegExp=Ra,dr.isSafeInteger=function(t){return Ma(t)&&t>=-B&&t<=B},dr.isSet=Ba,dr.isString=Aa,dr.isSymbol=Ia,dr.isTypedArray=La,dr.isUndefined=function(t){return t===o},dr.isWeakMap=function(t){return ka(t)&&Uo(t)==ut},dr.isWeakSet=function(t){return ka(t)&&ti(t)==at},dr.join=function(t,n){return null==t?"":Ve.call(t,n)},dr.kebabCase=yc,dr.last=xu,dr.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r;return e!==o&&(i=(i=Ga(e))<0?Ye(r+i,0):$e(i,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,i):se(t,pe,i,!0)},dr.lowerCase=jc,dr.lowerFirst=Oc,dr.lt=za,dr.lte=qa,dr.max=function(t){return t&&t.length?Ur(t,Pc,ni):o},dr.maxBy=function(t,n){return t&&t.length?Ur(t,zo(n,2),ni):o},dr.mean=function(t){return ve(t,Pc)},dr.meanBy=function(t,n){return ve(t,zo(n,2))},dr.min=function(t){return t&&t.length?Ur(t,Pc,pi):o},dr.minBy=function(t,n){return t&&t.length?Ur(t,zo(n,2),pi):o},dr.stubArray=Hc,dr.stubFalse=Uc,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Jc,dr.nth=function(t,n){return t&&t.length?yi(t,Ga(n)):o},dr.noConflict=function(){return An._===this&&(An._=gn),this},dr.noop=Ic,dr.now=ta,dr.pad=function(t,n,e){t=Wa(t);var r=(n=Ga(n))?Be(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return Oo(De(i),e)+t+Oo(Fe(i),e)},dr.padEnd=function(t,n,e){t=Wa(t);var r=(n=Ga(n))?Be(t):0;return n&&r<n?t+Oo(n-r,e):t},dr.padStart=function(t,n,e){t=Wa(t);var r=(n=Ga(n))?Be(t):0;return n&&r<n?Oo(n-r,e)+t:t},dr.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),Ke(Wa(t).replace(It,""),n||0)},dr.random=function(t,n,e){if(e&&"boolean"!=typeof e&&Jo(t,n,e)&&(n=e=o),e===o&&("boolean"==typeof n?(e=n,n=o):"boolean"==typeof t&&(e=t,t=o)),t===o&&n===o?(t=0,n=1):(t=Da(t),n===o?(n=t,t=0):n=Da(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var i=Xe();return $e(t+i*(n-t+Pn("1e-"+((i+"").length-1))),n)}return wi(t,n)},dr.reduce=function(t,n,e){var r=ya(t)?oe:be,i=arguments.length<3;return r(t,zo(n,4),e,i,Dr)},dr.reduceRight=function(t,n,e){var r=ya(t)?ue:be,i=arguments.length<3;return r(t,zo(n,4),e,i,Gr)},dr.repeat=function(t,n,e){return n=(e?Jo(t,n,e):n===o)?1:Ga(n),xi(Wa(t),n)},dr.replace=function(){var t=arguments,n=Wa(t[0]);return t.length<3?n:n.replace(t[1],t[2])},dr.result=function(t,n,e){var r=-1,i=(n=$i(n,t)).length;for(i||(i=1,t=o);++r<i;){var u=null==t?o:t[lu(n[r])];u===o&&(r=i,u=e),t=Ea(u)?u.call(t):u}return t},dr.round=Kc,dr.runInContext=t,dr.sample=function(t){return(ya(t)?Mr:Mi)(t)},dr.size=function(t){if(null==t)return 0;if(Oa(t))return Aa(t)?Be(t):t.length;var n=Uo(t);return n==K||n==et?t.size:li(t).length},dr.snakeCase=_c,dr.some=function(t,n,e){var r=ya(t)?ae:Ri;return e&&Jo(t,n,e)&&(n=o),r(t,zo(n,3))},dr.sortedIndex=function(t,n){return Bi(t,n)},dr.sortedIndexBy=function(t,n,e){return Ai(t,n,zo(e,2))},dr.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=Bi(t,n);if(r<e&&va(t[r],n))return r}return-1},dr.sortedLastIndex=function(t,n){return Bi(t,n,!0)},dr.sortedLastIndexBy=function(t,n,e){return Ai(t,n,zo(e,2),!0)},dr.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=Bi(t,n,!0)-1;if(va(t[e],n))return e}return-1},dr.startCase=mc,dr.startsWith=function(t,n,e){return t=Wa(t),e=null==e?0:Ir(Ga(e),0,t.length),n=zi(n),t.slice(e,e+n.length)==n},dr.subtract=Xc,dr.sum=function(t){return t&&t.length?ye(t,Pc):0},dr.sumBy=function(t,n){return t&&t.length?ye(t,zo(n,2)):0},dr.template=function(t,n,e){var r=dr.templateSettings;e&&Jo(t,n,e)&&(n=o),t=Wa(t),n=Ja({},n,r,So);var i,u,a=Ja({},n.imports,r.imports,So),c=oc(a),f=_e(a,c),s=0,l=n.interpolate||Xt,h="__p += '",p=en((n.escape||Xt).source+"|"+l.source+"|"+(l===St?Ht:Xt).source+"|"+(n.evaluate||Xt).source+"|$","g"),v="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++Tn+"]")+"\n";t.replace(p,function(n,e,r,o,a,c){return r||(r=o),h+=t.slice(s,c).replace(Zt,Te),e&&(i=!0,h+="' +\n__e("+e+") +\n'"),a&&(u=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=c+n.length,n}),h+="';\n";var d=n.variable;d||(h="with (obj) {\n"+h+"\n}\n"),h=(u?h.replace(jt,""):h).replace(Ot,"$1").replace(_t,"$1;"),h="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Mc(function(){return Qt(c,v+"return "+h).apply(o,f)});if(g.source=h,xa(g))throw g;return g},dr.times=function(t,n){if((t=Ga(t))<1||t>B)return[];var e=L,r=$e(t,L);n=zo(n),t-=L;for(var i=je(r,n);++e<t;)n(e);return i},dr.toFinite=Da,dr.toInteger=Ga,dr.toLength=Ha,dr.toLower=function(t){return Wa(t).toLowerCase()},dr.toNumber=Ua,dr.toSafeInteger=function(t){return t?Ir(Ga(t),-B,B):0===t?t:0},dr.toString=Wa,dr.toUpper=function(t){return Wa(t).toUpperCase()},dr.trim=function(t,n,e){if((t=Wa(t))&&(e||n===o))return t.replace(At,"");if(!t||!(n=zi(n)))return t;var r=Ae(t),i=Ae(n);return Ki(r,we(r,i),xe(r,i)+1).join("")},dr.trimEnd=function(t,n,e){if((t=Wa(t))&&(e||n===o))return t.replace(Lt,"");if(!t||!(n=zi(n)))return t;var r=Ae(t);return Ki(r,0,xe(r,Ae(n))+1).join("")},dr.trimStart=function(t,n,e){if((t=Wa(t))&&(e||n===o))return t.replace(It,"");if(!t||!(n=zi(n)))return t;var r=Ae(t);return Ki(r,we(r,Ae(n))).join("")},dr.truncate=function(t,n){var e=T,r=S;if(Sa(n)){var i="separator"in n?n.separator:i;e="length"in n?Ga(n.length):e,r="omission"in n?zi(n.omission):r}var u=(t=Wa(t)).length;if(Se(t)){var a=Ae(t);u=a.length}if(e>=u)return t;var c=e-Be(r);if(c<1)return r;var f=a?Ki(a,0,c).join(""):t.slice(0,c);if(i===o)return f+r;if(a&&(c+=f.length-c),Ra(i)){if(t.slice(c).search(i)){var s,l=f;for(i.global||(i=en(i.source,Wa(Ut.exec(i))+"g")),i.lastIndex=0;s=i.exec(l);)var h=s.index;f=f.slice(0,h===o?c:h)}}else if(t.indexOf(zi(i),c)!=c){var p=f.lastIndexOf(i);p>-1&&(f=f.slice(0,p))}return f+r},dr.unescape=function(t){return(t=Wa(t))&&xt.test(t)?t.replace(mt,Ie):t},dr.uniqueId=function(t){var n=++hn;return Wa(t)+n},dr.upperCase=wc,dr.upperFirst=xc,dr.each=Wu,dr.eachRight=Yu,dr.first=Ou,Ac(dr,function(){var t={};return Jr(dr,function(n,e){ln.call(dr.prototype,e)||(t[e]=n)}),t}(),{chain:!1}),dr.VERSION="4.17.4",Xn(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){dr[t].placeholder=dr}),Xn(["drop","take"],function(t,n){jr.prototype[t]=function(e){e=e===o?1:Ye(Ga(e),0);var r=this.__filtered__&&!n?new jr(this):this.clone();return r.__filtered__?r.__takeCount__=$e(e,r.__takeCount__):r.__views__.push({size:$e(e,L),type:t+(r.__dir__<0?"Right":"")}),r},jr.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}}),Xn(["filter","map","takeWhile"],function(t,n){var e=n+1,r=e==P||3==e;jr.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:zo(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}}),Xn(["head","last"],function(t,n){var e="take"+(n?"Right":"");jr.prototype[t]=function(){return this[e](1).value()[0]}}),Xn(["initial","tail"],function(t,n){var e="drop"+(n?"":"Right");jr.prototype[t]=function(){return this.__filtered__?new jr(this):this[e](1)}}),jr.prototype.compact=function(){return this.filter(Pc)},jr.prototype.find=function(t){return this.filter(t).head()},jr.prototype.findLast=function(t){return this.reverse().find(t)},jr.prototype.invokeMap=Ei(function(t,n){return"function"==typeof t?new jr(this):this.map(function(e){return oi(e,t,n)})}),jr.prototype.reject=function(t){return this.filter(fa(zo(t)))},jr.prototype.slice=function(t,n){t=Ga(t);var e=this;return e.__filtered__&&(t>0||n<0)?new jr(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==o&&(e=(n=Ga(n))<0?e.dropRight(-n):e.take(n-t)),e)},jr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},jr.prototype.toArray=function(){return this.take(L)},Jr(jr.prototype,function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),i=dr[r?"take"+("last"==n?"Right":""):n],u=r||/^find/.test(n);i&&(dr.prototype[n]=function(){var n=this.__wrapped__,a=r?[1]:arguments,c=n instanceof jr,f=a[0],s=c||ya(n),l=function(t){var n=i.apply(dr,ie([t],a));return r&&h?n[0]:n};s&&e&&"function"==typeof f&&1!=f.length&&(c=s=!1);var h=this.__chain__,p=!!this.__actions__.length,v=u&&!h,d=c&&!p;if(!u&&s){n=d?n:new jr(this);var g=t.apply(n,a);return g.__actions__.push({func:Du,args:[l],thisArg:o}),new yr(g,h)}return v&&d?t.apply(this,a):(g=this.thru(l),v?r?g.value()[0]:g.value():g)})}),Xn(["pop","push","shift","sort","splice","unshift"],function(t){var n=un[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);dr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(ya(i)?i:[],t)}return this[e](function(e){return n.apply(ya(e)?e:[],t)})}}),Jr(jr.prototype,function(t,n){var e=dr[n];if(e){var r=e.name+"";(ur[r]||(ur[r]=[])).push({name:n,func:e})}}),ur[go(o,y).name]=[{name:"wrapper",func:o}],jr.prototype.clone=function(){var t=new jr(this.__wrapped__);return t.__actions__=io(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=io(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=io(this.__views__),t},jr.prototype.reverse=function(){if(this.__filtered__){var t=new jr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},jr.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=ya(t),r=n<0,i=e?t.length:0,o=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=$e(n,t+u);break;case"takeRight":t=Ye(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,c=a-u,f=r?a:u-1,s=this.__iteratees__,l=s.length,h=0,p=$e(c,this.__takeCount__);if(!e||!r&&i==c&&p==c)return Hi(t,this.__actions__);var v=[];t:for(;c--&&h<p;){for(var d=-1,g=t[f+=n];++d<l;){var b=s[d],y=b.iteratee,j=b.type,O=y(g);if(j==N)g=O;else if(!O){if(j==P)continue t;break t}}v[h++]=g}return v},dr.prototype.at=Gu,dr.prototype.chain=function(){return Fu(this)},dr.prototype.commit=function(){return new yr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===o&&(this.__values__=Fa(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},dr.prototype.plant=function(t){for(var n,e=this;e instanceof br;){var r=pu(e);r.__index__=0,r.__values__=o,n?i.__wrapped__=r:n=r;var i=r;e=e.__wrapped__}return i.__wrapped__=t,n},dr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof jr){var n=t;return this.__actions__.length&&(n=new jr(this)),(n=n.reverse()).__actions__.push({func:Du,args:[Su],thisArg:o}),new yr(n,this.__chain__)}return this.thru(Su)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Hi(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,qn&&(dr.prototype[qn]=function(){return this}),dr}();An._=Le,(i=function(){return Le}.call(n,e,n,r))===o||(r.exports=i)}).call(this)}).call(n,e(435),e(436)(t))},function(t,n,e){var r=e(13),i=e(171);t.exports=function(t,n,e,r){return function(t,n,e,r){var o,u,a={},c=new i,f=function(t){var n=t.v!==o?t.v:t.w,r=a[n],i=e(t),f=u.distance+i;if(i<0)throw new Error("dijkstra does not allow negative edge weights. Bad edge: "+t+" Weight: "+i);f<r.distance&&(r.distance=f,r.predecessor=o,c.decrease(n,f))};t.nodes().forEach(function(t){var e=t===n?0:Number.POSITIVE_INFINITY;a[t]={distance:e},c.add(t,e)});for(;c.size()>0&&(o=c.removeMin(),(u=a[o]).distance!==Number.POSITIVE_INFINITY);)r(o).forEach(f);return a}(t,String(n),e||o,r||function(n){return t.outEdges(n)})};var o=r.constant(1)},function(t,n,e){var r=e(13);function i(){this._arr=[],this._keyIndices={}}t.exports=i,i.prototype.size=function(){return this._arr.length},i.prototype.keys=function(){return this._arr.map(function(t){return t.key})},i.prototype.has=function(t){return r.has(this._keyIndices,t)},i.prototype.priority=function(t){var n=this._keyIndices[t];if(void 0!==n)return this._arr[n].priority},i.prototype.min=function(){if(0===this.size())throw new Error("Queue underflow");return this._arr[0].key},i.prototype.add=function(t,n){var e=this._keyIndices;if(t=String(t),!r.has(e,t)){var i=this._arr,o=i.length;return e[t]=o,i.push({key:t,priority:n}),this._decrease(o),!0}return!1},i.prototype.removeMin=function(){this._swap(0,this._arr.length-1);var t=this._arr.pop();return delete this._keyIndices[t.key],this._heapify(0),t.key},i.prototype.decrease=function(t,n){var e=this._keyIndices[t];if(n>this._arr[e].priority)throw new Error("New priority is greater than current priority. Key: "+t+" Old: "+this._arr[e].priority+" New: "+n);this._arr[e].priority=n,this._decrease(e)},i.prototype._heapify=function(t){var n=this._arr,e=2*t,r=e+1,i=t;e<n.length&&(i=n[e].priority<n[i].priority?e:i,r<n.length&&(i=n[r].priority<n[i].priority?r:i),i!==t&&(this._swap(t,i),this._heapify(i)))},i.prototype._decrease=function(t){for(var n,e=this._arr,r=e[t].priority;0!==t&&!(e[n=t>>1].priority<r);)this._swap(t,n),t=n},i.prototype._swap=function(t,n){var e=this._arr,r=this._keyIndices,i=e[t],o=e[n];e[t]=o,e[n]=i,r[o.key]=t,r[i.key]=n}},function(t,n,e){var r=e(13);t.exports=function(t){var n=0,e=[],i={},o=[];return t.nodes().forEach(function(u){r.has(i,u)||function u(a){var c=i[a]={onStack:!0,lowlink:n,index:n++};if(e.push(a),t.successors(a).forEach(function(t){r.has(i,t)?i[t].onStack&&(c.lowlink=Math.min(c.lowlink,i[t].index)):(u(t),c.lowlink=Math.min(c.lowlink,i[t].lowlink))}),c.lowlink===c.index){var f,s=[];do{f=e.pop(),i[f].onStack=!1,s.push(f)}while(a!==f);o.push(s)}}(u)}),o}},function(t,n,e){var r=e(13);function i(t){var n={},e={},i=[];if(r.each(t.sinks(),function u(a){if(r.has(e,a))throw new o;r.has(n,a)||(e[a]=!0,n[a]=!0,r.each(t.predecessors(a),u),delete e[a],i.push(a))}),r.size(n)!==t.nodeCount())throw new o;return i}function o(){}t.exports=i,i.CycleException=o},function(t,n,e){var r=e(13);t.exports=function(t,n,e){r.isArray(n)||(n=[n]);var i=(t.isDirected()?t.successors:t.neighbors).bind(t),o=[],u={};return r.each(n,function(n){if(!t.hasNode(n))throw new Error("Graph does not have node: "+n);!function t(n,e,i,o,u,a){r.has(o,e)||(o[e]=!0,i||a.push(e),r.each(u(e),function(e){t(n,e,i,o,u,a)}),i&&a.push(e))}(t,n,"post"===e,u,i,o)}),o}},function(t,n,e){"use strict";var r=e(8),i=e(16).Graph,o=e(59).slack;function u(t,n){return r.forEach(t.nodes(),function e(i){r.forEach(n.nodeEdges(i),function(r){var u=r.v,a=i===u?r.w:u;t.hasNode(a)||o(n,r)||(t.setNode(a,{}),t.setEdge(i,a,{}),e(a))})}),t.nodeCount()}function a(t,n){return r.minBy(n.edges(),function(e){if(t.hasNode(e.v)!==t.hasNode(e.w))return o(n,e)})}function c(t,n,e){r.forEach(t.nodes(),function(t){n.node(t).rank+=e})}t.exports=function(t){var n,e,r=new i({directed:!1}),f=t.nodes()[0],s=t.nodeCount();r.setNode(f,{});for(;u(r,t)<s;)n=a(r,t),e=r.hasNode(n.v)?o(t,n):-o(t,n),c(r,t,e);return r}},function(t,n,e){"use strict";n.c=function(t){return t.depth},n.d=function(t,n){return n-1-t.height},n.b=function(t,n){return t.sourceLinks.length?t.depth:n-1},n.a=function(t){return t.targetLinks.length?t.depth:t.sourceLinks.length?Object(r.min)(t.sourceLinks,i)-1:0};var r=e(14);function i(t){return t.target.depth}},function(t,n,e){"use strict";var r=e(33),i=e(27),o=e(60),u=e(95),a=e(96);n.a=function(){var t=a.a,n=null,e=Object(i.a)(0),c=a.b,f=Object(i.a)(!0),s=null,l=o.a,h=null;function p(i){var o,u,a,p,v,d=i.length,g=!1,b=new Array(d),y=new Array(d);for(null==s&&(h=l(v=Object(r.path)())),o=0;o<=d;++o){if(!(o<d&&f(p=i[o],o,i))===g)if(g=!g)u=o,h.areaStart(),h.lineStart();else{for(h.lineEnd(),h.lineStart(),a=o-1;a>=u;--a)h.point(b[a],y[a]);h.lineEnd(),h.areaEnd()}g&&(b[o]=+t(p,o,i),y[o]=+e(p,o,i),h.point(n?+n(p,o,i):b[o],c?+c(p,o,i):y[o]))}if(v)return h=null,v+""||null}function v(){return Object(u.a)().defined(f).curve(l).context(s)}return p.x=function(e){return arguments.length?(t="function"==typeof e?e:Object(i.a)(+e),n=null,p):t},p.x0=function(n){return arguments.length?(t="function"==typeof n?n:Object(i.a)(+n),p):t},p.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Object(i.a)(+t),p):n},p.y=function(t){return arguments.length?(e="function"==typeof t?t:Object(i.a)(+t),c=null,p):e},p.y0=function(t){return arguments.length?(e="function"==typeof t?t:Object(i.a)(+t),p):e},p.y1=function(t){return arguments.length?(c=null==t?null:"function"==typeof t?t:Object(i.a)(+t),p):c},p.lineX0=p.lineY0=function(){return v().x(t).y(e)},p.lineY1=function(){return v().x(t).y(c)},p.lineX1=function(){return v().x(n).y(e)},p.defined=function(t){return arguments.length?(f="function"==typeof t?t:Object(i.a)(!!t),p):f},p.curve=function(t){return arguments.length?(l=t,null!=s&&(h=l(s)),p):l},p.context=function(t){return arguments.length?(null==t?s=h=null:h=l(s=t),p):s},p}},function(t,n,e){"use strict";e.d(n,"a",function(){return r}),n.b=o;var r=o(e(60).a);function i(t){this._curve=t}function o(t){function n(n){return new i(t(n))}return n._curve=t,n}i.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}}},function(t,n,e){"use strict";n.a=i;var r=e(178);e(95);function i(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Object(r.b)(t)):n()._curve},t}},function(t,n,e){"use strict";n.a=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}},function(t,n,e){"use strict";e.d(n,"a",function(){return r});var r=Array.prototype.slice},function(t,n,e){"use strict";var r=e(46);n.a={draw:function(t,n){var e=Math.sqrt(n/r.j);t.moveTo(e,0),t.arc(0,0,e,0,r.m)}}},function(t,n,e){"use strict";n.a={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}}},function(t,n,e){"use strict";var r=Math.sqrt(1/3),i=2*r;n.a={draw:function(t,n){var e=Math.sqrt(n/i),o=e*r;t.moveTo(0,-e),t.lineTo(o,0),t.lineTo(0,e),t.lineTo(-o,0),t.closePath()}}},function(t,n,e){"use strict";var r=e(46),i=Math.sin(r.j/10)/Math.sin(7*r.j/10),o=Math.sin(r.m/10)*i,u=-Math.cos(r.m/10)*i;n.a={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),i=o*e,a=u*e;t.moveTo(0,-e),t.lineTo(i,a);for(var c=1;c<5;++c){var f=r.m*c/5,s=Math.cos(f),l=Math.sin(f);t.lineTo(l*e,-s*e),t.lineTo(s*i-l*a,l*i+s*a)}t.closePath()}}},function(t,n,e){"use strict";n.a={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}}},function(t,n,e){"use strict";var r=Math.sqrt(3);n.a={draw:function(t,n){var e=-Math.sqrt(n/(3*r));t.moveTo(0,2*e),t.lineTo(-r*e,-e),t.lineTo(r*e,-e),t.closePath()}}},function(t,n,e){"use strict";var r=-.5,i=Math.sqrt(3)/2,o=1/Math.sqrt(12),u=3*(o/2+1);n.a={draw:function(t,n){var e=Math.sqrt(n/u),a=e/2,c=e*o,f=a,s=e*o+e,l=-f,h=s;t.moveTo(a,c),t.lineTo(f,s),t.lineTo(l,h),t.lineTo(r*a-i*c,i*a+r*c),t.lineTo(r*f-i*s,i*f+r*s),t.lineTo(r*l-i*h,i*l+r*h),t.lineTo(r*a+i*c,r*c-i*a),t.lineTo(r*f+i*s,r*s-i*f),t.lineTo(r*l+i*h,r*h-i*l),t.closePath()}}},function(t,n,e){"use strict";n.a=o;var r=e(61),i=e(63);function o(t,n){this._context=t,this._k=(1-n)/6}o.prototype={areaStart:r.a,areaEnd:r.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Object(i.b)(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new o(t,n)}return e.tension=function(n){return t(+n)},e})(0)},function(t,n,e){"use strict";n.a=i;var r=e(63);function i(t,n){this._context=t,this._k=(1-n)/6}i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(r.b)(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new i(t,n)}return e.tension=function(n){return t(+n)},e})(0)},function(t,n,e){"use strict";n.c=function(t){return i.b[t.index]={site:t,halfedges:[]}},n.a=u,n.d=function(){for(var t,n,e,r,u=0,a=i.b.length;u<a;++u)if((t=i.b[u])&&(r=(n=t.halfedges).length)){var c=new Array(r),f=new Array(r);for(e=0;e<r;++e)c[e]=e,f[e]=o(t,i.e[n[e]]);for(c.sort(function(t,n){return f[n]-f[t]}),e=0;e<r;++e)f[e]=n[c[e]];for(e=0;e<r;++e)n[e]=f[e]}},n.b=function(t,n,e,o){var c,f,s,l,h,p,v,d,g,b,y,j,O=i.b.length,_=!0;for(c=0;c<O;++c)if(f=i.b[c]){for(s=f.site,h=f.halfedges,l=h.length;l--;)i.e[h[l]]||h.splice(l,1);for(l=0,p=h.length;l<p;)b=a(f,i.e[h[l]]),y=b[0],j=b[1],v=u(f,i.e[h[++l%p]]),d=v[0],g=v[1],(Math.abs(y-d)>i.f||Math.abs(j-g)>i.f)&&(h.splice(l,0,i.e.push(Object(r.b)(s,b,Math.abs(y-t)<i.f&&o-j>i.f?[t,Math.abs(d-t)<i.f?g:o]:Math.abs(j-o)<i.f&&e-y>i.f?[Math.abs(g-o)<i.f?d:e,o]:Math.abs(y-e)<i.f&&j-n>i.f?[e,Math.abs(d-e)<i.f?g:n]:Math.abs(j-n)<i.f&&y-t>i.f?[Math.abs(g-n)<i.f?d:t,n]:null))-1),++p);p&&(_=!1)}if(_){var m,w,x,E=1/0;for(c=0,_=null;c<O;++c)(f=i.b[c])&&(s=f.site,m=s[0]-t,w=s[1]-n,(x=m*m+w*w)<E&&(E=x,_=f));if(_){var M=[t,n],T=[t,o],S=[e,o],k=[e,n];_.halfedges.push(i.e.push(Object(r.b)(s=_.site,M,T))-1,i.e.push(Object(r.b)(s,T,S))-1,i.e.push(Object(r.b)(s,S,k))-1,i.e.push(Object(r.b)(s,k,M))-1)}}for(c=0;c<O;++c)(f=i.b[c])&&(f.halfedges.length||delete i.b[c])};var r=e(100),i=e(49);function o(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function u(t,n){return n[+(n.left!==t.site)]}function a(t,n){return n[+(n.left===t.site)]}},function(t,n,e){"use strict";e.d(n,"c",function(){return r}),n.a=function(t){var n=t.P,e=t.N;if(!n||!e)return;var a=n.site,c=t.site,f=e.site;if(a===f)return;var s=c[0],l=c[1],h=a[0]-s,p=a[1]-l,v=f[0]-s,d=f[1]-l,g=2*(h*d-p*v);if(g>=-o.g)return;var b=h*h+p*p,y=v*v+d*d,j=(d*b-p*y)/g,O=(h*y-v*b)/g,_=u.pop()||new function(){Object(i.a)(this),this.x=this.y=this.arc=this.site=this.cy=null};_.arc=t,_.site=c,_.x=j+s,_.y=(_.cy=O+l)+Math.sqrt(j*j+O*O),t.circle=_;var m=null,w=o.c._;for(;w;)if(_.y<w.y||_.y===w.y&&_.x<=w.x){if(!w.L){m=w.P;break}w=w.L}else{if(!w.R){m=w;break}w=w.R}o.c.insert(m,_),m||(r=_)},n.b=function(t){var n=t.circle;n&&(n.P||(r=n.N),o.c.remove(n),u.push(n),Object(i.a)(n),t.circle=null)};var r,i=e(99),o=e(49),u=[]},function(t,n,e){var r=e(28),i={getId:function(t){return t.id||t.name},getHGap:function(t){return t.hgap||18},getVGap:function(t){return t.vgap||18},getChildren:function(t){return t.children},getHeight:function(t){return t.height||36},getWidth:function(t){var n=t.name||" ";return t.width||18*n.split("").length}};function o(t,n){var e=this;if(e.vgap=e.hgap=0,t instanceof o)return t;e.data=t;var r=n.getHGap(t),i=n.getVGap(t);return e.width=n.getWidth(t),e.height=n.getHeight(t),e.id=n.getId(t),e.x=e.y=0,e.depth=0,e.children||(e.children=[]),e.addGap(r,i),e}r.assign(o.prototype,{isRoot:function(){return 0===this.depth},isLeaf:function(){return 0===this.children.length},addGap:function(t,n){this.hgap+=t,this.vgap+=n,this.width+=2*t,this.height+=2*n},eachNode:function(t){for(var n,e=[this];n=e.pop();)t(n),e=e.concat(n.children)},DFTraverse:function(t){this.eachNode(t)},BFTraverse:function(t){for(var n,e=[this];n=e.shift();)t(n),e=e.concat(n.children)},getBoundingBox:function(){var t={left:Number.MAX_VALUE,top:Number.MAX_VALUE,width:0,height:0};return this.eachNode(function(n){t.left=Math.min(t.left,n.x),t.top=Math.min(t.top,n.y),t.width=Math.max(t.width,n.x+n.width),t.height=Math.max(t.height,n.y+n.height)}),t},translate:function(t,n){void 0===t&&(t=0),void 0===n&&(n=0),this.eachNode(function(e){e.x+=t,e.y+=n})},right2left:function(){var t=this.getBoundingBox();this.eachNode(function(n){n.x=n.x-2*(n.x-t.left)-n.width}),this.translate(t.width,0)},bottom2top:function(){var t=this.getBoundingBox();this.eachNode(function(n){n.y=n.y-2*(n.y-t.top)-n.height}),this.translate(0,t.height)}}),t.exports=function(t,n,e){void 0===n&&(n={});var u,a=new o(t,n=r.assign({},i,n)),c=[a];if(!e&&!t.collapsed)for(;u=c.pop();)if(!u.data.collapsed){var f=n.getChildren(u.data),s=f?f.length:0;if(u.children=new Array(s),f&&s)for(var l=0;l<s;l++){var h=new o(f[l],n);u.children[l]=h,c.push(h),h.parent=u,h.depth=u.depth+1}}return a}},function(t,n,e){var r=e(193);t.exports=function(t,n){for(var e=r(t.data,n,!0),i=r(t.data,n,!0),o=t.children.length,u=Math.round(o/2),a=n.getSide||function(t,n){return n<u?"right":"left"},c=0;c<o;c++){var f=t.children[c];"right"===a(f,c)?i.children.push(f):e.children.push(f)}return e.eachNode(function(t){t.isRoot()||(t.side="left")}),i.eachNode(function(t){t.isRoot()||(t.side="right")}),{left:e,right:i}}},function(t,n,e){e(196),e(350),e(351),e(354),e(355),e(357),e(361),e(158),e(365),e(366),e(368),e(390),e(398),e(399),e(400),e(403),e(404),e(405),e(406),e(407),e(408),e(409),e(410),e(411),e(413),e(414),e(415),e(418),e(420),e(422),e(423),e(424),e(425),e(426),e(427),e(428),e(429),e(430),e(431),e(472),e(508),e(514),e(515),e(524),e(525),e(526),e(527),e(528),e(529),e(530),e(532),e(534),e(535),t.exports=e(2)},function(t,n,e){var r=e(3),i=e(0),o=i.geoArea,u=i.geoCentroid,a=i.geoContains,c=i.geoDistance,f=i.geoLength,s=e(128).geoProject,l=e(39),h=e(141);r(l.prototype,{geoArea:function(t){return o(t)},geoAreaByName:function(t){return o(this.geoFeatureByName(t))},geoCentroid:function(t){return u(t)},geoCentroidByName:function(t){return u(this.geoFeatureByName(t))},geoDistance:function(t,n){return c(t,n)},geoLength:function(t){return f(t)},geoLengthByName:function(t){return f(this.geoFeatureByName(t))},geoContains:function(t,n){return a(t,n)},geoFeatureByName:function(t){var n;return this.rows.some(function(e){return e.name===t&&(n=e,!0)}),n},geoFeatureByPosition:function(t){var n;return this.rows.some(function(e){return!!a(e,t)&&(n=e,!0)}),n},geoNameByPosition:function(t){var n=this.geoFeatureByPosition(t);if(n)return n.name},getGeoProjection:h,geoProject:function(t,n,e){return n=h(n,e),s(t,n)},geoProjectByName:function(t,n,e){return n=h(n,e),s(this.geoFeatureByName(t),n)},geoProjectPosition:function(t,n,e){return(n=h(n,e))(t)},geoProjectInvert:function(t,n,e){return(n=h(n,e)).invert(t)}})},function(t,n,e){"use strict";var r,i,o,u,a,c,f,s,l,h,p=e(29),v=e(103),d=e(35),g=e(4),b=e(22),y=Object(p.a)(),j={point:O,lineStart:m,lineEnd:w,polygonStart:function(){j.point=x,j.lineStart=E,j.lineEnd=M,y.reset(),v.b.polygonStart()},polygonEnd:function(){v.b.polygonEnd(),j.point=O,j.lineStart=m,j.lineEnd=w,v.a<0?(r=-(o=180),i=-(u=90)):y>g.i?u=90:y<-g.i&&(i=-90),h[0]=r,h[1]=o}};function O(t,n){l.push(h=[r=t,o=t]),n<i&&(i=n),n>u&&(u=n)}function _(t,n){var e=Object(d.a)([t*g.r,n*g.r]);if(s){var c=Object(d.c)(s,e),f=[c[1],-c[0],0],p=Object(d.c)(f,c);Object(d.e)(p),p=Object(d.g)(p);var v,b=t-a,y=b>0?1:-1,j=p[0]*g.h*y,O=Object(g.a)(b)>180;O^(y*a<j&&j<y*t)?(v=p[1]*g.h)>u&&(u=v):O^(y*a<(j=(j+360)%360-180)&&j<y*t)?(v=-p[1]*g.h)<i&&(i=v):(n<i&&(i=n),n>u&&(u=n)),O?t<a?T(r,t)>T(r,o)&&(o=t):T(t,o)>T(r,o)&&(r=t):o>=r?(t<r&&(r=t),t>o&&(o=t)):t>a?T(r,t)>T(r,o)&&(o=t):T(t,o)>T(r,o)&&(r=t)}else l.push(h=[r=t,o=t]);n<i&&(i=n),n>u&&(u=n),s=e,a=t}function m(){j.point=_}function w(){h[0]=r,h[1]=o,j.point=O,s=null}function x(t,n){if(s){var e=t-a;y.add(Object(g.a)(e)>180?e+(e>0?360:-360):e)}else c=t,f=n;v.b.point(t,n),_(t,n)}function E(){v.b.lineStart()}function M(){x(c,f),v.b.lineEnd(),Object(g.a)(y)>g.i&&(r=-(o=180)),h[0]=r,h[1]=o,s=null}function T(t,n){return(n-=t)<0?n+360:n}function S(t,n){return t[0]-n[0]}function k(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}n.a=function(t){var n,e,a,c,f,s,p;if(u=o=-(r=i=1/0),l=[],Object(b.a)(t,j),e=l.length){for(l.sort(S),n=1,f=[a=l[0]];n<e;++n)k(a,(c=l[n])[0])||k(a,c[1])?(T(a[0],c[1])>T(a[0],a[1])&&(a[1]=c[1]),T(c[0],a[1])>T(a[0],a[1])&&(a[0]=c[0])):f.push(a=c);for(s=-1/0,n=0,a=f[e=f.length-1];n<=e;a=c,++n)c=f[n],(p=T(a[1],c[0]))>s&&(s=p,r=c[0],o=a[1])}return l=h=null,r===1/0||i===1/0?[[NaN,NaN],[NaN,NaN]]:[[r,i],[o,u]]}},function(t,n,e){"use strict";var r,i,o,u,a,c,f,s,l,h,p,v,d,g,b,y,j=e(4),O=e(20),_=e(22),m={sphere:O.a,point:w,lineStart:E,lineEnd:S,polygonStart:function(){m.lineStart=k,m.lineEnd=C},polygonEnd:function(){m.lineStart=E,m.lineEnd=S}};function w(t,n){t*=j.r,n*=j.r;var e=Object(j.g)(n);x(e*Object(j.g)(t),e*Object(j.t)(t),Object(j.t)(n))}function x(t,n,e){o+=(t-o)/++r,u+=(n-u)/r,a+=(e-a)/r}function E(){m.point=M}function M(t,n){t*=j.r,n*=j.r;var e=Object(j.g)(n);g=e*Object(j.g)(t),b=e*Object(j.t)(t),y=Object(j.t)(n),m.point=T,x(g,b,y)}function T(t,n){t*=j.r,n*=j.r;var e=Object(j.g)(n),r=e*Object(j.g)(t),o=e*Object(j.t)(t),u=Object(j.t)(n),a=Object(j.e)(Object(j.u)((a=b*u-y*o)*a+(a=y*r-g*u)*a+(a=g*o-b*r)*a),g*r+b*o+y*u);i+=a,c+=a*(g+(g=r)),f+=a*(b+(b=o)),s+=a*(y+(y=u)),x(g,b,y)}function S(){m.point=w}function k(){m.point=P}function C(){N(v,d),m.point=w}function P(t,n){v=t,d=n,t*=j.r,n*=j.r,m.point=N;var e=Object(j.g)(n);g=e*Object(j.g)(t),b=e*Object(j.t)(t),y=Object(j.t)(n),x(g,b,y)}function N(t,n){t*=j.r,n*=j.r;var e=Object(j.g)(n),r=e*Object(j.g)(t),o=e*Object(j.t)(t),u=Object(j.t)(n),a=b*u-y*o,v=y*r-g*u,d=g*o-b*r,O=Object(j.u)(a*a+v*v+d*d),_=Object(j.c)(O),m=O&&-_/O;l+=m*a,h+=m*v,p+=m*d,i+=_,c+=_*(g+(g=r)),f+=_*(b+(b=o)),s+=_*(y+(y=u)),x(g,b,y)}n.a=function(t){r=i=o=u=a=c=f=s=l=h=p=0,Object(_.a)(t,m);var n=l,e=h,v=p,d=n*n+e*e+v*v;return d<j.j&&(n=c,e=f,v=s,i<j.i&&(n=o,e=u,v=a),(d=n*n+e*e+v*v)<j.j)?[NaN,NaN]:[Object(j.e)(e,n)*j.h,Object(j.c)(v/Object(j.u)(d))*j.h]}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t,n,e,r,i,o){var u,a=t[0],c=t[1],f=0,s=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<f)return;u<s&&(s=u)}else if(l>0){if(u>s)return;u>f&&(f=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>s)return;u>f&&(f=u)}else if(l>0){if(u<f)return;u<s&&(s=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<f)return;u<s&&(s=u)}else if(h>0){if(u>s)return;u>f&&(f=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>s)return;u>f&&(f=u)}else if(h>0){if(u<f)return;u<s&&(s=u)}return f>0&&(t[0]=a+f*l,t[1]=c+f*h),s<1&&(n[0]=a+s*l,n[1]=c+s*h),!0}}}}}},function(t,n,e){"use strict";var r=e(111);n.a=function(t,n,e){var i,o,u,a,c=t.length,f=n.length,s=new Array(c*f);for(null==e&&(e=r.b),i=u=0;i<c;++i)for(a=t[i],o=0;o<f;++o,++u)s[u]=e(a,n[o]);return s}},function(t,n,e){"use strict";n.a=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}},function(t,n,e){"use strict";var r=e(115),i=e(109),o=e(204),u=e(114),a=e(205),c=e(116),f=e(117),s=e(118);n.a=function(){var t=a.a,n=u.a,e=s.a;function l(r){var o,u,a=r.length,s=new Array(a);for(o=0;o<a;++o)s[o]=t(r[o],o,r);var l=n(s),h=l[0],p=l[1],v=e(s,h,p);Array.isArray(v)||(v=Object(f.c)(h,p,v),v=Object(c.a)(Math.ceil(h/v)*v,Math.floor(p/v)*v,v));for(var d=v.length;v[0]<=h;)v.shift(),--d;for(;v[d-1]>p;)v.pop(),--d;var g,b=new Array(d+1);for(o=0;o<=d;++o)(g=b[o]=[]).x0=o>0?v[o-1]:h,g.x1=o<d?v[o]:p;for(o=0;o<a;++o)h<=(u=s[o])&&u<=p&&b[Object(i.c)(v,u,0,d)].push(r[o]);return b}return l.value=function(n){return arguments.length?(t="function"==typeof n?n:Object(o.a)(n),l):t},l.domain=function(t){return arguments.length?(n="function"==typeof t?t:Object(o.a)([t[0],t[1]]),l):n},l.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?Object(o.a)(r.b.call(t)):Object(o.a)(t),l):e},l}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";var r=e(115),i=e(30),o=e(36),u=e(66);n.a=function(t,n,e){return t=r.a.call(t,o.a).sort(i.a),Math.ceil((e-n)/(2*(Object(u.a)(t,.75)-Object(u.a)(t,.25))*Math.pow(t.length,-1/3)))}},function(t,n,e){"use strict";var r=e(112);n.a=function(t,n,e){return Math.ceil((e-n)/(3.5*Object(r.a)(t)*Math.pow(t.length,-1/3)))}},function(t,n,e){"use strict";n.a=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}},function(t,n,e){"use strict";var r=e(36);n.a=function(t,n){var e,i=t.length,o=i,u=-1,a=0;if(null==n)for(;++u<i;)isNaN(e=Object(r.a)(t[u]))?--o:a+=e;else for(;++u<i;)isNaN(e=Object(r.a)(n(t[u],u,t)))?--o:a+=e;if(o)return a/o}},function(t,n,e){"use strict";var r=e(30),i=e(36),o=e(66);n.a=function(t,n){var e,u=t.length,a=-1,c=[];if(null==n)for(;++a<u;)isNaN(e=Object(i.a)(t[a]))||c.push(e);else for(;++a<u;)isNaN(e=Object(i.a)(n(t[a],a,t)))||c.push(e);return Object(o.a)(c.sort(r.a),.5)}},function(t,n,e){"use strict";n.a=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e}},function(t,n,e){"use strict";n.a=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}},function(t,n,e){"use strict";var r=e(30);n.a=function(t,n){if(e=t.length){var e,i,o=0,u=0,a=t[u];for(null==n&&(n=r.a);++o<e;)(n(i=t[o],a)<0||0!==n(a,a))&&(a=i,u=o);return 0===n(a,a)?u:void 0}}},function(t,n,e){"use strict";n.a=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t}},function(t,n,e){"use strict";n.a=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o}},function(t,n,e){"use strict";var r=e(120);n.a=function(){return Object(r.a)(arguments)}},function(t,n,e){"use strict";var r=e(121),i=e(122),o=e(4),u={Feature:function(t,n){return c(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(c(e[r].geometry,n))return!0;return!1}},a={Sphere:function(){return!0},Point:function(t,n){return f(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(f(e[r],n))return!0;return!1},LineString:function(t,n){return s(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(s(e[r],n))return!0;return!1},Polygon:function(t,n){return l(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(l(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(c(e[r],n))return!0;return!1}};function c(t,n){return!(!t||!a.hasOwnProperty(t.type))&&a[t.type](t,n)}function f(t,n){return 0===Object(i.a)(t,n)}function s(t,n){var e=Object(i.a)(t[0],t[1]);return Object(i.a)(t[0],n)+Object(i.a)(n,t[1])<=e+o.i}function l(t,n){return!!Object(r.a)(t.map(h),p(n))}function h(t){return(t=t.map(p)).pop(),t}function p(t){return[t[0]*o.r,t[1]*o.r]}n.a=function(t,n){return(t&&u.hasOwnProperty(t.type)?u[t.type]:c)(t,n)}},function(t,n,e){"use strict";n.a=a,n.b=function(){return a()()};var r=e(14),i=e(4);function o(t,n,e){var o=Object(r.range)(t,n-i.i,e).concat(n);return function(t){return o.map(function(n){return[t,n]})}}function u(t,n,e){var o=Object(r.range)(t,n-i.i,e).concat(n);return function(t){return o.map(function(n){return[n,t]})}}function a(){var t,n,e,a,c,f,s,l,h,p,v,d,g=10,b=g,y=90,j=360,O=2.5;function _(){return{type:"MultiLineString",coordinates:m()}}function m(){return Object(r.range)(Object(i.f)(a/y)*y,e,y).map(v).concat(Object(r.range)(Object(i.f)(l/j)*j,s,j).map(d)).concat(Object(r.range)(Object(i.f)(n/g)*g,t,g).filter(function(t){return Object(i.a)(t%y)>i.i}).map(h)).concat(Object(r.range)(Object(i.f)(f/b)*b,c,b).filter(function(t){return Object(i.a)(t%j)>i.i}).map(p))}return _.lines=function(){return m().map(function(t){return{type:"LineString",coordinates:t}})},_.outline=function(){return{type:"Polygon",coordinates:[v(a).concat(d(s).slice(1),v(e).reverse().slice(1),d(l).reverse().slice(1))]}},_.extent=function(t){return arguments.length?_.extentMajor(t).extentMinor(t):_.extentMinor()},_.extentMajor=function(t){return arguments.length?(a=+t[0][0],e=+t[1][0],l=+t[0][1],s=+t[1][1],a>e&&(t=a,a=e,e=t),l>s&&(t=l,l=s,s=t),_.precision(O)):[[a,l],[e,s]]},_.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],f=+e[0][1],c=+e[1][1],n>t&&(e=n,n=t,t=e),f>c&&(e=f,f=c,c=e),_.precision(O)):[[n,f],[t,c]]},_.step=function(t){return arguments.length?_.stepMajor(t).stepMinor(t):_.stepMinor()},_.stepMajor=function(t){return arguments.length?(y=+t[0],j=+t[1],_):[y,j]},_.stepMinor=function(t){return arguments.length?(g=+t[0],b=+t[1],_):[g,b]},_.precision=function(r){return arguments.length?(O=+r,h=o(f,c,90),p=u(n,t,O),v=o(l,s,90),d=u(a,e,O),_):O},_.extentMajor([[-180,-90+i.i],[180,90-i.i]]).extentMinor([[-180,-80-i.i],[180,80+i.i]])}},function(t,n,e){"use strict";var r=e(4);n.a=function(t,n){var e=t[0]*r.r,i=t[1]*r.r,o=n[0]*r.r,u=n[1]*r.r,a=Object(r.g)(i),c=Object(r.t)(i),f=Object(r.g)(u),s=Object(r.t)(u),l=a*Object(r.g)(e),h=a*Object(r.t)(e),p=f*Object(r.g)(o),v=f*Object(r.t)(o),d=2*Object(r.c)(Object(r.u)(Object(r.m)(u-i)+a*f*Object(r.m)(o-e))),g=Object(r.t)(d),b=d?function(t){var n=Object(r.t)(t*=d)/g,e=Object(r.t)(d-t)/g,i=e*l+n*p,o=e*h+n*v,u=e*c+n*s;return[Object(r.e)(o,i)*r.h,Object(r.e)(u,Object(r.u)(i*i+o*o))*r.h]}:function(){return[e*r.h,i*r.h]};return b.distance=d,b}},function(t,n,e){"use strict";var r=e(67),i=e(22),o=e(221),u=e(124),a=e(222),c=e(223),f=e(224),s=e(225);n.a=function(t,n){var e,l,h=4.5;function p(t){return t&&("function"==typeof h&&l.pointRadius(+h.apply(this,arguments)),Object(i.a)(t,e(l))),l.result()}return p.area=function(t){return Object(i.a)(t,e(o.a)),o.a.result()},p.measure=function(t){return Object(i.a)(t,e(f.a)),f.a.result()},p.bounds=function(t){return Object(i.a)(t,e(u.a)),u.a.result()},p.centroid=function(t){return Object(i.a)(t,e(a.a)),a.a.result()},p.projection=function(n){return arguments.length?(e=null==n?(t=null,r.a):(t=n).stream,p):t},p.context=function(t){return arguments.length?(l=null==t?(n=null,new s.a):new c.a(n=t),"function"!=typeof h&&l.pointRadius(h),p):n},p.pointRadius=function(t){return arguments.length?(h="function"==typeof t?t:(l.pointRadius(+t),+t),p):h},p.projection(t).context(n)}},function(t,n,e){"use strict";var r,i,o,u,a=e(29),c=e(4),f=e(20),s=Object(a.a)(),l=Object(a.a)(),h={point:f.a,lineStart:f.a,lineEnd:f.a,polygonStart:function(){h.lineStart=p,h.lineEnd=g},polygonEnd:function(){h.lineStart=h.lineEnd=h.point=f.a,s.add(Object(c.a)(l)),l.reset()},result:function(){var t=s/2;return s.reset(),t}};function p(){h.point=v}function v(t,n){h.point=d,r=o=t,i=u=n}function d(t,n){l.add(u*t-o*n),o=t,u=n}function g(){d(r,i)}n.a=h},function(t,n,e){"use strict";var r,i,o,u,a=e(4),c=0,f=0,s=0,l=0,h=0,p=0,v=0,d=0,g=0,b={point:y,lineStart:j,lineEnd:m,polygonStart:function(){b.lineStart=w,b.lineEnd=x},polygonEnd:function(){b.point=y,b.lineStart=j,b.lineEnd=m},result:function(){var t=g?[v/g,d/g]:p?[l/p,h/p]:s?[c/s,f/s]:[NaN,NaN];return c=f=s=l=h=p=v=d=g=0,t}};function y(t,n){c+=t,f+=n,++s}function j(){b.point=O}function O(t,n){b.point=_,y(o=t,u=n)}function _(t,n){var e=t-o,r=n-u,i=Object(a.u)(e*e+r*r);l+=i*(o+t)/2,h+=i*(u+n)/2,p+=i,y(o=t,u=n)}function m(){b.point=y}function w(){b.point=E}function x(){M(r,i)}function E(t,n){b.point=M,y(r=o=t,i=u=n)}function M(t,n){var e=t-o,r=n-u,i=Object(a.u)(e*e+r*r);l+=i*(o+t)/2,h+=i*(u+n)/2,p+=i,v+=(i=u*t-o*n)*(o+t),d+=i*(u+n),g+=3*i,y(o=t,u=n)}n.a=b},function(t,n,e){"use strict";n.a=o;var r=e(4),i=e(20);function o(t){this._context=t}o.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,r.w)}},result:i.a}},function(t,n,e){"use strict";var r,i,o,u,a,c=e(29),f=e(4),s=e(20),l=Object(c.a)(),h={point:s.a,lineStart:function(){h.point=p},lineEnd:function(){r&&v(i,o),h.point=s.a},polygonStart:function(){r=!0},polygonEnd:function(){r=null},result:function(){var t=+l;return l.reset(),t}};function p(t,n){h.point=v,i=u=t,o=a=n}function v(t,n){u-=t,a-=n,l.add(Object(f.u)(u*u+a*a)),u=t,a=n}n.a=h},function(t,n,e){"use strict";function r(){this._string=[]}function i(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}n.a=r,r.prototype={_radius:4.5,_circle:i(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=i(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}}},function(t,n,e){"use strict";var r=e(126),i=e(4);n.a=Object(r.a)(function(){return!0},function(t){var n,e=NaN,r=NaN,o=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(u,a){var c=u>0?i.o:-i.o,f=Object(i.a)(u-e);Object(i.a)(f-i.o)<i.i?(t.point(e,r=(r+a)/2>0?i.l:-i.l),t.point(o,r),t.lineEnd(),t.lineStart(),t.point(c,r),t.point(u,r),n=0):o!==c&&f>=i.o&&(Object(i.a)(e-o)<i.i&&(e-=o*i.i),Object(i.a)(u-c)<i.i&&(u-=c*i.i),r=function(t,n,e,r){var o,u,a=Object(i.t)(t-e);return Object(i.a)(a)>i.i?Object(i.d)((Object(i.t)(n)*(u=Object(i.g)(r))*Object(i.t)(e)-Object(i.t)(r)*(o=Object(i.g)(n))*Object(i.t)(t))/(o*u*a)):(n+r)/2}(e,r,u,a),t.point(o,r),t.lineEnd(),t.lineStart(),t.point(c,r),n=0),t.point(e=u,r=a),o=c},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var o;if(null==t)o=e*i.l,r.point(-i.o,o),r.point(0,o),r.point(i.o,o),r.point(i.o,0),r.point(i.o,-o),r.point(0,-o),r.point(-i.o,-o),r.point(-i.o,0),r.point(-i.o,o);else if(Object(i.a)(t[0]-n[0])>i.i){var u=t[0]<n[0]?i.o:-i.o;o=e*u/2,r.point(-u,o),r.point(0,o),r.point(u,o)}else r.point(n[0],n[1])},[-i.o,-i.l])},function(t,n,e){"use strict";var r=e(35),i=e(104),o=e(4),u=e(108),a=e(126);n.a=function(t,n){var e=Object(o.g)(t),c=e>0,f=Object(o.a)(e)>o.i;function s(t,n){return Object(o.g)(t)*Object(o.g)(n)>e}function l(t,n,i){var u=Object(r.a)(t),a=Object(r.a)(n),c=[1,0,0],f=Object(r.c)(u,a),s=Object(r.d)(f,f),l=f[0],h=s-l*l;if(!h)return!i&&t;var p=e*s/h,v=-e*l/h,d=Object(r.c)(c,f),g=Object(r.f)(c,p),b=Object(r.f)(f,v);Object(r.b)(g,b);var y=d,j=Object(r.d)(g,y),O=Object(r.d)(y,y),_=j*j-O*(Object(r.d)(g,g)-1);if(!(_<0)){var m=Object(o.u)(_),w=Object(r.f)(y,(-j-m)/O);if(Object(r.b)(w,g),w=Object(r.g)(w),!i)return w;var x,E=t[0],M=n[0],T=t[1],S=n[1];M<E&&(x=E,E=M,M=x);var k=M-E,C=Object(o.a)(k-o.o)<o.i,P=C||k<o.i;if(!C&&S<T&&(x=T,T=S,S=x),P?C?T+S>0^w[1]<(Object(o.a)(w[0]-E)<o.i?T:S):T<=w[1]&&w[1]<=S:k>o.o^(E<=w[0]&&w[0]<=M)){var N=Object(r.f)(y,(-j+m)/O);return Object(r.b)(N,g),[w,Object(r.g)(N)]}}}function h(n,e){var r=c?t:o.o-t,i=0;return n<-r?i|=1:n>r&&(i|=2),e<-r?i|=4:e>r&&(i|=8),i}return Object(a.a)(s,function(t){var n,e,r,i,a;return{lineStart:function(){i=r=!1,a=1},point:function(p,v){var d,g=[p,v],b=s(p,v),y=c?b?0:h(p,v):b?h(p+(p<0?o.o:-o.o),v):0;if(!n&&(i=r=b)&&t.lineStart(),b!==r&&(!(d=l(n,g))||Object(u.a)(n,d)||Object(u.a)(g,d))&&(g[0]+=o.i,g[1]+=o.i,b=s(g[0],g[1])),b!==r)a=0,b?(t.lineStart(),d=l(g,n),t.point(d[0],d[1])):(d=l(n,g),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(f&&n&&c^b){var j;y&e||!(j=l(g,n,!0))||(a=0,c?(t.lineStart(),t.point(j[0][0],j[0][1]),t.point(j[1][0],j[1][1]),t.lineEnd()):(t.point(j[1][0],j[1][1]),t.lineEnd(),t.lineStart(),t.point(j[0][0],j[0][1])))}!b||n&&Object(u.a)(n,g)||t.point(g[0],g[1]),n=g,r=b,e=y},lineEnd:function(){r&&t.lineEnd(),n=null},clean:function(){return a|(i&&r)<<1}}},function(e,r,o,u){Object(i.a)(u,t,n,o,e,r)},c?[0,-t]:[-o.o,t-o.o])}},function(t,n,e){"use strict";var r=e(35),i=e(4),o=e(51),u=16,a=Object(i.g)(30*i.r);n.a=function(t,n){return+n?function(t,n){function e(r,o,u,c,f,s,l,h,p,v,d,g,b,y){var j=l-r,O=h-o,_=j*j+O*O;if(_>4*n&&b--){var m=c+v,w=f+d,x=s+g,E=Object(i.u)(m*m+w*w+x*x),M=Object(i.c)(x/=E),T=Object(i.a)(Object(i.a)(x)-1)<i.i||Object(i.a)(u-p)<i.i?(u+p)/2:Object(i.e)(w,m),S=t(T,M),k=S[0],C=S[1],P=k-r,N=C-o,R=O*P-j*N;(R*R/_>n||Object(i.a)((j*P+O*N)/_-.5)>.3||c*v+f*d+s*g<a)&&(e(r,o,u,c,f,s,k,C,T,m/=E,w/=E,x,b,y),y.point(k,C),e(k,C,T,m,w,x,l,h,p,v,d,g,b,y))}}return function(n){var i,o,a,c,f,s,l,h,p,v,d,g,b={point:y,lineStart:j,lineEnd:_,polygonStart:function(){n.polygonStart(),b.lineStart=m},polygonEnd:function(){n.polygonEnd(),b.lineStart=j}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function j(){h=NaN,b.point=O,n.lineStart()}function O(i,o){var a=Object(r.a)([i,o]),c=t(i,o);e(h,p,l,v,d,g,h=c[0],p=c[1],l=i,v=a[0],d=a[1],g=a[2],u,n),n.point(h,p)}function _(){b.point=y,n.lineEnd()}function m(){j(),b.point=w,b.lineEnd=x}function w(t,n){O(i=t,n),o=h,a=p,c=v,f=d,s=g,b.point=O}function x(){e(h,p,l,v,d,g,o,a,i,c,f,s,u,n),b.lineEnd=_,_()}return b}}(t,n):function(t){return Object(o.b)({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}},function(t,n,e){"use strict";n.a=function(t){var n=Object(r.g)(t);function e(t,e){return[t*n,Object(r.t)(e)/n]}return e.invert=function(t,e){return[t/n,Object(r.c)(e*n)]},e};var r=e(4)},function(t,n,e){"use strict";var r=e(4),i=e(125),o=e(68),u=e(70);n.a=function(){var t,n,e,a,c,f,s=Object(i.a)(),l=Object(o.b)().rotate([154,0]).center([-2,58.5]).parallels([55,65]),h=Object(o.b)().rotate([157,0]).center([-3,19.9]).parallels([8,18]),p={point:function(t,n){f=[t,n]}};function v(t){var n=t[0],r=t[1];return f=null,e.point(n,r),f||(a.point(n,r),f)||(c.point(n,r),f)}function d(){return t=n=null,v}return v.invert=function(t){var n=s.scale(),e=s.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?l:i>=.166&&i<.234&&r>=-.214&&r<-.115?h:s).invert(t)},v.stream=function(e){return t&&n===e?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([s.stream(n=e),l.stream(e),h.stream(e)])},v.precision=function(t){return arguments.length?(s.precision(t),l.precision(t),h.precision(t),d()):s.precision()},v.scale=function(t){return arguments.length?(s.scale(t),l.scale(.35*t),h.scale(t),v.translate(s.translate())):s.scale()},v.translate=function(t){if(!arguments.length)return s.translate();var n=s.scale(),i=+t[0],o=+t[1];return e=s.translate(t).clipExtent([[i-.455*n,o-.238*n],[i+.455*n,o+.238*n]]).stream(p),a=l.translate([i-.307*n,o+.201*n]).clipExtent([[i-.425*n+r.i,o+.12*n+r.i],[i-.214*n-r.i,o+.234*n-r.i]]).stream(p),c=h.translate([i-.205*n,o+.212*n]).clipExtent([[i-.214*n+r.i,o+.166*n+r.i],[i-.115*n-r.i,o+.234*n-r.i]]).stream(p),d()},v.fitExtent=function(t,n){return Object(u.a)(v,t,n)},v.fitSize=function(t,n){return Object(u.b)(v,t,n)},v.scale(1070)}},function(t,n,e){"use strict";e.d(n,"a",function(){return u});var r=e(4),i=e(37),o=e(17),u=Object(i.b)(function(t){return Object(r.u)(2/(1+t))});u.invert=Object(i.a)(function(t){return 2*Object(r.c)(t/2)}),n.b=function(){return Object(o.a)(u).scale(124.75).clipAngle(179.999)}},function(t,n,e){"use strict";e.d(n,"a",function(){return u});var r=e(4),i=e(37),o=e(17),u=Object(i.b)(function(t){return(t=Object(r.b)(t))&&t/Object(r.t)(t)});u.invert=Object(i.a)(function(t){return t}),n.b=function(){return Object(o.a)(u).scale(79.4188).clipAngle(179.999)}},function(t,n,e){"use strict";n.a=a;var r=e(4),i=e(69),o=e(71);function u(t){return Object(r.v)((r.l+t)/2)}function a(t,n){var e=Object(r.g)(t),i=t===n?Object(r.t)(t):Object(r.n)(e/Object(r.g)(n))/Object(r.n)(u(n)/u(t)),a=e*Object(r.p)(u(t),i)/i;if(!i)return o.c;function c(t,n){a>0?n<-r.l+r.i&&(n=-r.l+r.i):n>r.l-r.i&&(n=r.l-r.i);var e=a/Object(r.p)(u(n),i);return[e*Object(r.t)(i*t),a-e*Object(r.g)(i*t)]}return c.invert=function(t,n){var e=a-n,o=Object(r.s)(i)*Object(r.u)(t*t+e*e);return[Object(r.e)(t,Object(r.a)(e))/i*Object(r.s)(e),2*Object(r.d)(Object(r.p)(a/o,1/i))-r.l]},c}n.b=function(){return Object(i.a)(a).scale(109.5).parallels([30,30])}},function(t,n,e){"use strict";n.a=u;var r=e(4),i=e(69),o=e(127);function u(t,n){var e=Object(r.g)(t),i=t===n?Object(r.t)(t):(e-Object(r.g)(n))/(n-t),u=e/i+t;if(Object(r.a)(i)<r.i)return o.b;function a(t,n){var e=u-n,o=i*t;return[e*Object(r.t)(o),u-e*Object(r.g)(o)]}return a.invert=function(t,n){var e=u-n;return[Object(r.e)(t,Object(r.a)(e))/i*Object(r.s)(e),u-Object(r.s)(i)*Object(r.u)(t*t+e*e)]},a}n.b=function(){return Object(i.a)(u).scale(131.154).center([0,13.9389])}},function(t,n,e){"use strict";n.b=u;var r=e(4),i=e(37),o=e(17);function u(t,n){var e=Object(r.g)(n),i=Object(r.g)(t)*e;return[e*Object(r.t)(t)/i,Object(r.t)(n)/i]}u.invert=Object(i.a)(r.d),n.a=function(){return Object(o.a)(u).scale(144.049).clipAngle(60)}},function(t,n,e){"use strict";var r=e(65),i=e(67),o=e(51),u=e(70);function a(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?i.a:Object(o.b)({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}n.a=function(){var t,n,e,o,c,f,s=1,l=0,h=0,p=1,v=1,d=i.a,g=null,b=i.a;function y(){return o=c=null,f}return f={stream:function(t){return o&&c===t?o:o=d(b(c=t))},clipExtent:function(o){return arguments.length?(b=null==o?(g=t=n=e=null,i.a):Object(r.a)(g=+o[0][0],t=+o[0][1],n=+o[1][0],e=+o[1][1]),y()):null==g?null:[[g,t],[n,e]]},scale:function(t){return arguments.length?(d=a((s=+t)*p,s*v,l,h),y()):s},translate:function(t){return arguments.length?(d=a(s*p,s*v,l=+t[0],h=+t[1]),y()):[l,h]},reflectX:function(t){return arguments.length?(d=a(s*(p=t?-1:1),s*v,l,h),y()):p<0},reflectY:function(t){return arguments.length?(d=a(s*p,s*(v=t?-1:1),l,h),y()):v<0},fitExtent:function(t,n){return Object(u.a)(f,t,n)},fitSize:function(t,n){return Object(u.b)(f,t,n)}}}},function(t,n,e){"use strict";n.b=u;var r=e(4),i=e(37),o=e(17);function u(t,n){return[Object(r.g)(n)*Object(r.t)(t),Object(r.t)(n)]}u.invert=Object(i.a)(r.c),n.a=function(){return Object(o.a)(u).scale(249.5).clipAngle(90+r.i)}},function(t,n,e){"use strict";n.b=u;var r=e(4),i=e(37),o=e(17);function u(t,n){var e=Object(r.g)(n),i=1+Object(r.g)(t)*e;return[e*Object(r.t)(t)/i,Object(r.t)(n)/i]}u.invert=Object(i.a)(function(t){return 2*Object(r.d)(t)}),n.a=function(){return Object(o.a)(u).scale(250).clipAngle(142)}},function(t,n,e){"use strict";n.b=o;var r=e(4),i=e(71);function o(t,n){return[Object(r.n)(Object(r.v)((r.l+n)/2)),-t]}o.invert=function(t,n){return[-n,2*Object(r.d)(Object(r.k)(t))-r.l]},n.a=function(){var t=Object(i.b)(o),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}},function(t,n,e){"use strict";n.a=o;var r=e(0),i=e(1);function o(t){var n=Object(i.F)(t/2),e=2*Object(i.p)(Object(i.h)(t/2))/(n*n);function r(t,n){var r=Object(i.h)(t),o=Object(i.h)(n),u=Object(i.y)(n),a=o*r,c=-((1-a?Object(i.p)((1+a)/2)/(1-a):-.5)+e/(1+a));return[c*o*Object(i.y)(t),c*u]}return r.invert=function(n,r){var o,u=Object(i.B)(n*n+r*r),a=-t/2,c=50;if(!u)return[0,0];do{var f=a/2,s=Object(i.h)(f),l=Object(i.y)(f),h=Object(i.F)(f),p=Object(i.p)(1/s);a-=o=(2/h*p-e*h-u)/(-p/(l*l)+1-e/(2*s*s))}while(Object(i.a)(o)>i.k&&--c>0);var v=Object(i.y)(a);return[Object(i.g)(n*v,u*Object(i.h)(a)),Object(i.e)(r*v/u)]},r}n.b=function(){var t=i.o,n=Object(r.geoProjectionMutator)(o),e=n(t);return e.radius=function(e){return arguments.length?n(t=e*i.v):t*i.j},e.scale(179.976).clipAngle(147)}},function(t,n,e){"use strict";n.a=o;var r=e(0),i=e(1);function o(t){var n=Object(i.y)(t),e=Object(i.h)(t),r=t>=0?1:-1,o=Object(i.F)(r*t),u=(1+n-e)/2;function a(t,a){var c=Object(i.h)(a),f=Object(i.h)(t/=2);return[(1+c)*Object(i.y)(t),(r*a>-Object(i.g)(f,o)-.001?0:10*-r)+u+Object(i.y)(a)*e-(1+c)*n*f]}return a.invert=function(t,a){var c=0,f=0,s=50;do{var l=Object(i.h)(c),h=Object(i.y)(c),p=Object(i.h)(f),v=Object(i.y)(f),d=1+p,g=d*h-t,b=u+v*e-d*n*l-a,y=d*l/2,j=-h*v,O=n*d*h/2,_=e*p+n*l*v,m=j*O-_*y,w=(b*j-g*_)/m/2,x=(g*O-b*y)/m;c-=w,f-=x}while((Object(i.a)(w)>i.k||Object(i.a)(x)>i.k)&&--s>0);return r*f>-Object(i.g)(Object(i.h)(c),o)-.001?[2*c,f]:null},a}n.b=function(){var t=20*i.v,n=t>=0?1:-1,e=Object(i.F)(n*t),u=Object(r.geoProjectionMutator)(o),a=u(t),c=a.stream;return a.parallel=function(r){return arguments.length?(e=Object(i.F)((n=(t=r*i.v)>=0?1:-1)*t),u(t)):t*i.j},a.stream=function(r){var o=a.rotate(),u=c(r),f=(a.rotate([0,0]),c(r));return a.rotate(o),u.sphere=function(){f.polygonStart(),f.lineStart();for(var r=-180*n;n*r<180;r+=90*n)f.point(r,90*n);for(;n*(r-=t)>=-180;)f.point(r,n*-Object(i.g)(Object(i.h)(r*i.v/2),e)*i.j);f.lineEnd(),f.polygonEnd()},u},a.scale(218.695).center([0,28.0974])}},function(t,n,e){"use strict";n.a=a;var r=e(0),i=e(1),o=Object(i.B)(8),u=Object(i.p)(1+i.D);function a(t,n){var e=Object(i.a)(n);return e<i.u?[t,Object(i.p)(Object(i.F)(i.u+n/2))]:[t*Object(i.h)(e)*(2*i.D-1/Object(i.y)(e)),Object(i.x)(n)*(2*i.D*(e-i.u)-Object(i.p)(Object(i.F)(e/2)))]}a.invert=function(t,n){if((r=Object(i.a)(n))<u)return[t,2*Object(i.f)(Object(i.m)(n))-i.o];var e,r,a=i.u,c=25;do{var f=Object(i.h)(a/2),s=Object(i.F)(a/2);a-=e=(o*(a-i.u)-Object(i.p)(s)-r)/(o-f*f/(2*s))}while(Object(i.a)(e)>i.l&&--c>0);return[t/(Object(i.h)(a)*(o-1/Object(i.y)(a))),Object(i.x)(n)*a]},n.b=function(){return Object(r.geoProjection)(a).scale(112.314)}},function(t,n,e){"use strict";n.a=o;var r=e(0),i=e(1);function o(t){var n=2*i.s/t;function e(t,e){var o=Object(r.geoAzimuthalEquidistantRaw)(t,e);if(Object(i.a)(t)>i.o){var u=Object(i.g)(o[1],o[0]),a=Object(i.B)(o[0]*o[0]+o[1]*o[1]),c=n*Object(i.w)((u-i.o)/n)+i.o,f=Object(i.g)(Object(i.y)(u-=c),2-Object(i.h)(u));u=c+Object(i.e)(i.s/a*Object(i.y)(f))-f,o[0]=a*Object(i.h)(u),o[1]=a*Object(i.y)(u)}return o}return e.invert=function(t,e){var o=Object(i.B)(t*t+e*e);if(o>i.o){var u=Object(i.g)(e,t),a=n*Object(i.w)((u-i.o)/n)+i.o,c=u>a?-1:1,f=o*Object(i.h)(a-u),s=1/Object(i.F)(c*Object(i.b)((f-i.s)/Object(i.B)(i.s*(i.s-2*f)+o*o)));u=a+2*Object(i.f)((s+c*Object(i.B)(s*s-3))/3),t=o*Object(i.h)(u),e=o*Object(i.y)(u)}return r.geoAzimuthalEquidistantRaw.invert(t,e)},e}n.b=function(){var t=5,n=Object(r.geoProjectionMutator)(o),e=n(t),u=e.stream,a=-Object(i.h)(.01*i.v),c=Object(i.y)(.01*i.v);return e.lobes=function(e){return arguments.length?n(t=+e):t},e.stream=function(n){var r=e.rotate(),o=u(n),f=(e.rotate([0,0]),u(n));return e.rotate(r),o.sphere=function(){f.polygonStart(),f.lineStart();for(var n=0,e=360/t,r=2*i.s/t,o=90-180/t,u=i.o;n<t;++n,o-=e,u-=r)f.point(Object(i.g)(c*Object(i.h)(u),a)*i.j,Object(i.e)(c*Object(i.y)(u))*i.j),o<-90?(f.point(-90,-180-o-.01),f.point(-90,-180-o+.01)):(f.point(90,o+.01),f.point(90,o-.01));f.lineEnd(),f.polygonEnd()},o},e.scale(87.8076).center([0,17.1875]).clipAngle(179.999)}},function(t,n,e){"use strict";n.a=u;var r=e(31),i=e(1),o=e(38);function u(t){if(!t)return o.b;var n=1/Object(i.F)(t);function e(e,r){var o=n+t-r,u=o?e*Object(i.h)(r)/o:o;return[o*Object(i.y)(u),n-o*Object(i.h)(u)]}return e.invert=function(e,r){var o=Object(i.B)(e*e+(r=n-r)*r),u=n+t-o;return[o/Object(i.h)(u)*Object(i.g)(e,r),u]},e}n.b=function(){return Object(r.a)(u).scale(123.082).center([0,26.1441]).parallel(45)}},function(t,n,e){"use strict";n.a=o;var r=e(0),i=e(1);function o(t){function n(n,e){var r=i.o-e,o=r?n*t*Object(i.y)(r)/r:r;return[r*Object(i.y)(o)/t,i.o-r*Object(i.h)(o)]}return n.invert=function(n,e){var r=n*t,o=i.o-e,u=Object(i.B)(r*r+o*o),a=Object(i.g)(r,o);return[(u?u/Object(i.y)(u):1)*a/t,i.o-u]},n}n.b=function(){var t=.5,n=Object(r.geoProjectionMutator)(o),e=n(t);return e.fraction=function(e){return arguments.length?n(t=+e):t},e.scale(158.837)}},function(t,n,e){"use strict";e.d(n,"a",function(){return u});var r=e(0),i=e(1),o=e(21),u=Object(o.b)(1,4/i.s,i.s);n.b=function(){return Object(r.geoProjection)(u).scale(152.63)}},function(t,n,e){"use strict";n.b=c,n.a=function(){return s([0,22],[45,22],[22.5,-22]).scale(380).center([22.5,2])},n.c=s;var r=e(0),i=e(1);function o(t,n,e,r,o,u){var a,c=Object(i.h)(u);if(Object(i.a)(t)>1||Object(i.a)(u)>1)a=Object(i.b)(e*o+n*r*c);else{var f=Object(i.y)(t/2),s=Object(i.y)(u/2);a=2*Object(i.e)(Object(i.B)(f*f+n*r*s*s))}return Object(i.a)(a)>i.k?[a,Object(i.g)(r*Object(i.y)(u),n*o-e*r*c)]:[0,0]}function u(t,n,e){return Object(i.b)((t*t+n*n-e*e)/(2*t*n))}function a(t){return t-2*i.s*Object(i.n)((t+i.s)/(2*i.s))}function c(t,n,e){for(var r,c=[[t[0],t[1],Object(i.y)(t[1]),Object(i.h)(t[1])],[n[0],n[1],Object(i.y)(n[1]),Object(i.h)(n[1])],[e[0],e[1],Object(i.y)(e[1]),Object(i.h)(e[1])]],f=c[2],s=0;s<3;++s,f=r)r=c[s],f.v=o(r[1]-f[1],f[3],f[2],r[3],r[2],r[0]-f[0]),f.point=[0,0];var l=u(c[0].v[0],c[2].v[0],c[1].v[0]),h=u(c[0].v[0],c[1].v[0],c[2].v[0]),p=i.s-l;c[2].point[1]=0,c[0].point[0]=-(c[1].point[0]=c[0].v[0]/2);var v=[c[2].point[0]=c[0].point[0]+c[2].v[0]*Object(i.h)(l),2*(c[0].point[1]=c[1].point[1]=c[2].v[0]*Object(i.y)(l))];return function(t,n){var e,r=Object(i.y)(n),f=Object(i.h)(n),s=new Array(3);for(e=0;e<3;++e){var l=c[e];if(s[e]=o(n-l[1],l[3],l[2],f,r,t-l[0]),!s[e][0])return l.point;s[e][1]=a(s[e][1]-l.v[1])}var d=v.slice();for(e=0;e<3;++e){var g=2==e?0:e+1,b=u(c[e].v[0],s[e][0],s[g][0]);s[e][1]<0&&(b=-b),e?1==e?(b=h-b,d[0]-=s[e][0]*Object(i.h)(b),d[1]-=s[e][0]*Object(i.y)(b)):(b=p-b,d[0]+=s[e][0]*Object(i.h)(b),d[1]+=s[e][0]*Object(i.y)(b)):(d[0]+=s[e][0]*Object(i.h)(b),d[1]-=s[e][0]*Object(i.y)(b))}return d[0]/=3,d[1]/=3,d}}function f(t){return t[0]*=i.v,t[1]*=i.v,t}function s(t,n,e){var i=Object(r.geoCentroid)({type:"MultiPoint",coordinates:[t,n,e]}),o=[-i[0],-i[1]],u=Object(r.geoRotation)(o),a=Object(r.geoProjection)(c(f(u(t)),f(u(n)),f(u(e)))).rotate(o),s=a.center;return delete a.rotate,a.center=function(t){return arguments.length?s(u(t)):u.invert(s())},a.clipAngle(90)}},function(t,n,e){"use strict";n.a=o;var r=e(1),i=e(31);function o(t){var n=Object(r.F)(t);function e(t,e){return[t,(t?t/Object(r.y)(t):1)*(Object(r.y)(e)*Object(r.h)(t)-n*Object(r.h)(e))]}return e.invert=n?function(t,e){t&&(e*=Object(r.y)(t)/t);var i=Object(r.h)(t);return[t,2*Object(r.g)(Object(r.B)(i*i+n*n-e*e)-i,n-e)]}:function(t,n){return[t,Object(r.e)(t?n*Object(r.F)(t)/t:n)]},e}n.b=function(){return Object(i.a)(o).scale(249.828).clipAngle(90)}},function(t,n,e){"use strict";n.a=u;var r=e(0),i=e(1),o=Object(i.B)(3);function u(t,n){return[o*t*(2*Object(i.h)(2*n/3)-1)/i.E,o*i.E*Object(i.y)(n/3)]}u.invert=function(t,n){var e=3*Object(i.e)(n/(o*i.E));return[i.E*t/(o*(2*Object(i.h)(2*e/3)-1)),e]},n.b=function(){return Object(r.geoProjection)(u).scale(156.19)}},function(t,n,e){"use strict";n.a=o;var r=e(1),i=e(31);function o(t){var n=Object(r.h)(t);function e(t,e){return[t*n,(1+n)*Object(r.F)(e/2)]}return e.invert=function(t,e){return[t/n,2*Object(r.f)(e/(1+n))]},e}n.b=function(){return Object(i.a)(o).scale(124.75)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=Object(i.B)(8/(3*i.s));return[e*t*(1-Object(i.a)(n)/i.s),e*n]}o.invert=function(t,n){var e=Object(i.B)(8/(3*i.s)),r=n/e;return[t/(e*(1-Object(i.a)(r)/i.s)),r]},n.a=function(){return Object(r.geoProjection)(o).scale(165.664)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=Object(i.B)(4-3*Object(i.y)(Object(i.a)(n)));return[2/Object(i.B)(6*i.s)*t*e,Object(i.x)(n)*Object(i.B)(2*i.s/3)*(2-e)]}o.invert=function(t,n){var e=2-Object(i.a)(n)/Object(i.B)(2*i.s/3);return[t*Object(i.B)(6*i.s)/(2*e),Object(i.x)(n)*Object(i.e)((4-e*e)/3)]},n.a=function(){return Object(r.geoProjection)(o).scale(165.664)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=Object(i.B)(i.s*(4+i.s));return[2/e*t*(1+Object(i.B)(1-4*n*n/(i.s*i.s))),4/e*n]}o.invert=function(t,n){var e=Object(i.B)(i.s*(4+i.s))/2;return[t*e/(1+Object(i.B)(1-n*n*(4+i.s)/(4*i.s))),n*e/2]},n.a=function(){return Object(r.geoProjection)(o).scale(180.739)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=(2+i.o)*Object(i.y)(n);n/=2;for(var r=0,o=1/0;r<10&&Object(i.a)(o)>i.k;r++){var u=Object(i.h)(n);n-=o=(n+Object(i.y)(n)*(u+2)-e)/(2*u*(1+u))}return[2/Object(i.B)(i.s*(4+i.s))*t*(1+Object(i.h)(n)),2*Object(i.B)(i.s/(4+i.s))*Object(i.y)(n)]}o.invert=function(t,n){var e=n*Object(i.B)((4+i.s)/i.s)/2,r=Object(i.e)(e),o=Object(i.h)(r);return[t/(2/Object(i.B)(i.s*(4+i.s))*(1+o)),Object(i.e)((r+e*(o+2))/(2+i.o))]},n.a=function(){return Object(r.geoProjection)(o).scale(180.739)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){return[t*(1+Object(i.h)(n))/Object(i.B)(2+i.s),2*n/Object(i.B)(2+i.s)]}o.invert=function(t,n){var e=Object(i.B)(2+i.s),r=n*e/2;return[e*t/(1+Object(i.h)(r)),r]},n.a=function(){return Object(r.geoProjection)(o).scale(173.044)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){for(var e=(1+i.o)*Object(i.y)(n),r=0,o=1/0;r<10&&Object(i.a)(o)>i.k;r++)n-=o=(n+Object(i.y)(n)-e)/(1+Object(i.h)(n));return e=Object(i.B)(2+i.s),[t*(1+Object(i.h)(n))/e,2*n/e]}o.invert=function(t,n){var e=1+i.o,r=Object(i.B)(e/2);return[2*t*r/(1+Object(i.h)(n*=r)),Object(i.e)((n+Object(i.y)(n))/e)]},n.a=function(){return Object(r.geoProjection)(o).scale(173.044)}},function(t,n,e){"use strict";n.b=a;var r=e(0),i=e(130),o=e(1),u=3+2*o.D;function a(t,n){var e=Object(o.y)(t/=2),r=Object(o.h)(t),i=Object(o.B)(Object(o.h)(n)),a=Object(o.h)(n/=2),c=Object(o.y)(n)/(a+o.D*r*i),f=Object(o.B)(2/(1+c*c)),s=Object(o.B)((o.D*a+(r+e)*i)/(o.D*a+(r-e)*i));return[u*(f*(s-1/s)-2*Object(o.p)(s)),u*(f*c*(s+1/s)-2*Object(o.f)(c))]}a.invert=function(t,n){if(!(e=i.a.invert(t/1.2,1.065*n)))return null;var e,r=e[0],a=e[1],c=20;t/=u,n/=u;do{var f=r/2,s=a/2,l=Object(o.y)(f),h=Object(o.h)(f),p=Object(o.y)(s),v=Object(o.h)(s),d=Object(o.h)(a),g=Object(o.B)(d),b=p/(v+o.D*h*g),y=b*b,j=Object(o.B)(2/(1+y)),O=(o.D*v+(h+l)*g)/(o.D*v+(h-l)*g),_=Object(o.B)(O),m=_-1/_,w=_+1/_,x=j*m-2*Object(o.p)(_)-t,E=j*b*w-2*Object(o.f)(b)-n,M=p&&o.C*g*l*y/p,T=(o.D*h*v+g)/(2*(v+o.D*h*g)*(v+o.D*h*g)*g),S=-.5*b*j*j*j,k=S*M,C=S*T,P=(P=2*v+o.D*g*(h-l))*P*_,N=(o.D*h*v*g+d)/P,R=-o.D*l*p/(g*P),B=m*k-2*N/_+j*(N+N/O),A=m*C-2*R/_+j*(R+R/O),I=b*w*k-2*M/(1+y)+j*w*M+j*b*(N-N/O),L=b*w*C-2*T/(1+y)+j*w*T+j*b*(R-R/O),z=A*I-L*B;if(!z)break;var q=(E*A-x*L)/z,F=(x*I-E*B)/z;r-=q,a=Object(o.q)(-o.o,Object(o.r)(o.o,a-F))}while((Object(o.a)(q)>o.k||Object(o.a)(F)>o.k)&&--c>0);return Object(o.a)(Object(o.a)(a)-o.o)<o.k?[0,a]:c&&[r,a]},n.a=function(){return Object(r.geoProjection)(a).scale(62.5271)}},function(t,n,e){"use strict";n.b=u;var r=e(0),i=e(1),o=Object(i.h)(35*i.v);function u(t,n){var e=Object(i.F)(n/2);return[t*o*Object(i.B)(1-e*e),(1+o)*e]}u.invert=function(t,n){var e=n/(1+o);return[t&&t/(o*Object(i.B)(1-e*e)),2*Object(i.f)(e)]},n.a=function(){return Object(r.geoProjection)(u).scale(137.152)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=n/2,r=Object(i.h)(e);return[2*t/i.E*Object(i.h)(n)*r*r,i.E*Object(i.F)(e)]}o.invert=function(t,n){var e=Object(i.f)(n/i.E),r=Object(i.h)(e),o=2*e;return[t*i.E/2/(Object(i.h)(o)*r*r),o]},n.a=function(){return Object(r.geoProjection)(o).scale(135.264)}},function(t,n,e){"use strict";var r=e(0),i=e(1);function o(t){return[t[0]/2,Object(i.e)(Object(i.F)(t[1]/2*i.v))*i.j]}function u(t){return[2*t[0],2*Object(i.f)(Object(i.y)(t[1]*i.v))*i.j]}n.a=function(t){null==t&&(t=r.geoOrthographic);var n=t(),e=Object(r.geoEquirectangular)().scale(i.j).precision(0).clipAngle(null).translate([0,0]);function a(t){return n(o(t))}function c(t){a[t]=function(e){return arguments.length?(n[t](e),a):n[t]()}}return n.invert&&(a.invert=function(t){return u(n.invert(t))}),a.stream=function(t){var r=n.stream(t),o=e.stream({point:function(t,n){r.point(t/2,Object(i.e)(Object(i.F)(-n/2*i.v))*i.j)},lineStart:function(){r.lineStart()},lineEnd:function(){r.lineEnd()},polygonStart:function(){r.polygonStart()},polygonEnd:function(){r.polygonEnd()}});return o.sphere=r.sphere,o},a.rotate=function(t){return arguments.length?(e.rotate(t),a):e.rotate()},a.center=function(t){return arguments.length?(n.center(o(t)),a):u(n.center())},c("clipAngle"),c("clipExtent"),c("scale"),c("translate"),c("precision"),a.scale(249.5)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=2*i.s/n,o=t*t;function c(n,c){var f=Object(r.geoAzimuthalEquidistantRaw)(n,c),s=f[0],l=f[1],h=s*s+l*l;if(h>o){var p=Object(i.B)(h),v=Object(i.g)(l,s),d=e*Object(i.w)(v/e),g=v-d,b=t*Object(i.h)(g),y=(t*Object(i.y)(g)-g*Object(i.y)(b))/(i.o-b),j=u(g,y),O=(i.s-t)/a(j,b,i.s);s=p;var _,m=50;do{s-=_=(t+a(j,b,s)*O-p)/(j(s)*O)}while(Object(i.a)(_)>i.k&&--m>0);l=g*Object(i.y)(s),s<i.o&&(l-=y*(s-i.o));var w=Object(i.y)(d),x=Object(i.h)(d);f[0]=s*x-l*w,f[1]=s*w+l*x}return f}return c.invert=function(n,c){var f=n*n+c*c;if(f>o){var s=Object(i.B)(f),l=Object(i.g)(c,n),h=e*Object(i.w)(l/e),p=l-h;n=s*Object(i.h)(p),c=s*Object(i.y)(p);for(var v=n-i.o,d=Object(i.y)(n),g=c/d,b=n<i.o?1/0:0,y=10;;){var j=t*Object(i.y)(g),O=t*Object(i.h)(g),_=Object(i.y)(O),m=i.o-O,w=(j-g*_)/m,x=u(g,w);if(Object(i.a)(b)<i.l||!--y)break;g-=b=(g*d-w*v-c)/(d-2*v*(m*(O+g*j*Object(i.h)(O)-_)-j*(j-g*_))/(m*m))}l=h+g,n=(s=t+a(x,O,n)*(i.s-t)/a(x,O,i.s))*Object(i.h)(l),c=s*Object(i.y)(l)}return r.geoAzimuthalEquidistantRaw.invert(n,c)},c}function u(t,n){return function(e){var r=t*Object(i.h)(e);return e<i.o&&(r-=n),Object(i.B)(1+r*r)}}function a(t,n,e){for(var r=(e-n)/50,i=t(n)+t(e),o=1,u=n;o<50;++o)i+=2*t(u+=r);return.5*i*r}n.a=function(){var t=6,n=30*i.v,e=Object(i.h)(n),u=Object(i.y)(n),a=Object(r.geoProjectionMutator)(o),c=a(n,t),f=c.stream,s=-Object(i.h)(.01*i.v),l=Object(i.y)(.01*i.v);return c.radius=function(r){return arguments.length?(e=Object(i.h)(n=r*i.v),u=Object(i.y)(n),a(n,t)):n*i.j},c.lobes=function(e){return arguments.length?a(n,t=+e):t},c.stream=function(n){var r=c.rotate(),o=f(n),a=(c.rotate([0,0]),f(n));return c.rotate(r),o.sphere=function(){a.polygonStart(),a.lineStart();for(var n=0,r=2*i.s/t,o=0;n<t;++n,o-=r)a.point(Object(i.g)(l*Object(i.h)(o),s)*i.j,Object(i.e)(l*Object(i.y)(o))*i.j),a.point(Object(i.g)(u*Object(i.h)(o-r/2),e)*i.j,Object(i.e)(u*Object(i.y)(o-r/2))*i.j);a.lineEnd(),a.polygonEnd()},o},c.rotate([90,-40]).scale(91.7095).clipAngle(179.999)}},function(t,n,e){"use strict";e.d(n,"b",function(){return o});var r=e(0),i=e(52),o=Object(i.a)(2.8284,-1.6988,.75432,-.18071,1.76003,-.38914,.042555);n.a=function(){return Object(r.geoProjection)(o).scale(149.995)}},function(t,n,e){"use strict";e.d(n,"b",function(){return o});var r=e(0),i=e(52),o=Object(i.a)(2.583819,-.835827,.170354,-.038094,1.543313,-.411435,.082742);n.a=function(){return Object(r.geoProjection)(o).scale(153.93)}},function(t,n,e){"use strict";e.d(n,"b",function(){return u});var r=e(0),i=e(52),o=e(1),u=Object(i.a)(5/6*o.s,-.62636,-.0344,0,1.3493,-.05524,0,.045);n.a=function(){return Object(r.geoProjection)(u).scale(130.945)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=t*t,r=n*n;return[t*(1-.162388*r)*(.87-952426e-9*e*e),n*(1+r/12)]}o.invert=function(t,n){var e,r=t,o=n,u=50;do{var a=o*o;o-=e=(o*(1+a/12)-n)/(1+a/4)}while(Object(i.a)(e)>i.k&&--u>0);u=50,t/=1-.162388*a;do{var c=(c=r*r)*c;r-=e=(r*(.87-952426e-9*c)-t)/(.87-.00476213*c)}while(Object(i.a)(e)>i.k&&--u>0);return[r,o]},n.a=function(){return Object(r.geoProjection)(o).scale(131.747)}},function(t,n,e){"use strict";e.d(n,"b",function(){return o});var r=e(0),i=e(52),o=Object(i.a)(2.6516,-.76534,.19123,-.047094,1.36289,-.13965,.031762);n.a=function(){return Object(r.geoProjection)(o).scale(131.087)}},function(t,n,e){"use strict";n.c=function(t,n,e){var r,o,u;if(!t)return[[0,(o=i(n,1-e))[0]/o[1]],[1/o[1],0],[o[2]/o[1],0]];return r=i(t,e),n?(o=i(n,1-e),u=o[1]*o[1]+e*r[0]*r[0]*o[0]*o[0],[[r[0]*o[2]/u,r[1]*r[2]*o[0]*o[1]/u],[r[1]*o[1]/u,-r[0]*r[2]*o[0]*o[2]/u],[r[2]*o[1]*o[2]/u,-e*r[0]*r[1]*o[0]/u]]):[[r[0],0],[r[1],0],[r[2],0]]},n.b=function(t,n,e){var i=Object(r.a)(t),u=Object(r.a)(n),a=Object(r.A)(u);if(i){var c=1/Object(r.y)(i),f=1/(Object(r.F)(i)*Object(r.F)(i)),s=-(f+e*(a*a*c*c)-1+e),l=(e-1)*f,h=(-s+Object(r.B)(s*s-4*l))/2;return[o(Object(r.f)(1/Object(r.B)(h)),e)*Object(r.x)(t),o(Object(r.f)(Object(r.B)((h/f-1)/e)),1-e)*Object(r.x)(n)]}return[0,o(Object(r.f)(a),1-e)*Object(r.x)(n)]},n.a=o;var r=e(1);function i(t,n){var e,i,o,u,a;if(n<r.k)return[(u=Object(r.y)(t))-(e=n*(t-u*(i=Object(r.h)(t)))/4)*i,i+e*u,1-n*u*u/2,t-e];if(n>=1-r.k)return e=(1-n)/4,o=1/(i=Object(r.i)(t)),[(u=Object(r.G)(t))+e*((a=i*Object(r.A)(t))-t)/(i*i),o-e*u*o*(a-t),o+e*u*o*(a+t),2*Object(r.f)(Object(r.m)(t))-r.o+e*(a-t)/i];var c=[1,0,0,0,0,0,0,0,0],f=[Object(r.B)(n),0,0,0,0,0,0,0,0],s=0;for(i=Object(r.B)(1-n),a=1;Object(r.a)(f[s]/c[s])>r.k&&s<8;)e=c[s++],f[s]=(e-i)/2,c[s]=(e+i)/2,i=Object(r.B)(e*i),a*=2;o=a*c[s]*t;do{u=f[s]*Object(r.y)(i=o)/c[s],o=(Object(r.e)(u)+o)/2}while(--s);return[Object(r.y)(o),u=Object(r.h)(o),u/Object(r.h)(o-i),o]}function o(t,n){if(!n)return t;if(1===n)return Object(r.p)(Object(r.F)(t/2+r.u));for(var e=1,i=Object(r.B)(1-n),o=Object(r.B)(n),u=0;Object(r.a)(o)>r.k;u++){if(t%r.s){var a=Object(r.f)(i*Object(r.F)(t)/e);a<0&&(a+=r.s),t+=a+~~(t/r.s)*r.s}else t+=t;o=(e+i)/2,i=Object(r.B)(e*i),o=((e=o)-i)/2}return t/(Object(r.t)(2,u)*e)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){if(arguments.length<2&&(n=t),1===n)return r.geoAzimuthalEqualAreaRaw;if(n===1/0)return u;function e(e,i){var o=Object(r.geoAzimuthalEqualAreaRaw)(e/n,i);return o[0]*=t,o}return e.invert=function(e,i){var o=r.geoAzimuthalEqualAreaRaw.invert(e/t,i);return o[0]*=n,o},e}function u(t,n){return[t*Object(i.h)(n)/Object(i.h)(n/=2),2*Object(i.y)(n)]}u.invert=function(t,n){var e=2*Object(i.e)(n/2);return[t*Object(i.h)(e/2)/Object(i.h)(e),e]},n.a=function(){var t=2,n=Object(r.geoProjectionMutator)(o),e=n(t);return e.coefficient=function(e){return arguments.length?n(t=+e):t},e.scale(169.529)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t){var n=Object(i.y)(t),e=Object(i.h)(t),r=u(t);function o(t,o){var u=r(t,o);t=u[0],o=u[1];var a=Object(i.y)(o),c=Object(i.h)(o),f=Object(i.h)(t),s=Object(i.b)(n*a+e*c*f),l=Object(i.y)(s),h=Object(i.a)(l)>i.k?s/l:1;return[h*e*Object(i.y)(t),(Object(i.a)(t)>i.o?h:-h)*(n*c-e*a*f)]}return r.invert=u(-t),o.invert=function(t,e){var o=Object(i.B)(t*t+e*e),u=-Object(i.y)(o),a=Object(i.h)(o),c=o*a,f=-e*u,s=o*n,l=Object(i.B)(c*c+f*f-s*s),h=Object(i.g)(c*s+f*l,f*s-c*l),p=(o>i.o?-1:1)*Object(i.g)(t*u,o*Object(i.h)(h)*a+e*Object(i.y)(h)*u);return r.invert(p,h)},o}function u(t){var n=Object(i.y)(t),e=Object(i.h)(t);return function(t,r){var o=Object(i.h)(r),u=Object(i.h)(t)*o,a=Object(i.y)(t)*o,c=Object(i.y)(r);return[Object(i.g)(a,u*e-c*n),Object(i.e)(c*e+u*n)]}}n.a=function(){var t=0,n=Object(r.geoProjectionMutator)(o),e=n(t),u=e.rotate,a=e.stream,c=Object(r.geoCircle)();return e.parallel=function(r){if(!arguments.length)return t*i.j;var o=e.rotate();return n(t=r*i.v).rotate(o)},e.rotate=function(n){return arguments.length?(u.call(e,[n[0],n[1]-t*i.j]),c.center([-n[0],-n[1]]),e):((n=u.call(e))[1]+=t*i.j,n)},e.stream=function(t){return(t=a(t)).sphere=function(){t.polygonStart();var n,e=c.radius(89.99)().coordinates[0],r=e.length-1,i=-1;for(t.lineStart();++i<r;)t.point((n=e[i])[0],n[1]);for(t.lineEnd(),r=(e=c.radius(90.01)().coordinates[0]).length-1,t.lineStart();--i>=0;)t.point((n=e[i])[0],n[1]);t.lineEnd(),t.polygonEnd()},t},e.scale(79.4187).parallel(45).clipAngle(179.999)}},function(t,n,e){"use strict";n.b=s;var r=e(14),i=e(0),o=e(72),u=e(132),a=e(1),c=41+48/36+37/3600,f=Object(u.a)(0);function s(t){var n=c*a.v,e=Object(o.a)(a.s,n)[0]-Object(o.a)(-a.s,n)[0],r=f(0,n)[1],i=Object(o.a)(0,n)[1],u=a.E-i,s=a.H/t,l=4/a.H,h=r+u*u*4/a.H;function p(c,p){var v,d=Object(a.a)(p);if(d>n){var g=Object(a.r)(t-1,Object(a.q)(0,Object(a.n)((c+a.s)/s)));c+=a.s*(t-1)/t-g*s,(v=Object(o.a)(c,d))[0]=v[0]*a.H/e-a.H*(t-1)/(2*t)+g*a.H/t,v[1]=r+4*(v[1]-i)*u/a.H,p<0&&(v[1]=-v[1])}else v=f(c,p);return v[0]*=l,v[1]/=h,v}return p.invert=function(n,c){n/=l,c*=h;var p=Object(a.a)(c);if(p>r){var v=Object(a.r)(t-1,Object(a.q)(0,Object(a.n)((n+a.s)/s)));n=(n+a.s*(t-1)/t-v*s)*e/a.H;var d=o.a.invert(n,.25*(p-r)*a.H/u+i);return d[0]-=a.s*(t-1)/t-v*s,c<0&&(d[1]=-d[1]),d}return f.invert(n,c)},p}n.a=function(){var t=4,n=Object(i.geoProjectionMutator)(s),e=n(t),o=e.stream;return e.lobes=function(e){return arguments.length?n(t=+e):t},e.stream=function(n){var u=e.rotate(),a=o(n),f=(e.rotate([0,0]),o(n));return e.rotate(u),a.sphere=function(){Object(i.geoStream)(function(t){return{type:"Polygon",coordinates:[Object(r.range)(-180,180+t/2,t).map(function(t,n){return[t,1&n?90-1e-6:c]}).concat(Object(r.range)(180,-180-t/2,-t).map(function(t,n){return[t,1&n?1e-6-90:-c]}))]}}(180/t),f)},a},e.scale(239.75)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t){var n,e=1+t,r=Object(i.y)(1/e),o=Object(i.e)(r),u=2*Object(i.B)(i.s/(n=i.s+4*o*e)),a=.5*u*(e+Object(i.B)(t*(2+t))),c=t*t,f=e*e;function s(r,s){var l,h,p=1-Object(i.y)(s);if(p&&p<2){var v,d=i.o-s,g=25;do{var b=Object(i.y)(d),y=Object(i.h)(d),j=o+Object(i.g)(b,e-y),O=1+f-2*e*y;d-=v=(d-c*o-e*b+O*j-.5*p*n)/(2*e*b*j)}while(Object(i.a)(v)>i.l&&--g>0);l=u*Object(i.B)(O),h=r*j/i.s}else l=u*(t+p),h=r*o/i.s;return[l*Object(i.y)(h),a-l*Object(i.h)(h)]}return s.invert=function(t,r){var s=t*t+(r-=a)*r,l=(1+f-s/(u*u))/(2*e),h=Object(i.b)(l),p=Object(i.y)(h),v=o+Object(i.g)(p,e-l);return[Object(i.e)(t/Object(i.B)(s))*i.s/v,Object(i.e)(1-2*(h-c*o-e*p+(1+f-2*e*l)*v)/n)]},s}n.a=function(){var t=1,n=Object(r.geoProjectionMutator)(o),e=n(t);return e.ratio=function(e){return arguments.length?n(t=+e):t},e.scale(167.774).center([0,18.67])}},function(t,n,e){"use strict";var r=e(131),i=e(23),o=[[[[-180,0],[-100,90],[-40,0]],[[-40,0],[30,90],[180,0]]],[[[-180,0],[-160,-90],[-100,0]],[[-100,0],[-60,-90],[-20,0]],[[-20,0],[20,-90],[80,0]],[[80,0],[140,-90],[180,0]]]];n.a=function(){return Object(i.a)(r.a,o).scale(160.857)}},function(t,n,e){"use strict";var r=e(136),i=e(23),o=[[[[-180,0],[-100,90],[-40,0]],[[-40,0],[30,90],[180,0]]],[[[-180,0],[-160,-90],[-100,0]],[[-100,0],[-60,-90],[-20,0]],[[-20,0],[20,-90],[80,0]],[[80,0],[140,-90],[180,0]]]];n.a=function(){return Object(i.a)(r.b,o).scale(152.63)}},function(t,n,e){"use strict";var r=e(21),i=e(23),o=[[[[-180,0],[-100,90],[-40,0]],[[-40,0],[30,90],[180,0]]],[[[-180,0],[-160,-90],[-100,0]],[[-100,0],[-60,-90],[-20,0]],[[-20,0],[20,-90],[80,0]],[[80,0],[140,-90],[180,0]]]];n.a=function(){return Object(i.a)(r.d,o).scale(169.529)}},function(t,n,e){"use strict";var r=e(21),i=e(23),o=[[[[-180,0],[-90,90],[0,0]],[[0,0],[90,90],[180,0]]],[[[-180,0],[-90,-90],[0,0]],[[0,0],[90,-90],[180,0]]]];n.a=function(){return Object(i.a)(r.d,o).scale(169.529).rotate([20,0])}},function(t,n,e){"use strict";var r=e(73),i=e(23),o=[[[[-180,35],[-30,90],[0,35]],[[0,35],[30,90],[180,35]]],[[[-180,-10],[-102,-90],[-65,-10]],[[-65,-10],[5,-90],[77,-10]],[[77,-10],[103,-90],[180,-10]]]];n.a=function(){return Object(i.a)(r.c,o).rotate([-20,-55]).scale(164.263).center([0,-5.4036])}},function(t,n,e){"use strict";var r=e(38),i=e(23),o=[[[[-180,0],[-110,90],[-40,0]],[[-40,0],[0,90],[40,0]],[[40,0],[110,90],[180,0]]],[[[-180,0],[-110,-90],[-40,0]],[[-40,0],[0,-90],[40,0]],[[40,0],[110,-90],[180,0]]]];n.a=function(){return Object(i.a)(r.b,o).scale(152.63).rotate([-20,0])}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){return[3/i.H*t*Object(i.B)(i.s*i.s/3-n*n),n]}o.invert=function(t,n){return[i.H/3*t/Object(i.B)(i.s*i.s/3-n*n),n]},n.a=function(){return Object(r.geoProjection)(o).scale(158.837)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t){function n(n,e){if(Object(i.a)(Object(i.a)(e)-i.o)<i.k)return[0,e<0?-2:2];var r=Object(i.y)(e),o=Object(i.t)((1+r)/(1-r),t/2),u=.5*(o+1/o)+Object(i.h)(n*=t);return[2*Object(i.y)(n)/u,(o-1/o)/u]}return n.invert=function(n,e){var r=Object(i.a)(e);if(Object(i.a)(r-2)<i.k)return n?null:[0,Object(i.x)(e)*i.o];if(r>2)return null;var o=(n/=2)*n,u=(e/=2)*e,a=2*e/(1+o+u);return a=Object(i.t)((1+a)/(1-a),1/t),[Object(i.g)(2*n,1-o-u)/t,Object(i.e)((a-1)/(a+1))]},n}n.a=function(){var t=.5,n=Object(r.geoProjectionMutator)(o),e=n(t);return e.spacing=function(e){return arguments.length?n(t=+e):t},e.scale(124.75)}},function(t,n,e){"use strict";n.b=u;var r=e(0),i=e(1),o=i.s/i.D;function u(t,n){return[t*(1+Object(i.B)(Object(i.h)(n)))/2,n/(Object(i.h)(n/2)*Object(i.h)(t/6))]}u.invert=function(t,n){var e=Object(i.a)(t),r=Object(i.a)(n),u=i.k,a=i.o;r<o?a*=r/o:u+=6*Object(i.b)(o/r);for(var c=0;c<25;c++){var f=Object(i.y)(a),s=Object(i.B)(Object(i.h)(a)),l=Object(i.y)(a/2),h=Object(i.h)(a/2),p=Object(i.y)(u/6),v=Object(i.h)(u/6),d=.5*u*(1+s)-e,g=a/(h*v)-r,b=s?-.25*u*f/s:0,y=.5*(1+s),j=(1+.5*a*l/h)/(h*v),O=a/h*(p/6)/(v*v),_=b*O-j*y,m=(d*O-g*y)/_,w=(g*b-d*j)/_;if(a-=m,u-=w,Object(i.a)(m)<i.k&&Object(i.a)(w)<i.k)break}return[t<0?-u:u,n<0?-a:a]},n.a=function(){return Object(r.geoProjection)(u).scale(97.2672)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=t*t,r=n*n;return[t*(.975534+r*(-.0143059*e-.119161+-.0547009*r)),n*(1.00384+e*(.0802894+-.02855*r+199025e-9*e)+r*(.0998909+-.0491032*r))]}o.invert=function(t,n){var e=Object(i.x)(t)*i.s,r=n/2,o=50;do{var u=e*e,a=r*r,c=e*r,f=e*(.975534+a*(-.0143059*u-.119161+-.0547009*a))-t,s=r*(1.00384+u*(.0802894+-.02855*a+199025e-9*u)+a*(.0998909+-.0491032*a))-n,l=.975534-a*(.119161+3*u*.0143059+.0547009*a),h=-c*(.238322+.2188036*a+.0286118*u),p=c*(.1605788+7961e-7*u+-.0571*a),v=1.00384+u*(.0802894+199025e-9*u)+a*(3*(.0998909-.02855*u)-.245516*a),d=h*p-v*l,g=(s*h-f*v)/d,b=(f*p-s*l)/d;e-=g,r-=b}while((Object(i.a)(g)>i.k||Object(i.a)(b)>i.k)&&--o>0);return o&&[e,r]},n.a=function(){return Object(r.geoProjection)(o).scale(139.98)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){return[Object(i.y)(t)/Object(i.h)(n),Object(i.F)(n)*Object(i.h)(t)]}o.invert=function(t,n){var e=t*t,r=n*n,o=r+1,u=t?i.C*Object(i.B)((o-Object(i.B)(e*e+2*e*(r-1)+o*o))/e+1):1/Object(i.B)(o);return[Object(i.e)(t*u),Object(i.x)(n)*Object(i.b)(u)]},n.a=function(){return Object(r.geoProjection)(o).scale(144.049).clipAngle(89.999)}},function(t,n,e){"use strict";n.b=o;var r=e(31),i=e(1);function o(t){var n=Object(i.h)(t),e=Object(i.F)(i.u+t/2);function r(r,o){var u=o-t,a=Object(i.a)(u)<i.k?r*n:Object(i.a)(a=i.u+o/2)<i.k||Object(i.a)(Object(i.a)(a)-i.o)<i.k?0:r*u/Object(i.p)(Object(i.F)(a)/e);return[a,u]}return r.invert=function(r,o){var u,a=o+t;return[Object(i.a)(o)<i.k?r/n:Object(i.a)(u=i.u+a/2)<i.k||Object(i.a)(Object(i.a)(u)-i.o)<i.k?0:r*Object(i.p)(Object(i.F)(u)/e)/o,a]},r}n.a=function(){return Object(r.a)(o).parallel(40).scale(158.837)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){return[t,1.25*Object(i.p)(Object(i.F)(i.u+.4*n))]}o.invert=function(t,n){return[t,2.5*Object(i.f)(Object(i.m)(.8*n))-.625*i.s]},n.a=function(){return Object(r.geoProjection)(o).scale(108.318)}},function(t,n,e){"use strict";n.g=o,n.b=function(){return l(u,[152,-64]).scale(1500).center([-160.908,62.4864]).clipAngle(25)},n.c=function(){return l(a,[95,-38]).scale(1e3).clipAngle(55).center([-96.5563,38.8675])},n.d=function(){return l(c,[120,-45]).scale(359.513).clipAngle(55).center([-117.474,53.0628])},n.f=function(){return l(f,[-20,-18]).scale(209.091).center([20,16.7214]).clipAngle(82)},n.e=function(){return l(s,[165,10]).scale(250).clipAngle(130).center([-165,-10])},n.a=l;var r=e(0),i=e(1);function o(t){var n=t.length-1;function e(e,r){for(var o,u=Object(i.h)(r),a=2/(1+u*Object(i.h)(e)),c=a*u*Object(i.y)(e),f=a*Object(i.y)(r),s=n,l=t[s],h=l[0],p=l[1];--s>=0;)h=(l=t[s])[0]+c*(o=h)-f*p,p=l[1]+c*p+f*o;return[h=c*(o=h)-f*p,p=c*p+f*o]}return e.invert=function(e,r){var o=20,u=e,a=r;do{for(var c,f=n,s=t[f],l=s[0],h=s[1],p=0,v=0;--f>=0;)s=t[f],p=l+u*(c=p)-a*v,v=h+u*v+a*c,l=s[0]+u*(c=l)-a*h,h=s[1]+u*h+a*c;var d,g,b=(p=l+u*(c=p)-a*v)*p+(v=h+u*v+a*c)*v;u-=d=((l=u*(c=l)-a*h-e)*p+(h=u*h+a*c-r)*v)/b,a-=g=(h*p-l*v)/b}while(Object(i.a)(d)+Object(i.a)(g)>i.k*i.k&&--o>0);if(o){var y=Object(i.B)(u*u+a*a),j=2*Object(i.f)(.5*y),O=Object(i.y)(j);return[Object(i.g)(u*O,y*Object(i.h)(j)),y?Object(i.e)(a*O/y):0]}},e}var u=[[.9972523,0],[.0052513,-.0041175],[.0074606,.0048125],[-.0153783,-.1968253],[.0636871,-.1408027],[.3660976,-.2937382]],a=[[.98879,0],[0,0],[-.050909,0],[0,0],[.075528,0]],c=[[.984299,0],[.0211642,.0037608],[-.1036018,-.0575102],[-.0329095,-.0320119],[.0499471,.1223335],[.026046,.0899805],[7388e-7,-.1435792],[.0075848,-.1334108],[-.0216473,.0776645],[-.0225161,.0853673]],f=[[.9245,0],[0,0],[.01943,0]],s=[[.721316,0],[0,0],[-.00881625,-.00617325]];function l(t,n){var e=Object(r.geoProjection)(o(t)).rotate(n).clipAngle(90),i=Object(r.geoRotation)(n),u=e.center;return delete e.rotate,e.center=function(t){return arguments.length?u(i(t)):i.invert(u())},e}},function(t,n,e){"use strict";n.b=a;var r=e(0),i=e(1),o=Object(i.B)(6),u=Object(i.B)(7);function a(t,n){var e=Object(i.e)(7*Object(i.y)(n)/(3*o));return[o*t*(2*Object(i.h)(2*e/3)-1)/u,9*Object(i.y)(e/3)/u]}a.invert=function(t,n){var e=3*Object(i.e)(n*u/9);return[t*u/(o*(2*Object(i.h)(2*e/3)-1)),Object(i.e)(3*Object(i.y)(e)*o/7)]},n.a=function(){return Object(r.geoProjection)(a).scale(164.859)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){for(var e,r=(1+i.C)*Object(i.y)(n),o=n,u=0;u<25&&(o-=e=(Object(i.y)(o/2)+Object(i.y)(o)-r)/(.5*Object(i.h)(o/2)+Object(i.h)(o)),!(Object(i.a)(e)<i.k));u++);return[t*(1+2*Object(i.h)(o)/Object(i.h)(o/2))/(3*i.D),2*Object(i.B)(3)*Object(i.y)(o/2)/Object(i.B)(2+i.D)]}o.invert=function(t,n){var e=n*Object(i.B)(2+i.D)/(2*Object(i.B)(3)),r=2*Object(i.e)(e);return[3*i.D*t/(1+2*Object(i.h)(r)/Object(i.h)(r/2)),Object(i.e)((e+Object(i.y)(r))/(1+i.C))]},n.a=function(){return Object(r.geoProjection)(o).scale(188.209)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){for(var e,r=Object(i.B)(6/(4+i.s)),o=(1+i.s/4)*Object(i.y)(n),u=n/2,a=0;a<25&&(u-=e=(u/2+Object(i.y)(u)-o)/(.5+Object(i.h)(u)),!(Object(i.a)(e)<i.k));a++);return[r*(.5+Object(i.h)(u))*t/1.5,r*u]}o.invert=function(t,n){var e=Object(i.B)(6/(4+i.s)),r=n/e;return Object(i.a)(Object(i.a)(r)-i.o)<i.k&&(r=r<0?-i.o:i.o),[1.5*t/(e*(.5+Object(i.h)(r))),Object(i.e)((r/2+Object(i.y)(r))/(1+i.s/4))]},n.a=function(){return Object(r.geoProjection)(o).scale(166.518)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}o.invert=function(t,n){var e,r=n,o=25;do{var u=r*r,a=u*u;r-=e=(r*(1.007226+u*(.015085+a*(.028874*u-.044475-.005916*a)))-n)/(1.007226+u*(.045255+a*(.259866*u-.311325-.005916*11*a)))}while(Object(i.a)(e)>i.k&&--o>0);return[t/(.8707+(u=r*r)*(u*(u*u*u*(.003971-.001529*u)-.013791)-.131979)),r]},n.a=function(){return Object(r.geoProjection)(o).scale(175.295)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=n*n,r=e*e,i=e*r;return[t*(.84719-.13063*e+i*i*(.05494*e-.04515-.02326*r+.00331*i)),n*(1.01183+r*r*(.01926*e-.02625-.00396*r))]}o.invert=function(t,n){var e,r,o,u,a=n,c=25;do{a-=e=(a*(1.01183+(o=(r=a*a)*r)*o*(.01926*r-.02625-.00396*o))-n)/(1.01183+o*o*(.21186*r-.23625+-.05148*o))}while(Object(i.a)(e)>i.l&&--c>0);return[t/(.84719-.13063*(r=a*a)+(u=r*(o=r*r))*u*(.05494*r-.04515-.02326*o+.00331*u)),a]},n.a=function(){return Object(r.geoProjection)(o).scale(175.295)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){return[t*(1+Object(i.h)(n))/2,2*(n-Object(i.F)(n/2))]}o.invert=function(t,n){for(var e=n/2,r=0,o=1/0;r<10&&Object(i.a)(o)>i.k;++r){var u=Object(i.h)(n/2);n-=o=(n-Object(i.F)(n/2)-e)/(1-.5/(u*u))}return[2*t/(1+Object(i.h)(n)),n]},n.a=function(){return Object(r.geoProjection)(o).scale(152.63)}},function(t,n,e){"use strict";n.b=p;var r=e(0),i=e(1),o=1.0148,u=.23185,a=-.14499,c=.02406,f=o,s=5*u,l=7*a,h=9*c;function p(t,n){var e=n*n;return[t,n*(o+e*e*(u+e*(a+c*e)))]}p.invert=function(t,n){n>1.790857183?n=1.790857183:n<-1.790857183&&(n=-1.790857183);var e,r=n;do{var p=r*r;r-=e=(r*(o+p*p*(u+p*(a+c*p)))-n)/(f+p*p*(s+p*(l+h*p)))}while(Object(i.a)(e)>i.k);return[t,r]},n.a=function(){return Object(r.geoProjection)(p).scale(139.319)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){if(Object(i.a)(n)<i.k)return[t,0];var e=Object(i.F)(n),r=t*Object(i.y)(n);return[Object(i.y)(r)/e,n+(1-Object(i.h)(r))/e]}o.invert=function(t,n){if(Object(i.a)(n)<i.k)return[t,0];var e,r=t*t+n*n,o=.5*n,u=10;do{var a=Object(i.F)(o),c=1/Object(i.h)(o),f=r-2*n*o+o*o;o-=e=(a*f+2*(o-n))/(2+f*c*c+2*(o-n)*a)}while(Object(i.a)(e)>i.k&&--u>0);return a=Object(i.F)(o),[(Object(i.a)(n)<Object(i.a)(o+1/a)?Object(i.e)(t*a):Object(i.x)(t)*(Object(i.b)(Object(i.a)(t*a))+i.o))/Object(i.y)(o),o]},n.a=function(){return Object(r.geoProjection)(o).scale(103.74)}},function(t,n,e){"use strict";n.b=function(t){var n=1/(t[0]*t[4]-t[1]*t[3]);return[n*t[4],-n*t[1],n*(t[1]*t[5]-t[2]*t[4]),-n*t[3],n*t[0],n*(t[2]*t[3]-t[0]*t[5])]},n.c=i;var r=e(1);function i(t,n){return[t[0]*n[0]+t[1]*n[3],t[0]*n[1]+t[1]*n[4],t[0]*n[2]+t[1]*n[5]+t[2],t[3]*n[0]+t[4]*n[3],t[3]*n[1]+t[4]*n[4],t[3]*n[2]+t[4]*n[5]+t[5]]}function o(t,n){return[t[0]-n[0],t[1]-n[1]]}function u(t){return Object(r.B)(t[0]*t[0]+t[1]*t[1])}n.a=function(t,n){var e=o(t[1],t[0]),a=o(n[1],n[0]),c=function(t,n){return Object(r.g)(t[0]*n[1]-t[1]*n[0],t[0]*n[0]+t[1]*n[1])}(e,a),f=u(e)/u(a);return i([1,0,t[0][0],0,1,t[0][1]],i([f,0,0,0,f,0],i([Object(r.h)(c),Object(r.y)(c),0,-Object(r.y)(c),Object(r.h)(c),0],[1,0,-n[0][0],0,1,-n[0][1]])))}},function(t,n,e){"use strict";var r=e(0),i=e(1),o=e(53),u=e(74);n.a=function(t){t=t||function(t){var n=Object(r.geoCentroid)({type:"MultiPoint",coordinates:t});return Object(r.geoGnomonic)().scale(1).translate([0,0]).rotate([-n[0],-n[1]])};var n=u.a.map(function(n){return{face:n,project:t(n)}});return[-1,0,0,1,0,1,4,5].forEach(function(t,e){var r=n[t];r&&(r.children||(r.children=[])).push(n[e])}),Object(o.a)(n[0],function(t,e){return n[t<-i.s/2?e<0?6:4:t<0?e<0?2:0:t<i.s/2?e<0?3:1:e<0?7:5]}).scale(101.858).center([0,45])}},function(t,n,e){"use strict";var r=e(0),i=e(72),o=e(1),u=e(53),a=e(74),c=2/Object(o.B)(3);function f(t,n){var e=Object(i.a)(t,n);return[e[0]*c,e[1]]}f.invert=function(t,n){return i.a.invert(t/c,n)},n.a=function(t){t=t||function(t){var n=Object(r.geoCentroid)({type:"MultiPoint",coordinates:t});return Object(r.geoProjection)(f).translate([0,0]).scale(1).rotate(n[1]>0?[-n[0],0]:[180-n[0],180])};var n=a.a.map(function(n){return{face:n,project:t(n)}});return[-1,0,0,1,0,1,4,5].forEach(function(t,e){var r=n[t];r&&(r.children||(r.children=[])).push(n[e])}),Object(u.a)(n[0],function(t,e){return n[t<-o.s/2?e<0?6:4:t<0?e<0?2:0:t<o.s/2?e<0?3:1:e<0?7:5]}).scale(121.906).center([0,48.5904])}},function(t,n,e){"use strict";var r=e(0),i=e(1),o=e(53),u=e(74);function a(t,n){for(var e=0,r=t.length,i=0;e<r;++e)i+=t[e]*n[e];return i}function c(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function f(t){return[Object(i.g)(t[1],t[0])*i.j,Object(i.e)(Object(i.q)(-1,Object(i.r)(1,t[2])))*i.j]}function s(t){var n=t[0]*i.v,e=t[1]*i.v,r=Object(i.h)(e);return[r*Object(i.h)(n),r*Object(i.y)(n),Object(i.y)(e)]}n.a=function(t){t=t||function(t){var n=6===t.length?Object(r.geoCentroid)({type:"MultiPoint",coordinates:t}):t[0];return Object(r.geoGnomonic)().scale(1).translate([0,0]).rotate([-n[0],-n[1]])};var n=u.a.map(function(t){for(var n,e=t.map(s),r=e.length,i=e[r-1],o=[],u=0;u<r;++u)n=e[u],o.push(f([.9486832980505138*i[0]+.31622776601683794*n[0],.9486832980505138*i[1]+.31622776601683794*n[1],.9486832980505138*i[2]+.31622776601683794*n[2]]),f([.9486832980505138*n[0]+.31622776601683794*i[0],.9486832980505138*n[1]+.31622776601683794*i[1],.9486832980505138*n[2]+.31622776601683794*i[2]])),i=n;return o}),e=[],l=[-1,0,0,1,0,1,4,5];n.forEach(function(t,r){for(var i=u.a[r],o=i.length,a=e[r]=[],f=0;f<o;++f)n.push([i[f],t[(2*f+2)%(2*o)],t[(2*f+1)%(2*o)]]),l.push(r),a.push(c(s(t[(2*f+2)%(2*o)]),s(t[(2*f+1)%(2*o)])))});var h=n.map(function(n){return{project:t(n),face:n}});return l.forEach(function(t,n){var e=h[t];e&&(e.children||(e.children=[])).push(h[n])}),Object(o.a)(h[0],function(t,n){var r=Object(i.h)(n),o=[r*Object(i.h)(t),r*Object(i.y)(t),Object(i.y)(n)],u=t<-i.s/2?n<0?6:4:t<0?n<0?2:0:t<i.s/2?n<0?3:1:n<0?7:5,c=e[u];return h[a(c[0],o)<0?8+3*u:a(c[1],o)<0?8+3*u+1:a(c[2],o)<0?8+3*u+2:u]}).scale(110.625).center([0,45])}},function(t,n,e){"use strict";var r=e(0),i=e(299),o=e(300),u=e(301);function a(t,n){return{type:"FeatureCollection",features:t.features.map(function(t){return c(t,n)})}}function c(t,n){return{type:"Feature",id:t.id,properties:t.properties,geometry:f(t.geometry,n)}}function f(t,n){if(!t)return null;if("GeometryCollection"===t.type)return function(t,n){return{type:"GeometryCollection",geometries:t.geometries.map(function(t){return f(t,n)})}}(t,n);var e;switch(t.type){case"Point":case"MultiPoint":e=h;break;case"LineString":case"MultiLineString":e=p;break;case"Polygon":case"MultiPolygon":case"Sphere":e=v;break;default:return null}return Object(r.geoStream)(t,n(e)),e.result()}n.a=function(t,n){var e,r=n.stream;if(!r)throw new Error("invalid projection");switch(t&&t.type){case"Feature":e=c;break;case"FeatureCollection":e=a;break;default:e=f}return e(t,r)};var s=[],l=[],h={point:function(t,n){s.push([t,n])},result:function(){var t=s.length?s.length<2?{type:"Point",coordinates:s[0]}:{type:"MultiPoint",coordinates:s}:null;return s=[],t}},p={lineStart:i.a,point:function(t,n){s.push([t,n])},lineEnd:function(){s.length&&(l.push(s),s=[])},result:function(){var t=l.length?l.length<2?{type:"LineString",coordinates:l[0]}:{type:"MultiLineString",coordinates:l}:null;return l=[],t}},v={polygonStart:i.a,lineStart:i.a,point:function(t,n){s.push([t,n])},lineEnd:function(){var t=s.length;if(t){do{s.push(s[0].slice())}while(++t<4);l.push(s),s=[]}},polygonEnd:i.a,result:function(){if(!l.length)return null;var t=[],n=[];return l.forEach(function(e){Object(o.a)(e)?t.push([e]):n.push(e)}),n.forEach(function(n){var e=n[0];t.some(function(t){if(Object(u.a)(t[0],e))return t.push(n),!0})||t.push([n])}),l=[],t.length?t.length>1?{type:"MultiPolygon",coordinates:t}:{type:"Polygon",coordinates:t[0]}:null}}},function(t,n,e){"use strict";n.a=function(){}},function(t,n,e){"use strict";n.a=function(t){if((n=t.length)<4)return!1;for(var n,e=0,r=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++e<n;)r+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return r<=0}},function(t,n,e){"use strict";n.a=function(t,n){for(var e=n[0],r=n[1],i=!1,o=0,u=t.length,a=u-1;o<u;a=o++){var c=t[o],f=c[0],s=c[1],l=t[a],h=l[0],p=l[1];s>r^p>r&&e<(h-f)*(r-s)/(p-s)+f&&(i=!i)}return i}},function(t,n,e){"use strict";var r=e(133),i=e(75);n.a=function(){return Object(i.a)(r.b).scale(176.423)}},function(t,n,e){"use strict";n.a=function(t,n){if(!(0<=(n=+n)&&n<=20))throw new Error("invalid digits");function e(t){var e=t.length,r=2,i=new Array(e);for(i[0]=+t[0].toFixed(n),i[1]=+t[1].toFixed(n);r<e;)i[r]=t[r],++r;return i}function r(t){return t.map(e)}function i(t){return t.map(r)}function o(t){if(null==t)return t;var n;switch(t.type){case"GeometryCollection":n={type:"GeometryCollection",geometries:t.geometries.map(o)};break;case"Point":n={type:"Point",coordinates:e(t.coordinates)};break;case"MultiPoint":case"LineString":n={type:t.type,coordinates:r(t.coordinates)};break;case"MultiLineString":case"Polygon":n={type:t.type,coordinates:i(t.coordinates)};break;case"MultiPolygon":n={type:"MultiPolygon",coordinates:t.coordinates.map(i)};break;default:return t}return null!=t.bbox&&(n.bbox=t.bbox),n}function u(t){var n={type:"Feature",properties:t.properties,geometry:o(t.geometry)};return null!=t.id&&(n.id=t.id),null!=t.bbox&&(n.bbox=t.bbox),n}if(null!=t)switch(t.type){case"Feature":return u(t);case"FeatureCollection":var a={type:"FeatureCollection",features:t.features.map(u)};return null!=t.bbox&&(a.bbox=t.bbox),a;default:return o(t)}return t}},function(t,n,e){"use strict";n.b=o;var r=e(1),i=e(31);function o(t){var n=Object(r.y)(t);function e(e,i){var o=n?Object(r.F)(e*n/2)/n:e/2;if(!i)return[2*o,-t];var u=2*Object(r.f)(o*Object(r.y)(i)),a=1/Object(r.F)(i);return[Object(r.y)(u)*a,i+(1-Object(r.h)(u))*a-t]}return e.invert=function(e,i){if(Object(r.a)(i+=t)<r.k)return[n?2*Object(r.f)(n*e/2)/n:e,0];var o,u=e*e+i*i,a=0,c=10;do{var f=Object(r.F)(a),s=1/Object(r.h)(a),l=u-2*i*a+a*a;a-=o=(f*l+2*(a-i))/(2+l*s*s+2*(a-i)*f)}while(Object(r.a)(o)>r.k&&--c>0);var h=e*(f=Object(r.F)(a)),p=Object(r.F)(Object(r.a)(i)<Object(r.a)(a+1/f)?.5*Object(r.e)(h):.5*Object(r.b)(h)+r.s/4)/Object(r.y)(a);return[n?2*Object(r.f)(n*p)/n:2*p,a]},e}n.a=function(){return Object(i.a)(o).scale(131.215)}},function(t,n,e){"use strict";n.b=u;var r=e(0),i=e(1),o=[[.9986,-.062],[1,0],[.9986,.062],[.9954,.124],[.99,.186],[.9822,.248],[.973,.31],[.96,.372],[.9427,.434],[.9216,.4958],[.8962,.5571],[.8679,.6176],[.835,.6769],[.7986,.7346],[.7597,.7903],[.7186,.8435],[.6732,.8936],[.6213,.9394],[.5722,.9761],[.5322,1]];function u(t,n){var e,r=Object(i.r)(18,36*Object(i.a)(n)/i.s),u=Object(i.n)(r),a=r-u,c=(e=o[u])[0],f=e[1],s=(e=o[++u])[0],l=e[1],h=(e=o[Object(i.r)(19,++u)])[0],p=e[1];return[t*(s+a*(h-c)/2+a*a*(h-2*s+c)/2),(n>0?i.o:-i.o)*(l+a*(p-f)/2+a*a*(p-2*l+f)/2)]}o.forEach(function(t){t[1]*=1.0144}),u.invert=function(t,n){var e=n/i.o,r=90*e,u=Object(i.r)(18,Object(i.a)(r/5)),a=Object(i.q)(0,Object(i.n)(u));do{var c=o[a][1],f=o[a+1][1],s=o[Object(i.r)(19,a+2)][1],l=s-c,h=s-2*f+c,p=2*(Object(i.a)(e)-f)/l,v=h/l,d=p*(1-v*p*(1-2*v*p));if(d>=0||1===a){r=(n>=0?5:-5)*(d+u);var g,b=50;do{d=(u=Object(i.r)(18,Object(i.a)(r)/5))-(a=Object(i.n)(u)),c=o[a][1],f=o[a+1][1],s=o[Object(i.r)(19,a+2)][1],r-=(g=(n>=0?i.o:-i.o)*(f+d*(s-c)/2+d*d*(s-2*f+c)/2)-n)*i.j}while(Object(i.a)(g)>i.l&&--b>0);break}}while(--a>=0);var y=o[a][0],j=o[a+1][0],O=o[Object(i.r)(19,a+2)][0];return[t/(j+d*(O-y)/2+d*d*(O-2*j+y)/2),r*i.v]},n.a=function(){return Object(r.geoProjection)(u).scale(152.63)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=function(t){function n(n,e){var r=Object(i.h)(e),o=(t-1)/(t-r*Object(i.h)(n));return[o*r*Object(i.y)(n),o*Object(i.y)(e)]}return n.invert=function(n,e){var r=n*n+e*e,o=Object(i.B)(r),u=(t-Object(i.B)(1-r*(t+1)/(t-1)))/((t-1)/o+o/(t-1));return[Object(i.g)(n*u,o*Object(i.B)(1-u*u)),o?Object(i.e)(e*u/o):0]},n}(t);if(!n)return e;var r=Object(i.h)(n),o=Object(i.y)(n);function u(n,i){var u=e(n,i),a=u[1],c=a*o/(t-1)+r;return[u[0]*r/c,a/c]}return u.invert=function(n,i){var u=(t-1)/(t-1-i*o);return e.invert(u*n,u*i*r)},u}n.a=function(){var t=2,n=0,e=Object(r.geoProjectionMutator)(o),u=e(t,n);return u.distance=function(r){return arguments.length?e(t=+r,n):t},u.tilt=function(r){return arguments.length?e(t,n=r*i.v):n*i.j},u.scale(432.147).clipAngle(Object(i.b)(1/t)*i.j-1e-6)}},function(t,n,e){"use strict";var r=1e4,i=-180,o=i+1e-4,u=180,a=u-1e-4,c=-90,f=c+1e-4,s=90,l=s-1e-4;function h(t){return t.length>0}function p(t){return t===c||t===s?[0,t]:[i,function(t){return Math.floor(t*r)/r}(t)]}function v(t){var n=t[0],e=t[1],r=!1;return n<=o?(n=i,r=!0):n>=a&&(n=u,r=!0),e<=f?(e=c,r=!0):e>=l&&(e=s,r=!0),r?[n,e]:t}function d(t){return t.map(v)}function g(t,n,e){for(var r=0,i=t.length;r<i;++r){var u=t[r].slice();e.push({index:-1,polygon:n,ring:u});for(var c=0,s=u.length;c<s;++c){var h=u[c],d=h[0],g=h[1];if(d<=o||d>=a||g<=f||g>=l){u[c]=v(h);for(var b=c+1;b<s;++b){var y=u[b],j=y[0],O=y[1];if(j>o&&j<a&&O>f&&O<l)break}if(b===c+1)continue;if(c){var _={index:-1,polygon:n,ring:u.slice(0,c+1)};_.ring[_.ring.length-1]=p(g),e[e.length-1]=_}else e.pop();if(b>=s)break;e.push({index:-1,polygon:n,ring:u=u.slice(b-1)}),u[0]=p(u[0][1]),c=-1,s=u.length}}}}function b(t){var n,e,r,i,o,u,a=t.length,c={},f={};for(n=0;n<a;++n)r=(e=t[n]).ring[0],o=e.ring[e.ring.length-1],r[0]!==o[0]||r[1]!==o[1]?(e.index=n,c[r]=f[o]=e):(e.polygon.push(e.ring),t[n]=null);for(n=0;n<a;++n)if(e=t[n]){if(r=e.ring[0],o=e.ring[e.ring.length-1],i=f[r],u=c[o],delete c[r],delete f[o],r[0]===o[0]&&r[1]===o[1]){e.polygon.push(e.ring);continue}i?(delete f[r],delete c[i.ring[0]],i.ring.pop(),t[i.index]=null,e={index:-1,polygon:i.polygon,ring:i.ring.concat(e.ring)},i===u?e.polygon.push(e.ring):(e.index=a++,t.push(c[e.ring[0]]=f[e.ring[e.ring.length-1]]=e))):u?(delete c[o],delete f[u.ring[u.ring.length-1]],e.ring.pop(),e={index:a++,polygon:u.polygon,ring:e.ring.concat(u.ring)},t[u.index]=null,t.push(c[e.ring[0]]=f[e.ring[e.ring.length-1]]=e)):(e.ring.push(e.ring[0]),e.polygon.push(e.ring))}}function y(t){var n={type:"Feature",geometry:j(t.geometry)};return null!=t.id&&(n.id=t.id),null!=t.bbox&&(n.bbox=t.bbox),null!=t.properties&&(n.properties=t.properties),n}function j(t){if(null==t)return t;var n,e,r,i;switch(t.type){case"GeometryCollection":n={type:"GeometryCollection",geometries:t.geometries.map(j)};break;case"Point":n={type:"Point",coordinates:v(t.coordinates)};break;case"MultiPoint":case"LineString":n={type:t.type,coordinates:d(t.coordinates)};break;case"MultiLineString":n={type:"MultiLineString",coordinates:t.coordinates.map(d)};break;case"Polygon":var o=[];g(t.coordinates,o,e=[]),b(e),n={type:"Polygon",coordinates:o};break;case"MultiPolygon":e=[],r=-1,i=t.coordinates.length;for(var u=new Array(i);++r<i;)g(t.coordinates[r],u[r]=[],e);b(e),n={type:"MultiPolygon",coordinates:u.filter(h)};break;default:return t}return null!=t.bbox&&(n.bbox=t.bbox),n}n.a=function(t){if(null==t)return t;switch(t.type){case"Feature":return y(t);case"FeatureCollection":var n={type:"FeatureCollection",features:t.features.map(y)};return null!=t.bbox&&(n.bbox=t.bbox),n;default:return j(t)}}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=Object(i.F)(n/2),r=Object(i.y)(i.u*e);return[t*(.74482-.34588*r*r),1.70711*e]}o.invert=function(t,n){var e=n/1.70711,r=Object(i.y)(i.u*e);return[t/(.74482-.34588*r*r),2*Object(i.f)(e)]},n.a=function(){return Object(r.geoProjection)(o).scale(146.153)}},function(t,n,e){"use strict";n.b=u,n.c=function(){return a([-158,21.5],[-77,39]).clipAngle(60).scale(400)},n.a=a;var r=e(0),i=e(1),o=e(138);function u(t){var n=Object(i.h)(t);function e(t,e){var i=Object(r.geoGnomonicRaw)(t,e);return i[0]*=n,i}return e.invert=function(t,e){return r.geoGnomonicRaw.invert(t/n,e)},e}function a(t,n){return Object(o.a)(u,t,n)}},function(t,n,e){"use strict";n.b=u,n.c=function(){return a([-158,21.5],[-77,39]).clipAngle(130).scale(122.571)},n.a=a;var r=e(0),i=e(1),o=e(138);function u(t){if(!(t*=2))return r.geoAzimuthalEquidistantRaw;var n=-t/2,e=-n,o=t*t,u=Object(i.F)(e),a=.5/Object(i.y)(e);function c(r,u){var a=Object(i.b)(Object(i.h)(u)*Object(i.h)(r-n)),c=Object(i.b)(Object(i.h)(u)*Object(i.h)(r-e));return[((a*=a)-(c*=c))/(2*t),(u<0?-1:1)*Object(i.B)(4*o*c-(o-a+c)*(o-a+c))/(2*t)]}return c.invert=function(t,r){var o,c,f=r*r,s=Object(i.h)(Object(i.B)(f+(o=t+n)*o)),l=Object(i.h)(Object(i.B)(f+(o=t+e)*o));return[Object(i.g)(c=s-l,o=(s+l)*u),(r<0?-1:1)*Object(i.b)(Object(i.B)(o*o+c*c)*a)]},c}function a(t,n){return Object(o.a)(u,t,n)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){if(Object(i.a)(n)<i.k)return[t,0];var e=Object(i.a)(n/i.o),r=Object(i.e)(e);if(Object(i.a)(t)<i.k||Object(i.a)(Object(i.a)(n)-i.o)<i.k)return[0,Object(i.x)(n)*i.s*Object(i.F)(r/2)];var o=Object(i.h)(r),u=Object(i.a)(i.s/t-t/i.s)/2,a=u*u,c=o/(e+o-1),f=c*(2/e-1),s=f*f,l=s+a,h=c-s,p=a+c;return[Object(i.x)(t)*i.s*(u*h+Object(i.B)(a*h*h-l*(c*c-s)))/l,Object(i.x)(n)*i.s*(f*p-u*Object(i.B)((a+1)*l-p*p))/l]}o.invert=function(t,n){if(Object(i.a)(n)<i.k)return[t,0];if(Object(i.a)(t)<i.k)return[0,i.o*Object(i.y)(2*Object(i.f)(n/i.s))];var e=(t/=i.s)*t,r=(n/=i.s)*n,o=e+r,u=o*o,a=-Object(i.a)(n)*(1+o),c=a-2*r+e,f=-2*a+1+2*r+u,s=r/f+(2*c*c*c/(f*f*f)-9*a*c/(f*f))/27,l=(a-c*c/(3*f))/f,h=2*Object(i.B)(-l/3),p=Object(i.b)(3*s/(l*h))/3;return[i.s*(o-1+Object(i.B)(1+2*(e-r)+u))/(2*t),Object(i.x)(n)*i.s*(-h*Object(i.h)(p+i.s/3)-c/(3*f))]},n.a=function(){return Object(r.geoProjection)(o).scale(79.4183)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){if(Object(i.a)(n)<i.k)return[t,0];var e=Object(i.a)(n/i.o),r=Object(i.e)(e);if(Object(i.a)(t)<i.k||Object(i.a)(Object(i.a)(n)-i.o)<i.k)return[0,Object(i.x)(n)*i.s*Object(i.F)(r/2)];var o=Object(i.h)(r),u=Object(i.a)(i.s/t-t/i.s)/2,a=u*u,c=o*(Object(i.B)(1+a)-u*o)/(1+a*e*e);return[Object(i.x)(t)*i.s*c,Object(i.x)(n)*i.s*Object(i.B)(1-c*(2*u+c))]}o.invert=function(t,n){if(!t)return[0,i.o*Object(i.y)(2*Object(i.f)(n/i.s))];var e=Object(i.a)(t/i.s),r=(1-e*e-(n/=i.s)*n)/(2*e),o=r*r,u=Object(i.B)(o+1);return[Object(i.x)(t)*i.s*(u-r),Object(i.x)(n)*i.o*Object(i.y)(2*Object(i.g)(Object(i.B)((1-2*r*e)*(r+u)-e),Object(i.B)(u+r+e)))]},n.a=function(){return Object(r.geoProjection)(o).scale(79.4183)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){if(Object(i.a)(n)<i.k)return[t,0];var e=n/i.o,r=Object(i.e)(e);if(Object(i.a)(t)<i.k||Object(i.a)(Object(i.a)(n)-i.o)<i.k)return[0,i.s*Object(i.F)(r/2)];var o=(i.s/t-t/i.s)/2,u=e/(1+Object(i.h)(r));return[i.s*(Object(i.x)(t)*Object(i.B)(o*o+1-u*u)-o),i.s*u]}o.invert=function(t,n){if(!n)return[t,0];var e=n/i.s,r=(i.s*i.s*(1-e*e)-t*t)/(2*i.s*t);return[t?i.s*(Object(i.x)(t)*Object(i.B)(r*r+1)-r):0,i.o*Object(i.y)(2*Object(i.f)(e))]},n.a=function(){return Object(r.geoProjection)(o).scale(79.4183)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){if(!n)return[t,0];var e=Object(i.a)(n);if(!t||e===i.o)return[0,n];var r=e/i.o,o=r*r,u=(8*r-o*(o+2)-5)/(2*o*(r-1)),a=u*u,c=r*u,f=o+a+2*c,s=r+3*u,l=t/i.o,h=l+1/l,p=Object(i.x)(Object(i.a)(t)-i.o)*Object(i.B)(h*h-4),v=p*p,d=f*(o+a*v-1)+(1-o)*(o*(s*s+4*a)+12*c*a+4*a*a),g=(p*(f+a-1)+2*Object(i.B)(d))/(4*f+v);return[Object(i.x)(t)*i.o*g,Object(i.x)(n)*i.o*Object(i.B)(1+p*Object(i.a)(g)-g*g)]}o.invert=function(t,n){var e;if(!t||!n)return[t,n];n/=i.s;var r=Object(i.x)(t)*t/i.o,o=(r*r-1+4*n*n)/Object(i.a)(r),u=o*o,a=2*n,c=50;do{var f=a*a,s=(8*a-f*(f+2)-5)/(2*f*(a-1)),l=(3*a-f*a-10)/(2*f*a),h=s*s,p=a*s,v=a+s,d=v*v,g=a+3*s,b=d*(f+h*u-1)+(1-f)*(f*(g*g+4*h)+h*(12*p+4*h)),y=-2*v*(4*p*h+(1-4*f+3*f*f)*(1+l)+h*(14*f-6-u+(8*f-8-2*u)*l)+p*(12*f-8+(10*f-10-u)*l)),j=Object(i.B)(b);a-=e=(o*(d+h-1)+2*j-r*(4*d+u))/(o*(2*s*l+2*v*(1+l))+y/j-8*v*(o*(-1+h+d)+2*j)*(1+l)/(u+4*d))}while(e>i.k&&--c>0);return[Object(i.x)(t)*(Object(i.B)(o*o+4)+o)*i.s/4,i.o*a]},n.a=function(){return Object(r.geoProjection)(o).scale(127.16)}},function(t,n,e){"use strict";e.d(n,"b",function(){return c});var r=e(0),i=e(1),o=e(21),u=4*i.s+3*Object(i.B)(3),a=2*Object(i.B)(2*i.s*Object(i.B)(3)/u),c=Object(o.b)(a*Object(i.B)(3)/i.s,a,u/6);n.a=function(){return Object(r.geoProjection)(c).scale(176.84)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){return[t*Object(i.B)(1-3*n*n/(i.s*i.s)),n]}o.invert=function(t,n){return[t/Object(i.B)(1-3*n*n/(i.s*i.s)),n]},n.a=function(){return Object(r.geoProjection)(o).scale(152.63)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=.90631*Object(i.y)(n),r=Object(i.B)(1-e*e),o=Object(i.B)(2/(1+r*Object(i.h)(t/=3)));return[2.66723*r*o*Object(i.y)(t),1.24104*e*o]}o.invert=function(t,n){var e=t/2.66723,r=n/1.24104,o=Object(i.B)(e*e+r*r),u=2*Object(i.e)(o/2);return[3*Object(i.g)(t*Object(i.F)(u),2.66723*o),o&&Object(i.e)(n*Object(i.y)(u)/(1.24104*.90631*o))]},n.a=function(){return Object(r.geoProjection)(o).scale(172.632)}},function(t,n,e){"use strict";n.b=o;var r=e(0),i=e(1);function o(t,n){var e=Object(i.h)(n),r=Object(i.h)(t)*e,o=1-r,u=Object(i.h)(t=Object(i.g)(Object(i.y)(t)*e,-Object(i.y)(n))),a=Object(i.y)(t);return[a*(e=Object(i.B)(1-r*r))-u*o,-u*e-a*o]}o.invert=function(t,n){var e=(t*t+n*n)/-2,r=Object(i.B)(-e*(2+e)),o=n*e+t*r,u=t*e-n*r,a=Object(i.B)(u*u+o*o);return[Object(i.g)(r*o,a*(1+e)),a?-Object(i.e)(r*u/a):0]},n.a=function(){return Object(r.geoProjection)(o).rotate([0,-90,45]).scale(124.75).clipAngle(179.999)}},function(t,n,e){"use strict";n.b=u;var r=e(0),i=e(129),o=e(1);function u(t,n){var e=Object(i.a)(t,n);return[(e[0]+t/o.o)/2,(e[1]+n)/2]}u.invert=function(t,n){var e=t,r=n,i=25;do{var u,a=Object(o.h)(r),c=Object(o.y)(r),f=Object(o.y)(2*r),s=c*c,l=a*a,h=Object(o.y)(e),p=Object(o.h)(e/2),v=Object(o.y)(e/2),d=v*v,g=1-l*p*p,b=g?Object(o.b)(a*p)*Object(o.B)(u=1/g):u=0,y=.5*(2*b*a*v+e/o.o)-t,j=.5*(b*c+r)-n,O=.5*u*(l*d+b*a*p*s)+.5/o.o,_=u*(h*f/4-b*c*v),m=.125*u*(f*v-b*c*l*h),w=.5*u*(s*p+b*d*a)+.5,x=_*m-w*O,E=(j*_-y*w)/x,M=(y*m-j*O)/x;e-=E,r-=M}while((Object(o.a)(E)>o.k||Object(o.a)(M)>o.k)&&--i>0);return[e,r]},n.a=function(){return Object(r.geoProjection)(u).scale(158.837)}},function(t,n,e){var r=e(11),i=e(54),o=e(140);t.exports=function(t,n){var e=void 0;if(r(n)&&(e=n),i(n)&&(e=function(t){return o(t,n)}),e)for(var u=0;u<t.length;u+=1)if(e(t[u]))return t[u];return null}},function(t,n){var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t){return"object"===(void 0===t?"undefined":e(t))&&null!==t}},function(t,n,e){!function(t,n,e){"use strict";var r=1e-6;function i(){}var o=1/0,u=o,a=-o,c=a,f={point:function(t,n){t<o&&(o=t),t>a&&(a=t),n<u&&(u=n),n>c&&(c=n)},lineStart:i,lineEnd:i,polygonStart:i,polygonEnd:i,result:function(){var t=[[o,u],[a,c]];return a=c=-(u=o=1/0),t}};function s(t,e,r){var i=e[1][0]-e[0][0],o=e[1][1]-e[0][1],u=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=u&&t.clipExtent(null),n.geoStream(r,t.stream(f));var a=f.result(),c=Math.min(i/(a[1][0]-a[0][0]),o/(a[1][1]-a[0][1])),s=+e[0][0]+(i-c*(a[1][0]+a[0][0]))/2,l=+e[0][1]+(o-c*(a[1][1]+a[0][1]))/2;return null!=u&&t.clipExtent(u),t.scale(150*c).translate([s,l])}function l(t,n,e){return s(t,[[0,0],n],e)}t.geoAlbersUsa=function(){var t,i,o,u,a,c,f=n.geoAlbers(),h=n.geoConicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),p=n.geoConicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),v={point:function(t,n){c=[t,n]}};function d(t){var n=t[0],e=t[1];return c=null,o.point(n,e),c||(u.point(n,e),c)||(a.point(n,e),c)}function g(){return t=i=null,d}return d.invert=function(t){var n=f.scale(),e=f.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?h:i>=.166&&i<.234&&r>=-.214&&r<-.115?p:f).invert(t)},d.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([f.stream(i=n),h.stream(n),p.stream(n)])},d.precision=function(t){return arguments.length?(f.precision(t),h.precision(t),p.precision(t),g()):f.precision()},d.scale=function(t){return arguments.length?(f.scale(t),h.scale(.35*t),p.scale(t),d.translate(f.translate())):f.scale()},d.translate=function(t){if(!arguments.length)return f.translate();var n=f.scale(),e=+t[0],i=+t[1];return o=f.translate(t).clipExtent([[e-.455*n,i-.238*n],[e+.455*n,i+.238*n]]).stream(v),u=h.translate([e-.307*n,i+.201*n]).clipExtent([[e-.425*n+r,i+.12*n+r],[e-.214*n-r,i+.234*n-r]]).stream(v),a=p.translate([e-.205*n,i+.212*n]).clipExtent([[e-.214*n+r,i+.166*n+r],[e-.115*n-r,i+.234*n-r]]).stream(v),g()},d.fitExtent=function(t,n){return s(d,t,n)},d.fitSize=function(t,n){return l(d,t,n)},d.drawCompositionBorders=function(t){var n=f([-102.91,26.3]),e=f([-104,27.5]),r=f([-108,29.1]),i=f([-110,29.1]),o=f([-110,26.7]),u=f([-112.8,27.6]),a=f([-114.3,30.6]),c=f([-119.3,30.1]);t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.moveTo(o[0],o[1]),t.lineTo(u[0],u[1]),t.lineTo(a[0],a[1]),t.lineTo(c[0],c[1])},d.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},d.scale(1070)},t.geoAlbersUsaTerritories=function(){var t,i,o,u,a,c,f,h,p,v=n.geoAlbers(),d=n.geoConicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),g=n.geoConicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),b=n.geoConicEqualArea().rotate([66,0]).center([0,18]).parallels([8,18]),y=n.geoEquirectangular().rotate([173,14]),j=n.geoEquirectangular().rotate([-145,-16.8]),O={point:function(t,n){p=[t,n]}};function _(t){var n=t[0],e=t[1];return p=null,o.point(n,e),p||(u.point(n,e),p)||(a.point(n,e),p)||(c.point(n,e),p)||(f.point(n,e),p)||(h.point(n,e),p)}function m(){return t=i=null,_}return _.invert=function(t){var n=v.scale(),e=v.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?d:i>=.166&&i<.234&&r>=-.214&&r<-.115?g:i>=.2064&&i<.2413&&r>=.312&&r<.385?b:i>=.09&&i<.1197&&r>=-.4243&&r<-.3232?y:i>=-.0518&&i<.0895&&r>=-.4243&&r<-.3824?j:v).invert(t)},_.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([v.stream(i=n),d.stream(n),g.stream(n),b.stream(n),y.stream(n),j.stream(n)])},_.precision=function(t){return arguments.length?(v.precision(t),d.precision(t),g.precision(t),b.precision(t),y.precision(t),j.precision(t),m()):v.precision()},_.scale=function(t){return arguments.length?(v.scale(t),d.scale(.35*t),g.scale(t),b.scale(t),y.scale(2*t),j.scale(t),_.translate(v.translate())):v.scale()},_.translate=function(t){if(!arguments.length)return v.translate();var n=v.scale(),e=+t[0],i=+t[1];return o=v.translate(t).clipExtent([[e-.455*n,i-.238*n],[e+.455*n,i+.238*n]]).stream(O),u=d.translate([e-.307*n,i+.201*n]).clipExtent([[e-.425*n+r,i+.12*n+r],[e-.214*n-r,i+.233*n-r]]).stream(O),a=g.translate([e-.205*n,i+.212*n]).clipExtent([[e-.214*n+r,i+.166*n+r],[e-.115*n-r,i+.233*n-r]]).stream(O),c=b.translate([e+.35*n,i+.224*n]).clipExtent([[e+.312*n+r,i+.2064*n+r],[e+.385*n-r,i+.233*n-r]]).stream(O),f=y.translate([e-.492*n,i+.09*n]).clipExtent([[e-.4243*n+r,i+.0903*n+r],[e-.3233*n-r,i+.1197*n-r]]).stream(O),h=j.translate([e-.408*n,i+.018*n]).clipExtent([[e-.4244*n+r,i-.0519*n+r],[e-.3824*n-r,i+.0895*n-r]]).stream(O),m()},_.fitExtent=function(t,n){return s(_,t,n)},_.fitSize=function(t,n){return l(_,t,n)},_.drawCompositionBorders=function(t){var n=v([-110.4641,28.2805]),e=v([-104.0597,28.9528]),r=v([-103.7049,25.1031]),i=v([-109.8337,24.4531]),o=v([-124.4745,28.1407]),u=v([-110.931,30.8844]),a=v([-109.8337,24.4531]),c=v([-122.4628,21.8562]),f=v([-76.8579,25.1544]),s=v([-72.429,24.2097]),l=v([-72.8265,22.7056]),h=v([-77.1852,23.6392]),p=v([-125.0093,29.7791]),d=v([-118.5193,31.3262]),g=v([-118.064,29.6912]),b=v([-124.4369,28.169]),y=v([-128.1314,37.4582]),j=v([-125.2132,38.214]),O=v([-122.3616,30.5115]),_=v([-125.0315,29.8211]);t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),t.moveTo(o[0],o[1]),t.lineTo(u[0],u[1]),t.lineTo(a[0],a[1]),t.lineTo(a[0],a[1]),t.lineTo(c[0],c[1]),t.closePath(),t.moveTo(f[0],f[1]),t.lineTo(s[0],s[1]),t.lineTo(l[0],l[1]),t.lineTo(l[0],l[1]),t.lineTo(h[0],h[1]),t.closePath(),t.moveTo(p[0],p[1]),t.lineTo(d[0],d[1]),t.lineTo(g[0],g[1]),t.lineTo(g[0],g[1]),t.lineTo(b[0],b[1]),t.closePath(),t.moveTo(y[0],y[1]),t.lineTo(j[0],j[1]),t.lineTo(O[0],O[1]),t.lineTo(O[0],O[1]),t.lineTo(_[0],_[1]),t.closePath()},_.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},_.scale(1070)},t.geoConicConformalSpain=function(){var t,i,o,u,a,c=n.geoConicConformal().rotate([5,-38.6]).parallels([0,60]),f=n.geoConicConformal().rotate([5,-38.6]).parallels([0,60]),h={point:function(t,n){a=[t,n]}};function p(t){var n=t[0],e=t[1];return a=null,o.point(n,e),a||(u.point(n,e),a)}function v(){return t=i=null,p}return p.invert=function(t){var n=c.scale(),e=c.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.05346&&i<.0897&&r>=-.13388&&r<-.0322?f:c).invert(t)},p.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([c.stream(i=n),f.stream(n)])},p.precision=function(t){return arguments.length?(c.precision(t),f.precision(t),v()):c.precision()},p.scale=function(t){return arguments.length?(c.scale(t),f.scale(t),p.translate(c.translate())):c.scale()},p.translate=function(t){if(!arguments.length)return c.translate();var n=c.scale(),e=+t[0],i=+t[1];return o=c.translate(t).clipExtent([[e-.06857*n,i-.1288*n],[e+.13249*n,i+.06*n]]).stream(h),u=f.translate([e+.1*n,i-.094*n]).clipExtent([[e-.1331*n+r,i+.053457*n+r],[e-.0354*n-r,i+.08969*n-r]]).stream(h),v()},p.fitExtent=function(t,n){return s(p,t,n)},p.fitSize=function(t,n){return l(p,t,n)},p.drawCompositionBorders=function(t){var n=c([-14.034675,34.965007]),e=c([-7.4208899,35.536988]),r=c([-7.3148275,33.54359]);t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1])},p.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},p.scale(2700)},t.geoConicConformalPortugal=function(){var t,i,o,u,a,c,f=n.geoConicConformal().rotate([10,-39.3]).parallels([0,60]),h=n.geoConicConformal().rotate([17,-32.7]).parallels([0,60]),p=n.geoConicConformal().rotate([27.8,-38.6]).parallels([0,60]),v={point:function(t,n){c=[t,n]}};function d(t){var n=t[0],e=t[1];return c=null,o.point(n,e),c||(u.point(n,e),c)||(a.point(n,e),c)}function g(){return t=i=null,d}return d.invert=function(t){var n=f.scale(),e=f.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.0093&&i<.03678&&r>=-.03875&&r<-.0116?h:i>=-.0412&&i<.0091&&r>=-.07782&&r<-.01166?p:f).invert(t)},d.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([f.stream(i=n),h.stream(n),p.stream(n)])},d.precision=function(t){return arguments.length?(f.precision(t),h.precision(t),p.precision(t),g()):f.precision()},d.scale=function(t){return arguments.length?(f.scale(t),h.scale(t),p.scale(.6*t),d.translate(f.translate())):f.scale()},d.translate=function(t){if(!arguments.length)return f.translate();var n=f.scale(),e=+t[0],i=+t[1];return o=f.translate(t).clipExtent([[e-.0115*n,i-.1138*n],[e+.2105*n,i+.0673*n]]).stream(v),u=h.translate([e-.0265*n,i+.025*n]).clipExtent([[e-.0388*n+r,i+.0093*n+r],[e-.0116*n-r,i+.0368*n-r]]).stream(v),a=p.translate([e-.045*n,i+-.02*n]).clipExtent([[e-.0778*n+r,i-.0413*n+r],[e-.0117*n-r,i+.0091*n-r]]).stream(v),g()},d.fitExtent=function(t,n){return s(d,t,n)},d.fitSize=function(t,n){return l(d,t,n)},d.drawCompositionBorders=function(t){var n=f([-12.8351,38.7113]),e=f([-10.8482,38.7633]),r=f([-10.8181,37.2072]),i=f([-12.7345,37.1573]),o=f([-16.0753,41.4436]),u=f([-10.9168,41.6861]),a=f([-10.8557,38.7747]),c=f([-15.6728,38.5505]);t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),t.moveTo(o[0],o[1]),t.lineTo(u[0],u[1]),t.lineTo(a[0],a[1]),t.lineTo(a[0],a[1]),t.lineTo(c[0],c[1]),t.closePath()},d.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},d.scale(4200)},t.geoMercatorEcuador=function(){var t,i,o,u,a,c=n.geoMercator().rotate([80,1.5]),f=n.geoMercator().rotate([90.73,1]),h={point:function(t,n){a=[t,n]}};function p(t){var n=t[0],e=t[1];return a=null,o.point(n,e),a||(u.point(n,e),a)}function v(){return t=i=null,p}return p.invert=function(t){var n=c.scale(),e=c.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=-.0676&&i<-.026&&r>=-.0857&&r<-.0263?f:c).invert(t)},p.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([c.stream(i=n),f.stream(n)])},p.precision=function(t){return arguments.length?(c.precision(t),f.precision(t),v()):c.precision()},p.scale=function(t){return arguments.length?(c.scale(t),f.scale(t),p.translate(c.translate())):c.scale()},p.translate=function(t){if(!arguments.length)return c.translate();var n=c.scale(),e=+t[0],i=+t[1];return o=c.translate(t).clipExtent([[e-.0262*n,i-.0734*n],[e+.1741*n,i+.079*n]]).stream(h),u=f.translate([e-.06*n,i-.04*n]).clipExtent([[e-.0857*n+r,i-.0676*n+r],[e-.0263*n-r,i-.026*n-r]]).stream(h),v()},p.fitExtent=function(t,n){return s(p,t,n)},p.fitSize=function(t,n){return l(p,t,n)},p.drawCompositionBorders=function(t){var n=c([-84.9032,2.3757]),e=c([-81.5047,2.3708]),r=c([-81.5063,-.01]),i=c([-84.9086,-.005]);t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath()},p.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},p.scale(3500)},t.geoTransverseMercatorChile=function(){var t,i,o,u,a,c,f,h=n.geoTransverseMercator().rotate([72,37]),p=n.geoStereographic().rotate([72,0]),v=n.geoMercator().rotate([80,33.5]),d=n.geoMercator().rotate([110,25]),g={point:function(t,n){f=[t,n]}};function b(t){var n=t[0],e=t[1];return f=null,o.point(n,e),f||(u.point(n,e),f)||(a.point(n,e),f)||(c.point(n,e),f)}function y(){return t=i=null,b}return b.invert=function(t){var n=h.scale(),e=h.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.2582&&i<.32&&r>=-.1036&&r<-.087?p:i>=-.01298&&i<.0133&&r>=-.11396&&r<-.05944?v:i>=.01539&&i<.03911&&r>=-.089&&r<-.0588?d:h).invert(t)},b.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([h.stream(i=n),p.stream(n),v.stream(n),d.stream(n)])},b.precision=function(t){return arguments.length?(h.precision(t),p.precision(t),v.precision(t),d.precision(t),y()):h.precision()},b.scale=function(t){return arguments.length?(h.scale(t),p.scale(.15*t),v.scale(1.5*t),d.scale(1.5*t),b.translate(h.translate())):h.scale()},b.translate=function(t){if(!arguments.length)return h.translate();var n=h.scale(),e=+t[0],i=+t[1];return o=h.translate(t).clipExtent([[e-.059*n,i-.3835*n],[e+.4498*n,i+.3375*n]]).stream(g),u=p.translate([e-.087*n,i+.17*n]).clipExtent([[e-.1166*n+r,i+.2582*n+r],[e-.06*n-r,i+.32*n-r]]).stream(g),a=v.translate([e-.092*n,i-0*n]).clipExtent([[e-.114*n+r,i-.013*n+r],[e-.0594*n-r,i+.0133*n-r]]).stream(g),c=d.translate([e-.089*n,i-.0265*n]).clipExtent([[e-.089*n+r,i+.0154*n+r],[e-.0588*n-r,i+.0391*n-r]]).stream(g),y()},b.fitExtent=function(t,n){return s(b,t,n)},b.fitSize=function(t,n){return l(b,t,n)},b.drawCompositionBorders=function(t){var n=h([-82.6999,-51.3043]),e=h([-77.5442,-51.6631]),r=h([-78.0254,-55.186]),i=h([-83.6106,-54.7785]),o=h([-80.0638,-35.984]),u=h([-76.2153,-36.1811]),a=h([-76.2994,-37.6839]),c=h([-80.2231,-37.4757]),f=h([-78.442,-37.706]),s=h([-76.263,-37.8054]),l=h([-76.344,-39.1595]),p=h([-78.5638,-39.0559]);t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),t.moveTo(o[0],o[1]),t.lineTo(u[0],u[1]),t.lineTo(a[0],a[1]),t.lineTo(a[0],a[1]),t.lineTo(c[0],c[1]),t.closePath(),t.moveTo(f[0],f[1]),t.lineTo(s[0],s[1]),t.lineTo(l[0],l[1]),t.lineTo(l[0],l[1]),t.lineTo(p[0],p[1]),t.closePath()},b.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},b.scale(700)},t.geoConicEquidistantJapan=function(){var t,i,o,u,a,c,f=n.geoConicEquidistant().rotate([-136,-22]).parallels([40,34]),h=n.geoConicEquidistant().rotate([-146,-26]).parallels([40,34]),p=n.geoConicEquidistant().rotate([-126,-19]).parallels([40,34]),v={point:function(t,n){c=[t,n]}};function d(t){var n=t[0],e=t[1];return c=null,o.point(n,e),c||(u.point(n,e),c)||(a.point(n,e),c)}function g(){return t=i=null,d}return d.invert=function(t){var n=f.scale(),e=f.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=-.10925&&i<-.02701&&r>=-.135&&r<-.0397?h:i>=.04713&&i<.11138&&r>=-.03986&&r<.051?p:f).invert(t)},d.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([f.stream(i=n),h.stream(n),p.stream(n)])},d.precision=function(t){return arguments.length?(f.precision(t),h.precision(t),p.precision(t),g()):f.precision()},d.scale=function(t){return arguments.length?(f.scale(t),h.scale(t),p.scale(.7*t),d.translate(f.translate())):f.scale()},d.translate=function(t){if(!arguments.length)return f.translate();var n=f.scale(),e=+t[0],i=+t[1];return o=f.translate(t).clipExtent([[e-.1352*n,i-.1091*n],[e+.117*n,i+.098*n]]).stream(v),u=h.translate([e-.0425*n,i-.005*n]).clipExtent([[e-.135*n+r,i-.1093*n+r],[e-.0397*n-r,i-.027*n-r]]).stream(v),a=p.translate(t).clipExtent([[e-.0399*n+r,i+.0471*n+r],[e+.051*n-r,i+.1114*n-r]]).stream(v),g()},d.fitExtent=function(t,n){return s(d,t,n)},d.fitSize=function(t,n){return l(d,t,n)},d.drawCompositionBorders=function(t){var n=f([126.01320483689143,41.621090310215585]),e=f([133.04304387025903,42.15087523707186]),r=f([133.3021766080688,37.43975444725098]),i=f([126.87889168628224,36.95488945159779]),o=f([132.9,29.8]),u=f([134,33]),a=f([139.3,33.2]),c=f([139.16,30.5]);t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),t.moveTo(o[0],o[1]),t.lineTo(u[0],u[1]),t.lineTo(a[0],a[1]),t.lineTo(c[0],c[1])},d.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},d.scale(2200)},t.geoConicConformalFrance=function(){var t,i,o,u,a,c,f,h,p,v,d,g,b,y,j,O=n.geoConicConformal().rotate([-3,-46.2]).parallels([0,60]),_=n.geoMercator().center([-53.2,3.9]),m=n.geoMercator().center([-61.03,14.67]),w=n.geoMercator().center([-61.46,16.14]),x=n.geoMercator().center([-62.85,17.92]),E=n.geoMercator().center([-56.23,46.93]),M=n.geoMercator().center([45.16,-12.8]),T=n.geoMercator().center([55.52,-21.13]),S=n.geoMercator().center([165.8,-21.07]),k=n.geoMercator().center([-178.1,-14.3]),C=n.geoMercator().center([-150.55,-17.11]),P=n.geoMercator().center([-150.55,-17.11]),N={point:function(t,n){j=[t,n]}};function R(t){var n=t[0],e=t[1];return j=null,o.point(n,e),j||(u.point(n,e),j)||(a.point(n,e),j)||(c.point(n,e),j)||(f.point(n,e),j)||(h.point(n,e),j)||(p.point(n,e),j)||(v.point(n,e),j)||(d.point(n,e),j)||(g.point(n,e),j)||(b.point(n,e),j)||(y.point(n,e),j)}function B(){return t=i=null,R}return R.invert=function(t){var n=O.scale(),e=O.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.029&&i<.0864&&r>=-.14&&r<-.0996?_:i>=0&&i<.029&&r>=-.14&&r<-.0996?m:i>=-.032&&i<0&&r>=-.14&&r<-.0996?w:i>=-.052&&i<-.032&&r>=-.14&&r<-.0996?x:i>=-.076&&i<.052&&r>=-.14&&r<-.0996?E:i>=-.076&&i<-.052&&r>=.0967&&r<.1371?M:i>=-.052&&i<-.02&&r>=.0967&&r<.1371?T:i>=-.02&&i<.012&&r>=.0967&&r<.1371?S:i>=.012&&i<.033&&r>=.0967&&r<.1371?k:i>=.033&&i<.0864&&r>=.0967&&r<.1371?C:O).invert(t)},R.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([O.stream(i=n),_.stream(n),m.stream(n),w.stream(n),x.stream(n),E.stream(n),M.stream(n),T.stream(n),S.stream(n),k.stream(n),C.stream(n),P.stream(n)])},R.precision=function(t){return arguments.length?(O.precision(t),_.precision(t),m.precision(t),w.precision(t),x.precision(t),E.precision(t),M.precision(t),T.precision(t),S.precision(t),k.precision(t),C.precision(t),P.precision(t),B()):O.precision()},R.scale=function(t){return arguments.length?(O.scale(t),_.scale(.6*t),m.scale(1.6*t),w.scale(1.4*t),x.scale(5*t),E.scale(1.3*t),M.scale(1.6*t),T.scale(1.2*t),S.scale(.3*t),k.scale(2.7*t),C.scale(.5*t),P.scale(.06*t),R.translate(O.translate())):O.scale()},R.translate=function(t){if(!arguments.length)return O.translate();var n=O.scale(),e=+t[0],i=+t[1];return o=O.translate(t).clipExtent([[e-.0996*n,i-.0908*n],[e+.0967*n,i+.0864*n]]).stream(N),u=_.translate([e-.12*n,i+.0575*n]).clipExtent([[e-.14*n+r,i+.029*n+r],[e-.0996*n-r,i+.0864*n-r]]).stream(N),a=m.translate([e-.12*n,i+.013*n]).clipExtent([[e-.14*n+r,i+0*n+r],[e-.0996*n-r,i+.029*n-r]]).stream(N),c=w.translate([e-.12*n,i-.014*n]).clipExtent([[e-.14*n+r,i-.032*n+r],[e-.0996*n-r,i+0*n-r]]).stream(N),f=x.translate([e-.12*n,i-.044*n]).clipExtent([[e-.14*n+r,i-.052*n+r],[e-.0996*n-r,i-.032*n-r]]).stream(N),h=E.translate([e-.12*n,i-.065*n]).clipExtent([[e-.14*n+r,i-.076*n+r],[e-.0996*n-r,i-.052*n-r]]).stream(N),p=M.translate([e+.117*n,i-.064*n]).clipExtent([[e+.0967*n+r,i-.076*n+r],[e+.1371*n-r,i-.052*n-r]]).stream(N),v=T.translate([e+.116*n,i-.0355*n]).clipExtent([[e+.0967*n+r,i-.052*n+r],[e+.1371*n-r,i-.02*n-r]]).stream(N),d=S.translate([e+.116*n,i-.0048*n]).clipExtent([[e+.0967*n+r,i-.02*n+r],[e+.1371*n-r,i+.012*n-r]]).stream(N),g=k.translate([e+.116*n,i+.022*n]).clipExtent([[e+.0967*n+r,i+.012*n+r],[e+.1371*n-r,i+.033*n-r]]).stream(N),y=P.translate([e+.11*n,i+.045*n]).clipExtent([[e+.0967*n+r,i+.033*n+r],[e+.1371*n-r,i+.06*n-r]]).stream(N),b=C.translate([e+.115*n,i+.075*n]).clipExtent([[e+.0967*n+r,i+.06*n+r],[e+.1371*n-r,i+.0864*n-r]]).stream(N),B()},R.fitExtent=function(t,n){return s(R,t,n)},R.fitSize=function(t,n){return l(R,t,n)},R.drawCompositionBorders=function(t){var n,e,r,i;n=O([-7.938886725111036,43.7219460918835]),e=O([-4.832080896458295,44.12930268549372]),r=O([-4.205299743793263,40.98096346967365]),i=O([-7.071796453126152,40.610037319181444]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([-8.42751373617692,45.32889452553031]),e=O([-5.18599305777107,45.7566442062976]),r=O([-4.832080905154431,44.129302726751426]),i=O([-7.938886737126192,43.72194613263854]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([-9.012656899657046,47.127733821030176]),e=O([-5.6105244772793155,47.579777861410626]),r=O([-5.185993067168585,45.756644248170346]),i=O([-8.427513749141811,45.32889456686326]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([-9.405747558985553,48.26506375557457]),e=O([-5.896175018439575,48.733352850851624]),r=O([-5.610524487556043,47.57977790393761]),i=O([-9.012656913808351,47.127733862971255]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([-9.908436061346974,49.642448789505856]),e=O([-6.262026716233124,50.131426841787174]),r=O([-5.896175029331232,48.73335289377258]),i=O([-9.40574757396393,48.26506379787767]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([11.996907706504462,50.16039028163579]),e=O([15.649907879773343,49.68279246765253]),r=O([15.156712840526632,48.30371557625831]),i=O([11.64122661754411,48.761078240546816]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([11.641226606955788,48.7610781975889]),e=O([15.156712825832164,48.30371553390465]),r=O([14.549932166241172,46.4866532486199]),i=O([11.204443787952183,46.91899233914248]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([11.204443778297161,46.918992296823646]),e=O([14.549932152815039,46.486653206856396]),r=O([13.994409796764009,44.695833444323256]),i=O([10.805306599253848,45.105133870684924]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([10.805306590412085,45.10513382903308]),e=O([13.99440978444733,44.695833403183606]),r=O([13.654633799024392,43.53552468558152]),i=O([10.561516803980956,43.930671459798624]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([10.561516795617383,43.93067141859757]),e=O([13.654633787361952,43.5355246448671]),r=O([12.867691604239901,40.640701985019405]),i=O([9.997809515987688,41.00288343254471]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([10.8,42.4]),e=O([12.8,42.13]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1])},R.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},R.scale(2700)},t.geoConicConformalEurope=function(){var t,i,o,u,a,c,f,h,p,v,d,g,b,y,j,O=n.geoConicConformal().rotate([-10,-53]).parallels([0,60]),_=n.geoMercator().center([-61.46,16.14]),m=n.geoMercator().center([-53.2,3.9]),w=n.geoConicConformal().rotate([27.8,-38.9]).parallels([0,60]),x=n.geoConicConformal().rotate([25.43,-37.398]).parallels([0,60]),E=n.geoConicConformal().rotate([31.17,-39.539]).parallels([0,60]),M=n.geoConicConformal().rotate([17,-32.7]).parallels([0,60]),T=n.geoConicConformal().rotate([16,-28.5]).parallels([0,60]),S=n.geoMercator().center([-61.03,14.67]),k=n.geoMercator().center([45.16,-12.8]),C=n.geoMercator().center([55.52,-21.13]),P=n.geoConicConformal().rotate([-14.4,-35.95]).parallels([0,60]),N={point:function(t,n){j=[t,n]}};function R(t){var n=t[0],e=t[1];return j=null,o.point(n,e),j||(a.point(n,e),j)||(d.point(n,e),j)||(u.point(n,e),j)||(v.point(n,e),j)||(p.point(n,e),j)||(g.point(n,e),j)||(b.point(n,e),j)||(y.point(n,e),j)||(c.point(n,e),j)||(f.point(n,e),j)||(h.point(n,e),j)}function B(){return t=i=null,R}return R.invert=function(t){var n=O.scale(),e=O.translate(),r=(t[0]-(e[0]+.08*n))/n,i=(t[1]-e[1])/n;return(i>=-.31&&i<-.24&&r>=.14&&r<.24?_:i>=-.24&&i<-.17&&r>=.14&&r<.24?m:i>=-.17&&i<-.12&&r>=.21&&r<.24?x:i>=-.17&&i<-.14&&r>=.14&&r<.165?E:i>=-.17&&i<-.1&&r>=.14&&r<.24?w:i>=-.1&&i<-.03&&r>=.14&&r<.24?M:i>=-.03&&i<.04&&r>=.14&&r<.24?T:i>=-.31&&i<-.24&&r>=.24&&r<.34?S:i>=-.24&&i<-.17&&r>=.24&&r<.34?k:i>=-.17&&i<-.1&&r>=.24&&r<.34?C:i>=-.1&&i<-.03&&r>=.24&&r<.34?P:O).invert(t)},R.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([O.stream(i=n),m.stream(n),S.stream(n),_.stream(n),T.stream(n),M.stream(n),k.stream(n),C.stream(n),P.stream(n),w.stream(n),x.stream(n),E.stream(n)])},R.precision=function(t){return arguments.length?(O.precision(t),m.precision(t),S.precision(t),_.precision(t),T.precision(t),M.precision(t),k.precision(t),C.precision(t),P.precision(t),w.precision(t),x.precision(t),E.precision(t),B()):O.precision()},R.scale=function(t){return arguments.length?(O.scale(t),_.scale(3*t),m.scale(.8*t),S.scale(3.5*t),C.scale(2.7*t),w.scale(2*t),x.scale(2*t),E.scale(2*t),M.scale(3*t),T.scale(t),k.scale(5.5*t),P.scale(6*t),R.translate(O.translate())):O.scale()},R.translate=function(t){if(!arguments.length)return O.translate();var n=O.scale(),e=+t[0],i=+t[1];return o=O.translate([e-.08*n,i]).clipExtent([[e-.51*n,i-.33*n],[e+.5*n,i+.33*n]]).stream(N),u=_.translate([e+.19*n,i-.275*n]).clipExtent([[e+.14*n+r,i-.31*n+r],[e+.24*n-r,i-.24*n-r]]).stream(N),a=m.translate([e+.19*n,i-.205*n]).clipExtent([[e+.14*n+r,i-.24*n+r],[e+.24*n-r,i-.17*n-r]]).stream(N),c=w.translate([e+.19*n,i-.135*n]).clipExtent([[e+.14*n+r,i-.17*n+r],[e+.24*n-r,i-.1*n-r]]).stream(N),f=x.translate([e+.225*n,i-.147*n]).clipExtent([[e+.21*n+r,i-.17*n+r],[e+.24*n-r,i-.12*n-r]]).stream(N),h=E.translate([e+.153*n,i-.15*n]).clipExtent([[e+.14*n+r,i-.17*n+r],[e+.165*n-r,i-.14*n-r]]).stream(N),p=M.translate([e+.19*n,i-.065*n]).clipExtent([[e+.14*n+r,i-.1*n+r],[e+.24*n-r,i-.03*n-r]]).stream(N),v=T.translate([e+.19*n,i+.005*n]).clipExtent([[e+.14*n+r,i-.03*n+r],[e+.24*n-r,i+.04*n-r]]).stream(N),d=S.translate([e+.29*n,i-.275*n]).clipExtent([[e+.24*n+r,i-.31*n+r],[e+.34*n-r,i-.24*n-r]]).stream(N),g=k.translate([e+.29*n,i-.205*n]).clipExtent([[e+.24*n+r,i-.24*n+r],[e+.34*n-r,i-.17*n-r]]).stream(N),b=C.translate([e+.29*n,i-.135*n]).clipExtent([[e+.24*n+r,i-.17*n+r],[e+.34*n-r,i-.1*n-r]]).stream(N),y=P.translate([e+.29*n,i-.065*n]).clipExtent([[e+.24*n+r,i-.1*n+r],[e+.34*n-r,i-.03*n-r]]).stream(N),B()},R.fitExtent=function(t,n){return s(R,t,n)},R.fitSize=function(t,n){return l(R,t,n)},R.drawCompositionBorders=function(t){var n,e,r,i;n=O([42.45755610828648,63.343658547914934]),e=O([52.65837266667029,59.35045080290929]),r=O([47.19754502247785,56.12653496548117]),i=O([37.673034273363044,59.61638268506111]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([59.41110754003403,62.35069727399336]),e=O([66.75050228640794,57.11797303636038]),r=O([60.236065725110436,54.63331433818992]),i=O([52.65837313153311,59.350450804599355]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([48.81091130080243,66.93353402634641]),e=O([59.41110730654679,62.35069740653086]),r=O([52.6583728974441,59.3504509222445]),i=O([42.45755631675751,63.34365868805821]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([31.054198418446475,52.1080673766184]),e=O([39.09869284884117,49.400700047190554]),r=O([36.0580811499175,46.02944174908498]),i=O([28.690508588835726,48.433126979386415]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([33.977877745912025,55.849945501331]),e=O([42.75328432167726,52.78455122462353]),r=O([39.09869297540224,49.400700176148625]),i=O([31.05419851807008,52.10806751810923]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([52.658372900759296,59.35045068526415]),e=O([60.23606549583304,54.63331423800264]),r=O([54.6756370953122,51.892298789399455]),i=O([47.19754524788189,56.126534861222794]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([47.19754506082455,56.126534735591456]),e=O([54.675636900123514,51.892298681337095]),r=O([49.94448648951486,48.98775484983285]),i=O([42.75328468716108,52.78455126060818]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([42.75328453416769,52.78455113209101]),e=O([49.94448632339758,48.98775473706457]),r=O([45.912339990394315,45.99361784987003]),i=O([39.09869317356607,49.40070009378711]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([37.673034114296634,59.61638254183119]),e=O([47.197544835420544,56.126534839849846]),r=O([42.75328447467064,52.78455135314068]),i=O([33.977877870363905,55.849945644671145]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([44.56748486446032,57.26489367845818]),r=O([43.9335791193588,53.746540942601726]),i=O([43,56]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=O([37.673034114296634,59.61638254183119]),e=O([40.25902691953466,58.83002044222639]),r=O([38.458270492742024,57.26232178028002]),i=O([35.97754948030156,58.00266637992386]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath()},R.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},R.scale(750)},t.geoMercatorMalaysia=function(){var t,i,o,u,a,c=n.geoMercator().center([105.25,4]),f=n.geoMercator().center([118.65,2.86]),h={point:function(t,n){a=[t,n]}};function p(t){var n=t[0],e=t[1];return a=null,o.point(n,e),a||(u.point(n,e),a)}function v(){return t=i=null,p}return p.invert=function(t){var n=c.scale(),e=c.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=-.0521&&i<.0229&&r>=-.0111&&r<.1?f:c).invert(t)},p.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([c.stream(i=n),f.stream(n)])},p.precision=function(t){return arguments.length?(c.precision(t),f.precision(t),v()):c.precision()},p.scale=function(t){return arguments.length?(c.scale(t),f.scale(.615*t),p.translate(c.translate())):c.scale()},p.translate=function(t){if(!arguments.length)return c.translate();var n=c.scale(),e=+t[0],i=+t[1];return o=c.translate(t).clipExtent([[e-.11*n,i-.0521*n],[e-.0111*n,i+.0521*n]]).stream(h),u=f.translate([e+.09*n,i-0*n]).clipExtent([[e-.0111*n+r,i-.0521*n+r],[e+.1*n-r,i+.024*n-r]]).stream(h),v()},p.fitExtent=function(t,n){return s(p,t,n)},p.fitSize=function(t,n){return l(p,t,n)},p.drawCompositionBorders=function(t){var n=c([106.3214,2.0228]),e=c([105.1843,2.3761]),r=c([104.2151,3.3618]),i=c([104.215,4.5651]);t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1])},p.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},p.scale(4800)},t.geoMercatorEquatorialGuinea=function(){var t,i,o,u,a,c,f=n.geoMercator().rotate([-9.5,-1.5]),h=n.geoMercator().rotate([-8.6,-3.5]),p=n.geoMercator().rotate([-5.6,1.45]),v={point:function(t,n){c=[t,n]}};function d(t){var n=t[0],e=t[1];return c=null,o.point(n,e),c||(u.point(n,e),c)||(a.point(n,e),c)}function g(){return t=i=null,d}return d.invert=function(t){var n=f.scale(),e=f.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=-.02&&i<0&&r>=-.038&&r<-.005?h:i>=0&&i<.02&&r>=-.038&&r<-.005?p:f).invert(t)},d.stream=function(n){return t&&i===n?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([f.stream(i=n),h.stream(n),p.stream(n)])},d.precision=function(t){return arguments.length?(f.precision(t),h.precision(t),p.precision(t),g()):f.precision()},d.scale=function(t){return arguments.length?(f.scale(t),h.scale(1.5*t),p.scale(4*t),d.translate(f.translate())):f.scale()},d.translate=function(t){if(!arguments.length)return f.translate();var n=f.scale(),e=+t[0],i=+t[1];return o=f.translate(t).clipExtent([[e-.005*n,i-.02*n],[e+.038*n,i+.02*n]]).stream(v),u=h.translate([e-.025*n,i-.01*n]).clipExtent([[e-.038*n+r,i-.02*n+r],[e-.005*n-r,i+0*n-r]]).stream(v),a=p.translate([e-.025*n,i+.01*n]).clipExtent([[e-.038*n+r,i-0*n+r],[e-.005*n-r,i+.02*n-r]]).stream(v),g()},d.fitExtent=function(t,n){return s(d,t,n)},d.fitSize=function(t,n){return l(d,t,n)},d.drawCompositionBorders=function(t){var n,e,r,i;n=f([9.21327272751682,2.645820439454123]),e=f([11.679126293239872,2.644755519268689]),r=f([11.676845389029227,.35307824637606433]),i=f([9.213572917774014,.35414205204417754]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=f([7.320873711543669,2.64475551449975]),e=f([9.213272722738658,2.645820434679803]),r=f([9.213422896480349,1.4999812505283054]),i=f([7.322014760520787,1.4989168878985566]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath(),n=f([7.3220147605302905,1.4989168783492766]),e=f([9.213422896481598,1.499981240979021]),r=f([9.213572912999604,.354142056817247]),i=f([7.323154615739809,.353078251154504]),t.moveTo(n[0],n[1]),t.lineTo(e[0],e[1]),t.lineTo(r[0],r[1]),t.lineTo(i[0],i[1]),t.closePath()},d.getCompositionBorders=function(){var t=e.path();return this.drawCompositionBorders(t),t.toString()},d.scale(12e3)},Object.defineProperty(t,"__esModule",{value:!0})}(n,e(323),e(33))},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(142);e.d(n,"geoArea",function(){return r.c});var i=e(324);e.d(n,"geoBounds",function(){return i.a});var o=e(325);e.d(n,"geoCentroid",function(){return o.a});var u=e(143);e.d(n,"geoCircle",function(){return u.b});var a=e(145);e.d(n,"geoClipExtent",function(){return a.b});var c=e(328);e.d(n,"geoDistance",function(){return c.a});var f=e(329);e.d(n,"geoGraticule",function(){return f.a});var s=e(330);e.d(n,"geoInterpolate",function(){return s.a});var l=e(149);e.d(n,"geoLength",function(){return l.a});var h=e(331);e.d(n,"geoPath",function(){return h.a});var p=e(152);e.d(n,"geoAlbers",function(){return p.a});var v=e(340);e.d(n,"geoAlbersUsa",function(){return v.a});var d=e(341);e.d(n,"geoAzimuthalEqualArea",function(){return d.b}),e.d(n,"geoAzimuthalEqualAreaRaw",function(){return d.a});var g=e(342);e.d(n,"geoAzimuthalEquidistant",function(){return g.b}),e.d(n,"geoAzimuthalEquidistantRaw",function(){return g.a});var b=e(343);e.d(n,"geoConicConformal",function(){return b.b}),e.d(n,"geoConicConformalRaw",function(){return b.a});var y=e(79);e.d(n,"geoConicEqualArea",function(){return y.b}),e.d(n,"geoConicEqualAreaRaw",function(){return y.a});var j=e(344);e.d(n,"geoConicEquidistant",function(){return j.b}),e.d(n,"geoConicEquidistantRaw",function(){return j.a});var O=e(155);e.d(n,"geoEquirectangular",function(){return O.a}),e.d(n,"geoEquirectangularRaw",function(){return O.b});var _=e(345);e.d(n,"geoGnomonic",function(){return _.a}),e.d(n,"geoGnomonicRaw",function(){return _.b});var m=e(18);e.d(n,"geoProjection",function(){return m.a}),e.d(n,"geoProjectionMutator",function(){return m.b});var w=e(82);e.d(n,"geoMercator",function(){return w.a}),e.d(n,"geoMercatorRaw",function(){return w.c});var x=e(346);e.d(n,"geoOrthographic",function(){return x.a}),e.d(n,"geoOrthographicRaw",function(){return x.b});var E=e(347);e.d(n,"geoStereographic",function(){return E.a}),e.d(n,"geoStereographicRaw",function(){return E.b});var M=e(348);e.d(n,"geoTransverseMercator",function(){return M.a}),e.d(n,"geoTransverseMercatorRaw",function(){return M.b});var T=e(78);e.d(n,"geoRotation",function(){return T.a});var S=e(26);e.d(n,"geoStream",function(){return S.a});var k=e(81);e.d(n,"geoTransform",function(){return k.a})},function(t,n,e){"use strict";var r,i,o,u,a,c,f,s,l,h,p=e(42),v=e(142),d=e(43),g=e(5),b=e(26),y=Object(p.a)(),j={point:O,lineStart:m,lineEnd:w,polygonStart:function(){j.point=x,j.lineStart=E,j.lineEnd=M,y.reset(),v.b.polygonStart()},polygonEnd:function(){v.b.polygonEnd(),j.point=O,j.lineStart=m,j.lineEnd=w,v.a<0?(r=-(o=180),i=-(u=90)):y>g.i?u=90:y<-g.i&&(i=-90),h[0]=r,h[1]=o}};function O(t,n){l.push(h=[r=t,o=t]),n<i&&(i=n),n>u&&(u=n)}function _(t,n){var e=Object(d.a)([t*g.r,n*g.r]);if(s){var c=Object(d.c)(s,e),f=[c[1],-c[0],0],l=Object(d.c)(f,c);Object(d.e)(l),l=Object(d.g)(l);var h,p=t-a,v=p>0?1:-1,b=l[0]*g.h*v,y=Object(g.a)(p)>180;y^(v*a<b&&b<v*t)?(h=l[1]*g.h)>u&&(u=h):y^(v*a<(b=(b+360)%360-180)&&b<v*t)?(h=-l[1]*g.h)<i&&(i=h):(n<i&&(i=n),n>u&&(u=n)),y?t<a?T(r,t)>T(r,o)&&(o=t):T(t,o)>T(r,o)&&(r=t):o>=r?(t<r&&(r=t),t>o&&(o=t)):t>a?T(r,t)>T(r,o)&&(o=t):T(t,o)>T(r,o)&&(r=t)}else O(t,n);s=e,a=t}function m(){j.point=_}function w(){h[0]=r,h[1]=o,j.point=O,s=null}function x(t,n){if(s){var e=t-a;y.add(Object(g.a)(e)>180?e+(e>0?360:-360):e)}else c=t,f=n;v.b.point(t,n),_(t,n)}function E(){v.b.lineStart()}function M(){x(c,f),v.b.lineEnd(),Object(g.a)(y)>g.i&&(r=-(o=180)),h[0]=r,h[1]=o,s=null}function T(t,n){return(n-=t)<0?n+360:n}function S(t,n){return t[0]-n[0]}function k(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}n.a=function(t){var n,e,a,c,f,s,p;if(u=o=-(r=i=1/0),l=[],Object(b.a)(t,j),e=l.length){for(l.sort(S),n=1,f=[a=l[0]];n<e;++n)k(a,(c=l[n])[0])||k(a,c[1])?(T(a[0],c[1])>T(a[0],a[1])&&(a[1]=c[1]),T(c[0],a[1])>T(a[0],a[1])&&(a[0]=c[0])):f.push(a=c);for(s=-1/0,n=0,a=f[e=f.length-1];n<=e;a=c,++n)c=f[n],(p=T(a[1],c[0]))>s&&(s=p,r=c[0],o=a[1])}return l=h=null,r===1/0||i===1/0?[[NaN,NaN],[NaN,NaN]]:[[r,i],[o,u]]}},function(t,n,e){"use strict";var r,i,o,u,a,c,f,s,l,h,p,v,d,g,b,y,j=e(5),O=e(25),_=e(26),m={sphere:O.a,point:w,lineStart:E,lineEnd:S,polygonStart:function(){m.lineStart=k,m.lineEnd=C},polygonEnd:function(){m.lineStart=E,m.lineEnd=S}};function w(t,n){t*=j.r,n*=j.r;var e=Object(j.g)(n);x(e*Object(j.g)(t),e*Object(j.t)(t),Object(j.t)(n))}function x(t,n,e){o+=(t-o)/++r,u+=(n-u)/r,a+=(e-a)/r}function E(){m.point=M}function M(t,n){t*=j.r,n*=j.r;var e=Object(j.g)(n);g=e*Object(j.g)(t),b=e*Object(j.t)(t),y=Object(j.t)(n),m.point=T,x(g,b,y)}function T(t,n){t*=j.r,n*=j.r;var e=Object(j.g)(n),r=e*Object(j.g)(t),o=e*Object(j.t)(t),u=Object(j.t)(n),a=Object(j.e)(Object(j.u)((a=b*u-y*o)*a+(a=y*r-g*u)*a+(a=g*o-b*r)*a),g*r+b*o+y*u);i+=a,c+=a*(g+(g=r)),f+=a*(b+(b=o)),s+=a*(y+(y=u)),x(g,b,y)}function S(){m.point=w}function k(){m.point=P}function C(){N(v,d),m.point=w}function P(t,n){v=t,d=n,t*=j.r,n*=j.r,m.point=N;var e=Object(j.g)(n);g=e*Object(j.g)(t),b=e*Object(j.t)(t),y=Object(j.t)(n),x(g,b,y)}function N(t,n){t*=j.r,n*=j.r;var e=Object(j.g)(n),r=e*Object(j.g)(t),o=e*Object(j.t)(t),u=Object(j.t)(n),a=b*u-y*o,v=y*r-g*u,d=g*o-b*r,O=Object(j.u)(a*a+v*v+d*d),_=g*r+b*o+y*u,m=O&&-Object(j.b)(_)/O,w=Object(j.e)(O,_);l+=m*a,h+=m*v,p+=m*d,i+=w,c+=w*(g+(g=r)),f+=w*(b+(b=o)),s+=w*(y+(y=u)),x(g,b,y)}n.a=function(t){r=i=o=u=a=c=f=s=l=h=p=0,Object(_.a)(t,m);var n=l,e=h,v=p,d=n*n+e*e+v*v;return d<j.j&&(n=c,e=f,v=s,i<j.i&&(n=o,e=u,v=a),(d=n*n+e*e+v*v)<j.j)?[NaN,NaN]:[Object(j.e)(e,n)*j.h,Object(j.c)(v/Object(j.u)(d))*j.h]}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t,n,e,r,i,o){var u,a=t[0],c=t[1],f=0,s=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<f)return;u<s&&(s=u)}else if(l>0){if(u>s)return;u>f&&(f=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>s)return;u>f&&(f=u)}else if(l>0){if(u<f)return;u<s&&(s=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<f)return;u<s&&(s=u)}else if(h>0){if(u>s)return;u>f&&(f=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>s)return;u>f&&(f=u)}else if(h>0){if(u<f)return;u<s&&(s=u)}return f>0&&(t[0]=a+f*l,t[1]=c+f*h),s<1&&(n[0]=a+s*l,n[1]=c+s*h),!0}}}}}},function(t,n,e){"use strict";var r=e(149),i=[null,null],o={type:"LineString",coordinates:i};n.a=function(t,n){return i[0]=t,i[1]=n,Object(r.a)(o)}},function(t,n,e){"use strict";var r=e(14),i=e(5);function o(t,n,e){var o=Object(r.range)(t,n-i.i,e).concat(n);return function(t){return o.map(function(n){return[t,n]})}}function u(t,n,e){var o=Object(r.range)(t,n-i.i,e).concat(n);return function(t){return o.map(function(n){return[n,t]})}}n.a=function(){var t,n,e,a,c,f,s,l,h,p,v,d,g=10,b=g,y=90,j=360,O=2.5;function _(){return{type:"MultiLineString",coordinates:m()}}function m(){return Object(r.range)(Object(i.f)(a/y)*y,e,y).map(v).concat(Object(r.range)(Object(i.f)(l/j)*j,s,j).map(d)).concat(Object(r.range)(Object(i.f)(n/g)*g,t,g).filter(function(t){return Object(i.a)(t%y)>i.i}).map(h)).concat(Object(r.range)(Object(i.f)(f/b)*b,c,b).filter(function(t){return Object(i.a)(t%j)>i.i}).map(p))}return _.lines=function(){return m().map(function(t){return{type:"LineString",coordinates:t}})},_.outline=function(){return{type:"Polygon",coordinates:[v(a).concat(d(s).slice(1),v(e).reverse().slice(1),d(l).reverse().slice(1))]}},_.extent=function(t){return arguments.length?_.extentMajor(t).extentMinor(t):_.extentMinor()},_.extentMajor=function(t){return arguments.length?(a=+t[0][0],e=+t[1][0],l=+t[0][1],s=+t[1][1],a>e&&(t=a,a=e,e=t),l>s&&(t=l,l=s,s=t),_.precision(O)):[[a,l],[e,s]]},_.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],f=+e[0][1],c=+e[1][1],n>t&&(e=n,n=t,t=e),f>c&&(e=f,f=c,c=e),_.precision(O)):[[n,f],[t,c]]},_.step=function(t){return arguments.length?_.stepMajor(t).stepMinor(t):_.stepMinor()},_.stepMajor=function(t){return arguments.length?(y=+t[0],j=+t[1],_):[y,j]},_.stepMinor=function(t){return arguments.length?(g=+t[0],b=+t[1],_):[g,b]},_.precision=function(r){return arguments.length?(O=+r,h=o(f,c,90),p=u(n,t,O),v=o(l,s,90),d=u(a,e,O),_):O},_.extentMajor([[-180,-90+i.i],[180,90-i.i]]).extentMinor([[-180,-80-i.i],[180,80+i.i]])}},function(t,n,e){"use strict";var r=e(5);n.a=function(t,n){var e=t[0]*r.r,i=t[1]*r.r,o=n[0]*r.r,u=n[1]*r.r,a=Object(r.g)(i),c=Object(r.t)(i),f=Object(r.g)(u),s=Object(r.t)(u),l=a*Object(r.g)(e),h=a*Object(r.t)(e),p=f*Object(r.g)(o),v=f*Object(r.t)(o),d=2*Object(r.c)(Object(r.u)(Object(r.m)(u-i)+a*f*Object(r.m)(o-e))),g=Object(r.t)(d),b=d?function(t){var n=Object(r.t)(t*=d)/g,e=Object(r.t)(d-t)/g,i=e*l+n*p,o=e*h+n*v,u=e*c+n*s;return[Object(r.e)(o,i)*r.h,Object(r.e)(u,Object(r.u)(i*i+o*o))*r.h]}:function(){return[e*r.h,i*r.h]};return b.distance=d,b}},function(t,n,e){"use strict";var r=e(150),i=e(26),o=e(332),u=e(151),a=e(333),c=e(334),f=e(335);n.a=function(){var t,n,e,s,l=4.5;function h(t){return t&&("function"==typeof l&&s.pointRadius(+l.apply(this,arguments)),Object(i.a)(t,n(s))),s.result()}return h.area=function(t){return Object(i.a)(t,n(o.a)),o.a.result()},h.bounds=function(t){return Object(i.a)(t,n(u.a)),u.a.result()},h.centroid=function(t){return Object(i.a)(t,n(a.a)),a.a.result()},h.projection=function(e){return arguments.length?(n=null==(t=e)?r.a:e.stream,h):t},h.context=function(t){return arguments.length?(s=null==(e=t)?new f.a:new c.a(t),"function"!=typeof l&&s.pointRadius(l),h):e},h.pointRadius=function(t){return arguments.length?(l="function"==typeof t?t:(s.pointRadius(+t),+t),h):l},h.projection(null).context(null)}},function(t,n,e){"use strict";var r,i,o,u,a=e(42),c=e(5),f=e(25),s=Object(a.a)(),l=Object(a.a)(),h={point:f.a,lineStart:f.a,lineEnd:f.a,polygonStart:function(){h.lineStart=p,h.lineEnd=g},polygonEnd:function(){h.lineStart=h.lineEnd=h.point=f.a,s.add(Object(c.a)(l)),l.reset()},result:function(){var t=s/2;return s.reset(),t}};function p(){h.point=v}function v(t,n){h.point=d,r=o=t,i=u=n}function d(t,n){l.add(u*t-o*n),o=t,u=n}function g(){d(r,i)}n.a=h},function(t,n,e){"use strict";var r,i,o,u,a=e(5),c=0,f=0,s=0,l=0,h=0,p=0,v=0,d=0,g=0,b={point:y,lineStart:j,lineEnd:m,polygonStart:function(){b.lineStart=w,b.lineEnd=x},polygonEnd:function(){b.point=y,b.lineStart=j,b.lineEnd=m},result:function(){var t=g?[v/g,d/g]:p?[l/p,h/p]:s?[c/s,f/s]:[NaN,NaN];return c=f=s=l=h=p=v=d=g=0,t}};function y(t,n){c+=t,f+=n,++s}function j(){b.point=O}function O(t,n){b.point=_,y(o=t,u=n)}function _(t,n){var e=t-o,r=n-u,i=Object(a.u)(e*e+r*r);l+=i*(o+t)/2,h+=i*(u+n)/2,p+=i,y(o=t,u=n)}function m(){b.point=y}function w(){b.point=E}function x(){M(r,i)}function E(t,n){b.point=M,y(r=o=t,i=u=n)}function M(t,n){var e=t-o,r=n-u,i=Object(a.u)(e*e+r*r);l+=i*(o+t)/2,h+=i*(u+n)/2,p+=i,v+=(i=u*t-o*n)*(o+t),d+=i*(u+n),g+=3*i,y(o=t,u=n)}n.a=b},function(t,n,e){"use strict";n.a=o;var r=e(5),i=e(25);function o(t){this._context=t}o.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,r.w)}},result:i.a}},function(t,n,e){"use strict";function r(){this._string=[]}function i(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}n.a=r,r.prototype={_circle:i(4.5),pointRadius:function(t){return this._circle=i(t),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}}}},function(t,n,e){"use strict";var r=e(153),i=e(5);n.a=Object(r.a)(function(){return!0},function(t){var n,e=NaN,r=NaN,o=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(u,a){var c=u>0?i.o:-i.o,f=Object(i.a)(u-e);Object(i.a)(f-i.o)<i.i?(t.point(e,r=(r+a)/2>0?i.l:-i.l),t.point(o,r),t.lineEnd(),t.lineStart(),t.point(c,r),t.point(u,r),n=0):o!==c&&f>=i.o&&(Object(i.a)(e-o)<i.i&&(e-=o*i.i),Object(i.a)(u-c)<i.i&&(u-=c*i.i),r=function(t,n,e,r){var o,u,a=Object(i.t)(t-e);return Object(i.a)(a)>i.i?Object(i.d)((Object(i.t)(n)*(u=Object(i.g)(r))*Object(i.t)(e)-Object(i.t)(r)*(o=Object(i.g)(n))*Object(i.t)(t))/(o*u*a)):(n+r)/2}(e,r,u,a),t.point(o,r),t.lineEnd(),t.lineStart(),t.point(c,r),n=0),t.point(e=u,r=a),o=c},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var o;if(null==t)o=e*i.l,r.point(-i.o,o),r.point(0,o),r.point(i.o,o),r.point(i.o,0),r.point(i.o,-o),r.point(0,-o),r.point(-i.o,-o),r.point(-i.o,0),r.point(-i.o,o);else if(Object(i.a)(t[0]-n[0])>i.i){var u=t[0]<n[0]?i.o:-i.o;o=e*u/2,r.point(-u,o),r.point(0,o),r.point(u,o)}else r.point(n[0],n[1])},[-i.o,-i.l])},function(t,n,e){"use strict";var r=e(42),i=e(43),o=e(5),u=Object(r.a)();n.a=function(t,n){var e=n[0],r=n[1],a=[Object(o.t)(e),-Object(o.g)(e),0],c=0,f=0;u.reset();for(var s=0,l=t.length;s<l;++s)if(p=(h=t[s]).length)for(var h,p,v=h[p-1],d=v[0],g=v[1]/2+o.q,b=Object(o.t)(g),y=Object(o.g)(g),j=0;j<p;++j,d=_,b=w,y=x,v=O){var O=h[j],_=O[0],m=O[1]/2+o.q,w=Object(o.t)(m),x=Object(o.g)(m),E=_-d,M=E>=0?1:-1,T=M*E,S=T>o.o,k=b*w;if(u.add(Object(o.e)(k*M*Object(o.t)(T),y*x+k*Object(o.g)(T))),c+=S?E+M*o.w:E,S^d>=e^_>=e){var C=Object(i.c)(Object(i.a)(v),Object(i.a)(O));Object(i.e)(C);var P=Object(i.c)(a,C);Object(i.e)(P);var N=(S^E>=0?-1:1)*Object(o.c)(P[2]);(r>N||r===N&&(C[0]||C[1]))&&(f+=S^E>=0?1:-1)}}return(c<-o.i||c<o.i&&u<-o.i)^1&f}},function(t,n,e){"use strict";var r=e(43),i=e(143),o=e(5),u=e(148),a=e(153);n.a=function(t,n){var e=Object(o.g)(t),c=e>0,f=Object(o.a)(e)>o.i;function s(t,n){return Object(o.g)(t)*Object(o.g)(n)>e}function l(t,n,i){var u=Object(r.a)(t),a=Object(r.a)(n),c=[1,0,0],f=Object(r.c)(u,a),s=Object(r.d)(f,f),l=f[0],h=s-l*l;if(!h)return!i&&t;var p=e*s/h,v=-e*l/h,d=Object(r.c)(c,f),g=Object(r.f)(c,p),b=Object(r.f)(f,v);Object(r.b)(g,b);var y=d,j=Object(r.d)(g,y),O=Object(r.d)(y,y),_=j*j-O*(Object(r.d)(g,g)-1);if(!(_<0)){var m=Object(o.u)(_),w=Object(r.f)(y,(-j-m)/O);if(Object(r.b)(w,g),w=Object(r.g)(w),!i)return w;var x,E=t[0],M=n[0],T=t[1],S=n[1];M<E&&(x=E,E=M,M=x);var k=M-E,C=Object(o.a)(k-o.o)<o.i,P=C||k<o.i;if(!C&&S<T&&(x=T,T=S,S=x),P?C?T+S>0^w[1]<(Object(o.a)(w[0]-E)<o.i?T:S):T<=w[1]&&w[1]<=S:k>o.o^(E<=w[0]&&w[0]<=M)){var N=Object(r.f)(y,(-j+m)/O);return Object(r.b)(N,g),[w,Object(r.g)(N)]}}}function h(n,e){var r=c?t:o.o-t,i=0;return n<-r?i|=1:n>r&&(i|=2),e<-r?i|=4:e>r&&(i|=8),i}return Object(a.a)(s,function(t){var n,e,r,i,a;return{lineStart:function(){i=r=!1,a=1},point:function(p,v){var d,g=[p,v],b=s(p,v),y=c?b?0:h(p,v):b?h(p+(p<0?o.o:-o.o),v):0;if(!n&&(i=r=b)&&t.lineStart(),b!==r&&(d=l(n,g),(Object(u.a)(n,d)||Object(u.a)(g,d))&&(g[0]+=o.i,g[1]+=o.i,b=s(g[0],g[1]))),b!==r)a=0,b?(t.lineStart(),d=l(g,n),t.point(d[0],d[1])):(d=l(n,g),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(f&&n&&c^b){var j;y&e||!(j=l(g,n,!0))||(a=0,c?(t.lineStart(),t.point(j[0][0],j[0][1]),t.point(j[1][0],j[1][1]),t.lineEnd()):(t.point(j[1][0],j[1][1]),t.lineEnd(),t.lineStart(),t.point(j[0][0],j[0][1])))}!b||n&&Object(u.a)(n,g)||t.point(g[0],g[1]),n=g,r=b,e=y},lineEnd:function(){r&&t.lineEnd(),n=null},clean:function(){return a|(i&&r)<<1}}},function(e,r,o,u){Object(i.a)(u,t,n,o,e,r)},c?[0,-t]:[-o.o,t-o.o])}},function(t,n,e){"use strict";var r=e(43),i=e(5),o=e(81),u=16,a=Object(i.g)(30*i.r);n.a=function(t,n){return+n?function(t,n){function e(r,o,u,c,f,s,l,h,p,v,d,g,b,y){var j=l-r,O=h-o,_=j*j+O*O;if(_>4*n&&b--){var m=c+v,w=f+d,x=s+g,E=Object(i.u)(m*m+w*w+x*x),M=Object(i.c)(x/=E),T=Object(i.a)(Object(i.a)(x)-1)<i.i||Object(i.a)(u-p)<i.i?(u+p)/2:Object(i.e)(w,m),S=t(T,M),k=S[0],C=S[1],P=k-r,N=C-o,R=O*P-j*N;(R*R/_>n||Object(i.a)((j*P+O*N)/_-.5)>.3||c*v+f*d+s*g<a)&&(e(r,o,u,c,f,s,k,C,T,m/=E,w/=E,x,b,y),y.point(k,C),e(k,C,T,m,w,x,l,h,p,v,d,g,b,y))}}return function(n){var i,o,a,c,f,s,l,h,p,v,d,g,b={point:y,lineStart:j,lineEnd:_,polygonStart:function(){n.polygonStart(),b.lineStart=m},polygonEnd:function(){n.polygonEnd(),b.lineStart=j}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function j(){h=NaN,b.point=O,n.lineStart()}function O(i,o){var a=Object(r.a)([i,o]),c=t(i,o);e(h,p,l,v,d,g,h=c[0],p=c[1],l=i,v=a[0],d=a[1],g=a[2],u,n),n.point(h,p)}function _(){b.point=y,n.lineEnd()}function m(){j(),b.point=w,b.lineEnd=x}function w(t,n){O(i=t,n),o=h,a=p,c=v,f=d,s=g,b.point=O}function x(){e(h,p,l,v,d,g,o,a,i,c,f,s,u,n),b.lineEnd=_,_()}return b}}(t,n):function(t){return Object(o.b)({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}},function(t,n,e){"use strict";var r=e(5),i=e(152),o=e(79),u=e(154);n.a=function(){var t,n,e,a,c,f,s=Object(i.a)(),l=Object(o.b)().rotate([154,0]).center([-2,58.5]).parallels([55,65]),h=Object(o.b)().rotate([157,0]).center([-3,19.9]).parallels([8,18]),p={point:function(t,n){f=[t,n]}};function v(t){var n=t[0],r=t[1];return f=null,e.point(n,r),f||(a.point(n,r),f)||(c.point(n,r),f)}return v.invert=function(t){var n=s.scale(),e=s.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?l:i>=.166&&i<.234&&r>=-.214&&r<-.115?h:s).invert(t)},v.stream=function(e){return t&&n===e?t:t=function(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}([s.stream(n=e),l.stream(e),h.stream(e)])},v.precision=function(t){return arguments.length?(s.precision(t),l.precision(t),h.precision(t),v):s.precision()},v.scale=function(t){return arguments.length?(s.scale(t),l.scale(.35*t),h.scale(t),v.translate(s.translate())):s.scale()},v.translate=function(t){if(!arguments.length)return s.translate();var n=s.scale(),i=+t[0],o=+t[1];return e=s.translate(t).clipExtent([[i-.455*n,o-.238*n],[i+.455*n,o+.238*n]]).stream(p),a=l.translate([i-.307*n,o+.201*n]).clipExtent([[i-.425*n+r.i,o+.12*n+r.i],[i-.214*n-r.i,o+.234*n-r.i]]).stream(p),c=h.translate([i-.205*n,o+.212*n]).clipExtent([[i-.214*n+r.i,o+.166*n+r.i],[i-.115*n-r.i,o+.234*n-r.i]]).stream(p),v},v.fitExtent=Object(u.a)(v),v.fitSize=Object(u.b)(v),v.scale(1070)}},function(t,n,e){"use strict";e.d(n,"a",function(){return u});var r=e(5),i=e(44),o=e(18),u=Object(i.b)(function(t){return Object(r.u)(2/(1+t))});u.invert=Object(i.a)(function(t){return 2*Object(r.c)(t/2)}),n.b=function(){return Object(o.a)(u).scale(124.75).clipAngle(179.999)}},function(t,n,e){"use strict";e.d(n,"a",function(){return u});var r=e(5),i=e(44),o=e(18),u=Object(i.b)(function(t){return(t=Object(r.b)(t))&&t/Object(r.t)(t)});u.invert=Object(i.a)(function(t){return t}),n.b=function(){return Object(o.a)(u).scale(79.4188).clipAngle(179.999)}},function(t,n,e){"use strict";n.a=a;var r=e(5),i=e(80),o=e(82);function u(t){return Object(r.v)((r.l+t)/2)}function a(t,n){var e=Object(r.g)(t),i=t===n?Object(r.t)(t):Object(r.n)(e/Object(r.g)(n))/Object(r.n)(u(n)/u(t)),a=e*Object(r.p)(u(t),i)/i;if(!i)return o.c;function c(t,n){a>0?n<-r.l+r.i&&(n=-r.l+r.i):n>r.l-r.i&&(n=r.l-r.i);var e=a/Object(r.p)(u(n),i);return[e*Object(r.t)(i*t),a-e*Object(r.g)(i*t)]}return c.invert=function(t,n){var e=a-n,o=Object(r.s)(i)*Object(r.u)(t*t+e*e);return[Object(r.e)(t,e)/i,2*Object(r.d)(Object(r.p)(a/o,1/i))-r.l]},c}n.b=function(){return Object(i.a)(a).scale(109.5).parallels([30,30])}},function(t,n,e){"use strict";n.a=u;var r=e(5),i=e(80),o=e(155);function u(t,n){var e=Object(r.g)(t),i=t===n?Object(r.t)(t):(e-Object(r.g)(n))/(n-t),u=e/i+t;if(Object(r.a)(i)<r.i)return o.b;function a(t,n){var e=u-n,o=i*t;return[e*Object(r.t)(o),u-e*Object(r.g)(o)]}return a.invert=function(t,n){var e=u-n;return[Object(r.e)(t,e)/i,u-Object(r.s)(i)*Object(r.u)(t*t+e*e)]},a}n.b=function(){return Object(i.a)(u).scale(131.154).center([0,13.9389])}},function(t,n,e){"use strict";n.b=u;var r=e(5),i=e(44),o=e(18);function u(t,n){var e=Object(r.g)(n),i=Object(r.g)(t)*e;return[e*Object(r.t)(t)/i,Object(r.t)(n)/i]}u.invert=Object(i.a)(r.d),n.a=function(){return Object(o.a)(u).scale(144.049).clipAngle(60)}},function(t,n,e){"use strict";n.b=u;var r=e(5),i=e(44),o=e(18);function u(t,n){return[Object(r.g)(n)*Object(r.t)(t),Object(r.t)(n)]}u.invert=Object(i.a)(r.c),n.a=function(){return Object(o.a)(u).scale(249.5).clipAngle(90+r.i)}},function(t,n,e){"use strict";n.b=u;var r=e(5),i=e(44),o=e(18);function u(t,n){var e=Object(r.g)(n),i=1+Object(r.g)(t)*e;return[e*Object(r.t)(t)/i,Object(r.t)(n)/i]}u.invert=Object(i.a)(function(t){return 2*Object(r.d)(t)}),n.a=function(){return Object(o.a)(u).scale(250).clipAngle(142)}},function(t,n,e){"use strict";n.b=o;var r=e(5),i=e(82);function o(t,n){return[Object(r.n)(Object(r.v)((r.l+n)/2)),-t]}o.invert=function(t,n){return[-n,2*Object(r.d)(Object(r.k)(t))-r.l]},n.a=function(){var t=Object(i.b)(o),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}},function(t,n,e){"use strict";var r=Math.PI,i=2*r,o=i-1e-6;function u(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function a(){return new u}u.prototype=a.prototype={constructor:u,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,i,o){t=+t,n=+n,e=+e,i=+i,o=+o;var u=this._x1,a=this._y1,c=e-t,f=i-n,s=u-t,l=a-n,h=s*s+l*l;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(l*c-f*s)>1e-6&&o){var p=e-u,v=i-a,d=c*c+f*f,g=p*p+v*v,b=Math.sqrt(d),y=Math.sqrt(h),j=o*Math.tan((r-Math.acos((d+h-g)/(2*b*y)))/2),O=j/y,_=j/b;Math.abs(O-1)>1e-6&&(this._+="L"+(t+O*s)+","+(n+O*l)),this._+="A"+o+","+o+",0,0,"+ +(l*p>s*v)+","+(this._x1=t+_*c)+","+(this._y1=n+_*f)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,u,a,c){t=+t,n=+n;var f=(e=+e)*Math.cos(u),s=e*Math.sin(u),l=t+f,h=n+s,p=1^c,v=c?u-a:a-u;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+l+","+h:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-h)>1e-6)&&(this._+="L"+l+","+h),e&&(v<0&&(v=v%i+i),v>o?this._+="A"+e+","+e+",0,1,"+p+","+(t-f)+","+(n-s)+"A"+e+","+e+",0,1,"+p+","+(this._x1=l)+","+(this._y1=h):v>1e-6&&(this._+="A"+e+","+e+",0,"+ +(v>=r)+","+p+","+(this._x1=t+e*Math.cos(a))+","+(this._y1=n+e*Math.sin(a))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}},n.a=a},function(t,n,e){var r=e(3),i=e(39);r(i.prototype,{getAllNodes:function(){var t=[],n=this.root;return n.each?n.each(function(n){t.push(n)}):n.eachNode&&n.eachNode(function(n){t.push(n)}),t},getAllLinks:function(){for(var t,n=[],e=[this.root];t=e.pop();){var r=t.children;r&&r.forEach(function(r){n.push({source:t,target:r}),e.push(r)})}return n}}),r(i.prototype,{getAllEdges:i.prototype.getAllLinks})},function(t,n,e){var r=e(3),i=e(83),o=e(15);r(e(39).prototype,{partition:function(t,n){return void 0===t&&(t=[]),void 0===n&&(n=[]),o(this.rows,t,n)},group:function(t,n){var e=this.partition(t,n);return i(e)},groups:function(t,n){return this.group(t,n)}})},function(t,n,e){var r=e(9),i=e(6),o=Object.prototype.hasOwnProperty;t.exports=function(t,n){if(!n||!i(t))return t;var e={},u=null;return r(t,function(t){u=n(t),o.call(e,u)?e[u].push(t):e[u]=[t]}),e}},function(t,n,e){var r=e(6),i=e(11),o=e(10);t.exports=function(t,n){var e;return void 0===n&&(n=[]),i(n)?e=n:r(n)?e=function(t,e){for(var r=0;r<n.length;r++){var i=n[r];if(t[i]<e[i])return-1;if(t[i]>e[i])return 1}return 0}:o(n)&&(e=function(t,e){return t[n]<e[n]?-1:t[n]>e[n]?1:0}),t.sort(e)}},function(t,n,e){var r=e(3),i=e(156),o=e(6),u=e(19),a=e(39),c=e(157);function f(t,n){var e=t.getColumn(n);return o(e)&&o(e[0])&&(e=i(e)),e}e(84).STATISTICS_METHODS.forEach(function(t){a.prototype[t]=function(n){return u[t](f(this,n))}});var s=u.quantile;r(a.prototype,{average:a.prototype.mean,quantile:function(t,n){return s(f(this,t),n)},quantiles:function(t,n){var e=f(this,t);return n.map(function(t){return s(e,t)})},quantilesByFraction:function(t,n){return this.quantiles(t,c(n))},range:function(t){return[this.min(t),this.max(t)]},extent:function(t){return this.range(t)}})},function(t,n,e){var r=e(10),i=e(40);(0,e(2).registerConnector)("default",function(t,n){if(r(t)&&(t=n.getView(t)),!t)throw new TypeError("Invalid dataView");return i(t.rows)})},function(t,n){var e=function(){var t={};return function(n){return t[n=n||"g"]?t[n]+=1:t[n]=1,n+t[n]}}();t.exports=e},function(t,n,e){var r=e(10),i=e(358),o=i.dsvFormat,u=i.csvParse,a=i.tsvParse,c=e(2).registerConnector;c("dsv",function(t,n){void 0===n&&(n={});var e=n.delimiter||",";if(!r(e))throw new TypeError("Invalid delimiter: must be a string!");return o(e).parse(t)}),c("csv",function(t){return u(t)}),c("tsv",function(t){return a(t)})},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(85);e.d(n,"dsvFormat",function(){return r.a});var i=e(359);e.d(n,"csvParse",function(){return i.c}),e.d(n,"csvParseRows",function(){return i.d}),e.d(n,"csvFormat",function(){return i.a}),e.d(n,"csvFormatRows",function(){return i.b});var o=e(360);e.d(n,"tsvParse",function(){return o.c}),e.d(n,"tsvParseRows",function(){return o.d}),e.d(n,"tsvFormat",function(){return o.a}),e.d(n,"tsvFormatRows",function(){return o.b})},function(t,n,e){"use strict";e.d(n,"c",function(){return o}),e.d(n,"d",function(){return u}),e.d(n,"a",function(){return a}),e.d(n,"b",function(){return c});var r=e(85),i=Object(r.a)(","),o=i.parse,u=i.parseRows,a=i.format,c=i.formatRows},function(t,n,e){"use strict";e.d(n,"c",function(){return o}),e.d(n,"d",function(){return u}),e.d(n,"a",function(){return a}),e.d(n,"b",function(){return c});var r=e(85),i=Object(r.a)("\t"),o=i.parse,u=i.parseRows,a=i.format,c=i.formatRows},function(t,n,e){var r=e(0).geoGraticule;function i(t,n){n.dataType="geo-graticule";var e=r().lines();return e.map(function(t,n){return t.index=""+n,t}),n.rows=e,e}(0,e(2).registerConnector)("geo-graticule",i),t.exports=i},function(t,n){t.exports=function(t){var n=[];return t.replace(r,function(t,r,o){var u=r.toLowerCase();for(o=function(t){var n=t.match(i);return n?n.map(Number):[]}(o),"m"==u&&o.length>2&&(n.push([r].concat(o.splice(0,2))),u="l",r="m"==r?"l":"L");;){if(o.length==e[u])return o.unshift(r),n.push(o);if(o.length<e[u])throw new Error("malformed path data");n.push([r].concat(o.splice(0,e[u])))}}),n};var e={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},r=/([astvzqmhlc])([^astvzqmhlc]*)/gi;var i=/-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi},function(t,n){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},function(t,n){t.exports=function(t){var n=0,e=0,r=0,i=0;return t.map(function(t){var o=(t=t.slice())[0],u=o.toUpperCase();if(o!=u)switch(t[0]=u,o){case"a":t[6]+=r,t[7]+=i;break;case"v":t[1]+=i;break;case"h":t[1]+=r;break;default:for(var a=1;a<t.length;)t[a++]+=r,t[a++]+=i}switch(u){case"Z":r=n,i=e;break;case"H":r=t[1];break;case"V":i=t[1];break;case"M":r=n=t[1],i=e=t[2];break;default:r=t[t.length-2],i=t[t.length-1]}return t})}},function(t,n,e){var r=e(3),i=e(11),o=e(2),u=o.GRAPH,a=o.registerConnector,c={nodes:function(t){return t.nodes},edges:function(t){return t.edges}};function f(t,n,e){n=r({},c,n),e.dataType=u;var o=n,a=o.nodes,f=o.edges;if(a&&!i(a))throw new TypeError("Invalid nodes: must be a function!");if(f&&!i(f))throw new TypeError("Invalid edges: must be a function!");return e.rows=e.graph={nodes:a(t),edges:f(t)},r(e,e.graph),e.rows}a("graph",f),a("diagram",f)},function(t,n,e){var r=e(3),i=e(40),o=e(367),u=o.getGridForHexJSON,a=o.renderHexJSON,c=e(2),f=c.HEX,s=c.registerConnector,l={width:1,height:1};function h(t){return t.cx=t.x,t.cy=t.y,t.x=[],t.y=[],t.vertices.forEach(function(n){t.x.push(n.x+t.cx),t.y.push(n.y+t.cy)}),t}function p(t,n,e){e.dataType=f;var o=n=r({},l,n),c=o.width,s=o.height,p=i(t);e._HexJSON=p;var v=e._GridHexJSON=u(p),d=e.rows=a(p,c,s).map(h);return e._gridRows=a(v,c,s).map(h),d}s("hex",p),s("hexjson",p),s("hex-json",p),s("HexJSON",p),t.exports=p},function(t,n,e){!function(t,n){"use strict";t.renderHexJSON=function(t,e,r){var i=t.layout,o=[],u=0;Object.keys(t.hexes).forEach(function(n){t.hexes[n].key=n,o.push(t.hexes[n])});var a=n.max(o,function(t){return+t.q}),c=n.min(o,function(t){return+t.q}),f=n.max(o,function(t){return+t.r}),s=n.min(o,function(t){return+t.r}),l=a-c+1,h=f-s+1,p=(u="odd-r"===i||"even-r"===i?n.min([e/((l+.5)*Math.sqrt(3)),r/(1.5*(h+1/3))]):n.min([r/((h+.5)*Math.sqrt(3)),e/(1.5*(l+1/3))]))*Math.sqrt(3),v=function(t,n,e){var r=[];switch(t){case"odd-r":case"even-r":r.push({x:0,y:0-e}),r.push({x:0+.5*n,y:0-.5*e}),r.push({x:0+.5*n,y:0+.5*e}),r.push({x:0,y:0+e}),r.push({x:0-.5*n,y:0+.5*e}),r.push({x:0-.5*n,y:0-.5*e});break;case"odd-q":case"even-q":r.push({x:0-e,y:0}),r.push({x:0-.5*e,y:0-.5*n}),r.push({x:0+.5*e,y:0-.5*n}),r.push({x:0+e,y:0}),r.push({x:0+.5*e,y:0+.5*n}),r.push({x:0-.5*e,y:0+.5*n})}return r}(i,p,u),d=function(t){var n="";return t.forEach(function(t){n+=t.x+","+t.y+" "}),n.substring(0,n.length-1)}(v);return o.forEach(function(t){t.qc=t.q-c,t.rc=f-t.r,t.x=function(t,n,e,r){var i=0,o=0;switch(n){case"odd-r":o=t.rc%2==1?e:e/2,i=t.qc*e+o;break;case"even-r":o=t.rc%2==0?e:e/2,i=t.qc*e+o;break;case"odd-q":case"even-q":i=t.qc*r*1.5+r}return i}(t,i,p,u),t.y=function(t,n,e,r){var i=0,o=0;switch(n){case"odd-r":case"even-r":i=t.rc*r*1.5+r;break;case"odd-q":o=t.qc%2==1?e:e/2,i=t.rc*e+o;break;case"even-q":o=t.qc%2==0?e:e/2,i=t.rc*e+o}return i}(t,i,p,u),t.vertices=v,t.points=d}),o},t.getGridForHexJSON=function(t){var e={};e.layout=t.layout,e.hexes={};var r=[];Object.keys(t.hexes).forEach(function(n){r.push(t.hexes[n])});var i,o,u,a=n.max(r,function(t){return+t.q}),c=n.min(r,function(t){return+t.q}),f=n.max(r,function(t){return+t.r}),s=n.min(r,function(t){return+t.r});for(i=c;i<=a;i++)for(o=s;o<=f;o++)u="Q"+i+"R"+o,e.hexes[u]={q:i,r:o};return e},Object.defineProperty(t,"__esModule",{value:!0})}(n,e(14))},function(t,n,e){var r=e(11),i=e(34).hierarchy,o=e(2),u=o.HIERARCHY,a=o.registerConnector;function c(t,n,e){e.dataType=u;var o=n&&n.children?n.children:null;if(o&&!r(o))throw new TypeError("Invalid children: must be a function!");return n.pureData?e.rows=e.root=t:e.rows=e.root=i(t,o),t}a("hierarchy",c),a("tree",c)},function(t,n,e){"use strict";function r(t,n){return t.parent===n.parent?1:2}function i(t,n){return t+n.x}function o(t,n){return Math.max(t,n.y)}n.a=function(){var t=r,n=1,e=1,u=!1;function a(r){var a,c=0;r.eachAfter(function(n){var e=n.children;e?(n.x=function(t){return t.reduce(i,0)/t.length}(e),n.y=function(t){return 1+t.reduce(o,0)}(e)):(n.x=a?c+=t(n,a):0,n.y=0,a=n)});var f=function(t){for(var n;n=t.children;)t=n[0];return t}(r),s=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(r),l=f.x-t(f,s)/2,h=s.x+t(s,f)/2;return r.eachAfter(u?function(t){t.x=(t.x-r.x)*n,t.y=(r.y-t.y)*e}:function(t){t.x=(t.x-l)/(h-l)*n,t.y=(1-(r.y?t.y/r.y:1))*e})}return a.separation=function(n){return arguments.length?(t=n,a):t},a.size=function(t){return arguments.length?(u=!1,n=+t[0],e=+t[1],a):u?null:[n,e]},a.nodeSize=function(t){return arguments.length?(u=!0,n=+t[0],e=+t[1],a):u?[n,e]:null},a}},function(t,n,e){"use strict";function r(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}n.a=function(){return this.eachAfter(r)}},function(t,n,e){"use strict";n.a=function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this}},function(t,n,e){"use strict";n.a=function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this}},function(t,n,e){"use strict";n.a=function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this}},function(t,n,e){"use strict";n.a=function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})}},function(t,n,e){"use strict";n.a=function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})}},function(t,n,e){"use strict";n.a=function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;t=e.pop(),n=r.pop();for(;t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r}},function(t,n,e){"use strict";n.a=function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n}},function(t,n,e){"use strict";n.a=function(){var t=[];return this.each(function(n){t.push(n)}),t}},function(t,n,e){"use strict";n.a=function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t}},function(t,n,e){"use strict";n.a=function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n}},function(t,n,e){"use strict";var r=e(160),i=e(87),o=e(162);function u(t){return Math.sqrt(t.value)}function a(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function c(t,n){return function(e){if(i=e.children){var i,o,u,a=i.length,c=t(e)*n||0;if(c)for(o=0;o<a;++o)i[o].r+=c;if(u=Object(r.b)(i),c)for(o=0;o<a;++o)i[o].r-=c;e.r=u+c}}}function f(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}n.a=function(){var t=null,n=1,e=1,r=o.a;function s(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(a(t)).eachAfter(c(r,.5)).eachBefore(f(1)):i.eachBefore(a(u)).eachAfter(c(o.a,1)).eachAfter(c(r,i.r/Math.min(n,e))).eachBefore(f(Math.min(n,e)/(2*i.r))),i}return s.radius=function(n){return arguments.length?(t=Object(i.a)(n),s):t},s.size=function(t){return arguments.length?(n=+t[0],e=+t[1],s):[n,e]},s.padding=function(t){return arguments.length?(r="function"==typeof t?t:Object(o.b)(+t),s):r},s}},function(t,n,e){"use strict";e.d(n,"b",function(){return r}),n.a=function(t){var n,e,r=t.length;for(;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t};var r=Array.prototype.slice},function(t,n,e){"use strict";var r=e(163),i=e(45);n.a=function(){var t=1,n=1,e=0,o=!1;function u(u){var a=u.height+1;return u.x0=u.y0=e,u.x1=t,u.y1=n/a,u.eachBefore(function(t,n){return function(r){r.children&&Object(i.a)(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var o=r.x0,u=r.y0,a=r.x1-e,c=r.y1-e;a<o&&(o=a=(o+a)/2),c<u&&(u=c=(u+c)/2),r.x0=o,r.y0=u,r.x1=a,r.y1=c}}(n,a)),o&&u.eachBefore(r.a),u}return u.round=function(t){return arguments.length?(o=!!t,u):o},u.size=function(e){return arguments.length?(t=+e[0],n=+e[1],u):[t,n]},u.padding=function(t){return arguments.length?(e=+t,u):e},u}},function(t,n,e){"use strict";var r=e(87),i=e(86),o="$",u={depth:-1},a={};function c(t){return t.id}function f(t){return t.parentId}n.a=function(){var t=c,n=f;function e(e){var r,c,f,s,l,h,p,v=e.length,d=new Array(v),g={};for(c=0;c<v;++c)r=e[c],l=d[c]=new i.a(r),null!=(h=t(r,c,e))&&(h+="")&&(g[p=o+(l.id=h)]=p in g?a:l);for(c=0;c<v;++c)if(l=d[c],null!=(h=n(e[c],c,e))&&(h+="")){if(!(s=g[o+h]))throw new Error("missing: "+h);if(s===a)throw new Error("ambiguous: "+h);s.children?s.children.push(l):s.children=[l],l.parent=s}else{if(f)throw new Error("multiple roots");f=l}if(!f)throw new Error("no root");if(f.parent=u,f.eachBefore(function(t){t.depth=t.parent.depth+1,--v}).eachBefore(i.b),f.parent=null,v>0)throw new Error("cycle");return f}return e.id=function(n){return arguments.length?(t=Object(r.b)(n),e):t},e.parentId=function(t){return arguments.length?(n=Object(r.b)(t),e):n},e}},function(t,n,e){"use strict";var r=e(86);function i(t,n){return t.parent===n.parent?1:2}function o(t){var n=t.children;return n?n[0]:t.t}function u(t){var n=t.children;return n?n[n.length-1]:t.t}function a(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function c(t,n,e){return t.a.parent===n.parent?t.a:e}function f(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}f.prototype=Object.create(r.a.prototype),n.a=function(){var t=i,n=1,e=1,r=null;function s(i){var o=function(t){for(var n,e,r,i,o,u=new f(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new f(r[i],i)),e.parent=n;return(u.parent=new f(null,0)).children=[u],u}(i);if(o.eachAfter(l),o.parent.m=-o.z,o.eachBefore(h),r)i.eachBefore(p);else{var u=i,a=i,c=i;i.eachBefore(function(t){t.x<u.x&&(u=t),t.x>a.x&&(a=t),t.depth>c.depth&&(c=t)});var s=u===a?1:t(u,a)/2,v=s-u.x,d=n/(a.x+s+v),g=e/(c.depth||1);i.eachBefore(function(t){t.x=(t.x+v)*d,t.y=t.depth*g})}return i}function l(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var f=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-f):n.z=f}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,f=n,s=n,l=e,h=f.parent.children[0],p=f.m,v=s.m,d=l.m,g=h.m;l=u(l),f=o(f),l&&f;)h=o(h),(s=u(s)).a=n,(i=l.z+d-f.z-p+t(l._,f._))>0&&(a(c(l,n,r),n,i),p+=i,v+=i),d+=l.m,p+=f.m,g+=h.m,v+=s.m;l&&!u(s)&&(s.t=l,s.m+=d-v),f&&!o(h)&&(h.t=f,h.m+=p-g,r=n)}return r}(n,i,n.parent.A||r[0])}function h(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function p(t){t.x*=n,t.y=t.depth*e}return s.separation=function(n){return arguments.length?(t=n,s):t},s.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],s):r?null:[n,e]},s.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],s):r?[n,e]:null},s}},function(t,n,e){"use strict";var r=e(163),i=e(88),o=e(87),u=e(162);n.a=function(){var t=i.a,n=!1,e=1,a=1,c=[0],f=u.a,s=u.a,l=u.a,h=u.a,p=u.a;function v(t){return t.x0=t.y0=0,t.x1=e,t.y1=a,t.eachBefore(d),c=[0],n&&t.eachBefore(r.a),t}function d(n){var e=c[n.depth],r=n.x0+e,i=n.y0+e,o=n.x1-e,u=n.y1-e;o<r&&(r=o=(r+o)/2),u<i&&(i=u=(i+u)/2),n.x0=r,n.y0=i,n.x1=o,n.y1=u,n.children&&(e=c[n.depth+1]=f(n)/2,r+=p(n)-e,i+=s(n)-e,o-=l(n)-e,u-=h(n)-e,o<r&&(r=o=(r+o)/2),u<i&&(i=u=(i+u)/2),t(n,r,i,o,u))}return v.round=function(t){return arguments.length?(n=!!t,v):n},v.size=function(t){return arguments.length?(e=+t[0],a=+t[1],v):[e,a]},v.tile=function(n){return arguments.length?(t=Object(o.b)(n),v):t},v.padding=function(t){return arguments.length?v.paddingInner(t).paddingOuter(t):v.paddingInner()},v.paddingInner=function(t){return arguments.length?(f="function"==typeof t?t:Object(u.b)(+t),v):f},v.paddingOuter=function(t){return arguments.length?v.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):v.paddingTop()},v.paddingTop=function(t){return arguments.length?(s="function"==typeof t?t:Object(u.b)(+t),v):s},v.paddingRight=function(t){return arguments.length?(l="function"==typeof t?t:Object(u.b)(+t),v):l},v.paddingBottom=function(t){return arguments.length?(h="function"==typeof t?t:Object(u.b)(+t),v):h},v.paddingLeft=function(t){return arguments.length?(p="function"==typeof t?t:Object(u.b)(+t),v):p},v}},function(t,n,e){"use strict";n.a=function(t,n,e,r,i){var o,u,a=t.children,c=a.length,f=new Array(c+1);for(f[0]=u=o=0;o<c;++o)f[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var s=a[n];return s.x0=i,s.y0=o,s.x1=u,void(s.y1=c)}var l=f[n],h=r/2+l,p=n+1,v=e-1;for(;p<v;){var d=p+v>>>1;f[d]<h?p=d+1:v=d}h-f[p-1]<f[p]-h&&n+1<p&&--p;var g=f[p]-l,b=r-g;if(u-i>c-o){var y=(i*b+u*g)/r;t(n,p,g,i,o,y,c),t(p,e,b,y,o,u,c)}else{var j=(o*b+c*g)/r;t(n,p,g,i,o,u,j),t(p,e,b,i,j,u,c)}}(0,c,t.value,n,e,r,i)}},function(t,n,e){"use strict";var r=e(45),i=e(55);n.a=function(t,n,e,o,u){(1&t.depth?i.a:r.a)(t,n,e,o,u)}},function(t,n,e){"use strict";var r=e(45),i=e(55),o=e(88);n.a=function t(n){function e(t,e,u,a,c){if((f=t._squarify)&&f.ratio===n)for(var f,s,l,h,p,v=-1,d=f.length,g=t.value;++v<d;){for(l=(s=f[v]).children,h=s.value=0,p=l.length;h<p;++h)s.value+=l[h].value;s.dice?Object(r.a)(s,e,u,a,u+=(c-u)*s.value/g):Object(i.a)(s,e,u,e+=(a-e)*s.value/g,c),g-=s.value}else t._squarify=f=Object(o.c)(n,t,e,u,a,c),f.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(o.b)},function(t,n,e){var r=e(10),i=e(391).feature,o=e(158),u=e(2).registerConnector;function a(t,n,e){var u=n.object;if(!r(u))throw new TypeError("Invalid object: must be a string!");var a=i(t,t.objects[u]);return o(a,n,e)}u("topojson",a),u("TopoJSON",a)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(164);e.d(n,"bbox",function(){return r.a});var i=e(90);e.d(n,"feature",function(){return i.a});var o=e(393);e.d(n,"mesh",function(){return o.a}),e.d(n,"meshArcs",function(){return o.b});var u=e(394);e.d(n,"merge",function(){return u.a}),e.d(n,"mergeArcs",function(){return u.b});var a=e(395);e.d(n,"neighbors",function(){return a.a});var c=e(397);e.d(n,"quantize",function(){return c.a});var f=e(89);e.d(n,"transform",function(){return f.a});var s=e(167);e.d(n,"untransform",function(){return s.a})},function(t,n,e){"use strict";n.a=function(t,n){for(var e,r=t.length,i=r-n;i<--r;)e=t[i],t[i++]=t[r],t[r]=e}},function(t,n,e){"use strict";n.b=o;var r=e(90),i=e(166);function o(t,n,e){var r,o,u;if(arguments.length>1)r=function(t,n,e){var r,i=[],o=[];function u(t){var n=t<0?~t:t;(o[n]||(o[n]=[])).push({i:t,g:r})}function a(t){t.forEach(u)}function c(t){t.forEach(a)}return function t(n){switch(r=n,n.type){case"GeometryCollection":n.geometries.forEach(t);break;case"LineString":a(n.arcs);break;case"MultiLineString":case"Polygon":c(n.arcs);break;case"MultiPolygon":!function(t){t.forEach(c)}(n.arcs)}}(n),o.forEach(null==e?function(t){i.push(t[0].i)}:function(t){e(t[0].g,t[t.length-1].g)&&i.push(t[0].i)}),i}(0,n,e);else for(o=0,r=new Array(u=t.arcs.length);o<u;++o)r[o]=o;return{type:"MultiLineString",arcs:Object(i.a)(t,r)}}n.a=function(t){return Object(r.b)(t,o.apply(this,arguments))}},function(t,n,e){"use strict";n.b=o;var r=e(90),i=e(166);function o(t,n){var e={},o=[],u=[];function a(t){t.forEach(function(n){n.forEach(function(n){(e[n=n<0?~n:n]||(e[n]=[])).push(t)})}),o.push(t)}function c(n){return function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[0]*i[1]-n[1]*i[0];return Math.abs(o)}(Object(r.b)(t,{type:"Polygon",arcs:[n]}).coordinates[0])}return n.forEach(function t(n){switch(n.type){case"GeometryCollection":n.geometries.forEach(t);break;case"Polygon":a(n.arcs);break;case"MultiPolygon":n.arcs.forEach(a)}}),o.forEach(function(t){if(!t._){var n=[],r=[t];for(t._=1,u.push(n);t=r.pop();)n.push(t),t.forEach(function(t){t.forEach(function(t){e[t<0?~t:t].forEach(function(t){t._||(t._=1,r.push(t))})})})}}),o.forEach(function(t){delete t._}),{type:"MultiPolygon",arcs:u.map(function(n){var r,o=[];if(n.forEach(function(t){t.forEach(function(t){t.forEach(function(t){e[t<0?~t:t].length<2&&o.push(t)})})}),(r=(o=Object(i.a)(t,o)).length)>1)for(var u,a,f=1,s=c(o[0]);f<r;++f)(u=c(o[f]))>s&&(a=o[0],o[0]=o[f],o[f]=a,s=u);return o})}}n.a=function(t){return Object(r.b)(t,o.apply(this,arguments))}},function(t,n,e){"use strict";var r=e(396);n.a=function(t){var n={},e=t.map(function(){return[]});function i(t,e){t.forEach(function(t){t<0&&(t=~t);var r=n[t];r?r.push(e):n[t]=[e]})}function o(t,n){t.forEach(function(t){i(t,n)})}var u={LineString:i,MultiLineString:o,Polygon:o,MultiPolygon:function(t,n){t.forEach(function(t){o(t,n)})}};for(var a in t.forEach(function t(n,e){"GeometryCollection"===n.type?n.geometries.forEach(function(n){t(n,e)}):n.type in u&&u[n.type](n.arcs,e)}),n)for(var c=n[a],f=c.length,s=0;s<f;++s)for(var l=s+1;l<f;++l){var h,p=c[s],v=c[l];(h=e[p])[a=Object(r.a)(h,v)]!==v&&h.splice(a,0,v),(h=e[v])[a=Object(r.a)(h,p)]!==p&&h.splice(a,0,p)}return e}},function(t,n,e){"use strict";n.a=function(t,n){for(var e=0,r=t.length;e<r;){var i=e+r>>>1;t[i]<n?e=i+1:r=i}return e}},function(t,n,e){"use strict";var r=e(164),i=e(167);n.a=function(t,n){if(t.transform)throw new Error("already quantized");if(n&&n.scale)f=t.bbox;else{if(!((e=Math.floor(n))>=2))throw new Error("n must be ≥2");var e,o=(f=t.bbox||Object(r.a)(t))[0],u=f[1],a=f[2],c=f[3];n={scale:[a-o?(a-o)/(e-1):1,c-u?(c-u)/(e-1):1],translate:[o,u]}}var f,s,l=Object(i.a)(n),h=t.objects,p={};function v(t){return l(t)}function d(t){var n;switch(t.type){case"GeometryCollection":n={type:"GeometryCollection",geometries:t.geometries.map(d)};break;case"Point":n={type:"Point",coordinates:v(t.coordinates)};break;case"MultiPoint":n={type:"MultiPoint",coordinates:t.coordinates.map(v)};break;default:return t}return null!=t.id&&(n.id=t.id),null!=t.bbox&&(n.bbox=t.bbox),null!=t.properties&&(n.properties=t.properties),n}for(s in h)p[s]=d(h[s]);return{type:"Topology",bbox:f,transform:n,objects:p,arcs:t.arcs.map(function(t){var n,e=0,r=1,i=t.length,o=new Array(i);for(o[0]=l(t[0],0);++e<i;)((n=l(t[e],e))[0]||n[1])&&(o[r++]=n);return 1===r&&(o[r++]=[0,0]),o.length=r,o})}}},function(t,n,e){(0,e(2).registerTransform)("default",function(t){return t})},function(t,n,e){function r(t){return!!t}(0,e(2).registerTransform)("filter",function(t,n){void 0===n&&(n={}),t.rows=t.rows.filter(n.callback||r)})},function(t,n,e){var r=e(3),i=e(401),o=e(32),u=e(2).registerTransform,a=e(7).getFields,c={fields:[],key:"key",retains:[],value:"value"};u("fold",function(t,n){var e=t.getColumnNames();n=r({},c,n);var u=a(n);0===u.length&&(console.warn("warning: option fields is not specified, will fold all columns."),u=e);var f=n.key,s=n.value,l=n.retains;0===l.length&&(l=i(e,u));var h=[];t.rows.forEach(function(t){u.forEach(function(n){var e=o(t,l);e[f]=n,e[s]=t[n],h.push(e)})}),t.rows=h})},function(t,n,e){var r=e(402),i=e(168);t.exports=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return r(t,function(t){return!i(n,t)})}},function(t,n,e){var r=e(9),i=e(91);t.exports=function(t,n){if(!i(t))return t;var e=[];return r(t,function(t,r){n(t,r)&&e.push(t)}),e}},function(t,n,e){function r(t){return t}(0,e(2).registerTransform)("map",function(t,n){void 0===n&&(n={}),t.rows=t.rows.map(n.callback||r)})},function(t,n,e){var r=e(3),i=e(83),o=e(15),u=e(2).registerTransform,a={groupBy:[],orderBy:[]};function c(t,n){void 0===n&&(n={}),n=r({},a,n),t.rows=i(o(t.rows,n.groupBy,n.orderBy))}u("partition",function(t,n){void 0===n&&(n={}),n=r({},a,n),t.rows=o(t.rows,n.groupBy,n.orderBy)}),u("group",c),u("groups",c)},function(t,n,e){var r=e(3),i=e(9),o=e(6),u=e(10),a=e(19).sum,c=e(15),f=e(2).registerTransform,s=e(7).getField,l={groupBy:[],as:"_percent"};f("percent",function(t,n){void 0===n&&(n={}),n=r({},l,n);var e=s(n),f=n.dimension,h=n.groupBy,p=n.as;if(!u(f))throw new TypeError("Invalid dimension: must be a string!");if(o(p)&&(console.warn("Invalid as: must be a string, will use the first element of the array specified."),p=p[0]),!u(p))throw new TypeError("Invalid as: must be a string!");var v=t.rows,d=[],g=c(v,h);i(g,function(t){var n=a(t.map(function(t){return t[e]}));0===n&&console.warn("Invalid data: total sum of field "+e+" is 0!");var r=c(t,[f]);i(r,function(t){var r=a(t.map(function(t){return t[e]})),i=t[0],o=i[f];i[e]=r,i[f]=o,i[p]=0===n?0:r/n,d.push(i)})}),t.rows=d})},function(t,n,e){var r=e(32),i=e(2).registerTransform,o=e(7).getFields;i("pick",function(t,n){void 0===n&&(n={});var e=o(n,t.getColumnNames());t.rows=t.rows.map(function(t){return r(t,e)})})},function(t,n,e){var r=e(3),i=e(9),o=e(6),u=e(10),a=e(15),c=e(2).registerTransform,f=e(7).getField,s={groupBy:[],as:"_proportion"};c("proportion",function(t,n){void 0===n&&(n={}),n=r({},s,n);var e=f(n),c=n.dimension,l=n.groupBy,h=n.as;if(!u(c))throw new TypeError("Invalid dimension: must be a string!");if(o(h)&&(console.warn("Invalid as: must be a string, will use the first element of the array specified."),h=h[0]),!u(h))throw new TypeError("Invalid as: must be a string!");var p=t.rows,v=[],d=a(p,l);i(d,function(t){var n=t.length,r=a(t,[c]);i(r,function(t){var r=t.length,i=t[0],o=i[c];i[e]=r,i[c]=o,i[h]=r/n,v.push(i)})}),t.rows=v})},function(t,n,e){var r=e(9),i=e(54),o=e(10),u=e(2).registerTransform;function a(t,n){void 0===n&&(n={});var e=n.map||{},u={};i(e)&&r(e,function(t,n){o(t)&&o(n)&&(u[n]=t)}),t.rows.forEach(function(t){r(e,function(n,e){var r=t[e];delete t[e],t[n]=r})})}u("rename",a),u("rename-fields",a)},function(t,n,e){(0,e(2).registerTransform)("reverse",function(t){t.rows.reverse()})},function(t,n,e){(0,e(2).registerTransform)("sort",function(t,n){void 0===n&&(n={});var e=t.getColumnName(0);t.rows.sort(n.callback||function(t,n){return t[e]-n[e]})})},function(t,n,e){var r=e(6),i=e(412),o=e(2).registerTransform,u=e(7).getFields,a=["ASC","DESC"];function c(t,n){void 0===n&&(n={});var e=u(n,[t.getColumnName(0)]);if(!r(e))throw new TypeError("Invalid fields: must be an array with strings!");t.rows=i(t.rows,e);var o=n.order;if(o&&-1===a.indexOf(o))throw new TypeError("Invalid order: "+o+" must be one of "+a.join(", "));"DESC"===o&&t.rows.reverse()}o("sort-by",c),o("sortBy",c)},function(t,n,e){var r=e(10),i=e(11),o=e(6);t.exports=function(t,n){var e=void 0;if(i(n))e=function(t,e){return n(t)-n(e)};else{var u=[];r(n)?u.push(n):o(n)&&(u=n),e=function(t,n){for(var e=0;e<u.length;e+=1){var r=u[e];if(t[r]>n[r])return 1;if(t[r]<n[r])return-1}return 0}}return t.sort(e),t}},function(t,n,e){var r=e(2).registerTransform,i=e(7).getFields;r("subset",function(t,n){void 0===n&&(n={});var e=n.startRowIndex||0,r=n.endRowIndex||t.rows.length-1,o=i(n,t.getColumnNames());t.rows=t.getSubset(e,r,o)})},function(t,n,e){var r=e(3),i=e(9),o=e(15),u=e(2).registerTransform,a={fillBy:"group",groupBy:[],orderBy:[]};function c(t,n){var e=t.map(function(t){return t});return n.forEach(function(t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}),e}function f(t,n){void 0===n&&(n={}),n=r({},a,n);var e=t.rows,u=n.groupBy,f=n.orderBy,s=o(e,u,f),l=0,h=[];i(s,function(t){t.length>l&&(l=t.length,h=t)});var p=[],v={};if(h.forEach(function(t){var n=f.map(function(n){return t[n]}).join("-");p.push(n),v[n]=t}),"order"===n.fillBy){var d=h[0],g=[],b={};e.forEach(function(t){var n=f.map(function(n){return t[n]}).join("-");-1===g.indexOf(n)&&(g.push(n),b[n]=t)}),c(g,p).forEach(function(t){var n={};u.forEach(function(t){n[t]=d[t]}),f.forEach(function(e){n[e]=b[t][e]}),e.push(n),h.push(n),p.push(t),v[t]=n}),l=h.length}i(s,function(t){if(t!==h&&t.length<l){var n=t[0],r=[];t.forEach(function(t){r.push(f.map(function(n){return t[n]}).join("-"))}),c(p,r).some(function(r,i){if(i>=l-t.length)return!0;var o=v[r],a={};return u.forEach(function(t){a[t]=n[t]}),f.forEach(function(t){a[t]=o[t]}),e.push(a),!1})}})}u("fill-rows",f),u("fillRows",f)},function(t,n,e){var r=e(3),i=e(9),o=e(416),u=e(11),a=e(417),c=e(10),f=e(19),s=e(15),l=e(2).registerTransform,h=e(7).getField,p={groupBy:[]};function v(t){return t.filter(function(t){return!a(t)})}var d=["mean","median","max","min"],g={};d.forEach(function(t){g[t]=function(n,e){return f[t](e)}}),g.value=function(t,n,e){return e},l("impute",function(t,n){void 0===n&&(n={}),n=r({},p,n);var e=h(n),f=n.method;if(!f)throw new TypeError("Invalid method!");if("value"===f&&!o(n,"value"))throw new TypeError("Invalid value: it is nil.");var l=v(t.getColumn(e)),b=s(t.rows,n.groupBy);i(b,function(t){var r=v(t.map(function(t){return t[e]}));0===r.length&&(r=l),t.forEach(function(i){if(a(i[e]))if(u(f))i[e]=f(i,r,n.value,t);else{if(!c(f))throw new TypeError("Invalid method: must be a function or one of "+d.join(", "));i[e]=g[f](i,r,n.value)}})})})},function(t,n){t.exports=function(t,n){return t.hasOwnProperty(n)}},function(t,n){t.exports=function(t){return void 0===t}},function(t,n,e){var r=e(3),i=e(156),o=e(9),u=e(6),a=e(10),c=e(24),f=e(419),s=e(19),l=e(15),h=e(2).registerTransform,p=e(84).STATISTICS_METHODS,v=e(7).getFields,d={as:[],fields:[],groupBy:[],operations:[]},g="count",b={count:function(t){return t.length},distinct:function(t,n){return f(t.map(function(t){return t[n]})).length}};function y(t,n){n=r({},d,n);var e=v(n);if(!u(e))throw new TypeError("Invalid fields: it must be an array with one or more strings!");var i=n.as||[];a(i)&&(i=[i]);var c=n.operations;a(c)&&(c=[c]);var f=[g];if(u(c)&&c.length||(console.warn('operations is not defined, will use [ "count" ] directly.'),i=c=f),1!==c.length||c[0]!==g){if(c.length!==e.length)throw new TypeError("Invalid operations: it's length must be the same as fields!");if(i.length!==e.length)throw new TypeError("Invalid as: it's length must be the same as fields!")}var s=l(t.rows,n.groupBy),h=[];o(s,function(t){var n=t[0];c.forEach(function(r,o){var u=i[o],a=e[o];n[u]=b[r](t,a)}),h.push(n)}),t.rows=h}p.forEach(function(t){b[t]=function(n,e){var r=n.map(function(t){return t[e]});return u(r)&&u(r[0])&&(r=i(r)),s[t](r)}}),b.average=b.mean,h("aggregate",y),h("summary",y),t.exports={VALID_AGGREGATES:c(b)}},function(t,n,e){var r=e(9),i=e(168);t.exports=function(t){var n=[];return r(t,function(t){i(n,t)||n.push(t)}),n}},function(t,n,e){var r=e(3),i=e(6),o=e(56),u=e(421),a=e(57),c=e(2).registerTransform,f=e(7).getFields,s=e(58).silverman,l={as:["x","y"],method:"linear",order:2,precision:2},h=["linear","exponential","logarithmic","power","polynomial"];c("regression",function(t,n){n=r({},l,n);var e=f(n);if(!i(e)||2!==e.length)throw new TypeError("invalid fields: must be an array of 2 strings.");var c=e[0],p=e[1],v=n.method;if(-1===h.indexOf(v))throw new TypeError("invalid method: "+v+". Must be one of "+h.join(", "));var d=t.rows.map(function(t){return[t[c],t[p]]}),g=u[v](d,n),b=n.extent;i(b)&&2===b.length||(b=t.range(c));var y=n.bandwidth;(!o(y)||y<=0)&&(y=s(t.getColumn(c)));var j=a(b,y),O=[],_=n.as,m=_[0],w=_[1];j.forEach(function(t){var n={},e=g.predict(t),r=e[0],i=e[1];n[m]=r,n[w]=i,isFinite(i)&&O.push(n)}),t.rows=O}),t.exports={REGRESSION_METHODS:h}},function(t,n,e){var r,i,o;i=[t],void 0===(o="function"==typeof(r=function(t){"use strict";var n=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},e={order:2,precision:2,period:null};function r(t,n){var e=[],r=[];t.forEach(function(t,i){null!==t[1]&&(r.push(t),e.push(n[i]))});var i=r.reduce(function(t,n){return t+n[1]},0),o=i/r.length,u=r.reduce(function(t,n){var e=n[1]-o;return t+e*e},0),a=r.reduce(function(t,n,r){var i=e[r],o=n[1]-i[1];return t+o*o},0);return 1-a/u}function i(t,n){var e=Math.pow(10,n);return Math.round(t*e)/e}var o={linear:function(t,n){for(var e=[0,0,0,0,0],o=0,u=0;u<t.length;u++)null!==t[u][1]&&(o++,e[0]+=t[u][0],e[1]+=t[u][1],e[2]+=t[u][0]*t[u][0],e[3]+=t[u][0]*t[u][1],e[4]+=t[u][1]*t[u][1]);var a=o*e[2]-e[0]*e[0],c=o*e[3]-e[0]*e[1],f=0===a?0:i(c/a,n.precision),s=i(e[1]/o-f*e[0]/o,n.precision),l=function(t){return[i(t,n.precision),i(f*t+s,n.precision)]},h=t.map(function(t){return l(t[0])});return{points:h,predict:l,equation:[f,s],r2:i(r(t,h),n.precision),string:0===s?"y = "+f+"x":"y = "+f+"x + "+s}},exponential:function(t,n){for(var e=[0,0,0,0,0,0],o=0;o<t.length;o++)null!==t[o][1]&&(e[0]+=t[o][0],e[1]+=t[o][1],e[2]+=t[o][0]*t[o][0]*t[o][1],e[3]+=t[o][1]*Math.log(t[o][1]),e[4]+=t[o][0]*t[o][1]*Math.log(t[o][1]),e[5]+=t[o][0]*t[o][1]);var u=e[1]*e[2]-e[5]*e[5],a=Math.exp((e[2]*e[3]-e[5]*e[4])/u),c=(e[1]*e[4]-e[5]*e[3])/u,f=i(a,n.precision),s=i(c,n.precision),l=function(t){return[i(t,n.precision),i(f*Math.exp(s*t),n.precision)]},h=t.map(function(t){return l(t[0])});return{points:h,predict:l,equation:[f,s],string:"y = "+f+"e^("+s+"x)",r2:i(r(t,h),n.precision)}},logarithmic:function(t,n){for(var e=[0,0,0,0],o=t.length,u=0;u<o;u++)null!==t[u][1]&&(e[0]+=Math.log(t[u][0]),e[1]+=t[u][1]*Math.log(t[u][0]),e[2]+=t[u][1],e[3]+=Math.pow(Math.log(t[u][0]),2));var a=(o*e[1]-e[2]*e[0])/(o*e[3]-e[0]*e[0]),c=i(a,n.precision),f=i((e[2]-c*e[0])/o,n.precision),s=function(t){return[i(t,n.precision),i(i(f+c*Math.log(t),n.precision),n.precision)]},l=t.map(function(t){return s(t[0])});return{points:l,predict:s,equation:[f,c],string:"y = "+f+" + "+c+" ln(x)",r2:i(r(t,l),n.precision)}},power:function(t,n){for(var e=[0,0,0,0,0],o=t.length,u=0;u<o;u++)null!==t[u][1]&&(e[0]+=Math.log(t[u][0]),e[1]+=Math.log(t[u][1])*Math.log(t[u][0]),e[2]+=Math.log(t[u][1]),e[3]+=Math.pow(Math.log(t[u][0]),2));var a=(o*e[1]-e[0]*e[2])/(o*e[3]-Math.pow(e[0],2)),c=(e[2]-a*e[0])/o,f=i(Math.exp(c),n.precision),s=i(a,n.precision),l=function(t){return[i(t,n.precision),i(i(f*Math.pow(t,s),n.precision),n.precision)]},h=t.map(function(t){return l(t[0])});return{points:h,predict:l,equation:[f,s],string:"y = "+f+"x^"+s,r2:i(r(t,h),n.precision)}},polynomial:function(t,n){for(var e=[],o=[],u=0,a=0,c=t.length,f=n.order+1,s=0;s<f;s++){for(var l=0;l<c;l++)null!==t[l][1]&&(u+=Math.pow(t[l][0],s)*t[l][1]);e.push(u),u=0;for(var h=[],p=0;p<f;p++){for(var v=0;v<c;v++)null!==t[v][1]&&(a+=Math.pow(t[v][0],s+p));h.push(a),a=0}o.push(h)}o.push(e);for(var d=function(t,n){for(var e=t,r=t.length-1,i=[n],o=0;o<r;o++){for(var u=o,a=o+1;a<r;a++)Math.abs(e[o][a])>Math.abs(e[o][u])&&(u=a);for(var c=o;c<r+1;c++){var f=e[c][o];e[c][o]=e[c][u],e[c][u]=f}for(var s=o+1;s<r;s++)for(var l=r;l>=o;l--)e[l][s]-=e[l][o]*e[o][s]/e[o][o]}for(var h=r-1;h>=0;h--){for(var p=0,v=h+1;v<r;v++)p+=e[v][h]*i[v];i[h]=(e[r][h]-p)/e[h][h]}return i}(o,f).map(function(t){return i(t,n.precision)}),g=function(t){return[i(t,n.precision),i(d.reduce(function(n,e,r){return n+e*Math.pow(t,r)},0),n.precision)]},b=t.map(function(t){return g(t[0])}),y="y = ",j=d.length-1;j>=0;j--)y+=j>1?d[j]+"x^"+j+" + ":1===j?d[j]+"x + ":d[j];return{string:y,points:b,predict:g,equation:[].concat(function(t){if(Array.isArray(t)){for(var n=0,e=Array(t.length);n<t.length;n++)e[n]=t[n];return e}return Array.from(t)}(d)).reverse(),r2:i(r(t,b),n.precision)}}};t.exports=Object.keys(o).reduce(function(t,r){return n({_round:i},t,function(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}({},r,function(t,i){return o[r](t,n({},e,i))}))},{})})?r.apply(n,i):r)||(t.exports=o)},function(t,n,e){var r=e(3),i=e(9),o=e(9),u=e(6),a=e(11),c=e(56),f=e(10),s=e(24),l=e(32),h=e(57),p=e(92),v=e(58),d=e(15),g=e(2).registerTransform,b=e(7).getFields,y=e(19).kernelDensityEstimation,j={minSize:.01,as:["key","y","size"],extent:[],method:"gaussian",bandwidth:"nrd",step:0,groupBy:[]},O=s(p),_=s(v);function m(t,n){n=r({},j,n);var e=b(n);if(!u(e)||e.length<1)throw new TypeError("invalid fields: must be an array of at least 1 strings!");var s=n.as;if(!u(s)||3!==s.length)throw new TypeError("invalid as: must be an array of 3 strings!");var g=n.method;if(f(g)){if(-1===O.indexOf(g))throw new TypeError("invalid method: "+g+". Must be one of "+O.join(", "));g=p[g]}if(!a(g))throw new TypeError("invalid method: kernel method must be a function!");var _=n.extent;if(!u(_)||0===_.length){var m=[];i(e,function(n){var e=t.range(n);m=m.concat(e)}),_=[Math.min.apply(Math,m),Math.max.apply(Math,m)]}var w=n.bandwidth;f(w)&&v[w]?w=v[w](t.getColumn(e[0])):a(w)?w=w(t.getColumn(e[0])):(!c(w)||w<=0)&&(w=v.nrd(t.getColumn(e[0])));var x=h(_,n.step?n.step:w),E=[],M=n.groupBy,T=d(t.rows,M);o(T,function(t){var r={};i(e,function(e){var o=l(t[0],M);r[e]=y(t.map(function(t){return t[e]}),g,w);var u=s[0],a=s[1],c=s[2];o[u]=e,o[a]=[],o[c]=[],i(x,function(t){var i=r[e](t);i>=n.minSize&&(o[a].push(t),o[c].push(i))}),E.push(o)})}),t.rows=E}g("kernel-density-estimation",m),g("kde",m),g("KDE",m),t.exports={KERNEL_METHODS:O,BANDWIDTH_METHODS:_}},function(t,n,e){var r=e(3),i=e(9),o=e(6),u=e(2).registerTransform,a=e(7).getFields,c={as:["x","y","count"],bins:[30,30],offset:[0,0],sizeByCount:!1},f=Math.sqrt(3),s=Math.PI/3,l=[0,s,2*s,3*s,4*s,5*s];function h(t,n,e,r){return Math.sqrt((t-e)*(t-e)+(n-r)*(n-r))}function p(t,n,e){var r=t-e;n/=2;var i=Math.floor(r/n);return[n*(i+(1===Math.abs(i%2)?1:0))+e,n*(i+(1===Math.abs(i%2)?0:1))+e]}function v(t,n){n=r({},c,n);var e=a(n);if(!o(e)||2!==e.length)throw new TypeError("Invalid fields: it must be an array with 2 strings!");var u=e[0],s=e[1],v=t.range(u),d=t.range(s),g=v[1]-v[0],b=d[1]-d[0],y=n.binWidth||[];if(2!==y.length){var j=n.bins,O=j[0],_=j[1];if(O<=0||_<=0)throw new TypeError("Invalid bins: must be an array with two positive numbers (e.g. [ 30, 30 ])!");y=[g/O,b/_]}var m=n.offset,w=m[0],x=m[1],E=3*y[0]/(f*y[1]),M=function(t,n,e){void 0===n&&(n=[1,1]),void 0===e&&(e=[0,0]);var r={},i=n,o=i[0],u=i[1],a=e,c=a[0],f=a[1];return t.forEach(function(t){var n,e,i,a=t[0],s=t[1],l=p(a,o,c),v=l[0],d=l[1],g=p(s,u,f),b=g[0],y=g[1];h(a,s,v,b)<h(a,s,d,y)?(n="x"+v+"y"+b,e=v,i=b):(n="x"+d+"y"+y,e=d,i=y),r[n]=r[n]||{x:e,y:i,count:0},r[n].count++}),r}(t.rows.map(function(t){return[t[u],E*t[s]]}),[y[0],E*y[1]],[w,E*x]),T=n.as,S=T[0],k=T[1],C=T[2];if(!S||!k||!C)throw new TypeError('Invalid as: it must be an array with three elements (e.g. [ "x", "y", "count" ])!');var P=y[0]/f,N=l.map(function(t){return[Math.sin(t)*P,-Math.cos(t)*P]}),R=[],B=0;n.sizeByCount&&i(M,function(t){t.count>B&&(B=t.count)}),i(M,function(t){var e=t.x,r=t.y,i=t.count,o={};o[C]=i,n.sizeByCount?(o[S]=N.map(function(n){return e+t.count/B*n[0]}),o[k]=N.map(function(n){return(r+t.count/B*n[1])/E})):(o[S]=N.map(function(t){return e+t[0]}),o[k]=N.map(function(t){return(r+t[1])/E})),R.push(o)}),t.rows=R}u("bin.hexagon",v),u("bin.hex",v),u("hexbin",v)},function(t,n,e){var r=e(3),i=e(9),o=e(32),u=e(15),a=e(2).registerTransform,c=e(7).getField,f={as:["x","count"],bins:30,offset:0,groupBy:[]};function s(t,n){n=r({},f,n);var e=c(n);if(0!==t.rows.length){var a=t.range(e),s=a[1]-a[0],l=n.binWidth;if(!l){var h=n.bins;if(h<=0)throw new TypeError("Invalid bins: it must be a positive number!");l=s/h}var p=n.offset%l,v=[],d=n.groupBy,g=u(t.rows,d);i(g,function(t){var u={};t.map(function(t){return t[e]}).forEach(function(t){var n=function(t,n,e){var r=t-e,i=Math.floor(r/n);return[i*n+e,(i+1)*n+e]}(t,l,p),e=n[0],r=n[1],i=e+"-"+r;u[i]=u[i]||{x0:e,x1:r,count:0},u[i].count++});var a=n.as,c=a[0],f=a[1];if(!c||!f)throw new TypeError('Invalid as: it must be an array with 2 elements (e.g. [ "x", "count" ])!');var s=o(t[0],d);i(u,function(t){var n=r({},s);n[c]=[t.x0,t.x1],n[f]=t.count,v.push(n)})}),t.rows=v}}a("bin.histogram",s),a("bin.dot",s)},function(t,n,e){var r=e(3),i=e(9),o=e(6),u=e(10),a=e(19).quantile,c=e(15),f=e(157),s=e(2).registerTransform,l=e(7).getField,h={as:"_bin",groupBy:[],fraction:4};s("bin.quantile",function(t,n){n=r({},h,n);var e=l(n),s=n.as;if(!u(s))throw new TypeError('Invalid as: it must be a string (e.g. "_bin")!');var p=n.p,v=n.fraction;o(p)&&0!==p.length||(p=f(v));var d=t.rows,g=n.groupBy,b=c(d,g),y=[];i(b,function(t){var n=t[0],r=t.map(function(t){return t[e]}),i=p.map(function(t){return a(r,t)});n[s]=i,y.push(n)}),t.rows=y})},function(t,n,e){var r=e(3),i=e(9),o=e(2).registerTransform,u=e(7).getFields,a={as:["x","y","count"],bins:[30,30],offset:[0,0],sizeByCount:!1};function c(t,n,e){var r=t-e,i=Math.floor(r/n);return[i*n+e,(i+1)*n+e]}function f(t,n){n=r({},a,n);var e=u(n),o=e[0],f=e[1];if(!o||!f)throw new TypeError("Invalid fields: must be an array with 2 strings!");var s=t.range(o),l=t.range(f),h=s[1]-s[0],p=l[1]-l[0],v=n.binWidth||[];if(2!==v.length){var d=n.bins,g=d[0],b=d[1];if(g<=0||b<=0)throw new TypeError("Invalid bins: must be an array with 2 positive numbers (e.g. [ 30, 30 ])!");v=[h/g,p/b]}var y=t.rows.map(function(t){return[t[o],t[f]]}),j={},O=n.offset,_=O[0],m=O[1];y.forEach(function(t){var n=c(t[0],v[0],_),e=n[0],r=n[1],i=c(t[1],v[1],m),o=i[0],u=i[1],a=e+"-"+r+"-"+o+"-"+u;j[a]=j[a]||{x0:e,x1:r,y0:o,y1:u,count:0},j[a].count++});var w=[],x=n.as,E=x[0],M=x[1],T=x[2];if(!E||!M||!T)throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ "x", "y", "count" ])!');if(n.sizeByCount){var S=0;i(j,function(t){t.count>S&&(S=t.count)}),i(j,function(t){var n=t.x0,e=t.x1,r=t.y0,i=t.y1,o=t.count,u=o/S,a=(n+e)/2,c=(r+i)/2,f=(e-n)*u/2,s=(i-r)*u/2,l=a-f,h=a+f,p=c-s,v=c+s,d={};d[E]=[l,h,h,l],d[M]=[p,p,v,v],d[T]=o,w.push(d)})}else i(j,function(t){var n={};n[E]=[t.x0,t.x1,t.x1,t.x0],n[M]=[t.y0,t.y0,t.y1,t.y1],n[T]=t.count,w.push(n)});t.rows=w}o("bin.rectangle",f),o("bin.rect",f)},function(t,n,e){var r=e(3),i=e(6),o=e(10),u=e(2).registerTransform,a=e(7).getField,c={as:["_centroid_x","_centroid_y"]};u("geo.centroid",function(t,n){n=r({},c,n);var e=a(n),u=n.geoView||n.geoDataView;if(o(u)&&(u=t.dataSet.getView(u)),!u||"geo"!==u.dataType)throw new TypeError("Invalid geoView: must be a DataView of GEO dataType!");var f=n.as;if(!i(f)||2!==f.length)throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "cX", "cY" ])!');var s=f[0],l=f[1];t.rows.forEach(function(t){var n=u.geoFeatureByName(t[e]);n&&(u._projectedAs?(t[s]=n[u._projectedAs[2]],t[l]=n[u._projectedAs[3]]):(t[s]=n.centroidX,t[l]=n.centroidY))})})},function(t,n,e){var r=e(3),i=e(0),o=e(159),u=e(6),a=e(2).registerTransform,c=e(141),f=i.geoPath,s={as:["_x","_y","_centroid_x","_centroid_y"]};a("geo.projection",function(t,n){if("geo"!==t.dataType&&"geo-graticule"!==t.dataType)throw new TypeError("Invalid dataView: this transform is for Geo data only!");var e=(n=r({},s,n)).projection;if(!e)throw new TypeError("Invalid projection!");e=c(e);var i=f(e),a=n.as;if(!u(a)||4!==a.length)throw new TypeError('Invalid as: it must be an array with 4 strings (e.g. [ "x", "y", "cX", "cY" ])!');t._projectedAs=a;var l=a[0],h=a[1],p=a[2],v=a[3];t.rows.forEach(function(t){t[l]=[],t[h]=[];var n=i(t);if(n){o(n)._path.forEach(function(n){t[l].push(n[1]),t[h].push(n[2])});var e=i.centroid(t);t[p]=e[0],t[v]=e[1]}}),t.rows=t.rows.filter(function(t){return 0!==t[l].length})})},function(t,n,e){var r=e(3),i=e(6),o=e(10),u=e(2).registerTransform,a=e(7).getField,c={as:["_x","_y"]};u("geo.region",function(t,n){n=r({},c,n);var e=a(n),u=n.geoView||n.geoDataView;if(o(u)&&(u=t.dataSet.getView(u)),!u||"geo"!==u.dataType)throw new TypeError("Invalid geoView: must be a DataView of GEO dataType!");var f=n.as;if(!i(f)||2!==f.length)throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');var s=f[0],l=f[1];t.rows.forEach(function(t){var n=u.geoFeatureByName(t[e]);n&&(u._projectedAs?(t[s]=n[u._projectedAs[0]],t[l]=n[u._projectedAs[1]]):(t[s]=n.longitude,t[l]=n.latitude))})})},function(t,n,e){var r=e(3),i=e(9),o=e(6),u=e(83),a=e(11),c=e(2).registerTransform,f={y:0,thickness:.05,weight:!1,marginRatio:.1,id:function(t){return t.id},source:function(t){return t.source},target:function(t){return t.target},sourceWeight:function(t){return t.value||1},targetWeight:function(t){return t.value||1},sortBy:null};function s(t,n){n=r({},f,n);var e={},c=t.nodes,s=t.edges;o(c)&&0!==c.length||(c=function(t,n,e){return void 0===e&&(e={}),t.forEach(function(t){var r=n.edgeSource(t),i=n.edgeTarget(t);e[r]||(e[r]={id:r}),e[i]||(e[i]={id:i})}),u(e)}(s,n,e)),c.forEach(function(t){var r=n.id(t);e[r]=t}),function(t,n,e){i(t,function(t,r){t.inEdges=n.filter(function(t){return""+e.target(t)==""+r}),t.outEdges=n.filter(function(t){return""+e.source(t)==""+r}),t.edges=t.outEdges.concat(t.inEdges),t.frequency=t.edges.length,t.value=0,t.inEdges.forEach(function(n){t.value+=e.targetWeight(n)}),t.outEdges.forEach(function(n){t.value+=e.sourceWeight(n)})})}(e,s,n),function(t,n){var e={weight:function(t,n){return n.value-t.value},frequency:function(t,n){return n.frequency-t.frequency},id:function(t,e){return(""+n.id(t)).localeCompare(""+n.id(e))}}[n.sortBy];!e&&a(n.sortBy)&&(e=n.sortBy),e&&t.sort(e)}(c,n),function(t,n){var e=t.length;if(!e)throw new TypeError("Invalid nodes: it's empty!");if(n.weight){var r=n.marginRatio;if(r<0||r>=1)throw new TypeError("Invalid marginRatio: it must be in range [0, 1)!");var i=r/(2*e),o=n.thickness;if(o<=0||o>=1)throw new TypeError("Invalid thickness: it must be in range (0, 1)!");var u=0;t.forEach(function(t){u+=t.value}),t.forEach(function(t){t.weight=t.value/u,t.width=t.weight*(1-r),t.height=o}),t.forEach(function(e,r){for(var u=0,a=r-1;a>=0;a--)u+=t[a].width+2*i;var c=e.minX=i+u,f=e.maxX=e.minX+e.width,s=e.minY=n.y-o/2,l=e.maxY=s+o;e.x=[c,f,f,c],e.y=[s,s,l,l]})}else{var a=1/e;t.forEach(function(t,e){t.x=(e+.5)*a,t.y=n.y})}}(c,n),function(t,n,e){if(e.weight){var r={};i(t,function(t,n){r[n]=t.value}),n.forEach(function(n){var i=e.source(n),o=e.target(n),u=t[i],a=t[o];if(u&&a){var c=r[i],f=e.sourceWeight(n),s=u.minX+(u.value-c)/u.value*u.width,l=s+f/u.value*u.width;r[i]-=f;var h=r[o],p=e.targetWeight(n),v=a.minX+(a.value-h)/a.value*a.width,d=v+p/a.value*a.width;r[o]-=p;var g=e.y;n.x=[s,l,v,d],n.y=[g,g,g,g]}})}else n.forEach(function(n){var r=t[e.source(n)],i=t[e.target(n)];r&&i&&(n.x=[r.x,i.x],n.y=[r.y,i.y])})}(e,s,n),t.nodes=c,t.edges=s}c("diagram.arc",s),c("arc",s)},function(t,n,e){var r=e(3),i=e(432),o=e(2).registerTransform,u={rankdir:"TB",align:"TB",nodesep:50,edgesep:10,ranksep:50,source:function(t){return t.source},target:function(t){return t.target}};function a(t,n){n=r({},u,n);var e=new i.graphlib.Graph;e.setGraph({}),e.setDefaultEdgeLabel(function(){return{}}),t.nodes.forEach(function(t){var r=n.nodeId?n.nodeId(t):t.id;t.height||t.width||(t.height=t.width=n.edgesep),e.setNode(r,t)}),t.edges.forEach(function(t){e.setEdge(n.source(t),n.target(t))}),i.layout(e);var o=[],a=[];e.nodes().forEach(function(t){var n=e.node(t),r=n.x,i=n.y,u=n.height,a=n.width;n.x=[r-a/2,r+a/2,r+a/2,r-a/2],n.y=[i+u/2,i+u/2,i-u/2,i-u/2],o.push(n)}),e.edges().forEach(function(t){var n=e.edge(t).points,r={};r.x=n.map(function(t){return t.x}),r.y=n.map(function(t){return t.y}),a.push(r)}),t.nodes=o,t.edges=a}o("diagram.dagre",a),o("dagre",a)},function(t,n,e){t.exports={graphlib:e(16),layout:e(448),debug:e(470),util:{time:e(12).time,notime:e(12).notime},version:e(471)}},function(t,n,e){var r=e(434);t.exports={Graph:r.Graph,json:e(438),alg:e(439),version:r.version}},function(t,n,e){t.exports={Graph:e(93),version:e(437)}},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n){t.exports="2.1.5"},function(t,n,e){var r=e(13),i=e(93);t.exports={write:function(t){var n={options:{directed:t.isDirected(),multigraph:t.isMultigraph(),compound:t.isCompound()},nodes:function(t){return r.map(t.nodes(),function(n){var e=t.node(n),i=t.parent(n),o={v:n};return r.isUndefined(e)||(o.value=e),r.isUndefined(i)||(o.parent=i),o})}(t),edges:function(t){return r.map(t.edges(),function(n){var e=t.edge(n),i={v:n.v,w:n.w};return r.isUndefined(n.name)||(i.name=n.name),r.isUndefined(e)||(i.value=e),i})}(t)};r.isUndefined(t.graph())||(n.value=r.clone(t.graph()));return n},read:function(t){var n=new i(t.options).setGraph(t.value);return r.each(t.nodes,function(t){n.setNode(t.v,t.value),t.parent&&n.setParent(t.v,t.parent)}),r.each(t.edges,function(t){n.setEdge({v:t.v,w:t.w,name:t.name},t.value)}),n}}},function(t,n,e){t.exports={components:e(440),dijkstra:e(170),dijkstraAll:e(441),findCycles:e(442),floydWarshall:e(443),isAcyclic:e(444),postorder:e(445),preorder:e(446),prim:e(447),tarjan:e(172),topsort:e(173)}},function(t,n,e){var r=e(13);t.exports=function(t){var n,e={},i=[];function o(i){r.has(e,i)||(e[i]=!0,n.push(i),r.each(t.successors(i),o),r.each(t.predecessors(i),o))}return r.each(t.nodes(),function(t){n=[],o(t),n.length&&i.push(n)}),i}},function(t,n,e){var r=e(170),i=e(13);t.exports=function(t,n,e){return i.transform(t.nodes(),function(i,o){i[o]=r(t,o,n,e)},{})}},function(t,n,e){var r=e(13),i=e(172);t.exports=function(t){return r.filter(i(t),function(n){return n.length>1||1===n.length&&t.hasEdge(n[0],n[0])})}},function(t,n,e){var r=e(13);t.exports=function(t,n,e){return function(t,n,e){var r={},i=t.nodes();return i.forEach(function(t){r[t]={},r[t][t]={distance:0},i.forEach(function(n){t!==n&&(r[t][n]={distance:Number.POSITIVE_INFINITY})}),e(t).forEach(function(e){var i=e.v===t?e.w:e.v,o=n(e);r[t][i]={distance:o,predecessor:t}})}),i.forEach(function(t){var n=r[t];i.forEach(function(e){var o=r[e];i.forEach(function(e){var r=o[t],i=n[e],u=o[e],a=r.distance+i.distance;a<u.distance&&(u.distance=a,u.predecessor=i.predecessor)})})}),r}(t,n||i,e||function(n){return t.outEdges(n)})};var i=r.constant(1)},function(t,n,e){var r=e(173);t.exports=function(t){try{r(t)}catch(t){if(t instanceof r.CycleException)return!1;throw t}return!0}},function(t,n,e){var r=e(174);t.exports=function(t,n){return r(t,n,"post")}},function(t,n,e){var r=e(174);t.exports=function(t,n){return r(t,n,"pre")}},function(t,n,e){var r=e(13),i=e(93),o=e(171);t.exports=function(t,n){var e,u=new i,a={},c=new o;function f(t){var r=t.v===e?t.w:t.v,i=c.priority(r);if(void 0!==i){var o=n(t);o<i&&(a[r]=e,c.decrease(r,o))}}if(0===t.nodeCount())return u;r.each(t.nodes(),function(t){c.add(t,Number.POSITIVE_INFINITY),u.setNode(t)}),c.decrease(t.nodes()[0],0);var s=!1;for(;c.size()>0;){if(e=c.removeMin(),r.has(a,e))u.setEdge(e,a[e]);else{if(s)throw new Error("Input graph is not connected: "+t);s=!0}t.nodeEdges(e).forEach(f)}return u}},function(t,n,e){"use strict";var r=e(8),i=e(449),o=e(452),u=e(453),a=e(12).normalizeRanks,c=e(455),f=e(12).removeEmptyRanks,s=e(456),l=e(457),h=e(458),p=e(459),v=e(468),d=e(12),g=e(16).Graph;t.exports=function(t,n){var e=n&&n.debugTiming?d.time:d.notime;e("layout",function(){var n=e("  buildLayoutGraph",function(){return function(t){var n=new g({multigraph:!0,compound:!0}),e=M(t.graph());return n.setGraph(r.merge({},y,E(e,b),r.pick(e,j))),r.forEach(t.nodes(),function(e){var i=M(t.node(e));n.setNode(e,r.defaults(E(i,O),_)),n.setParent(e,t.parent(e))}),r.forEach(t.edges(),function(e){var i=M(t.edge(e));n.setEdge(e,r.merge({},w,E(i,m),r.pick(i,x)))}),n}(t)});e("  runLayout",function(){!function(t,n){n("    makeSpaceForEdgeLabels",function(){!function(t){var n=t.graph();n.ranksep/=2,r.forEach(t.edges(),function(e){var r=t.edge(e);r.minlen*=2,"c"!==r.labelpos.toLowerCase()&&("TB"===n.rankdir||"BT"===n.rankdir?r.width+=r.labeloffset:r.height+=r.labeloffset)})}(t)}),n("    removeSelfEdges",function(){!function(t){r.forEach(t.edges(),function(n){if(n.v===n.w){var e=t.node(n.v);e.selfEdges||(e.selfEdges=[]),e.selfEdges.push({e:n,label:t.edge(n)}),t.removeEdge(n)}})}(t)}),n("    acyclic",function(){i.run(t)}),n("    nestingGraph.run",function(){s.run(t)}),n("    rank",function(){u(d.asNonCompoundGraph(t))}),n("    injectEdgeLabelProxies",function(){!function(t){r.forEach(t.edges(),function(n){var e=t.edge(n);if(e.width&&e.height){var r=t.node(n.v),i=t.node(n.w),o={rank:(i.rank-r.rank)/2+r.rank,e:n};d.addDummyNode(t,"edge-proxy",o,"_ep")}})}(t)}),n("    removeEmptyRanks",function(){f(t)}),n("    nestingGraph.cleanup",function(){s.cleanup(t)}),n("    normalizeRanks",function(){a(t)}),n("    assignRankMinMax",function(){!function(t){var n=0;r.forEach(t.nodes(),function(e){var i=t.node(e);i.borderTop&&(i.minRank=t.node(i.borderTop).rank,i.maxRank=t.node(i.borderBottom).rank,n=r.max(n,i.maxRank))}),t.graph().maxRank=n}(t)}),n("    removeEdgeLabelProxies",function(){!function(t){r.forEach(t.nodes(),function(n){var e=t.node(n);"edge-proxy"===e.dummy&&(t.edge(e.e).labelRank=e.rank,t.removeNode(n))})}(t)}),n("    normalize.run",function(){o.run(t)}),n("    parentDummyChains",function(){c(t)}),n("    addBorderSegments",function(){l(t)}),n("    order",function(){p(t)}),n("    insertSelfEdges",function(){!function(t){var n=d.buildLayerMatrix(t);r.forEach(n,function(n){var e=0;r.forEach(n,function(n,i){var o=t.node(n);o.order=i+e,r.forEach(o.selfEdges,function(n){d.addDummyNode(t,"selfedge",{width:n.label.width,height:n.label.height,rank:o.rank,order:i+ ++e,e:n.e,label:n.label},"_se")}),delete o.selfEdges})})}(t)}),n("    adjustCoordinateSystem",function(){h.adjust(t)}),n("    position",function(){v(t)}),n("    positionSelfEdges",function(){!function(t){r.forEach(t.nodes(),function(n){var e=t.node(n);if("selfedge"===e.dummy){var r=t.node(e.e.v),i=r.x+r.width/2,o=r.y,u=e.x-i,a=r.height/2;t.setEdge(e.e,e.label),t.removeNode(n),e.label.points=[{x:i+2*u/3,y:o-a},{x:i+5*u/6,y:o-a},{x:i+u,y:o},{x:i+5*u/6,y:o+a},{x:i+2*u/3,y:o+a}],e.label.x=e.x,e.label.y=e.y}})}(t)}),n("    removeBorderNodes",function(){!function(t){r.forEach(t.nodes(),function(n){if(t.children(n).length){var e=t.node(n),i=t.node(e.borderTop),o=t.node(e.borderBottom),u=t.node(r.last(e.borderLeft)),a=t.node(r.last(e.borderRight));e.width=Math.abs(a.x-u.x),e.height=Math.abs(o.y-i.y),e.x=u.x+e.width/2,e.y=i.y+e.height/2}}),r.forEach(t.nodes(),function(n){"border"===t.node(n).dummy&&t.removeNode(n)})}(t)}),n("    normalize.undo",function(){o.undo(t)}),n("    fixupEdgeLabelCoords",function(){!function(t){r.forEach(t.edges(),function(n){var e=t.edge(n);if(r.has(e,"x"))switch("l"!==e.labelpos&&"r"!==e.labelpos||(e.width-=e.labeloffset),e.labelpos){case"l":e.x-=e.width/2+e.labeloffset;break;case"r":e.x+=e.width/2+e.labeloffset}})}(t)}),n("    undoCoordinateSystem",function(){h.undo(t)}),n("    translateGraph",function(){!function(t){var n=Number.POSITIVE_INFINITY,e=0,i=Number.POSITIVE_INFINITY,o=0,u=t.graph(),a=u.marginx||0,c=u.marginy||0;function f(t){var r=t.x,u=t.y,a=t.width,c=t.height;n=Math.min(n,r-a/2),e=Math.max(e,r+a/2),i=Math.min(i,u-c/2),o=Math.max(o,u+c/2)}r.forEach(t.nodes(),function(n){f(t.node(n))}),r.forEach(t.edges(),function(n){var e=t.edge(n);r.has(e,"x")&&f(e)}),n-=a,i-=c,r.forEach(t.nodes(),function(e){var r=t.node(e);r.x-=n,r.y-=i}),r.forEach(t.edges(),function(e){var o=t.edge(e);r.forEach(o.points,function(t){t.x-=n,t.y-=i}),r.has(o,"x")&&(o.x-=n),r.has(o,"y")&&(o.y-=i)}),u.width=e-n+a,u.height=o-i+c}(t)}),n("    assignNodeIntersects",function(){!function(t){r.forEach(t.edges(),function(n){var e,r,i=t.edge(n),o=t.node(n.v),u=t.node(n.w);i.points?(e=i.points[0],r=i.points[i.points.length-1]):(i.points=[],e=u,r=o),i.points.unshift(d.intersectRect(o,e)),i.points.push(d.intersectRect(u,r))})}(t)}),n("    reversePoints",function(){!function(t){r.forEach(t.edges(),function(n){var e=t.edge(n);e.reversed&&e.points.reverse()})}(t)}),n("    acyclic.undo",function(){i.undo(t)})}(n,e)}),e("  updateInputGraph",function(){!function(t,n){r.forEach(t.nodes(),function(e){var r=t.node(e),i=n.node(e);r&&(r.x=i.x,r.y=i.y,n.children(e).length&&(r.width=i.width,r.height=i.height))}),r.forEach(t.edges(),function(e){var i=t.edge(e),o=n.edge(e);i.points=o.points,r.has(o,"x")&&(i.x=o.x,i.y=o.y)}),t.graph().width=n.graph().width,t.graph().height=n.graph().height}(t,n)})})};var b=["nodesep","edgesep","ranksep","marginx","marginy"],y={ranksep:50,edgesep:20,nodesep:50,rankdir:"tb"},j=["acyclicer","ranker","rankdir","align"],O=["width","height"],_={width:0,height:0},m=["minlen","weight","width","height","labeloffset"],w={minlen:1,weight:1,width:0,height:0,labeloffset:10,labelpos:"r"},x=["labelpos"];function E(t,n){return r.mapValues(r.pick(t,n),Number)}function M(t){var n={};return r.forEach(t,function(t,e){n[e.toLowerCase()]=t}),n}},function(t,n,e){"use strict";var r=e(8),i=e(450);t.exports={run:function(t){var n="greedy"===t.graph().acyclicer?i(t,function(t){return function(n){return t.edge(n).weight}}(t)):function(t){var n=[],e={},i={};return r.forEach(t.nodes(),function o(u){r.has(i,u)||(i[u]=!0,e[u]=!0,r.forEach(t.outEdges(u),function(t){r.has(e,t.w)?n.push(t):o(t.w)}),delete e[u])}),n}(t);r.forEach(n,function(n){var e=t.edge(n);t.removeEdge(n),e.forwardName=n.name,e.reversed=!0,t.setEdge(n.w,n.v,e,r.uniqueId("rev"))})},undo:function(t){r.forEach(t.edges(),function(n){var e=t.edge(n);if(e.reversed){t.removeEdge(n);var r=e.forwardName;delete e.reversed,delete e.forwardName,t.setEdge(n.w,n.v,e,r)}})}}},function(t,n,e){var r=e(8),i=e(16).Graph,o=e(451);t.exports=function(t,n){if(t.nodeCount()<=1)return[];var e=function(t,n){var e=new i,u=0,a=0;r.forEach(t.nodes(),function(t){e.setNode(t,{v:t,in:0,out:0})}),r.forEach(t.edges(),function(t){var r=e.edge(t.v,t.w)||0,i=n(t),o=r+i;e.setEdge(t.v,t.w,o),a=Math.max(a,e.node(t.v).out+=i),u=Math.max(u,e.node(t.w).in+=i)});var f=r.range(a+u+3).map(function(){return new o}),s=u+1;return r.forEach(e.nodes(),function(t){c(f,s,e.node(t))}),{graph:e,buckets:f,zeroIdx:s}}(t,n||u),f=function(t,n,e){var r,i=[],o=n[n.length-1],u=n[0];for(;t.nodeCount();){for(;r=u.dequeue();)a(t,n,e,r);for(;r=o.dequeue();)a(t,n,e,r);if(t.nodeCount())for(var c=n.length-2;c>0;--c)if(r=n[c].dequeue()){i=i.concat(a(t,n,e,r,!0));break}}return i}(e.graph,e.buckets,e.zeroIdx);return r.flatten(r.map(f,function(n){return t.outEdges(n.v,n.w)}),!0)};var u=r.constant(1);function a(t,n,e,i,o){var u=o?[]:void 0;return r.forEach(t.inEdges(i.v),function(r){var i=t.edge(r),a=t.node(r.v);o&&u.push({v:r.v,w:r.w}),a.out-=i,c(n,e,a)}),r.forEach(t.outEdges(i.v),function(r){var i=t.edge(r),o=r.w,u=t.node(o);u.in-=i,c(n,e,u)}),t.removeNode(i.v),u}function c(t,n,e){e.out?e.in?t[e.out-e.in+n].enqueue(e):t[t.length-1].enqueue(e):t[0].enqueue(e)}},function(t,n){function e(){var t={};t._next=t._prev=t,this._sentinel=t}function r(t){t._prev._next=t._next,t._next._prev=t._prev,delete t._next,delete t._prev}function i(t,n){if("_next"!==t&&"_prev"!==t)return n}t.exports=e,e.prototype.dequeue=function(){var t=this._sentinel,n=t._prev;if(n!==t)return r(n),n},e.prototype.enqueue=function(t){var n=this._sentinel;t._prev&&t._next&&r(t),t._next=n._next,n._next._prev=t,n._next=t,t._prev=n},e.prototype.toString=function(){for(var t=[],n=this._sentinel,e=n._prev;e!==n;)t.push(JSON.stringify(e,i)),e=e._prev;return"["+t.join(", ")+"]"}},function(t,n,e){"use strict";var r=e(8),i=e(12);t.exports={run:function(t){t.graph().dummyChains=[],r.forEach(t.edges(),function(n){!function(t,n){var e,r,o,u=n.v,a=t.node(u).rank,c=n.w,f=t.node(c).rank,s=n.name,l=t.edge(n),h=l.labelRank;if(f===a+1)return;for(t.removeEdge(n),o=0,++a;a<f;++o,++a)l.points=[],r={width:0,height:0,edgeLabel:l,edgeObj:n,rank:a},e=i.addDummyNode(t,"edge",r,"_d"),a===h&&(r.width=l.width,r.height=l.height,r.dummy="edge-label",r.labelpos=l.labelpos),t.setEdge(u,e,{weight:l.weight},s),0===o&&t.graph().dummyChains.push(e),u=e;t.setEdge(u,c,{weight:l.weight},s)}(t,n)})},undo:function(t){r.forEach(t.graph().dummyChains,function(n){var e,r=t.node(n),i=r.edgeLabel;for(t.setEdge(r.edgeObj,i);r.dummy;)e=t.successors(n)[0],t.removeNode(n),i.points.push({x:r.x,y:r.y}),"edge-label"===r.dummy&&(i.x=r.x,i.y=r.y,i.width=r.width,i.height=r.height),n=e,r=t.node(n)})}}},function(t,n,e){"use strict";var r=e(59).longestPath,i=e(175),o=e(454);t.exports=function(t){switch(t.graph().ranker){case"network-simplex":a(t);break;case"tight-tree":!function(t){r(t),i(t)}(t);break;case"longest-path":u(t);break;default:a(t)}};var u=r;function a(t){o(t)}},function(t,n,e){"use strict";var r=e(8),i=e(175),o=e(59).slack,u=e(59).longestPath,a=e(16).alg.preorder,c=e(16).alg.postorder,f=e(12).simplify;function s(t){t=f(t),u(t);var n,e=i(t);for(p(e),l(e,t);n=v(e);)g(e,t,n,d(e,t,n))}function l(t,n){var e=c(t,t.nodes());e=e.slice(0,e.length-1),r.forEach(e,function(e){!function(t,n,e){var r=t.node(e).parent;t.edge(e,r).cutvalue=h(t,n,e)}(t,n,e)})}function h(t,n,e){var i=t.node(e).parent,o=!0,u=n.edge(e,i),a=0;return u||(o=!1,u=n.edge(i,e)),a=u.weight,r.forEach(n.nodeEdges(e),function(r){var u=r.v===e,c=u?r.w:r.v;if(c!==i){var f=u===o,s=n.edge(r).weight;if(a+=f?s:-s,function(t,n,e){return t.hasEdge(n,e)}(t,e,c)){var l=t.edge(e,c).cutvalue;a+=f?-l:l}}}),a}function p(t,n){arguments.length<2&&(n=t.nodes()[0]),function t(n,e,i,o,u){var a=i,c=n.node(o);e[o]=!0;r.forEach(n.neighbors(o),function(u){r.has(e,u)||(i=t(n,e,i,u,o))});c.low=a;c.lim=i++;u?c.parent=u:delete c.parent;return i}(t,{},1,n)}function v(t){return r.find(t.edges(),function(n){return t.edge(n).cutvalue<0})}function d(t,n,e){var i=e.v,u=e.w;n.hasEdge(i,u)||(i=e.w,u=e.v);var a=t.node(i),c=t.node(u),f=a,s=!1;a.lim>c.lim&&(f=c,s=!0);var l=r.filter(n.edges(),function(n){return s===b(t,t.node(n.v),f)&&s!==b(t,t.node(n.w),f)});return r.minBy(l,function(t){return o(n,t)})}function g(t,n,e,i){var o=e.v,u=e.w;t.removeEdge(o,u),t.setEdge(i.v,i.w,{}),p(t),l(t,n),function(t,n){var e=r.find(t.nodes(),function(t){return!n.node(t).parent}),i=a(t,e);i=i.slice(1),r.forEach(i,function(e){var r=t.node(e).parent,i=n.edge(e,r),o=!1;i||(i=n.edge(r,e),o=!0),n.node(e).rank=n.node(r).rank+(o?i.minlen:-i.minlen)})}(t,n)}function b(t,n,e){return e.low<=n.lim&&n.lim<=e.lim}t.exports=s,s.initLowLimValues=p,s.initCutValues=l,s.calcCutValue=h,s.leaveEdge=v,s.enterEdge=d,s.exchangeEdges=g},function(t,n,e){var r=e(8);t.exports=function(t){var n=function(t){var n={},e=0;return r.forEach(t.children(),function i(o){var u=e;r.forEach(t.children(o),i),n[o]={low:u,lim:e++}}),n}(t);r.forEach(t.graph().dummyChains,function(e){for(var r=t.node(e),i=r.edgeObj,o=function(t,n,e,r){var i,o,u=[],a=[],c=Math.min(n[e].low,n[r].low),f=Math.max(n[e].lim,n[r].lim);i=e;do{i=t.parent(i),u.push(i)}while(i&&(n[i].low>c||f>n[i].lim));o=i,i=r;for(;(i=t.parent(i))!==o;)a.push(i);return{path:u.concat(a.reverse()),lca:o}}(t,n,i.v,i.w),u=o.path,a=o.lca,c=0,f=u[c],s=!0;e!==i.w;){if(r=t.node(e),s){for(;(f=u[c])!==a&&t.node(f).maxRank<r.rank;)c++;f===a&&(s=!1)}if(!s){for(;c<u.length-1&&t.node(f=u[c+1]).minRank<=r.rank;)c++;f=u[c]}t.setParent(e,f),e=t.successors(e)[0]}})}},function(t,n,e){var r=e(8),i=e(12);t.exports={run:function(t){var n=i.addDummyNode(t,"root",{},"_root"),e=function(t){var n={};return r.forEach(t.children(),function(e){!function e(i,o){var u=t.children(i);u&&u.length&&r.forEach(u,function(t){e(t,o+1)}),n[i]=o}(e,1)}),n}(t),o=r.max(r.values(e))-1,u=2*o+1;t.graph().nestingRoot=n,r.forEach(t.edges(),function(n){t.edge(n).minlen*=u});var a=function(t){return r.reduce(t.edges(),function(n,e){return n+t.edge(e).weight},0)}(t)+1;r.forEach(t.children(),function(c){!function t(n,e,o,u,a,c,f){var s=n.children(f);if(!s.length)return void(f!==e&&n.setEdge(e,f,{weight:0,minlen:o}));var l=i.addBorderNode(n,"_bt"),h=i.addBorderNode(n,"_bb"),p=n.node(f);n.setParent(l,f);p.borderTop=l;n.setParent(h,f);p.borderBottom=h;r.forEach(s,function(r){t(n,e,o,u,a,c,r);var i=n.node(r),s=i.borderTop?i.borderTop:r,p=i.borderBottom?i.borderBottom:r,v=i.borderTop?u:2*u,d=s!==p?1:a-c[f]+1;n.setEdge(l,s,{weight:v,minlen:d,nestingEdge:!0}),n.setEdge(p,h,{weight:v,minlen:d,nestingEdge:!0})});n.parent(f)||n.setEdge(e,l,{weight:0,minlen:a+c[f]})}(t,n,u,a,o,e,c)}),t.graph().nodeRankFactor=u},cleanup:function(t){var n=t.graph();t.removeNode(n.nestingRoot),delete n.nestingRoot,r.forEach(t.edges(),function(n){var e=t.edge(n);e.nestingEdge&&t.removeEdge(n)})}}},function(t,n,e){var r=e(8),i=e(12);function o(t,n,e,r,o,u){var a={width:0,height:0,rank:u,borderType:n},c=o[n][u-1],f=i.addDummyNode(t,"border",a,e);o[n][u]=f,t.setParent(f,r),c&&t.setEdge(c,f,{weight:1})}t.exports=function(t){r.forEach(t.children(),function n(e){var i=t.children(e),u=t.node(e);i.length&&r.forEach(i,n);if(r.has(u,"minRank")){u.borderLeft=[],u.borderRight=[];for(var a=u.minRank,c=u.maxRank+1;a<c;++a)o(t,"borderLeft","_bl",e,u,a),o(t,"borderRight","_br",e,u,a)}})}},function(t,n,e){"use strict";var r=e(8);function i(t){r.forEach(t.nodes(),function(n){o(t.node(n))}),r.forEach(t.edges(),function(n){o(t.edge(n))})}function o(t){var n=t.width;t.width=t.height,t.height=n}function u(t){t.y=-t.y}function a(t){var n=t.x;t.x=t.y,t.y=n}t.exports={adjust:function(t){var n=t.graph().rankdir.toLowerCase();"lr"!==n&&"rl"!==n||i(t)},undo:function(t){var n=t.graph().rankdir.toLowerCase();"bt"!==n&&"rl"!==n||function(t){r.forEach(t.nodes(),function(n){u(t.node(n))}),r.forEach(t.edges(),function(n){var e=t.edge(n);r.forEach(e.points,u),r.has(e,"y")&&u(e)})}(t);"lr"!==n&&"rl"!==n||(!function(t){r.forEach(t.nodes(),function(n){a(t.node(n))}),r.forEach(t.edges(),function(n){var e=t.edge(n);r.forEach(e.points,a),r.has(e,"x")&&a(e)})}(t),i(t))}}},function(t,n,e){"use strict";var r=e(8),i=e(460),o=e(461),u=e(462),a=e(466),c=e(467),f=e(16).Graph,s=e(12);function l(t,n,e){return r.map(n,function(n){return a(t,n,e)})}function h(t,n){var e=new f;r.forEach(t,function(t){var i=t.graph().root,o=u(t,i,e,n);r.forEach(o.vs,function(n,e){t.node(n).order=e}),c(t,e,o.vs)})}function p(t,n){r.forEach(n,function(n){r.forEach(n,function(n,e){t.node(n).order=e})})}t.exports=function(t){var n=s.maxRank(t),e=l(t,r.range(1,n+1),"inEdges"),u=l(t,r.range(n-1,-1,-1),"outEdges"),a=i(t);p(t,a);for(var c,f=Number.POSITIVE_INFINITY,v=0,d=0;d<4;++v,++d){h(v%2?e:u,v%4>=2),a=s.buildLayerMatrix(t);var g=o(t,a);g<f&&(d=0,c=r.cloneDeep(a),f=g)}p(t,c)}},function(t,n,e){"use strict";var r=e(8);t.exports=function(t){var n={},e=r.filter(t.nodes(),function(n){return!t.children(n).length}),i=r.max(r.map(e,function(n){return t.node(n).rank})),o=r.map(r.range(i+1),function(){return[]});var u=r.sortBy(e,function(n){return t.node(n).rank});return r.forEach(u,function e(i){if(!r.has(n,i)){n[i]=!0;var u=t.node(i);o[u.rank].push(i),r.forEach(t.successors(i),e)}}),o}},function(t,n,e){"use strict";var r=e(8);function i(t,n,e){for(var i=r.zipObject(e,r.map(e,function(t,n){return n})),o=r.flatten(r.map(n,function(n){return r.chain(t.outEdges(n)).map(function(n){return{pos:i[n.w],weight:t.edge(n).weight}}).sortBy("pos").value()}),!0),u=1;u<e.length;)u<<=1;var a=2*u-1;u-=1;var c=r.map(new Array(a),function(){return 0}),f=0;return r.forEach(o.forEach(function(t){var n=t.pos+u;c[n]+=t.weight;for(var e=0;n>0;)n%2&&(e+=c[n+1]),c[n=n-1>>1]+=t.weight;f+=t.weight*e})),f}t.exports=function(t,n){for(var e=0,r=1;r<n.length;++r)e+=i(t,n[r-1],n[r]);return e}},function(t,n,e){var r=e(8),i=e(463),o=e(464),u=e(465);t.exports=function t(n,e,a,c){var f=n.children(e),s=n.node(e),l=s?s.borderLeft:void 0,h=s?s.borderRight:void 0,p={};l&&(f=r.filter(f,function(t){return t!==l&&t!==h}));var v=i(n,f);r.forEach(v,function(e){if(n.children(e.v).length){var i=t(n,e.v,a,c);p[e.v]=i,r.has(i,"barycenter")&&function(t,n){r.isUndefined(t.barycenter)?(t.barycenter=n.barycenter,t.weight=n.weight):(t.barycenter=(t.barycenter*t.weight+n.barycenter*n.weight)/(t.weight+n.weight),t.weight+=n.weight)}(e,i)}});var d=o(v,a);!function(t,n){r.forEach(t,function(t){t.vs=r.flatten(t.vs.map(function(t){return n[t]?n[t].vs:t}),!0)})}(d,p);var g=u(d,c);if(l&&(g.vs=r.flatten([l,g.vs,h],!0),n.predecessors(l).length)){var b=n.node(n.predecessors(l)[0]),y=n.node(n.predecessors(h)[0]);r.has(g,"barycenter")||(g.barycenter=0,g.weight=0),g.barycenter=(g.barycenter*g.weight+b.order+y.order)/(g.weight+2),g.weight+=2}return g}},function(t,n,e){var r=e(8);t.exports=function(t,n){return r.map(n,function(n){var e=t.inEdges(n);if(e.length){var i=r.reduce(e,function(n,e){var r=t.edge(e),i=t.node(e.v);return{sum:n.sum+r.weight*i.order,weight:n.weight+r.weight}},{sum:0,weight:0});return{v:n,barycenter:i.sum/i.weight,weight:i.weight}}return{v:n}})}},function(t,n,e){"use strict";var r=e(8);t.exports=function(t,n){var e={};return r.forEach(t,function(t,n){var i=e[t.v]={indegree:0,in:[],out:[],vs:[t.v],i:n};r.isUndefined(t.barycenter)||(i.barycenter=t.barycenter,i.weight=t.weight)}),r.forEach(n.edges(),function(t){var n=e[t.v],i=e[t.w];r.isUndefined(n)||r.isUndefined(i)||(i.indegree++,n.out.push(e[t.w]))}),function(t){var n=[];function e(t){return function(n){n.merged||(r.isUndefined(n.barycenter)||r.isUndefined(t.barycenter)||n.barycenter>=t.barycenter)&&function(t,n){var e=0,r=0;t.weight&&(e+=t.barycenter*t.weight,r+=t.weight),n.weight&&(e+=n.barycenter*n.weight,r+=n.weight),t.vs=n.vs.concat(t.vs),t.barycenter=e/r,t.weight=r,t.i=Math.min(n.i,t.i),n.merged=!0}(t,n)}}function i(n){return function(e){e.in.push(n),0==--e.indegree&&t.push(e)}}for(;t.length;){var o=t.pop();n.push(o),r.forEach(o.in.reverse(),e(o)),r.forEach(o.out,i(o))}return r.chain(n).filter(function(t){return!t.merged}).map(function(t){return r.pick(t,["vs","i","barycenter","weight"])}).value()}(r.filter(e,function(t){return!t.indegree}))}},function(t,n,e){var r=e(8),i=e(12);function o(t,n,e){for(var i;n.length&&(i=r.last(n)).i<=e;)n.pop(),t.push(i.vs),e++;return e}t.exports=function(t,n){var e=i.partition(t,function(t){return r.has(t,"barycenter")}),u=e.lhs,a=r.sortBy(e.rhs,function(t){return-t.i}),c=[],f=0,s=0,l=0;u.sort(function(t){return function(n,e){return n.barycenter<e.barycenter?-1:n.barycenter>e.barycenter?1:t?e.i-n.i:n.i-e.i}}(!!n)),l=o(c,a,l),r.forEach(u,function(t){l+=t.vs.length,c.push(t.vs),f+=t.barycenter*t.weight,s+=t.weight,l=o(c,a,l)});var h={vs:r.flatten(c,!0)};s&&(h.barycenter=f/s,h.weight=s);return h}},function(t,n,e){var r=e(8),i=e(16).Graph;t.exports=function(t,n,e){var o=function(t){var n;for(;t.hasNode(n=r.uniqueId("_root")););return n}(t),u=new i({compound:!0}).setGraph({root:o}).setDefaultNodeLabel(function(n){return t.node(n)});return r.forEach(t.nodes(),function(i){var a=t.node(i),c=t.parent(i);(a.rank===n||a.minRank<=n&&n<=a.maxRank)&&(u.setNode(i),u.setParent(i,c||o),r.forEach(t[e](i),function(n){var e=n.v===i?n.w:n.v,o=u.edge(e,i),a=r.isUndefined(o)?0:o.weight;u.setEdge(e,i,{weight:t.edge(n).weight+a})}),r.has(a,"minRank")&&u.setNode(i,{borderLeft:a.borderLeft[n],borderRight:a.borderRight[n]}))}),u}},function(t,n,e){var r=e(8);t.exports=function(t,n,e){var i,o={};r.forEach(e,function(e){for(var r,u,a=t.parent(e);a;){if((r=t.parent(a))?(u=o[r],o[r]=a):(u=i,i=a),u&&u!==a)return void n.setEdge(u,a);a=r}})}},function(t,n,e){"use strict";var r=e(8),i=e(12),o=e(469).positionX;t.exports=function(t){(function(t){var n=i.buildLayerMatrix(t),e=t.graph().ranksep,o=0;r.forEach(n,function(n){var i=r.max(r.map(n,function(n){return t.node(n).height}));r.forEach(n,function(n){t.node(n).y=o+i/2}),o+=i+e})})(t=i.asNonCompoundGraph(t)),r.forEach(o(t),function(n,e){t.node(e).x=n})}},function(t,n,e){"use strict";var r=e(8),i=e(16).Graph,o=e(12);function u(t,n){var e={};return r.reduce(n,function(n,i){var o=0,u=0,a=n.length,f=r.last(i);return r.forEach(i,function(n,s){var l=function(t,n){if(t.node(n).dummy)return r.find(t.predecessors(n),function(n){return t.node(n).dummy})}(t,n),h=l?t.node(l).order:a;(l||n===f)&&(r.forEach(i.slice(u,s+1),function(n){r.forEach(t.predecessors(n),function(r){var i=t.node(r),u=i.order;!(u<o||h<u)||i.dummy&&t.node(n).dummy||c(e,r,n)})}),u=s+1,o=h)}),i}),e}function a(t,n){var e={};function i(n,i,o,u,a){var f;r.forEach(r.range(i,o),function(i){f=n[i],t.node(f).dummy&&r.forEach(t.predecessors(f),function(n){var r=t.node(n);r.dummy&&(r.order<u||r.order>a)&&c(e,n,f)})})}return r.reduce(n,function(n,e){var o,u=-1,a=0;return r.forEach(e,function(r,c){if("border"===t.node(r).dummy){var f=t.predecessors(r);f.length&&(o=t.node(f[0]).order,i(e,a,c,u,o),a=c,u=o)}i(e,a,e.length,o,n.length)}),e}),e}function c(t,n,e){if(n>e){var r=n;n=e,e=r}var i=t[n];i||(t[n]=i={}),i[e]=!0}function f(t,n,e){if(n>e){var i=n;n=e,e=i}return r.has(t[n],e)}function s(t,n,e,i){var o={},u={},a={};return r.forEach(n,function(t){r.forEach(t,function(t,n){o[t]=t,u[t]=t,a[t]=n})}),r.forEach(n,function(t){var n=-1;r.forEach(t,function(t){var c=i(t);if(c.length)for(var s=((c=r.sortBy(c,function(t){return a[t]})).length-1)/2,l=Math.floor(s),h=Math.ceil(s);l<=h;++l){var p=c[l];u[t]===t&&n<a[p]&&!f(e,t,p)&&(u[p]=t,u[t]=o[t]=o[p],n=a[p])}})}),{root:o,align:u}}function l(t,n,e,o,u){var a={},c=function(t,n,e,o){var u=new i,a=t.graph(),c=function(t,n,e){return function(i,o,u){var a,c=i.node(o),f=i.node(u),s=0;if(s+=c.width/2,r.has(c,"labelpos"))switch(c.labelpos.toLowerCase()){case"l":a=-c.width/2;break;case"r":a=c.width/2}if(a&&(s+=e?a:-a),a=0,s+=(c.dummy?n:t)/2,s+=(f.dummy?n:t)/2,s+=f.width/2,r.has(f,"labelpos"))switch(f.labelpos.toLowerCase()){case"l":a=f.width/2;break;case"r":a=-f.width/2}return a&&(s+=e?a:-a),a=0,s}}(a.nodesep,a.edgesep,o);return r.forEach(n,function(n){var i;r.forEach(n,function(n){var r=e[n];if(u.setNode(r),i){var o=e[i],a=u.edge(o,r);u.setEdge(o,r,Math.max(c(t,n,i),a||0))}i=n})}),u}(t,n,e,u),f=u?"borderLeft":"borderRight";function s(t,n){for(var e=c.nodes(),r=e.pop(),i={};r;)i[r]?t(r):(i[r]=!0,e.push(r),e=e.concat(n(r))),r=e.pop()}return s(function(t){a[t]=c.inEdges(t).reduce(function(t,n){return Math.max(t,a[n.v]+c.edge(n))},0)},r.bind(c.predecessors,c)),s(function(n){var e=c.outEdges(n).reduce(function(t,n){return Math.min(t,a[n.w]-c.edge(n))},Number.POSITIVE_INFINITY),r=t.node(n);e!==Number.POSITIVE_INFINITY&&r.borderType!==f&&(a[n]=Math.max(a[n],e))},r.bind(c.successors,c)),r.forEach(o,function(t){a[t]=a[e[t]]}),a}function h(t,n){return r.minBy(r.values(n),function(n){var e=Number.NEGATIVE_INFINITY,i=Number.POSITIVE_INFINITY;return r.forIn(n,function(n,r){var o=function(t,n){return t.node(n).width}(t,r)/2;e=Math.max(n+o,e),i=Math.min(n-o,i)}),e-i})}function p(t,n){var e=r.values(n),i=r.min(e),o=r.max(e);r.forEach(["u","d"],function(e){r.forEach(["l","r"],function(u){var a,c=e+u,f=t[c];if(f!==n){var s=r.values(f);(a="l"===u?i-r.min(s):o-r.max(s))&&(t[c]=r.mapValues(f,function(t){return t+a}))}})})}function v(t,n){return r.mapValues(t.ul,function(e,i){if(n)return t[n.toLowerCase()][i];var o=r.sortBy(r.map(t,i));return(o[1]+o[2])/2})}t.exports={positionX:function(t){var n,e=o.buildLayerMatrix(t),i=r.merge(u(t,e),a(t,e)),c={};r.forEach(["u","d"],function(o){n="u"===o?e:r.values(e).reverse(),r.forEach(["l","r"],function(e){"r"===e&&(n=r.map(n,function(t){return r.values(t).reverse()}));var u=r.bind("u"===o?t.predecessors:t.successors,t),a=s(t,n,i,u),f=l(t,n,a.root,a.align,"r"===e);"r"===e&&(f=r.mapValues(f,function(t){return-t})),c[o+e]=f})});var f=h(t,c);return p(c,f),v(c,t.graph().align)},findType1Conflicts:u,findType2Conflicts:a,addConflict:c,hasConflict:f,verticalAlignment:s,horizontalCompaction:l,alignCoordinates:p,findSmallestWidthAlignment:h,balance:v}},function(t,n,e){var r=e(8),i=e(12),o=e(16).Graph;t.exports={debugOrdering:function(t){var n=i.buildLayerMatrix(t),e=new o({compound:!0,multigraph:!0}).setGraph({});return r.forEach(t.nodes(),function(n){e.setNode(n,{label:n}),e.setParent(n,"layer"+t.node(n).rank)}),r.forEach(t.edges(),function(t){e.setEdge(t.v,t.w,{},t.name)}),r.forEach(n,function(t,n){var i="layer"+n;e.setNode(i,{rank:"same"}),r.reduce(t,function(t,n){return e.setEdge(t,n,{style:"invis"}),n})}),e}}},function(t,n){t.exports="0.8.2"},function(t,n,e){var r=e(3),i=e(10),o=e(11),u=e(473),a=u.sankey,c=u.sankeyLeft,f=u.sankeyRight,s=u.sankeyCenter,l=u.sankeyJustify,h=e(2).registerTransform,p={sankeyLeft:c,sankeyRight:f,sankeyCenter:s,sankeyJustify:l},v={value:function(t){return t.value},source:function(t){return t.source},target:function(t){return t.target},nodeAlign:"sankeyJustify",nodeWidth:.02,nodePadding:.02};function d(t,n){n=r({},v,n);var e=null;i(n.nodeAlign)?e=p[n.nodeAlign]:o(n.nodeAlign)&&(e=n.nodeAlign);var u=a().links(function(t){return t.edges}).nodeWidth(n.nodeWidth).nodePadding(n.nodePadding).extent([[0,0],[1,1]]);o(n.nodeId)&&u.nodeId(n.nodeId),e&&u.nodeAlign(e),u(t),t.nodes.forEach(function(t){var n=t.x0,e=t.x1,r=t.y0,i=t.y1;t.x=[n,e,e,n],t.y=[r,r,i,i]}),t.edges.forEach(function(t){var n=t.source,e=t.target,r=n.x1,i=e.x0;t.x=[r,r,i,i];var o=t.width/2;t.y=[t.y0+o,t.y0-o,t.y1+o,t.y1-o]})}h("diagram.sankey",d),h("sankey",d)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(474);e.d(n,"sankey",function(){return r.a});var i=e(176);e.d(n,"sankeyCenter",function(){return i.a}),e.d(n,"sankeyLeft",function(){return i.c}),e.d(n,"sankeyRight",function(){return i.d}),e.d(n,"sankeyJustify",function(){return i.b});var o=e(482);e.d(n,"sankeyLinkHorizontal",function(){return o.a})},function(t,n,e){"use strict";var r=e(14),i=e(475),o=e(176),u=e(481);function a(t,n){return f(t.source,n.source)||t.index-n.index}function c(t,n){return f(t.target,n.target)||t.index-n.index}function f(t,n){return t.y0-n.y0}function s(t){return t.value}function l(t){return(t.y0+t.y1)/2}function h(t){return l(t.source)*t.value}function p(t){return l(t.target)*t.value}function v(t){return t.index}function d(t){return t.nodes}function g(t){return t.links}function b(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}n.a=function(){var t=0,n=0,e=1,y=1,j=24,O=8,_=v,m=o.b,w=d,x=g,E=32;function M(){var o={nodes:w.apply(null,arguments),links:x.apply(null,arguments)};return function(t){t.nodes.forEach(function(t,n){t.index=n,t.sourceLinks=[],t.targetLinks=[]});var n=Object(i.a)(t.nodes,_);t.links.forEach(function(t,e){t.index=e;var r=t.source,i=t.target;"object"!=typeof r&&(r=t.source=b(n,r)),"object"!=typeof i&&(i=t.target=b(n,i)),r.sourceLinks.push(t),i.targetLinks.push(t)})}(o),function(t){t.nodes.forEach(function(t){t.value=Math.max(Object(r.sum)(t.sourceLinks,s),Object(r.sum)(t.targetLinks,s))})}(o),function(n){var r,i,o;for(r=n.nodes,i=[],o=0;r.length;++o,r=i,i=[])r.forEach(function(t){t.depth=o,t.sourceLinks.forEach(function(t){i.indexOf(t.target)<0&&i.push(t.target)})});for(r=n.nodes,i=[],o=0;r.length;++o,r=i,i=[])r.forEach(function(t){t.height=o,t.targetLinks.forEach(function(t){i.indexOf(t.source)<0&&i.push(t.source)})});var u=(e-t-j)/(o-1);n.nodes.forEach(function(n){n.x1=(n.x0=t+Math.max(0,Math.min(o-1,Math.floor(m.call(null,n,o))))*u)+j})}(o),function(t){var e=Object(i.b)().key(function(t){return t.x0}).sortKeys(r.ascending).entries(t.nodes).map(function(t){return t.values});(function(){var i=Object(r.min)(e,function(t){return(y-n-(t.length-1)*O)/Object(r.sum)(t,s)});e.forEach(function(t){t.forEach(function(t,n){t.y1=(t.y0=n)+t.value*i})}),t.links.forEach(function(t){t.width=t.value*i})})(),v();for(var o=1,u=E;u>0;--u)c(o*=.99),v(),a(o),v();function a(t){e.forEach(function(n){n.forEach(function(n){if(n.targetLinks.length){var e=(Object(r.sum)(n.targetLinks,h)/Object(r.sum)(n.targetLinks,s)-l(n))*t;n.y0+=e,n.y1+=e}})})}function c(t){e.slice().reverse().forEach(function(n){n.forEach(function(n){if(n.sourceLinks.length){var e=(Object(r.sum)(n.sourceLinks,p)/Object(r.sum)(n.sourceLinks,s)-l(n))*t;n.y0+=e,n.y1+=e}})})}function v(){e.forEach(function(t){var e,r,i,o=n,u=t.length;for(t.sort(f),i=0;i<u;++i)e=t[i],(r=o-e.y0)>0&&(e.y0+=r,e.y1+=r),o=e.y1+O;if((r=o-O-y)>0)for(o=e.y0-=r,e.y1-=r,i=u-2;i>=0;--i)e=t[i],(r=e.y1+O-o)>0&&(e.y0-=r,e.y1-=r),o=e.y0})}}(o),T(o),o}function T(t){t.nodes.forEach(function(t){t.sourceLinks.sort(c),t.targetLinks.sort(a)}),t.nodes.forEach(function(t){var n=t.y0,e=n;t.sourceLinks.forEach(function(t){t.y0=n+t.width/2,n+=t.width}),t.targetLinks.forEach(function(t){t.y1=e+t.width/2,e+=t.width})})}return M.update=function(t){return T(t),t},M.nodeId=function(t){return arguments.length?(_="function"==typeof t?t:Object(u.a)(t),M):_},M.nodeAlign=function(t){return arguments.length?(m="function"==typeof t?t:Object(u.a)(t),M):m},M.nodeWidth=function(t){return arguments.length?(j=+t,M):j},M.nodePadding=function(t){return arguments.length?(O=+t,M):O},M.nodes=function(t){return arguments.length?(w="function"==typeof t?t:Object(u.a)(t),M):w},M.links=function(t){return arguments.length?(x="function"==typeof t?t:Object(u.a)(t),M):x},M.size=function(r){return arguments.length?(t=n=0,e=+r[0],y=+r[1],M):[e-t,y-n]},M.extent=function(r){return arguments.length?(t=+r[0][0],e=+r[1][0],n=+r[0][1],y=+r[1][1],M):[[t,n],[e,y]]},M.iterations=function(t){return arguments.length?(E=+t,M):E},M}},function(t,n,e){"use strict";var r=e(476);e.d(n,"b",function(){return r.a});e(477);var i=e(94);e.d(n,"a",function(){return i.a});e(478),e(479),e(480)},function(t,n,e){"use strict";var r=e(94);function i(){return{}}function o(t,n,e){t[n]=e}function u(){return Object(r.a)()}function a(t,n,e){t.set(n,e)}n.a=function(){var t,n,e,c=[],f=[];function s(e,i,o,u){if(i>=c.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var a,f,l,h=-1,p=e.length,v=c[i++],d=Object(r.a)(),g=o();++h<p;)(l=d.get(a=v(f=e[h])+""))?l.push(f):d.set(a,[f]);return d.each(function(t,n){u(g,n,s(t,i,o,u))}),g}return e={object:function(t){return s(t,0,i,o)},map:function(t){return s(t,0,u,a)},entries:function(t){return function t(e,r){if(++r>c.length)return e;var i,o=f[r-1];return null!=n&&r>=c.length?i=e.entries():(i=[],e.each(function(n,e){i.push({key:e,values:t(n,r)})})),null!=o?i.sort(function(t,n){return o(t.key,n.key)}):i}(s(t,0,u,a),0)},key:function(t){return c.push(t),e},sortKeys:function(t){return f[c.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}},function(t,n,e){"use strict";var r=e(94);function i(){}var o=r.a.prototype;function u(t,n){var e=new i;if(t instanceof i)t.each(function(t){e.add(t)});else if(t){var r=-1,o=t.length;if(null==n)for(;++r<o;)e.add(t[r]);else for(;++r<o;)e.add(n(t[r],r,t))}return e}i.prototype=u.prototype={constructor:i,has:o.has,add:function(t){return t+="",this[r.b+t]=t,this},remove:o.remove,clear:o.clear,values:o.keys,size:o.size,empty:o.empty,each:o.each}},function(t,n,e){"use strict"},function(t,n,e){"use strict"},function(t,n,e){"use strict"},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";var r=e(483);function i(t){return[t.source.x1,t.y0]}function o(t){return[t.target.x0,t.y1]}n.a=function(){return Object(r.a)().source(i).target(o)}},function(t,n,e){"use strict";e(484),e(177),e(95),e(485),e(488),e(179),e(180);var r=e(489);e.d(n,"a",function(){return r.a});e(490),e(182),e(183),e(184),e(186),e(185),e(187),e(188),e(491),e(492),e(62),e(493),e(189),e(190),e(63),e(494),e(495),e(97),e(496),e(60),e(497),e(498),e(499),e(500),e(501),e(502),e(47),e(503),e(504),e(98),e(505),e(506),e(48),e(507)},function(t,n,e){"use strict";e(33),e(27),e(46)},function(t,n,e){"use strict";e(27),e(486),e(487),e(46)},function(t,n,e){"use strict";n.a=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";e(178),e(177),e(179)},function(t,n,e){"use strict";n.a=function(){return f(s)};var r=e(33),i=e(181),o=e(27),u=e(96);e(180);function a(t){return t.source}function c(t){return t.target}function f(t){var n=a,e=c,f=u.a,s=u.b,l=null;function h(){var o,u=i.a.call(arguments),a=n.apply(this,u),c=e.apply(this,u);if(l||(l=o=Object(r.path)()),t(l,+f.apply(this,(u[0]=a,u)),+s.apply(this,u),+f.apply(this,(u[0]=c,u)),+s.apply(this,u)),o)return l=null,o+""||null}return h.source=function(t){return arguments.length?(n=t,h):n},h.target=function(t){return arguments.length?(e=t,h):e},h.x=function(t){return arguments.length?(f="function"==typeof t?t:Object(o.a)(+t),h):f},h.y=function(t){return arguments.length?(s="function"==typeof t?t:Object(o.a)(+t),h):s},h.context=function(t){return arguments.length?(l=null==t?null:t,h):l},h}function s(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}},function(t,n,e){"use strict";e(33);var r=e(182),i=e(183),o=e(184),u=e(185),a=e(186),c=e(187),f=e(188);e(27),r.a,i.a,o.a,a.a,u.a,c.a,f.a},function(t,n,e){"use strict";var r=e(61),i=e(62);function o(t){this._context=t}o.prototype={areaStart:r.a,areaEnd:r.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Object(i.b)(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}}},function(t,n,e){"use strict";var r=e(62);function i(t){this._context=t}i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,i):this._context.moveTo(e,i);break;case 3:this._point=4;default:Object(r.b)(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}}},function(t,n,e){"use strict";var r=e(62);function i(t,n){this._basis=new r.a(t),this._beta=n}i.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new r.a(t):new i(t,n)}return e.beta=function(n){return t(+n)},e})(.85)},function(t,n,e){"use strict";var r=e(189),i=e(61),o=e(97);function u(t,n){this._context=t,this._alpha=n}u.prototype={areaStart:i.a,areaEnd:i.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Object(o.a)(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new u(t,n):new r.a(t,0)}return e.alpha=function(n){return t(+n)},e})(.5)},function(t,n,e){"use strict";var r=e(190),i=e(97);function o(t,n){this._context=t,this._alpha=n}o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(i.a)(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new o(t,n):new r.a(t,0)}return e.alpha=function(n){return t(+n)},e})(.5)},function(t,n,e){"use strict";var r=e(61);function i(t){this._context=t}i.prototype={areaStart:r.a,areaEnd:r.a,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}}},function(t,n,e){"use strict";function r(t){return t<0?-1:1}function i(t,n,e){var i=t._x1-t._x0,o=n-t._x1,u=(t._y1-t._y0)/(i||o<0&&-0),a=(e-t._y1)/(o||i<0&&-0),c=(u*o+a*i)/(i+o);return(r(u)+r(a))*Math.min(Math.abs(u),Math.abs(a),.5*Math.abs(c))||0}function o(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function u(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function a(t){this._context=t}function c(t){this._context=new f(t)}function f(t){this._context=t}a.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:u(this,this._t0,o(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,u(this,o(this,e=i(this,t,n)),e);break;default:u(this,this._t0,e=i(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(c.prototype=Object.create(a.prototype)).point=function(t,n){a.prototype.point.call(this,n,t)},f.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}}},function(t,n,e){"use strict";function r(t){this._context=t}function i(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=i(t),o=i(n),u=0,a=1;a<e;++u,++a)this._context.bezierCurveTo(r[0][u],o[0][u],r[1][u],o[1][u],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}}},function(t,n,e){"use strict";function r(t,n){this._context=t,this._t=n}r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}}},function(t,n,e){"use strict";e(181),e(27),e(47),e(48)},function(t,n,e){"use strict";e(47)},function(t,n,e){"use strict"},function(t,n,e){"use strict";e(47)},function(t,n,e){"use strict";e(47)},function(t,n,e){"use strict";e(98)},function(t,n,e){"use strict";e(48),e(98)},function(t,n,e){"use strict";e(48)},function(t,n,e){var r=e(3),i=e(509),o=e(6),u=e(2).registerTransform,a=e(7).getFields,c={as:["_x","_y"]};function f(t,n){var e=(n=r({},c,n)).as;if(!o(e)||2!==e.length)throw new TypeError("Invalid as: must be an array with two strings!");var u=e[0],f=e[1],s=a(n);if(!o(s)&&2!==s.length)throw new TypeError("Invalid fields: must be an array with two strings!");var l=s[0],h=s[1],p=t.rows,v=p.map(function(t){return[t[l],t[h]]}),d=i.voronoi();n.extend&&d.extent(n.extend),n.size&&d.size(n.size);var g=d(v).polygons();p.forEach(function(t,n){var e=g[n].filter(function(t){return!!t});t[u]=e.map(function(t){return t[0]}),t[f]=e.map(function(t){return t[1]})})}u("diagram.voronoi",f),u("voronoi",f)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(510);e.d(n,"voronoi",function(){return r.a})},function(t,n,e){"use strict";var r=e(511),i=e(512),o=e(49);n.a=function(){var t=i.a,n=i.b,e=null;function u(r){return new o.d(r.map(function(e,i){var u=[Math.round(t(e,i,r)/o.f)*o.f,Math.round(n(e,i,r)/o.f)*o.f];return u.index=i,u.data=e,u}),e)}return u.polygons=function(t){return u(t).polygons()},u.links=function(t){return u(t).links()},u.triangles=function(t){return u(t).triangles()},u.x=function(n){return arguments.length?(t="function"==typeof n?n:Object(r.a)(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:Object(r.a)(+t),u):n},u.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],u):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},u.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],u):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},u}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t){return t[0]},n.b=function(t){return t[1]}},function(t,n,e){"use strict";n.b=function(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],c=t.P,f=t.N,l=[t];s(t);var h=c;for(;h.circle&&Math.abs(e-h.circle.x)<a.f&&Math.abs(r-h.circle.cy)<a.f;)c=h.P,l.unshift(h),s(h),h=c;l.unshift(h),Object(o.b)(h);var p=f;for(;p.circle&&Math.abs(e-p.circle.x)<a.f&&Math.abs(r-p.circle.cy)<a.f;)f=p.N,l.push(p),s(p),p=f;l.push(p),Object(o.b)(p);var v,d=l.length;for(v=1;v<d;++v)p=l[v],h=l[v-1],Object(u.d)(p.edge,h.site,p.site,i);h=l[0],(p=l[d-1]).edge=Object(u.c)(h.site,p.site,null,i),Object(o.a)(h),Object(o.a)(p)},n.a=function(t){var n,e,r,c,s=t[0],p=t[1],v=a.a._;for(;v;)if((r=l(v,p)-s)>a.f)v=v.L;else{if(!((c=s-h(v,p))>a.f)){r>-a.f?(n=v.P,e=v):c>-a.f?(n=v,e=v.N):n=e=v;break}if(!v.R){n=v;break}v=v.R}Object(i.c)(t);var d=f(t);if(a.a.insert(n,d),!n&&!e)return;if(n===e)return Object(o.b)(n),e=f(n.site),a.a.insert(d,e),d.edge=e.edge=Object(u.c)(n.site,d.site),Object(o.a)(n),void Object(o.a)(e);if(!e)return void(d.edge=Object(u.c)(n.site,d.site));Object(o.b)(n),Object(o.b)(e);var g=n.site,b=g[0],y=g[1],j=t[0]-b,O=t[1]-y,_=e.site,m=_[0]-b,w=_[1]-y,x=2*(j*w-O*m),E=j*j+O*O,M=m*m+w*w,T=[(w*E-O*M)/x+b,(j*M-m*E)/x+y];Object(u.d)(e.edge,g,_,T),d.edge=Object(u.c)(g,t,null,T),e.edge=Object(u.c)(t,_,null,T),Object(o.a)(n),Object(o.a)(e)};var r=e(99),i=e(191),o=e(192),u=e(100),a=e(49),c=[];function f(t){var n=c.pop()||new function(){Object(r.a)(this),this.edge=this.site=this.circle=null};return n.site=t,n}function s(t){Object(o.b)(t),a.a.remove(t),c.push(t),Object(r.a)(t)}function l(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],f=c-n;if(!f)return a;var s=a-r,l=1/o-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-c+f/2+i-o/2)))/l+r:(r+a)/2}function h(t,n){var e=t.N;if(e)return l(e,n);var r=t.site;return r[1]===n?r[0]:1/0}},function(t,n,e){var r=e(3),i=e(34),o=e(6),u=e(2),a=u.HIERARCHY,c=u.registerTransform,f=e(7).getField,s={field:"value",size:[1,1],nodeSize:null,separation:null,as:["x","y"]};function l(t,n){if(t.dataType!==a)throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");var e,u=t.root,c=(n=r({},s,n)).as;if(!o(c)||2!==c.length)throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');try{e=f(n)}catch(t){console.warn(t)}e&&u.sum(function(t){return t[e]});var l=i.cluster();l.size(n.size),n.nodeSize&&l.nodeSize(n.nodeSize),n.separation&&l.separation(n.separation),l(u);var h=c[0],p=c[1];u.each(function(t){t[h]=t.x,t[p]=t.y})}c("hierarchy.cluster",l),c("dendrogram",l)},function(t,n,e){var r=e(101),i=e(2),o=i.HIERARCHY,u=i.registerTransform,a={};function c(t,n){var e=t.root;if(n=Object.assign({},a,n),t.dataType!==o)throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");t.root=r.compactBox(e,n)}u("hierarchy.compact-box",c),u("compact-box-tree",c),u("non-layered-tidy-tree",c),u("mindmap-logical",c)},function(t,n,e){var r=e(64),i=e(517),o=e(102),u=e(28),a=function(t){function n(){return t.apply(this,arguments)||this}return function(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n}(n,t),n.prototype.execute=function(){return o(this.rootNode,this.options,i)},n}(r),c={};t.exports=function(t,n){return n=u.assign({},c,n),new a(t,n).execute()}},function(t,n){function e(t,n,e,r){void 0===r&&(r=[]);var i=this;i.w=t||0,i.h=n||0,i.y=e||0,i.x=0,i.c=r||[],i.cs=r.length,i.prelim=0,i.mod=0,i.shift=0,i.change=0,i.tl=null,i.tr=null,i.el=null,i.er=null,i.msel=0,i.mser=0}function r(t,n){!function t(n,e,r){r?n.y+=e:n.x+=e,n.children.forEach(function(n){t(n,e,r)})}(t,-function t(n,e){var r=e?n.y:n.x;return n.children.forEach(function(n){r=Math.min(t(n,e),r)}),r}(t,n),n)}e.fromNode=function(t,n){if(!t)return null;var r=[];return t.children.forEach(function(t){r.push(e.fromNode(t,n))}),n?new e(t.height,t.width,t.x,r):new e(t.width,t.height,t.y,r)},t.exports=function(t,n){void 0===n&&(n={});var i=n.isHorizontal;function o(t){0===t.cs?(t.el=t,t.er=t,t.msel=t.mser=0):(t.el=t.c[0].el,t.msel=t.c[0].msel,t.er=t.c[t.cs-1].er,t.mser=t.c[t.cs-1].mser)}function u(t,n,e){for(var r=t.c[n-1],i=r.mod,o=t.c[n],u=o.mod;null!==r&&null!==o;){s(r)>e.low&&(e=e.nxt);var l=i+r.prelim+r.w-(u+o.prelim);l>0&&(u+=l,a(t,n,e.index,l));var h=s(r),p=s(o);h<=p&&null!==(r=f(r))&&(i+=r.mod),h>=p&&null!==(o=c(o))&&(u+=o.mod)}!r&&o?function(t,n,e,r){var i=t.c[0].el;i.tl=e;var o=r-e.mod-t.c[0].msel;i.mod+=o,i.prelim-=o,t.c[0].el=t.c[n].el,t.c[0].msel=t.c[n].msel}(t,n,o,u):r&&!o&&function(t,n,e,r){var i=t.c[n].er;i.tr=e;var o=r-e.mod-t.c[n].mser;i.mod+=o,i.prelim-=o,t.c[n].er=t.c[n-1].er,t.c[n].mser=t.c[n-1].mser}(t,n,r,i)}function a(t,n,e,r){t.c[n].mod+=r,t.c[n].msel+=r,t.c[n].mser+=r,function(t,n,e,r){if(e!==n-1){var i=n-e;t.c[e+1].shift+=r/i,t.c[n].shift-=r/i,t.c[n].change-=r-r/i}}(t,n,e,r)}function c(t){return 0===t.cs?t.tl:t.c[0]}function f(t){return 0===t.cs?t.tr:t.c[t.cs-1]}function s(t){return t.y+t.h}function l(t,n,e){for(;null!==e&&t>=e.low;)e=e.nxt;return{low:t,index:n,nxt:e}}!function t(n,e,r){void 0===r&&(r=0),e?(n.x=r,r+=n.width):(n.y=r,r+=n.height),n.children.forEach(function(n){t(n,e,r)})}(t,i);var h=e.fromNode(t,i);return function t(n){if(0!==n.cs){t(n.c[0]);for(var e=l(s(n.c[0].el),0,null),r=1;r<n.cs;++r){t(n.c[r]);var i=s(n.c[r].er);u(n,r,e),e=l(i,r,e)}!function(t){t.prelim=(t.c[0].prelim+t.c[0].mod+t.c[t.cs-1].mod+t.c[t.cs-1].prelim+t.c[t.cs-1].w)/2-t.w/2}(n),o(n)}else o(n)}(h),function t(n,e){e+=n.mod,n.x=n.prelim+e,function(t){for(var n=0,e=0,r=0;r<t.cs;r++)n+=t.c[r].shift,e+=n+t.c[r].change,t.c[r].mod+=e}(n);for(var r=0;r<n.cs;r++)t(n.c[r],e)}(h,0),function t(n,e,r){r?e.y=n.x:e.x=n.x,n.c.forEach(function(n,i){t(n,e.children[i],r)})}(h,t,i),r(t,i),t}},function(t,n,e){var r=e(64),i=e(519),o=e(102),u=e(28),a=function(t){function n(){return t.apply(this,arguments)||this}return function(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n}(n,t),n.prototype.execute=function(){return this.rootNode.width=0,o(this.rootNode,this.options,i)},n}(r),c={};t.exports=function(t,n){return n=u.assign({},c,n),new a(t,n).execute()}},function(t,n,e){var r=e(28);var i={isHorizontal:!0,nodeSep:20,nodeSize:20,rankSep:200,subTreeSep:10};t.exports=function(t,n){void 0===n&&(n={}),n=r.assign({},i,n);var e,o=0;var u=function t(n){if(!n)return null;n.width=0,n.depth&&n.depth>o&&(o=n.depth);var e=n.children,r=e.length,i=new function(t,n){void 0===t&&(t=0),void 0===n&&(n=[]);var e=this;e.x=e.y=0,e.leftChild=e.rightChild=null,e.height=0,e.children=n}(n.height,[]);return e.forEach(function(n,e){var o=t(n);i.children.push(o),0===e&&(i.leftChild=o),e===r-1&&(i.rightChild=o)}),i.originNode=n,i.isLeaf=n.isLeaf(),i}(t);return function t(n){if(n.isLeaf||0===n.children.length)n.drawingDepth=o;else{var e=n.children.map(function(n){return t(n)}),r=Math.min.apply(null,e);n.drawingDepth=r-1}return n.drawingDepth}(u),function t(r){r.x=r.drawingDepth*n.rankSep,r.isLeaf?(r.y=0,e&&(r.y=e.y+e.height+n.nodeSep,r.originNode.parent!==e.originNode.parent&&(r.y+=n.subTreeSep)),e=r):(r.children.forEach(function(n){t(n)}),r.y=(r.leftChild.y+r.rightChild.y)/2)}(u),function t(n,e,r){r?(e.x=n.x,e.y=n.y):(e.x=n.y,e.y=n.x),n.children.forEach(function(n,i){t(n,e.children[i],r)})}(u,t,n.isHorizontal),t}},function(t,n,e){var r=e(64),i=e(521),o=e(194),u=e(28),a=["LR","RL","H"],c=a[0],f=function(t){function n(){return t.apply(this,arguments)||this}return function(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n}(n,t),n.prototype.execute=function(){var t=this.options,n=this.rootNode;t.isHorizontal=!0;var e=t.indent,r=t.direction||c;if(r&&-1===a.indexOf(r))throw new TypeError("Invalid direction: "+r);if(r===a[0])i(n,e);else if(r===a[1])i(n,e),n.right2left();else if(r===a[2]){var u=o(n,t),f=u.left,s=u.right;i(f,e),f.right2left(),i(s,e);var l=f.getBoundingBox();s.translate(l.width,0),n.x=s.x-n.width/2}return n},n}(r),s={};t.exports=function(t,n){return n=u.assign({},s,n),new f(t,n).execute()}},function(t,n){t.exports=function(t,n){void 0===n&&(n=20);var e=null;t.eachNode(function(t){!function(t,n,e){t.x+=e*t.depth,t.y=n?n.y+n.height:0}(t,e,n),e=t})}},function(t,n,e){var r=e(64),i=e(523),o=e(102),u=e(28),a=function(t){function n(){return t.apply(this,arguments)||this}return function(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n}(n,t),n.prototype.execute=function(){return o(this.rootNode,this.options,i)},n}(r),c={};t.exports=function(t,n){return n=u.assign({},c,n),new a(t,n).execute()}},function(t,n,e){var r=e(28);var i={getSubTreeSep:function(){return 0}};t.exports=function(t,n){void 0===n&&(n={}),n=r.assign({},i,n),t.parent={x:0,width:0,height:0,y:0},t.BFTraverse(function(t){t.x=t.parent.x+t.parent.width}),t.parent=null,function t(n,e){var r=0;return n.children.length?n.children.forEach(function(n){r+=t(n,e)}):r=n.height,n._subTreeSep=e.getSubTreeSep(n.data),n.totalHeight=Math.max(n.height,r)+2*n._subTreeSep,n.totalHeight}(t,n),t.startY=0,t.y=t.totalHeight/2-t.height/2,t.eachNode(function(t){var n=t.children,e=n.length;if(e){var r=n[0];if(r.startY=t.startY+t._subTreeSep,1===e)r.y=t.y+t.height/2-r.height/2;else{r.y=r.startY+r.totalHeight/2-r.height/2;for(var i=1;i<e;i++){var o=n[i];o.startY=n[i-1].startY+n[i-1].totalHeight,o.y=o.startY+o.totalHeight/2-o.height/2}}}}),function t(n){var e=n.children,r=e.length;if(r){e.forEach(function(n){t(n)});var i=e[0],o=e[r-1],u=o.y-i.y+o.height,a=0;if(e.forEach(function(t){a+=t.totalHeight}),u>n.height)n.y=i.y+u/2-n.height/2;else if(1!==e.length||n.height>a){var c=n.y+(n.height-u)/2-i.y;e.forEach(function(t){t.translate(0,c)})}else n.y=(i.y+i.height/2+o.y+o.height/2)/2-n.height/2}}(t)}},function(t,n,e){var r=e(101),i=e(2),o=i.HIERARCHY,u=i.registerTransform,a={};function c(t,n){var e=t.root;if(n=Object.assign({},a,n),t.dataType!==o)throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");t.root=r.dendrogram(e,n)}u("hierarchy.dendrogram",c),u("dendrogram",c)},function(t,n,e){var r=e(101),i=e(2),o=i.HIERARCHY,u=i.registerTransform,a={};function c(t,n){var e=t.root;if(n=Object.assign({},a,n),t.dataType!==o)throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");t.root=r.indented(e,n)}u("hierarchy.indented",c),u("indented-tree",c)},function(t,n,e){var r=e(3),i=e(34),o=e(6),u=e(2),a=u.HIERARCHY,c=u.registerTransform,f=e(7).getField,s={field:"value",size:[1,1],padding:0,as:["x","y","r"]};function l(t,n){if(t.dataType!==a)throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");var e,u=t.root,c=(n=r({},s,n)).as;if(!o(c)||3!==c.length)throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ "x", "y", "r" ])!');try{e=f(n)}catch(t){console.warn(t)}e&&u.sum(function(t){return t[e]}).sort(function(t,n){return n[e]-t[e]});var l=i.pack();l.size(n.size),n.padding&&l.padding(n.padding),l(u);var h=c[0],p=c[1],v=c[2];u.each(function(t){t[h]=t.x,t[p]=t.y,t[v]=t.r})}c("hierarchy.pack",l),c("hierarchy.circle-packing",l),c("circle-packing",l)},function(t,n,e){var r=e(3),i=e(34),o=e(6),u=e(2),a=u.HIERARCHY,c=u.registerTransform,f=e(7).getField,s={field:"value",size:[1,1],round:!1,padding:0,sort:!0,as:["x","y"]};function l(t,n){if(t.dataType!==a)throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");var e,u=t.root,c=(n=r({},s,n)).as;if(!o(c)||2!==c.length)throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');try{e=f(n)}catch(t){console.warn(t)}e&&u.sum(function(t){return t[e]});var l=i.partition();l.size(n.size).round(n.round).padding(n.padding),l(u);var h=c[0],p=c[1];u.each(function(t){t[h]=[t.x0,t.x1,t.x1,t.x0],t[p]=[t.y1,t.y1,t.y0,t.y0],["x0","x1","y0","y1"].forEach(function(n){-1===c.indexOf(n)&&delete t[n]})})}c("hierarchy.partition",l),c("adjacency",l)},function(t,n,e){var r=e(3),i=e(34),o=e(6),u=e(2),a=u.HIERARCHY,c=u.registerTransform,f=e(7).getField,s={field:"value",size:[1,1],nodeSize:null,separation:null,as:["x","y"]};function l(t,n){if(t.dataType!==a)throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");var e,u=t.root,c=(n=r({},s,n)).as;if(!o(c)||2!==c.length)throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');try{e=f(n)}catch(t){console.warn(t)}e&&u.sum(function(t){return t[e]});var l=i.tree();l.size(n.size),n.nodeSize&&l.nodeSize(n.nodeSize),n.separation&&l.separation(n.separation),l(u);var h=c[0],p=c[1];u.each(function(t){t[h]=t.x,t[p]=t.y})}c("hierarchy.tree",l),c("tree",l)},function(t,n,e){var r=e(3),i=e(34),o=e(6),u=e(2),a=u.HIERARCHY,c=u.registerTransform,f=e(7).getField,s={field:"value",tile:"treemapSquarify",size:[1,1],round:!1,padding:0,paddingInner:0,paddingOuter:0,paddingTop:0,paddingRight:0,paddingBottom:0,paddingLeft:0,as:["x","y"]};function l(t,n){if(t.dataType!==a)throw new TypeError("Invalid DataView: This transform is for Hierarchy data only!");var e,u=t.root,c=(n=r({},s,n)).as;if(!o(c)||2!==c.length)throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');try{e=f(n)}catch(t){console.warn(t)}e&&u.sum(function(t){return t[e]});var l=i.treemap();l.tile(i[n.tile]).size(n.size).round(n.round).padding(n.padding).paddingInner(n.paddingInner).paddingOuter(n.paddingOuter).paddingTop(n.paddingTop).paddingRight(n.paddingRight).paddingBottom(n.paddingBottom).paddingLeft(n.paddingLeft),l(u);var h=c[0],p=c[1];u.each(function(t){t[h]=[t.x0,t.x1,t.x1,t.x0],t[p]=[t.y1,t.y1,t.y0,t.y0],["x0","x1","y0","y1"].forEach(function(n){-1===c.indexOf(n)&&delete t[n]})})}c("hierarchy.treemap",l),c("treemap",l)},function(t,n,e){var r=e(3),i=e(10),o=e(2).registerTransform,u=e(531),a=e(7).getFields,c={fields:["text","value"],font:function(){return"serif"},padding:1,size:[500,500],spiral:"archimedean",timeInterval:500};function f(t,n){n=r({},c,n);var e=u();["font","fontSize","padding","rotate","size","spiral","timeInterval"].forEach(function(t){n[t]&&e[t](n[t])});var o=a(n),f=o[0],s=o[1];if(!i(f)||!i(s))throw new TypeError('Invalid fields: must be an array with 2 strings (e.g. [ "text", "value" ])!');var l=t.rows.map(function(t){return t.text=t[f],t.value=t[s],t});e.words(l),n.imageMask&&e.createMask(n.imageMask);var h=e.start(),p=h._tags,v=h._bounds;p.forEach(function(t){t.x+=n.size[0]/2,t.y+=n.size[1]/2});var d=n.size,g=d[0],b=d[1],y=h.hasImage;p.push({text:"",value:0,x:y?0:v[0].x,y:y?0:v[0].y,opacity:0}),p.push({text:"",value:0,x:y?g:v[1].x,y:y?b:v[1].y,opacity:0}),t.rows=p,t._tagCloud=h}o("tag-cloud",f),o("word-cloud",f)},function(t,n){var e=Math.PI/180,r=64,i=2048;function o(t){return t.text}function u(){return"serif"}function a(){return"normal"}function c(t){return t.value}function f(){return 90*~~(2*Math.random())}function s(){return 1}function l(t,n,o,u){if(!n.sprite){var a=t.context,c=t.ratio;a.clearRect(0,0,(r<<5)/c,i/c);var f=0,s=0,l=0,h=o.length;for(--u;++u<h;){n=o[u],a.save(),a.font=n.style+" "+n.weight+" "+~~((n.size+1)/c)+"px "+n.font;var p=a.measureText(n.text+"m").width*c,v=n.size<<1;if(n.rotate){var d=Math.sin(n.rotate*e),g=Math.cos(n.rotate*e),b=p*g,y=p*d,j=v*g,O=v*d;p=Math.max(Math.abs(b+O),Math.abs(b-O))+31>>5<<5,v=~~Math.max(Math.abs(y+j),Math.abs(y-j))}else p=p+31>>5<<5;if(v>l&&(l=v),f+p>=r<<5&&(f=0,s+=l,l=0),s+v>=i)break;a.translate((f+(p>>1))/c,(s+(v>>1))/c),n.rotate&&a.rotate(n.rotate*e),a.fillText(n.text,0,0),n.padding&&(a.lineWidth=2*n.padding,a.strokeText(n.text,0,0)),a.restore(),n.width=p,n.height=v,n.xoff=f,n.yoff=s,n.x1=p>>1,n.y1=v>>1,n.x0=-n.x1,n.y0=-n.y1,n.hasText=!0,f+=p}for(var _=a.getImageData(0,0,(r<<5)/c,i/c).data,m=[];--u>=0;)if((n=o[u]).hasText){for(var w=n.width,x=w>>5,E=n.y1-n.y0,M=0;M<E*x;M++)m[M]=0;if(null==(f=n.xoff))return;s=n.yoff;for(var T=0,S=-1,k=0;k<E;k++){for(var C=0;C<w;C++){var P=x*k+(C>>5),N=_[(s+k)*(r<<5)+(f+C)<<2]?1<<31-C%32:0;m[P]|=N,T|=N}T?S=k:(n.y0++,E--,k--,s++)}n.y1=n.y0+S,n.sprite=m.slice(0,(n.y1-n.y0)*x)}}}function h(t,n,e){e>>=5;for(var r,i=t.sprite,o=t.width>>5,u=t.x-(o<<4),a=127&u,c=32-a,f=t.y1-t.y0,s=(t.y+t.y0)*e+(u>>5),l=0;l<f;l++){r=0;for(var h=0;h<=o;h++)if((r<<c|(h<o?(r=i[l*o+h])>>>a:0))&n[s+h])return!0;s+=e}return!1}function p(t,n){var e=t[0],r=t[1];n.x+n.x0<e.x&&(e.x=n.x+n.x0),n.y+n.y0<e.y&&(e.y=n.y+n.y0),n.x+n.x1>r.x&&(r.x=n.x+n.x1),n.y+n.y1>r.y&&(r.y=n.y+n.y1)}function v(t,n){return t.x+t.x1>n[0].x&&t.x+t.x0<n[1].x&&t.y+t.y1>n[0].y&&t.y+t.y0<n[1].y}function d(t){var n=t[0]/t[1];return function(t){return[n*(t*=.1)*Math.cos(t),t*Math.sin(t)]}}function g(t){for(var n=[],e=-1;++e<t;)n[e]=0;return n}function b(){return document.createElement("canvas")}function y(t){return"function"==typeof t?t:function(){return t}}var j={archimedean:d,rectangular:function(t){var n=4*t[0]/t[1],e=0,r=0;return function(t){var i=t<0?-1:1;switch(Math.sqrt(1+4*i*t)-i&3){case 0:e+=n;break;case 1:r+=4;break;case 2:e-=n;break;default:r-=4}return[e,r]}}};t.exports=function(){var t=[256,256],n=o,e=u,O=c,_=a,m=a,w=f,x=s,E=d,M=[],T=1/0,S=Math.random,k=b,C={};function P(n,e,r){for(var i,o,u,a=e.x,c=e.y,f=Math.sqrt(t[0]*t[0]+t[1]*t[1]),s=E(t),l=S()<.5?1:-1,p=-l;(i=s(p+=l))&&(o=~~i[0],u=~~i[1],!(Math.min(Math.abs(o),Math.abs(u))>=f));)if(e.x=a+o,e.y=c+u,!(e.x+e.x0<0||e.y+e.y0<0||e.x+e.x1>t[0]||e.y+e.y1>t[1])&&(!r||!h(e,n,t[0]))&&(!r||v(e,r))){for(var d=e.sprite,g=e.width>>5,b=t[0]>>5,y=e.x-(g<<4),j=127&y,O=32-j,_=e.y1-e.y0,m=void 0,w=(e.y+e.y0)*b+(y>>5),x=0;x<_;x++){m=0;for(var M=0;M<=g;M++)n[w+M]|=m<<O|(M<g?(m=d[x*g+M])>>>j:0);w+=b}return delete e.sprite,!0}return!1}return C.canvas=function(t){return arguments.length?(k=y(t),C):k},C.start=function(){var o=t,u=o[0],a=o[1],c=function(t){t.width=t.height=1;var n=Math.sqrt(t.getContext("2d").getImageData(0,0,1,1).data.length>>2);t.width=(r<<5)/n,t.height=i/n;var e=t.getContext("2d");return e.fillStyle=e.strokeStyle="red",e.textAlign="center",{context:e,ratio:n}}(k()),f=C.board?C.board:g((t[0]>>5)*t[1]),s=M.length,h=[],v=M.map(function(t,r){return t.text=n.call(this,t,r),t.font=e.call(this,t,r),t.style=_.call(this,t,r),t.weight=m.call(this,t,r),t.rotate=w.call(this,t,r),t.size=~~O.call(this,t,r),t.padding=x.call(this,t,r),t}).sort(function(t,n){return n.size-t.size}),d=-1,b=C.board?[{x:0,y:0},{x:u,y:a}]:null;return function(){var n=Date.now();for(;Date.now()-n<T&&++d<s;){var e=v[d];e.x=u*(S()+.5)>>1,e.y=a*(S()+.5)>>1,l(c,e,v,d),e.hasText&&P(f,e,b)&&(h.push(e),b?C.hasImage||p(b,e):b=[{x:e.x+e.x0,y:e.y+e.y0},{x:e.x+e.x1,y:e.y+e.y1}],e.x-=t[0]>>1,e.y-=t[1]>>1)}C._tags=h,C._bounds=b}(),C},C.createMask=function(n){var e=document.createElement("canvas"),r=t,i=r[0],o=r[1],u=i>>5,a=g((i>>5)*o);e.width=i,e.height=o;var c=e.getContext("2d");c.drawImage(n,0,0,n.width,n.height,0,0,i,o);for(var f=c.getImageData(0,0,i,o).data,s=0;s<o;s++)for(var l=0;l<i;l++){var h=u*s+(l>>5),p=s*i+l<<2,v=f[p]>=250&&f[p+1]>=250&&f[p+2]>=250?1<<31-l%32:0;a[h]|=v}C.board=a,C.hasImage=!0},C.timeInterval=function(t){return arguments.length?(T=null==t?1/0:t,C):T},C.words=function(t){return arguments.length?(M=t,C):M},C.size=function(n){return arguments.length?(t=[+n[0],+n[1]],C):t},C.font=function(t){return arguments.length?(e=y(t),C):e},C.fontStyle=function(t){return arguments.length?(_=y(t),C):_},C.fontWeight=function(t){return arguments.length?(m=y(t),C):m},C.rotate=function(t){return arguments.length?(w=y(t),C):w},C.text=function(t){return arguments.length?(n=y(t),C):n},C.spiral=function(t){return arguments.length?(E=j[t]||t,C):E},C.fontSize=function(t){return arguments.length?(O=y(t),C):O},C.padding=function(t){return arguments.length?(x=y(t),C):x},C.random=function(t){return arguments.length?(S=t,C):S},C}},function(t,n,e){var r=e(3),i=e(9),o=e(9),u=e(24),a=e(533),c=e(32),f=e(19).sum,s=e(15),l=e(2).registerTransform,h=e(7).getFields,p={fields:["name","value"],rows:5,size:[1,1],scale:1,groupBy:[],maxCount:1e3,gapRatio:.1,as:["x","y"]};l("waffle",function(t,n){n=r({},p,n);var e=h(n),l=e[0],v=e[1],d=n.as,g=d[0],b=d[1],y=n.groupBy,j=s(t.rows,y),O=u(j),_=n.size,m=_[0],w=_[1],x=n.maxCount,E=w/O.length,M=n.rows,T=n.gapRatio,S=[],k=n.scale,C=0,P=0;o(j,function(t){var n=f(a(t,function(t){return t[v]})),e=Math.ceil(n*k/M);n*k>x&&(k=x/n,e=Math.ceil(n*k/M)),P=m/e}),o(j,function(t){var n=[C*E,(C+1)*E],e=(n[1]-n[0])*(1-T)/M,r=0,o=0;i(t,function(t){for(var i=t[v],u=Math.round(i*k),a=0;a<u;a++){o===M&&(o=0,r++);var f=c(t,[l,v].concat(y));f[g]=r*P+P/2,f[b]=o*e+e/2+n[0],f._wStep=P,f._hStep=e,o++,S.push(f)}}),C+=1}),t.rows=S})},function(t,n,e){var r=e(9),i=e(91);t.exports=function(t,n){if(!i(t))return t;var e=[];return r(t,function(t,r){e.push(n(t,r))}),e}},function(t,n,e){var r=e(3),i=e(6),o=e(11),u=e(56),a=e(10),c=e(24),f=e(57),s=e(92),l=e(2).registerTransform,h=e(7).getFields,p=e(58).silverman,v={as:["x","y","z"],method:"gaussian",extent:[],bandwidth:[]},d=c(s);function g(t,n){n=r({},v,n);var e=h(n);if(!i(e)||2!==e.length)throw new TypeError("invalid fields: must be an array of 2 strings!");var c=n.as,l=c[0],g=c[1],b=c[2];if(!a(l)||!a(g)||!a(b))throw new TypeError("invalid as: must be an array of 3 strings!");var y=n.method;if(a(y)){if(-1===d.indexOf(y))throw new TypeError("invalid method: "+y+". Must be one of "+d.join(", "));y=s[y]}if(!o(y))throw new TypeError("invalid method: kernel method must be a function!");var j=e[0],O=e[1],_=n.extent,m=_[0],w=_[1];i(m)&&i(w)||(m=t.range(j),w=t.range(O));var x=n.bandwidth,E=x[0],M=x[1];(!u(E)||E<=0||!u(M)||M<=0)&&(E=p(t.getColumn(j)),M=p(t.getColumn(O)));for(var T=f(m,E),S=f(w,M),k=t.rows.length,C=[],P=0;P<T.length;P++)for(var N=0;N<S.length;N++){for(var R=0,B=T[P],A=S[N],I=0;I<k;I++)R+=y((B-t.rows[I][j])/E)*y((A-t.rows[I][O])/M);var L=1/(k*E*M)*R,z={};z[l]=B,z[g]=A,z[b]=L,C.push(z)}t.rows=C}l("kernel-smooth.density",g),l("kernel.density",g),t.exports={KERNEL_METHODS:d}},function(t,n,e){var r=e(3),i=e(6),o=e(11),u=e(77),a=e(56),c=e(10),f=e(24),s=e(19).sum,l=e(57),h=e(92),p=e(2).registerTransform,v=e(7).getFields,d=e(58).silverman,g={as:["x","y"],method:"gaussian"},b=f(h);function y(t){return function(n){return i(n)?n.map(function(n){return t(n)}):t(n)}}function j(t,n){n=r({},g,n);var e=v(n);if(!i(e)||1!==e.length&&2!==e.length)throw new TypeError("invalid fields: must be an array of 1 or 2 strings!");var f=n.as,p=f[0],j=f[1];if(!c(p)||!c(j))throw new TypeError("invalid as: must be an array of 2 strings!");var O=n.method;if(c(O)){if(-1===b.indexOf(O))throw new TypeError("invalid method: "+O+". Must be one of "+b.join(", "));O=h[O]}if(!o(O))throw new TypeError("invalid method: kernel method must be a function!");var _=e[0],m=e[1],w=t.getColumn(_),x=n.extent;i(x)||(x=t.range(_));var E=n.bandwidth;(!a(E)||E<=0)&&(E=d(w));var M,T=l(x,E),S=w.length,k=function(t,n,e,r){return t((r-e)/n)}.bind(null,O,E);if(u(m))M=y(function(t){var n=w.map(function(n){return k(t,n)}),e=s(n),r=S*E;return e&&r?e/r:0});else{var C=t.getColumn(m);M=y(function(t){var n=w.map(function(n){return k(t,n)}),e=s(n.map(function(t,n){return t*C[n]})),r=s(n);return e&&r?e/r:0})}var P=T.map(function(t){var n={};return n[p]=t,n[j]=M(t),n});t.rows=P}p("kernel-smooth.regression",j),p("kernel.regression",j),t.exports={KERNEL_METHODS:b}}])})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,