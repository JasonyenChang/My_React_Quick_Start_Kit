(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{111:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.storeShape=void 0;var o=function(e){return e&&e.__esModule?e:{default:e}}(n(1));t.storeShape=o.default.shape({subscribe:o.default.func.isRequired,setState:o.default.func.isRequired,getState:o.default.func.isRequired})},112:function(e,t,n){"use strict";n.d(t,"a",function(){return s});var o=n(230),i=n.n(o),r=n(5),a=n.n(r);function s(e,t,n){var o=a.a.unstable_batchedUpdates?function(e){a.a.unstable_batchedUpdates(n,e)}:n;return i()(e,t,o)}},113:function(e,t,n){"use strict";n.d(t,"a",function(){return r});var o=n(0),i=n.n(o);function r(e){var t=[];return i.a.Children.forEach(e,function(e){t.push(e)}),t}},223:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(0),r=(function(e){e&&e.__esModule}(i),n(111));var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"getChildContext",value:function(){return{miniStore:this.props.store}}},{key:"render",value:function(){return i.Children.only(this.props.children)}}]),t}();a.propTypes={store:r.storeShape.isRequired},a.childContextTypes={miniStore:r.storeShape.isRequired},t.default=a},224:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();t.default=function(e){var t=!!e,n=e||f;return function(c){var f=function(r){function l(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,e,t));return o.handleChange=function(){if(o.unsubscribe){var e=n(o.store.getState(),o.props);(0,s.default)(o.state.subscribed,e)||o.setState({subscribed:e})}},o.store=t.miniStore,o.state={subscribed:n(o.store.getState(),e),store:o.store,props:e},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(l,r),i(l,null,[{key:"getDerivedStateFromProps",value:function(t,o){return e&&2===e.length&&t!==o.props?{subscribed:n(o.store.getState(),t),props:t}:{props:t}}}]),i(l,[{key:"componentDidMount",value:function(){this.trySubscribe()}},{key:"componentWillUnmount",value:function(){this.tryUnsubscribe()}},{key:"trySubscribe",value:function(){t&&(this.unsubscribe=this.store.subscribe(this.handleChange),this.handleChange())}},{key:"tryUnsubscribe",value:function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null)}},{key:"getWrappedInstance",value:function(){return this.wrappedInstance}},{key:"render",value:function(){var e=this,t=o({},this.props,this.state.subscribed,{store:this.store});return function(e){return!e.prototype.render}(c)||(t=o({},t,{ref:function(t){return e.wrappedInstance=t}})),a.default.createElement(c,t)}}]),l}(r.Component);return f.displayName="Connect("+function(e){return e.displayName||e.name||"Component"}(c)+")",f.contextTypes={miniStore:p.storeShape.isRequired},(0,u.polyfill)(f),(0,l.default)(f,c)}};var r=n(0),a=c(r),s=c(n(225)),l=c(n(68)),u=n(56),p=n(111);function c(e){return e&&e.__esModule?e:{default:e}}var f=function(){return{}}},225:function(e,t){e.exports=function(e,t,n,o){var i=n?n.call(o,e,t):void 0;if(void 0!==i)return!!i;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var r=Object.keys(e),a=Object.keys(t);if(r.length!==a.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),l=0;l<r.length;l++){var u=r[l];if(!s(u))return!1;var p=e[u],c=t[u];if(!1===(i=n?n.call(o,p,c,u):void 0)||void 0===i&&p!==c)return!1}return!0}},226:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};t.default=function(e){var t=e,n=[];return{setState:function(e){t=o({},t,e);for(var i=0;i<n.length;i++)n[i]()},getState:function(){return t},subscribe:function(e){return n.push(e),function(){var t=n.indexOf(e);n.splice(t,1)}}}}},227:function(e,t,n){"use strict";function o(){var e=[].slice.call(arguments,0);return 1===e.length?e[0]:function(){for(var t=0;t<e.length;t++)e[t]&&e[t].apply&&e[t].apply(this,arguments)}}n.d(t,"a",function(){return o})},228:function(e,t,n){"use strict";(function(e){var n=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some(function(e,o){return e[0]===t&&(n=o,!0)}),n}return function(){function t(){this.__entries__=[]}var n={size:{configurable:!0}};return n.size.get=function(){return this.__entries__.length},t.prototype.get=function(t){var n=e(this.__entries__,t),o=this.__entries__[n];return o&&o[1]},t.prototype.set=function(t,n){var o=e(this.__entries__,t);~o?this.__entries__[o][1]=n:this.__entries__.push([t,n])},t.prototype.delete=function(t){var n=this.__entries__,o=e(n,t);~o&&n.splice(o,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,o=this.__entries__;n<o.length;n+=1){var i=o[n];e.call(t,i[1],i[0])}},Object.defineProperties(t.prototype,n),t}()}(),o="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,i=void 0!==e&&e.Math===Math?e:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),r="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(i):function(e){return setTimeout(function(){return e(Date.now())},1e3/60)},a=2,s=["top","right","bottom","left","width","height","size","weight"],l="undefined"!=typeof MutationObserver,u=function(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var n=!1,o=!1,i=0;function s(){n&&(n=!1,e()),o&&u()}function l(){r(s)}function u(){var e=Date.now();if(n){if(e-i<a)return;o=!0}else n=!0,o=!1,setTimeout(l,t);i=e}return u}(this.refresh.bind(this),20)};u.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},u.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_()},u.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},u.prototype.updateObservers_=function(){var e=this.observers_.filter(function(e){return e.gatherActive(),e.hasActive()});return e.forEach(function(e){return e.broadcastActive()}),e.length>0},u.prototype.connect_=function(){o&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),l?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},u.prototype.disconnect_=function(){o&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},u.prototype.onTransitionEnd_=function(e){var t=e.propertyName;void 0===t&&(t=""),s.some(function(e){return!!~t.indexOf(e)})&&this.refresh()},u.getInstance=function(){return this.instance_||(this.instance_=new u),this.instance_},u.instance_=null;var p=function(e,t){for(var n=0,o=Object.keys(t);n<o.length;n+=1){var i=o[n];Object.defineProperty(e,i,{value:t[i],enumerable:!1,writable:!1,configurable:!0})}return e},c=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||i},f=y(0,0,0,0);function d(e){return parseFloat(e)||0}function h(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return t.reduce(function(t,n){return t+d(e["border-"+n+"-width"])},0)}function v(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return f;var o=c(e).getComputedStyle(e),i=function(e){for(var t={},n=0,o=["top","right","bottom","left"];n<o.length;n+=1){var i=o[n],r=e["padding-"+i];t[i]=d(r)}return t}(o),r=i.left+i.right,a=i.top+i.bottom,s=d(o.width),l=d(o.height);if("border-box"===o.boxSizing&&(Math.round(s+r)!==t&&(s-=h(o,"left","right")+r),Math.round(l+a)!==n&&(l-=h(o,"top","bottom")+a)),!function(e){return e===c(e).document.documentElement}(e)){var u=Math.round(s+r)-t,p=Math.round(l+a)-n;1!==Math.abs(u)&&(s-=u),1!==Math.abs(p)&&(l-=p)}return y(i.left,i.top,s,l)}var m="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof c(e).SVGGraphicsElement}:function(e){return e instanceof c(e).SVGElement&&"function"==typeof e.getBBox};function g(e){return o?m(e)?function(e){var t=e.getBBox();return y(0,0,t.width,t.height)}(e):v(e):f}function y(e,t,n,o){return{x:e,y:t,width:n,height:o}}var b=function(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=y(0,0,0,0),this.target=e};b.prototype.isActive=function(){var e=g(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},b.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e};var C=function(e,t){var n=function(e){var t=e.x,n=e.y,o=e.width,i=e.height,r="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,a=Object.create(r.prototype);return p(a,{x:t,y:n,width:o,height:i,top:n,right:t+o,bottom:i+n,left:t}),a}(t);p(this,{target:e,contentRect:n})},O=function(e,t,o){if(this.activeObservations_=[],this.observations_=new n,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=o};O.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof c(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new b(e)),this.controller_.addObserver(this),this.controller_.refresh())}},O.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof c(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},O.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},O.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach(function(t){t.isActive()&&e.activeObservations_.push(t)})},O.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map(function(e){return new C(e.target,e.broadcastRect())});this.callback_.call(e,t,e),this.clearActive()}},O.prototype.clearActive=function(){this.activeObservations_.splice(0)},O.prototype.hasActive=function(){return this.activeObservations_.length>0};var w="undefined"!=typeof WeakMap?new WeakMap:new n,M=function(e){if(!(this instanceof M))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var t=u.getInstance(),n=new O(e,t,this);w.set(this,n)};["observe","unobserve","disconnect"].forEach(function(e){M.prototype[e]=function(){return(t=w.get(this))[e].apply(t,arguments);var t}});var S=void 0!==i.ResizeObserver?i.ResizeObserver:M;t.a=S}).call(this,n(18))},229:function(e,t,n){"use strict";function o(e,t){for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}n.d(t,"a",function(){return o})},230:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){function i(t){var i=new o.default(t);n.call(e,i)}if(e.addEventListener)return e.addEventListener(t,i,!1),{remove:function(){e.removeEventListener(t,i,!1)}};if(e.attachEvent)return e.attachEvent("on"+t,i),{remove:function(){e.detachEvent("on"+t,i)}}};var o=function(e){return e&&e.__esModule?e:{default:e}}(n(231));e.exports=t.default},231:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(232)),i=r(n(10));function r(e){return e&&e.__esModule?e:{default:e}}var a=!0,s=!1,l=["altKey","bubbles","cancelable","ctrlKey","currentTarget","eventPhase","metaKey","shiftKey","target","timeStamp","view","type"];function u(e){return null===e||void 0===e}var p=[{reg:/^key/,props:["char","charCode","key","keyCode","which"],fix:function(e,t){u(e.which)&&(e.which=u(t.charCode)?t.keyCode:t.charCode),void 0===e.metaKey&&(e.metaKey=e.ctrlKey)}},{reg:/^touch/,props:["touches","changedTouches","targetTouches"]},{reg:/^hashchange$/,props:["newURL","oldURL"]},{reg:/^gesturechange$/i,props:["rotation","scale"]},{reg:/^(mousewheel|DOMMouseScroll)$/,props:[],fix:function(e,t){var n=void 0,o=void 0,i=void 0,r=t.wheelDelta,a=t.axis,s=t.wheelDeltaY,l=t.wheelDeltaX,u=t.detail;r&&(i=r/120),u&&(i=0-(u%3==0?u/3:u)),void 0!==a&&(a===e.HORIZONTAL_AXIS?(o=0,n=0-i):a===e.VERTICAL_AXIS&&(n=0,o=i)),void 0!==s&&(o=s/120),void 0!==l&&(n=-1*l/120),n||o||(o=i),void 0!==n&&(e.deltaX=n),void 0!==o&&(e.deltaY=o),void 0!==i&&(e.delta=i)}},{reg:/^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,props:["buttons","clientX","clientY","button","offsetX","relatedTarget","which","fromElement","toElement","offsetY","pageX","pageY","screenX","screenY"],fix:function(e,t){var n=void 0,o=void 0,i=void 0,r=e.target,a=t.button;return r&&u(e.pageX)&&!u(t.clientX)&&(o=(n=r.ownerDocument||document).documentElement,i=n.body,e.pageX=t.clientX+(o&&o.scrollLeft||i&&i.scrollLeft||0)-(o&&o.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(o&&o.scrollTop||i&&i.scrollTop||0)-(o&&o.clientTop||i&&i.clientTop||0)),e.which||void 0===a||(e.which=1&a?1:2&a?3:4&a?2:0),!e.relatedTarget&&e.fromElement&&(e.relatedTarget=e.fromElement===r?e.toElement:e.fromElement),e}}];function c(){return a}function f(){return s}function d(e){var t=e.type,n="function"==typeof e.stopPropagation||"boolean"==typeof e.cancelBubble;o.default.call(this),this.nativeEvent=e;var i=f;"defaultPrevented"in e?i=e.defaultPrevented?c:f:"getPreventDefault"in e?i=e.getPreventDefault()?c:f:"returnValue"in e&&(i=e.returnValue===s?c:f),this.isDefaultPrevented=i;var r=[],a=void 0,u=void 0,d=l.concat();for(p.forEach(function(e){t.match(e.reg)&&(d=d.concat(e.props),e.fix&&r.push(e.fix))}),a=d.length;a;)this[u=d[--a]]=e[u];for(!this.target&&n&&(this.target=e.srcElement||document),this.target&&3===this.target.nodeType&&(this.target=this.target.parentNode),a=r.length;a;)(0,r[--a])(this,e);this.timeStamp=e.timeStamp||Date.now()}var h=o.default.prototype;(0,i.default)(d.prototype,h,{constructor:d,preventDefault:function(){var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=s,h.preventDefault.call(this)},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=a,h.stopPropagation.call(this)}}),t.default=d,e.exports=t.default},232:function(e,t,n){"use strict";function o(){return!1}function i(){return!0}function r(){this.timeStamp=Date.now(),this.target=void 0,this.currentTarget=void 0}Object.defineProperty(t,"__esModule",{value:!0}),r.prototype={isEventObject:1,constructor:r,isDefaultPrevented:o,isPropagationStopped:o,isImmediatePropagationStopped:o,preventDefault:function(){this.isDefaultPrevented=i},stopPropagation:function(){this.isPropagationStopped=i},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=i,this.stopPropagation()},halt:function(e){e?this.stopImmediatePropagation():this.stopPropagation(),this.preventDefault()}},t.default=r,e.exports=t.default},233:function(e,t,n){"use strict";var o=n(40),i=n.n(o),r=n(43),a=n.n(r),s=n(41),l=n.n(s),u=n(42),p=n.n(u),c=n(0),f=n.n(c),d=n(5),h=n.n(d),v=n(1),m=n.n(v),g=function(e){function t(){var e,n,o,r;i()(this,t);for(var a=arguments.length,s=Array(a),u=0;u<a;u++)s[u]=arguments[u];return n=o=l()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),o.removeContainer=function(){o.container&&(h.a.unmountComponentAtNode(o.container),o.container.parentNode.removeChild(o.container),o.container=null)},o.renderComponent=function(e,t){var n=o.props,i=n.visible,r=n.getComponent,a=n.forceRender,s=n.getContainer,l=n.parent;(i||l._component||a)&&(o.container||(o.container=s()),h.a.unstable_renderSubtreeIntoContainer(l,r(e),o.container,function(){t&&t.call(this)}))},r=n,l()(o,r)}return p()(t,e),a()(t,[{key:"componentDidMount",value:function(){this.props.autoMount&&this.renderComponent()}},{key:"componentDidUpdate",value:function(){this.props.autoMount&&this.renderComponent()}},{key:"componentWillUnmount",value:function(){this.props.autoDestroy&&this.removeContainer()}},{key:"render",value:function(){return this.props.children({renderComponent:this.renderComponent,removeContainer:this.removeContainer})}}]),t}(f.a.Component);g.propTypes={autoMount:m.a.bool,autoDestroy:m.a.bool,visible:m.a.bool,forceRender:m.a.bool,parent:m.a.any,getComponent:m.a.func.isRequired,getContainer:m.a.func.isRequired,children:m.a.func.isRequired},g.defaultProps={autoMount:!0,autoDestroy:!0,forceRender:!1},t.a=g},234:function(e,t,n){"use strict";var o=n(40),i=n.n(o),r=n(43),a=n.n(r),s=n(41),l=n.n(s),u=n(42),p=n.n(u),c=n(0),f=n.n(c),d=n(5),h=n.n(d),v=n(1),m=n.n(v),g=function(e){function t(){return i()(this,t),l()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return p()(t,e),a()(t,[{key:"componentDidMount",value:function(){this.createContainer()}},{key:"componentDidUpdate",value:function(e){var t=this.props.didUpdate;t&&t(e)}},{key:"componentWillUnmount",value:function(){this.removeContainer()}},{key:"createContainer",value:function(){this._container=this.props.getContainer(),this.forceUpdate()}},{key:"removeContainer",value:function(){this._container&&this._container.parentNode.removeChild(this._container)}},{key:"render",value:function(){return this._container?h.a.createPortal(this.props.children,this._container):null}}]),t}(f.a.Component);g.propTypes={getContainer:m.a.func.isRequired,children:m.a.node.isRequired,didUpdate:m.a.func},t.a=g},235:function(e,t){window.MutationObserver=window.MutationObserver||function(e){function t(e){this.i=[],this.m=e}function n(t){var n,o={type:null,target:null,addedNodes:[],removedNodes:[],previousSibling:null,nextSibling:null,attributeName:null,attributeNamespace:null,oldValue:null};for(n in t)o[n]!==e&&t[n]!==e&&(o[n]=t[n]);return o}function o(t,o){var s=r(t,o);return function(u){var p,c=u.length;o.a&&3===t.nodeType&&t.nodeValue!==s.a&&u.push(new n({type:"characterData",target:t,oldValue:s.a})),o.b&&s.b&&i(u,t,s.b,o.f),(o.c||o.g)&&(p=function(t,o,r,s){function u(e,o,r,a,l){var u,c,f,d=e.length-1;for(l=-~((d-l)/2);f=e.pop();)u=r[f.j],c=a[f.l],s.c&&l&&Math.abs(f.j-f.l)>=d&&(t.push(n({type:"childList",target:o,addedNodes:[u],removedNodes:[u],nextSibling:u.nextSibling,previousSibling:u.previousSibling})),l--),s.b&&c.b&&i(t,u,c.b,s.f),s.a&&3===u.nodeType&&u.nodeValue!==c.a&&t.push(n({type:"characterData",target:u,oldValue:c.a})),s.g&&p(u,c)}function p(o,r){for(var f,d,h,v,m,g=o.childNodes,y=r.c,b=g.length,C=y?y.length:0,O=0,w=0,M=0;w<b||M<C;)v=g[w],m=(h=y[M])&&h.node,v===m?(s.b&&h.b&&i(t,v,h.b,s.f),s.a&&h.a!==e&&v.nodeValue!==h.a&&t.push(n({type:"characterData",target:v,oldValue:h.a})),d&&u(d,o,g,y,O),s.g&&(v.childNodes.length||h.c&&h.c.length)&&p(v,h),w++,M++):(c=!0,f||(f={},d=[]),v&&(f[h=a(v)]||(f[h]=!0,-1===(h=l(y,v,M,"node"))?s.c&&(t.push(n({type:"childList",target:o,addedNodes:[v],nextSibling:v.nextSibling,previousSibling:v.previousSibling})),O++):d.push({j:w,l:h})),w++),m&&m!==g[w]&&(f[h=a(m)]||(f[h]=!0,-1===(h=l(g,m,w))?s.c&&(t.push(n({type:"childList",target:r.node,removedNodes:[m],nextSibling:y[M+1],previousSibling:y[M-1]})),O--):d.push({j:h,l:M})),M++));d&&u(d,o,g,y,O)}var c;return p(o,r),c}(u,t,s,o)),(p||u.length!==c)&&(s=r(t,o))}}function i(t,o,i,r){for(var a,s,l={},u=o.attributes,c=u.length;c--;)s=(a=u[c]).name,r&&r[s]===e||(p(o,a)!==i[s]&&t.push(n({type:"attributes",target:o,attributeName:s,oldValue:i[s],attributeNamespace:a.namespaceURI})),l[s]=!0);for(s in i)l[s]||t.push(n({target:o,type:"attributes",attributeName:s,oldValue:i[s]}))}function r(e,t){var n=!0;return function e(o){var i={node:o};return!t.a||3!==o.nodeType&&8!==o.nodeType?(t.b&&n&&1===o.nodeType&&(i.b=s(o.attributes,function(e,n){return t.f&&!t.f[n.name]||(e[n.name]=p(o,n)),e})),n&&(t.c||t.a||t.b&&t.g)&&(i.c=function(e,t){for(var n=[],o=0;o<e.length;o++)n[o]=t(e[o],o,e);return n}(o.childNodes,e)),n=t.g):i.a=o.nodeValue,i}(e)}function a(e){try{return e.id||(e.mo_id=e.mo_id||c++)}catch(t){try{return e.nodeValue}catch(e){return c++}}}function s(e,t){for(var n={},o=0;o<e.length;o++)n=t(n,e[o],o,e);return n}function l(e,t,n,o){for(;n<e.length;n++)if((o?e[n][o]:e[n])===t)return n;return-1}t._period=30,t.prototype={observe:function(e,n){for(var i={b:!!(n.attributes||n.attributeFilter||n.attributeOldValue),c:!!n.childList,g:!!n.subtree,a:!(!n.characterData&&!n.characterDataOldValue)},r=this.i,a=0;a<r.length;a++)r[a].s===e&&r.splice(a,1);n.attributeFilter&&(i.f=s(n.attributeFilter,function(e,t){return e[t]=!0,e})),r.push({s:e,o:o(e,i)}),this.h||function(e){!function n(){var o=e.takeRecords();o.length&&e.m(o,e),e.h=setTimeout(n,t._period)}()}(this)},takeRecords:function(){for(var e=[],t=this.i,n=0;n<t.length;n++)t[n].o(e);return e},disconnect:function(){this.i=[],clearTimeout(this.h),this.h=null}};var u=document.createElement("i");u.style.top=0;var p=(u="null"!=u.attributes.style.value)?function(e,t){return t.value}:function(e,t){return"style"!==t.name?t.value:e.style.cssText},c=1;return t}(void 0)},236:function(e,t,n){"use strict";t.a={today:"Today",now:"Now",backToToday:"Back to today",ok:"Ok",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"}},241:function(e,t,n){"use strict";var o=n(39),i=n.n(o),r=n(45),a=n.n(r),s=n(40),l=n.n(s),u=n(43),p=n.n(u),c=n(41),f=n.n(c),d=n(42),h=n.n(d),v=n(0),m=n.n(v),g=n(1),y=n.n(g),b=n(5),C=n.n(b),O=n(56),w=n(66),M=n(113),S=n(44),T=n.n(S),E=n(67),x=n(108),N=n.n(x),P=n(57),_=n(2),D=n.n(_),I=function(e){function t(){return l()(this,t),f()(this,e.apply(this,arguments))}return h()(t,e),t}(m.a.Component);I.propTypes={value:y.a.oneOfType([y.a.string,y.a.number])},I.isSelectOption=!0;var k=I;function A(e){return"string"==typeof e?e:null}function R(e){if(!e)return null;var t=e.props;if("value"in t)return t.value;if(e.key)return e.key;if(e.type&&e.type.isSelectOptGroup&&t.label)return t.label;throw new Error("Need at least a key or a value or a label (only for OptGroup) for "+e)}function V(e,t){return"value"===t?R(e):e.props[t]}function K(e){return e.combobox}function j(e){return e.multiple||e.tags}function F(e){return j(e)||K(e)}function L(e){return!F(e)}function W(e){var t=e;return void 0===e?t=[]:Array.isArray(e)||(t=[e]),t}function H(e){return typeof e+"-"+e}function U(e){e.preventDefault()}function B(e,t){for(var n=-1,o=0;o<e.length;o++)if(e[o]===t){n=o;break}return n}var z={userSelect:"none",WebkitUserSelect:"none"},Y={unselectable:"on"};function X(e,t){return!t.props.disabled&&W(V(t,this.props.optionFilterProp)).join("").toLowerCase().indexOf(e.toLowerCase())>-1}function q(e,t){return function(n){e[t]=n}}var G=n(49),Z=n.n(G),Q=n(90),$=n(79),J=n.n($),ee=n(89),te=n.n(ee),ne=function(e){function t(n){l()(this,t);var o=f()(this,e.call(this,n));return o.scrollActiveItemToView=function(){var e=Object(b.findDOMNode)(o.firstActiveItem),t=o.props,n=t.value,i=t.visible,r=t.firstActiveValue;if(e&&i){var a={onlyScrollIfNeeded:!0};n&&0!==n.length||!r||(a.alignWithTop=!0),o.rafInstance=te()(function(){J()(e,Object(b.findDOMNode)(o.menuRef),a)})}},o.lastInputValue=n.inputValue,o.saveMenuRef=q(o,"menuRef"),o}return h()(t,e),t.prototype.componentDidMount=function(){this.scrollActiveItemToView(),this.lastVisible=this.props.visible},t.prototype.shouldComponentUpdate=function(e){return e.visible||(this.lastVisible=!1),e.visible||e.inputValue!==this.props.inputValue},t.prototype.componentDidUpdate=function(e){var t=this.props;!e.visible&&t.visible&&this.scrollActiveItemToView(),this.lastVisible=t.visible,this.lastInputValue=t.inputValue},t.prototype.componentWillUnmount=function(){this.rafInstance&&this.rafInstance.cancel&&this.rafInstance.cancel()},t.prototype.renderMenu=function(){var e=this,t=this.props,n=t.menuItems,o=t.menuItemSelectedIcon,r=t.defaultActiveFirstOption,a=t.value,s=t.prefixCls,l=t.multiple,u=t.onMenuSelect,p=t.inputValue,c=t.firstActiveValue,f=t.backfillValue;if(n&&n.length){var d={};l?(d.onDeselect=t.onMenuDeselect,d.onSelect=u):d.onClick=u;var h=function e(t,n){if(null===n||void 0===n)return[];var o=[];return m.a.Children.forEach(t,function(t){if(t.type.isMenuItemGroup)o=o.concat(e(t.props.children,n));else{var i=R(t),r=t.key;-1!==B(n,i)&&r&&o.push(r)}}),o}(n,a),g={},y=n;if(h.length||c){t.visible&&!this.lastVisible&&(g.activeKey=h[0]||c);var b=!1,C=function(t){return!b&&-1!==h.indexOf(t.key)||!b&&!h.length&&-1!==c.indexOf(t.key)?(b=!0,Object(v.cloneElement)(t,{ref:function(t){e.firstActiveItem=t}})):t};y=n.map(function(e){if(e.type.isMenuItemGroup){var t=Object(M.a)(e.props.children).map(C);return Object(v.cloneElement)(e,{},t)}return C(e)})}else this.firstActiveItem=null;var O=a&&a[a.length-1];return p===this.lastInputValue||O&&O===f||(g.activeKey=""),m.a.createElement(P.e,i()({ref:this.saveMenuRef,style:this.props.dropdownMenuStyle,defaultActiveFirst:r,role:"listbox",itemIcon:l?o:null},g,{multiple:l},d,{selectedKeys:h,prefixCls:s+"-menu"}),y)}return null},t.prototype.render=function(){var e=this.renderMenu();return e?m.a.createElement("div",{style:{overflow:"auto",transform:"translateZ(0)"},onFocus:this.props.onPopupFocus,onMouseDown:U,onScroll:this.props.onPopupScroll},e):null},t}(m.a.Component);ne.displayName="DropdownMenu",ne.propTypes={defaultActiveFirstOption:y.a.bool,value:y.a.any,dropdownMenuStyle:y.a.object,multiple:y.a.bool,onPopupFocus:y.a.func,onPopupScroll:y.a.func,onMenuDeSelect:y.a.func,onMenuSelect:y.a.func,prefixCls:y.a.string,menuItems:y.a.any,inputValue:y.a.string,visible:y.a.bool,firstActiveValue:y.a.string,menuItemSelectedIcon:y.a.oneOfType([y.a.func,y.a.node])};var oe=ne;Q.a.displayName="Trigger";var ie={bottomLeft:{points:["tl","bl"],offset:[0,4],overflow:{adjustX:0,adjustY:1}},topLeft:{points:["bl","tl"],offset:[0,-4],overflow:{adjustX:0,adjustY:1}}},re=function(e){function t(n){l()(this,t);var o=f()(this,e.call(this,n));return ae.call(o),o.saveDropdownMenuRef=q(o,"dropdownMenuRef"),o.saveTriggerRef=q(o,"triggerRef"),o.state={dropdownWidth:null},o}return h()(t,e),t.prototype.componentDidMount=function(){this.setDropdownWidth()},t.prototype.componentDidUpdate=function(){this.setDropdownWidth()},t.prototype.render=function(){var e,t=this.props,n=t.onPopupFocus,o=Z()(t,["onPopupFocus"]),r=o.multiple,a=o.visible,s=o.inputValue,l=o.dropdownAlign,u=o.disabled,p=o.showSearch,c=o.dropdownClassName,f=o.dropdownStyle,d=o.dropdownMatchSelectWidth,h=this.getDropdownPrefixCls(),v=((e={})[c]=!!c,e[h+"--"+(r?"multiple":"single")]=1,e),g=this.getDropdownElement({menuItems:o.options,onPopupFocus:n,multiple:r,inputValue:s,visible:a}),y=void 0;y=u?[]:L(o)&&!p?["click"]:["blur"];var b=i()({},f),C=d?"width":"minWidth";return this.state.dropdownWidth&&(b[C]=this.state.dropdownWidth+"px"),m.a.createElement(Q.a,i()({},o,{showAction:u?[]:this.props.showAction,hideAction:y,ref:this.saveTriggerRef,popupPlacement:"bottomLeft",builtinPlacements:ie,prefixCls:h,popupTransitionName:this.getDropdownTransitionName(),onPopupVisibleChange:o.onDropdownVisibleChange,popup:g,popupAlign:l,popupVisible:a,getPopupContainer:o.getPopupContainer,popupClassName:T()(v),popupStyle:b}),o.children)},t}(m.a.Component);re.propTypes={onPopupFocus:y.a.func,onPopupScroll:y.a.func,dropdownMatchSelectWidth:y.a.bool,dropdownAlign:y.a.object,visible:y.a.bool,disabled:y.a.bool,showSearch:y.a.bool,dropdownClassName:y.a.string,multiple:y.a.bool,inputValue:y.a.string,filterOption:y.a.any,options:y.a.any,prefixCls:y.a.string,popupClassName:y.a.string,children:y.a.any,showAction:y.a.arrayOf(y.a.string),menuItemSelectedIcon:y.a.oneOfType([y.a.func,y.a.node])};var ae=function(){var e=this;this.setDropdownWidth=function(){if(e.props.dropdownMatchSelectWidth){var t=C.a.findDOMNode(e).offsetWidth;t!==e.state.dropdownWidth&&e.setState({dropdownWidth:t})}},this.getInnerMenu=function(){return e.dropdownMenuRef&&e.dropdownMenuRef.menuRef},this.getPopupDOMNode=function(){return e.triggerRef.getPopupDomNode()},this.getDropdownElement=function(t){var n=e.props;return m.a.createElement(oe,i()({ref:e.saveDropdownMenuRef},t,{prefixCls:e.getDropdownPrefixCls(),onMenuSelect:n.onMenuSelect,onMenuDeselect:n.onMenuDeselect,onPopupScroll:n.onPopupScroll,value:n.value,backfillValue:n.backfillValue,firstActiveValue:n.firstActiveValue,defaultActiveFirstOption:n.defaultActiveFirstOption,dropdownMenuStyle:n.dropdownMenuStyle,menuItemSelectedIcon:n.menuItemSelectedIcon}))},this.getDropdownTransitionName=function(){var t=e.props,n=t.transitionName;return!n&&t.animation&&(n=e.getDropdownPrefixCls()+"-"+t.animation),n},this.getDropdownPrefixCls=function(){return e.props.prefixCls+"-dropdown"}},se=re;function le(e,t,n){var o=y.a.oneOfType([y.a.string,y.a.number]),i=y.a.shape({key:o.isRequired,label:y.a.node});{if(!e.labelInValue)return("multiple"===e.mode||"tags"===e.mode||e.multiple||e.tags)&&""===e[t]?new Error("Invalid prop `"+t+"` of type `string` supplied to `"+n+"`, expected `array` when `multiple` or `tags` is `true`."):y.a.oneOfType([y.a.arrayOf(o),o]).apply(void 0,arguments);if(y.a.oneOfType([y.a.arrayOf(i),i]).apply(void 0,arguments))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`, when you set `labelInValue` to `true`, `"+t+"` should in shape of `{ key: string | number, label?: ReactNode }`.")}}re.displayName="SelectTrigger";var ue={id:y.a.string,defaultActiveFirstOption:y.a.bool,multiple:y.a.bool,filterOption:y.a.any,children:y.a.any,showSearch:y.a.bool,disabled:y.a.bool,allowClear:y.a.bool,showArrow:y.a.bool,tags:y.a.bool,prefixCls:y.a.string,className:y.a.string,transitionName:y.a.string,optionLabelProp:y.a.string,optionFilterProp:y.a.string,animation:y.a.string,choiceTransitionName:y.a.string,onChange:y.a.func,onBlur:y.a.func,onFocus:y.a.func,onSelect:y.a.func,onSearch:y.a.func,onPopupScroll:y.a.func,onMouseEnter:y.a.func,onMouseLeave:y.a.func,onInputKeyDown:y.a.func,placeholder:y.a.any,onDeselect:y.a.func,labelInValue:y.a.bool,value:le,defaultValue:le,dropdownStyle:y.a.object,maxTagTextLength:y.a.number,maxTagCount:y.a.number,maxTagPlaceholder:y.a.oneOfType([y.a.node,y.a.func]),tokenSeparators:y.a.arrayOf(y.a.string),getInputElement:y.a.func,showAction:y.a.arrayOf(y.a.string),clearIcon:y.a.node,inputIcon:y.a.node,removeIcon:y.a.node,menuItemSelectedIcon:y.a.oneOfType([y.a.func,y.a.node])};function pe(){}var ce=function(e){function t(n){l()(this,t);var o=f()(this,e.call(this,n));fe.call(o);var i=t.getOptionsInfoFromProps(n);return o.state={value:t.getValueFromProps(n,!0),inputValue:n.combobox?t.getInputValueForCombobox(n,i,!0):"",open:n.defaultOpen,optionsInfo:i,skipBuildOptionsInfo:!0},o.saveInputRef=q(o,"inputRef"),o.saveInputMirrorRef=q(o,"inputMirrorRef"),o.saveTopCtrlRef=q(o,"topCtrlRef"),o.saveSelectTriggerRef=q(o,"selectTriggerRef"),o.saveRootRef=q(o,"rootRef"),o.saveSelectionRef=q(o,"selectionRef"),o}return h()(t,e),t.prototype.componentDidMount=function(){this.props.autoFocus&&this.focus()},t.prototype.componentDidUpdate=function(){if(j(this.props)){var e=this.getInputDOMNode(),t=this.getInputMirrorDOMNode();e.value?(e.style.width="",e.style.width=t.clientWidth+"px"):e.style.width=""}this.forcePopupAlign()},t.prototype.componentWillUnmount=function(){this.clearFocusTime(),this.clearBlurTime(),this.dropdownContainer&&(C.a.unmountComponentAtNode(this.dropdownContainer),document.body.removeChild(this.dropdownContainer),this.dropdownContainer=null)},t.prototype.focus=function(){L(this.props)?this.selectionRef.focus():this.getInputDOMNode().focus()},t.prototype.blur=function(){L(this.props)?this.selectionRef.blur():this.getInputDOMNode().blur()},t.prototype.renderClear=function(){var e=this.props,t=e.prefixCls,n=e.allowClear,o=e.clearIcon,r=this.state,a=r.value,s=r.inputValue,l=m.a.createElement("span",i()({key:"clear",className:t+"-selection__clear",onMouseDown:U,style:z},Y,{onClick:this.onClearSelection}),o||m.a.createElement("i",{className:t+"-selection__clear-icon"},"×"));return n?K(this.props)?s?l:null:s||a.length?l:null:null},t.prototype.render=function(){var e,t=this.props,n=j(t),o=this.state,r=t.className,a=t.disabled,s=t.prefixCls,l=t.inputIcon,u=this.renderTopControlNode(),p=this.state.open;p&&(this._options=this.renderFilterOptions());var c=this.getRealOpenState(),f=this._options||[],d={};for(var h in t)!t.hasOwnProperty(h)||"data-"!==h.substr(0,5)&&"aria-"!==h.substr(0,5)&&"role"!==h||(d[h]=t[h]);var v=i()({},d);F(t)||(v=i()({},v,{onKeyDown:this.onKeyDown,tabIndex:t.disabled?-1:0}));var g=((e={})[r]=!!r,e[s]=1,e[s+"-open"]=p,e[s+"-focused"]=p||!!this._focused,e[s+"-combobox"]=K(t),e[s+"-disabled"]=a,e[s+"-enabled"]=!a,e[s+"-allow-clear"]=!!t.allowClear,e[s+"-no-arrow"]=!t.showArrow,e);return m.a.createElement(se,{onPopupFocus:this.onPopupFocus,onMouseEnter:this.props.onMouseEnter,onMouseLeave:this.props.onMouseLeave,dropdownAlign:t.dropdownAlign,dropdownClassName:t.dropdownClassName,dropdownMatchSelectWidth:t.dropdownMatchSelectWidth,defaultActiveFirstOption:t.defaultActiveFirstOption,dropdownMenuStyle:t.dropdownMenuStyle,transitionName:t.transitionName,animation:t.animation,prefixCls:t.prefixCls,dropdownStyle:t.dropdownStyle,combobox:t.combobox,showSearch:t.showSearch,options:f,multiple:n,disabled:a,visible:c,inputValue:o.inputValue,value:o.value,backfillValue:o.backfillValue,firstActiveValue:t.firstActiveValue,onDropdownVisibleChange:this.onDropdownVisibleChange,getPopupContainer:t.getPopupContainer,onMenuSelect:this.onMenuSelect,onMenuDeselect:this.onMenuDeselect,onPopupScroll:t.onPopupScroll,showAction:t.showAction,ref:this.saveSelectTriggerRef,menuItemSelectedIcon:t.menuItemSelectedIcon},m.a.createElement("div",{id:t.id,style:t.style,ref:this.saveRootRef,onBlur:this.onOuterBlur,onFocus:this.onOuterFocus,className:T()(g)},m.a.createElement("div",i()({ref:this.saveSelectionRef,key:"selection",className:s+"-selection\n            "+s+"-selection--"+(n?"multiple":"single"),role:"combobox","aria-autocomplete":"list","aria-haspopup":"true","aria-expanded":c},v),u,this.renderClear(),n||!t.showArrow?null:m.a.createElement("span",i()({key:"arrow",className:s+"-arrow",style:z},Y,{onClick:this.onArrowClick}),l||m.a.createElement("i",{className:s+"-arrow-icon"})))))},t}(m.a.Component);ce.propTypes=ue,ce.defaultProps={prefixCls:"rc-select",defaultOpen:!1,labelInValue:!1,defaultActiveFirstOption:!0,showSearch:!0,allowClear:!1,placeholder:"",onChange:pe,onFocus:pe,onBlur:pe,onSelect:pe,onSearch:pe,onDeselect:pe,onInputKeyDown:pe,showArrow:!0,dropdownMatchSelectWidth:!0,dropdownStyle:{},dropdownMenuStyle:{},optionFilterProp:"value",optionLabelProp:"value",notFoundContent:"Not Found",backfill:!1,showAction:["click"],tokenSeparators:[],autoClearSearchValue:!0},ce.getDerivedStateFromProps=function(e,t){var n=t.skipBuildOptionsInfo?t.optionsInfo:ce.getOptionsInfoFromProps(e,t),o={optionsInfo:n,skipBuildOptionsInfo:!1};if("open"in e&&(o.open=e.open),"value"in e){var i=ce.getValueFromProps(e);o.value=i,e.combobox&&(o.inputValue=ce.getInputValueForCombobox(e,n))}return o},ce.getOptionsFromChildren=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return m.a.Children.forEach(e,function(e){e&&(e.type.isSelectOptGroup?ce.getOptionsFromChildren(e.props.children,t):t.push(e))}),t},ce.getInputValueForCombobox=function(e,t,n){var o=[];if("value"in e&&!n&&(o=W(e.value)),"defaultValue"in e&&n&&(o=W(e.defaultValue)),!o.length)return"";var i=o=o[0];return e.labelInValue?i=o.label:t[H(o)]&&(i=t[H(o)].label),void 0===i&&(i=""),i},ce.getLabelFromOption=function(e,t){return V(t,e.optionLabelProp)},ce.getOptionsInfoFromProps=function(e,t){var n={};if(ce.getOptionsFromChildren(e.children).forEach(function(t){var o=R(t);n[H(o)]={option:t,value:o,label:ce.getLabelFromOption(e,t),title:t.props.title}}),t){var o=t.optionsInfo;t.value.forEach(function(e){var t=H(e);n[t]||void 0===o[t]||(n[t]=o[t])})}return n},ce.getValueFromProps=function(e,t){var n=[];return"value"in e&&!t&&(n=W(e.value)),"defaultValue"in e&&t&&(n=W(e.defaultValue)),e.labelInValue&&(n=n.map(function(e){return e.key})),n};var fe=function(){var e=this;this.onInputChange=function(t){var n=e.props.tokenSeparators,o=t.target.value;if(j(e.props)&&n.length&&function(e,t){for(var n=0;n<t.length;++n)if(e.lastIndexOf(t[n])>0)return!0;return!1}(o,n)){var i=e.getValueByInput(o);return void 0!==i&&e.fireChange(i),e.setOpenState(!1,!0),void e.setInputValue("",!1)}e.setInputValue(o),e.setState({open:!0}),K(e.props)&&e.fireChange([o])},this.onDropdownVisibleChange=function(t){t&&!e._focused&&(e.clearBlurTime(),e.timeoutFocus(),e._focused=!0,e.updateFocusClassName()),e.setOpenState(t)},this.onKeyDown=function(t){var n=e.state.open;if(!e.props.disabled){var o=t.keyCode;n&&!e.getInputDOMNode()?e.onInputKeyDown(t):o!==w.a.ENTER&&o!==w.a.DOWN||(n||e.setOpenState(!0),t.preventDefault())}},this.onInputKeyDown=function(t){var n=e.props;if(!n.disabled){var o=e.state,i=t.keyCode;if(!j(n)||t.target.value||i!==w.a.BACKSPACE){if(i===w.a.DOWN){if(!o.open)return e.openIfHasChildren(),t.preventDefault(),void t.stopPropagation()}else if(i===w.a.ENTER&&o.open)t.preventDefault();else if(i===w.a.ESC)return void(o.open&&(e.setOpenState(!1),t.preventDefault(),t.stopPropagation()));if(e.getRealOpenState(o)){var r=e.selectTriggerRef.getInnerMenu();r&&r.onKeyDown(t,e.handleBackfill)&&(t.preventDefault(),t.stopPropagation())}}else{t.preventDefault();var a=o.value;a.length&&e.removeSelected(a[a.length-1])}}},this.onMenuSelect=function(t){var n=t.item;if(n){var o=e.state.value,i=e.props,r=R(n),a=o[o.length-1];if(e.fireSelect(r),j(i)){if(-1!==B(o,r))return;o=o.concat([r])}else{if(void 0!==a&&a===r&&r!==e.state.backfillValue)return void e.setOpenState(!1,!0);o=[r],e.setOpenState(!1,!0)}e.fireChange(o);var s=void 0;s=K(i)?V(n,i.optionLabelProp):"",i.autoClearSearchValue&&e.setInputValue(s,!1)}},this.onMenuDeselect=function(t){var n=t.item,o=t.domEvent;"keydown"!==o.type||o.keyCode!==w.a.ENTER?("click"===o.type&&e.removeSelected(R(n)),e.props.autoClearSearchValue&&e.setInputValue("",!1)):e.removeSelected(R(n))},this.onArrowClick=function(t){t.stopPropagation(),t.preventDefault(),e.props.disabled||e.setOpenState(!e.state.open,!e.state.open)},this.onPlaceholderClick=function(){e.getInputDOMNode()&&e.getInputDOMNode().focus()},this.onOuterFocus=function(t){e.props.disabled?t.preventDefault():(e.clearBlurTime(),(F(e.props)||t.target!==e.getInputDOMNode())&&(e._focused||(e._focused=!0,e.updateFocusClassName(),e.timeoutFocus())))},this.onPopupFocus=function(){e.maybeFocus(!0,!0)},this.onOuterBlur=function(t){e.props.disabled?t.preventDefault():e.blurTimer=setTimeout(function(){e._focused=!1,e.updateFocusClassName();var t=e.props,n=e.state.value,o=e.state.inputValue;if(L(t)&&t.showSearch&&o&&t.defaultActiveFirstOption){var i=e._options||[];if(i.length){var r=function e(t){for(var n=0;n<t.length;n++){var o=t[n];if(o.type.isMenuItemGroup){var i=e(o.props.children);if(i)return i}else if(!o.props.disabled)return o}return null}(i);r&&(n=[R(r)],e.fireChange(n))}}else j(t)&&o&&(e.state.inputValue=e.getInputDOMNode().value="",void 0!==(n=e.getValueByInput(o))&&e.fireChange(n));e.setOpenState(!1),t.onBlur(e.getVLForOnChange(n))},10)},this.onClearSelection=function(t){var n=e.props,o=e.state;if(!n.disabled){var i=o.inputValue,r=o.value;t.stopPropagation(),(i||r.length)&&(r.length&&e.fireChange([]),e.setOpenState(!1,!0),i&&e.setInputValue(""))}},this.onChoiceAnimationLeave=function(){e.forcePopupAlign()},this.getOptionInfoBySingleValue=function(t,n){var o=void 0;if((n=n||e.state.optionsInfo)[H(t)]&&(o=n[H(t)]),o)return o;var i=t;if(e.props.labelInValue){var r=function(e,t){var n=void 0;e=W(e);for(var o=0;o<e.length;o++)if(e[o].key===t){n=e[o].label;break}return n}(e.props.value,t);void 0!==r&&(i=r)}return{option:m.a.createElement(k,{value:t,key:t},t),value:t,label:i}},this.getOptionBySingleValue=function(t){return e.getOptionInfoBySingleValue(t).option},this.getOptionsBySingleValue=function(t){return t.map(function(t){return e.getOptionBySingleValue(t)})},this.getValueByLabel=function(t){if(void 0===t)return null;var n=null;return Object.keys(e.state.optionsInfo).forEach(function(o){var i=e.state.optionsInfo[o];W(i.label).join("")===t&&(n=i.value)}),n},this.getVLBySingleValue=function(t){return e.props.labelInValue?{key:t,label:e.getLabelBySingleValue(t)}:t},this.getVLForOnChange=function(t){var n=t;return void 0!==n?(n=e.props.labelInValue?n.map(function(t){return{key:t,label:e.getLabelBySingleValue(t)}}):n.map(function(e){return e}),j(e.props)?n:n[0]):n},this.getLabelBySingleValue=function(t,n){return e.getOptionInfoBySingleValue(t,n).label},this.getDropdownContainer=function(){return e.dropdownContainer||(e.dropdownContainer=document.createElement("div"),document.body.appendChild(e.dropdownContainer)),e.dropdownContainer},this.getPlaceholderElement=function(){var t=e.props,n=e.state,o=!1;n.inputValue&&(o=!0),n.value.length&&(o=!0),K(t)&&1===n.value.length&&!n.value[0]&&(o=!1);var r=t.placeholder;return r?m.a.createElement("div",i()({onMouseDown:U,style:i()({display:o?"none":"block"},z)},Y,{onClick:e.onPlaceholderClick,className:t.prefixCls+"-selection__placeholder"}),r):null},this.getInputElement=function(){var t,n=e.props,o=n.getInputElement?n.getInputElement():m.a.createElement("input",{id:n.id,autoComplete:"off"}),i=T()(o.props.className,((t={})[n.prefixCls+"-search__field"]=!0,t));return m.a.createElement("div",{className:n.prefixCls+"-search__field__wrap"},m.a.cloneElement(o,{ref:e.saveInputRef,onChange:e.onInputChange,onKeyDown:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(){for(var e=arguments.length,n=Array(e),o=0;o<e;o++)n[o]=arguments[o];for(var i=0;i<t.length;i++)t[i]&&"function"==typeof t[i]&&t[i].apply(this,n)}}(e.onInputKeyDown,o.props.onKeyDown,e.props.onInputKeyDown),value:e.state.inputValue,disabled:n.disabled,className:i}),m.a.createElement("span",{ref:e.saveInputMirrorRef,className:n.prefixCls+"-search__field__mirror"},e.state.inputValue," "))},this.getInputDOMNode=function(){return e.topCtrlRef?e.topCtrlRef.querySelector("input,textarea,div[contentEditable]"):e.inputRef},this.getInputMirrorDOMNode=function(){return e.inputMirrorRef},this.getPopupDOMNode=function(){return e.selectTriggerRef.getPopupDOMNode()},this.getPopupMenuComponent=function(){return e.selectTriggerRef.getInnerMenu()},this.setOpenState=function(t,n){var o=e.props;if(e.state.open!==t){e.props.onDropdownVisibleChange&&e.props.onDropdownVisibleChange(t);var i={open:t,backfillValue:void 0};!t&&L(o)&&o.showSearch&&e.setInputValue("",!1),t||e.maybeFocus(t,n),e.setState(i,function(){t&&e.maybeFocus(t,n)})}else e.maybeFocus(t,n)},this.setInputValue=function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t!==e.state.inputValue&&(e.setState({inputValue:t},e.forcePopupAlign),n&&e.props.onSearch(t))},this.getValueByInput=function(t){var n=e.props,o=n.multiple,i=n.tokenSeparators,r=e.state.value,a=!1;return function(e,t){var n=new RegExp("["+t.join()+"]");return e.split(n).filter(function(e){return e})}(t,i).forEach(function(t){var n=[t];if(o){var i=e.getValueByLabel(t);i&&-1===B(r,i)&&(r=r.concat(i),a=!0,e.fireSelect(i))}else-1===B(r,t)&&(r=r.concat(n),a=!0,e.fireSelect(t))}),a?r:void 0},this.getRealOpenState=function(t){var n=(t||e.state).open,o=e._options||[];return!F(e.props)&&e.props.showSearch||n&&!o.length&&(n=!1),n},this.handleBackfill=function(t){if(e.props.backfill&&(L(e.props)||K(e.props))){var n=R(t);K(e.props)&&e.setInputValue(n,!1),e.setState({value:[n],backfillValue:n})}},this.filterOption=function(t,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:X,i=e.state.value,r=i[i.length-1];if(!t||r&&r===e.state.backfillValue)return!0;var a=e.props.filterOption;return"filterOption"in e.props?!0===e.props.filterOption&&(a=o):a=o,!a||("function"==typeof a?a.call(e,t,n):!n.props.disabled)},this.timeoutFocus=function(){e.focusTimer&&e.clearFocusTime(),e.focusTimer=setTimeout(function(){e.props.onFocus()},10)},this.clearFocusTime=function(){e.focusTimer&&(clearTimeout(e.focusTimer),e.focusTimer=null)},this.clearBlurTime=function(){e.blurTimer&&(clearTimeout(e.blurTimer),e.blurTimer=null)},this.updateFocusClassName=function(){var t=e.rootRef,n=e.props;e._focused?N()(t).add(n.prefixCls+"-focused"):N()(t).remove(n.prefixCls+"-focused")},this.maybeFocus=function(t,n){if(n||t){var o=e.getInputDOMNode(),i=document.activeElement;o&&(t||F(e.props))?i!==o&&(o.focus(),e._focused=!0):i!==e.selectionRef&&(e.selectionRef.focus(),e._focused=!0)}},this.removeSelected=function(t,n){var o=e.props;if(!o.disabled&&!e.isChildDisabled(t)){n&&n.stopPropagation&&n.stopPropagation();var i=e.state.value.filter(function(e){return e!==t});if(j(o)){var r=t;o.labelInValue&&(r={key:t,label:e.getLabelBySingleValue(t)}),o.onDeselect(r,e.getOptionBySingleValue(t))}e.fireChange(i)}},this.openIfHasChildren=function(){var t=e.props;(m.a.Children.count(t.children)||L(t))&&e.setOpenState(!0)},this.fireSelect=function(t){e.props.onSelect(e.getVLBySingleValue(t),e.getOptionBySingleValue(t))},this.fireChange=function(t){var n=e.props;"value"in n||e.setState({value:t},e.forcePopupAlign);var o=e.getVLForOnChange(t),i=e.getOptionsBySingleValue(t);n.onChange(o,j(e.props)?i:i[0])},this.isChildDisabled=function(t){return Object(M.a)(e.props.children).some(function(e){return R(e)===t&&e.props&&e.props.disabled})},this.forcePopupAlign=function(){e.state.open&&e.selectTriggerRef.triggerRef.forcePopupAlign()},this.renderFilterOptions=function(){var t=e.state.inputValue,n=e.props,o=n.children,i=n.tags,r=n.filterOption,a=n.notFoundContent,s=[],l=[],u=e.renderFilterOptionsFromChildren(o,l,s);if(i){var p=e.state.value;if((p=p.filter(function(e){return-1===l.indexOf(e)&&(!t||String(e).indexOf(String(t))>-1)})).forEach(function(e){var t=e,n=m.a.createElement(P.b,{style:z,role:"option",attribute:Y,value:t,key:t},t);u.push(n),s.push(n)}),t)s.every(function(n){var o=function(){return R(n)===t};return!1!==r?!e.filterOption.call(e,t,n,o):!o()})&&u.unshift(m.a.createElement(P.b,{style:z,role:"option",attribute:Y,value:t,key:t},t))}return!u.length&&a&&(u=[m.a.createElement(P.b,{style:z,attribute:Y,disabled:!0,role:"option",value:"NOT_FOUND",key:"NOT_FOUND"},a)]),u},this.renderFilterOptionsFromChildren=function(t,n,o){var r=[],a=e.props,s=e.state.inputValue,l=a.tags;return m.a.Children.forEach(t,function(t){if(t)if(t.type.isSelectOptGroup){var a=e.renderFilterOptionsFromChildren(t.props.children,n,o);if(a.length){var u=t.props.label,p=t.key;p||"string"!=typeof u?!u&&p&&(u=p):p=u,r.push(m.a.createElement(P.c,{key:p,title:u},a))}}else{D()(t.type.isSelectOption,"the children of `Select` should be `Select.Option` or `Select.OptGroup`, instead of `"+(t.type.name||t.type.displayName||t.type)+"`.");var c=R(t);if(function(e,t){if(!L(t)&&!function(e){return e.multiple}(t)&&"string"!=typeof e)throw new Error("Invalid `value` of type `"+typeof e+"` supplied to Option, expected `string` when `tags/combobox` is `true`.")}(c,e.props),e.filterOption(s,t)){var f=m.a.createElement(P.b,i()({style:z,attribute:Y,value:c,key:c,role:"option"},t.props));r.push(f),o.push(f)}l&&n.push(c)}}),r},this.renderTopControlNode=function(){var t=e.state,n=t.value,o=t.open,r=t.inputValue,a=e.props,s=a.choiceTransitionName,l=a.prefixCls,u=a.maxTagTextLength,p=a.maxTagCount,c=a.maxTagPlaceholder,f=a.showSearch,d=a.removeIcon,h=l+"-selection__rendered",v=null;if(L(a)){var g=null;if(n.length){var y=!1,b=1;f&&o?(y=!r)&&(b=.4):y=!0;var C=n[0],O=e.getOptionInfoBySingleValue(C),w=O.label,M=O.title;g=m.a.createElement("div",{key:"value",className:l+"-selection-selected-value",title:A(M||w),style:{display:y?"block":"none",opacity:b}},w)}v=f?[g,m.a.createElement("div",{className:l+"-search "+l+"-search--inline",key:"input",style:{display:o?"block":"none"}},e.getInputElement())]:[g]}else{var S=[],T=n,x=void 0;if(void 0!==p&&n.length>p){T=T.slice(0,p);var N=e.getVLForOnChange(n.slice(p,n.length)),P="+ "+(n.length-p)+" ...";c&&(P="function"==typeof c?c(N):c),x=m.a.createElement("li",i()({style:z},Y,{onMouseDown:U,className:l+"-selection__choice "+l+"-selection__choice__disabled",key:"maxTagPlaceholder",title:A(P)}),m.a.createElement("div",{className:l+"-selection__choice__content"},P))}j(a)&&(S=T.map(function(t){var n=e.getOptionInfoBySingleValue(t),o=n.label,r=n.title||o;u&&"string"==typeof o&&o.length>u&&(o=o.slice(0,u)+"...");var a=e.isChildDisabled(t),s=a?l+"-selection__choice "+l+"-selection__choice__disabled":l+"-selection__choice";return m.a.createElement("li",i()({style:z},Y,{onMouseDown:U,className:s,key:t,title:A(r)}),m.a.createElement("div",{className:l+"-selection__choice__content"},o),a?null:m.a.createElement("span",{onClick:function(n){e.removeSelected(t,n)},className:l+"-selection__choice__remove"},d||m.a.createElement("i",{className:l+"-selection__choice__remove-icon"},"×")))})),x&&S.push(x),S.push(m.a.createElement("li",{className:l+"-search "+l+"-search--inline",key:"__input"},e.getInputElement())),v=j(a)&&s?m.a.createElement(E.a,{onLeave:e.onChoiceAnimationLeave,component:"ul",transitionName:s},S):m.a.createElement("ul",null,S)}return m.a.createElement("div",{className:h,ref:e.saveTopCtrlRef},e.getPlaceholderElement(),v)}};ce.displayName="Select",Object(O.polyfill)(ce);var de=ce,he=function(e){function t(){return l()(this,t),f()(this,e.apply(this,arguments))}return h()(t,e),t}(m.a.Component);he.isSelectOptGroup=!0;var ve=he;de.Option=k,de.OptGroup=ve;var me=de,ge=function(e){function t(){return l()(this,t),f()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return h()(t,e),p()(t,[{key:"getLocale",value:function(){var e=this.props,t=e.componentName,n=e.defaultLocale,o=this.context.antLocale,r=o&&o[t];return i()({},"function"==typeof n?n():n,r||{})}},{key:"getLocaleCode",value:function(){var e=this.context.antLocale,t=e&&e.locale;return e&&e.exist&&!t?"en-us":t}},{key:"render",value:function(){return this.props.children(this.getLocale(),this.getLocaleCode())}}]),t}(v.Component),ye=ge;ge.contextTypes={antLocale:g.object};var be=n(236),Ce={placeholder:"Select time"},Oe={lang:i()({placeholder:"Select date",rangePlaceholder:["Start date","End date"]},be.a),timePickerLocale:i()({},Ce)},we={locale:"en",Pagination:{items_per_page:"/ page",jump_to:"Goto",jump_to_confirm:"confirm",page:"",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages"},DatePicker:Oe,TimePicker:Ce,Calendar:Oe,Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],notFoundContent:"Not Found",searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items"},Select:{notFoundContent:"Not Found"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file"}},Me=n(6),Se=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(e);i<o.length;i++)t.indexOf(o[i])<0&&(n[o[i]]=e[o[i]])}return n},Te={prefixCls:g.string,className:g.string,size:g.oneOf(["default","large","small"]),notFoundContent:g.any,showSearch:g.bool,optionLabelProp:g.string,transitionName:g.string,choiceTransitionName:g.string,id:g.string},Ee=function(e){function t(e){l()(this,t);var n=f()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.saveSelect=function(e){n.rcSelect=e},n.renderSelect=function(e){var t,o=n.props,r=o.prefixCls,s=o.className,l=void 0===s?"":s,u=o.size,p=o.mode,c=Se(o,["prefixCls","className","size","mode"]),f=T()((t={},a()(t,r+"-lg","large"===u),a()(t,r+"-sm","small"===u),t),l),d=n.props.optionLabelProp;n.isCombobox()&&(d=d||"value");var h={multiple:"multiple"===p,tags:"tags"===p,combobox:n.isCombobox()},m=v.createElement(Me.a,{type:"down",className:r+"-arrow-icon"}),g=v.createElement(Me.a,{type:"close",className:r+"-remove-icon"}),y=v.createElement(Me.a,{type:"close-circle",theme:"filled",className:r+"-clear-icon"}),b=v.createElement(Me.a,{type:"check",className:r+"-selected-icon"});return v.createElement(me,i()({inputIcon:m,removeIcon:g,clearIcon:y,menuItemSelectedIcon:b},c,h,{prefixCls:r,className:f,optionLabelProp:d||"children",notFoundContent:n.getNotFoundContent(e),ref:n.saveSelect}))},D()("combobox"!==e.mode,"The combobox mode of Select is deprecated,it will be removed in next major version,please use AutoComplete instead"),n}return h()(t,e),p()(t,[{key:"focus",value:function(){this.rcSelect.focus()}},{key:"blur",value:function(){this.rcSelect.blur()}},{key:"getNotFoundContent",value:function(e){var t=this.props.notFoundContent;return this.isCombobox()?void 0===t?null:t:void 0===t?e.notFoundContent:t}},{key:"isCombobox",value:function(){var e=this.props.mode;return"combobox"===e||e===t.SECRET_COMBOBOX_MODE_DO_NOT_USE}},{key:"render",value:function(){return v.createElement(ye,{componentName:"Select",defaultLocale:we.Select},this.renderSelect)}}]),t}(v.Component);t.a=Ee;Ee.Option=k,Ee.OptGroup=ve,Ee.SECRET_COMBOBOX_MODE_DO_NOT_USE="SECRET_COMBOBOX_MODE_DO_NOT_USE",Ee.defaultProps={prefixCls:"ant-select",showSearch:!1,transitionName:"slide-up",choiceTransitionName:"zoom"},Ee.propTypes=Te},242:function(e,t,n){"use strict";var o=n(45),i=n.n(o),r=n(39),a=n.n(r),s=n(40),l=n.n(s),u=n(43),p=n.n(u),c=n(41),f=n.n(c),d=n(42),h=n.n(d),v=n(0),m=n.n(v),g=n(5),y=n(57),b=n(1),C=n.n(b),O=n(44),w=n.n(O),M=n(107),S=n(89),T=n.n(S);function E(e,t,n){var o=void 0,i=void 0;return Object(M.a)(e,"ant-motion-collapse",{start:function(){t?(o=e.offsetHeight,e.style.height="0px",e.style.opacity="0"):(e.style.height=e.offsetHeight+"px",e.style.opacity="1")},active:function(){i&&T.a.cancel(i),i=T()(function(){e.style.height=(t?o:0)+"px",e.style.opacity=t?"1":"0"})},end:function(){i&&T.a.cancel(i),e.style.height="",e.style.opacity="",n()}})}var x={enter:function(e,t){return E(e,!0,t)},leave:function(e,t){return E(e,!1,t)},appear:function(e,t){return E(e,!0,t)}},N=n(55),P=function(e){function t(){l()(this,t);var e=f()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return e.onKeyDown=function(t){e.subMenu.onKeyDown(t)},e.saveSubMenu=function(t){e.subMenu=t},e}return h()(t,e),p()(t,[{key:"render",value:function(){var e=this.props,t=e.rootPrefixCls,n=e.className,o=this.context.antdMenuTheme;return v.createElement(y.d,a()({},this.props,{ref:this.saveSubMenu,popupClassName:w()(t+"-"+o,n)}))}}]),t}(v.Component);P.contextTypes={antdMenuTheme:b.string},P.isSubMenu=1;var _=P,D=n(56),I=n(49),k=n.n(I),A=n(90),R={adjustX:1,adjustY:1},V=[0,0],K={left:{points:["cr","cl"],overflow:R,offset:[-4,0],targetOffset:V},right:{points:["cl","cr"],overflow:R,offset:[4,0],targetOffset:V},top:{points:["bc","tc"],overflow:R,offset:[0,-4],targetOffset:V},bottom:{points:["tc","bc"],overflow:R,offset:[0,4],targetOffset:V},topLeft:{points:["bl","tl"],overflow:R,offset:[0,-4],targetOffset:V},leftTop:{points:["tr","tl"],overflow:R,offset:[-4,0],targetOffset:V},topRight:{points:["br","tr"],overflow:R,offset:[0,-4],targetOffset:V},rightTop:{points:["tl","tr"],overflow:R,offset:[4,0],targetOffset:V},bottomRight:{points:["tr","br"],overflow:R,offset:[0,4],targetOffset:V},rightBottom:{points:["bl","br"],overflow:R,offset:[4,0],targetOffset:V},bottomLeft:{points:["tl","bl"],overflow:R,offset:[0,4],targetOffset:V},leftBottom:{points:["br","bl"],overflow:R,offset:[-4,0],targetOffset:V}},j=function(e){function t(){return l()(this,t),f()(this,e.apply(this,arguments))}return h()(t,e),t.prototype.componentDidUpdate=function(){var e=this.props.trigger;e&&e.forcePopupAlign()},t.prototype.render=function(){var e=this.props,t=e.overlay,n=e.prefixCls,o=e.id;return m.a.createElement("div",{className:n+"-inner",id:o,role:"tooltip"},"function"==typeof t?t():t)},t}(m.a.Component);j.propTypes={prefixCls:C.a.string,overlay:C.a.oneOfType([C.a.node,C.a.func]).isRequired,id:C.a.string,trigger:C.a.any};var F=j,L=function(e){function t(){var n,o,i;l()(this,t);for(var r=arguments.length,a=Array(r),s=0;s<r;s++)a[s]=arguments[s];return n=o=f()(this,e.call.apply(e,[this].concat(a))),o.getPopupElement=function(){var e=o.props,t=e.arrowContent,n=e.overlay,i=e.prefixCls,r=e.id;return[m.a.createElement("div",{className:i+"-arrow",key:"arrow"},t),m.a.createElement(F,{key:"content",trigger:o.trigger,prefixCls:i,id:r,overlay:n})]},o.saveTrigger=function(e){o.trigger=e},i=n,f()(o,i)}return h()(t,e),t.prototype.getPopupDomNode=function(){return this.trigger.getPopupDomNode()},t.prototype.render=function(){var e=this.props,t=e.overlayClassName,n=e.trigger,o=e.mouseEnterDelay,i=e.mouseLeaveDelay,r=e.overlayStyle,s=e.prefixCls,l=e.children,u=e.onVisibleChange,p=e.afterVisibleChange,c=e.transitionName,f=e.animation,d=e.placement,h=e.align,v=e.destroyTooltipOnHide,g=e.defaultVisible,y=e.getTooltipContainer,b=k()(e,["overlayClassName","trigger","mouseEnterDelay","mouseLeaveDelay","overlayStyle","prefixCls","children","onVisibleChange","afterVisibleChange","transitionName","animation","placement","align","destroyTooltipOnHide","defaultVisible","getTooltipContainer"]),C=a()({},b);return"visible"in this.props&&(C.popupVisible=this.props.visible),m.a.createElement(A.a,a()({popupClassName:t,ref:this.saveTrigger,prefixCls:s,popup:this.getPopupElement,action:n,builtinPlacements:K,popupPlacement:d,popupAlign:h,getPopupContainer:y,onPopupVisibleChange:u,afterPopupVisibleChange:p,popupTransitionName:c,popupAnimation:f,defaultPopupVisible:g,destroyPopupOnHide:v,mouseLeaveDelay:i,popupStyle:r,mouseEnterDelay:o},C),l)},t}(v.Component);L.propTypes={trigger:C.a.any,children:C.a.any,defaultVisible:C.a.bool,visible:C.a.bool,placement:C.a.string,transitionName:C.a.oneOfType([C.a.string,C.a.object]),animation:C.a.any,onVisibleChange:C.a.func,afterVisibleChange:C.a.func,overlay:C.a.oneOfType([C.a.node,C.a.func]).isRequired,overlayStyle:C.a.object,overlayClassName:C.a.string,prefixCls:C.a.string,mouseEnterDelay:C.a.number,mouseLeaveDelay:C.a.number,getTooltipContainer:C.a.func,destroyTooltipOnHide:C.a.bool,align:C.a.object,arrowContent:C.a.any,id:C.a.string},L.defaultProps={prefixCls:"rc-tooltip",mouseEnterDelay:0,destroyTooltipOnHide:!1,mouseLeaveDelay:.1,align:{},placement:"right",trigger:["hover"],arrowContent:null};var W=L,H={adjustX:1,adjustY:1},U={adjustX:0,adjustY:0},B=[0,0];function z(e){return"boolean"==typeof e?e?H:U:a()({},U,e)}var Y=function(e){function t(e){l()(this,t);var n=f()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onVisibleChange=function(e){var t=n.props.onVisibleChange;"visible"in n.props||n.setState({visible:!n.isNoTitle()&&e}),t&&!n.isNoTitle()&&t(e)},n.onPopupAlign=function(e,t){var o=n.getPlacements(),i=Object.keys(o).filter(function(e){return o[e].points[0]===t.points[0]&&o[e].points[1]===t.points[1]})[0];if(i){var r=e.getBoundingClientRect(),a={top:"50%",left:"50%"};i.indexOf("top")>=0||i.indexOf("Bottom")>=0?a.top=r.height-t.offset[1]+"px":(i.indexOf("Top")>=0||i.indexOf("bottom")>=0)&&(a.top=-t.offset[1]+"px"),i.indexOf("left")>=0||i.indexOf("Right")>=0?a.left=r.width-t.offset[0]+"px":(i.indexOf("right")>=0||i.indexOf("Left")>=0)&&(a.left=-t.offset[0]+"px"),e.style.transformOrigin=a.left+" "+a.top}},n.saveTooltip=function(e){n.tooltip=e},n.state={visible:!!e.visible||!!e.defaultVisible},n}return h()(t,e),p()(t,[{key:"getPopupDomNode",value:function(){return this.tooltip.getPopupDomNode()}},{key:"getPlacements",value:function(){var e=this.props,t=e.builtinPlacements,n=e.arrowPointAtCenter,o=e.autoAdjustOverflow;return t||function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.arrowWidth,n=void 0===t?5:t,o=e.horizontalArrowShift,i=void 0===o?16:o,r=e.verticalArrowShift,s=void 0===r?12:r,l=e.autoAdjustOverflow,u=void 0===l||l,p={left:{points:["cr","cl"],offset:[-4,0]},right:{points:["cl","cr"],offset:[4,0]},top:{points:["bc","tc"],offset:[0,-4]},bottom:{points:["tc","bc"],offset:[0,4]},topLeft:{points:["bl","tc"],offset:[-(i+n),-4]},leftTop:{points:["tr","cl"],offset:[-4,-(s+n)]},topRight:{points:["br","tc"],offset:[i+n,-4]},rightTop:{points:["tl","cr"],offset:[4,-(s+n)]},bottomRight:{points:["tr","bc"],offset:[i+n,4]},rightBottom:{points:["bl","cr"],offset:[4,s+n]},bottomLeft:{points:["tl","bc"],offset:[-(i+n),4]},leftBottom:{points:["br","cl"],offset:[-4,s+n]}};return Object.keys(p).forEach(function(t){p[t]=e.arrowPointAtCenter?a()({},p[t],{overflow:z(u),targetOffset:B}):a()({},K[t],{overflow:z(u)})}),p}({arrowPointAtCenter:n,verticalArrowShift:8,autoAdjustOverflow:o})}},{key:"isHoverTrigger",value:function(){var e=this.props.trigger;return!e||"hover"===e||!!Array.isArray(e)&&e.indexOf("hover")>=0}},{key:"getDisabledCompatibleChildren",value:function(e){if((e.type.__ANT_BUTTON||"button"===e.type)&&e.props.disabled&&this.isHoverTrigger()){var t=function(e,t){var n={},o=a()({},e);return t.forEach(function(t){e&&t in e&&(n[t]=e[t],delete o[t])}),{picked:n,omitted:o}}(e.props.style,["position","left","right","top","bottom","float","display","zIndex"]),n=t.picked,o=t.omitted,i=a()({display:"inline-block"},n,{cursor:"not-allowed"}),r=a()({},o,{pointerEvents:"none"}),s=Object(v.cloneElement)(e,{style:r,className:null});return v.createElement("span",{style:i,className:e.props.className},s)}return e}},{key:"isNoTitle",value:function(){var e=this.props,t=e.title,n=e.overlay;return!t&&!n}},{key:"render",value:function(){var e=this.props,t=this.state,n=e.prefixCls,o=e.title,r=e.overlay,s=e.openClassName,l=e.getPopupContainer,u=e.getTooltipContainer,p=e.children,c=t.visible;"visible"in e||!this.isNoTitle()||(c=!1);var f=this.getDisabledCompatibleChildren(v.isValidElement(p)?p:v.createElement("span",null,p)),d=f.props,h=w()(d.className,i()({},s||n+"-open",!0));return v.createElement(W,a()({},this.props,{getTooltipContainer:l||u,ref:this.saveTooltip,builtinPlacements:this.getPlacements(),overlay:r||o||"",visible:c,onVisibleChange:this.onVisibleChange,onPopupAlign:this.onPopupAlign}),c?Object(v.cloneElement)(f,{className:h}):f)}}],[{key:"getDerivedStateFromProps",value:function(e){return"visible"in e?{visible:e.visible}:null}}]),t}(v.Component);Y.defaultProps={prefixCls:"ant-tooltip",placement:"top",transitionName:"zoom-big-fast",mouseEnterDelay:.1,mouseLeaveDelay:.1,arrowPointAtCenter:!1,autoAdjustOverflow:!0},Object(D.polyfill)(Y);var X=Y,q=function(e){function t(){l()(this,t);var e=f()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return e.onKeyDown=function(t){e.menuItem.onKeyDown(t)},e.saveMenuItem=function(t){e.menuItem=t},e}return h()(t,e),p()(t,[{key:"render",value:function(){var e=this.context.inlineCollapsed,t=this.props;return v.createElement(X,{title:e&&1===t.level?t.children:"",placement:"right",overlayClassName:t.rootPrefixCls+"-inline-collapsed-tooltip"},v.createElement(y.b,a()({},t,{ref:this.saveMenuItem})))}}]),t}(v.Component);q.contextTypes={inlineCollapsed:b.bool},q.isMenuItem=1;var G=q,Z=function(e){function t(e){l()(this,t);var n=f()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.inlineOpenKeys=[],n.handleClick=function(e){n.handleOpenChange([]);var t=n.props.onClick;t&&t(e)},n.handleOpenChange=function(e){n.setOpenKeys(e);var t=n.props.onOpenChange;t&&t(e)},Object(N.a)(!("onOpen"in e||"onClose"in e),"`onOpen` and `onClose` are removed, please use `onOpenChange` instead, see: https://u.ant.design/menu-on-open-change."),Object(N.a)(!("inlineCollapsed"in e&&"inline"!==e.mode),"`inlineCollapsed` should only be used when Menu's `mode` is inline.");var o=void 0;return"openKeys"in e?o=e.openKeys:"defaultOpenKeys"in e&&(o=e.defaultOpenKeys),n.state={openKeys:o||[]},n}return h()(t,e),p()(t,[{key:"getChildContext",value:function(){return{inlineCollapsed:this.getInlineCollapsed(),antdMenuTheme:this.props.theme}}},{key:"componentWillReceiveProps",value:function(e,t){var n=this.props.prefixCls;if("inline"===this.props.mode&&"inline"!==e.mode&&(this.switchModeFromInline=!0),"openKeys"in e)this.setState({openKeys:e.openKeys});else{if(e.inlineCollapsed&&!this.props.inlineCollapsed||t.siderCollapsed&&!this.context.siderCollapsed){var o=Object(g.findDOMNode)(this);this.switchModeFromInline=!!this.state.openKeys.length&&!!o.querySelectorAll("."+n+"-submenu-open").length,this.inlineOpenKeys=this.state.openKeys,this.setState({openKeys:[]})}(!e.inlineCollapsed&&this.props.inlineCollapsed||!t.siderCollapsed&&this.context.siderCollapsed)&&(this.setState({openKeys:this.inlineOpenKeys}),this.inlineOpenKeys=[])}}},{key:"setOpenKeys",value:function(e){"openKeys"in this.props||this.setState({openKeys:e})}},{key:"getRealMenuMode",value:function(){var e=this.getInlineCollapsed();if(this.switchModeFromInline&&e)return"inline";var t=this.props.mode;return e?"vertical":t}},{key:"getInlineCollapsed",value:function(){var e=this.props.inlineCollapsed;return void 0!==this.context.siderCollapsed?this.context.siderCollapsed:e}},{key:"getMenuOpenAnimation",value:function(e){var t=this,n=this.props,o=n.openAnimation,i=n.openTransitionName,r=o||i;if(void 0===o&&void 0===i)switch(e){case"horizontal":r="slide-up";break;case"vertical":case"vertical-left":case"vertical-right":this.switchModeFromInline?(r="",this.switchModeFromInline=!1):r="zoom-big";break;case"inline":r=a()({},x,{leave:function(e,n){return x.leave(e,function(){t.switchModeFromInline=!1,t.setState({}),"vertical"!==t.getRealMenuMode()&&n()})}})}return r}},{key:"render",value:function(){var e=this.props,t=e.prefixCls,n=e.className,o=e.theme,r=this.getRealMenuMode(),s=this.getMenuOpenAnimation(r),l=w()(n,t+"-"+o,i()({},t+"-inline-collapsed",this.getInlineCollapsed())),u={openKeys:this.state.openKeys,onOpenChange:this.handleOpenChange,className:l,mode:r};"inline"!==r?(u.onClick=this.handleClick,u.openTransitionName=s):u.openAnimation=s;var p=this.context.collapsedWidth;return!this.getInlineCollapsed()||0!==p&&"0"!==p&&"0px"!==p?v.createElement(y.e,a()({},this.props,u)):null}}]),t}(v.Component);t.a=Z;Z.Divider=y.a,Z.Item=G,Z.SubMenu=_,Z.ItemGroup=y.c,Z.defaultProps={prefixCls:"ant-menu",className:"",theme:"light",focusable:!1},Z.childContextTypes={inlineCollapsed:b.bool,antdMenuTheme:b.string},Z.contextTypes={siderCollapsed:b.bool,collapsedWidth:b.oneOfType([b.number,b.string])}},244:function(e,t,n){"use strict";var o=n(45),i=n.n(o),r=n(78),a=n.n(r),s=n(39),l=n.n(s),u=n(40),p=n.n(u),c=n(43),f=n.n(c),d=n(41),h=n.n(d),v=n(42),m=n.n(v),g=n(0),y=n(1),b=n(44),C=n.n(b),O=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(e);i<o.length;i++)t.indexOf(o[i])<0&&(n[o[i]]=e[o[i]])}return n};function w(e){return function(t){return function(n){function o(){return p()(this,o),h()(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return m()(o,n),f()(o,[{key:"render",value:function(){var n=e.prefixCls;return g.createElement(t,l()({prefixCls:n},this.props))}}]),o}(g.Component)}}var M=function(e){function t(){return p()(this,t),h()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return m()(t,e),f()(t,[{key:"render",value:function(){var e=this.props,t=e.prefixCls,n=e.className,o=e.children,i=O(e,["prefixCls","className","children"]),r=C()(n,t);return g.createElement("div",l()({className:r},i),o)}}]),t}(g.Component),S=function(e){function t(){p()(this,t);var e=h()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return e.state={siders:[]},e}return m()(t,e),f()(t,[{key:"getChildContext",value:function(){var e=this;return{siderHook:{addSider:function(t){e.setState({siders:[].concat(a()(e.state.siders),[t])})},removeSider:function(t){e.setState({siders:e.state.siders.filter(function(e){return e!==t})})}}}}},{key:"render",value:function(){var e=this.props,t=e.prefixCls,n=e.className,o=e.children,r=e.hasSider,a=O(e,["prefixCls","className","children","hasSider"]),s=C()(n,t,i()({},t+"-has-sider",r||this.state.siders.length>0));return g.createElement("div",l()({className:s},a),o)}}]),t}(g.Component);S.childContextTypes={siderHook:y.object};var T=w({prefixCls:"ant-layout"})(S),E=w({prefixCls:"ant-layout-header"})(M),x=w({prefixCls:"ant-layout-footer"})(M),N=w({prefixCls:"ant-layout-content"})(M);T.Header=E,T.Footer=x,T.Content=N;var P=T,_=n(56),D=n(60),I=n(6),k=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},A=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(e);i<o.length;i++)t.indexOf(o[i])<0&&(n[o[i]]=e[o[i]])}return n};if("undefined"!=typeof window){window.matchMedia=window.matchMedia||function(e){return{media:e,matches:!1,addListener:function(){},removeListener:function(){}}}}var R={xs:"480px",sm:"576px",md:"768px",lg:"992px",xl:"1200px",xxl:"1600px"},V=function(){var e=0;return function(){return""+(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"")+(e+=1)}}(),K=function(e){function t(e){p()(this,t);var n=h()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.responsiveHandler=function(e){n.setState({below:e.matches});var t=n.props.onBreakpoint;t&&t(e.matches),n.state.collapsed!==e.matches&&n.setCollapsed(e.matches,"responsive")},n.setCollapsed=function(e,t){"collapsed"in n.props||n.setState({collapsed:e});var o=n.props.onCollapse;o&&o(e,t)},n.toggle=function(){var e=!n.state.collapsed;n.setCollapsed(e,"clickTrigger")},n.belowShowChange=function(){n.setState({belowShow:!n.state.belowShow})},n.uniqueId=V("ant-sider-");var o=void 0;"undefined"!=typeof window&&(o=window.matchMedia),o&&e.breakpoint&&e.breakpoint in R&&(n.mql=o("(max-width: "+R[e.breakpoint]+")"));var i=void 0;return i="collapsed"in e?e.collapsed:e.defaultCollapsed,n.state={collapsed:i,below:!1},n}return m()(t,e),f()(t,[{key:"getChildContext",value:function(){return{siderCollapsed:this.state.collapsed,collapsedWidth:this.props.collapsedWidth}}},{key:"componentDidMount",value:function(){this.mql&&(this.mql.addListener(this.responsiveHandler),this.responsiveHandler(this.mql)),this.context.siderHook&&this.context.siderHook.addSider(this.uniqueId)}},{key:"componentWillUnmount",value:function(){this.mql&&this.mql.removeListener(this.responsiveHandler),this.context.siderHook&&this.context.siderHook.removeSider(this.uniqueId)}},{key:"render",value:function(){var e,t=this.props,n=t.prefixCls,o=t.className,r=t.theme,a=t.collapsible,s=t.reverseArrow,u=t.trigger,p=t.style,c=t.width,f=t.collapsedWidth,d=A(t,["prefixCls","className","theme","collapsible","reverseArrow","trigger","style","width","collapsedWidth"]),h=Object(D.a)(d,["collapsed","defaultCollapsed","onCollapse","breakpoint","onBreakpoint"]),v=this.state.collapsed?f:c,m=k(v)?v+"px":String(v),y=0===parseFloat(String(f||0))?g.createElement("span",{onClick:this.toggle,className:n+"-zero-width-trigger"},g.createElement(I.a,{type:"bars"})):null,b={expanded:s?g.createElement(I.a,{type:"right"}):g.createElement(I.a,{type:"left"}),collapsed:s?g.createElement(I.a,{type:"left"}):g.createElement(I.a,{type:"right"})}[this.state.collapsed?"collapsed":"expanded"],O=null!==u?y||g.createElement("div",{className:n+"-trigger",onClick:this.toggle,style:{width:m}},u||b):null,w=l()({},p,{flex:"0 0 "+m,maxWidth:m,minWidth:m,width:m}),M=C()(o,n,n+"-"+r,(e={},i()(e,n+"-collapsed",!!this.state.collapsed),i()(e,n+"-has-trigger",a&&null!==u&&!y),i()(e,n+"-below",!!this.state.below),i()(e,n+"-zero-width",0===parseFloat(m)),e));return g.createElement("div",l()({className:M},h,{style:w}),g.createElement("div",{className:n+"-children"},this.props.children),a||this.state.below&&y?O:null)}}],[{key:"getDerivedStateFromProps",value:function(e){return"collapsed"in e?{collapsed:e.collapsed}:null}}]),t}(g.Component);K.__ANT_LAYOUT_SIDER=!0,K.defaultProps={prefixCls:"ant-layout-sider",collapsible:!1,defaultCollapsed:!1,reverseArrow:!1,width:200,collapsedWidth:80,style:{},theme:"dark"},K.childContextTypes={siderCollapsed:y.bool,collapsedWidth:y.oneOfType([y.number,y.string])},K.contextTypes={siderHook:y.object},Object(_.polyfill)(K);var j=K;P.Sider=j;t.a=P},245:function(e,t,n){"use strict";var o=n(0),i=n.n(o),r=n(1),a=n.n(r),s=n(2),l=n.n(s),u=n(4),p=n.n(u),c=n(14),f=n(13),d=n.n(f),h={},v=0,m=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=h[t]||(h[t]={});if(n[e])return n[e];var o=d.a.compile(e);return v<1e4&&(n[e]=o,v++),o}(e)(t,{pretty:!0})},g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};var y=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=Object(c.b)(e.to),n=Object(c.b)(this.props.to);Object(c.c)(t,n)?l()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?m(n,t.params):g({},n,{pathname:m(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(i.a.Component);y.propTypes={computedMatch:a.a.object,push:a.a.bool,from:a.a.string,to:a.a.oneOfType([a.a.string,a.a.object]).isRequired},y.defaultProps={push:!1},y.contextTypes={router:a.a.shape({history:a.a.shape({push:a.a.func.isRequired,replace:a.a.func.isRequired}).isRequired,staticContext:a.a.object}).isRequired};var b=y;t.a=b},57:function(e,t,n){"use strict";var o=n(39),i=n.n(o),r=n(49),a=n.n(r),s=n(40),l=n.n(s),u=n(41),p=n.n(u),c=n(42),f=n.n(c),d=n(0),h=n.n(d),v=n(1),m=n.n(v),g=n(65),y=n(66),b=n(227),C=n(44),O=n.n(C);function w(){}function M(e,t,n){var o=t||"";return e.key||o+"item_"+n}function S(e){return e+"-menu-"}function T(e,t){var n=-1;h.a.Children.forEach(e,function(e){n++,e&&e.type&&e.type.isMenuItemGroup?h.a.Children.forEach(e.props.children,function(e){t(e,++n)}):t(e,n)})}var E=["defaultSelectedKeys","selectedKeys","defaultOpenKeys","openKeys","mode","getPopupContainer","onSelect","onDeselect","onDestroy","openTransitionName","openAnimation","subMenuOpenDelay","subMenuCloseDelay","forceSubMenuRender","triggerSubMenuAction","level","selectable","multiple","onOpenChange","visible","focusable","defaultActiveFirst","prefixCls","inlineIndent","parentMenu","title","rootPrefixCls","eventKey","active","onItemHover","onTitleMouseEnter","onTitleMouseLeave","onTitleClick","popupAlign","popupOffset","isOpen","renderMenuItem","manualRef","subMenuKey","disabled","index","isSelected","store","activeKey","builtinPlacements","overflowedIndicator","attribute","value","popupClassName","inlineCollapsed","menu","theme","itemIcon","expandIcon"],x=function(e){return e.getBoundingClientRect().width},N=n(5),P=n.n(N),_=n(228),D=n(90),I={adjustX:1,adjustY:1},k={topLeft:{points:["bl","tl"],overflow:I,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:I,offset:[0,7]},leftTop:{points:["tr","tl"],overflow:I,offset:[-4,0]},rightTop:{points:["tl","tr"],overflow:I,offset:[4,0]}},A=n(67),R=0,V={horizontal:"bottomLeft",vertical:"rightTop","vertical-left":"rightTop","vertical-right":"leftTop"},K=function(e,t,n){var o,r=S(t),a=e.getState();e.setState({defaultActiveFirst:i()({},a.defaultActiveFirst,(o={},o[r]=n,o))})},j=function(e){function t(n){l()(this,t);var o=p()(this,e.call(this,n));F.call(o);var i=n.store,r=n.eventKey,a=i.getState().defaultActiveFirst;o.isRootMenu=!1;var s=!1;return a&&(s=a[r]),K(i,r,s),o}return f()(t,e),t.prototype.componentDidMount=function(){this.componentDidUpdate()},t.prototype.componentDidUpdate=function(){var e=this,t=this.props,n=t.mode,o=t.parentMenu,i=t.manualRef;i&&i(this),"horizontal"===n&&o.isRootMenu&&this.props.isOpen&&(this.minWidthTimeout=setTimeout(function(){return e.adjustWidth()},0))},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.onDestroy,n=e.eventKey;t&&t(n),this.minWidthTimeout&&clearTimeout(this.minWidthTimeout),this.mouseenterTimeout&&clearTimeout(this.mouseenterTimeout)},t.prototype.renderChildren=function(e){var t=this.props,n={mode:"horizontal"===t.mode?"vertical":t.mode,visible:this.props.isOpen,level:t.level+1,inlineIndent:t.inlineIndent,focusable:!1,onClick:this.onSubMenuClick,onSelect:this.onSelect,onDeselect:this.onDeselect,onDestroy:this.onDestroy,selectedKeys:t.selectedKeys,eventKey:t.eventKey+"-menu-",openKeys:t.openKeys,openTransitionName:t.openTransitionName,openAnimation:t.openAnimation,onOpenChange:this.onOpenChange,subMenuOpenDelay:t.subMenuOpenDelay,parentMenu:this,subMenuCloseDelay:t.subMenuCloseDelay,forceSubMenuRender:t.forceSubMenuRender,triggerSubMenuAction:t.triggerSubMenuAction,builtinPlacements:t.builtinPlacements,defaultActiveFirst:t.store.getState().defaultActiveFirst[S(t.eventKey)],multiple:t.multiple,prefixCls:t.rootPrefixCls,id:this._menuId,manualRef:this.saveMenuInstance,itemIcon:t.itemIcon,expandIcon:t.expandIcon},o=this.haveRendered;if(this.haveRendered=!0,this.haveOpened=this.haveOpened||n.visible||n.forceSubMenuRender,!this.haveOpened)return h.a.createElement("div",null);var r=o||!n.visible||"inline"===!n.mode;n.className=" "+n.prefixCls+"-sub";var a={};return n.openTransitionName?a.transitionName=n.openTransitionName:"object"==typeof n.openAnimation&&(a.animation=i()({},n.openAnimation),r||delete a.animation.appear),h.a.createElement(A.a,i()({},a,{showProp:"visible",component:"",transitionAppear:r}),h.a.createElement(G,i()({},n,{id:this._menuId}),e))},t.prototype.render=function(){var e,t=i()({},this.props),n=t.isOpen,o=t.level,r=this.getPrefixCls(),a="inline"===t.mode,s=O()(r,r+"-"+t.mode,((e={})[t.className]=!!t.className,e[this.getOpenClassName()]=n,e[this.getActiveClassName()]=t.active||n&&!a,e[this.getDisabledClassName()]=t.disabled,e[this.getSelectedClassName()]=this.isChildrenSelected(),e));this._menuId||(t.eventKey?this._menuId=t.eventKey+"$Menu":this._menuId="$__$"+ ++R+"$Menu");var l={},u={},p={};t.disabled||(l={onMouseLeave:this.onMouseLeave,onMouseEnter:this.onMouseEnter},u={onClick:this.onTitleClick},p={onMouseEnter:this.onTitleMouseEnter,onMouseLeave:this.onTitleMouseLeave});var c={};a&&(c.paddingLeft=t.inlineIndent*t.level);var f={};this.props.isOpen&&(f={"aria-owns":this._menuId});var d=null;"horizontal"!==t.mode&&(d=this.props.expandIcon,"function"==typeof this.props.expandIcon&&(d=h.a.createElement(this.props.expandIcon,i()({},this.props))));var v=h.a.createElement("div",i()({ref:this.saveSubMenuTitle,style:c,className:r+"-title"},p,u,{"aria-expanded":n},f,{"aria-haspopup":"true",title:"string"==typeof t.title?t.title:void 0}),t.title,d||h.a.createElement("i",{className:r+"-arrow"})),m=this.renderChildren(t.children),g=t.parentMenu.isRootMenu?t.parentMenu.props.getPopupContainer:function(e){return e.parentNode},y=V[t.mode],b=t.popupOffset?{offset:t.popupOffset}:{},C="inline"===t.mode?"":t.popupClassName,w=t.disabled,M=t.triggerSubMenuAction,S=t.subMenuOpenDelay,T=t.forceSubMenuRender,x=t.subMenuCloseDelay,N=t.builtinPlacements;return E.forEach(function(e){return delete t[e]}),delete t.onClick,h.a.createElement("li",i()({},t,l,{className:s,role:"menuitem"}),a&&v,a&&m,!a&&h.a.createElement(D.a,{prefixCls:r,popupClassName:r+"-popup "+C,getPopupContainer:g,builtinPlacements:i()({},k,N),popupPlacement:y,popupVisible:n,popupAlign:b,popup:m,action:w?[]:[M],mouseEnterDelay:S,mouseLeaveDelay:x,onPopupVisibleChange:this.onPopupVisibleChange,forceRender:T,zIndex:o},v))},t}(h.a.Component);j.propTypes={parentMenu:m.a.object,title:m.a.node,children:m.a.any,selectedKeys:m.a.array,openKeys:m.a.array,onClick:m.a.func,onOpenChange:m.a.func,rootPrefixCls:m.a.string,eventKey:m.a.string,multiple:m.a.bool,active:m.a.bool,onItemHover:m.a.func,onSelect:m.a.func,triggerSubMenuAction:m.a.string,onDeselect:m.a.func,onDestroy:m.a.func,onMouseEnter:m.a.func,onMouseLeave:m.a.func,onTitleMouseEnter:m.a.func,onTitleMouseLeave:m.a.func,onTitleClick:m.a.func,popupOffset:m.a.array,isOpen:m.a.bool,store:m.a.object,mode:m.a.oneOf(["horizontal","vertical","vertical-left","vertical-right","inline"]),manualRef:m.a.func,itemIcon:m.a.oneOfType([m.a.func,m.a.node]),expandIcon:m.a.oneOfType([m.a.func,m.a.node])},j.defaultProps={onMouseEnter:w,onMouseLeave:w,onTitleMouseEnter:w,onTitleMouseLeave:w,onTitleClick:w,manualRef:w,mode:"vertical",title:""};var F=function(){var e=this;this.onDestroy=function(t){e.props.onDestroy(t)},this.onKeyDown=function(t){var n=t.keyCode,o=e.menuInstance,i=e.props,r=i.isOpen,a=i.store;if(n===y.a.ENTER)return e.onTitleClick(t),K(a,e.props.eventKey,!0),!0;if(n===y.a.RIGHT)return r?o.onKeyDown(t):(e.triggerOpenChange(!0),K(a,e.props.eventKey,!0)),!0;if(n===y.a.LEFT){var s=void 0;if(!r)return;return(s=o.onKeyDown(t))||(e.triggerOpenChange(!1),s=!0),s}return!r||n!==y.a.UP&&n!==y.a.DOWN?void 0:o.onKeyDown(t)},this.onOpenChange=function(t){e.props.onOpenChange(t)},this.onPopupVisibleChange=function(t){e.triggerOpenChange(t,t?"mouseenter":"mouseleave")},this.onMouseEnter=function(t){var n=e.props,o=n.eventKey,i=n.onMouseEnter,r=n.store;K(r,e.props.eventKey,!1),i({key:o,domEvent:t})},this.onMouseLeave=function(t){var n=e.props,o=n.parentMenu,i=n.eventKey,r=n.onMouseLeave;o.subMenuInstance=e,r({key:i,domEvent:t})},this.onTitleMouseEnter=function(t){var n=e.props,o=n.eventKey,i=n.onItemHover,r=n.onTitleMouseEnter;i({key:o,hover:!0}),r({key:o,domEvent:t})},this.onTitleMouseLeave=function(t){var n=e.props,o=n.parentMenu,i=n.eventKey,r=n.onItemHover,a=n.onTitleMouseLeave;o.subMenuInstance=e,r({key:i,hover:!1}),a({key:i,domEvent:t})},this.onTitleClick=function(t){var n=e.props;n.onTitleClick({key:n.eventKey,domEvent:t}),"hover"!==n.triggerSubMenuAction&&(e.triggerOpenChange(!n.isOpen,"click"),K(n.store,e.props.eventKey,!1))},this.onSubMenuClick=function(t){e.props.onClick(e.addKeyPath(t))},this.onSelect=function(t){e.props.onSelect(t)},this.onDeselect=function(t){e.props.onDeselect(t)},this.getPrefixCls=function(){return e.props.rootPrefixCls+"-submenu"},this.getActiveClassName=function(){return e.getPrefixCls()+"-active"},this.getDisabledClassName=function(){return e.getPrefixCls()+"-disabled"},this.getSelectedClassName=function(){return e.getPrefixCls()+"-selected"},this.getOpenClassName=function(){return e.props.rootPrefixCls+"-submenu-open"},this.saveMenuInstance=function(t){e.menuInstance=t},this.addKeyPath=function(t){return i()({},t,{keyPath:(t.keyPath||[]).concat(e.props.eventKey)})},this.triggerOpenChange=function(t,n){var o=e.props.eventKey,i=function(){e.onOpenChange({key:o,item:e,trigger:n,open:t})};"mouseenter"===n?e.mouseenterTimeout=setTimeout(function(){i()},0):i()},this.isChildrenSelected=function(){var t={find:!1};return function e(t,n,o){t&&!o.find&&h.a.Children.forEach(t,function(t){if(t){var i=t.type;if(!i||!(i.isSubMenu||i.isMenuItem||i.isMenuItemGroup))return;-1!==n.indexOf(t.key)?o.find=!0:t.props.children&&e(t.props.children,n,o)}})}(e.props.children,e.props.selectedKeys,t),t.find},this.isOpen=function(){return-1!==e.props.openKeys.indexOf(e.props.eventKey)},this.adjustWidth=function(){if(e.subMenuTitle&&e.menuInstance){var t=P.a.findDOMNode(e.menuInstance);t.offsetWidth>=e.subMenuTitle.offsetWidth||(t.style.minWidth=e.subMenuTitle.offsetWidth+"px")}},this.saveSubMenuTitle=function(t){e.subMenuTitle=t}},L=Object(g.connect)(function(e,t){var n=e.openKeys,o=e.activeKey,i=e.selectedKeys,r=t.eventKey,a=t.subMenuKey;return{isOpen:n.indexOf(r)>-1,active:o[a]===r,selectedKeys:i}})(j);L.isSubMenu=!0;var W=L;!("undefined"==typeof window||!window.document||!window.document.createElement)&&n(235);var H=function(e){function t(){var n,o,r;l()(this,t);for(var s=arguments.length,u=Array(s),c=0;c<s;c++)u[c]=arguments[c];return n=o=p()(this,e.call.apply(e,[this].concat(u))),o.state={lastVisibleIndex:void 0},o.getOverflowedSubMenuItem=function(e,t,n){var r=o.props,s=r.overflowedIndicator,l=r.level,u=r.mode,p=r.prefixCls,c=r.theme,f=r.style;if(1!==l||"horizontal"!==u)return null;var d=o.props.children[0].props,v=(d.children,d.title,d.eventKey,a()(d,["children","title","eventKey"])),m=i()({},f),g=e+"-overflowed-indicator";0===t.length&&!0!==n?m=i()({},m,{display:"none"}):n&&(m=i()({},m,{visibility:"hidden",position:"absolute"}),g+="-placeholder");var y=c?p+"-"+c:"";return h.a.createElement(W,i()({title:s,className:p+"-overflowed-submenu",popupClassName:y},v,{key:g,eventKey:e+"-overflowed-indicator",disabled:!1,style:m}),t)},o.setChildrenWidthAndResize=function(){if("horizontal"===o.props.mode){var e=P.a.findDOMNode(o);if(e){var t=e.children;if(t&&0!==t.length){o.childrenSizes=[];var n=o.props.children,i=e.children[t.length-1];i.style.width="auto",o.childrenSizes=n.map(function(t,n){return x(e.children[2*n+1])}),o.overflowedIndicatorWidth=x(e.children[e.children.length-1]),o.originalTotalWidth=o.childrenSizes.reduce(function(e,t){return e+t},0),o.handleResize(),i.style.width=0}}}},o.resizeObserver=null,o.mutationObserver=null,o.originalTotalWidth=0,o.overflowedItems=[],o.childrenSizes=[],o.handleResize=function(){if("horizontal"===o.props.mode){var e=P.a.findDOMNode(o);if(e){var t=x(e);o.overflowedItems=[];var n=0,i=void 0;o.originalTotalWidth>t&&(i=-1,o.childrenSizes.forEach(function(e){(n+=e)+o.overflowedIndicatorWidth<=t&&i++})),o.setState({lastVisibleIndex:i})}}},r=n,p()(o,r)}return f()(t,e),t.prototype.componentDidMount=function(){var e=this;if(this.setChildrenWidthAndResize(),1===this.props.level&&"horizontal"===this.props.mode){var t=P.a.findDOMNode(this);if(!t)return;this.resizeObserver=new _.a(function(t){t.forEach(e.setChildrenWidthAndResize)}),[].slice.call(t.children).concat(t).forEach(function(t){e.resizeObserver.observe(t)}),"undefined"!=typeof MutationObserver&&(this.mutationObserver=new MutationObserver(function(){e.resizeObserver.disconnect(),[].slice.call(t.children).concat(t).forEach(function(t){e.resizeObserver.observe(t)}),e.setChildrenWidthAndResize()}),this.mutationObserver.observe(t,{attributes:!1,childList:!0,subTree:!1}))}},t.prototype.componentWillUnmount=function(){this.resizeObserver&&this.resizeObserver.disconnect(),this.mutationObserver&&this.resizeObserver.disconnect()},t.prototype.renderChildren=function(e){var t=this,n=this.state.lastVisibleIndex;return(e||[]).reduce(function(o,i,r){var a=i;if("horizontal"===t.props.mode){var s=t.getOverflowedSubMenuItem(i.props.eventKey,[]);void 0!==n&&-1!==t.props.className.indexOf(t.props.prefixCls+"-root")&&(r>n&&(a=h.a.cloneElement(i,{style:{visibility:"hidden"},eventKey:i.props.eventKey+"-hidden"})),r===n+1&&(t.overflowedItems=e.slice(n+1).map(function(e){return h.a.cloneElement(e,{key:e.props.eventKey,mode:"vertical-left"})}),s=t.getOverflowedSubMenuItem(i.props.eventKey,t.overflowedItems)));var l=[].concat(o,[s,a]);return r===e.length-1&&l.push(t.getOverflowedSubMenuItem(i.props.eventKey,[],!0)),l}return[].concat(o,[a])},[])},t.prototype.render=function(){var e=this.props,t=e.hiddenClassName,n=e.visible,o=(e.prefixCls,e.overflowedIndicator,e.mode,e.level,e.tag),i=(e.children,e.theme,a()(e,["hiddenClassName","visible","prefixCls","overflowedIndicator","mode","level","tag","children","theme"]));return n||(i.className+=" "+t),h.a.createElement(o,i,this.renderChildren(this.props.children))},t}(h.a.Component);H.propTypes={className:m.a.string,children:m.a.node,mode:m.a.oneOf(["horizontal","vertical","vertical-left","vertical-right","inline"]),prefixCls:m.a.string,level:m.a.number,theme:m.a.string,overflowedIndicator:m.a.node,visible:m.a.bool,hiddenClassName:m.a.string,tag:m.a.string,style:m.a.object},H.defaultProps={tag:"div",className:""};var U=H;function B(e,t,n){var o,r=e.getState();e.setState({activeKey:i()({},r.activeKey,(o={},o[t]=n,o))})}function z(e){return e.eventKey||"0-menu-"}function Y(e,t){var n=t,o=e.children,i=e.eventKey;if(n){var r=void 0;if(T(o,function(e,t){e&&!e.props.disabled&&n===M(e,i,t)&&(r=!0)}),r)return n}return n=null,e.defaultActiveFirst?(T(o,function(e,t){n||!e||e.props.disabled||(n=M(e,i,t))}),n):n}var X=function(e){function t(n){var o;l()(this,t);var r=p()(this,e.call(this,n));return q.call(r),n.store.setState({activeKey:i()({},n.store.getState().activeKey,(o={},o[n.eventKey]=Y(n,n.activeKey),o))}),r.instanceArray=[],r}return f()(t,e),t.prototype.componentDidMount=function(){this.props.manualRef&&this.props.manualRef(this)},t.prototype.shouldComponentUpdate=function(e){return this.props.visible||e.visible},t.prototype.componentDidUpdate=function(){var e=this.props,t="activeKey"in e?e.activeKey:e.store.getState().activeKey[z(e)],n=Y(e,t);n!==t&&B(e.store,z(e),n)},t.prototype.render=function(){var e=this,t=a()(this.props,[]);this.instanceArray=[];var n={className:O()(t.prefixCls,t.className,t.prefixCls+"-"+t.mode),role:t.role||"menu"};t.id&&(n.id=t.id),t.focusable&&(n.tabIndex="0",n.onKeyDown=this.onKeyDown);var o=t.prefixCls,r=t.eventKey,s=t.visible,l=t.level,u=t.mode,p=t.overflowedIndicator,c=t.theme;return E.forEach(function(e){return delete t[e]}),delete t.onClick,h.a.createElement(U,i()({},t,{prefixCls:o,mode:u,tag:"ul",level:l,theme:c,hiddenClassName:o+"-hidden",visible:s,overflowedIndicator:p},n),h.a.Children.map(t.children,function(t,n){return e.renderMenuItem(t,n,r||"0-menu-")}))},t}(h.a.Component);X.propTypes={onSelect:m.a.func,onClick:m.a.func,onDeselect:m.a.func,onOpenChange:m.a.func,onDestroy:m.a.func,openTransitionName:m.a.string,openAnimation:m.a.oneOfType([m.a.string,m.a.object]),openKeys:m.a.arrayOf(m.a.string),visible:m.a.bool,children:m.a.any,parentMenu:m.a.object,eventKey:m.a.string,store:m.a.shape({getState:m.a.func,setState:m.a.func}),focusable:m.a.bool,multiple:m.a.bool,style:m.a.object,defaultActiveFirst:m.a.bool,activeKey:m.a.string,selectedKeys:m.a.arrayOf(m.a.string),defaultSelectedKeys:m.a.arrayOf(m.a.string),defaultOpenKeys:m.a.arrayOf(m.a.string),level:m.a.number,mode:m.a.oneOf(["horizontal","vertical","vertical-left","vertical-right","inline"]),triggerSubMenuAction:m.a.oneOf(["click","hover"]),inlineIndent:m.a.oneOfType([m.a.number,m.a.string]),manualRef:m.a.func,itemIcon:m.a.oneOfType([m.a.func,m.a.node]),expandIcon:m.a.oneOfType([m.a.func,m.a.node])},X.defaultProps={prefixCls:"rc-menu",className:"",mode:"vertical",level:1,inlineIndent:24,visible:!0,focusable:!0,style:{},manualRef:w};var q=function(){var e=this;this.onKeyDown=function(t,n){var o=t.keyCode,i=void 0;if(e.getFlatInstanceArray().forEach(function(e){e&&e.props.active&&e.onKeyDown&&(i=e.onKeyDown(t))}),i)return 1;var r=null;return o!==y.a.UP&&o!==y.a.DOWN||(r=e.step(o===y.a.UP?-1:1)),r?(t.preventDefault(),B(e.props.store,z(e.props),r.props.eventKey),"function"==typeof n&&n(r),1):void 0},this.onItemHover=function(t){var n=t.key,o=t.hover;B(e.props.store,z(e.props),o?n:null)},this.onDeselect=function(t){e.props.onDeselect(t)},this.onSelect=function(t){e.props.onSelect(t)},this.onClick=function(t){e.props.onClick(t)},this.onOpenChange=function(t){e.props.onOpenChange(t)},this.onDestroy=function(t){e.props.onDestroy(t)},this.getFlatInstanceArray=function(){return e.instanceArray},this.getOpenTransitionName=function(){return e.props.openTransitionName},this.step=function(t){var n=e.getFlatInstanceArray(),o=e.props.store.getState().activeKey[z(e.props)],i=n.length;if(!i)return null;t<0&&(n=n.concat().reverse());var r=-1;if(n.every(function(e,t){return!e||e.props.eventKey!==o||(r=t,!1)}),e.props.defaultActiveFirst||-1===r||!function(e){return!e.length||e.every(function(e){return!!e.props.disabled})}(n.slice(r,i-1))){var a=(r+1)%i,s=a;do{var l=n[s];if(l&&!l.props.disabled)return l;s=(s+1)%i}while(s!==a);return null}},this.renderCommonMenuItem=function(t,n,o){var r=e.props.store.getState(),a=e.props,s=M(t,a.eventKey,n),l=t.props,u=s===r.activeKey,p=i()({mode:l.mode||a.mode,level:a.level,inlineIndent:a.inlineIndent,renderMenuItem:e.renderMenuItem,rootPrefixCls:a.prefixCls,index:n,parentMenu:a.parentMenu,manualRef:l.disabled?void 0:Object(b.a)(t.ref,function(e){if(e){var t=this.instanceArray.indexOf(e);-1!==t?this.instanceArray[t]=e:this.instanceArray.push(e)}}.bind(e)),eventKey:s,active:!l.disabled&&u,multiple:a.multiple,onClick:function(t){(l.onClick||w)(t),e.onClick(t)},onItemHover:e.onItemHover,openTransitionName:e.getOpenTransitionName(),openAnimation:a.openAnimation,subMenuOpenDelay:a.subMenuOpenDelay,subMenuCloseDelay:a.subMenuCloseDelay,forceSubMenuRender:a.forceSubMenuRender,onOpenChange:e.onOpenChange,onDeselect:e.onDeselect,onSelect:e.onSelect,builtinPlacements:a.builtinPlacements,itemIcon:l.itemIcon||e.props.itemIcon,expandIcon:l.expandIcon||e.props.expandIcon},o);return"inline"===a.mode&&(p.triggerSubMenuAction="click"),h.a.cloneElement(t,p)},this.renderMenuItem=function(t,n,o){if(!t)return null;var i=e.props.store.getState(),r={openKeys:i.openKeys,selectedKeys:i.selectedKeys,triggerSubMenuAction:e.props.triggerSubMenuAction,subMenuKey:o};return e.renderCommonMenuItem(t,n,r)}},G=Object(g.connect)()(X),Z=function(e){function t(n){l()(this,t);var o=p()(this,e.call(this,n));Q.call(o),o.isRootMenu=!0;var i=n.defaultSelectedKeys,r=n.defaultOpenKeys;return"selectedKeys"in n&&(i=n.selectedKeys||[]),"openKeys"in n&&(r=n.openKeys||[]),o.store=Object(g.create)({selectedKeys:i,openKeys:r,activeKey:{"0-menu-":Y(n,n.activeKey)}}),o}return f()(t,e),t.prototype.componentDidMount=function(){this.updateMiniStore()},t.prototype.componentDidUpdate=function(){this.updateMiniStore()},t.prototype.updateMiniStore=function(){"selectedKeys"in this.props&&this.store.setState({selectedKeys:this.props.selectedKeys||[]}),"openKeys"in this.props&&this.store.setState({openKeys:this.props.openKeys||[]})},t.prototype.render=function(){var e=this,t=a()(this.props,[]);return t.className+=" "+t.prefixCls+"-root",t=i()({},t,{onClick:this.onClick,onOpenChange:this.onOpenChange,onDeselect:this.onDeselect,onSelect:this.onSelect,openTransitionName:this.getOpenTransitionName(),parentMenu:this}),h.a.createElement(g.Provider,{store:this.store},h.a.createElement(G,i()({},t,{ref:function(t){return e.innerMenu=t}}),this.props.children))},t}(h.a.Component);Z.propTypes={defaultSelectedKeys:m.a.arrayOf(m.a.string),defaultActiveFirst:m.a.bool,selectedKeys:m.a.arrayOf(m.a.string),defaultOpenKeys:m.a.arrayOf(m.a.string),openKeys:m.a.arrayOf(m.a.string),mode:m.a.oneOf(["horizontal","vertical","vertical-left","vertical-right","inline"]),getPopupContainer:m.a.func,onClick:m.a.func,onSelect:m.a.func,onDeselect:m.a.func,onDestroy:m.a.func,openTransitionName:m.a.string,openAnimation:m.a.oneOfType([m.a.string,m.a.object]),subMenuOpenDelay:m.a.number,subMenuCloseDelay:m.a.number,forceSubMenuRender:m.a.bool,triggerSubMenuAction:m.a.string,level:m.a.number,selectable:m.a.bool,multiple:m.a.bool,children:m.a.any,className:m.a.string,style:m.a.object,activeKey:m.a.string,prefixCls:m.a.string,builtinPlacements:m.a.object,itemIcon:m.a.oneOfType([m.a.func,m.a.node]),expandIcon:m.a.oneOfType([m.a.func,m.a.node]),overflowedIndicator:m.a.node},Z.defaultProps={selectable:!0,onClick:w,onSelect:w,onOpenChange:w,onDeselect:w,defaultSelectedKeys:[],defaultOpenKeys:[],subMenuOpenDelay:.1,subMenuCloseDelay:.1,triggerSubMenuAction:"hover",prefixCls:"rc-menu",className:"",mode:"vertical",style:{},builtinPlacements:{},overflowedIndicator:h.a.createElement("span",null,"···")};var Q=function(){var e=this;this.onSelect=function(t){var n=e.props;if(n.selectable){var o=e.store.getState().selectedKeys,r=t.key;o=n.multiple?o.concat([r]):[r],"selectedKeys"in n||e.store.setState({selectedKeys:o}),n.onSelect(i()({},t,{selectedKeys:o}))}},this.onClick=function(t){e.props.onClick(t)},this.onKeyDown=function(t,n){e.innerMenu.getWrappedInstance().onKeyDown(t,n)},this.onOpenChange=function(t){var n=e.props,o=e.store.getState().openKeys.concat(),i=!1,r=function(e){var t=!1;if(e.open)(t=-1===o.indexOf(e.key))&&o.push(e.key);else{var n=o.indexOf(e.key);(t=-1!==n)&&o.splice(n,1)}i=i||t};Array.isArray(t)?t.forEach(r):r(t),i&&("openKeys"in e.props||e.store.setState({openKeys:o}),n.onOpenChange(o))},this.onDeselect=function(t){var n=e.props;if(n.selectable){var o=e.store.getState().selectedKeys.concat(),r=t.key,a=o.indexOf(r);-1!==a&&o.splice(a,1),"selectedKeys"in n||e.store.setState({selectedKeys:o}),n.onDeselect(i()({},t,{selectedKeys:o}))}},this.getOpenTransitionName=function(){var t=e.props,n=t.openTransitionName,o=t.openAnimation;return n||"string"!=typeof o||(n=t.prefixCls+"-open-"+o),n}},$=Z,J=n(79),ee=n.n(J),te=function(e){function t(n){l()(this,t);var o=p()(this,e.call(this,n));return o.onKeyDown=function(e){if(e.keyCode===y.a.ENTER)return o.onClick(e),!0},o.onMouseLeave=function(e){var t=o.props,n=t.eventKey,i=t.onItemHover,r=t.onMouseLeave;i({key:n,hover:!1}),r({key:n,domEvent:e})},o.onMouseEnter=function(e){var t=o.props,n=t.eventKey,i=t.onItemHover,r=t.onMouseEnter;i({key:n,hover:!0}),r({key:n,domEvent:e})},o.onClick=function(e){var t=o.props,n=t.eventKey,i=t.multiple,r=t.onClick,a=t.onSelect,s=t.onDeselect,l=t.isSelected,u={key:n,keyPath:[n],item:o,domEvent:e};r(u),i?l?s(u):a(u):l||a(u)},o}return f()(t,e),t.prototype.componentDidMount=function(){this.callRef()},t.prototype.componentDidUpdate=function(){this.props.active&&ee()(P.a.findDOMNode(this),P.a.findDOMNode(this.props.parentMenu),{onlyScrollIfNeeded:!0}),this.callRef()},t.prototype.componentWillUnmount=function(){var e=this.props;e.onDestroy&&e.onDestroy(e.eventKey)},t.prototype.getPrefixCls=function(){return this.props.rootPrefixCls+"-item"},t.prototype.getActiveClassName=function(){return this.getPrefixCls()+"-active"},t.prototype.getSelectedClassName=function(){return this.getPrefixCls()+"-selected"},t.prototype.getDisabledClassName=function(){return this.getPrefixCls()+"-disabled"},t.prototype.callRef=function(){this.props.manualRef&&this.props.manualRef(this)},t.prototype.render=function(){var e,t=i()({},this.props),n=O()(this.getPrefixCls(),t.className,((e={})[this.getActiveClassName()]=!t.disabled&&t.active,e[this.getSelectedClassName()]=t.isSelected,e[this.getDisabledClassName()]=t.disabled,e)),o=i()({},t.attribute,{title:t.title,className:n,role:t.role||"menuitem","aria-disabled":t.disabled});"option"===t.role?o=i()({},o,{role:"option","aria-selected":t.isSelected}):null!==t.role&&"none"!==t.role||(o.role="none");var r={onClick:t.disabled?null:this.onClick,onMouseLeave:t.disabled?null:this.onMouseLeave,onMouseEnter:t.disabled?null:this.onMouseEnter},a=i()({},t.style);"inline"===t.mode&&(a.paddingLeft=t.inlineIndent*t.level),E.forEach(function(e){return delete t[e]});var s=this.props.itemIcon;return"function"==typeof this.props.itemIcon&&(s=h.a.createElement(this.props.itemIcon,this.props)),h.a.createElement("li",i()({},t,o,r,{style:a}),t.children,s)},t}(h.a.Component);te.propTypes={attribute:m.a.object,rootPrefixCls:m.a.string,eventKey:m.a.string,active:m.a.bool,children:m.a.any,selectedKeys:m.a.array,disabled:m.a.bool,title:m.a.string,onItemHover:m.a.func,onSelect:m.a.func,onClick:m.a.func,onDeselect:m.a.func,parentMenu:m.a.object,onDestroy:m.a.func,onMouseEnter:m.a.func,onMouseLeave:m.a.func,multiple:m.a.bool,isSelected:m.a.bool,manualRef:m.a.func,itemIcon:m.a.oneOfType([m.a.func,m.a.node])},te.defaultProps={onSelect:w,onMouseEnter:w,onMouseLeave:w,manualRef:w},te.isMenuItem=!0;var ne=Object(g.connect)(function(e,t){var n=e.activeKey,o=e.selectedKeys,i=t.eventKey;return{active:n[t.subMenuKey]===i,isSelected:-1!==o.indexOf(i)}})(te),oe=function(e){function t(){var n,o,i;l()(this,t);for(var r=arguments.length,a=Array(r),s=0;s<r;s++)a[s]=arguments[s];return n=o=p()(this,e.call.apply(e,[this].concat(a))),o.renderInnerMenuItem=function(e){var t=o.props;return(0,t.renderMenuItem)(e,t.index,o.props.subMenuKey)},i=n,p()(o,i)}return f()(t,e),t.prototype.render=function(){var e=a()(this.props,[]),t=e.className,n=void 0===t?"":t,o=e.rootPrefixCls,r=o+"-item-group-title",s=o+"-item-group-list",l=e.title,u=e.children;return E.forEach(function(t){return delete e[t]}),delete e.onClick,h.a.createElement("li",i()({},e,{className:n+" "+o+"-item-group"}),h.a.createElement("div",{className:r,title:"string"==typeof l?l:void 0},l),h.a.createElement("ul",{className:s},h.a.Children.map(u,this.renderInnerMenuItem)))},t}(h.a.Component);oe.propTypes={renderMenuItem:m.a.func,index:m.a.number,className:m.a.string,subMenuKey:m.a.string,rootPrefixCls:m.a.string},oe.defaultProps={disabled:!0},oe.isMenuItemGroup=!0;var ie=oe,re=function(e){function t(){return l()(this,t),p()(this,e.apply(this,arguments))}return f()(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=e.rootPrefixCls,o=e.style;return h.a.createElement("li",{className:t+" "+n+"-item-divider",style:o})},t}(h.a.Component);re.propTypes={className:m.a.string,rootPrefixCls:m.a.string,style:m.a.object},re.defaultProps={disabled:!0,className:"",style:{}};var ae=re;n.d(t,"d",function(){return W}),n.d(t,"b",function(){return ne}),n.d(t,"c",function(){return ie}),n.d(t,"a",function(){return ae});t.e=$},65:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.create=t.connect=t.Provider=void 0;var o=a(n(223)),i=a(n(224)),r=a(n(226));function a(e){return e&&e.__esModule?e:{default:e}}t.Provider=o.default,t.connect=i.default,t.create=r.default},66:function(e,t,n){"use strict";var o={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=o.F1&&t<=o.F12)return!1;switch(t){case o.ALT:case o.CAPS_LOCK:case o.CONTEXT_MENU:case o.CTRL:case o.DOWN:case o.END:case o.ESC:case o.HOME:case o.INSERT:case o.LEFT:case o.MAC_FF_META:case o.META:case o.NUMLOCK:case o.NUM_CENTER:case o.PAGE_DOWN:case o.PAGE_UP:case o.PAUSE:case o.PRINT_SCREEN:case o.RIGHT:case o.SHIFT:case o.UP:case o.WIN_KEY:case o.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=o.ZERO&&e<=o.NINE)return!0;if(e>=o.NUM_ZERO&&e<=o.NUM_MULTIPLY)return!0;if(e>=o.A&&e<=o.Z)return!0;if(-1!==window.navigation.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case o.SPACE:case o.QUESTION_MARK:case o.NUM_PLUS:case o.NUM_MINUS:case o.NUM_PERIOD:case o.NUM_DIVISION:case o.SEMICOLON:case o.DASH:case o.EQUALS:case o.COMMA:case o.PERIOD:case o.SLASH:case o.APOSTROPHE:case o.SINGLE_QUOTE:case o.OPEN_SQUARE_BRACKET:case o.BACKSLASH:case o.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};t.a=o},90:function(e,t,n){"use strict";var o=n(39),i=n.n(o),r=n(40),a=n.n(r),s=n(41),l=n.n(s),u=n(42),p=n.n(u),c=n(0),f=n.n(c),d=n(1),h=n.n(d),v=n(5),m=n.n(v),g=n(229),y=n(112),b=n(233),C=n(234),O=n(44),w=n.n(O);function M(e,t,n){return n?e[0]===t[0]:e[0]===t[0]&&e[1]===t[1]}function S(e,t){this[e]=t}var T=void 0,E={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-",O:"-o-"};function x(){if(void 0!==T)return T;T="";var e=document.createElement("p").style;for(var t in E)t+"Transform"in e&&(T=t);return T}function N(){return x()?x()+"TransitionProperty":"transitionProperty"}function P(){return x()?x()+"Transform":"transform"}function _(e,t){var n=N();n&&(e.style[n]=t,"transitionProperty"!==n&&(e.style.transitionProperty=t))}function D(e,t){var n=P();n&&(e.style[n]=t,"transform"!==n&&(e.style.transform=t))}var I=/matrix\((.*)\)/,k=/matrix3d\((.*)\)/;var A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R=void 0;function V(e){var t=e.style.display;e.style.display="none",e.offsetHeight,e.style.display=t}function K(e,t,n){var o=n;if("object"!==(void 0===t?"undefined":A(t)))return void 0!==o?("number"==typeof o&&(o+="px"),void(e.style[t]=o)):R(e,t);for(var i in t)t.hasOwnProperty(i)&&K(e,i,t[i])}function j(e,t){var n=e["page"+(t?"Y":"X")+"Offset"],o="scroll"+(t?"Top":"Left");if("number"!=typeof n){var i=e.document;"number"!=typeof(n=i.documentElement[o])&&(n=i.body[o])}return n}function F(e){return j(e)}function L(e){return j(e,!0)}function W(e){var t=function(e){var t,n=void 0,o=void 0,i=e.ownerDocument,r=i.body,a=i&&i.documentElement;return n=(t=e.getBoundingClientRect()).left,o=t.top,{left:n-=a.clientLeft||r.clientLeft||0,top:o-=a.clientTop||r.clientTop||0}}(e),n=e.ownerDocument,o=n.defaultView||n.parentWindow;return t.left+=F(o),t.top+=L(o),t}function H(e){return null!==e&&void 0!==e&&e==e.window}function U(e){return H(e)?e.document:9===e.nodeType?e:e.ownerDocument}var B=new RegExp("^("+/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source+")(?!px)[a-z%]+$","i"),z=/^(top|right|bottom|left)$/,Y="currentStyle",X="runtimeStyle",q="left",G="px";function Z(e,t){return"left"===e?t.useCssRight?"right":e:t.useCssBottom?"bottom":e}function Q(e){return"left"===e?"right":"right"===e?"left":"top"===e?"bottom":"bottom"===e?"top":void 0}function $(e,t,n){"static"===K(e,"position")&&(e.style.position="relative");var o=-999,i=-999,r=Z("left",n),a=Z("top",n),s=Q(r),l=Q(a);"left"!==r&&(o=999),"top"!==a&&(i=999);var u="",p=W(e);("left"in t||"top"in t)&&(u=function(e){return e.style.transitionProperty||e.style[N()]}(e)||"",_(e,"none")),"left"in t&&(e.style[s]="",e.style[r]=o+"px"),"top"in t&&(e.style[l]="",e.style[a]=i+"px"),V(e);var c=W(e),f={};for(var d in t)if(t.hasOwnProperty(d)){var h=Z(d,n),v="left"===d?o:i,m=p[d]-c[d];f[h]=h===d?v+m:v-m}K(e,f),V(e),("left"in t||"top"in t)&&_(e,u);var g={};for(var y in t)if(t.hasOwnProperty(y)){var b=Z(y,n),C=t[y]-p[y];g[b]=y===b?f[b]+C:f[b]-C}K(e,g)}function J(e,t){var n=W(e),o=function(e){var t=window.getComputedStyle(e,null),n=t.getPropertyValue("transform")||t.getPropertyValue(P());if(n&&"none"!==n){var o=n.replace(/[^0-9\-.,]/g,"").split(",");return{x:parseFloat(o[12]||o[4],0),y:parseFloat(o[13]||o[5],0)}}return{x:0,y:0}}(e),i={x:o.x,y:o.y};"left"in t&&(i.x=o.x+t.left-n.left),"top"in t&&(i.y=o.y+t.top-n.top),function(e,t){var n=window.getComputedStyle(e,null),o=n.getPropertyValue("transform")||n.getPropertyValue(P());if(o&&"none"!==o){var i=void 0,r=o.match(I);r?((i=(r=r[1]).split(",").map(function(e){return parseFloat(e,10)}))[4]=t.x,i[5]=t.y,D(e,"matrix("+i.join(",")+")")):((i=o.match(k)[1].split(",").map(function(e){return parseFloat(e,10)}))[12]=t.x,i[13]=t.y,D(e,"matrix3d("+i.join(",")+")"))}else D(e,"translateX("+t.x+"px) translateY("+t.y+"px) translateZ(0)")}(e,i)}function ee(e,t){for(var n=0;n<e.length;n++)t(e[n])}function te(e){return"border-box"===R(e,"boxSizing")}"undefined"!=typeof window&&(R=window.getComputedStyle?function(e,t,n){var o=n,i="",r=U(e);return(o=o||r.defaultView.getComputedStyle(e,null))&&(i=o.getPropertyValue(t)||o[t]),i}:function(e,t){var n=e[Y]&&e[Y][t];if(B.test(n)&&!z.test(t)){var o=e.style,i=o[q],r=e[X][q];e[X][q]=e[Y][q],o[q]="fontSize"===t?"1em":n||0,n=o.pixelLeft+G,o[q]=i,e[X][q]=r}return""===n?"auto":n});var ne=["margin","border","padding"],oe=-1,ie=2,re=1;function ae(e,t,n){var o=0,i=void 0,r=void 0,a=void 0;for(r=0;r<t.length;r++)if(i=t[r])for(a=0;a<n.length;a++){var s=void 0;s="border"===i?""+i+n[a]+"Width":i+n[a],o+=parseFloat(R(e,s))||0}return o}var se={};function le(e,t,n){var o=n;if(H(e))return"width"===t?se.viewportWidth(e):se.viewportHeight(e);if(9===e.nodeType)return"width"===t?se.docWidth(e):se.docHeight(e);var i="width"===t?["Left","Right"]:["Top","Bottom"],r="width"===t?e.getBoundingClientRect().width:e.getBoundingClientRect().height,a=(R(e),te(e)),s=0;(null===r||void 0===r||r<=0)&&(r=void 0,(null===(s=R(e,t))||void 0===s||Number(s)<0)&&(s=e.style[t]||0),s=parseFloat(s)||0),void 0===o&&(o=a?re:oe);var l=void 0!==r||a,u=r||s;return o===oe?l?u-ae(e,["border","padding"],i):s:l?o===re?u:u+(o===ie?-ae(e,["border"],i):ae(e,["margin"],i)):s+ae(e,ne.slice(o),i)}ee(["Width","Height"],function(e){se["doc"+e]=function(t){var n=t.document;return Math.max(n.documentElement["scroll"+e],n.body["scroll"+e],se["viewport"+e](n))},se["viewport"+e]=function(t){var n="client"+e,o=t.document,i=o.body,r=o.documentElement[n];return"CSS1Compat"===o.compatMode&&r||i&&i[n]||r}});var ue={position:"absolute",visibility:"hidden",display:"block"};function pe(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=void 0,i=t[0];return 0!==i.offsetWidth?o=le.apply(void 0,t):function(e,t,n){var o={},i=e.style,r=void 0;for(r in t)t.hasOwnProperty(r)&&(o[r]=i[r],i[r]=t[r]);for(r in n.call(e),t)t.hasOwnProperty(r)&&(i[r]=o[r])}(i,ue,function(){o=le.apply(void 0,t)}),o}function ce(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}ee(["width","height"],function(e){var t=e.charAt(0).toUpperCase()+e.slice(1);se["outer"+t]=function(t,n){return t&&pe(t,e,n?0:re)};var n="width"===e?["Left","Right"]:["Top","Bottom"];se[e]=function(t,o){var i=o;if(void 0===i)return t&&pe(t,e,oe);if(t){R(t);return te(t)&&(i+=ae(t,["padding","border"],n)),K(t,e,i)}}});var fe={getWindow:function(e){if(e&&e.document&&e.setTimeout)return e;var t=e.ownerDocument||e;return t.defaultView||t.parentWindow},getDocument:U,offset:function(e,t,n){if(void 0===t)return W(e);!function(e,t,n){if(n.ignoreShake){var o=W(e),i=o.left.toFixed(0),r=o.top.toFixed(0),a=t.left.toFixed(0),s=t.top.toFixed(0);if(i===a&&r===s)return}n.useCssRight||n.useCssBottom?$(e,t,n):n.useCssTransform&&P()in document.body.style?J(e,t):$(e,t,n)}(e,t,n||{})},isWindow:H,each:ee,css:K,clone:function(e){var t=void 0,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);if(e.overflow)for(t in e)e.hasOwnProperty(t)&&(n.overflow[t]=e.overflow[t]);return n},mix:ce,getWindowScrollLeft:function(e){return F(e)},getWindowScrollTop:function(e){return L(e)},merge:function(){for(var e={},t=arguments.length,n=Array(t),o=0;o<t;o++)n[o]=arguments[o];for(var i=0;i<n.length;i++)fe.mix(e,n[i]);return e},viewportWidth:0,viewportHeight:0};ce(fe,se);var de=fe;var he=function(e){if(de.isWindow(e)||9===e.nodeType)return null;var t=de.getDocument(e).body,n=void 0,o=de.css(e,"position");if("fixed"!==o&&"absolute"!==o)return"html"===e.nodeName.toLowerCase()?null:e.parentNode;for(n=e.parentNode;n&&n!==t;n=n.parentNode)if("static"!==(o=de.css(n,"position")))return n;return null};var ve=function(e){for(var t={left:0,right:1/0,top:0,bottom:1/0},n=he(e),o=de.getDocument(e),i=o.defaultView||o.parentWindow,r=o.body,a=o.documentElement;n;){if(-1!==navigator.userAgent.indexOf("MSIE")&&0===n.clientWidth||n===r||n===a||"visible"===de.css(n,"overflow")){if(n===r||n===a)break}else{var s=de.offset(n);s.left+=n.clientLeft,s.top+=n.clientTop,t.top=Math.max(t.top,s.top),t.right=Math.min(t.right,s.left+n.clientWidth),t.bottom=Math.min(t.bottom,s.top+n.clientHeight),t.left=Math.max(t.left,s.left)}n=he(n)}var l=null;de.isWindow(e)||9===e.nodeType||(l=e.style.position,"absolute"===de.css(e,"position")&&(e.style.position="fixed"));var u=de.getWindowScrollLeft(i),p=de.getWindowScrollTop(i),c=de.viewportWidth(i),f=de.viewportHeight(i),d=a.scrollWidth,h=a.scrollHeight;if(e.style&&(e.style.position=l),function(e){if(de.isWindow(e)||9===e.nodeType)return!1;var t=de.getDocument(e).body,n=null;for(n=e.parentNode;n&&n!==t;n=n.parentNode)if("fixed"===de.css(n,"position"))return!0;return!1}(e))t.left=Math.max(t.left,u),t.top=Math.max(t.top,p),t.right=Math.min(t.right,u+c),t.bottom=Math.min(t.bottom,p+f);else{var v=Math.max(d,u+c);t.right=Math.min(t.right,v);var m=Math.max(h,p+f);t.bottom=Math.min(t.bottom,m)}return t.top>=0&&t.left>=0&&t.bottom>t.top&&t.right>t.left?t:null};var me=function(e,t,n,o){var i=de.clone(e),r={width:t.width,height:t.height};return o.adjustX&&i.left<n.left&&(i.left=n.left),o.resizeWidth&&i.left>=n.left&&i.left+r.width>n.right&&(r.width-=i.left+r.width-n.right),o.adjustX&&i.left+r.width>n.right&&(i.left=Math.max(n.right-r.width,n.left)),o.adjustY&&i.top<n.top&&(i.top=n.top),o.resizeHeight&&i.top>=n.top&&i.top+r.height>n.bottom&&(r.height-=i.top+r.height-n.bottom),o.adjustY&&i.top+r.height>n.bottom&&(i.top=Math.max(n.bottom-r.height,n.top)),de.mix(i,r)};var ge=function(e){var t=void 0,n=void 0,o=void 0;if(de.isWindow(e)||9===e.nodeType){var i=de.getWindow(e);t={left:de.getWindowScrollLeft(i),top:de.getWindowScrollTop(i)},n=de.viewportWidth(i),o=de.viewportHeight(i)}else t=de.offset(e),n=de.outerWidth(e),o=de.outerHeight(e);return t.width=n,t.height=o,t};var ye=function(e,t){var n=t.charAt(0),o=t.charAt(1),i=e.width,r=e.height,a=e.left,s=e.top;return"c"===n?s+=r/2:"b"===n&&(s+=r),"c"===o?a+=i/2:"r"===o&&(a+=i),{left:a,top:s}};var be=function(e,t,n,o,i){var r=ye(t,n[1]),a=ye(e,n[0]),s=[a.left-r.left,a.top-r.top];return{left:e.left-s[0]+o[0]-i[0],top:e.top-s[1]+o[1]-i[1]}};function Ce(e,t,n){return e.left<n.left||e.left+t.width>n.right}function Oe(e,t,n){return e.top<n.top||e.top+t.height>n.bottom}function we(e,t,n){var o=[];return de.each(e,function(e){o.push(e.replace(t,function(e){return n[e]}))}),o}function Me(e,t){return e[t]=-e[t],e}function Se(e,t){return(/%$/.test(e)?parseInt(e.substring(0,e.length-1),10)/100*t:parseInt(e,10))||0}function Te(e,t){e[0]=Se(e[0],t.width),e[1]=Se(e[1],t.height)}var Ee=function(e,t,n,o){var i=n.points,r=n.offset||[0,0],a=n.targetOffset||[0,0],s=n.overflow,l=n.source||e;r=[].concat(r),a=[].concat(a),s=s||{};var u={},p=0,c=ve(l),f=ge(l);Te(r,f),Te(a,t);var d=be(f,t,i,r,a),h=de.merge(f,d);if(c&&(s.adjustX||s.adjustY)&&o){if(s.adjustX&&Ce(d,f,c)){var v=we(i,/[lr]/gi,{l:"r",r:"l"}),m=Me(r,0),g=Me(a,0);(function(e,t,n){return e.left>n.right||e.left+t.width<n.left})(be(f,t,v,m,g),f,c)||(p=1,i=v,r=m,a=g)}if(s.adjustY&&Oe(d,f,c)){var y=we(i,/[tb]/gi,{t:"b",b:"t"}),b=Me(r,1),C=Me(a,1);(function(e,t,n){return e.top>n.bottom||e.top+t.height<n.top})(be(f,t,y,b,C),f,c)||(p=1,i=y,r=b,a=C)}p&&(d=be(f,t,i,r,a),de.mix(h,d));var O=Ce(d,f,c),w=Oe(d,f,c);(O||w)&&(i=n.points,r=n.offset||[0,0],a=n.targetOffset||[0,0]),u.adjustX=s.adjustX&&O,u.adjustY=s.adjustY&&w,(u.adjustX||u.adjustY)&&(h=me(d,f,c,u))}return h.width!==f.width&&de.css(l,"width",de.width(l)+h.width-f.width),h.height!==f.height&&de.css(l,"height",de.height(l)+h.height-f.height),de.offset(l,{left:h.left,top:h.top},{useCssRight:n.useCssRight,useCssBottom:n.useCssBottom,useCssTransform:n.useCssTransform,ignoreShake:n.ignoreShake}),{points:i,offset:r,targetOffset:a,overflow:u}};function xe(e,t,n){var o=n.target||t,i=ge(o),r=!function(e){var t=ve(e),n=ge(e);return!t||n.left+n.width<=t.left||n.top+n.height<=t.top||n.left>=t.right||n.top>=t.bottom}(o);return Ee(e,i,n,r)}xe.__getOffsetParent=he,xe.__getVisibleRectForElement=ve;var Ne=xe,Pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};var _e=function(e,t,n){var o=void 0,i=void 0,r=de.getDocument(e),a=r.defaultView||r.parentWindow,s=de.getWindowScrollLeft(a),l=de.getWindowScrollTop(a),u=de.viewportWidth(a),p=de.viewportHeight(a),c={left:o="pageX"in t?t.pageX:s+t.clientX,top:i="pageY"in t?t.pageY:l+t.clientY,width:0,height:0},f=o>=0&&o<=s+u&&i>=0&&i<=l+p,d=[n.points[0],"cc"];return Ee(e,c,Pe({},n,{points:d}),f)};function De(e){return e&&"object"==typeof e&&e.window===e}function Ie(e){return"function"==typeof e&&e?e():null}function ke(e){return"object"==typeof e&&e?e:null}var Ae=function(e){function t(){var n,o,i;a()(this,t);for(var r=arguments.length,s=Array(r),u=0;u<r;u++)s[u]=arguments[u];return n=o=l()(this,e.call.apply(e,[this].concat(s))),o.forceAlign=function(){var e=o.props,t=e.disabled,n=e.target,i=e.align,r=e.onAlign;if(!t&&n){var a=m.a.findDOMNode(o),s=void 0,l=Ie(n),u=ke(n);l?s=Ne(a,l,i):u&&(s=_e(a,u,i)),r&&r(a,s)}},i=n,l()(o,i)}return p()(t,e),t.prototype.componentDidMount=function(){var e=this.props;this.forceAlign(),!e.disabled&&e.monitorWindowResize&&this.startMonitorWindowResize()},t.prototype.componentDidUpdate=function(e){var t=!1,n=this.props;if(!n.disabled){var o=m.a.findDOMNode(this),i=o?o.getBoundingClientRect():null;if(e.disabled)t=!0;else{var r=Ie(e.target),a=Ie(n.target),s=ke(e.target),l=ke(n.target);De(r)&&De(a)?t=!1:(r!==a||r&&!a&&l||s&&l&&a||l&&!function(e,t){return e===t||!(!e||!t)&&("pageX"in t&&"pageY"in t?e.pageX===t.pageX&&e.pageY===t.pageY:"clientX"in t&&"clientY"in t&&e.clientX===t.clientX&&e.clientY===t.clientY)}(s,l))&&(t=!0);var u=this.sourceRect||{};t||!o||u.width===i.width&&u.height===i.height||(t=!0)}this.sourceRect=i}t&&this.forceAlign(),n.monitorWindowResize&&!n.disabled?this.startMonitorWindowResize():this.stopMonitorWindowResize()},t.prototype.componentWillUnmount=function(){this.stopMonitorWindowResize()},t.prototype.startMonitorWindowResize=function(){this.resizeHandler||(this.bufferMonitor=function(e,t){var n=void 0;function o(){n&&(clearTimeout(n),n=null)}function i(){o(),n=setTimeout(e,t)}return i.clear=o,i}(this.forceAlign,this.props.monitorBufferTime),this.resizeHandler=Object(y.a)(window,"resize",this.bufferMonitor))},t.prototype.stopMonitorWindowResize=function(){this.resizeHandler&&(this.bufferMonitor.clear(),this.resizeHandler.remove(),this.resizeHandler=null)},t.prototype.render=function(){var e=this,t=this.props,n=t.childrenProps,o=t.children,i=f.a.Children.only(o);if(n){var r={};return Object.keys(n).forEach(function(t){r[t]=e.props[n[t]]}),f.a.cloneElement(i,r)}return i},t}(c.Component);Ae.propTypes={childrenProps:h.a.object,align:h.a.object.isRequired,target:h.a.oneOfType([h.a.func,h.a.shape({clientX:h.a.number,clientY:h.a.number,pageX:h.a.number,pageY:h.a.number})]),onAlign:h.a.func,monitorBufferTime:h.a.number,monitorWindowResize:h.a.bool,disabled:h.a.bool,children:h.a.any},Ae.defaultProps={target:function(){return window},monitorBufferTime:50,monitorWindowResize:!1,disabled:!1};var Re=Ae,Ve=n(67),Ke=n(49),je=n.n(Ke),Fe=function(e){function t(){return a()(this,t),l()(this,e.apply(this,arguments))}return p()(t,e),t.prototype.shouldComponentUpdate=function(e){return e.hiddenClassName||e.visible},t.prototype.render=function(){var e=this.props,t=e.hiddenClassName,n=e.visible,o=je()(e,["hiddenClassName","visible"]);return t||f.a.Children.count(o.children)>1?(!n&&t&&(o.className+=" "+t),f.a.createElement("div",o)):f.a.Children.only(o.children)},t}(c.Component);Fe.propTypes={children:h.a.any,className:h.a.string,visible:h.a.bool,hiddenClassName:h.a.string};var Le=Fe,We=function(e){function t(){return a()(this,t),l()(this,e.apply(this,arguments))}return p()(t,e),t.prototype.render=function(){var e=this.props,t=e.className;return e.visible||(t+=" "+e.hiddenClassName),f.a.createElement("div",{className:t,onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,onMouseDown:e.onMouseDown,onTouchStart:e.onTouchStart,style:e.style},f.a.createElement(Le,{className:e.prefixCls+"-content",visible:e.visible},e.children))},t}(c.Component);We.propTypes={hiddenClassName:h.a.string,className:h.a.string,prefixCls:h.a.string,onMouseEnter:h.a.func,onMouseLeave:h.a.func,onMouseDown:h.a.func,onTouchStart:h.a.func,children:h.a.any};var He=We,Ue=function(e){function t(n){a()(this,t);var o=l()(this,e.call(this,n));return Be.call(o),o.state={stretchChecked:!1,targetWidth:void 0,targetHeight:void 0},o.savePopupRef=S.bind(o,"popupInstance"),o.saveAlignRef=S.bind(o,"alignInstance"),o}return p()(t,e),t.prototype.componentDidMount=function(){this.rootNode=this.getPopupDomNode(),this.setStretchSize()},t.prototype.componentDidUpdate=function(){this.setStretchSize()},t.prototype.getPopupDomNode=function(){return m.a.findDOMNode(this.popupInstance)},t.prototype.getMaskTransitionName=function(){var e=this.props,t=e.maskTransitionName,n=e.maskAnimation;return!t&&n&&(t=e.prefixCls+"-"+n),t},t.prototype.getTransitionName=function(){var e=this.props,t=e.transitionName;return!t&&e.animation&&(t=e.prefixCls+"-"+e.animation),t},t.prototype.getClassName=function(e){return this.props.prefixCls+" "+this.props.className+" "+e},t.prototype.getPopupElement=function(){var e=this,t=this.savePopupRef,n=this.state,o=n.stretchChecked,r=n.targetHeight,a=n.targetWidth,s=this.props,l=s.align,u=s.visible,p=s.prefixCls,c=s.style,d=s.getClassNameFromAlign,h=s.destroyPopupOnHide,v=s.stretch,m=s.children,g=s.onMouseEnter,y=s.onMouseLeave,b=s.onMouseDown,C=s.onTouchStart,O=this.getClassName(this.currentAlignClassName||d(l)),w=p+"-hidden";u||(this.currentAlignClassName=null);var M={};v&&(-1!==v.indexOf("height")?M.height=r:-1!==v.indexOf("minHeight")&&(M.minHeight=r),-1!==v.indexOf("width")?M.width=a:-1!==v.indexOf("minWidth")&&(M.minWidth=a),o||(M.visibility="hidden",setTimeout(function(){e.alignInstance&&e.alignInstance.forceAlign()},0)));var S={className:O,prefixCls:p,ref:t,onMouseEnter:g,onMouseLeave:y,onMouseDown:b,onTouchStart:C,style:i()({},M,c,this.getZIndexStyle())};return h?f.a.createElement(Ve.a,{component:"",exclusive:!0,transitionAppear:!0,transitionName:this.getTransitionName()},u?f.a.createElement(Re,{target:this.getAlignTarget(),key:"popup",ref:this.saveAlignRef,monitorWindowResize:!0,align:l,onAlign:this.onAlign},f.a.createElement(He,i()({visible:!0},S),m)):null):f.a.createElement(Ve.a,{component:"",exclusive:!0,transitionAppear:!0,transitionName:this.getTransitionName(),showProp:"xVisible"},f.a.createElement(Re,{target:this.getAlignTarget(),key:"popup",ref:this.saveAlignRef,monitorWindowResize:!0,xVisible:u,childrenProps:{visible:"xVisible"},disabled:!u,align:l,onAlign:this.onAlign},f.a.createElement(He,i()({hiddenClassName:w},S),m)))},t.prototype.getZIndexStyle=function(){var e={},t=this.props;return void 0!==t.zIndex&&(e.zIndex=t.zIndex),e},t.prototype.getMaskElement=function(){var e=this.props,t=void 0;if(e.mask){var n=this.getMaskTransitionName();t=f.a.createElement(Le,{style:this.getZIndexStyle(),key:"mask",className:e.prefixCls+"-mask",hiddenClassName:e.prefixCls+"-mask-hidden",visible:e.visible}),n&&(t=f.a.createElement(Ve.a,{key:"mask",showProp:"visible",transitionAppear:!0,component:"",transitionName:n},t))}return t},t.prototype.render=function(){return f.a.createElement("div",null,this.getMaskElement(),this.getPopupElement())},t}(c.Component);Ue.propTypes={visible:h.a.bool,style:h.a.object,getClassNameFromAlign:h.a.func,onAlign:h.a.func,getRootDomNode:h.a.func,align:h.a.any,destroyPopupOnHide:h.a.bool,className:h.a.string,prefixCls:h.a.string,onMouseEnter:h.a.func,onMouseLeave:h.a.func,onMouseDown:h.a.func,onTouchStart:h.a.func,stretch:h.a.string,children:h.a.node,point:h.a.shape({pageX:h.a.number,pageY:h.a.number})};var Be=function(){var e=this;this.onAlign=function(t,n){var o=e.props,i=o.getClassNameFromAlign(n);e.currentAlignClassName!==i&&(e.currentAlignClassName=i,t.className=e.getClassName(i)),o.onAlign(t,n)},this.setStretchSize=function(){var t=e.props,n=t.stretch,o=t.getRootDomNode,i=t.visible,r=e.state,a=r.stretchChecked,s=r.targetHeight,l=r.targetWidth;if(n&&i){var u=o();if(u){var p=u.offsetHeight,c=u.offsetWidth;s===p&&l===c&&a||e.setState({stretchChecked:!0,targetHeight:p,targetWidth:c})}}else a&&e.setState({stretchChecked:!1})},this.getTargetElement=function(){return e.props.getRootDomNode()},this.getAlignTarget=function(){var t=e.props.point;return t||e.getTargetElement}},ze=Ue;function Ye(){}var Xe=["onClick","onMouseDown","onTouchStart","onMouseEnter","onMouseLeave","onFocus","onBlur","onContextMenu"],qe=!!v.createPortal,Ge={rcTrigger:h.a.shape({onPopupMouseDown:h.a.func})},Ze=function(e){function t(n){a()(this,t);var o=l()(this,e.call(this,n));Qe.call(o);var i=void 0;return i="popupVisible"in n?!!n.popupVisible:!!n.defaultPopupVisible,o.prevPopupVisible=i,o.state={popupVisible:i},o}return p()(t,e),t.prototype.getChildContext=function(){return{rcTrigger:{onPopupMouseDown:this.onPopupMouseDown}}},t.prototype.componentWillMount=function(){var e=this;Xe.forEach(function(t){e["fire"+t]=function(n){e.fireEvents(t,n)}})},t.prototype.componentDidMount=function(){this.componentDidUpdate({},{popupVisible:this.state.popupVisible})},t.prototype.componentWillReceiveProps=function(e){var t=e.popupVisible;void 0!==t&&this.setState({popupVisible:t})},t.prototype.componentDidUpdate=function(e,t){var n=this.props,o=this.state;if(qe||this.renderComponent(null,function(){t.popupVisible!==o.popupVisible&&n.afterPopupVisibleChange(o.popupVisible)}),this.prevPopupVisible=t.popupVisible,o.popupVisible){var i=void 0;return this.clickOutsideHandler||!this.isClickToHide()&&!this.isContextMenuToShow()||(i=n.getDocument(),this.clickOutsideHandler=Object(y.a)(i,"mousedown",this.onDocumentClick)),this.touchOutsideHandler||(i=i||n.getDocument(),this.touchOutsideHandler=Object(y.a)(i,"touchstart",this.onDocumentClick)),!this.contextMenuOutsideHandler1&&this.isContextMenuToShow()&&(i=i||n.getDocument(),this.contextMenuOutsideHandler1=Object(y.a)(i,"scroll",this.onContextMenuClose)),void(!this.contextMenuOutsideHandler2&&this.isContextMenuToShow()&&(this.contextMenuOutsideHandler2=Object(y.a)(window,"blur",this.onContextMenuClose)))}this.clearOutsideHandler()},t.prototype.componentWillUnmount=function(){this.clearDelayTimer(),this.clearOutsideHandler(),clearTimeout(this.mouseDownTimeout)},t.prototype.getPopupDomNode=function(){return this._component&&this._component.getPopupDomNode?this._component.getPopupDomNode():null},t.prototype.getPopupAlign=function(){var e=this.props,t=e.popupPlacement,n=e.popupAlign,o=e.builtinPlacements;return t&&o?function(e,t,n){var o=e[t]||{};return i()({},o,n)}(o,t,n):n},t.prototype.setPopupVisible=function(e,t){var n=this.props.alignPoint;this.clearDelayTimer(),this.state.popupVisible!==e&&("popupVisible"in this.props||this.setState({popupVisible:e}),this.props.onPopupVisibleChange(e)),n&&t&&this.setPoint(t)},t.prototype.delaySetPopupVisible=function(e,t,n){var o=this,i=1e3*t;if(this.clearDelayTimer(),i){var r=n?{pageX:n.pageX,pageY:n.pageY}:null;this.delayTimer=setTimeout(function(){o.setPopupVisible(e,r),o.clearDelayTimer()},i)}else this.setPopupVisible(e,n)},t.prototype.clearDelayTimer=function(){this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null)},t.prototype.clearOutsideHandler=function(){this.clickOutsideHandler&&(this.clickOutsideHandler.remove(),this.clickOutsideHandler=null),this.contextMenuOutsideHandler1&&(this.contextMenuOutsideHandler1.remove(),this.contextMenuOutsideHandler1=null),this.contextMenuOutsideHandler2&&(this.contextMenuOutsideHandler2.remove(),this.contextMenuOutsideHandler2=null),this.touchOutsideHandler&&(this.touchOutsideHandler.remove(),this.touchOutsideHandler=null)},t.prototype.createTwoChains=function(e){var t=this.props.children.props,n=this.props;return t[e]&&n[e]?this["fire"+e]:t[e]||n[e]},t.prototype.isClickToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")},t.prototype.isContextMenuToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("contextMenu")||-1!==n.indexOf("contextMenu")},t.prototype.isClickToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")},t.prototype.isMouseEnterToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseEnter")},t.prototype.isMouseLeaveToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseLeave")},t.prototype.isFocusToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("focus")},t.prototype.isBlurToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("blur")},t.prototype.forcePopupAlign=function(){this.state.popupVisible&&this._component&&this._component.alignInstance&&this._component.alignInstance.forceAlign()},t.prototype.fireEvents=function(e,t){var n=this.props.children.props[e];n&&n(t);var o=this.props[e];o&&o(t)},t.prototype.close=function(){this.setPopupVisible(!1)},t.prototype.render=function(){var e=this,t=this.state.popupVisible,n=this.props,o=n.children,i=n.forceRender,r=n.alignPoint,a=n.className,s=f.a.Children.only(o),l={key:"trigger"};this.isContextMenuToShow()?l.onContextMenu=this.onContextMenu:l.onContextMenu=this.createTwoChains("onContextMenu"),this.isClickToHide()||this.isClickToShow()?(l.onClick=this.onClick,l.onMouseDown=this.onMouseDown,l.onTouchStart=this.onTouchStart):(l.onClick=this.createTwoChains("onClick"),l.onMouseDown=this.createTwoChains("onMouseDown"),l.onTouchStart=this.createTwoChains("onTouchStart")),this.isMouseEnterToShow()?(l.onMouseEnter=this.onMouseEnter,r&&(l.onMouseMove=this.onMouseMove)):l.onMouseEnter=this.createTwoChains("onMouseEnter"),this.isMouseLeaveToHide()?l.onMouseLeave=this.onMouseLeave:l.onMouseLeave=this.createTwoChains("onMouseLeave"),this.isFocusToShow()||this.isBlurToHide()?(l.onFocus=this.onFocus,l.onBlur=this.onBlur):(l.onFocus=this.createTwoChains("onFocus"),l.onBlur=this.createTwoChains("onBlur"));var u=w()(s&&s.props&&s.props.className,a);u&&(l.className=u);var p=f.a.cloneElement(s,l);if(!qe)return f.a.createElement(b.a,{parent:this,visible:t,autoMount:!1,forceRender:i,getComponent:this.getComponent,getContainer:this.getContainer},function(t){var n=t.renderComponent;return e.renderComponent=n,p});var c=void 0;return(t||this._component||i)&&(c=f.a.createElement(C.a,{key:"portal",getContainer:this.getContainer,didUpdate:this.handlePortalUpdate},this.getComponent())),[p,c]},t}(f.a.Component);Ze.propTypes={children:h.a.any,action:h.a.oneOfType([h.a.string,h.a.arrayOf(h.a.string)]),showAction:h.a.any,hideAction:h.a.any,getPopupClassNameFromAlign:h.a.any,onPopupVisibleChange:h.a.func,afterPopupVisibleChange:h.a.func,popup:h.a.oneOfType([h.a.node,h.a.func]).isRequired,popupStyle:h.a.object,prefixCls:h.a.string,popupClassName:h.a.string,className:h.a.string,popupPlacement:h.a.string,builtinPlacements:h.a.object,popupTransitionName:h.a.oneOfType([h.a.string,h.a.object]),popupAnimation:h.a.any,mouseEnterDelay:h.a.number,mouseLeaveDelay:h.a.number,zIndex:h.a.number,focusDelay:h.a.number,blurDelay:h.a.number,getPopupContainer:h.a.func,getDocument:h.a.func,forceRender:h.a.bool,destroyPopupOnHide:h.a.bool,mask:h.a.bool,maskClosable:h.a.bool,onPopupAlign:h.a.func,popupAlign:h.a.object,popupVisible:h.a.bool,defaultPopupVisible:h.a.bool,maskTransitionName:h.a.oneOfType([h.a.string,h.a.object]),maskAnimation:h.a.string,stretch:h.a.string,alignPoint:h.a.bool},Ze.contextTypes=Ge,Ze.childContextTypes=Ge,Ze.defaultProps={prefixCls:"rc-trigger-popup",getPopupClassNameFromAlign:function(){return""},getDocument:function(){return window.document},onPopupVisibleChange:Ye,afterPopupVisibleChange:Ye,onPopupAlign:Ye,popupClassName:"",mouseEnterDelay:0,mouseLeaveDelay:.1,focusDelay:0,blurDelay:.15,popupStyle:{},destroyPopupOnHide:!1,popupAlign:{},defaultPopupVisible:!1,mask:!1,maskClosable:!0,action:[],showAction:[],hideAction:[]};var Qe=function(){var e=this;this.onMouseEnter=function(t){var n=e.props.mouseEnterDelay;e.fireEvents("onMouseEnter",t),e.delaySetPopupVisible(!0,n,n?null:t)},this.onMouseMove=function(t){e.fireEvents("onMouseMove",t),e.setPoint(t)},this.onMouseLeave=function(t){e.fireEvents("onMouseLeave",t),e.delaySetPopupVisible(!1,e.props.mouseLeaveDelay)},this.onPopupMouseEnter=function(){e.clearDelayTimer()},this.onPopupMouseLeave=function(t){t.relatedTarget&&!t.relatedTarget.setTimeout&&e._component&&e._component.getPopupDomNode&&Object(g.a)(e._component.getPopupDomNode(),t.relatedTarget)||e.delaySetPopupVisible(!1,e.props.mouseLeaveDelay)},this.onFocus=function(t){e.fireEvents("onFocus",t),e.clearDelayTimer(),e.isFocusToShow()&&(e.focusTime=Date.now(),e.delaySetPopupVisible(!0,e.props.focusDelay))},this.onMouseDown=function(t){e.fireEvents("onMouseDown",t),e.preClickTime=Date.now()},this.onTouchStart=function(t){e.fireEvents("onTouchStart",t),e.preTouchTime=Date.now()},this.onBlur=function(t){e.fireEvents("onBlur",t),e.clearDelayTimer(),e.isBlurToHide()&&e.delaySetPopupVisible(!1,e.props.blurDelay)},this.onContextMenu=function(t){t.preventDefault(),e.fireEvents("onContextMenu",t),e.setPopupVisible(!0,t)},this.onContextMenuClose=function(){e.isContextMenuToShow()&&e.close()},this.onClick=function(t){if(e.fireEvents("onClick",t),e.focusTime){var n=void 0;if(e.preClickTime&&e.preTouchTime?n=Math.min(e.preClickTime,e.preTouchTime):e.preClickTime?n=e.preClickTime:e.preTouchTime&&(n=e.preTouchTime),Math.abs(n-e.focusTime)<20)return;e.focusTime=0}e.preClickTime=0,e.preTouchTime=0,t&&t.preventDefault&&t.preventDefault();var o=!e.state.popupVisible;(e.isClickToHide()&&!o||o&&e.isClickToShow())&&e.setPopupVisible(!e.state.popupVisible,t)},this.onPopupMouseDown=function(){var t=e.context.rcTrigger,n=void 0===t?{}:t;e.hasPopupMouseDown=!0,clearTimeout(e.mouseDownTimeout),e.mouseDownTimeout=setTimeout(function(){e.hasPopupMouseDown=!1},0),n.onPopupMouseDown&&n.onPopupMouseDown.apply(n,arguments)},this.onDocumentClick=function(t){if(!e.props.mask||e.props.maskClosable){var n=t.target,o=Object(v.findDOMNode)(e);Object(g.a)(o,n)||e.hasPopupMouseDown||e.close()}},this.getRootDomNode=function(){return Object(v.findDOMNode)(e)},this.getPopupClassNameFromAlign=function(t){var n=[],o=e.props,i=o.popupPlacement,r=o.builtinPlacements,a=o.prefixCls,s=o.alignPoint,l=o.getPopupClassNameFromAlign;return i&&r&&n.push(function(e,t,n,o){var i=n.points;for(var r in e)if(e.hasOwnProperty(r)&&M(e[r].points,i,o))return t+"-placement-"+r;return""}(r,a,t,s)),l&&n.push(l(t)),n.join(" ")},this.getComponent=function(){var t=e.props,n=t.prefixCls,o=t.destroyPopupOnHide,r=t.popupClassName,a=t.action,s=t.onPopupAlign,l=t.popupAnimation,u=t.popupTransitionName,p=t.popupStyle,c=t.mask,d=t.maskAnimation,h=t.maskTransitionName,v=t.zIndex,m=t.popup,g=t.stretch,y=t.alignPoint,b=e.state,C=b.popupVisible,O=b.point,w=e.getPopupAlign(),M={};return e.isMouseEnterToShow()&&(M.onMouseEnter=e.onPopupMouseEnter),e.isMouseLeaveToHide()&&(M.onMouseLeave=e.onPopupMouseLeave),M.onMouseDown=e.onPopupMouseDown,M.onTouchStart=e.onPopupMouseDown,f.a.createElement(ze,i()({prefixCls:n,destroyPopupOnHide:o,visible:C,point:y&&O,className:r,action:a,align:w,onAlign:s,animation:l,getClassNameFromAlign:e.getPopupClassNameFromAlign},M,{stretch:g,getRootDomNode:e.getRootDomNode,style:p,mask:c,zIndex:v,transitionName:u,maskAnimation:d,maskTransitionName:h,ref:e.savePopup}),"function"==typeof m?m():m)},this.getContainer=function(){var t=e.props,n=document.createElement("div");return n.style.position="absolute",n.style.top="0",n.style.left="0",n.style.width="100%",(t.getPopupContainer?t.getPopupContainer(Object(v.findDOMNode)(e)):t.getDocument().body).appendChild(n),n},this.setPoint=function(t){e.props.alignPoint&&t&&e.setState({point:{pageX:t.pageX,pageY:t.pageY}})},this.handlePortalUpdate=function(){e.prevPopupVisible!==e.state.popupVisible&&e.props.afterPopupVisibleChange(e.state.popupVisible)},this.savePopup=function(t){e._component=t}};t.a=Ze}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1zdG9yZS9saWIvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9hZGRFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0NoaWxkcmVuL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktc3RvcmUvbGliL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLXN0b3JlL2xpYi9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGFsbG93ZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktc3RvcmUvbGliL2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbC9kaXN0L1Jlc2l6ZU9ic2VydmVyLmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9jb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRkLWRvbS1ldmVudC1saXN0ZW5lci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FkZC1kb20tZXZlbnQtbGlzdGVuZXIvbGliL0V2ZW50T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hZGQtZG9tLWV2ZW50LWxpc3RlbmVyL2xpYi9FdmVudEJhc2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvQ29udGFpbmVyUmVuZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXV0YXRpb25vYnNlcnZlci1zaGltL2Rpc3QvbXV0YXRpb25vYnNlcnZlci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWNhbGVuZGFyL2VzL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtc2VsZWN0L2VzL09wdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtc2VsZWN0L2VzL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXNlbGVjdC9lcy9Ecm9wZG93bk1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXNlbGVjdC9lcy9TZWxlY3RUcmlnZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1zZWxlY3QvZXMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1zZWxlY3QvZXMvU2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1zZWxlY3QvZXMvT3B0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXNlbGVjdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXBhZ2luYXRpb24vZXMvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RpbWUtcGlja2VyL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9kYXRlLXBpY2tlci9sb2NhbGUvZW5fVVMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbG9jYWxlLXByb3ZpZGVyL2RlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvc2VsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL191dGlsL29wZW5BbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbWVudS9TdWJNZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10b29sdGlwL2VzL3BsYWNlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRvb2x0aXAvZXMvQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdG9vbHRpcC9lcy9Ub29sdGlwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10b29sdGlwL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3Rvb2x0aXAvcGxhY2VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90b29sdGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL21lbnUvTWVudUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbWVudS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sYXlvdXQvbGF5b3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL191dGlsL2lzTnVtZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sYXlvdXQvU2lkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbGF5b3V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW1lbnUvZXMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbWVudS9lcy9wbGFjZW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tZW51L2VzL1N1Yk1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW1lbnUvZXMvRE9NV3JhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbWVudS9lcy9TdWJQb3B1cE1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW1lbnUvZXMvTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbWVudS9lcy9NZW51SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbWVudS9lcy9NZW51SXRlbUdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tZW51L2VzL0RpdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW1lbnUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktc3RvcmUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0tleUNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRyaWdnZXIvZXMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1hbGlnbi9lcy9wcm9wZXJ0eVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tYWxpZ24vZXMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1hbGlnbi9lcy9nZXRPZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1hbGlnbi9lcy9nZXRWaXNpYmxlUmVjdEZvckVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1hbGlnbi9lcy9pc0FuY2VzdG9yRml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1hbGlnbi9lcy9hZGp1c3RGb3JWaWV3cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL2dldFJlZ2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL2dldEFsaWduT2Zmc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tYWxpZ24vZXMvZ2V0RWxGdXR1cmVQb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1hbGlnbi9lcy9hbGlnbi9hbGlnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL2FsaWduL2FsaWduRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL2FsaWduL2FsaWduUG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWFsaWduL2VzL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWFsaWduL2VzL0FsaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1hbGlnbi9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdHJpZ2dlci9lcy9MYXp5UmVuZGVyQm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10cmlnZ2VyL2VzL1BvcHVwSW5uZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRyaWdnZXIvZXMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRyaWdnZXIvZXMvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdG9yZVNoYXBlIiwidW5kZWZpbmVkIiwiX3Byb3BUeXBlczIiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwic2hhcGUiLCJzdWJzY3JpYmUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsInNldFN0YXRlIiwiZ2V0U3RhdGUiLCJkIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImFkZEV2ZW50TGlzdGVuZXJXcmFwIiwiYWRkX2RvbV9ldmVudF9saXN0ZW5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiYWRkX2RvbV9ldmVudF9saXN0ZW5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJuIiwicmVhY3RfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJyZWFjdF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwidGFyZ2V0IiwiZXZlbnRUeXBlIiwiY2IiLCJjYWxsYmFjayIsImEiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsImUiLCJ0b0FycmF5IiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsImNoaWxkcmVuIiwicmV0IiwiQ2hpbGRyZW4iLCJmb3JFYWNoIiwiYyIsInB1c2giLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImtleSIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiX3JlYWN0IiwiX1Byb3BUeXBlcyIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzIiwiQ29tcG9uZW50IiwibWluaVN0b3JlIiwic3RvcmUiLCJvbmx5IiwicHJvcFR5cGVzIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInNvdXJjZSIsImhhc093blByb3BlcnR5IiwibWFwU3RhdGVUb1Byb3BzIiwic2hvdWxkU3Vic2NyaWJlIiwiZmlubmFsTWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyIsIldyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiY29udGV4dCIsIl90aGlzIiwiaGFuZGxlQ2hhbmdlIiwidW5zdWJzY3JpYmUiLCJuZXh0U3RhdGUiLCJfc2hhbGxvd2VxdWFsMiIsInN0YXRlIiwic3Vic2NyaWJlZCIsInByZXZTdGF0ZSIsInRyeVN1YnNjcmliZSIsInRyeVVuc3Vic2NyaWJlIiwid3JhcHBlZEluc3RhbmNlIiwiX3RoaXMyIiwicmVuZGVyIiwiaXNTdGF0ZWxlc3MiLCJyZWYiLCJfcmVhY3QyIiwiY3JlYXRlRWxlbWVudCIsImRpc3BsYXlOYW1lIiwibmFtZSIsImdldERpc3BsYXlOYW1lIiwiY29udGV4dFR5cGVzIiwiX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCIsInBvbHlmaWxsIiwiX2hvaXN0Tm9uUmVhY3RTdGF0aWNzMiIsIm1vZHVsZSIsIm9iakEiLCJvYmpCIiwiY29tcGFyZSIsImNvbXBhcmVDb250ZXh0Iiwia2V5c0EiLCJrZXlzIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLCJiaW5kIiwiaWR4IiwidmFsdWVBIiwidmFsdWVCIiwiaW5pdGlhbFN0YXRlIiwibGlzdGVuZXJzIiwicGFydGlhbCIsImxpc3RlbmVyIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiYXJncyIsInNsaWNlIiwiZ2xvYmFsIiwiTWFwU2hpbSIsIk1hcCIsImdldEluZGV4IiwiYXJyIiwicmVzdWx0Iiwic29tZSIsImVudHJ5IiwiYW5vbnltb3VzIiwiX19lbnRyaWVzX18iLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJzaXplIiwiZ2V0Iiwic2V0IiwiZGVsZXRlIiwiZW50cmllcyIsImhhcyIsImNsZWFyIiwiY3R4IiwibGlzdCIsImlzQnJvd3NlciIsIndpbmRvdyIsImRvY3VtZW50IiwiZ2xvYmFsJDEiLCJNYXRoIiwiRnVuY3Rpb24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJEYXRlIiwibm93IiwidHJhaWxpbmdUaW1lb3V0IiwidHJhbnNpdGlvbktleXMiLCJtdXRhdGlvbk9ic2VydmVyU3VwcG9ydGVkIiwiTXV0YXRpb25PYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciIsImNvbm5lY3RlZF8iLCJtdXRhdGlvbkV2ZW50c0FkZGVkXyIsIm11dGF0aW9uc09ic2VydmVyXyIsIm9ic2VydmVyc18iLCJvblRyYW5zaXRpb25FbmRfIiwicmVmcmVzaCIsImRlbGF5IiwibGVhZGluZ0NhbGwiLCJ0cmFpbGluZ0NhbGwiLCJsYXN0Q2FsbFRpbWUiLCJyZXNvbHZlUGVuZGluZyIsInByb3h5IiwidGltZW91dENhbGxiYWNrIiwidGltZVN0YW1wIiwidGhyb3R0bGUiLCJhZGRPYnNlcnZlciIsIm9ic2VydmVyIiwiY29ubmVjdF8iLCJyZW1vdmVPYnNlcnZlciIsIm9ic2VydmVycyIsImRpc2Nvbm5lY3RfIiwidXBkYXRlT2JzZXJ2ZXJzXyIsImFjdGl2ZU9ic2VydmVycyIsImZpbHRlciIsImdhdGhlckFjdGl2ZSIsImhhc0FjdGl2ZSIsImJyb2FkY2FzdEFjdGl2ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvYnNlcnZlIiwiYXR0cmlidXRlcyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc2Nvbm5lY3QiLCJwcm9wZXJ0eU5hbWUiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlXyIsImRlZmluZUNvbmZpZ3VyYWJsZSIsImdldFdpbmRvd09mIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZW1wdHlSZWN0IiwiY3JlYXRlUmVjdEluaXQiLCJ0b0Zsb2F0IiwicGFyc2VGbG9hdCIsImdldEJvcmRlcnNTaXplIiwic3R5bGVzIiwicG9zaXRpb25zIiwibGVuIiwicmVkdWNlIiwicG9zaXRpb24iLCJnZXRIVE1MRWxlbWVudENvbnRlbnRSZWN0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRDb21wdXRlZFN0eWxlIiwicGFkZGluZ3MiLCJnZXRQYWRkaW5ncyIsImhvcml6UGFkIiwibGVmdCIsInJpZ2h0IiwidmVydFBhZCIsInRvcCIsImJvdHRvbSIsIndpZHRoIiwiaGVpZ2h0IiwiYm94U2l6aW5nIiwicm91bmQiLCJkb2N1bWVudEVsZW1lbnQiLCJpc0RvY3VtZW50RWxlbWVudCIsInZlcnRTY3JvbGxiYXIiLCJob3JpelNjcm9sbGJhciIsImFicyIsImlzU1ZHR3JhcGhpY3NFbGVtZW50IiwiU1ZHR3JhcGhpY3NFbGVtZW50IiwiU1ZHRWxlbWVudCIsImdldEJCb3giLCJnZXRDb250ZW50UmVjdCIsImJib3giLCJnZXRTVkdDb250ZW50UmVjdCIsIngiLCJ5IiwiUmVzaXplT2JzZXJ2YXRpb24iLCJicm9hZGNhc3RXaWR0aCIsImJyb2FkY2FzdEhlaWdodCIsImNvbnRlbnRSZWN0XyIsImlzQWN0aXZlIiwicmVjdCIsImJyb2FkY2FzdFJlY3QiLCJSZXNpemVPYnNlcnZlckVudHJ5IiwicmVjdEluaXQiLCJjb250ZW50UmVjdCIsIkNvbnN0ciIsIkRPTVJlY3RSZWFkT25seSIsImNyZWF0ZVJlYWRPbmx5UmVjdCIsIlJlc2l6ZU9ic2VydmVyU1BJIiwiY29udHJvbGxlciIsImNhbGxiYWNrQ3R4IiwiYWN0aXZlT2JzZXJ2YXRpb25zXyIsIm9ic2VydmF0aW9uc18iLCJjYWxsYmFja18iLCJjb250cm9sbGVyXyIsImNhbGxiYWNrQ3R4XyIsIkVsZW1lbnQiLCJvYnNlcnZhdGlvbnMiLCJ1bm9ic2VydmUiLCJjbGVhckFjdGl2ZSIsInRoaXMkMSIsIm9ic2VydmF0aW9uIiwibWFwIiwiV2Vha01hcCIsIlJlc2l6ZU9ic2VydmVyIiwibWV0aG9kIiwiY29udGFpbnMiLCJyb290Iiwibm9kZSIsInBhcmVudE5vZGUiLCJ3cmFwQ2FsbGJhY2siLCJuZSIsIl9FdmVudE9iamVjdDIiLCJyZW1vdmUiLCJhdHRhY2hFdmVudCIsImRldGFjaEV2ZW50IiwiX0V2ZW50QmFzZU9iamVjdDIiLCJfb2JqZWN0QXNzaWduMiIsIlRSVUUiLCJGQUxTRSIsImNvbW1vblByb3BzIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJ3IiwiZXZlbnROb3JtYWxpemVycyIsInJlZyIsImZpeCIsImV2ZW50IiwibmF0aXZlRXZlbnQiLCJ3aGljaCIsImNoYXJDb2RlIiwia2V5Q29kZSIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiZGVsdGFYIiwiZGVsdGFZIiwiZGVsdGEiLCJ3aGVlbERlbHRhIiwiYXhpcyIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJkZXRhaWwiLCJIT1JJWk9OVEFMX0FYSVMiLCJWRVJUSUNBTF9BWElTIiwiZXZlbnREb2MiLCJkb2MiLCJib2R5IiwiYnV0dG9uIiwicGFnZVgiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJwYWdlWSIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJyZXRUcnVlIiwicmV0RmFsc2UiLCJEb21FdmVudE9iamVjdCIsInR5cGUiLCJpc05hdGl2ZSIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJnZXRQcmV2ZW50RGVmYXVsdCIsInJldHVyblZhbHVlIiwiZml4Rm5zIiwibCIsInByb3AiLCJjb25jYXQiLCJub3JtYWxpemVyIiwibWF0Y2giLCJzcmNFbGVtZW50Iiwibm9kZVR5cGUiLCJmaXhGbiIsIkV2ZW50QmFzZU9iamVjdFByb3RvIiwicHJldmVudERlZmF1bHQiLCJyZXR1cm5GYWxzZSIsInJldHVyblRydWUiLCJFdmVudEJhc2VPYmplY3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNFdmVudE9iamVjdCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJoYWx0IiwiaW1tZWRpYXRlIiwiYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJiYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJiYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiYmFiZWxfcnVudGltZV9oZWxwZXJzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImJhYmVsX3J1bnRpbWVfaGVscGVyc19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsImJhYmVsX3J1bnRpbWVfaGVscGVyc19pbmhlcml0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiYmFiZWxfcnVudGltZV9oZWxwZXJzX2luaGVyaXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJyZWFjdF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsInJlYWN0X2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fX2RlZmF1bHQiLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19fZGVmYXVsdCIsIkNvbnRhaW5lclJlbmRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJfcmVmIiwiX3RlbXAiLCJfcmV0IiwiX2xlbiIsIkFycmF5IiwiX2tleSIsInJlbW92ZUNvbnRhaW5lciIsImNvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbmRlckNvbXBvbmVudCIsInJlYWR5IiwiX3RoaXMkcHJvcHMiLCJ2aXNpYmxlIiwiZ2V0Q29tcG9uZW50IiwiZm9yY2VSZW5kZXIiLCJnZXRDb250YWluZXIiLCJwYXJlbnQiLCJfY29tcG9uZW50IiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJhdXRvTW91bnQiLCJhdXRvRGVzdHJveSIsImJvb2wiLCJhbnkiLCJkZWZhdWx0UHJvcHMiLCJQb3J0YWwiLCJjcmVhdGVDb250YWluZXIiLCJwcmV2UHJvcHMiLCJkaWRVcGRhdGUiLCJfY29udGFpbmVyIiwiZm9yY2VVcGRhdGUiLCJjcmVhdGVQb3J0YWwiLCJ2IiwibSIsInAiLCJiIiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsInByZXZpb3VzU2libGluZyIsIm5leHRTaWJsaW5nIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm9sZFZhbHVlIiwiSiIsIkMiLCJmIiwibm9kZVZhbHVlIiwiQSIsImciLCJrIiwiaCIsInBvcCIsImoiLCJ0IiwiY2hpbGROb2RlcyIsInEiLCJ6IiwidSIsInIiLCJFIiwiRiIsIksiLCJEIiwibmFtZXNwYWNlVVJJIiwiRyIsIk4iLCJpZCIsIm1vX2lkIiwiSCIsIl9wZXJpb2QiLCJhdHRyaWJ1dGVGaWx0ZXIiLCJhdHRyaWJ1dGVPbGRWYWx1ZSIsImNoYXJhY3RlckRhdGFPbGRWYWx1ZSIsInMiLCJvIiwidGFrZVJlY29yZHMiLCJJIiwiY2xlYXJUaW1lb3V0IiwiQiIsInN0eWxlIiwiY3NzVGV4dCIsInRvZGF5IiwiYmFja1RvVG9kYXkiLCJvayIsIm1vbnRoIiwieWVhciIsInRpbWVTZWxlY3QiLCJkYXRlU2VsZWN0Iiwid2Vla1NlbGVjdCIsIm1vbnRoU2VsZWN0IiwieWVhclNlbGVjdCIsImRlY2FkZVNlbGVjdCIsInllYXJGb3JtYXQiLCJkYXRlRm9ybWF0IiwiZGF5Rm9ybWF0IiwiZGF0ZVRpbWVGb3JtYXQiLCJtb250aEJlZm9yZVllYXIiLCJwcmV2aW91c01vbnRoIiwibmV4dE1vbnRoIiwicHJldmlvdXNZZWFyIiwibmV4dFllYXIiLCJwcmV2aW91c0RlY2FkZSIsIm5leHREZWNhZGUiLCJwcmV2aW91c0NlbnR1cnkiLCJuZXh0Q2VudHVyeSIsIk9wdGlvbl9PcHRpb24iLCJPcHRpb24iLCJjbGFzc0NhbGxDaGVja19kZWZhdWx0IiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybl9kZWZhdWx0IiwiaW5oZXJpdHNfZGVmYXVsdCIsInJlYWN0X2RlZmF1bHQiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJudW1iZXIiLCJpc1NlbGVjdE9wdGlvbiIsImVzX09wdGlvbiIsInRvVGl0bGUiLCJ0aXRsZSIsImdldFZhbHVlUHJvcFZhbHVlIiwiY2hpbGQiLCJpc1NlbGVjdE9wdEdyb3VwIiwibGFiZWwiLCJFcnJvciIsImdldFByb3BWYWx1ZSIsImlzQ29tYm9ib3giLCJjb21ib2JveCIsImlzTXVsdGlwbGVPclRhZ3MiLCJtdWx0aXBsZSIsInRhZ3MiLCJpc011bHRpcGxlT3JUYWdzT3JDb21ib2JveCIsImlzU2luZ2xlTW9kZSIsInV0aWxfdG9BcnJheSIsImlzQXJyYXkiLCJnZXRNYXBLZXkiLCJwcmV2ZW50RGVmYXVsdEV2ZW50IiwiZmluZEluZGV4SW5WYWx1ZUJ5U2luZ2xlVmFsdWUiLCJzaW5nbGVWYWx1ZSIsIlVOU0VMRUNUQUJMRV9TVFlMRSIsInVzZXJTZWxlY3QiLCJXZWJraXRVc2VyU2VsZWN0IiwiVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSIsInVuc2VsZWN0YWJsZSIsImRlZmF1bHRGaWx0ZXJGbiIsImlucHV0IiwiZGlzYWJsZWQiLCJvcHRpb25GaWx0ZXJQcm9wIiwiam9pbiIsInRvTG93ZXJDYXNlIiwic2F2ZVJlZiIsIkRyb3Bkb3duTWVudV9Ecm9wZG93bk1lbnUiLCJEcm9wZG93bk1lbnUiLCJzY3JvbGxBY3RpdmVJdGVtVG9WaWV3IiwiaXRlbUNvbXBvbmVudCIsInJlYWN0X2RvbSIsImZpcnN0QWN0aXZlSXRlbSIsImZpcnN0QWN0aXZlVmFsdWUiLCJzY3JvbGxJbnRvVmlld09wdHMiLCJvbmx5U2Nyb2xsSWZOZWVkZWQiLCJhbGlnbldpdGhUb3AiLCJyYWZJbnN0YW5jZSIsInJhZl9kZWZhdWx0IiwibGliX2RlZmF1bHQiLCJtZW51UmVmIiwibGFzdElucHV0VmFsdWUiLCJpbnB1dFZhbHVlIiwic2F2ZU1lbnVSZWYiLCJjb21wb25lbnREaWRNb3VudCIsImxhc3RWaXNpYmxlIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFByb3BzIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjYW5jZWwiLCJyZW5kZXJNZW51IiwibWVudUl0ZW1zIiwibWVudUl0ZW1TZWxlY3RlZEljb24iLCJkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24iLCJwcmVmaXhDbHMiLCJvbk1lbnVTZWxlY3QiLCJiYWNrZmlsbFZhbHVlIiwibWVudVByb3BzIiwib25EZXNlbGVjdCIsIm9uTWVudURlc2VsZWN0Iiwib25TZWxlY3QiLCJvbkNsaWNrIiwic2VsZWN0ZWRLZXlzIiwiZ2V0U2VsZWN0S2V5cyIsIml0ZW0iLCJpc01lbnVJdGVtR3JvdXAiLCJpdGVtVmFsdWUiLCJpdGVtS2V5IiwiYWN0aXZlS2V5UHJvcHMiLCJjbG9uZWRNZW51SXRlbXMiLCJhY3RpdmVLZXkiLCJmb3VuZEZpcnN0IiwiY2xvbmUiLCJyZWFjdCIsImxhc3RWYWx1ZSIsImVzIiwiZXh0ZW5kc19kZWZhdWx0IiwiZHJvcGRvd25NZW51U3R5bGUiLCJkZWZhdWx0QWN0aXZlRmlyc3QiLCJyb2xlIiwiaXRlbUljb24iLCJvdmVyZmxvdyIsInRyYW5zZm9ybSIsIm9uRm9jdXMiLCJvblBvcHVwRm9jdXMiLCJvbk1vdXNlRG93biIsIm9uU2Nyb2xsIiwib25Qb3B1cFNjcm9sbCIsIm9iamVjdCIsIm9uTWVudURlU2VsZWN0IiwiZXNfRHJvcGRvd25NZW51IiwicmNfdHJpZ2dlcl9lcyIsIkJVSUxUX0lOX1BMQUNFTUVOVFMiLCJib3R0b21MZWZ0IiwicG9pbnRzIiwib2Zmc2V0IiwiYWRqdXN0WCIsImFkanVzdFkiLCJ0b3BMZWZ0IiwiU2VsZWN0VHJpZ2dlcl9TZWxlY3RUcmlnZ2VyIiwiU2VsZWN0VHJpZ2dlciIsIlNlbGVjdFRyaWdnZXJfaW5pdGlhbGlzZVByb3BzIiwic2F2ZURyb3Bkb3duTWVudVJlZiIsInNhdmVUcmlnZ2VyUmVmIiwiZHJvcGRvd25XaWR0aCIsInNldERyb3Bkb3duV2lkdGgiLCJfcG9wdXBDbGFzc05hbWUiLCJfcHJvcHMiLCJvYmplY3RXaXRob3V0UHJvcGVydGllc19kZWZhdWx0IiwiZHJvcGRvd25BbGlnbiIsInNob3dTZWFyY2giLCJkcm9wZG93bkNsYXNzTmFtZSIsImRyb3Bkb3duU3R5bGUiLCJkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGgiLCJkcm9wZG93blByZWZpeENscyIsImdldERyb3Bkb3duUHJlZml4Q2xzIiwicG9wdXBDbGFzc05hbWUiLCJwb3B1cEVsZW1lbnQiLCJnZXREcm9wZG93bkVsZW1lbnQiLCJvcHRpb25zIiwiaGlkZUFjdGlvbiIsInBvcHVwU3R5bGUiLCJ3aWR0aFByb3AiLCJzaG93QWN0aW9uIiwicG9wdXBQbGFjZW1lbnQiLCJidWlsdGluUGxhY2VtZW50cyIsInBvcHVwVHJhbnNpdGlvbk5hbWUiLCJnZXREcm9wZG93blRyYW5zaXRpb25OYW1lIiwib25Qb3B1cFZpc2libGVDaGFuZ2UiLCJvbkRyb3Bkb3duVmlzaWJsZUNoYW5nZSIsInBvcHVwIiwicG9wdXBBbGlnbiIsInBvcHVwVmlzaWJsZSIsImdldFBvcHVwQ29udGFpbmVyIiwiY2xhc3NuYW1lc19kZWZhdWx0IiwiZmlsdGVyT3B0aW9uIiwiYXJyYXlPZiIsInJlYWN0X2RvbV9kZWZhdWx0IiwiZmluZERPTU5vZGUiLCJvZmZzZXRXaWR0aCIsImdldElubmVyTWVudSIsImRyb3Bkb3duTWVudVJlZiIsImdldFBvcHVwRE9NTm9kZSIsInRyaWdnZXJSZWYiLCJnZXRQb3B1cERvbU5vZGUiLCJuZXdQcm9wcyIsInRyYW5zaXRpb25OYW1lIiwiYW5pbWF0aW9uIiwiZXNfU2VsZWN0VHJpZ2dlciIsInZhbHVlVHlwZSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImJhc2ljVHlwZSIsImxhYmVsSW5WYWx1ZVNoYXBlIiwibGFiZWxJblZhbHVlIiwibW9kZSIsIlNlbGVjdFByb3BUeXBlcyIsImFsbG93Q2xlYXIiLCJzaG93QXJyb3ciLCJjbGFzc05hbWUiLCJvcHRpb25MYWJlbFByb3AiLCJjaG9pY2VUcmFuc2l0aW9uTmFtZSIsIm9uQ2hhbmdlIiwib25CbHVyIiwib25TZWFyY2giLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJvbklucHV0S2V5RG93biIsInBsYWNlaG9sZGVyIiwiZGVmYXVsdFZhbHVlIiwibWF4VGFnVGV4dExlbmd0aCIsIm1heFRhZ0NvdW50IiwibWF4VGFnUGxhY2Vob2xkZXIiLCJ0b2tlblNlcGFyYXRvcnMiLCJnZXRJbnB1dEVsZW1lbnQiLCJjbGVhckljb24iLCJpbnB1dEljb24iLCJyZW1vdmVJY29uIiwibm9vcCIsIlNlbGVjdF9TZWxlY3QiLCJTZWxlY3QiLCJTZWxlY3RfaW5pdGlhbGlzZVByb3BzIiwib3B0aW9uc0luZm8iLCJnZXRPcHRpb25zSW5mb0Zyb21Qcm9wcyIsImdldFZhbHVlRnJvbVByb3BzIiwiZ2V0SW5wdXRWYWx1ZUZvckNvbWJvYm94Iiwib3BlbiIsImRlZmF1bHRPcGVuIiwic2tpcEJ1aWxkT3B0aW9uc0luZm8iLCJzYXZlSW5wdXRSZWYiLCJzYXZlSW5wdXRNaXJyb3JSZWYiLCJzYXZlVG9wQ3RybFJlZiIsInNhdmVTZWxlY3RUcmlnZ2VyUmVmIiwic2F2ZVJvb3RSZWYiLCJzYXZlU2VsZWN0aW9uUmVmIiwiYXV0b0ZvY3VzIiwiZm9jdXMiLCJpbnB1dE5vZGUiLCJnZXRJbnB1dERPTU5vZGUiLCJtaXJyb3JOb2RlIiwiZ2V0SW5wdXRNaXJyb3JET01Ob2RlIiwiZm9yY2VQb3B1cEFsaWduIiwiY2xlYXJGb2N1c1RpbWUiLCJjbGVhckJsdXJUaW1lIiwiZHJvcGRvd25Db250YWluZXIiLCJzZWxlY3Rpb25SZWYiLCJibHVyIiwicmVuZGVyQ2xlYXIiLCJfc3RhdGUiLCJvbkNsZWFyU2VsZWN0aW9uIiwiX3Jvb3RDbHMiLCJjdHJsTm9kZSIsInJlbmRlclRvcENvbnRyb2xOb2RlIiwiX29wdGlvbnMiLCJyZW5kZXJGaWx0ZXJPcHRpb25zIiwicmVhbE9wZW4iLCJnZXRSZWFsT3BlblN0YXRlIiwiZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzIiwic3Vic3RyIiwiZXh0cmFTZWxlY3Rpb25Qcm9wcyIsIm9uS2V5RG93biIsInRhYkluZGV4Iiwicm9vdENscyIsIl9mb2N1c2VkIiwib25PdXRlckJsdXIiLCJvbk91dGVyRm9jdXMiLCJhcmlhLWF1dG9jb21wbGV0ZSIsImFyaWEtaGFzcG9wdXAiLCJhcmlhLWV4cGFuZGVkIiwib25BcnJvd0NsaWNrIiwibm90Rm91bmRDb250ZW50IiwiYmFja2ZpbGwiLCJhdXRvQ2xlYXJTZWFyY2hWYWx1ZSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm5ld1N0YXRlIiwiZ2V0T3B0aW9uc0Zyb21DaGlsZHJlbiIsInVzZURlZmF1bHRWYWx1ZSIsImdldExhYmVsRnJvbU9wdGlvbiIsIm9wdGlvbiIsInByZVN0YXRlIiwib2xkT3B0aW9uc0luZm8iLCJvbklucHV0Q2hhbmdlIiwidmFsIiwic2VwYXJhdG9ycyIsImxhc3RJbmRleE9mIiwiaW5jbHVkZXNTZXBhcmF0b3JzIiwibmV4dFZhbHVlIiwiZ2V0VmFsdWVCeUlucHV0IiwiZmlyZUNoYW5nZSIsInNldE9wZW5TdGF0ZSIsInNldElucHV0VmFsdWUiLCJ0aW1lb3V0Rm9jdXMiLCJ1cGRhdGVGb2N1c0NsYXNzTmFtZSIsIktleUNvZGUiLCJFTlRFUiIsIkRPV04iLCJCQUNLU1BBQ0UiLCJvcGVuSWZIYXNDaGlsZHJlbiIsIkVTQyIsIm1lbnUiLCJzZWxlY3RUcmlnZ2VyUmVmIiwiaGFuZGxlQmFja2ZpbGwiLCJyZW1vdmVTZWxlY3RlZCIsInNlbGVjdGVkVmFsdWUiLCJmaXJlU2VsZWN0IiwiX3JlZjIiLCJkb21FdmVudCIsIm9uUGxhY2Vob2xkZXJDbGljayIsIm1heWJlRm9jdXMiLCJibHVyVGltZXIiLCJmaXJzdE9wdGlvbiIsImZpbmRGaXJzdE1lbnVJdGVtIiwiZm91bmQiLCJnZXRWTEZvck9uQ2hhbmdlIiwib25DaG9pY2VBbmltYXRpb25MZWF2ZSIsImdldE9wdGlvbkluZm9CeVNpbmdsZVZhbHVlIiwiaW5mbyIsImRlZmF1bHRMYWJlbCIsImdldExhYmVsRnJvbVByb3BzVmFsdWUiLCJnZXRPcHRpb25CeVNpbmdsZVZhbHVlIiwiZ2V0T3B0aW9uc0J5U2luZ2xlVmFsdWUiLCJ2YWx1ZXMiLCJnZXRWYWx1ZUJ5TGFiZWwiLCJnZXRWTEJ5U2luZ2xlVmFsdWUiLCJnZXRMYWJlbEJ5U2luZ2xlVmFsdWUiLCJ2bHNfIiwidmxzIiwidmwiLCJnZXREcm9wZG93bkNvbnRhaW5lciIsImFwcGVuZENoaWxkIiwiZ2V0UGxhY2Vob2xkZXJFbGVtZW50IiwiaGlkZGVuIiwiZGlzcGxheSIsIl9jbGFzc25hbWVzIiwiaW5wdXRFbGVtZW50IiwiYXV0b0NvbXBsZXRlIiwiaW5wdXRDbHMiLCJjbG9uZUVsZW1lbnQiLCJmbnMiLCJfbGVuMiIsIl9rZXkyIiwiY2hhaW5pbmciLCJ0b3BDdHJsUmVmIiwicXVlcnlTZWxlY3RvciIsImlucHV0UmVmIiwiaW5wdXRNaXJyb3JSZWYiLCJnZXRQb3B1cE1lbnVDb21wb25lbnQiLCJuZWVkRm9jdXMiLCJmaXJlU2VhcmNoIiwiX3Byb3BzMiIsImhhc05ld1ZhbHVlIiwiUmVnRXhwIiwic3BsaXQiLCJ0b2tlbiIsInNwbGl0QnlTZXBhcmF0b3JzIiwiZGVmYXVsdEZpbHRlciIsImZpbHRlckZuIiwiZm9jdXNUaW1lciIsInJvb3RSZWYiLCJjb21wb25lbnRfY2xhc3Nlc19kZWZhdWx0IiwiYWRkIiwiYWN0aXZlRWxlbWVudCIsInNlbGVjdGVkS2V5IiwiaXNDaGlsZERpc2FibGVkIiwiY291bnQiLCJfcHJvcHMzIiwiY2hpbGRyZW5LZXlzIiwicmVuZGVyRmlsdGVyT3B0aW9uc0Zyb21DaGlsZHJlbiIsIlN0cmluZyIsIm1lbnVJdGVtIiwiYXR0cmlidXRlIiwiZXZlcnkiLCJ1bnNoaWZ0Iiwic2VsIiwiaW5uZXJJdGVtcyIsIndhcm5pbmdfZGVmYXVsdCIsImNoaWxkVmFsdWUiLCJpc011bHRpcGxlIiwidmFsaWRhdGVPcHRpb25WYWx1ZSIsIl9zdGF0ZTIiLCJpbm5lck5vZGUiLCJzaG93U2VsZWN0ZWRWYWx1ZSIsIm9wYWNpdHkiLCJfZ2V0T3B0aW9uSW5mb0J5U2luZ2wzIiwic2VsZWN0ZWRWYWx1ZU5vZGVzIiwibGltaXRlZENvdW50VmFsdWUiLCJtYXhUYWdQbGFjZWhvbGRlckVsIiwib21pdHRlZFZhbHVlcyIsImNvbnRlbnQiLCJjaG9pY2VDbGFzc05hbWUiLCJBbmltYXRlIiwib25MZWF2ZSIsImNvbXBvbmVudCIsInJlYWN0X2xpZmVjeWNsZXNfY29tcGF0X2VzIiwiZXNfU2VsZWN0IiwiT3B0R3JvdXBfT3B0R3JvdXAiLCJPcHRHcm91cCIsImVzX09wdEdyb3VwIiwicmNfc2VsZWN0X2VzIiwiTG9jYWxlUmVjZWl2ZXJfTG9jYWxlUmVjZWl2ZXIiLCJMb2NhbGVSZWNlaXZlciIsImNyZWF0ZUNsYXNzX2RlZmF1bHQiLCJkZWZhdWx0TG9jYWxlIiwiYW50TG9jYWxlIiwibG9jYWxlRnJvbUNvbnRleHQiLCJsb2NhbGVDb2RlIiwibG9jYWxlIiwiZXhpc3QiLCJnZXRMb2NhbGUiLCJnZXRMb2NhbGVDb2RlIiwibG9jYWxlX3Byb3ZpZGVyX0xvY2FsZVJlY2VpdmVyIiwicHJvcF90eXBlcyIsInRpbWVfcGlja2VyX2xvY2FsZV9lbl9VUyIsImxvY2FsZV9lbl9VU19sb2NhbGUiLCJsYW5nIiwicmFuZ2VQbGFjZWhvbGRlciIsImxvY2FsZV9lbl9VUyIsInRpbWVQaWNrZXJMb2NhbGUiLCJsb2NhbGVfcHJvdmlkZXJfZGVmYXVsdCIsIlBhZ2luYXRpb24iLCJpdGVtc19wZXJfcGFnZSIsImp1bXBfdG8iLCJqdW1wX3RvX2NvbmZpcm0iLCJwYWdlIiwicHJldl9wYWdlIiwibmV4dF9wYWdlIiwicHJldl81IiwibmV4dF81IiwicHJldl8zIiwibmV4dF8zIiwiRGF0ZVBpY2tlciIsIlRpbWVQaWNrZXIiLCJDYWxlbmRhciIsIlRhYmxlIiwiZmlsdGVyVGl0bGUiLCJmaWx0ZXJDb25maXJtIiwiZmlsdGVyUmVzZXQiLCJlbXB0eVRleHQiLCJzZWxlY3RBbGwiLCJzZWxlY3RJbnZlcnQiLCJNb2RhbCIsIm9rVGV4dCIsImNhbmNlbFRleHQiLCJqdXN0T2tUZXh0IiwiUG9wY29uZmlybSIsIlRyYW5zZmVyIiwidGl0bGVzIiwic2VhcmNoUGxhY2Vob2xkZXIiLCJpdGVtVW5pdCIsIml0ZW1zVW5pdCIsIlVwbG9hZCIsInVwbG9hZGluZyIsInJlbW92ZUZpbGUiLCJ1cGxvYWRFcnJvciIsInByZXZpZXdGaWxlIiwiX19yZXN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic2VsZWN0X1NlbGVjdFByb3BUeXBlcyIsInNlbGVjdF9TZWxlY3QiLCJzYXZlU2VsZWN0IiwicmNTZWxlY3QiLCJyZW5kZXJTZWxlY3QiLCJfY2xhc3NOYW1lcyIsIl9hIiwiX2EkY2xhc3NOYW1lIiwicmVzdFByb3BzIiwiY2xzIiwiZGVmaW5lUHJvcGVydHlfZGVmYXVsdCIsIm1vZGVDb25maWciLCJpY29uIiwidGhlbWUiLCJnZXROb3RGb3VuZENvbnRlbnQiLCJTRUNSRVRfQ09NQk9CT1hfTU9ERV9ET19OT1RfVVNFIiwiYW5pbWF0ZSIsInNob3ciLCJkb25lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQiLCJjc3NfYW5pbWF0aW9uX2VzIiwic3RhcnQiLCJvZmZzZXRIZWlnaHQiLCJhY3RpdmUiLCJlbmQiLCJfdXRpbF9vcGVuQW5pbWF0aW9uIiwiZW50ZXIiLCJsZWF2ZSIsImFwcGVhciIsIlN1Yk1lbnVfU3ViTWVudSIsIlN1Yk1lbnUiLCJzdWJNZW51Iiwic2F2ZVN1Yk1lbnUiLCJyb290UHJlZml4Q2xzIiwiYW50ZE1lbnVUaGVtZSIsImlzU3ViTWVudSIsIm1lbnVfU3ViTWVudSIsInBsYWNlbWVudHNfYXV0b0FkanVzdE92ZXJmbG93IiwidGFyZ2V0T2Zmc2V0IiwicGxhY2VtZW50cyIsImxlZnRUb3AiLCJ0b3BSaWdodCIsInJpZ2h0VG9wIiwiYm90dG9tUmlnaHQiLCJyaWdodEJvdHRvbSIsImxlZnRCb3R0b20iLCJDb250ZW50X0NvbnRlbnQiLCJDb250ZW50IiwidHJpZ2dlciIsIm92ZXJsYXkiLCJlc19Db250ZW50IiwiVG9vbHRpcF9Ub29sdGlwIiwiVG9vbHRpcCIsImdldFBvcHVwRWxlbWVudCIsImFycm93Q29udGVudCIsInNhdmVUcmlnZ2VyIiwib3ZlcmxheUNsYXNzTmFtZSIsIm1vdXNlRW50ZXJEZWxheSIsIm1vdXNlTGVhdmVEZWxheSIsIm92ZXJsYXlTdHlsZSIsIm9uVmlzaWJsZUNoYW5nZSIsImFmdGVyVmlzaWJsZUNoYW5nZSIsInBsYWNlbWVudCIsImFsaWduIiwiZGVzdHJveVRvb2x0aXBPbkhpZGUiLCJkZWZhdWx0VmlzaWJsZSIsImdldFRvb2x0aXBDb250YWluZXIiLCJleHRyYVByb3BzIiwiYWN0aW9uIiwiYWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2UiLCJwb3B1cEFuaW1hdGlvbiIsImRlZmF1bHRQb3B1cFZpc2libGUiLCJkZXN0cm95UG9wdXBPbkhpZGUiLCJyY190b29sdGlwX2VzIiwiYXV0b0FkanVzdE92ZXJmbG93RW5hYmxlZCIsImF1dG9BZGp1c3RPdmVyZmxvd0Rpc2FibGVkIiwicGxhY2VtZW50c190YXJnZXRPZmZzZXQiLCJnZXRPdmVyZmxvd09wdGlvbnMiLCJhdXRvQWRqdXN0T3ZlcmZsb3ciLCJ0b29sdGlwX1Rvb2x0aXAiLCJpc05vVGl0bGUiLCJvblBvcHVwQWxpZ24iLCJkb21Ob2RlIiwiZ2V0UGxhY2VtZW50cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRyYW5zZm9ybU9yaWdpbiIsInNhdmVUb29sdGlwIiwidG9vbHRpcCIsImFycm93UG9pbnRBdENlbnRlciIsImNvbmZpZyIsIl9jb25maWckYXJyb3dXaWR0aCIsImFycm93V2lkdGgiLCJfY29uZmlnJGhvcml6b250YWxBcnIiLCJob3Jpem9udGFsQXJyb3dTaGlmdCIsIl9jb25maWckdmVydGljYWxBcnJvdyIsInZlcnRpY2FsQXJyb3dTaGlmdCIsIl9jb25maWckYXV0b0FkanVzdE92ZSIsInBsYWNlbWVudE1hcCIsInBsYWNlbWVudHNfZ2V0UGxhY2VtZW50cyIsImVsZW1lbnQiLCJfX0FOVF9CVVRUT04iLCJpc0hvdmVyVHJpZ2dlciIsIl9zcGxpdE9iamVjdCIsInBpY2tlZCIsIm9taXR0ZWQiLCJ0b29sdGlwX3NwbGl0T2JqZWN0Iiwic3BhblN0eWxlIiwiY3Vyc29yIiwiYnV0dG9uU3R5bGUiLCJwb2ludGVyRXZlbnRzIiwib3BlbkNsYXNzTmFtZSIsImdldERpc2FibGVkQ29tcGF0aWJsZUNoaWxkcmVuIiwiY2hpbGRQcm9wcyIsImNoaWxkQ2xzIiwiTWVudUl0ZW1fTWVudUl0ZW0iLCJNZW51SXRlbSIsInNhdmVNZW51SXRlbSIsImlubGluZUNvbGxhcHNlZCIsImxldmVsIiwiaXNNZW51SXRlbSIsIm1lbnVfTWVudUl0ZW0iLCJtZW51X01lbnUiLCJNZW51IiwiaW5saW5lT3BlbktleXMiLCJoYW5kbGVDbGljayIsImhhbmRsZU9wZW5DaGFuZ2UiLCJvcGVuS2V5cyIsInNldE9wZW5LZXlzIiwib25PcGVuQ2hhbmdlIiwid2FybmluZyIsImRlZmF1bHRPcGVuS2V5cyIsImdldElubGluZUNvbGxhcHNlZCIsIm5leHRDb250ZXh0Iiwic3dpdGNoTW9kZUZyb21JbmxpbmUiLCJzaWRlckNvbGxhcHNlZCIsIm1lbnVOb2RlIiwicXVlcnlTZWxlY3RvckFsbCIsIm1lbnVNb2RlIiwib3BlbkFuaW1hdGlvbiIsIm9wZW5UcmFuc2l0aW9uTmFtZSIsIm1lbnVPcGVuQW5pbWF0aW9uIiwiZ2V0UmVhbE1lbnVNb2RlIiwiZ2V0TWVudU9wZW5BbmltYXRpb24iLCJtZW51Q2xhc3NOYW1lIiwiY29sbGFwc2VkV2lkdGgiLCJEaXZpZGVyIiwiSXRlbSIsIkl0ZW1Hcm91cCIsImZvY3VzYWJsZSIsImdlbmVyYXRvciIsIkJhc2ljQ29tcG9uZW50IiwiQWRhcHRlciIsImxheW91dF9CYXNpYyIsIl9SZWFjdCRDb21wb25lbnQyIiwiQmFzaWMiLCJvdGhlcnMiLCJkaXZDbHMiLCJsYXlvdXRfQmFzaWNMYXlvdXQiLCJfUmVhY3QkQ29tcG9uZW50MyIsIkJhc2ljTGF5b3V0IiwiX3RoaXMzIiwic2lkZXJzIiwiX3RoaXM0Iiwic2lkZXJIb29rIiwiYWRkU2lkZXIiLCJ0b0NvbnN1bWFibGVBcnJheV9kZWZhdWx0IiwicmVtb3ZlU2lkZXIiLCJjdXJyZW50SWQiLCJoYXNTaWRlciIsIkxheW91dCIsIkhlYWRlciIsIkZvb3RlciIsImxheW91dCIsIl91dGlsX2lzTnVtZXJpYyIsImlzTmFOIiwiaXNGaW5pdGUiLCJTaWRlcl9yZXN0IiwibWF0Y2hNZWRpYSIsIm1lZGlhUXVlcnkiLCJtZWRpYSIsIm1hdGNoZXMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiZGltZW5zaW9uTWFwIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsInh4bCIsImdlbmVyYXRlSWQiLCJTaWRlcl9TaWRlciIsIlNpZGVyIiwicmVzcG9uc2l2ZUhhbmRsZXIiLCJtcWwiLCJiZWxvdyIsIm9uQnJlYWtwb2ludCIsImNvbGxhcHNlZCIsInNldENvbGxhcHNlZCIsIm9uQ29sbGFwc2UiLCJ0b2dnbGUiLCJiZWxvd1Nob3dDaGFuZ2UiLCJiZWxvd1Nob3ciLCJ1bmlxdWVJZCIsImJyZWFrcG9pbnQiLCJkZWZhdWx0Q29sbGFwc2VkIiwiY29sbGFwc2libGUiLCJyZXZlcnNlQXJyb3ciLCJkaXZQcm9wcyIsInJhd1dpZHRoIiwic2lkZXJXaWR0aCIsInplcm9XaWR0aFRyaWdnZXIiLCJkZWZhdWx0VHJpZ2dlciIsImV4cGFuZGVkIiwidHJpZ2dlckRvbSIsImRpdlN0eWxlIiwiZmxleCIsIm1heFdpZHRoIiwibWluV2lkdGgiLCJzaWRlckNscyIsIl9fQU5UX0xBWU9VVF9TSURFUiIsImxheW91dF9TaWRlciIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJlc19nZW5lcmF0ZVBhdGgiLCJwYXR0ZXJuIiwicGFyYW1zIiwiY2FjaGVLZXkiLCJjYWNoZSIsImNvbXBpbGVkR2VuZXJhdG9yIiwicGF0aF90b19yZWdleHBfZGVmYXVsdCIsImNvbXBpbGUiLCJnZW5lcmF0ZVBhdGhfY29tcGlsZUdlbmVyYXRvciIsInByZXR0eSIsIlJlZGlyZWN0X1JlZGlyZWN0IiwiUmVkaXJlY3QiLCJpc1N0YXRpYyIsInJvdXRlciIsInN0YXRpY0NvbnRleHQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJicm93c2VyX2RlZmF1bHQiLCJwZXJmb3JtIiwicHJldlRvIiwidG8iLCJuZXh0VG8iLCJwYXRobmFtZSIsInNlYXJjaCIsImNvbXB1dGVUbyIsImNvbXB1dGVkTWF0Y2giLCJoaXN0b3J5IiwicmVwbGFjZSIsImZyb20iLCJlc19SZWRpcmVjdCIsImdldEtleUZyb21DaGlsZHJlbkluZGV4IiwibWVudUV2ZW50S2V5IiwicHJlZml4IiwiZ2V0TWVudUlkRnJvbVN1Yk1lbnVFdmVudEtleSIsImV2ZW50S2V5IiwibG9vcE1lbnVJdGVtIiwiYzIiLCJtZW51QWxsUHJvcHMiLCJnZXRXaWR0aCIsImVsZW0iLCJlc19wbGFjZW1lbnRzIiwiZ3VpZCIsInBvcHVwUGxhY2VtZW50TWFwIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwidmVydGljYWwtbGVmdCIsInZlcnRpY2FsLXJpZ2h0IiwiU3ViTWVudV91cGRhdGVEZWZhdWx0QWN0aXZlRmlyc3QiLCJfZXh0ZW5kczIiLCJtZW51SWQiLCJTdWJNZW51X2luaXRpYWxpc2VQcm9wcyIsImlzUm9vdE1lbnUiLCJwYXJlbnRNZW51IiwibWFudWFsUmVmIiwiaXNPcGVuIiwibWluV2lkdGhUaW1lb3V0IiwiYWRqdXN0V2lkdGgiLCJvbkRlc3Ryb3kiLCJtb3VzZWVudGVyVGltZW91dCIsInJlbmRlckNoaWxkcmVuIiwiYmFzZVByb3BzIiwiaW5saW5lSW5kZW50Iiwib25TdWJNZW51Q2xpY2siLCJzdWJNZW51T3BlbkRlbGF5Iiwic3ViTWVudUNsb3NlRGVsYXkiLCJmb3JjZVN1Yk1lbnVSZW5kZXIiLCJ0cmlnZ2VyU3ViTWVudUFjdGlvbiIsIl9tZW51SWQiLCJzYXZlTWVudUluc3RhbmNlIiwiZXhwYW5kSWNvbiIsImhhdmVSZW5kZXJlZCIsImhhdmVPcGVuZWQiLCJ0cmFuc2l0aW9uQXBwZWFyIiwiYW5pbVByb3BzIiwic2hvd1Byb3AiLCJlc19TdWJQb3B1cE1lbnUiLCJnZXRQcmVmaXhDbHMiLCJpc0lubGluZU1vZGUiLCJnZXRPcGVuQ2xhc3NOYW1lIiwiZ2V0QWN0aXZlQ2xhc3NOYW1lIiwiZ2V0RGlzYWJsZWRDbGFzc05hbWUiLCJnZXRTZWxlY3RlZENsYXNzTmFtZSIsImlzQ2hpbGRyZW5TZWxlY3RlZCIsIm1vdXNlRXZlbnRzIiwidGl0bGVDbGlja0V2ZW50cyIsInRpdGxlTW91c2VFdmVudHMiLCJvblRpdGxlQ2xpY2siLCJvblRpdGxlTW91c2VFbnRlciIsIm9uVGl0bGVNb3VzZUxlYXZlIiwicGFkZGluZ0xlZnQiLCJhcmlhT3ducyIsImFyaWEtb3ducyIsInNhdmVTdWJNZW51VGl0bGUiLCJ0cmlnZ2VyTm9kZSIsInBvcHVwT2Zmc2V0IiwiekluZGV4IiwiYXJyYXkiLCJvbkl0ZW1Ib3ZlciIsIm9uZU9mIiwibWVudUluc3RhbmNlIiwiUklHSFQiLCJ0cmlnZ2VyT3BlbkNoYW5nZSIsIkxFRlQiLCJoYW5kbGVkIiwiVVAiLCJfcHJvcHM0IiwiX3Byb3BzNSIsInN1Yk1lbnVJbnN0YW5jZSIsIl9wcm9wczYiLCJob3ZlciIsIl9wcm9wczciLCJhZGRLZXlQYXRoIiwia2V5UGF0aCIsIm9wZW5DaGFuZ2UiLCJmaW5kIiwibG9vcE1lbnVJdGVtUmVjdXJzaXZlbHkiLCJjb25zdHJ1Y3QiLCJzdWJNZW51VGl0bGUiLCJwb3B1cE1lbnUiLCJjb25uZWN0ZWQiLCJsaWIiLCJzdWJNZW51S2V5IiwiZXNfU3ViTWVudSIsIkRPTVdyYXBfRE9NV3JhcCIsIkRPTVdyYXAiLCJsYXN0VmlzaWJsZUluZGV4IiwiZ2V0T3ZlcmZsb3dlZFN1Yk1lbnVJdGVtIiwia2V5UHJlZml4Iiwib3ZlcmZsb3dlZEl0ZW1zIiwicmVuZGVyUGxhY2Vob2xkZXIiLCJvdmVyZmxvd2VkSW5kaWNhdG9yIiwicHJvcFN0eWxlIiwiX2NvcHkkcHJvcHMiLCJyZXN0IiwidmlzaWJpbGl0eSIsInNldENoaWxkcmVuV2lkdGhBbmRSZXNpemUiLCJ1bCIsInVsQ2hpbGRyZW5Ob2RlcyIsImNoaWxkcmVuU2l6ZXMiLCJsYXN0T3ZlcmZsb3dlZEluZGljYXRvclBsYWNlaG9sZGVyIiwib3ZlcmZsb3dlZEluZGljYXRvcldpZHRoIiwib3JpZ2luYWxUb3RhbFdpZHRoIiwiYWNjIiwiY3VyIiwiaGFuZGxlUmVzaXplIiwicmVzaXplT2JzZXJ2ZXIiLCJtdXRhdGlvbk9ic2VydmVyIiwiY3VycmVudFN1bVdpZHRoIiwibGlXaWR0aCIsIm1lbnVVbCIsIlJlc2l6ZU9ic2VydmVyX2VzIiwiZWwiLCJzdWJUcmVlIiwiY2hpbGROb2RlIiwib3ZlcmZsb3dlZCIsImhpZGRlbkNsYXNzTmFtZSIsIlRhZyIsInRhZyIsImVzX0RPTVdyYXAiLCJ1cGRhdGVBY3RpdmVLZXkiLCJnZXRFdmVudEtleSIsImdldEFjdGl2ZUtleSIsIm9yaWdpbmFsQWN0aXZlS2V5IiwiU3ViUG9wdXBNZW51X1N1YlBvcHVwTWVudSIsIlN1YlBvcHVwTWVudSIsIl9leHRlbmRzMyIsIlN1YlBvcHVwTWVudV9pbml0aWFsaXNlUHJvcHMiLCJpbnN0YW5jZUFycmF5IiwiZG9tUHJvcHMiLCJyZW5kZXJNZW51SXRlbSIsImRlZmF1bHRTZWxlY3RlZEtleXMiLCJnZXRGbGF0SW5zdGFuY2VBcnJheSIsImFjdGl2ZUl0ZW0iLCJzdGVwIiwic2VsZWN0SW5mbyIsImdldE9wZW5UcmFuc2l0aW9uTmFtZSIsImRpcmVjdGlvbiIsInJldmVyc2UiLCJhY3RpdmVJbmRleCIsImNpIiwiYWxsRGlzYWJsZWQiLCJyZW5kZXJDb21tb25NZW51SXRlbSIsIm5ld0NoaWxkUHJvcHMiLCJNZW51X01lbnUiLCJNZW51X2luaXRpYWxpc2VQcm9wcyIsIjAtbWVudS0iLCJ1cGRhdGVNaW5pU3RvcmUiLCJpbm5lck1lbnUiLCJzZWxlY3RhYmxlIiwiZ2V0V3JhcHBlZEluc3RhbmNlIiwiY2hhbmdlZCIsInByb2Nlc3NTaW5nbGUiLCJvbmVDaGFuZ2VkIiwiYW5pbWF0aW9uTmFtZSIsImVzX01lbnUiLCJfdGhpcyRwcm9wczIiLCJfdGhpcyRwcm9wczMiLCJpc1NlbGVjdGVkIiwiY2FsbFJlZiIsImRvbV9zY3JvbGxfaW50b192aWV3X2xpYl9kZWZhdWx0IiwiYXR0cnMiLCJhcmlhLWRpc2FibGVkIiwiYXJpYS1zZWxlY3RlZCIsIm1vdXNlRXZlbnQiLCJlc19NZW51SXRlbSIsIk1lbnVJdGVtR3JvdXBfTWVudUl0ZW1Hcm91cCIsIk1lbnVJdGVtR3JvdXAiLCJyZW5kZXJJbm5lck1lbnVJdGVtIiwiX3Byb3BzJGNsYXNzTmFtZSIsInRpdGxlQ2xhc3NOYW1lIiwibGlzdENsYXNzTmFtZSIsImVzX01lbnVJdGVtR3JvdXAiLCJEaXZpZGVyX0RpdmlkZXIiLCJlc19EaXZpZGVyIiwiY29ubmVjdCIsIl9Qcm92aWRlcjMiLCJfY29ubmVjdDMiLCJfY3JlYXRlMyIsIk1BQ19FTlRFUiIsIlRBQiIsIk5VTV9DRU5URVIiLCJTSElGVCIsIkNUUkwiLCJBTFQiLCJQQVVTRSIsIkNBUFNfTE9DSyIsIlNQQUNFIiwiUEFHRV9VUCIsIlBBR0VfRE9XTiIsIkVORCIsIkhPTUUiLCJQUklOVF9TQ1JFRU4iLCJJTlNFUlQiLCJERUxFVEUiLCJaRVJPIiwiT05FIiwiVFdPIiwiVEhSRUUiLCJGT1VSIiwiRklWRSIsIlNJWCIsIlNFVkVOIiwiRUlHSFQiLCJOSU5FIiwiUVVFU1RJT05fTUFSSyIsIkwiLCJNIiwiTyIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiTUVUQSIsIldJTl9LRVlfUklHSFQiLCJDT05URVhUX01FTlUiLCJOVU1fWkVSTyIsIk5VTV9PTkUiLCJOVU1fVFdPIiwiTlVNX1RIUkVFIiwiTlVNX0ZPVVIiLCJOVU1fRklWRSIsIk5VTV9TSVgiLCJOVU1fU0VWRU4iLCJOVU1fRUlHSFQiLCJOVU1fTklORSIsIk5VTV9NVUxUSVBMWSIsIk5VTV9QTFVTIiwiTlVNX01JTlVTIiwiTlVNX1BFUklPRCIsIk5VTV9ESVZJU0lPTiIsIkYxIiwiRjIiLCJGMyIsIkY0IiwiRjUiLCJGNiIsIkY3IiwiRjgiLCJGOSIsIkYxMCIsIkYxMSIsIkYxMiIsIk5VTUxPQ0siLCJTRU1JQ09MT04iLCJEQVNIIiwiRVFVQUxTIiwiQ09NTUEiLCJQRVJJT0QiLCJTTEFTSCIsIkFQT1NUUk9QSEUiLCJTSU5HTEVfUVVPVEUiLCJPUEVOX1NRVUFSRV9CUkFDS0VUIiwiQkFDS1NMQVNIIiwiQ0xPU0VfU1FVQVJFX0JSQUNLRVQiLCJXSU5fS0VZIiwiTUFDX0ZGX01FVEEiLCJXSU5fSU1FIiwiaXNUZXh0TW9kaWZ5aW5nS2V5RXZlbnQiLCJhbHRLZXkiLCJpc0NoYXJhY3RlcktleSIsIm5hdmlnYXRpb24iLCJ1c2VyQWdlbnQiLCJpc1BvaW50c0VxIiwiYTEiLCJhMiIsImlzQWxpZ25Qb2ludCIsInZlbmRvclByZWZpeCIsImpzQ3NzTWFwIiwiV2Via2l0IiwiTW96IiwibXMiLCJnZXRWZW5kb3JQcmVmaXgiLCJnZXRUcmFuc2l0aW9uTmFtZSIsImdldFRyYW5zZm9ybU5hbWUiLCJzZXRUcmFuc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJzZXRUcmFuc2Zvcm0iLCJtYXRyaXgyZCIsIm1hdHJpeDNkIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZ2V0Q29tcHV0ZWRTdHlsZVgiLCJmb3JjZVJlbGF5b3V0Iiwib3JpZ2luYWxTdHlsZSIsImNzcyIsImdldFNjcm9sbCIsImdldFNjcm9sbExlZnQiLCJnZXRTY3JvbGxUb3AiLCJnZXRPZmZzZXQiLCJwb3MiLCJib3giLCJkb2NFbGVtIiwiZ2V0Q2xpZW50UG9zaXRpb24iLCJwYXJlbnRXaW5kb3ciLCJpc1dpbmRvdyIsImdldERvY3VtZW50IiwiX1JFX05VTV9OT19QWCIsIlJFX1BPUyIsIkNVUlJFTlRfU1RZTEUiLCJSVU5USU1FX1NUWUxFIiwiUFgiLCJnZXRPZmZzZXREaXJlY3Rpb24iLCJkaXIiLCJ1c2VDc3NSaWdodCIsInVzZUNzc0JvdHRvbSIsIm9wcG9zaXRlT2Zmc2V0RGlyZWN0aW9uIiwic2V0TGVmdFRvcCIsInByZXNldEgiLCJwcmVzZXRWIiwiaG9yaXpvbnRhbFByb3BlcnR5IiwidmVydGljYWxQcm9wZXJ0eSIsIm9wcG9zaXRlSG9yaXpvbnRhbFByb3BlcnR5Iiwib3Bwb3NpdGVWZXJ0aWNhbFByb3BlcnR5Iiwib3JpZ2luYWxUcmFuc2l0aW9uIiwib3JpZ2luYWxPZmZzZXQiLCJnZXRUcmFuc2l0aW9uUHJvcGVydHkiLCJvbGQiLCJwcmVzZXQiLCJvZmYiLCJfZGlyIiwiX29mZiIsInV0aWxzX3NldFRyYW5zZm9ybSIsIm9yaWdpbmFsWFkiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibWF0cml4IiwiZ2V0VHJhbnNmb3JtWFkiLCJyZXN1bHRYWSIsInh5IiwibWF0Y2gyZCIsInNldFRyYW5zZm9ybVhZIiwiZWFjaCIsImZuIiwiaXNCb3JkZXJCb3hGbiIsImNzIiwiY29tcHV0ZWRTdHlsZSIsInRlc3QiLCJyc0xlZnQiLCJwaXhlbExlZnQiLCJCT1hfTU9ERUxTIiwiQ09OVEVOVF9JTkRFWCIsIlBBRERJTkdfSU5ERVgiLCJCT1JERVJfSU5ERVgiLCJnZXRQQk1XaWR0aCIsImNzc1Byb3AiLCJkb21VdGlscyIsImdldFdIIiwiZXgiLCJleHRyYSIsInZpZXdwb3J0V2lkdGgiLCJ2aWV3cG9ydEhlaWdodCIsImRvY1dpZHRoIiwiZG9jSGVpZ2h0IiwiYm9yZGVyQm94VmFsdWUiLCJpc0JvcmRlckJveCIsImNzc0JveFZhbHVlIiwiTnVtYmVyIiwiYm9yZGVyQm94VmFsdWVPcklzQm9yZGVyQm94IiwicmVmV2luIiwibWF4Iiwid2luIiwiZG9jdW1lbnRFbGVtZW50UHJvcCIsImNvbXBhdE1vZGUiLCJjc3NTaG93IiwiZ2V0V0hJZ25vcmVEaXNwbGF5Iiwic3dhcCIsIm1peCIsImZpcnN0IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJpbmNsdWRlTWFyZ2luIiwidXRpbHMiLCJnZXRXaW5kb3ciLCJpZ25vcmVTaGFrZSIsIm9yaU9mZnNldCIsIm9MZWZ0IiwidG9GaXhlZCIsIm9Ub3AiLCJ0TGVmdCIsInRUb3AiLCJ1c2VDc3NUcmFuc2Zvcm0iLCJzZXRPZmZzZXQiLCJnZXRXaW5kb3dTY3JvbGxMZWZ0IiwiZ2V0V2luZG93U2Nyb2xsVG9wIiwibWVyZ2UiLCJfa2V5MyIsImVzX3V0aWxzIiwiZXNfZ2V0T2Zmc2V0UGFyZW50IiwicG9zaXRpb25TdHlsZSIsIm5vZGVOYW1lIiwiZXNfZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50IiwidmlzaWJsZVJlY3QiLCJJbmZpbml0eSIsIm5hdmlnYXRvciIsIm1pbiIsIm9yaWdpbmFsUG9zaXRpb24iLCJzY3JvbGxYIiwic2Nyb2xsWSIsImRvY3VtZW50V2lkdGgiLCJzY3JvbGxXaWR0aCIsImRvY3VtZW50SGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiaXNBbmNlc3RvckZpeGVkIiwibWF4VmlzaWJsZVdpZHRoIiwibWF4VmlzaWJsZUhlaWdodCIsImVzX2FkanVzdEZvclZpZXdwb3J0IiwiZWxGdXR1cmVQb3MiLCJlbFJlZ2lvbiIsInJlc2l6ZVdpZHRoIiwicmVzaXplSGVpZ2h0IiwiZXNfZ2V0UmVnaW9uIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiZXNfZ2V0QWxpZ25PZmZzZXQiLCJyZWdpb24iLCJlc19nZXRFbEZ1dHVyZVBvcyIsInJlZk5vZGVSZWdpb24iLCJwMSIsInAyIiwiZGlmZiIsImlzRmFpbFgiLCJpc0ZhaWxZIiwiZmxpcCIsImZsaXBPZmZzZXQiLCJjb252ZXJ0T2Zmc2V0Iiwic3RyIiwib2Zmc2V0TGVuIiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJub3JtYWxpemVPZmZzZXQiLCJhbGlnbl9hbGlnbiIsInRndFJlZ2lvbiIsImlzVGd0UmVnaW9uVmlzaWJsZSIsIm5ld092ZXJmbG93Q2ZnIiwiZmFpbCIsIm5ld0VsUmVnaW9uIiwibmV3UG9pbnRzIiwibmV3T2Zmc2V0IiwibmV3VGFyZ2V0T2Zmc2V0IiwiaXNDb21wbGV0ZUZhaWxYIiwiX25ld1BvaW50cyIsIl9uZXdPZmZzZXQiLCJfbmV3VGFyZ2V0T2Zmc2V0IiwiaXNDb21wbGV0ZUZhaWxZIiwiaXNTdGlsbEZhaWxYIiwiaXNTdGlsbEZhaWxZIiwiYWxpZ25FbGVtZW50IiwicmVmTm9kZSIsImlzVGFyZ2V0Tm90T3V0T2ZWaXNpYmxlIiwidGFyZ2V0UmVnaW9uIiwiaXNPdXRPZlZpc2libGVSZWN0IiwiX19nZXRPZmZzZXRQYXJlbnQiLCJfX2dldFZpc2libGVSZWN0Rm9yRWxlbWVudCIsImFsaWduX2FsaWduRWxlbWVudCIsImFsaWduX2FsaWduUG9pbnQiLCJ0Z3RQb2ludCIsInBvaW50SW5WaWV3IiwidXRpbF9pc1dpbmRvdyIsImdldEVsZW1lbnQiLCJnZXRQb2ludCIsInBvaW50IiwiQWxpZ25fQWxpZ24iLCJBbGlnbiIsImZvcmNlQWxpZ24iLCJvbkFsaWduIiwibW9uaXRvcldpbmRvd1Jlc2l6ZSIsInN0YXJ0TW9uaXRvcldpbmRvd1Jlc2l6ZSIsInJlQWxpZ24iLCJzb3VyY2VSZWN0IiwibGFzdEVsZW1lbnQiLCJjdXJyZW50RWxlbWVudCIsImxhc3RQb2ludCIsImN1cnJlbnRQb2ludCIsInByZXYiLCJuZXh0IiwiaXNTYW1lUG9pbnQiLCJwcmVSZWN0Iiwic3RvcE1vbml0b3JXaW5kb3dSZXNpemUiLCJyZXNpemVIYW5kbGVyIiwiYnVmZmVyTW9uaXRvciIsInRpbWVyIiwiYnVmZmVyRm4iLCJidWZmZXIiLCJtb25pdG9yQnVmZmVyVGltZSIsImNoaWxkcmVuUHJvcHMiLCJyY19hbGlnbl9lcyIsIkxhenlSZW5kZXJCb3hfTGF6eVJlbmRlckJveCIsIkxhenlSZW5kZXJCb3giLCJlc19MYXp5UmVuZGVyQm94IiwiUG9wdXBJbm5lcl9Qb3B1cElubmVyIiwiUG9wdXBJbm5lciIsIm9uVG91Y2hTdGFydCIsImVzX1BvcHVwSW5uZXIiLCJQb3B1cF9Qb3B1cCIsIlBvcHVwIiwiUG9wdXBfaW5pdGlhbGlzZVByb3BzIiwic3RyZXRjaENoZWNrZWQiLCJ0YXJnZXRXaWR0aCIsInRhcmdldEhlaWdodCIsInNhdmVQb3B1cFJlZiIsInNhdmVBbGlnblJlZiIsInJvb3ROb2RlIiwic2V0U3RyZXRjaFNpemUiLCJwb3B1cEluc3RhbmNlIiwiZ2V0TWFza1RyYW5zaXRpb25OYW1lIiwibWFza1RyYW5zaXRpb25OYW1lIiwibWFza0FuaW1hdGlvbiIsImdldENsYXNzTmFtZSIsImN1cnJlbnRBbGlnbkNsYXNzTmFtZSIsImdldENsYXNzTmFtZUZyb21BbGlnbiIsInN0cmV0Y2giLCJzaXplU3R5bGUiLCJtaW5IZWlnaHQiLCJhbGlnbkluc3RhbmNlIiwicG9wdXBJbm5lclByb3BzIiwiZ2V0WkluZGV4U3R5bGUiLCJleGNsdXNpdmUiLCJnZXRBbGlnblRhcmdldCIsInhWaXNpYmxlIiwiZ2V0TWFza0VsZW1lbnQiLCJtYXNrRWxlbWVudCIsIm1hc2siLCJtYXNrVHJhbnNpdGlvbiIsImdldFJvb3REb21Ob2RlIiwicG9wdXBEb21Ob2RlIiwiJGVsZSIsImdldFRhcmdldEVsZW1lbnQiLCJlc19Qb3B1cCIsIkFMTF9IQU5ETEVSUyIsIklTX1JFQUNUXzE2IiwicmNUcmlnZ2VyIiwib25Qb3B1cE1vdXNlRG93biIsImVzX1RyaWdnZXIiLCJUcmlnZ2VyIiwiZXNfaW5pdGlhbGlzZVByb3BzIiwicHJldlBvcHVwVmlzaWJsZSIsImdldENoaWxkQ29udGV4dCIsImZpcmVFdmVudHMiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiXyIsImN1cnJlbnREb2N1bWVudCIsImNsaWNrT3V0c2lkZUhhbmRsZXIiLCJpc0NsaWNrVG9IaWRlIiwiaXNDb250ZXh0TWVudVRvU2hvdyIsIm9uRG9jdW1lbnRDbGljayIsInRvdWNoT3V0c2lkZUhhbmRsZXIiLCJjb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMSIsIm9uQ29udGV4dE1lbnVDbG9zZSIsImNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIyIiwiY2xlYXJPdXRzaWRlSGFuZGxlciIsImNsZWFyRGVsYXlUaW1lciIsIm1vdXNlRG93blRpbWVvdXQiLCJnZXRQb3B1cEFsaWduIiwicGxhY2VtZW50U3RyIiwiYmFzZUFsaWduIiwiZ2V0QWxpZ25Gcm9tUGxhY2VtZW50Iiwic2V0UG9wdXBWaXNpYmxlIiwiYWxpZ25Qb2ludCIsInNldFBvaW50IiwiZGVsYXlTZXRQb3B1cFZpc2libGUiLCJkZWxheVMiLCJkZWxheVRpbWVyIiwiY3JlYXRlVHdvQ2hhaW5zIiwiY2hpbGRQcm9zIiwiaXNDbGlja1RvU2hvdyIsImlzTW91c2VFbnRlclRvU2hvdyIsImlzTW91c2VMZWF2ZVRvSGlkZSIsImlzRm9jdXNUb1Nob3ciLCJpc0JsdXJUb0hpZGUiLCJjaGlsZENhbGxiYWNrIiwiY2xvc2UiLCJfcHJvcHM4Iiwib25Db250ZXh0TWVudSIsIm9uTW91c2VNb3ZlIiwiY2hpbGRyZW5DbGFzc05hbWUiLCJwb3J0YWwiLCJoYW5kbGVQb3J0YWxVcGRhdGUiLCJnZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbiIsImZvY3VzRGVsYXkiLCJibHVyRGVsYXkiLCJtYXNrQ2xvc2FibGUiLCJfdGhpczUiLCJvblBvcHVwTW91c2VFbnRlciIsIm9uUG9wdXBNb3VzZUxlYXZlIiwiZm9jdXNUaW1lIiwicHJlQ2xpY2tUaW1lIiwicHJlVG91Y2hUaW1lIiwicHJlVGltZSIsIm5leHRWaXNpYmxlIiwiX2NvbnRleHQkcmNUcmlnZ2VyIiwiaGFzUG9wdXBNb3VzZURvd24iLCJfcHJvcHM5IiwiZ2V0QWxpZ25Qb3B1cENsYXNzTmFtZSIsIl9wcm9wczEwIiwibW91c2VQcm9wcyIsInNhdmVQb3B1cCIsInBvcHVwQ29udGFpbmVyIl0sIm1hcHBpbmdzIjoiMEZBRUFBLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBRSxnQkFBQUMsRUFFQSxJQUVBQyxFQUVBLFNBQUFDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUY3RUcsQ0FGaUJDLEVBQVEsSUFNekJULEVBQUFFLFdBQUFFLEVBQUFHLFFBQUFHLE9BQ0FDLFVBQUFQLEVBQUFHLFFBQUFLLEtBQUFDLFdBQ0FDLFNBQUFWLEVBQUFHLFFBQUFLLEtBQUFDLFdBQ0FFLFNBQUFYLEVBQUFHLFFBQUFLLEtBQUFDLCtDQ2hCQUosRUFBQU8sRUFBQUMsRUFBQSxzQkFBQUMsSUFBQSxJQUFBQyxFQUFBVixFQUFBLEtBQUFXLEVBQUFYLEVBQUFZLEVBQUFGLEdBQUFHLEVBQUFiLEVBQUEsR0FBQWMsRUFBQWQsRUFBQVksRUFBQUMsR0FHZSxTQUFBSixFQUFBTSxFQUFBQyxFQUFBQyxHQUVmLElBQUFDLEVBQWlCSixFQUFBSyxFQUFRQyx3QkFBQSxTQUFBQyxHQUNyQlAsRUFBQUssRUFBUUMsd0JBQUFILEVBQUFJLElBQ1RKLEVBQ0gsT0FBU04sSUFBbUJJLEVBQUFDLEVBQUFFLHNDQ1I1QmxCLEVBQUFPLEVBQUFDLEVBQUEsc0JBQUFjLElBQUEsSUFBQUMsRUFBQXZCLEVBQUEsR0FBQXdCLEVBQUF4QixFQUFBWSxFQUFBVyxHQUVlLFNBQUFELEVBQUFHLEdBQ2YsSUFBQUMsS0FJQSxPQUhFRixFQUFBTCxFQUFLUSxTQUFBQyxRQUFBSCxFQUFBLFNBQUFJLEdBQ1BILEVBQUFJLEtBQUFELEtBRUFILHFDQ0xBckMsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBR0EsSUFBQXVDLEVBQUEsV0FBZ0MsU0FBQUMsRUFBQWpCLEVBQUFrQixHQUEyQyxRQUFBQyxFQUFBLEVBQWdCQSxFQUFBRCxFQUFBRSxPQUFrQkQsSUFBQSxDQUFPLElBQUFFLEVBQUFILEVBQUFDLEdBQTJCRSxFQUFBQyxXQUFBRCxFQUFBQyxhQUFBLEVBQXdERCxFQUFBRSxjQUFBLEVBQWdDLFVBQUFGLE1BQUFHLFVBQUEsR0FBdURsRCxPQUFBQyxlQUFBeUIsRUFBQXFCLEVBQUFJLElBQUFKLElBQStELGdCQUFBSyxFQUFBQyxFQUFBQyxHQUEyTCxPQUFsSUQsR0FBQVYsRUFBQVMsRUFBQUcsVUFBQUYsR0FBcUVDLEdBQUFYLEVBQUFTLEVBQUFFLEdBQTZERixHQUF4aEIsR0FFQUksRUFBYTdDLEVBQVEsR0FJckI4QyxHQUVBLFNBQUFsRCxHQUFzQ0EsS0FBQUMsV0FKdENFLENBQUE4QyxHQUVpQjdDLEVBQVEsTUFVekIsSUFBQStDLEVBQUEsU0FBQUMsR0FHQSxTQUFBRCxJQUdBLE9BWkEsU0FBQUUsRUFBQVIsR0FBaUQsS0FBQVEsYUFBQVIsR0FBMEMsVUFBQVMsVUFBQSxxQ0FVM0ZDLENBQUFDLEtBQUFMLEdBUkEsU0FBQU0sRUFBQUMsR0FBaUQsSUFBQUQsRUFBYSxVQUFBRSxlQUFBLDZEQUF5RixPQUFBRCxHQUFBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUFBRCxFQUFBQyxFQVV2SkUsQ0FBQUosTUFBQUwsRUFBQVUsV0FBQXBFLE9BQUFxRSxlQUFBWCxJQUFBWSxNQUFBUCxLQUFBUSxZQWlCQSxPQXpCQSxTQUFBQyxFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBWixVQUFBLGtFQUFBWSxHQUF1R0QsRUFBQWpCLFVBQUF2RCxPQUFBMEUsT0FBQUQsS0FBQWxCLFdBQXlFb0IsYUFBZXhFLE1BQUFxRSxFQUFBeEIsWUFBQSxFQUFBRSxVQUFBLEVBQUFELGNBQUEsS0FBNkV3QixJQUFBekUsT0FBQTRFLGVBQUE1RSxPQUFBNEUsZUFBQUosRUFBQUMsR0FBQUQsRUFBQUosVUFBQUssR0FHclhJLENBQUFuQixFQXVCQ0YsRUFBQXNCLFdBZkRwQyxFQUFBZ0IsSUFDQVAsSUFBQSxrQkFDQWhELE1BQUEsV0FDQSxPQUNBNEUsVUFBQWhCLEtBQUFuQixNQUFBb0MsVUFJQTdCLElBQUEsU0FDQWhELE1BQUEsV0FDQSxPQUFBcUQsRUFBQWxCLFNBQUEyQyxLQUFBbEIsS0FBQW5CLE1BQUFSLGNBSUFzQixFQXZCQSxHQTBCQUEsRUFBQXdCLFdBQ0FGLE1BQUF2QixFQUFBckQsV0FBQVcsWUFFQTJDLEVBQUF5QixtQkFDQUosVUFBQXRCLEVBQUFyRCxXQUFBVyxZQUVBYixFQUFBTyxRQUFBaUQsb0NDcERBMUQsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBR0EsSUFBQWlGLEVBQUFwRixPQUFBcUYsUUFBQSxTQUFBM0QsR0FBbUQsUUFBQW1CLEVBQUEsRUFBZ0JBLEVBQUEwQixVQUFBekIsT0FBc0JELElBQUEsQ0FBTyxJQUFBeUMsRUFBQWYsVUFBQTFCLEdBQTJCLFFBQUFNLEtBQUFtQyxFQUEwQnRGLE9BQUF1RCxVQUFBZ0MsZUFBQXRCLEtBQUFxQixFQUFBbkMsS0FBeUR6QixFQUFBeUIsR0FBQW1DLEVBQUFuQyxJQUFpQyxPQUFBekIsR0FFL09nQixFQUFBLFdBQWdDLFNBQUFDLEVBQUFqQixFQUFBa0IsR0FBMkMsUUFBQUMsRUFBQSxFQUFnQkEsRUFBQUQsRUFBQUUsT0FBa0JELElBQUEsQ0FBTyxJQUFBRSxFQUFBSCxFQUFBQyxHQUEyQkUsRUFBQUMsV0FBQUQsRUFBQUMsYUFBQSxFQUF3REQsRUFBQUUsY0FBQSxFQUFnQyxVQUFBRixNQUFBRyxVQUFBLEdBQXVEbEQsT0FBQUMsZUFBQXlCLEVBQUFxQixFQUFBSSxJQUFBSixJQUErRCxnQkFBQUssRUFBQUMsRUFBQUMsR0FBMkwsT0FBbElELEdBQUFWLEVBQUFTLEVBQUFHLFVBQUFGLEdBQXFFQyxHQUFBWCxFQUFBUyxFQUFBRSxHQUE2REYsR0FBeGhCLEdBRUFsRCxFQUFBTyxRQXNDQSxTQUFBK0UsR0FDQSxJQUFBQyxJQUFBRCxFQUNBRSxFQUFBRixHQUFBRyxFQUVBLGdCQUFBQyxHQUNBLElBQUFDLEVBQUEsU0FBQWxDLEdBaUJBLFNBQUFrQyxFQUFBakQsRUFBQWtELElBeENBLFNBQUFsQyxFQUFBUixHQUFpRCxLQUFBUSxhQUFBUixHQUEwQyxVQUFBUyxVQUFBLHFDQXlDM0ZDLENBQUFDLEtBQUE4QixHQUVBLElBQUFFLEVBekNBLFNBQUEvQixFQUFBQyxHQUFpRCxJQUFBRCxFQUFhLFVBQUFFLGVBQUEsNkRBQXlGLE9BQUFELEdBQUEsaUJBQUFBLEdBQUEsbUJBQUFBLEVBQUFELEVBQUFDLEVBeUN2SkUsQ0FBQUosTUFBQThCLEVBQUF6QixXQUFBcEUsT0FBQXFFLGVBQUF3QixJQUFBNUIsS0FBQUYsS0FBQW5CLEVBQUFrRCxJQWtCQSxPQWhCQUMsRUFBQUMsYUFBQSxXQUNBLEdBQUFELEVBQUFFLFlBQUEsQ0FHQSxJQUFBQyxFQUFBUixFQUFBSyxFQUFBZixNQUFBL0QsV0FBQThFLEVBQUFuRCxRQUNBLEVBQUF1RCxFQUFBMUYsU0FBQXNGLEVBQUFLLE1BQUFDLFdBQUFILElBQ0FILEVBQUEvRSxVQUE0QnFGLFdBQUFILE1BSTVCSCxFQUFBZixNQUFBYyxFQUFBZixVQUNBZ0IsRUFBQUssT0FDQUMsV0FBQVgsRUFBQUssRUFBQWYsTUFBQS9ELFdBQUEyQixHQUNBb0MsTUFBQWUsRUFBQWYsTUFDQXBDLFNBRUFtRCxFQXVEQSxPQWhIQSxTQUFBdkIsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQVosVUFBQSxrRUFBQVksR0FBdUdELEVBQUFqQixVQUFBdkQsT0FBQTBFLE9BQUFELEtBQUFsQixXQUF5RW9CLGFBQWV4RSxNQUFBcUUsRUFBQXhCLFlBQUEsRUFBQUUsVUFBQSxFQUFBRCxjQUFBLEtBQTZFd0IsSUFBQXpFLE9BQUE0RSxlQUFBNUUsT0FBQTRFLGVBQUFKLEVBQUFDLEdBQUFELEVBQUFKLFVBQUFLLEdBb0JyWEksQ0FBQWdCLEVBQUFsQyxHQUVBakIsRUFBQW1ELEVBQUEsT0FDQTFDLElBQUEsMkJBQ0FoRCxNQUFBLFNBQUF5QyxFQUFBMEQsR0FFQSxPQUFBZCxHQUFBLElBQUFBLEVBQUExQyxRQUFBRixJQUFBMEQsRUFBQTFELE9BRUF5RCxXQUFBWCxFQUFBWSxFQUFBdEIsTUFBQS9ELFdBQUEyQixHQUNBQSxVQUdrQkEsYUE0QmxCRixFQUFBbUQsSUFDQTFDLElBQUEsb0JBQ0FoRCxNQUFBLFdBQ0E0RCxLQUFBd0Msa0JBR0FwRCxJQUFBLHVCQUNBaEQsTUFBQSxXQUNBNEQsS0FBQXlDLG9CQUdBckQsSUFBQSxlQUNBaEQsTUFBQSxXQUNBc0YsSUFDQTFCLEtBQUFrQyxZQUFBbEMsS0FBQWlCLE1BQUFuRSxVQUFBa0QsS0FBQWlDLGNBQ0FqQyxLQUFBaUMsbUJBSUE3QyxJQUFBLGlCQUNBaEQsTUFBQSxXQUNBNEQsS0FBQWtDLGNBQ0FsQyxLQUFBa0MsY0FDQWxDLEtBQUFrQyxZQUFBLFNBSUE5QyxJQUFBLHFCQUNBaEQsTUFBQSxXQUNBLE9BQUE0RCxLQUFBMEMsbUJBR0F0RCxJQUFBLFNBQ0FoRCxNQUFBLFdBQ0EsSUFBQXVHLEVBQUEzQyxLQUVBbkIsRUFBQXdDLEtBQWlDckIsS0FBQW5CLE1BQUFtQixLQUFBcUMsTUFBQUMsWUFDakNyQixNQUFBakIsS0FBQWlCLFFBV0EsT0F0R0EsU0FBQUYsR0FDQSxPQUFBQSxFQUFBdkIsVUFBQW9ELE9BNkZBQyxDQUFBaEIsS0FDQWhELEVBQUF3QyxLQUErQnhDLEdBQy9CaUUsSUFBQSxTQUFBckUsR0FDQSxPQUFBa0UsRUFBQUQsZ0JBQUFqRSxNQUtBc0UsRUFBQXJHLFFBQUFzRyxjQUFBbkIsRUFBQWhELE9BSUFpRCxFQTdGQSxDQThGS3JDLEVBQUFzQixXQVVMLE9BUkFlLEVBQUFtQixZQUFBLFdBakhBLFNBQUFwQixHQUNBLE9BQUFBLEVBQUFvQixhQUFBcEIsRUFBQXFCLE1BQUEsWUFnSEFDLENBQUF0QixHQUFBLElBQ0FDLEVBQUFzQixjQUNBcEMsVUFBQXRCLEVBQUFyRCxXQUFBVyxhQUlBLEVBQUFxRyxFQUFBQyxVQUFBeEIsSUFFQSxFQUFBeUIsRUFBQTdHLFNBQUFvRixFQUFBRCxLQWpKQSxJQUFBcEMsRUFBYTdDLEVBQVEsR0FFckJtRyxFQUFBcEcsRUFBQThDLEdBSUEyQyxFQUFBekYsRUFGb0JDLEVBQVEsTUFNNUIyRyxFQUFBNUcsRUFGNEJDLEVBQVEsS0FJcEN5RyxFQUE2QnpHLEVBQVEsSUFFckM4QyxFQUFpQjlDLEVBQVEsS0FFekIsU0FBQUQsRUFBQUgsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBZ0I3RSxJQUFBb0YsRUFBQSxXQUNBLDZCQzNDQTRCLEVBQUFySCxRQUFBLFNBQUFzSCxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUF0RixFQUFBcUYsSUFBQXpELEtBQUEwRCxFQUFBSCxFQUFBQyxRQUFBLEVBRUEsWUFBQXBGLEVBQ0EsUUFBQUEsRUFHQSxHQUFBbUYsSUFBQUMsRUFDQSxTQUdBLG9CQUFBRCxPQUFBLGlCQUFBQyxNQUNBLFNBR0EsSUFBQUcsRUFBQTVILE9BQUE2SCxLQUFBTCxHQUNBTSxFQUFBOUgsT0FBQTZILEtBQUFKLEdBRUEsR0FBQUcsRUFBQTlFLFNBQUFnRixFQUFBaEYsT0FDQSxTQU1BLElBSEEsSUFBQWlGLEVBQUEvSCxPQUFBdUQsVUFBQWdDLGVBQUF5QyxLQUFBUCxHQUdBUSxFQUFBLEVBQW1CQSxFQUFBTCxFQUFBOUUsT0FBb0JtRixJQUFBLENBQ3ZDLElBQUE5RSxFQUFBeUUsRUFBQUssR0FFQSxJQUFBRixFQUFBNUUsR0FDQSxTQUdBLElBQUErRSxFQUFBVixFQUFBckUsR0FDQWdGLEVBQUFWLEVBQUF0RSxHQUlBLFNBRkFkLEVBQUFxRixJQUFBekQsS0FBQTBELEVBQUFPLEVBQUFDLEVBQUFoRixRQUFBLFNBRUEsSUFBQWQsR0FBQTZGLElBQUFDLEVBQ0EsU0FJQSw0Q0MxQ0FuSSxPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFHQSxJQUFBaUYsRUFBQXBGLE9BQUFxRixRQUFBLFNBQUEzRCxHQUFtRCxRQUFBbUIsRUFBQSxFQUFnQkEsRUFBQTBCLFVBQUF6QixPQUFzQkQsSUFBQSxDQUFPLElBQUF5QyxFQUFBZixVQUFBMUIsR0FBMkIsUUFBQU0sS0FBQW1DLEVBQTBCdEYsT0FBQXVELFVBQUFnQyxlQUFBdEIsS0FBQXFCLEVBQUFuQyxLQUF5RHpCLEVBQUF5QixHQUFBbUMsRUFBQW5DLElBQWlDLE9BQUF6QixHQUUvT3hCLEVBQUFPLFFBQ0EsU0FBQTJILEdBQ0EsSUFBQWhDLEVBQUFnQyxFQUNBQyxLQXNCQSxPQUNBckgsU0FyQkEsU0FBQXNILEdBQ0FsQyxFQUFBaEIsS0FBdUJnQixFQUFBa0MsR0FDdkIsUUFBQXpGLEVBQUEsRUFBbUJBLEVBQUF3RixFQUFBdkYsT0FBc0JELElBQ3pDd0YsRUFBQXhGLE1BbUJBNUIsU0FmQSxXQUNBLE9BQUFtRixHQWVBdkYsVUFaQSxTQUFBMEgsR0FHQSxPQUZBRixFQUFBNUYsS0FBQThGLEdBRUEsV0FDQSxJQUFBQyxFQUFBSCxFQUFBSSxRQUFBRixHQUNBRixFQUFBSyxPQUFBRixFQUFBLHlDQ3JCZSxTQUFBRyxJQUNmLElBQUFDLEtBQUFDLE1BQUE1RSxLQUFBTSxVQUFBLEdBQ0EsV0FBQXFFLEVBQUE5RixPQUNBOEYsRUFBQSxHQUdBLFdBQ0EsUUFBQS9GLEVBQUEsRUFBbUJBLEVBQUErRixFQUFBOUYsT0FBaUJELElBQ3BDK0YsRUFBQS9GLElBQUErRixFQUFBL0YsR0FBQXlCLE9BQ0FzRSxFQUFBL0YsR0FBQXlCLE1BQUFQLEtBQUFRLFlBakJBNUQsRUFBQU8sRUFBQUMsRUFBQSxzQkFBQXdILHVDQ0FBLFNBQUFHLEdBT0EsSUFBQUMsRUFBQSxXQUNBLHVCQUFBQyxJQUNBLE9BQUFBLElBVUEsU0FBQUMsRUFBQUMsRUFBQS9GLEdBQ0EsSUFBQWdHLEdBQUEsRUFZQSxPQVZBRCxFQUFBRSxLQUFBLFNBQUFDLEVBQUFiLEdBQ0EsT0FBQWEsRUFBQSxLQUFBbEcsSUFDQWdHLEVBQUFYLEdBRUEsS0FNQVcsRUFHQSxrQkFDQSxTQUFBRyxJQUNBdkYsS0FBQXdGLGVBR0EsSUFBQUMsR0FBa0NDLE1BQVF4RyxjQUFBLElBaUYxQyxPQTVFQXVHLEVBQUFDLEtBQUFDLElBQUEsV0FDQSxPQUFBM0YsS0FBQXdGLFlBQUF6RyxRQU9Bd0csRUFBQS9GLFVBQUFtRyxJQUFBLFNBQUF2RyxHQUNBLElBQUFxRixFQUFBUyxFQUFBbEYsS0FBQXdGLFlBQUFwRyxHQUNBa0csRUFBQXRGLEtBQUF3RixZQUFBZixHQUVBLE9BQUFhLEtBQUEsSUFRQUMsRUFBQS9GLFVBQUFvRyxJQUFBLFNBQUF4RyxFQUFBaEQsR0FDQSxJQUFBcUksRUFBQVMsRUFBQWxGLEtBQUF3RixZQUFBcEcsSUFFQXFGLEVBQ0F6RSxLQUFBd0YsWUFBQWYsR0FBQSxHQUFBckksRUFFQTRELEtBQUF3RixZQUFBOUcsTUFBQVUsRUFBQWhELEtBUUFtSixFQUFBL0YsVUFBQXFHLE9BQUEsU0FBQXpHLEdBQ0EsSUFBQTBHLEVBQUE5RixLQUFBd0YsWUFDQWYsRUFBQVMsRUFBQVksRUFBQTFHLElBRUFxRixHQUNBcUIsRUFBQW5CLE9BQUFGLEVBQUEsSUFRQWMsRUFBQS9GLFVBQUF1RyxJQUFBLFNBQUEzRyxHQUNBLFNBQUE4RixFQUFBbEYsS0FBQXdGLFlBQUFwRyxJQU1BbUcsRUFBQS9GLFVBQUF3RyxNQUFBLFdBQ0FoRyxLQUFBd0YsWUFBQWIsT0FBQSxJQVFBWSxFQUFBL0YsVUFBQWhCLFFBQUEsU0FBQVYsRUFBQW1JLFFBRUEsSUFBQUEsTUFBQSxNQUVBLFFBQUFuSCxFQUFBLEVBQUFvSCxFQUhBbEcsS0FHQXdGLFlBQXNEMUcsRUFBQW9ILEVBQUFuSCxPQUFpQkQsR0FBQSxHQUN2RSxJQUFBd0csRUFBQVksRUFBQXBILEdBRUFoQixFQUFBb0MsS0FBQStGLEVBQUFYLEVBQUEsR0FBQUEsRUFBQSxNQUlBckosT0FBQTJDLGlCQUFBMkcsRUFBQS9GLFVBQUFpRyxHQUVBRixFQXRGQSxHQTVCQSxHQXlIQVksRUFBQSxvQkFBQUMsUUFBQSxvQkFBQUMsVUFBQUQsT0FBQUMsb0JBR0FDLE9BQ0EsSUFBQXZCLEtBQUF3QixZQUNBeEIsRUFHQSxvQkFBQTlFLFdBQUFzRyxZQUNBdEcsS0FHQSxvQkFBQW1HLGVBQUFHLFlBQ0FILE9BSUFJLFNBQUEsY0FBQUEsR0FTQUMsRUFDQSxtQkFBQUMsc0JBSUFBLHNCQUFBekMsS0FBQXFDLEdBR0EsU0FBQXhJLEdBQWdDLE9BQUE2SSxXQUFBLFdBQWdDLE9BQUE3SSxFQUFBOEksS0FBQUMsUUFBK0IsU0FJL0ZDLEVBQUEsRUFpRkFDLEdBQUEsZ0VBR0FDLEVBQUEsb0JBQUFDLGlCQUtBQyxFQUFBLFdBQ0FsSCxLQUFBbUgsWUFBQSxFQUNBbkgsS0FBQW9ILHNCQUFBLEVBQ0FwSCxLQUFBcUgsbUJBQUEsS0FDQXJILEtBQUFzSCxjQUVBdEgsS0FBQXVILGlCQUFBdkgsS0FBQXVILGlCQUFBdEQsS0FBQWpFLE1BQ0FBLEtBQUF3SCxRQXRGQSxTQUFBMUosRUFBQTJKLEdBQ0EsSUFBQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEVBQUEsRUFRQSxTQUFBQyxJQUNBSCxJQUNBQSxHQUFBLEVBRUE1SixLQUdBNkosR0FDQUcsSUFXQSxTQUFBQyxJQUNBdEIsRUFBQW9CLEdBUUEsU0FBQUMsSUFDQSxJQUFBRSxFQUFBcEIsS0FBQUMsTUFFQSxHQUFBYSxFQUFBLENBRUEsR0FBQU0sRUFBQUosRUFBQWQsRUFDQSxPQU9BYSxHQUFBLE9BRUFELEdBQUEsRUFDQUMsR0FBQSxFQUVBaEIsV0FBQW9CLEVBQUFOLEdBR0FHLEVBQUFJLEVBR0EsT0FBQUYsRUF1QkFHLENBQUFqSSxLQUFBd0gsUUFBQXZELEtBQUFqRSxNQW5CQSxLQWdEQWtILEVBQUExSCxVQUFBMEksWUFBQSxTQUFBQyxJQUNBbkksS0FBQXNILFdBQUE1QyxRQUFBeUQsSUFDQW5JLEtBQUFzSCxXQUFBNUksS0FBQXlKLEdBSUFuSSxLQUFBbUgsWUFDQW5ILEtBQUFvSSxZQVVBbEIsRUFBQTFILFVBQUE2SSxlQUFBLFNBQUFGLEdBQ0EsSUFBQUcsRUFBQXRJLEtBQUFzSCxXQUNBN0MsRUFBQTZELEVBQUE1RCxRQUFBeUQsSUFHQTFELEdBQ0E2RCxFQUFBM0QsT0FBQUYsRUFBQSxJQUlBNkQsRUFBQXZKLFFBQUFpQixLQUFBbUgsWUFDQW5ILEtBQUF1SSxlQVVBckIsRUFBQTFILFVBQUFnSSxRQUFBLFdBQ0F4SCxLQUFBd0ksb0JBS0F4SSxLQUFBd0gsV0FZQU4sRUFBQTFILFVBQUFnSixpQkFBQSxXQUVBLElBQUFDLEVBQUF6SSxLQUFBc0gsV0FBQW9CLE9BQUEsU0FBQVAsR0FDQSxPQUFBQSxFQUFBUSxlQUFBUixFQUFBUyxjQVVBLE9BRkFILEVBQUFqSyxRQUFBLFNBQUEySixHQUFpRCxPQUFBQSxFQUFBVSxvQkFFakRKLEVBQUExSixPQUFBLEdBU0FtSSxFQUFBMUgsVUFBQTRJLFNBQUEsV0FHQWpDLElBQUFuRyxLQUFBbUgsYUFPQWQsU0FBQXlDLGlCQUFBLGdCQUFBOUksS0FBQXVILGtCQUVBbkIsT0FBQTBDLGlCQUFBLFNBQUE5SSxLQUFBd0gsU0FFQVIsR0FDQWhILEtBQUFxSCxtQkFBQSxJQUFBSixpQkFBQWpILEtBQUF3SCxTQUVBeEgsS0FBQXFILG1CQUFBMEIsUUFBQTFDLFVBQ0EyQyxZQUFBLEVBQ0FDLFdBQUEsRUFDQUMsZUFBQSxFQUNBQyxTQUFBLE1BR0E5QyxTQUFBeUMsaUJBQUEscUJBQUE5SSxLQUFBd0gsU0FFQXhILEtBQUFvSCxzQkFBQSxHQUdBcEgsS0FBQW1ILFlBQUEsSUFTQUQsRUFBQTFILFVBQUErSSxZQUFBLFdBR0FwQyxHQUFBbkcsS0FBQW1ILGFBSUFkLFNBQUErQyxvQkFBQSxnQkFBQXBKLEtBQUF1SCxrQkFDQW5CLE9BQUFnRCxvQkFBQSxTQUFBcEosS0FBQXdILFNBRUF4SCxLQUFBcUgsb0JBQ0FySCxLQUFBcUgsbUJBQUFnQyxhQUdBckosS0FBQW9ILHNCQUNBZixTQUFBK0Msb0JBQUEscUJBQUFwSixLQUFBd0gsU0FHQXhILEtBQUFxSCxtQkFBQSxLQUNBckgsS0FBQW9ILHNCQUFBLEVBQ0FwSCxLQUFBbUgsWUFBQSxJQVVBRCxFQUFBMUgsVUFBQStILGlCQUFBLFNBQUF6RSxHQUNBLElBQUF3RyxFQUFBeEcsRUFBQXdHLGtCQUE0QyxJQUFBQSxNQUFBLElBRzVDdkMsRUFBQTFCLEtBQUEsU0FBQWpHLEdBQ0EsU0FBQWtLLEVBQUE1RSxRQUFBdEYsTUFJQVksS0FBQXdILFdBU0FOLEVBQUFxQyxZQUFBLFdBS0EsT0FKQXZKLEtBQUF3SixZQUNBeEosS0FBQXdKLFVBQUEsSUFBQXRDLEdBR0FsSCxLQUFBd0osV0FHQXRDLEVBQUFzQyxVQUFBLEtBU0EsSUFBQUMsRUFBQSxTQUFBOUwsRUFBQWtCLEdBQ0EsUUFBQUMsRUFBQSxFQUFBb0gsRUFBQWpLLE9BQUE2SCxLQUFBakYsR0FBOENDLEVBQUFvSCxFQUFBbkgsT0FBaUJELEdBQUEsR0FDL0QsSUFBQU0sRUFBQThHLEVBQUFwSCxHQUVBN0MsT0FBQUMsZUFBQXlCLEVBQUF5QixHQUNBaEQsTUFBQXlDLEVBQUFPLEdBQ0FILFlBQUEsRUFDQUUsVUFBQSxFQUNBRCxjQUFBLElBSUEsT0FBQXZCLEdBU0ErTCxFQUFBLFNBQUEvTCxHQVFBLE9BSkFBLEtBQUFnTSxlQUFBaE0sRUFBQWdNLGNBQUFDLGFBSUF0RCxHQUlBdUQsRUFBQUMsRUFBQSxTQVFBLFNBQUFDLEVBQUEzTixHQUNBLE9BQUE0TixXQUFBNU4sSUFBQSxFQVVBLFNBQUE2TixFQUFBQyxHQUVBLElBREEsSUFBQUMsS0FBQUMsRUFBQTVKLFVBQUF6QixPQUFBLEVBQ0FxTCxLQUFBLEdBQUFELEVBQUFDLEdBQUE1SixVQUFBNEosRUFBQSxHQUVBLE9BQUFELEVBQUFFLE9BQUEsU0FBQTNFLEVBQUE0RSxHQUdBLE9BQUE1RSxFQUFBcUUsRUFGQUcsRUFBQSxVQUFBSSxFQUFBLFlBR0ssR0EyQ0wsU0FBQUMsRUFBQTVNLEdBR0EsSUFBQTZNLEVBQUE3TSxFQUFBNk0sWUFDQUMsRUFBQTlNLEVBQUE4TSxhQVVBLElBQUFELElBQUFDLEVBQ0EsT0FBQVosRUFHQSxJQUFBSyxFQUFBUixFQUFBL0wsR0FBQStNLGlCQUFBL00sR0FDQWdOLEVBckRBLFNBQUFULEdBSUEsSUFIQSxJQUNBUyxLQUVBN0wsRUFBQSxFQUFBb0gsR0FIQSwrQkFHcUNwSCxFQUFBb0gsRUFBQW5ILE9BQWlCRCxHQUFBLEdBQ3RELElBQUF3TCxFQUFBcEUsRUFBQXBILEdBRUExQyxFQUFBOE4sRUFBQSxXQUFBSSxHQUVBSyxFQUFBTCxHQUFBUCxFQUFBM04sR0FHQSxPQUFBdU8sRUF5Q0FDLENBQUFWLEdBQ0FXLEVBQUFGLEVBQUFHLEtBQUFILEVBQUFJLE1BQ0FDLEVBQUFMLEVBQUFNLElBQUFOLEVBQUFPLE9BTUFDLEVBQUFwQixFQUFBRyxFQUFBaUIsT0FDQUMsRUFBQXJCLEVBQUFHLEVBQUFrQixRQXdCQSxHQXBCQSxlQUFBbEIsRUFBQW1CLFlBT0E5RSxLQUFBK0UsTUFBQUgsRUFBQU4sS0FBQUwsSUFDQVcsR0FBQWxCLEVBQUFDLEVBQUEsZ0JBQUFXLEdBR0F0RSxLQUFBK0UsTUFBQUYsRUFBQUosS0FBQVAsSUFDQVcsR0FBQW5CLEVBQUFDLEVBQUEsZ0JBQUFjLEtBMERBLFNBQUFyTixHQUNBLE9BQUFBLElBQUErTCxFQUFBL0wsR0FBQTBJLFNBQUFrRixnQkFuREFDLENBQUE3TixHQUFBLENBS0EsSUFBQThOLEVBQUFsRixLQUFBK0UsTUFBQUgsRUFBQU4sR0FBQUwsRUFDQWtCLEVBQUFuRixLQUFBK0UsTUFBQUYsRUFBQUosR0FBQVAsRUFPQSxJQUFBbEUsS0FBQW9GLElBQUFGLEtBQ0FOLEdBQUFNLEdBR0EsSUFBQWxGLEtBQUFvRixJQUFBRCxLQUNBTixHQUFBTSxHQUlBLE9BQUE1QixFQUFBYSxFQUFBRyxLQUFBSCxFQUFBTSxJQUFBRSxFQUFBQyxHQVNBLElBQUFRLEVBR0Esb0JBQUFDLG1CQUNBLFNBQUFsTyxHQUFrQyxPQUFBQSxhQUFBK0wsRUFBQS9MLEdBQUFrTyxvQkFNbEMsU0FBQWxPLEdBQThCLE9BQUFBLGFBQUErTCxFQUFBL0wsR0FBQW1PLFlBQUEsbUJBQUFuTyxFQUFBb08sU0FtQjlCLFNBQUFDLEVBQUFyTyxHQUNBLE9BQUF3SSxFQUlBeUYsRUFBQWpPLEdBaklBLFNBQUFBLEdBQ0EsSUFBQXNPLEVBQUF0TyxFQUFBb08sVUFFQSxPQUFBakMsRUFBQSxJQUFBbUMsRUFBQWQsTUFBQWMsRUFBQWIsUUErSEFjLENBQUF2TyxHQUdBNE0sRUFBQTVNLEdBUEFrTSxFQWlEQSxTQUFBQyxFQUFBcUMsRUFBQUMsRUFBQWpCLEVBQUFDLEdBQ0EsT0FBWWUsSUFBQUMsSUFBQWpCLFFBQUFDLFVBT1osSUFBQWlCLEVBQUEsU0FBQTFPLEdBQ0FxQyxLQUFBc00sZUFBQSxFQUNBdE0sS0FBQXVNLGdCQUFBLEVBQ0F2TSxLQUFBd00sYUFBQTFDLEVBQUEsU0FFQTlKLEtBQUFyQyxVQXVCQTBPLEVBQUE3TSxVQUFBaU4sU0FBQSxXQUNBLElBQUFDLEVBQUFWLEVBQUFoTSxLQUFBckMsUUFJQSxPQUZBcUMsS0FBQXdNLGFBQUFFLEVBRUFBLEVBQUF2QixRQUFBbkwsS0FBQXNNLGdCQUFBSSxFQUFBdEIsU0FBQXBMLEtBQUF1TSxpQkFTQUYsRUFBQTdNLFVBQUFtTixjQUFBLFdBQ0EsSUFBQUQsRUFBQTFNLEtBQUF3TSxhQUtBLE9BSEF4TSxLQUFBc00sZUFBQUksRUFBQXZCLE1BQ0FuTCxLQUFBdU0sZ0JBQUFHLEVBQUF0QixPQUVBc0IsR0FHQSxJQUFBRSxFQUFBLFNBQUFqUCxFQUFBa1AsR0FDQSxJQUFBQyxFQTVGQSxTQUFBaEssR0FDQSxJQUFBcUosRUFBQXJKLEVBQUFxSixFQUNBQyxFQUFBdEosRUFBQXNKLEVBQ0FqQixFQUFBckksRUFBQXFJLE1BQ0FDLEVBQUF0SSxFQUFBc0ksT0FHQTJCLEVBQUEsb0JBQUFDLGdDQUFBL1EsT0FDQXlRLEVBQUF6USxPQUFBMEUsT0FBQW9NLEVBQUF2TixXQVdBLE9BUkFpSyxFQUFBaUQsR0FDQVAsSUFBQUMsSUFBQWpCLFFBQUFDLFNBQ0FILElBQUFtQixFQUNBckIsTUFBQW9CLEVBQUFoQixFQUNBRCxPQUFBRSxFQUFBZ0IsRUFDQXRCLEtBQUFxQixJQUdBTyxFQXlFQU8sQ0FBQUosR0FRQXBELEVBQUF6SixNQUE4QnJDLFNBQUFtUCxpQkFHOUJJLEVBQUEsU0FBQXBQLEVBQUFxUCxFQUFBQyxHQUlBLEdBSEFwTixLQUFBcU4sdUJBQ0FyTixLQUFBc04sY0FBQSxJQUFBdEksRUFFQSxtQkFBQWxILEVBQ0EsVUFBQWdDLFVBQUEsMkRBR0FFLEtBQUF1TixVQUFBelAsRUFDQWtDLEtBQUF3TixZQUFBTCxFQUNBbk4sS0FBQXlOLGFBQUFMLEdBK0JBRixFQUFBMU4sVUFBQXVKLFFBQUEsU0FBQXBMLEdBQ0EsSUFBQTZDLFVBQUF6QixPQUNBLFVBQUFlLFVBQUEsNENBSUEsdUJBQUE0Tiw0QkFBQXpSLE9BQUEsQ0FJQSxLQUFBMEIsYUFBQStMLEVBQUEvTCxHQUFBK1AsU0FDQSxVQUFBNU4sVUFBQSx5Q0FHQSxJQUFBNk4sRUFBQTNOLEtBQUFzTixjQUdBSyxFQUFBNUgsSUFBQXBJLEtBSUFnUSxFQUFBL0gsSUFBQWpJLEVBQUEsSUFBQTBPLEVBQUExTyxJQUVBcUMsS0FBQXdOLFlBQUF0RixZQUFBbEksTUFHQUEsS0FBQXdOLFlBQUFoRyxhQVNBMEYsRUFBQTFOLFVBQUFvTyxVQUFBLFNBQUFqUSxHQUNBLElBQUE2QyxVQUFBekIsT0FDQSxVQUFBZSxVQUFBLDRDQUlBLHVCQUFBNE4sNEJBQUF6UixPQUFBLENBSUEsS0FBQTBCLGFBQUErTCxFQUFBL0wsR0FBQStQLFNBQ0EsVUFBQTVOLFVBQUEseUNBR0EsSUFBQTZOLEVBQUEzTixLQUFBc04sY0FHQUssRUFBQTVILElBQUFwSSxLQUlBZ1EsRUFBQTlILE9BQUFsSSxHQUVBZ1EsRUFBQWpJLE1BQ0ExRixLQUFBd04sWUFBQW5GLGVBQUFySSxTQVNBa04sRUFBQTFOLFVBQUE2SixXQUFBLFdBQ0FySixLQUFBNk4sY0FDQTdOLEtBQUFzTixjQUFBdEgsUUFDQWhHLEtBQUF3TixZQUFBbkYsZUFBQXJJLE9BU0FrTixFQUFBMU4sVUFBQW1KLGFBQUEsV0FDQSxJQUFBbUYsRUFBQTlOLEtBRUFBLEtBQUE2TixjQUVBN04sS0FBQXNOLGNBQUE5TyxRQUFBLFNBQUF1UCxHQUNBQSxFQUFBdEIsWUFDQXFCLEVBQUFULG9CQUFBM08sS0FBQXFQLE1BV0FiLEVBQUExTixVQUFBcUosZ0JBQUEsV0FFQSxHQUFBN0ksS0FBQTRJLFlBQUEsQ0FJQSxJQUFBM0MsRUFBQWpHLEtBQUF5TixhQUdBM0gsRUFBQTlGLEtBQUFxTixvQkFBQVcsSUFBQSxTQUFBRCxHQUNBLFdBQUFuQixFQUFBbUIsRUFBQXBRLE9BQUFvUSxFQUFBcEIsbUJBR0EzTSxLQUFBdU4sVUFBQXJOLEtBQUErRixFQUFBSCxFQUFBRyxHQUNBakcsS0FBQTZOLGdCQVFBWCxFQUFBMU4sVUFBQXFPLFlBQUEsV0FDQTdOLEtBQUFxTixvQkFBQTFJLE9BQUEsSUFRQXVJLEVBQUExTixVQUFBb0osVUFBQSxXQUNBLE9BQUE1SSxLQUFBcU4sb0JBQUF0TyxPQUFBLEdBTUEsSUFBQXVKLEVBQUEsb0JBQUEyRixRQUFBLElBQUFBLFFBQUEsSUFBQWpKLEVBTUFrSixFQUFBLFNBQUFwUSxHQUNBLEtBQUFrQyxnQkFBQWtPLEdBQ0EsVUFBQXBPLFVBQUEsc0NBRUEsSUFBQVUsVUFBQXpCLE9BQ0EsVUFBQWUsVUFBQSw0Q0FHQSxJQUFBcU4sRUFBQWpHLEVBQUFxQyxjQUNBcEIsRUFBQSxJQUFBK0UsRUFBQXBQLEVBQUFxUCxFQUFBbk4sTUFFQXNJLEVBQUExQyxJQUFBNUYsS0FBQW1JLEtBSUEsb0NBQUEzSixRQUFBLFNBQUEyUCxHQUNBRCxFQUFBMU8sVUFBQTJPLEdBQUEsV0FDQSxPQUFBckwsRUFBQXdGLEVBQUEzQyxJQUFBM0YsT0FBQW1PLEdBQUE1TixNQUFBdUMsRUFBQXRDLFdBQ0EsSUFBQXNDLEtBSUEsSUFBQTJCLE9BRUEsSUFBQTZCLEVBQUE0SCxlQUNBNUgsRUFBQTRILGVBR0FBLEVBR2U5USxFQUFBLHlEQy8vQkEsU0FBQWdSLEVBQUFDLEVBQUE3USxHQUVmLElBREEsSUFBQThRLEVBQUE5USxFQUNBOFEsR0FBQSxDQUNBLEdBQUFBLElBQUFELEVBQ0EsU0FFQUMsSUFBQUMsV0FHQSxTQVRBM1IsRUFBQU8sRUFBQUMsRUFBQSxzQkFBQWdSLHNDQ0VBblMsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsUUFRQSxTQUFBd0IsRUFBQUMsRUFBQUUsR0FDQSxTQUFBMFEsRUFBQXZRLEdBQ0EsSUFBQXdRLEVBQUEsSUFBQUMsRUFBQSxRQUFBelEsR0FDQUgsRUFBQW9DLEtBQUF2QyxFQUFBOFEsR0FHQSxHQUFBOVEsRUFBQW1MLGlCQUVBLE9BREFuTCxFQUFBbUwsaUJBQUFsTCxFQUFBNFEsR0FBQSxJQUVBRyxPQUFBLFdBQ0FoUixFQUFBeUwsb0JBQUF4TCxFQUFBNFEsR0FBQSxLQUdHLEdBQUE3USxFQUFBaVIsWUFFSCxPQURBalIsRUFBQWlSLFlBQUEsS0FBQWhSLEVBQUE0USxJQUVBRyxPQUFBLFdBQ0FoUixFQUFBa1IsWUFBQSxLQUFBalIsRUFBQTRRLE1BdkJBLElBRUFFLEVBRUEsU0FBQWxTLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUY3RUcsQ0FGbUJDLEVBQVEsTUE0QjNCNEcsRUFBQXJILFVBQUEsMENDakNBRixPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFHQSxJQUVBMFMsRUFBQW5TLEVBRnVCQyxFQUFRLE1BTS9CbVMsRUFBQXBTLEVBRm9CQyxFQUFRLEtBSTVCLFNBQUFELEVBQUFILEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQVE3RSxJQUFBd1MsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsZ0lBRUEsU0FBQUMsRUFBQUMsR0FDQSxjQUFBQSxRQUFBOVMsSUFBQThTLEVBR0EsSUFBQUMsSUFDQUMsSUFBQSxPQUNBelEsT0FBQSwyQ0FDQTBRLElBQUEsU0FBQUMsRUFBQUMsR0FDQU4sRUFBQUssRUFBQUUsU0FDQUYsRUFBQUUsTUFBQVAsRUFBQU0sRUFBQUUsVUFBQUYsRUFBQUcsUUFBQUgsRUFBQUUsZUFJQXJULElBQUFrVCxFQUFBSyxVQUNBTCxFQUFBSyxRQUFBTCxFQUFBTSxZQUlBUixJQUFBLFNBQ0F6USxPQUFBLDhDQUVBeVEsSUFBQSxlQUNBelEsT0FBQSxxQkFFQXlRLElBQUEsbUJBQ0F6USxPQUFBLHNCQUVBeVEsSUFBQSxnQ0FDQXpRLFNBQ0EwUSxJQUFBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQU0sT0FBQSxFQUNBQyxPQUFBLEVBQ0FDLE9BQUEsRUFDQUMsRUFBQVQsRUFBQVMsV0FDQUMsRUFBQVYsRUFBQVUsS0FDQUMsRUFBQVgsRUFBQVcsWUFDQUMsRUFBQVosRUFBQVksWUFDQUMsRUFBQWIsRUFBQWEsT0FHQUosSUFDQUQsRUFBQUMsRUFBQSxLQUlBSSxJQUVBTCxFQUFBLEdBQUFLLEVBQUEsS0FBQUEsRUFBQSxFQUFBQSxTQUlBaFUsSUFBQTZULElBQ0FBLElBQUFYLEVBQUFlLGlCQUNBUCxFQUFBLEVBQ0FELEVBQUEsRUFBQUUsR0FDT0UsSUFBQVgsRUFBQWdCLGdCQUNQVCxFQUFBLEVBQ0FDLEVBQUFDLFNBS0EzVCxJQUFBOFQsSUFDQUosRUFBQUksRUFBQSxVQUVBOVQsSUFBQStULElBQ0FOLEdBQUEsRUFBQU0sRUFBQSxLQUlBTixHQUFBQyxJQUNBQSxFQUFBQyxRQUdBM1QsSUFBQXlULElBTUFQLEVBQUFPLGVBR0F6VCxJQUFBMFQsSUFNQVIsRUFBQVEsZUFHQTFULElBQUEyVCxJQU1BVCxFQUFBUyxZQUlBWCxJQUFBLHlEQUNBelEsT0FBQSxrSkFDQTBRLElBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBZ0IsT0FBQSxFQUNBQyxPQUFBLEVBQ0FDLE9BQUEsRUFDQWhULEVBQUE2UixFQUFBN1IsT0FDQWlULEVBQUFuQixFQUFBbUIsT0E4QkEsT0EzQkFqVCxHQUFBd1IsRUFBQUssRUFBQXFCLFNBQUExQixFQUFBTSxFQUFBcUIsV0FFQUosR0FEQUQsRUFBQTlTLEVBQUFnTSxlQUFBdEQsVUFDQWtGLGdCQUNBb0YsRUFBQUYsRUFBQUUsS0FDQW5CLEVBQUFxQixNQUFBcEIsRUFBQXFCLFNBQUFKLEtBQUFLLFlBQUFKLEtBQUFJLFlBQUEsSUFBQUwsS0FBQU0sWUFBQUwsS0FBQUssWUFBQSxHQUNBeEIsRUFBQXlCLE1BQUF4QixFQUFBeUIsU0FBQVIsS0FBQVMsV0FBQVIsS0FBQVEsV0FBQSxJQUFBVCxLQUFBVSxXQUFBVCxLQUFBUyxXQUFBLElBS0E1QixFQUFBRSxZQUFBcFQsSUFBQXNVLElBRUFwQixFQUFBRSxNQURBLEVBQUFrQixFQUNBLEVBQ08sRUFBQUEsRUFDUCxFQUNPLEVBQUFBLEVBQ1AsRUFFQSxJQUtBcEIsRUFBQTZCLGVBQUE3QixFQUFBOEIsY0FDQTlCLEVBQUE2QixjQUFBN0IsRUFBQThCLGNBQUEzVCxFQUFBNlIsRUFBQStCLFVBQUEvQixFQUFBOEIsYUFHQTlCLEtBSUEsU0FBQWdDLElBQ0EsT0FBQXhDLEVBR0EsU0FBQXlDLElBQ0EsT0FBQXhDLEVBR0EsU0FBQXlDLEVBQUFqQyxHQUNBLElBQUFrQyxFQUFBbEMsRUFBQWtDLEtBRUFDLEVBQUEsbUJBQUFuQyxFQUFBb0MsaUJBQUEsa0JBQUFwQyxFQUFBcUMsYUFFQWhELEVBQUEsUUFBQTVPLEtBQUFGLE1BRUFBLEtBQUF5UCxjQUdBLElBQUFzQyxFQUFBTixFQUNBLHFCQUFBaEMsRUFDQXNDLEVBQUF0QyxFQUFBdUMsaUJBQUFSLEVBQUFDLEVBQ0csc0JBQUFoQyxFQUVIc0MsRUFBQXRDLEVBQUF3QyxvQkFBQVQsRUFBQUMsRUFDRyxnQkFBQWhDLElBQ0hzQyxFQUFBdEMsRUFBQXlDLGNBQUFqRCxFQUFBdUMsRUFBQUMsR0FHQXpSLEtBQUErUixxQkFFQSxJQUFBSSxLQUVBQyxPQUFBLEVBQ0FDLE9BQUEsRUFDQXhULEVBQUFxUSxFQUFBb0QsU0FjQSxJQVpBakQsRUFBQTdRLFFBQUEsU0FBQStULEdBQ0FaLEVBQUFhLE1BQUFELEVBQUFqRCxPQUNBelEsSUFBQXlULE9BQUFDLEVBQUExVCxPQUNBMFQsRUFBQWhELEtBQ0E0QyxFQUFBelQsS0FBQTZULEVBQUFoRCxRQUtBNkMsRUFBQXZULEVBQUFFLE9BR0FxVCxHQUVBcFMsS0FEQXFTLEVBQUF4VCxJQUFBdVQsSUFDQTNDLEVBQUE0QyxHQWVBLEtBWEFyUyxLQUFBckMsUUFBQWlVLElBQ0E1UixLQUFBckMsT0FBQThSLEVBQUFnRCxZQUFBcE0sVUFJQXJHLEtBQUFyQyxRQUFBLElBQUFxQyxLQUFBckMsT0FBQStVLFdBQ0ExUyxLQUFBckMsT0FBQXFDLEtBQUFyQyxPQUFBNFEsWUFHQTZELEVBQUFELEVBQUFwVCxPQUVBcVQsSUFDQU8sRUFBQVIsSUFBQUMsSUFDQXBTLEtBQUF5UCxHQUdBelAsS0FBQWdJLFVBQUF5SCxFQUFBekgsV0FBQXBCLEtBQUFDLE1BR0EsSUFBQStMLEVBQUE5RCxFQUFBLFFBQUF0UCxXQUVBLEVBQUF1UCxFQUFBLFNBQUEyQyxFQUFBbFMsVUFBQW9ULEdBQ0FoUyxZQUFBOFEsRUFFQW1CLGVBQUEsV0FDQSxJQUFBNVUsRUFBQStCLEtBQUF5UCxZQUdBeFIsRUFBQTRVLGVBQ0E1VSxFQUFBNFUsaUJBR0E1VSxFQUFBaVUsWUFBQWpELEVBR0EyRCxFQUFBQyxlQUFBM1MsS0FBQUYsT0FFQTZSLGdCQUFBLFdBQ0EsSUFBQTVULEVBQUErQixLQUFBeVAsWUFHQXhSLEVBQUE0VCxnQkFDQTVULEVBQUE0VCxrQkFHQTVULEVBQUE2VCxhQUFBOUMsRUFHQTRELEVBQUFmLGdCQUFBM1IsS0FBQUYsU0FJQTdELEVBQUEsUUFBQXVWLEVBQ0FsTyxFQUFBckgsVUFBQSwwQ0N6UUEsU0FBQTJXLElBQ0EsU0FHQSxTQUFBQyxJQUNBLFNBR0EsU0FBQUMsSUFDQWhULEtBQUFnSSxVQUFBcEIsS0FBQUMsTUFDQTdHLEtBQUFyQyxZQUFBckIsRUFDQTBELEtBQUFpVCxtQkFBQTNXLEVBcEJBTCxPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFzQkE0VyxFQUFBeFQsV0FDQTBULGNBQUEsRUFFQXRTLFlBQUFvUyxFQUVBakIsbUJBQUFlLEVBRUFLLHFCQUFBTCxFQUVBTSw4QkFBQU4sRUFFQUQsZUFBQSxXQUNBN1MsS0FBQStSLG1CQUFBZ0IsR0FFQWxCLGdCQUFBLFdBQ0E3UixLQUFBbVQscUJBQUFKLEdBRUFNLHlCQUFBLFdBQ0FyVCxLQUFBb1QsOEJBQUFMLEVBR0EvUyxLQUFBNlIsbUJBRUF5QixLQUFBLFNBQUFDLEdBQ0FBLEVBQ0F2VCxLQUFBcVQsMkJBRUFyVCxLQUFBNlIsa0JBRUE3UixLQUFBNlMsbUJBSUExVyxFQUFBLFFBQUE2VyxFQUNBeFAsRUFBQXJILFVBQUEsMENDM0RBLElBQUFxWCxFQUFBNVcsRUFBQSxJQUFBNlcsRUFBQTdXLEVBQUFZLEVBQUFnVyxHQUFBRSxFQUFBOVcsRUFBQSxJQUFBK1csRUFBQS9XLEVBQUFZLEVBQUFrVyxHQUFBRSxFQUFBaFgsRUFBQSxJQUFBaVgsRUFBQWpYLEVBQUFZLEVBQUFvVyxHQUFBRSxFQUFBbFgsRUFBQSxJQUFBbVgsRUFBQW5YLEVBQUFZLEVBQUFzVyxHQUFBRSxFQUFBcFgsRUFBQSxHQUFBcVgsRUFBQXJYLEVBQUFZLEVBQUF3VyxHQUFBRSxFQUFBdFgsRUFBQSxHQUFBdVgsRUFBQXZYLEVBQUFZLEVBQUEwVyxHQUFBRSxFQUFBeFgsRUFBQSxHQUFBeVgsRUFBQXpYLEVBQUFZLEVBQUE0VyxHQVFBRSxFQUFBLFNBQUFDLEdBR0EsU0FBQUQsSUFDQSxJQUFBRSxFQUVBQyxFQUFBelMsRUFBQTBTLEVBRUlqQixJQUFlelQsS0FBQXNVLEdBRW5CLFFBQUFLLEVBQUFuVSxVQUFBekIsT0FBQThGLEVBQUErUCxNQUFBRCxHQUFBRSxFQUFBLEVBQW1FQSxFQUFBRixFQUFhRSxJQUNoRmhRLEVBQUFnUSxHQUFBclUsVUFBQXFVLEdBR0EsT0FBQUosRUFBQXpTLEVBQW9DNlIsSUFBMEI3VCxNQUFBd1UsRUFBQUYsRUFBQWpVLFdBQUFwRSxPQUFBcUUsZUFBQWdVLElBQUFwVSxLQUFBSyxNQUFBaVUsR0FBQXhVLE1BQUFzUyxPQUFBek4sS0FBQTdDLEVBQUE4UyxnQkFBQSxXQUM5RDlTLEVBQUErUyxZQUNRWixFQUFBcFcsRUFBUWlYLHVCQUFBaFQsRUFBQStTLFdBQ2hCL1MsRUFBQStTLFVBQUF4RyxXQUFBMEcsWUFBQWpULEVBQUErUyxXQUNBL1MsRUFBQStTLFVBQUEsT0FFSy9TLEVBQUFrVCxnQkFBQSxTQUFBclcsRUFBQXNXLEdBQ0wsSUFBQUMsRUFBQXBULEVBQUFuRCxNQUNBd1csRUFBQUQsRUFBQUMsUUFDQUMsRUFBQUYsRUFBQUUsYUFDQUMsRUFBQUgsRUFBQUcsWUFDQUMsRUFBQUosRUFBQUksYUFDQUMsRUFBQUwsRUFBQUssUUFFQUosR0FBQUksRUFBQUMsWUFBQUgsS0FDQXZULEVBQUErUyxZQUNBL1MsRUFBQStTLFVBQUFTLEtBRVFyQixFQUFBcFcsRUFBUTRYLG9DQUFBRixFQUFBSCxFQUFBelcsR0FBQW1ELEVBQUErUyxVQUFBLFdBQ2hCSSxHQUNBQSxFQUFBalYsS0FBQUYsVUFwQkEwVSxFQXdCS0QsRUFBVVosSUFBMEI3UixFQUFBMFMsR0FrQ3pDLE9BdkVFWCxJQUFTTyxFQUFBQyxHQXdDVFosSUFBWVcsSUFDZGxWLElBQUEsb0JBQ0FoRCxNQUFBLFdBQ0E0RCxLQUFBbkIsTUFBQStXLFdBQ0E1VixLQUFBa1YscUJBSUE5VixJQUFBLHFCQUNBaEQsTUFBQSxXQUNBNEQsS0FBQW5CLE1BQUErVyxXQUNBNVYsS0FBQWtWLHFCQUlBOVYsSUFBQSx1QkFDQWhELE1BQUEsV0FDQTRELEtBQUFuQixNQUFBZ1gsYUFDQTdWLEtBQUE4VSxxQkFJQTFWLElBQUEsU0FDQWhELE1BQUEsV0FDQSxPQUFBNEQsS0FBQW5CLE1BQUFSLFVBQ0E2VyxnQkFBQWxWLEtBQUFrVixnQkFDQUosZ0JBQUE5VSxLQUFBOFUsc0JBS0FSLEVBeEVBLENBeUVFTCxFQUFBbFcsRUFBS2dELFdBRVB1VCxFQUFBblQsV0FDQXlVLFVBQWF2QixFQUFBdFcsRUFBUytYLEtBQ3RCRCxZQUFleEIsRUFBQXRXLEVBQVMrWCxLQUN4QlQsUUFBV2hCLEVBQUF0VyxFQUFTK1gsS0FDcEJQLFlBQWVsQixFQUFBdFcsRUFBUytYLEtBQ3hCTCxPQUFVcEIsRUFBQXRXLEVBQVNnWSxJQUNuQlQsYUFBZ0JqQixFQUFBdFcsRUFBU2hCLEtBQUFDLFdBQ3pCd1ksYUFBZ0JuQixFQUFBdFcsRUFBU2hCLEtBQUFDLFdBQ3pCcUIsU0FBWWdXLEVBQUF0VyxFQUFTaEIsS0FBQUMsWUFFckJzWCxFQUFBMEIsY0FDQUosV0FBQSxFQUNBQyxhQUFBLEVBQ0FOLGFBQUEsR0FFZW5ZLEVBQUEsc0NDbEdmLElBQUFvVyxFQUFBNVcsRUFBQSxJQUFBNlcsRUFBQTdXLEVBQUFZLEVBQUFnVyxHQUFBRSxFQUFBOVcsRUFBQSxJQUFBK1csRUFBQS9XLEVBQUFZLEVBQUFrVyxHQUFBRSxFQUFBaFgsRUFBQSxJQUFBaVgsRUFBQWpYLEVBQUFZLEVBQUFvVyxHQUFBRSxFQUFBbFgsRUFBQSxJQUFBbVgsRUFBQW5YLEVBQUFZLEVBQUFzVyxHQUFBRSxFQUFBcFgsRUFBQSxHQUFBcVgsRUFBQXJYLEVBQUFZLEVBQUF3VyxHQUFBRSxFQUFBdFgsRUFBQSxHQUFBdVgsRUFBQXZYLEVBQUFZLEVBQUEwVyxHQUFBRSxFQUFBeFgsRUFBQSxHQUFBeVgsRUFBQXpYLEVBQUFZLEVBQUE0VyxHQVFBNkIsRUFBQSxTQUFBMUIsR0FHQSxTQUFBMEIsSUFHQSxPQUZJeEMsSUFBZXpULEtBQUFpVyxHQUVScEMsSUFBMEI3VCxNQUFBaVcsRUFBQTVWLFdBQUFwRSxPQUFBcUUsZUFBQTJWLElBQUExVixNQUFBUCxLQUFBUSxZQTZDckMsT0FsREV1VCxJQUFTa0MsRUFBQTFCLEdBUVRaLElBQVlzQyxJQUNkN1csSUFBQSxvQkFDQWhELE1BQUEsV0FDQTRELEtBQUFrVyxxQkFHQTlXLElBQUEscUJBQ0FoRCxNQUFBLFNBQUErWixHQUNBLElBQUFDLEVBQUFwVyxLQUFBbkIsTUFBQXVYLFVBRUFBLEdBQ0FBLEVBQUFELE1BSUEvVyxJQUFBLHVCQUNBaEQsTUFBQSxXQUNBNEQsS0FBQThVLHFCQUdBMVYsSUFBQSxrQkFDQWhELE1BQUEsV0FDQTRELEtBQUFxVyxXQUFBclcsS0FBQW5CLE1BQUEyVyxlQUNBeFYsS0FBQXNXLGlCQUdBbFgsSUFBQSxrQkFDQWhELE1BQUEsV0FDQTRELEtBQUFxVyxZQUNBclcsS0FBQXFXLFdBQUE5SCxXQUFBMEcsWUFBQWpWLEtBQUFxVyxlQUlBalgsSUFBQSxTQUNBaEQsTUFBQSxXQUNBLE9BQUE0RCxLQUFBcVcsV0FDZWxDLEVBQUFwVyxFQUFRd1ksYUFBQXZXLEtBQUFuQixNQUFBUixTQUFBMkIsS0FBQXFXLFlBRXZCLFNBSUFKLEVBbkRBLENBb0RFaEMsRUFBQWxXLEVBQUtnRCxXQUVQa1YsRUFBQTlVLFdBQ0FxVSxhQUFnQm5CLEVBQUF0VyxFQUFTaEIsS0FBQUMsV0FDekJxQixTQUFZZ1csRUFBQXRXLEVBQVN1USxLQUFBdFIsV0FDckJvWixVQUFhL0IsRUFBQXRXLEVBQVNoQixNQUVQSyxFQUFBLHVCQ2pFZmdKLE9BQUFhLGlCQUFBYixPQUFBYSxrQkFBQSxTQUFBbUksR0FBNkQsU0FBQW9ILEVBQUF6WSxHQUFjaUMsS0FBQWxCLEtBQVVrQixLQUFBeVcsRUFBQTFZLEVBQThHLFNBQUEyWSxFQUFBM1ksR0FBYyxJQUEwSlUsRUFBMUprWSxHQUFPaEYsS0FBQSxLQUFBaFUsT0FBQSxLQUFBaVosY0FBQUMsZ0JBQUFDLGdCQUFBLEtBQUFDLFlBQUEsS0FBQUMsY0FBQSxLQUFBQyxtQkFBQSxLQUFBQyxTQUFBLE1BQXNKLElBQUF6WSxLQUFBVixFQUFBNFksRUFBQWxZLEtBQUEyUSxHQUFBclIsRUFBQVUsS0FBQTJRLElBQUF1SCxFQUFBbFksR0FBQVYsRUFBQVUsSUFBMkMsT0FBQWtZLEVBQVMsU0FBQVEsRUFBQXBaLEVBQUE0WSxHQUFnQixJQUFBbFksRUFBQTJZLEVBQUFyWixFQUFBNFksR0FBYSxnQkFBQXhaLEdBQW1CLElBQUFLLEVBQUE2WixFQUFBbGEsRUFBQTRCLE9BQWlCNFgsRUFBQTVZLEdBQUEsSUFBQUEsRUFBQTJVLFVBQ25lM1UsRUFBQXVaLFlBQUE3WSxFQUFBVixHQUFBWixFQUFBdUIsS0FBQSxJQUFBZ1ksR0FBaUMvRSxLQUFBLGdCQUFBaFUsT0FBQUksRUFBQW1aLFNBQUF6WSxFQUFBVixLQUE4QzRZLEtBQUFsWSxFQUFBa1ksR0FBQVksRUFBQXBhLEVBQUFZLEVBQUFVLEVBQUFrWSxJQUFBVSxJQUF5QlYsRUFBQWxZLEdBQUFrWSxFQUFBYSxLQUFBaGEsRUFDckQsU0FBQU8sRUFBQTRZLEVBQUFsWSxFQUFBdEIsR0FBb0IsU0FBQWthLEVBQUFWLEVBQUFsWSxFQUFBNFksRUFBQUksRUFBQXJMLEdBQXNCLElBQStCc0wsRUFBQXRGLEVBQUFuVSxFQUEvQnVaLEVBQUFiLEVBQUE1WCxPQUFBLEVBQStCLElBQWRxTixNQUFBb0wsRUFBQXBMLEdBQUEsR0FBNEJuTyxFQUFBMFksRUFBQWdCLE9BQVVELEVBQUFMLEVBQUFwWixFQUFBMlosR0FBQXhGLEVBQUFxRixFQUFBeFosRUFBQW1VLEdBQUFqVixFQUFBc0IsR0FBQTJOLEdBQUE3RixLQUFBb0YsSUFBQTFOLEVBQUEyWixFQUFBM1osRUFBQW1VLElBQUFvRixJQUFBelosRUFBQVcsS0FBQWdZLEdBQTREL0UsS0FBQSxZQUFBaFUsT0FBQWMsRUFBQW1ZLFlBQUFjLEdBQUFiLGNBQUFhLEdBQUFYLFlBQUFXLEVBQUFYLFlBQUFELGdCQUFBWSxFQUFBWixtQkFBc0gxSyxLQUFBalAsRUFBQXdaLEdBQUF2RSxFQUFBdUUsR0FBQVksRUFBQXhaLEVBQUEyWixFQUFBdEYsRUFBQXVFLEVBQUF4WixFQUFBa2EsR0FBQWxhLEVBQUFZLEdBQUEsSUFBQTJaLEVBQUFoRixVQUFBZ0YsRUFBQUosWUFBQWxGLEVBQUFyVSxLQUFBVyxLQUFBZ1ksR0FBbUYvRSxLQUFBLGdCQUFBaFUsT0FBQStaLEVBQUFSLFNBQUE5RSxFQUFBclUsS0FBMkNaLEVBQUFxYSxHQUFBaGEsRUFBQWthLEVBQUF0RixHQUFlLFNBQUE1VSxFQUFBbVosRUFBQWxZLEdBQWdCLFFBQ25laVosRUFBQXRGLEVBQUFuVSxFQUFBd1ksRUFBQW9CLEVBRG1lTCxFQUFBYixFQUFBbUIsV0FDbmVDLEVBQUF0WixJQUFBME4sRUFBQXFMLEVBQUF6WSxPQUFBeVgsRUFBQXVCLElBQUFoWixPQUFBLEVBQUFpWixFQUFBLEVBQUFDLEVBQUEsRUFBQUMsRUFBQSxFQUFzREQsRUFBQTlMLEdBQUErTCxFQUFBMUIsR0FBU0MsRUFBQWUsRUFBQVMsR0FBQUosR0FBQTVaLEVBQUE4WixFQUFBRyxLQUFBamEsRUFBQXFRLEtBQUFtSSxJQUFBb0IsR0FBQTFhLEVBQUF3WixHQUFBMVksRUFBQTBZLEdBQUFZLEVBQUF4WixFQUFBMFksRUFBQXhZLEVBQUEwWSxFQUFBeFosRUFBQWthLEdBQUFsYSxFQUFBWSxHQUFBRSxFQUFBRixJQUFBcVIsR0FBQXFILEVBQUFhLFlBQUFyWixFQUFBRixLQUFBVyxLQUFBZ1ksR0FBc0cvRSxLQUFBLGdCQUFBaFUsT0FBQThZLEVBQUFTLFNBQUFqWixFQUFBRixLQUEyQ3FVLEdBQUFpRixFQUFBakYsRUFBQXVFLEVBQUFhLEVBQUFPLEVBQUFDLEdBQUE3YSxFQUFBcWEsSUFBQWYsRUFBQXFCLFdBQUEvWSxRQUFBZCxFQUFBUSxHQUFBUixFQUFBUSxFQUFBTSxTQUFBdkIsRUFBQWlaLEVBQUF4WSxHQUFBZ2EsSUFBQUMsTUFBQVQsR0FBQSxFQUFBQyxTQUE4RnRGLE1BQUFxRSxJQUFBaUIsRUFBQXpaLEVBQUFrYSxFQUFBMUIsTUFBQWlCLEVBQUF6WixJQUFBLFFBQUFBLEVBQUFtYSxFQUFBTCxFQUFBdEIsRUFBQXlCLEVBQUEsU0FBQS9hLEVBQUFzQixJQUFBVixFQUFBVyxLQUFBZ1ksR0FBd0UvRSxLQUFBLFlBQUFoVSxPQUFBZ1osRUFBQUMsWUFBQUgsR0FBQU0sWUFBQU4sRUFBQU0sWUFBQUQsZ0JBQUFMLEVBQUFLLG1CQUFxR2tCLEtBQUE1RixFQUFBMVQsTUFBZ0JrWixFQUFBSyxFQUFBN0YsRUFBQW5VLEtBQzNlZ2EsS0FBQUosT0FBQUwsRUFBQVMsS0FBQVAsRUFBQXpaLEVBQUFrYSxFQUFBTixNQUFBSCxFQUFBelosSUFBQSxRQUFBQSxFQUFBbWEsRUFBQVosRUFBQUssRUFBQUksSUFBQTlhLEVBQUFzQixJQUFBVixFQUFBVyxLQUFBZ1ksR0FBeUUvRSxLQUFBLFlBQUFoVSxPQUFBYyxFQUFBNlAsS0FBQXVJLGNBQUFnQixHQUFBZCxZQUFBZ0IsRUFBQUcsRUFBQSxHQUFBcEIsZ0JBQUFpQixFQUFBRyxFQUFBLE1BQTBGRixLQUFBNUYsRUFBQTFULE1BQWdCa1osRUFBQTNaLEVBQUFtVSxFQUFBOEYsS0FBUUEsTUFBUzlGLEdBQUFpRixFQUFBakYsRUFBQXVFLEVBQUFhLEVBQUFPLEVBQUFDLEdBQWdCLElBQUFQLEVBQWEsT0FBUGphLEVBQUFtWixFQUFBbFksR0FBT2daLEVBSHpIWSxDQUFBbGIsRUFBQVksRUFBQVUsRUFBQWtZLEtBQXlCblosR0FBQUwsRUFBQTRCLFNBQUFzWSxLQUFBNVksRUFBQTJZLEVBQUFyWixFQUFBNFksS0FBMkgsU0FBQVksRUFBQXhaLEVBQUE0WSxFQUFBbFksRUFBQXRCLEdBQW9CLFFBQVlzYSxFQUFBRCxFQUFaSCxLQUFZN1osRUFBQW1aLEVBQUEzTixXQUFBbUQsRUFBQTNPLEVBQUF1QixPQUErQm9OLEtBQUlxTCxHQUFBQyxFQUFBamEsRUFBQTJPLElBQUFqSixLQUFBL0YsS0FBQXFhLEtBQUFwSSxJQUFBa0osRUFBQTNCLEVBQUFjLEtBQUFoWixFQUFBK1ksSUFBQXpaLEVBQUFXLEtBQUFnWSxHQUF3RC9FLEtBQUEsYUFBQWhVLE9BQUFnWixFQUFBSyxjQUFBUSxFQUFBTixTQUFBelksRUFBQStZLEdBQUFQLG1CQUFBUSxFQUFBYyxnQkFBMkZsQixFQUFBRyxJQUFBLEdBQVksSUFBQUEsS0FBQS9ZLEVBQUE0WSxFQUFBRyxJQUFBelosRUFBQVcsS0FBQWdZLEdBQTJCL1ksT0FBQWdaLEVBQ3pmaEYsS0FBQSxhQUFBcUYsY0FBQVEsRUFBQU4sU0FBQXpZLEVBQUErWSxNQUUwTyxTQUFBSixFQUFBclosRUFBQTRZLEdBQWdCLElBQUFsWSxHQUFBLEVBQVMsZ0JBQUE0WSxFQUFBdFosR0FBcUIsSUFBQTBaLEdBQU9uSixLQUFBdlEsR0FDblIsT0FEMlI0WSxFQUFBNVksR0FBQSxJQUFBQSxFQUFBMlUsVUFBQSxJQUFBM1UsRUFBQTJVLFVBQUFpRSxLQUFBbFksR0FBQSxJQUFBVixFQUFBMlUsV0FBQStFLEVBQUFkLEVBQUE2QixFQUFBemEsRUFBQWlMLFdBQUEsU0FBQXZLLEVBQUE0WSxHQUFzSSxPQUF0Q1YsRUFBQVUsSUFBQVYsRUFBQVUsSUFBQW5VLFFBQUF6RSxFQUFBNFksRUFBQW5VLE1BQUFvVixFQUFBdmEsRUFBQXNaLElBQXNDNVksS0FBU0EsSUFBQWtZLEVBQUFsWSxHQUFBa1ksRUFBQTVZLEdBQUE0WSxPQUFBYSxLQUFBQyxFQUFBaFosRUFDalQsU0FBQVYsRUFBQTRZLEdBQWdCLFFBQUFsWSxLQUFBdEIsRUFBQSxFQUFpQkEsRUFBQVksRUFBQWdCLE9BQVc1QixJQUFBc0IsRUFBQXRCLEdBQUF3WixFQUFBNVksRUFBQVosS0FBQVksR0FBcUIsT0FBQVUsRUFEZ1BnYSxDQUFBMWEsRUFBQStaLFdBQUFULElBQUE1WSxFQUFBa1ksRUFBQWEsR0FBQUMsRUFBQTFaLEVBQ3RiQSxFQUFBdVosVUFBWUcsRUFEdVAsQ0FDOU8xWixHQUFJLFNBQUFvYSxFQUFBcGEsR0FBYyxJQUFJLE9BQUFBLEVBQUEyYSxLQUFBM2EsRUFBQTRhLE1BQUE1YSxFQUFBNGEsT0FBQUMsS0FBb0MsTUFBQWpDLEdBQVMsSUFBSSxPQUFBNVksRUFBQXVaLFVBQW1CLE1BQUE3WSxHQUFTLE9BQUFtYSxNQUF1RixTQUFBSixFQUFBemEsRUFBQTRZLEdBQWdCLFFBQUFsWSxLQUFZdEIsRUFBQSxFQUFLQSxFQUFBWSxFQUFBZ0IsT0FBVzVCLElBQUFzQixFQUFBa1ksRUFBQWxZLEVBQUFWLEVBQUFaLEtBQUFZLEdBQW9CLE9BQUFVLEVBQVMsU0FBQTJaLEVBQUFyYSxFQUFBNFksRUFBQWxZLEVBQUF0QixHQUFvQixLQUFLc0IsRUFBQVYsRUFBQWdCLE9BQVdOLElBQUEsSUFBQXRCLEVBQUFZLEVBQUFVLEdBQUF0QixHQUFBWSxFQUFBVSxNQUFBa1ksRUFBQSxPQUFBbFksRUFBcUMsU0FBUytYLEVBQUFxQyxRQUFBLEdBQWFyQyxFQUFBaFgsV0FBYXVKLFFBQUEsU0FBQWhMLEVBQUE0WSxHQUFzQixRQUFBbFksR0FBV2tZLE9BQUEzTixZQUFBMk4sRUFBQW1DLGlCQUFBbkMsRUFBQW9DLG1CQUFBdGEsSUFBQWtZLEVBQUExTixVQUFBdU8sSUFBQWIsRUFBQXhOLFFBQ3JhcEwsS0FBQTRZLEVBQUF6TixnQkFBQXlOLEVBQUFxQyx3QkFBZ0Q3YixFQUFBNkMsS0FBQWxCLEVBQUF1WSxFQUFBLEVBQWNBLEVBQUFsYSxFQUFBNEIsT0FBV3NZLElBQUFsYSxFQUFBa2EsR0FBQTRCLElBQUFsYixHQUFBWixFQUFBd0gsT0FBQTBTLEVBQUEsR0FBOEJWLEVBQUFtQyxrQkFBQXJhLEVBQUE0WSxFQUFBbUIsRUFBQTdCLEVBQUFtQyxnQkFBQSxTQUFBL2EsRUFBQTRZLEdBQWtFLE9BQVI1WSxFQUFBNFksSUFBQSxFQUFRNVksS0FBWVosRUFBQXVCLE1BQVF1YSxFQUFBbGIsRUFBQW1iLEVBQUEvQixFQUFBcFosRUFBQVUsS0FBZXVCLEtBQUEwWCxHQU45RyxTQUFBM1osSUFBYyxTQUFBVSxJQUFjLElBQUF0QixFQUFBWSxFQUFBb2IsY0FBc0JoYyxFQUFBNEIsUUFBQWhCLEVBQUEwWSxFQUFBdFosRUFBQVksR0FBbUJBLEVBQUEyWixFQUFBL1EsV0FBQWxJLEVBQUErWCxFQUFBcUMsU0FBdkQsR0FNZ0dPLENBQUFwWixPQUFnQm1aLFlBQUEsV0FBd0IsUUFBQXBiLEtBQUE0WSxFQUFBM1csS0FBQWxCLEVBQUFMLEVBQUEsRUFBMEJBLEVBQUFrWSxFQUFBNVgsT0FBV04sSUFBQWtZLEVBQUFsWSxHQUFBeWEsRUFBQW5iLEdBQWMsT0FBQUEsR0FBU3NMLFdBQUEsV0FBdUJySixLQUFBbEIsS0FBVXVhLGFBQUFyWixLQUFBMFgsR0FBcUIxWCxLQUFBMFgsRUFBQSxPQUFjLElBQUE0QixFQUFBalQsU0FBQXJELGNBQUEsS0FBa0NzVyxFQUFBQyxNQUFBdE8sSUFBQSxFQUFjLElBQUFxTixHQUFBZ0IsRUFBQSxRQUFBQSxFQUFBdFEsV0FBQXVRLE1BQUFuZCxPQUx0USxTQUFBMkIsRUFBQTRZLEdBQWdCLE9BQUFBLEVBQUF2YSxPQUFlLFNBQUEyQixFQUFBNFksR0FBZ0IsZ0JBQUFBLEVBQUF6VCxLQUFBeVQsRUFBQXZhLE1BQUEyQixFQUFBd2IsTUFBQUMsU0FLdU5aLEVBQUEsRUFBbUQsT0FBQXBDLEVBTnZkLE1BTWdlLHFDQ1JqZHBaLEVBQUEsR0FDZnFjLE1BQUEsUUFDQTVTLElBQUEsTUFDQTZTLFlBQUEsZ0JBQ0FDLEdBQUEsS0FDQTNULE1BQUEsUUFDQTRULE1BQUEsUUFDQUMsS0FBQSxPQUNBQyxXQUFBLGNBQ0FDLFdBQUEsY0FDQUMsV0FBQSxnQkFDQUMsWUFBQSxpQkFDQUMsV0FBQSxnQkFDQUMsYUFBQSxrQkFDQUMsV0FBQSxPQUNBQyxXQUFBLFdBQ0FDLFVBQUEsSUFDQUMsZUFBQSxvQkFDQUMsaUJBQUEsRUFDQUMsY0FBQSwwQkFDQUMsVUFBQSx3QkFDQUMsYUFBQSw2QkFDQUMsU0FBQSw4QkFDQUMsZUFBQSxjQUNBQyxXQUFBLGNBQ0FDLGdCQUFBLGVBQ0FDLFlBQUEsd1NDcEJJQyxFQUFNLFNBQUExRyxHQUdWLFNBQUEyRyxJQUdBLE9BRklDLElBQWVuYixLQUFBa2IsR0FFUkUsSUFBMEJwYixLQUFBdVUsRUFBQWhVLE1BQUFQLEtBQUFRLFlBR3JDLE9BUkU2YSxJQUFTSCxFQUFBM0csR0FRWDJHLEVBVFUsQ0FVUkksRUFBQXZkLEVBQUtnRCxXQUVQa2EsRUFBTTlaLFdBQ04vRSxNQUFTbWYsRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBUzBkLE9BQVNGLEVBQUF4ZCxFQUFTMmQsVUFFekRULEVBQU1VLGdCQUFBLEVBQ1MsSUFBQUMsRUFBQSxFQ3BCUixTQUFBQyxFQUFBQyxHQUNQLHVCQUFBQSxFQUNBQSxFQUVBLEtBR08sU0FBQUMsRUFBQUMsR0FDUCxJQUFBQSxFQUNBLFlBR0EsSUFBQW5kLEVBQUFtZCxFQUFBbmQsTUFDQSxhQUFBQSxFQUNBLE9BQUFBLEVBQUF6QyxNQUVBLEdBQUE0ZixFQUFBNWMsSUFDQSxPQUFBNGMsRUFBQTVjLElBRUEsR0FBQTRjLEVBQUFySyxNQUFBcUssRUFBQXJLLEtBQUFzSyxrQkFBQXBkLEVBQUFxZCxNQUNBLE9BQUFyZCxFQUFBcWQsTUFFQSxVQUFBQyxNQUFBLHFFQUFBSCxHQUdPLFNBQUFJLEVBQUFKLEVBQUEzSixHQUNQLGdCQUFBQSxFQUNBMEosRUFBQUMsR0FFQUEsRUFBQW5kLE1BQUF3VCxHQU9PLFNBQUFnSyxFQUFBeGQsR0FDUCxPQUFBQSxFQUFBeWQsU0FHTyxTQUFBQyxFQUFBMWQsR0FDUCxPQUFBQSxFQUFBMmQsVUFBQTNkLEVBQUE0ZCxLQUdPLFNBQUFDLEVBQUE3ZCxHQUNQLE9BQUEwZCxFQUFBMWQsSUFBQXdkLEVBQUF4ZCxHQUdPLFNBQUE4ZCxFQUFBOWQsR0FDUCxPQUFBNmQsRUFBQTdkLEdBR08sU0FBUytkLEVBQU94Z0IsR0FDdkIsSUFBQWtDLEVBQUFsQyxFQU1BLFlBTEFFLElBQUFGLEVBQ0FrQyxLQUNHc1csTUFBQWlJLFFBQUF6Z0IsS0FDSGtDLEdBQUFsQyxJQUVBa0MsRUFHTyxTQUFBd2UsRUFBQTFnQixHQUNQLGNBQUFBLEVBQUEsSUFBQUEsRUFHTyxTQUFBMmdCLEVBQUE5ZSxHQUNQQSxFQUFBNFUsaUJBR08sU0FBQW1LLEVBQUE1Z0IsRUFBQTZnQixHQUVQLElBREEsSUFBQXhZLEdBQUEsRUFDQTNGLEVBQUEsRUFBaUJBLEVBQUExQyxFQUFBMkMsT0FBa0JELElBQ25DLEdBQUExQyxFQUFBMEMsS0FBQW1lLEVBQUEsQ0FDQXhZLEVBQUEzRixFQUNBLE1BR0EsT0FBQTJGLEVBa0NPLElBQUF5WSxHQUNQQyxXQUFBLE9BQ0FDLGlCQUFBLFFBR09DLEdBQ1BDLGFBQUEsTUFrQ08sU0FBQUMsRUFBQUMsRUFBQXhCLEdBQ1AsT0FBQUEsRUFBQW5kLE1BQUE0ZSxVQUdjYixFQUFPUixFQUFBSixFQUFBaGMsS0FBQW5CLE1BQUE2ZSxtQkFBQUMsS0FBQSxJQUNyQkMsY0FBQWxaLFFBQUE4WSxFQUFBSSxnQkFBQSxFQVlPLFNBQUFDLEVBQUFoZSxFQUFBcUQsR0FDUCxnQkFBQW9MLEdBQ0F6TyxFQUFBcUQsR0FBQW9MLHFFQ2hLSXdQLEdBQVksU0FBQXZKLEdBR2hCLFNBQUF3SixFQUFBbGYsR0FDSXNjLElBQWVuYixLQUFBK2QsR0FFbkIsSUFBQS9iLEVBQWdCb1osSUFBMEJwYixLQUFBdVUsRUFBQXJVLEtBQUFGLEtBQUFuQixJQThCMUMsT0E1QkFtRCxFQUFBZ2MsdUJBQUEsV0FFQSxJQUFBQyxFQUEwQmhpQixPQUFBaWlCLEVBQUEsWUFBQWppQixDQUFXK0YsRUFBQW1jLGlCQUNyQy9JLEVBQUFwVCxFQUFBbkQsTUFDQXpDLEVBQUFnWixFQUFBaFosTUFDQWlaLEVBQUFELEVBQUFDLFFBQ0ErSSxFQUFBaEosRUFBQWdKLGlCQUdBLEdBQUFILEdBQUE1SSxFQUFBLENBR0EsSUFBQWdKLEdBQ0FDLG9CQUFBLEdBRUFsaUIsR0FBQSxJQUFBQSxFQUFBMkMsU0FBQXFmLElBQ0FDLEVBQUFFLGNBQUEsR0FLQXZjLEVBQUF3YyxZQUEwQkMsS0FBRyxXQUNyQkMsSUFBY1QsRUFBZ0JoaUIsT0FBQWlpQixFQUFBLFlBQUFqaUIsQ0FBVytGLEVBQUEyYyxTQUFBTixPQUlqRHJjLEVBQUE0YyxlQUFBL2YsRUFBQWdnQixXQUNBN2MsRUFBQThjLFlBQXdCakIsRUFBTzdiLEVBQUEsV0FDL0JBLEVBc0lBLE9BektFcVosSUFBUzBDLEVBQUF4SixHQXNDWHdKLEVBQUF2ZSxVQUFBdWYsa0JBQUEsV0FDQS9lLEtBQUFnZSx5QkFDQWhlLEtBQUFnZixZQUFBaGYsS0FBQW5CLE1BQUF3VyxTQUdBMEksRUFBQXZlLFVBQUF5ZixzQkFBQSxTQUFBQyxHQUtBLE9BSkFBLEVBQUE3SixVQUNBclYsS0FBQWdmLGFBQUEsR0FHQUUsRUFBQTdKLFNBQUE2SixFQUFBTCxhQUFBN2UsS0FBQW5CLE1BQUFnZ0IsWUFHQWQsRUFBQXZlLFVBQUEyZixtQkFBQSxTQUFBaEosR0FDQSxJQUFBdFgsRUFBQW1CLEtBQUFuQixPQUNBc1gsRUFBQWQsU0FBQXhXLEVBQUF3VyxTQUNBclYsS0FBQWdlLHlCQUVBaGUsS0FBQWdmLFlBQUFuZ0IsRUFBQXdXLFFBQ0FyVixLQUFBNGUsZUFBQS9mLEVBQUFnZ0IsWUFHQWQsRUFBQXZlLFVBQUE0ZixxQkFBQSxXQUNBcGYsS0FBQXdlLGFBQUF4ZSxLQUFBd2UsWUFBQWEsUUFDQXJmLEtBQUF3ZSxZQUFBYSxVQUlBdEIsRUFBQXZlLFVBQUE4ZixXQUFBLFdBQ0EsSUFBQTNjLEVBQUEzQyxLQUVBbkIsRUFBQW1CLEtBQUFuQixNQUNBMGdCLEVBQUExZ0IsRUFBQTBnQixVQUNBQyxFQUFBM2dCLEVBQUEyZ0IscUJBQ0FDLEVBQUE1Z0IsRUFBQTRnQix5QkFDQXJqQixFQUFBeUMsRUFBQXpDLE1BQ0FzakIsRUFBQTdnQixFQUFBNmdCLFVBQ0FsRCxFQUFBM2QsRUFBQTJkLFNBQ0FtRCxFQUFBOWdCLEVBQUE4Z0IsYUFDQWQsRUFBQWhnQixFQUFBZ2dCLFdBQ0FULEVBQUF2ZixFQUFBdWYsaUJBQ0F3QixFQUFBL2dCLEVBQUErZ0IsY0FFQSxHQUFBTCxLQUFBeGdCLE9BQUEsQ0FDQSxJQUFBOGdCLEtBQ0FyRCxHQUNBcUQsRUFBQUMsV0FBQWpoQixFQUFBa2hCLGVBQ0FGLEVBQUFHLFNBQUFMLEdBRUFFLEVBQUFJLFFBQUFOLEVBR0EsSUFBQU8sRURUTyxTQUFBQyxFQUFBWixFQUFBbmpCLEdBQ1AsVUFBQUEsUUFBQUUsSUFBQUYsRUFDQSxTQUVBLElBQUE4akIsS0FZQSxPQVhFNUUsRUFBQXZkLEVBQUtRLFNBQUFDLFFBQUErZ0IsRUFBQSxTQUFBYSxHQUNQLEdBQUFBLEVBQUF6TyxLQUFBME8sZ0JBQ0FILElBQUE1TixPQUFBNk4sRUFBQUMsRUFBQXZoQixNQUFBUixTQUFBakMsUUFDSyxDQUNMLElBQUFra0IsRUFBQXZFLEVBQUFxRSxHQUNBRyxFQUFBSCxFQUFBaGhCLEtBQ0EsSUFBQTRkLEVBQUE1Z0IsRUFBQWtrQixJQUFBQyxHQUNBTCxFQUFBeGhCLEtBQUE2aEIsTUFJQUwsRUNQeUJDLENBQWFaLEVBQUFuakIsR0FDdENva0IsS0FFQUMsRUFBQWxCLEVBQ0EsR0FBQVcsRUFBQW5oQixRQUFBcWYsRUFBQSxDQUNBdmYsRUFBQXdXLFVBQUFyVixLQUFBZ2YsY0FDQXdCLEVBQUFFLFVBQUFSLEVBQUEsSUFBQTlCLEdBRUEsSUFBQXVDLEdBQUEsRUFHQUMsRUFBQSxTQUFBUixHQUNBLE9BQUFPLElBQUEsSUFBQVQsRUFBQXhiLFFBQUEwYixFQUFBaGhCLE9BQUF1aEIsSUFBQVQsRUFBQW5oQixTQUFBLElBQUFxZixFQUFBMVosUUFBQTBiLEVBQUFoaEIsTUFDQXVoQixHQUFBLEVBQ21CMWtCLE9BQUE0a0IsRUFBQSxhQUFBNWtCLENBQVlta0IsR0FDL0J0ZCxJQUFBLFNBQUEwUixHQUNBN1IsRUFBQXdiLGdCQUFBM0osTUFJQTRMLEdBR0FLLEVBQUFsQixFQUFBdlIsSUFBQSxTQUFBb1MsR0FDQSxHQUFBQSxFQUFBek8sS0FBQTBPLGdCQUFBLENBQ0EsSUFBQWhpQixFQUEyQnBDLE9BQUFpQyxFQUFBLEVBQUFqQyxDQUFPbWtCLEVBQUF2aEIsTUFBQVIsVUFBQTJQLElBQUE0UyxHQUNsQyxPQUFtQjNrQixPQUFBNGtCLEVBQUEsYUFBQTVrQixDQUFZbWtCLEtBQVMvaEIsR0FFeEMsT0FBQXVpQixFQUFBUixVQU1BcGdCLEtBQUFtZSxnQkFBQSxLQUlBLElBQUEyQyxFQUFBMWtCLE9BQUEyQyxPQUFBLEdBSUEsT0FIQThmLElBQUE3ZSxLQUFBNGUsZ0JBQUFrQyxPQUFBbEIsSUFDQVksRUFBQUUsVUFBQSxJQUVhcEYsRUFBQXZkLEVBQUtpRixjQUNWK2QsRUFBQSxFQUNBQyxLQUNSbGUsSUFBQTlDLEtBQUE4ZSxZQUNBdkYsTUFBQXZaLEtBQUFuQixNQUFBb2lCLGtCQUNBQyxtQkFBQXpCLEVBQ0EwQixLQUFBLFVBQ0FDLFNBQUE1RSxFQUFBZ0QsRUFBQSxNQUNTZ0IsR0FDVGhFLFlBQ1NxRCxHQUNUSyxlQUNBUixZQUFBLFVBRUFlLEdBR0EsYUFHQTFDLEVBQUF2ZSxVQUFBb0QsT0FBQSxXQUNBLElBQUEwYyxFQUFBdGYsS0FBQXNmLGFBQ0EsT0FBQUEsRUFBd0JoRSxFQUFBdmQsRUFBS2lGLGNBQzdCLE9BRUF1VyxPQUNBOEgsU0FBQSxPQUNBQyxVQUFBLGlCQUVBQyxRQUFBdmhCLEtBQUFuQixNQUFBMmlCLGFBQ0FDLFlBQXFCMUUsRUFDckIyRSxTQUFBMWhCLEtBQUFuQixNQUFBOGlCLGVBRUFyQyxHQUNBLE1BR0F2QixFQTFLZ0IsQ0EyS2R6QyxFQUFBdmQsRUFBS2dELFdBRVArYyxHQUFZN2EsWUFBQSxlQUNaNmEsR0FBWTNjLFdBQ1pzZSx5QkFBNEJsRSxFQUFBeGQsRUFBUytYLEtBQ3JDMVosTUFBU21mLEVBQUF4ZCxFQUFTZ1ksSUFDbEJrTCxrQkFBcUIxRixFQUFBeGQsRUFBUzZqQixPQUM5QnBGLFNBQVlqQixFQUFBeGQsRUFBUytYLEtBQ3JCMEwsYUFBZ0JqRyxFQUFBeGQsRUFBU2hCLEtBQ3pCNGtCLGNBQWlCcEcsRUFBQXhkLEVBQVNoQixLQUMxQjhrQixlQUFrQnRHLEVBQUF4ZCxFQUFTaEIsS0FDM0I0aUIsYUFBZ0JwRSxFQUFBeGQsRUFBU2hCLEtBQ3pCMmlCLFVBQWFuRSxFQUFBeGQsRUFBUzBkLE9BQ3RCOEQsVUFBYWhFLEVBQUF4ZCxFQUFTZ1ksSUFDdEI4SSxXQUFjdEQsRUFBQXhkLEVBQVMwZCxPQUN2QnBHLFFBQVdrRyxFQUFBeGQsRUFBUytYLEtBQ3BCc0ksaUJBQW9CN0MsRUFBQXhkLEVBQVMwZCxPQUM3QitELHFCQUF3QmpFLEVBQUF4ZCxFQUFTeWQsV0FBWUQsRUFBQXhkLEVBQVNoQixLQUFPd2UsRUFBQXhkLEVBQVN1USxRQUV2RCxJQUFBd1QsR0FBQSxHQzlMZkMsRUFBQSxFQUFPOWUsWUFBQSxVQUVQLElBQUErZSxJQUNBQyxZQUNBQyxRQUFBLFdBQ0FDLFFBQUEsS0FDQWQsVUFDQWUsUUFBQSxFQUNBQyxRQUFBLElBR0FDLFNBQ0FKLFFBQUEsV0FDQUMsUUFBQSxNQUNBZCxVQUNBZSxRQUFBLEVBQ0FDLFFBQUEsS0FLSUUsR0FBYSxTQUFBaE8sR0FHakIsU0FBQWlPLEVBQUEzakIsR0FDSXNjLElBQWVuYixLQUFBd2lCLEdBRW5CLElBQUF4Z0IsRUFBZ0JvWixJQUEwQnBiLEtBQUF1VSxFQUFBclUsS0FBQUYsS0FBQW5CLElBVTFDLE9BUkk0akIsR0FBZ0J2aUIsS0FBQThCLEdBRXBCQSxFQUFBMGdCLG9CQUFnQzdFLEVBQU83YixFQUFBLG1CQUN2Q0EsRUFBQTJnQixlQUEyQjlFLEVBQU83YixFQUFBLGNBRWxDQSxFQUFBSyxPQUNBdWdCLGNBQUEsTUFFQTVnQixFQXlFQSxPQXhGRXFaLElBQVNtSCxFQUFBak8sR0FrQlhpTyxFQUFBaGpCLFVBQUF1ZixrQkFBQSxXQUNBL2UsS0FBQTZpQixvQkFHQUwsRUFBQWhqQixVQUFBMmYsbUJBQUEsV0FDQW5mLEtBQUE2aUIsb0JBR0FMLEVBQUFoakIsVUFBQW9ELE9BQUEsV0FDQSxJQUFBa2dCLEVBRUFDLEVBQUEvaUIsS0FBQW5CLE1BQ0EyaUIsRUFBQXVCLEVBQUF2QixhQUNBM2lCLEVBQWdCbWtCLElBQXdCRCxHQUFBLGlCQUV4Q3ZHLEVBQUEzZCxFQUFBMmQsU0FDQW5ILEVBQUF4VyxFQUFBd1csUUFDQXdKLEVBQUFoZ0IsRUFBQWdnQixXQUNBb0UsRUFBQXBrQixFQUFBb2tCLGNBQ0F4RixFQUFBNWUsRUFBQTRlLFNBQ0F5RixFQUFBcmtCLEVBQUFxa0IsV0FDQUMsRUFBQXRrQixFQUFBc2tCLGtCQUNBQyxFQUFBdmtCLEVBQUF1a0IsY0FDQUMsRUFBQXhrQixFQUFBd2tCLHlCQUVBQyxFQUFBdGpCLEtBQUF1akIsdUJBQ0FDLElBQUFWLE1BQThDSyxPQUFBTCxFQUFBUSxFQUFBLE1BQUE5RyxFQUFBLHdCQUFBc0csR0FDOUNXLEVBQUF6akIsS0FBQTBqQixvQkFDQW5FLFVBQUExZ0IsRUFBQThrQixRQUNBbkMsZUFDQWhGLFdBQ0FxQyxhQUNBeEosWUFFQXVPLE9BQUEsRUFFQUEsRUFEQW5HLEtBRWVkLEVBQVk5ZCxLQUFBcWtCLEdBQzNCLFVBRUEsUUFFQSxJQUFBVyxFQUFxQjdDLE9BQVdvQyxHQUNoQ1UsRUFBQVQsRUFBQSxtQkFLQSxPQUpBcmpCLEtBQUFxQyxNQUFBdWdCLGdCQUNBaUIsRUFBQUMsR0FBQTlqQixLQUFBcUMsTUFBQXVnQixjQUFBLE1BR1d0SCxFQUFBdmQsRUFBS2lGLGNBQ1YrZSxFQUFBLEVBQ0FmLE9BQVduaUIsR0FDakJrbEIsV0FBQXRHLEtBQUF6ZCxLQUFBbkIsTUFBQWtsQixXQUNBSCxhQUNBOWdCLElBQUE5QyxLQUFBMmlCLGVBQ0FxQixlQUFBLGFBQ0FDLGtCQUFBakMsR0FDQXRDLFVBQUE0RCxFQUNBWSxvQkFBQWxrQixLQUFBbWtCLDRCQUNBQyxxQkFBQXZsQixFQUFBd2xCLHdCQUNBQyxNQUFBYixFQUNBYyxXQUFBdEIsRUFDQXVCLGFBQUFuUCxFQUNBb1Asa0JBQUE1bEIsRUFBQTRsQixrQkFDQWpCLGVBQXdCa0IsSUFBVWxCLEdBQ2xDSyxlQUVBaGxCLEVBQUFSLFdBSUFta0IsRUF6RmlCLENBMEZmbEgsRUFBQXZkLEVBQUtnRCxXQUVQd2hCLEdBQWFwaEIsV0FDYnFnQixhQUFnQmpHLEVBQUF4ZCxFQUFTaEIsS0FDekI0a0IsY0FBaUJwRyxFQUFBeGQsRUFBU2hCLEtBQzFCc21CLHlCQUE0QjlILEVBQUF4ZCxFQUFTK1gsS0FDckNtTixjQUFpQjFILEVBQUF4ZCxFQUFTNmpCLE9BQzFCdk0sUUFBV2tHLEVBQUF4ZCxFQUFTK1gsS0FDcEIySCxTQUFZbEMsRUFBQXhkLEVBQVMrWCxLQUNyQm9OLFdBQWMzSCxFQUFBeGQsRUFBUytYLEtBQ3ZCcU4sa0JBQXFCNUgsRUFBQXhkLEVBQVMwZCxPQUM5QmUsU0FBWWpCLEVBQUF4ZCxFQUFTK1gsS0FDckIrSSxXQUFjdEQsRUFBQXhkLEVBQVMwZCxPQUN2QmtKLGFBQWdCcEosRUFBQXhkLEVBQVNnWSxJQUN6QjROLFFBQVdwSSxFQUFBeGQsRUFBU2dZLElBQ3BCMkosVUFBYW5FLEVBQUF4ZCxFQUFTMGQsT0FDdEIrSCxlQUFrQmpJLEVBQUF4ZCxFQUFTMGQsT0FDM0JwZCxTQUFZa2QsRUFBQXhkLEVBQVNnWSxJQUNyQmdPLFdBQWN4SSxFQUFBeGQsRUFBUzZtQixRQUFTckosRUFBQXhkLEVBQVMwZCxRQUN6QytELHFCQUF3QmpFLEVBQUF4ZCxFQUFTeWQsV0FBWUQsRUFBQXhkLEVBQVNoQixLQUFPd2UsRUFBQXhkLEVBQVN1USxRQUd0RSxJQUFJbVUsR0FBZ0IsV0FDcEIsSUFBQTlmLEVBQUEzQyxLQUVBQSxLQUFBNmlCLGlCQUFBLFdBQ0EsR0FBQWxnQixFQUFBOUQsTUFBQXdrQix5QkFBQSxDQUdBLElBQUFsWSxFQUFnQjBaLEVBQUE5bUIsRUFBUSttQixZQUFBbmlCLEdBQUFvaUIsWUFDeEI1WixJQUFBeEksRUFBQU4sTUFBQXVnQixlQUNBamdCLEVBQUExRixVQUF1QjJsQixjQUFBelgsTUFJdkJuTCxLQUFBZ2xCLGFBQUEsV0FDQSxPQUFBcmlCLEVBQUFzaUIsaUJBQUF0aUIsRUFBQXNpQixnQkFBQXRHLFNBR0EzZSxLQUFBa2xCLGdCQUFBLFdBQ0EsT0FBQXZpQixFQUFBd2lCLFdBQUFDLG1CQUdBcGxCLEtBQUEwakIsbUJBQUEsU0FBQTJCLEdBQ0EsSUFBQXhtQixFQUFBOEQsRUFBQTlELE1BQ0EsT0FBV3ljLEVBQUF2ZCxFQUFLaUYsY0FBZThlLEdBQWNkLEtBQzdDbGUsSUFBQUgsRUFBQStmLHFCQUNLMkMsR0FDTDNGLFVBQUEvYyxFQUFBNGdCLHVCQUNBNUQsYUFBQTlnQixFQUFBOGdCLGFBQ0FJLGVBQUFsaEIsRUFBQWtoQixlQUNBNEIsY0FBQTlpQixFQUFBOGlCLGNBQ0F2bEIsTUFBQXlDLEVBQUF6QyxNQUNBd2pCLGNBQUEvZ0IsRUFBQStnQixjQUNBeEIsaUJBQUF2ZixFQUFBdWYsaUJBQ0FxQix5QkFBQTVnQixFQUFBNGdCLHlCQUNBd0Isa0JBQUFwaUIsRUFBQW9pQixrQkFDQXpCLHFCQUFBM2dCLEVBQUEyZ0IseUJBSUF4ZixLQUFBbWtCLDBCQUFBLFdBQ0EsSUFBQXRsQixFQUFBOEQsRUFBQTlELE1BQ0F5bUIsRUFBQXptQixFQUFBeW1CLGVBSUEsT0FIQUEsR0FBQXptQixFQUFBMG1CLFlBQ0FELEVBQUEzaUIsRUFBQTRnQix1QkFBQSxJQUFBMWtCLEVBQUEwbUIsV0FFQUQsR0FHQXRsQixLQUFBdWpCLHFCQUFBLFdBQ0EsT0FBQTVnQixFQUFBOUQsTUFBQTZnQixVQUFBLGNBSWU4RixHQUFBLEdDck1mLFNBQUFDLEdBQUE1bUIsRUFBQTZtQixFQUFBQyxHQUNBLElBQUFDLEVBQWtCckssRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBUzBkLE9BQVNGLEVBQUF4ZCxFQUFTMmQsU0FFbEVtSyxFQUEwQnRLLEVBQUF4ZCxFQUFTbEIsT0FDbkN1QyxJQUFBd21CLEVBQUE1b0IsV0FDQWtmLE1BQVdYLEVBQUF4ZCxFQUFTdVEsT0FFcEIsS0FBQXpQLEVBQUFpbkIsYUFNRyxvQkFBQWpuQixFQUFBa25CLE1BQUEsU0FBQWxuQixFQUFBa25CLE1BQUFsbkIsRUFBQTJkLFVBQUEzZCxFQUFBNGQsT0FBQSxLQUFBNWQsRUFBQTZtQixHQUNILElBQUF2SixNQUFBLGlCQUFBdUosRUFBQSxtQ0FBQUMsRUFBQSw0REFFb0JwSyxFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTNm1CLFFBQUFnQixPQUNsRHJsQixXQUFBakUsRUFBQWtFLFdBUEEsR0FGbUIrYSxFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTNm1CLFFBQUFpQixPQUNqRHRsQixXQUFBakUsRUFBQWtFLFdBRUEsV0FBQTJiLE1BQUEsaUJBQUF1SixFQUFBLGtCQUFBQyxFQUFBLDhDQUFBRCxFQUFBLHdFRDZMQW5ELEdBQWF0ZixZQUFBLGdCQ25MTixJQUFBK2lCLElBQ1B0TixHQUFNNkMsRUFBQXhkLEVBQVMwZCxPQUNmZ0UseUJBQTRCbEUsRUFBQXhkLEVBQVMrWCxLQUNyQzBHLFNBQVlqQixFQUFBeGQsRUFBUytYLEtBQ3JCNk8sYUFBZ0JwSixFQUFBeGQsRUFBU2dZLElBQ3pCMVgsU0FBWWtkLEVBQUF4ZCxFQUFTZ1ksSUFDckJtTixXQUFjM0gsRUFBQXhkLEVBQVMrWCxLQUN2QjJILFNBQVlsQyxFQUFBeGQsRUFBUytYLEtBQ3JCbVEsV0FBYzFLLEVBQUF4ZCxFQUFTK1gsS0FDdkJvUSxVQUFhM0ssRUFBQXhkLEVBQVMrWCxLQUN0QjJHLEtBQVFsQixFQUFBeGQsRUFBUytYLEtBQ2pCNEosVUFBYW5FLEVBQUF4ZCxFQUFTMGQsT0FDdEIwSyxVQUFhNUssRUFBQXhkLEVBQVMwZCxPQUN0QjZKLGVBQWtCL0osRUFBQXhkLEVBQVMwZCxPQUMzQjJLLGdCQUFtQjdLLEVBQUF4ZCxFQUFTMGQsT0FDNUJpQyxpQkFBb0JuQyxFQUFBeGQsRUFBUzBkLE9BQzdCOEosVUFBYWhLLEVBQUF4ZCxFQUFTMGQsT0FDdEI0SyxxQkFBd0I5SyxFQUFBeGQsRUFBUzBkLE9BQ2pDNkssU0FBWS9LLEVBQUF4ZCxFQUFTaEIsS0FDckJ3cEIsT0FBVWhMLEVBQUF4ZCxFQUFTaEIsS0FDbkJ3a0IsUUFBV2hHLEVBQUF4ZCxFQUFTaEIsS0FDcEJpakIsU0FBWXpFLEVBQUF4ZCxFQUFTaEIsS0FDckJ5cEIsU0FBWWpMLEVBQUF4ZCxFQUFTaEIsS0FDckI0a0IsY0FBaUJwRyxFQUFBeGQsRUFBU2hCLEtBQzFCMHBCLGFBQWdCbEwsRUFBQXhkLEVBQVNoQixLQUN6QjJwQixhQUFnQm5MLEVBQUF4ZCxFQUFTaEIsS0FDekI0cEIsZUFBa0JwTCxFQUFBeGQsRUFBU2hCLEtBQzNCNnBCLFlBQWVyTCxFQUFBeGQsRUFBU2dZLElBQ3hCK0osV0FBY3ZFLEVBQUF4ZCxFQUFTaEIsS0FDdkIrb0IsYUFBZ0J2SyxFQUFBeGQsRUFBUytYLEtBQ3pCMVosTUFBQXFwQixHQUNBb0IsYUFBQXBCLEdBQ0FyQyxjQUFpQjdILEVBQUF4ZCxFQUFTNmpCLE9BQzFCa0YsaUJBQW9CdkwsRUFBQXhkLEVBQVMyZCxPQUM3QnFMLFlBQWV4TCxFQUFBeGQsRUFBUzJkLE9BQ3hCc0wsa0JBQXFCekwsRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBU3VRLEtBQU9pTixFQUFBeGQsRUFBU2hCLE9BQ25Fa3FCLGdCQUFtQjFMLEVBQUF4ZCxFQUFTNm1CLFFBQVNySixFQUFBeGQsRUFBUzBkLFFBQzlDeUwsZ0JBQW1CM0wsRUFBQXhkLEVBQVNoQixLQUM1QmduQixXQUFjeEksRUFBQXhkLEVBQVM2bUIsUUFBU3JKLEVBQUF4ZCxFQUFTMGQsUUFDekMwTCxVQUFhNUwsRUFBQXhkLEVBQVN1USxLQUN0QjhZLFVBQWE3TCxFQUFBeGQsRUFBU3VRLEtBQ3RCK1ksV0FBYzlMLEVBQUF4ZCxFQUFTdVEsS0FDdkJrUixxQkFBd0JqRSxFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTaEIsS0FBT3dlLEVBQUF4ZCxFQUFTdVEsUUM1Q3RFLFNBQUFnWixNQXNCQSxJQUFJQyxHQUFNLFNBQUFoVCxHQUdWLFNBQUFpVCxFQUFBM29CLEdBQ0lzYyxJQUFlbmIsS0FBQXduQixHQUVuQixJQUFBeGxCLEVBQWdCb1osSUFBMEJwYixLQUFBdVUsRUFBQXJVLEtBQUFGLEtBQUFuQixJQUV0QzRvQixHQUFnQnZuQixLQUFBOEIsR0FFcEIsSUFBQTBsQixFQUFBRixFQUFBRyx3QkFBQTlvQixHQWlCQSxPQWhCQW1ELEVBQUFLLE9BQ0FqRyxNQUFBb3JCLEVBQUFJLGtCQUFBL29CLEdBQUEsR0FDQWdnQixXQUFBaGdCLEVBQUF5ZCxTQUFBa0wsRUFBQUsseUJBQUFocEIsRUFBQTZvQixHQUFBLEdBQ0EsR0FDQUksS0FBQWpwQixFQUFBa3BCLFlBQ0FMLGNBRUFNLHNCQUFBLEdBR0FobUIsRUFBQWltQixhQUF5QnBLLEVBQU83YixFQUFBLFlBQ2hDQSxFQUFBa21CLG1CQUErQnJLLEVBQU83YixFQUFBLGtCQUN0Q0EsRUFBQW1tQixlQUEyQnRLLEVBQU83YixFQUFBLGNBQ2xDQSxFQUFBb21CLHFCQUFpQ3ZLLEVBQU83YixFQUFBLG9CQUN4Q0EsRUFBQXFtQixZQUF3QnhLLEVBQU83YixFQUFBLFdBQy9CQSxFQUFBc21CLGlCQUE2QnpLLEVBQU83YixFQUFBLGdCQUNwQ0EsRUFzTUEsT0FoT0VxWixJQUFTbU0sRUFBQWpULEdBNkJYaVQsRUFBQWhvQixVQUFBdWYsa0JBQUEsV0FDQS9lLEtBQUFuQixNQUFBMHBCLFdBQ0F2b0IsS0FBQXdvQixTQUlBaEIsRUFBQWhvQixVQUFBMmYsbUJBQUEsV0FDQSxHQUFRNUMsRUFBZ0J2YyxLQUFBbkIsT0FBQSxDQUN4QixJQUFBNHBCLEVBQUF6b0IsS0FBQTBvQixrQkFDQUMsRUFBQTNvQixLQUFBNG9CLHdCQUNBSCxFQUFBcnNCLE9BQ0Fxc0IsRUFBQWxQLE1BQUFwTyxNQUFBLEdBQ0FzZCxFQUFBbFAsTUFBQXBPLE1BQUF3ZCxFQUFBbmUsWUFBQSxNQUVBaWUsRUFBQWxQLE1BQUFwTyxNQUFBLEdBR0FuTCxLQUFBNm9CLG1CQUdBckIsRUFBQWhvQixVQUFBNGYscUJBQUEsV0FDQXBmLEtBQUE4b0IsaUJBQ0E5b0IsS0FBQStvQixnQkFDQS9vQixLQUFBZ3BCLG9CQUNNbkUsRUFBQTltQixFQUFRaVgsdUJBQUFoVixLQUFBZ3BCLG1CQUNkM2lCLFNBQUFzSyxLQUFBc0UsWUFBQWpWLEtBQUFncEIsbUJBQ0FocEIsS0FBQWdwQixrQkFBQSxPQU9BeEIsRUFBQWhvQixVQUFBZ3BCLE1BQUEsV0FDUTdMLEVBQVkzYyxLQUFBbkIsT0FDcEJtQixLQUFBaXBCLGFBQUFULFFBRUF4b0IsS0FBQTBvQixrQkFBQUYsU0FJQWhCLEVBQUFob0IsVUFBQTBwQixLQUFBLFdBQ1F2TSxFQUFZM2MsS0FBQW5CLE9BQ3BCbUIsS0FBQWlwQixhQUFBQyxPQUVBbHBCLEtBQUEwb0Isa0JBQUFRLFFBSUExQixFQUFBaG9CLFVBQUEycEIsWUFBQSxXQUNBLElBQUFwRyxFQUFBL2lCLEtBQUFuQixNQUNBNmdCLEVBQUFxRCxFQUFBckQsVUFDQXVHLEVBQUFsRCxFQUFBa0QsV0FDQWtCLEVBQUFwRSxFQUFBb0UsVUFDQWlDLEVBQUFwcEIsS0FBQXFDLE1BQ0FqRyxFQUFBZ3RCLEVBQUFodEIsTUFDQXlpQixFQUFBdUssRUFBQXZLLFdBRUE3WSxFQUFnQnNWLEVBQUF2ZCxFQUFLaUYsY0FDckIsT0FDTWdlLEtBQ041aEIsSUFBQSxRQUNBK21CLFVBQUF6RyxFQUFBLG9CQUNBK0IsWUFBcUIxRSxFQUNyQnhELE1BQWUyRCxHQUNORyxHQUNUNEMsUUFBQWpnQixLQUFBcXBCLG1CQUVBbEMsR0FBbUI3TCxFQUFBdmQsRUFBS2lGLGNBQ3hCLEtBQ1NtakIsVUFBQXpHLEVBQUEsMEJBQ1QsTUFHQSxPQUFBdUcsRUFHUTVKLEVBQVVyYyxLQUFBbkIsT0FDbEJnZ0IsRUFDQTdZLEVBRUEsS0FFQTZZLEdBQUF6aUIsRUFBQTJDLE9BQ0FpSCxFQUVBLEtBWEEsTUFjQXdoQixFQUFBaG9CLFVBQUFvRCxPQUFBLFdBQ0EsSUFBQTBtQixFQUVBenFCLEVBQUFtQixLQUFBbkIsTUFDQTJkLEVBQW1CRCxFQUFnQjFkLEdBQ25Dd0QsRUFBQXJDLEtBQUFxQyxNQUNBOGpCLEVBQUF0bkIsRUFBQXNuQixVQUNBMUksRUFBQTVlLEVBQUE0ZSxTQUNBaUMsRUFBQTdnQixFQUFBNmdCLFVBQ0EwSCxFQUFBdm9CLEVBQUF1b0IsVUFFQW1DLEVBQUF2cEIsS0FBQXdwQix1QkFDQTFCLEVBQUE5bkIsS0FBQXFDLE1BQUF5bEIsS0FFQUEsSUFDQTluQixLQUFBeXBCLFNBQUF6cEIsS0FBQTBwQix1QkFFQSxJQUFBQyxFQUFBM3BCLEtBQUE0cEIsbUJBQ0FqRyxFQUFBM2pCLEtBQUF5cEIsYUFDQUksS0FDQSxRQUFBenFCLEtBQUFQLEdBQ0FBLEVBQUEyQyxlQUFBcEMsSUFBQSxVQUFBQSxFQUFBMHFCLE9BQUEsZ0JBQUExcUIsRUFBQTBxQixPQUFBLGVBQUExcUIsSUFDQXlxQixFQUFBenFCLEdBQUFQLEVBQUFPLElBR0EsSUFBQTJxQixFQUE4Qi9JLE9BQVc2SSxHQUNoQ25OLEVBQTBCN2QsS0FDbkNrckIsRUFBNEIvSSxPQUFXK0ksR0FDdkNDLFVBQUFocUIsS0FBQWdxQixVQUNBQyxTQUFBcHJCLEVBQUE0ZSxVQUFBLE9BR0EsSUFBQXlNLElBQUFaLE1BQWdDbkQsT0FBQW1ELEVBQUE1SixHQUFBLEVBQUE0SixFQUFBNUosRUFBQSxTQUFBb0ksRUFBQXdCLEVBQUE1SixFQUFBLFlBQUFvSSxLQUFBOW5CLEtBQUFtcUIsU0FBQWIsRUFBQTVKLEVBQUEsYUFBb01yRCxFQUFVeGQsR0FBQXlxQixFQUFBNUosRUFBQSxhQUFBakMsRUFBQTZMLEVBQUE1SixFQUFBLGFBQUFqQyxFQUFBNkwsRUFBQTVKLEVBQUEsa0JBQUE3Z0IsRUFBQW9uQixXQUFBcUQsRUFBQTVKLEVBQUEsY0FBQTdnQixFQUFBcW5CLFVBQUFvRCxHQUM5TyxPQUFXaE8sRUFBQXZkLEVBQUtpRixjQUNWd2lCLElBRU5oRSxhQUFBeGhCLEtBQUF3aEIsYUFDQWlGLGFBQUF6bUIsS0FBQW5CLE1BQUE0bkIsYUFDQUMsYUFBQTFtQixLQUFBbkIsTUFBQTZuQixhQUNBekQsY0FBQXBrQixFQUFBb2tCLGNBQ0FFLGtCQUFBdGtCLEVBQUFza0Isa0JBQ0FFLHlCQUFBeGtCLEVBQUF3a0IseUJBQ0E1RCx5QkFBQTVnQixFQUFBNGdCLHlCQUNBd0Isa0JBQUFwaUIsRUFBQW9pQixrQkFDQXFFLGVBQUF6bUIsRUFBQXltQixlQUNBQyxVQUFBMW1CLEVBQUEwbUIsVUFDQTdGLFVBQUE3Z0IsRUFBQTZnQixVQUNBMEQsY0FBQXZrQixFQUFBdWtCLGNBQ0E5RyxTQUFBemQsRUFBQXlkLFNBQ0E0RyxXQUFBcmtCLEVBQUFxa0IsV0FDQVMsVUFDQW5ILFdBQ0FpQixXQUNBcEksUUFBQXNVLEVBQ0E5SyxXQUFBeGMsRUFBQXdjLFdBQ0F6aUIsTUFBQWlHLEVBQUFqRyxNQUNBd2pCLGNBQUF2ZCxFQUFBdWQsY0FDQXhCLGlCQUFBdmYsRUFBQXVmLGlCQUNBaUcsd0JBQUFya0IsS0FBQXFrQix3QkFDQUksa0JBQUE1bEIsRUFBQTRsQixrQkFDQTlFLGFBQUEzZixLQUFBMmYsYUFDQUksZUFBQS9mLEtBQUErZixlQUNBNEIsY0FBQTlpQixFQUFBOGlCLGNBQ0FvQyxXQUFBbGxCLEVBQUFrbEIsV0FDQWpoQixJQUFBOUMsS0FBQW9vQixxQkFDQTVJLHFCQUFBM2dCLEVBQUEyZ0Isc0JBRU1sRSxFQUFBdmQsRUFBS2lGLGNBQ1gsT0FFQTBWLEdBQUE3WixFQUFBNlosR0FDQWEsTUFBQTFhLEVBQUEwYSxNQUNBelcsSUFBQTlDLEtBQUFxb0IsWUFDQTlCLE9BQUF2bUIsS0FBQW9xQixZQUNBN0ksUUFBQXZoQixLQUFBcXFCLGFBQ0FsRSxVQUFxQnpCLElBQVV3RixJQUV2QjVPLEVBQUF2ZCxFQUFLaUYsY0FDYixNQUNVZ2UsS0FDVmxlLElBQUE5QyxLQUFBc29CLGlCQUNBbHBCLElBQUEsWUFDQSttQixVQUFBekcsRUFBQSwyQkFBQUEsRUFBQSxnQkFBQWxELEVBQUEscUJBQ0EyRSxLQUFBLFdBQ0FtSixvQkFBQSxPQUNBQyxnQkFBQSxPQUNBQyxnQkFBQWIsR0FDV0ksR0FDWFIsRUFDQXZwQixLQUFBbXBCLGNBQ0EzTSxJQUFBM2QsRUFBQXFuQixVQUFBLEtBQWdENUssRUFBQXZkLEVBQUtpRixjQUNyRCxPQUNZZ2UsS0FDWjVoQixJQUFBLFFBQ0ErbUIsVUFBQXpHLEVBQUEsU0FDQW5HLE1BQXFCMkQsR0FDTkcsR0FDZjRDLFFBQUFqZ0IsS0FBQXlxQixlQUVBckQsR0FBeUI5TCxFQUFBdmQsRUFBS2lGLGNBQUEsS0FBcUJtakIsVUFBQXpHLEVBQUEscUJBT25EOEgsRUFqT1UsQ0FrT1JsTSxFQUFBdmQsRUFBS2dELFdBRVB3bUIsR0FBTXBtQixVQUFhNmtCLEdBQ25CdUIsR0FBTXZSLGNBQ04wSixVQUFBLFlBQ0FxSSxhQUFBLEVBQ0FqQyxjQUFBLEVBQ0FyRywwQkFBQSxFQUNBeUQsWUFBQSxFQUNBK0MsWUFBQSxFQUNBVyxZQUFBLEdBQ0FOLFNBQUFnQixHQUNBL0YsUUFBQStGLEdBQ0FmLE9BQUFlLEdBQ0F0SCxTQUFBc0gsR0FDQWQsU0FBQWMsR0FDQXhILFdBQUF3SCxHQUNBWCxlQUFBVyxHQUNBcEIsV0FBQSxFQUNBN0MsMEJBQUEsRUFDQUQsaUJBQ0FuQyxxQkFDQXZELGlCQUFBLFFBQ0EwSSxnQkFBQSxRQUNBc0UsZ0JBQUEsWUFDQUMsVUFBQSxFQUNBNUcsWUFBQSxTQUNBa0QsbUJBQ0EyRCxzQkFBQSxHQUdBckQsR0FBTXNELHlCQUFBLFNBQUEzTCxFQUFBM2MsR0FDTixJQUFBbWxCLEVBQUFubEIsRUFBQXlsQixxQkFBQXpsQixFQUFBbWxCLFlBQTZFSCxHQUFNSSx3QkFBQXpJLEVBQUEzYyxHQUVuRnVvQixHQUNBcEQsY0FDQU0sc0JBQUEsR0FPQSxHQUpBLFNBQUE5SSxJQUNBNEwsRUFBQWhELEtBQUE1SSxFQUFBNEksTUFHQSxVQUFBNUksRUFBQSxDQUNBLElBQUE5aUIsRUFBZ0JtckIsR0FBTUssa0JBQUExSSxHQUN0QjRMLEVBQUExdUIsUUFDQThpQixFQUFBNUMsV0FDQXdPLEVBQUFqTSxXQUE0QjBJLEdBQU1NLHlCQUFBM0ksRUFBQXdJLElBR2xDLE9BQUFvRCxHQUdBdkQsR0FBTXdELHVCQUFBLFNBQUExc0IsR0FDTixJQUFBc2xCLEVBQUFuakIsVUFBQXpCLE9BQUEsUUFBQXpDLElBQUFrRSxVQUFBLEdBQUFBLFVBQUEsTUFZQSxPQVZFOGEsRUFBQXZkLEVBQUtRLFNBQUFDLFFBQUFILEVBQUEsU0FBQTJkLEdBQ1BBLElBR0FBLEVBQUFySyxLQUFBc0ssaUJBQ01zTCxHQUFNd0QsdUJBQUEvTyxFQUFBbmQsTUFBQVIsU0FBQXNsQixHQUVaQSxFQUFBamxCLEtBQUFzZCxNQUdBMkgsR0FHQTRELEdBQU1NLHlCQUFBLFNBQUFocEIsRUFBQTZvQixFQUFBc0QsR0FDTixJQUFBNXVCLEtBT0EsR0FOQSxVQUFBeUMsSUFBQW1zQixJQUNBNXVCLEVBQVl3Z0IsRUFBTy9kLEVBQUF6QyxRQUVuQixpQkFBQXlDLEdBQUFtc0IsSUFDQTV1QixFQUFZd2dCLEVBQU8vZCxFQUFBZ29CLGdCQUVuQnpxQixFQUFBMkMsT0FHQSxTQUVBLElBQUFtZCxFQUpBOWYsSUFBQSxHQWFBLE9BUkF5QyxFQUFBaW5CLGFBQ0E1SixFQUFBOWYsRUFBQThmLE1BQ0d3TCxFQUFzQjVLLEVBQVMxZ0IsTUFDbEM4ZixFQUFBd0wsRUFBd0I1SyxFQUFTMWdCLElBQUE4ZixZQUVqQzVmLElBQUE0ZixJQUNBQSxFQUFBLElBRUFBLEdBR0FxTCxHQUFNMEQsbUJBQUEsU0FBQXBzQixFQUFBcXNCLEdBQ04sT0FBUzlPLEVBQVk4TyxFQUFBcnNCLEVBQUF1bkIsa0JBR3JCbUIsR0FBTUksd0JBQUEsU0FBQTlvQixFQUFBc3NCLEdBQ04sSUFDQXpELEtBVUEsR0FYZ0JILEdBQU13RCx1QkFBQWxzQixFQUFBUixVQUV0QkcsUUFBQSxTQUFBMHNCLEdBQ0EsSUFBQWpPLEVBQXNCbEIsRUFBaUJtUCxHQUN2Q3hELEVBQWdCNUssRUFBU0csS0FDekJpTyxTQUNBOXVCLE1BQUE2Z0IsRUFDQWYsTUFBYXFMLEdBQU0wRCxtQkFBQXBzQixFQUFBcXNCLEdBQ25CcFAsTUFBQW9QLEVBQUFyc0IsTUFBQWlkLFNBR0FxUCxFQUFBLENBRUEsSUFBQUMsRUFBQUQsRUFBQXpELFlBQ0F5RCxFQUFBL3VCLE1BQ0FvQyxRQUFBLFNBQUFnWSxHQUNBLElBQUFwWCxFQUFnQjBkLEVBQVN0RyxHQUN6QmtSLEVBQUF0b0IsU0FBQTlDLElBQUE4dUIsRUFBQWhzQixLQUNBc29CLEVBQUF0b0IsR0FBQWdzQixFQUFBaHNCLE1BSUEsT0FBQXNvQixHQUdBSCxHQUFNSyxrQkFBQSxTQUFBL29CLEVBQUFtc0IsR0FDTixJQUFBNXVCLEtBWUEsTUFYQSxVQUFBeUMsSUFBQW1zQixJQUNBNXVCLEVBQVl3Z0IsRUFBTy9kLEVBQUF6QyxRQUVuQixpQkFBQXlDLEdBQUFtc0IsSUFDQTV1QixFQUFZd2dCLEVBQU8vZCxFQUFBZ29CLGVBRW5CaG9CLEVBQUFpbkIsZUFDQTFwQixJQUFBNFIsSUFBQSxTQUFBd0ksR0FDQSxPQUFBQSxFQUFBcFgsT0FHQWhELEdBR0EsSUFBSXFyQixHQUFnQixXQUNwQixJQUFBOWtCLEVBQUEzQyxLQUVBQSxLQUFBcXJCLGNBQUEsU0FBQTdiLEdBQ0EsSUFBQXlYLEVBQUF0a0IsRUFBQTlELE1BQUFvb0IsZ0JBRUFxRSxFQUFBOWIsRUFBQTdSLE9BQUF2QixNQUNBLEdBQVFtZ0IsRUFBZ0I1WixFQUFBOUQsUUFBQW9vQixFQUFBbG9CLFFKdFJqQixTQUFBMGMsRUFBQThQLEdBQ1AsUUFBQXpzQixFQUFBLEVBQWlCQSxFQUFBeXNCLEVBQUF4c0IsU0FBdUJELEVBQ3hDLEdBQUEyYyxFQUFBK1AsWUFBQUQsRUFBQXpzQixJQUFBLEVBQ0EsU0FHQSxTSWdSb0Uyc0IsQ0FBa0JILEVBQUFyRSxHQUFBLENBQ3RGLElBQUF5RSxFQUFBL29CLEVBQUFncEIsZ0JBQUFMLEdBTUEsWUFMQWh2QixJQUFBb3ZCLEdBQ0Evb0IsRUFBQWlwQixXQUFBRixHQUVBL29CLEVBQUFrcEIsY0FBQSxXQUNBbHBCLEVBQUFtcEIsY0FBQSxPQUdBbnBCLEVBQUFtcEIsY0FBQVIsR0FDQTNvQixFQUFBMUYsVUFDQTZxQixNQUFBLElBRVF6TCxFQUFVMVosRUFBQTlELFFBQ2xCOEQsRUFBQWlwQixZQUFBTixLQUlBdHJCLEtBQUFxa0Isd0JBQUEsU0FBQXlELEdBQ0FBLElBQUFubEIsRUFBQXduQixXQUNBeG5CLEVBQUFvbUIsZ0JBQ0FwbUIsRUFBQW9wQixlQUNBcHBCLEVBQUF3bkIsVUFBQSxFQUNBeG5CLEVBQUFxcEIsd0JBRUFycEIsRUFBQWtwQixhQUFBL0QsSUFHQTluQixLQUFBZ3FCLFVBQUEsU0FBQXhhLEdBQ0EsSUFBQXNZLEVBQUFubEIsRUFBQU4sTUFBQXlsQixLQUdBLElBRkFubEIsRUFBQTlELE1BQUE0ZSxTQUVBLENBR0EsSUFBQTdOLEVBQUFKLEVBQUFJLFFBQ0FrWSxJQUFBbmxCLEVBQUErbEIsa0JBQ0EvbEIsRUFBQWdrQixlQUFBblgsR0FDS0ksSUFBc0JxYyxFQUFBLEVBQU9DLE9BQUF0YyxJQUFzQnFjLEVBQUEsRUFBT0UsT0FDL0RyRSxHQUFBbmxCLEVBQUFrcEIsY0FBQSxHQUNBcmMsRUFBQXFELG9CQUlBN1MsS0FBQTJtQixlQUFBLFNBQUFuWCxHQUNBLElBQUEzUSxFQUFBOEQsRUFBQTlELE1BQ0EsSUFBQUEsRUFBQTRlLFNBQUEsQ0FHQSxJQUFBcGIsRUFBQU0sRUFBQU4sTUFDQXVOLEVBQUFKLEVBQUFJLFFBQ0EsSUFBUTJNLEVBQWdCMWQsSUFBQTJRLEVBQUE3UixPQUFBdkIsT0FBQXdULElBQThDcWMsRUFBQSxFQUFPRyxVQUE3RSxDQVNBLEdBQUF4YyxJQUFvQnFjLEVBQUEsRUFBT0UsTUFDM0IsSUFBQTlwQixFQUFBeWxCLEtBSUEsT0FIQW5sQixFQUFBMHBCLG9CQUNBN2MsRUFBQXFELHNCQUNBckQsRUFBQXFDLHVCQUdLLEdBQUFqQyxJQUFzQnFjLEVBQUEsRUFBT0MsT0FBQTdwQixFQUFBeWxCLEtBR2xDdFksRUFBQXFELHNCQUNLLEdBQUFqRCxJQUFzQnFjLEVBQUEsRUFBT0ssSUFNbEMsWUFMQWpxQixFQUFBeWxCLE9BQ0FubEIsRUFBQWtwQixjQUFBLEdBQ0FyYyxFQUFBcUQsaUJBQ0FyRCxFQUFBcUMsb0JBS0EsR0FBQWxQLEVBQUFpbkIsaUJBQUF2bkIsR0FBQSxDQUNBLElBQUFrcUIsRUFBQTVwQixFQUFBNnBCLGlCQUFBeEgsZUFDQXVILEtBQUF2QyxVQUFBeGEsRUFBQTdNLEVBQUE4cEIsa0JBQ0FqZCxFQUFBcUQsaUJBQ0FyRCxFQUFBcUMsd0JBakNBLENBQ0FyQyxFQUFBcUQsaUJBQ0EsSUFBQXpXLEVBQUFpRyxFQUFBakcsTUFFQUEsRUFBQTJDLFFBQ0E0RCxFQUFBK3BCLGVBQUF0d0IsSUFBQTJDLE9BQUEsT0FpQ0FpQixLQUFBMmYsYUFBQSxTQUFBbkwsR0FDQSxJQUFBNEwsRUFBQTVMLEVBQUE0TCxLQUVBLEdBQUFBLEVBQUEsQ0FJQSxJQUFBaGtCLEVBQUF1RyxFQUFBTixNQUFBakcsTUFDQXlDLEVBQUE4RCxFQUFBOUQsTUFDQTh0QixFQUF3QjVRLEVBQWlCcUUsR0FDekNVLEVBQUExa0IsSUFBQTJDLE9BQUEsR0FFQSxHQURBNEQsRUFBQWlxQixXQUFBRCxHQUNRcFEsRUFBZ0IxZCxHQUFBLENBQ3hCLElBQXVDLElBQTdCbWUsRUFBNkI1Z0IsRUFBQXV3QixHQUN2QyxPQUVBdndCLElBQUFrVyxRQUFBcWEsUUFDSyxDQUNMLFFBQUFyd0IsSUFBQXdrQixPQUFBNkwsT0FBQWhxQixFQUFBTixNQUFBdWQsY0FFQSxZQURBamQsRUFBQWtwQixjQUFBLE1BR0F6dkIsR0FBQXV3QixHQUNBaHFCLEVBQUFrcEIsY0FBQSxNQUVBbHBCLEVBQUFpcEIsV0FBQXh2QixHQUNBLElBQUF5aUIsT0FBQSxFQUVBQSxFQURReEMsRUFBVXhkLEdBQ0N1ZCxFQUFZZ0UsRUFBQXZoQixFQUFBdW5CLGlCQUUvQixHQUVBdm5CLEVBQUErckIsc0JBQ0Fqb0IsRUFBQW1wQixjQUFBak4sR0FBQSxLQUlBN2UsS0FBQStmLGVBQUEsU0FBQThNLEdBQ0EsSUFBQXpNLEVBQUF5TSxFQUFBek0sS0FDQTBNLEVBQUFELEVBQUFDLFNBRUEsWUFBQUEsRUFBQW5iLE1BQUFtYixFQUFBbGQsVUFBNERxYyxFQUFBLEVBQU9DLE9BSW5FLFVBQUFZLEVBQUFuYixNQUNBaFAsRUFBQStwQixlQUE0QjNRLEVBQWlCcUUsSUFFN0N6ZCxFQUFBOUQsTUFFQStyQixzQkFDQWpvQixFQUFBbXBCLGNBQUEsUUFUQW5wQixFQUFBK3BCLGVBQTRCM1EsRUFBaUJxRSxLQWE3Q3BnQixLQUFBeXFCLGFBQUEsU0FBQXhzQixHQUNBQSxFQUFBNFQsa0JBQ0E1VCxFQUFBNFUsaUJBQ0FsUSxFQUFBOUQsTUFBQTRlLFVBQ0E5YSxFQUFBa3BCLGNBQUFscEIsRUFBQU4sTUFBQXlsQixNQUFBbmxCLEVBQUFOLE1BQUF5bEIsT0FJQTluQixLQUFBK3NCLG1CQUFBLFdBQ0FwcUIsRUFBQStsQixtQkFDQS9sQixFQUFBK2xCLGtCQUFBRixTQUlBeG9CLEtBQUFxcUIsYUFBQSxTQUFBcHNCLEdBQ0EwRSxFQUFBOUQsTUFBQTRlLFNBQ0F4ZixFQUFBNFUsa0JBR0FsUSxFQUFBb21CLGlCQUNTck0sRUFBMEIvWixFQUFBOUQsUUFBQVosRUFBQU4sU0FBQWdGLEVBQUErbEIscUJBR25DL2xCLEVBQUF3bkIsV0FHQXhuQixFQUFBd25CLFVBQUEsRUFDQXhuQixFQUFBcXBCLHVCQUNBcnBCLEVBQUFvcEIsbUJBR0EvckIsS0FBQXdoQixhQUFBLFdBRUE3ZSxFQUFBcXFCLFlBQUEsT0FHQWh0QixLQUFBb3FCLFlBQUEsU0FBQW5zQixHQUNBMEUsRUFBQTlELE1BQUE0ZSxTQUNBeGYsRUFBQTRVLGlCQUdBbFEsRUFBQXNxQixVQUFBdG1CLFdBQUEsV0FDQWhFLEVBQUF3bkIsVUFBQSxFQUNBeG5CLEVBQUFxcEIsdUJBQ0EsSUFBQW50QixFQUFBOEQsRUFBQTlELE1BQ0F6QyxFQUFBdUcsRUFBQU4sTUFBQWpHLE1BQ0F5aUIsRUFBQWxjLEVBQUFOLE1BQUF3YyxXQUVBLEdBQVVsQyxFQUFZOWQsTUFBQXFrQixZQUFBckUsR0FBQWhnQixFQUFBNGdCLHlCQUFBLENBQ3RCLElBQUFrRSxFQUFBaGhCLEVBQUE4bUIsYUFDQSxHQUFBOUYsRUFBQTVrQixPQUFBLENBQ0EsSUFBQW11QixFSnhlTyxTQUFBQyxFQUFBOXVCLEdBQ1AsUUFBQVMsRUFBQSxFQUFpQkEsRUFBQVQsRUFBQVUsT0FBcUJELElBQUEsQ0FDdEMsSUFBQWtkLEVBQUEzZCxFQUFBUyxHQUNBLEdBQUFrZCxFQUFBckssS0FBQTBPLGdCQUFBLENBQ0EsSUFBQStNLEVBQUFELEVBQUFuUixFQUFBbmQsTUFBQVIsVUFDQSxHQUFBK3VCLEVBQ0EsT0FBQUEsT0FFSyxJQUFBcFIsRUFBQW5kLE1BQUE0ZSxTQUNMLE9BQUF6QixFQUdBLFlJNGQ0Qm1SLENBQWlCeEosR0FDN0N1SixJQUNBOXdCLEdBQXFCMmYsRUFBaUJtUixJQUN0Q3ZxQixFQUFBaXBCLFdBQUF4dkIsVUFHaUJtZ0IsRUFBZ0IxZCxJQUFBZ2dCLElBRWpDbGMsRUFBQU4sTUFBQXdjLFdBQUFsYyxFQUFBK2xCLGtCQUFBdHNCLE1BQUEsUUFHQUUsS0FEQUYsRUFBQXVHLEVBQUFncEIsZ0JBQUE5TSxLQUVBbGMsRUFBQWlwQixXQUFBeHZCLElBR0F1RyxFQUFBa3BCLGNBQUEsR0FDQWh0QixFQUFBMG5CLE9BQUE1akIsRUFBQTBxQixpQkFBQWp4QixLQUNLLEtBR0w0RCxLQUFBcXBCLGlCQUFBLFNBQUE3WixHQUNBLElBQUEzUSxFQUFBOEQsRUFBQTlELE1BQ0F3RCxFQUFBTSxFQUFBTixNQUNBLElBQUF4RCxFQUFBNGUsU0FBQSxDQUdBLElBQUFvQixFQUFBeGMsRUFBQXdjLFdBQ0F6aUIsRUFBQWlHLEVBQUFqRyxNQUVBb1QsRUFBQXFDLG1CQUNBZ04sR0FBQXppQixFQUFBMkMsVUFDQTNDLEVBQUEyQyxRQUNBNEQsRUFBQWlwQixlQUVBanBCLEVBQUFrcEIsY0FBQSxNQUNBaE4sR0FDQWxjLEVBQUFtcEIsY0FBQSxPQUtBOXJCLEtBQUFzdEIsdUJBQUEsV0FDQTNxQixFQUFBa21CLG1CQUdBN29CLEtBQUF1dEIsMkJBQUEsU0FBQW54QixFQUFBc3JCLEdBQ0EsSUFBQThGLE9BQUEsRUFLQSxJQUpBOUYsS0FBQS9rQixFQUFBTixNQUFBcWxCLGFBQ29CNUssRUFBUzFnQixNQUM3Qm94QixFQUFBOUYsRUFBeUI1SyxFQUFTMWdCLEtBRWxDb3hCLEVBQ0EsT0FBQUEsRUFFQSxJQUFBQyxFQUFBcnhCLEVBQ0EsR0FBQXVHLEVBQUE5RCxNQUFBaW5CLGFBQUEsQ0FDQSxJQUFBNUosRUp4a0JPLFNBQUE5ZixFQUFBZ0QsR0FDUCxJQUFBOGMsT0FBQSxFQUNBOWYsRUFBVXdnQixFQUFPeGdCLEdBQ2pCLFFBQUEwQyxFQUFBLEVBQWlCQSxFQUFBMUMsRUFBQTJDLE9BQWtCRCxJQUNuQyxHQUFBMUMsRUFBQTBDLEdBQUFNLFFBQUEsQ0FDQThjLEVBQUE5ZixFQUFBMEMsR0FBQW9kLE1BQ0EsTUFHQSxPQUFBQSxFSStqQmtCd1IsQ0FBc0IvcUIsRUFBQTlELE1BQUF6QyxjQUN4Q0UsSUFBQTRmLElBQ0F1UixFQUFBdlIsR0FZQSxPQVJBZ1AsT0FBYzVQLEVBQUF2ZCxFQUFLaUYsY0FDWDRZLEdBQ0N4ZixRQUFBZ0QsSUFBQWhELEdBQ1RBLEdBRUFBLFFBQ0E4ZixNQUFBdVIsSUFLQXp0QixLQUFBMnRCLHVCQUFBLFNBQUF2eEIsR0FJQSxPQUhBdUcsRUFBQTRxQiwyQkFBQW54QixHQUNBOHVCLFFBS0FsckIsS0FBQTR0Qix3QkFBQSxTQUFBQyxHQUNBLE9BQUFBLEVBQUE3ZixJQUFBLFNBQUE1UixHQUNBLE9BQUF1RyxFQUFBZ3JCLHVCQUFBdnhCLE1BSUE0RCxLQUFBOHRCLGdCQUFBLFNBQUE1UixHQUNBLFFBQUE1ZixJQUFBNGYsRUFDQSxZQUVBLElBQUE5ZixFQUFBLEtBT0EsT0FOQUgsT0FBQTZILEtBQUFuQixFQUFBTixNQUFBcWxCLGFBQUFscEIsUUFBQSxTQUFBWSxHQUNBLElBQUFvdUIsRUFBQTdxQixFQUFBTixNQUFBcWxCLFlBQUF0b0IsR0FDVXdkLEVBQU80USxFQUFBdFIsT0FBQXlCLEtBQUEsTUFBQXpCLElBQ2pCOWYsRUFBQW94QixFQUFBcHhCLFNBR0FBLEdBR0E0RCxLQUFBK3RCLG1CQUFBLFNBQUEzeEIsR0FDQSxPQUFBdUcsRUFBQTlELE1BQUFpbkIsY0FFQTFtQixJQUFBaEQsRUFDQThmLE1BQUF2WixFQUFBcXJCLHNCQUFBNXhCLElBR0FBLEdBR0E0RCxLQUFBcXRCLGlCQUFBLFNBQUFZLEdBQ0EsSUFBQUMsRUFBQUQsRUFDQSxZQUFBM3hCLElBQUE0eEIsR0FNQUEsRUFMQXZyQixFQUFBOUQsTUFBQWluQixhQUtBb0ksRUFBQWxnQixJQUFBLFNBQUFtZ0IsR0FDQSxPQUNBL3VCLElBQUErdUIsRUFDQWpTLE1BQUF2WixFQUFBcXJCLHNCQUFBRyxNQVBBRCxFQUFBbGdCLElBQUEsU0FBQXdJLEdBQ0EsT0FBQUEsSUFVYStGLEVBQWdCNVosRUFBQTlELE9BQUFxdkIsSUFBQSxJQUU3QkEsR0FHQWx1QixLQUFBZ3VCLHNCQUFBLFNBQUE1eEIsRUFBQXNyQixHQUlBLE9BSEEva0IsRUFBQTRxQiwyQkFBQW54QixFQUFBc3JCLEdBQ0F4TCxPQUtBbGMsS0FBQW91QixxQkFBQSxXQUtBLE9BSkF6ckIsRUFBQXFtQixvQkFDQXJtQixFQUFBcW1CLGtCQUFBM2lCLFNBQUFyRCxjQUFBLE9BQ0FxRCxTQUFBc0ssS0FBQTBkLFlBQUExckIsRUFBQXFtQixvQkFFQXJtQixFQUFBcW1CLG1CQUdBaHBCLEtBQUFzdUIsc0JBQUEsV0FDQSxJQUFBenZCLEVBQUE4RCxFQUFBOUQsTUFDQXdELEVBQUFNLEVBQUFOLE1BRUFrc0IsR0FBQSxFQUNBbHNCLEVBQUF3YyxhQUNBMFAsR0FBQSxHQUVBbHNCLEVBQUFqRyxNQUFBMkMsU0FDQXd2QixHQUFBLEdBRVFsUyxFQUFVeGQsSUFBQSxJQUFBd0QsRUFBQWpHLE1BQUEyQyxTQUFBc0QsRUFBQWpHLE1BQUEsS0FDbEJteUIsR0FBQSxHQUVBLElBQUEzSCxFQUFBL25CLEVBQUErbkIsWUFDQSxPQUFBQSxFQUNhdEwsRUFBQXZkLEVBQUtpRixjQUNsQixNQUNRZ2UsS0FDUlMsWUFBdUIxRSxFQUN2QnhELE1BQWlCeUgsS0FDakJ3TixRQUFBRCxFQUFBLGdCQUNhclIsSUFDRkcsR0FDWDRDLFFBQUF0ZCxFQUFBb3FCLG1CQUNBNUcsVUFBQXRuQixFQUFBNmdCLFVBQUEsNEJBRUFrSCxHQUdBLE1BR0E1bUIsS0FBQWtuQixnQkFBQSxXQUNBLElBQUF1SCxFQUVBNXZCLEVBQUE4RCxFQUFBOUQsTUFDQTZ2QixFQUFBN3ZCLEVBQUFxb0IsZ0JBQUFyb0IsRUFBQXFvQixrQkFBeUU1TCxFQUFBdmQsRUFBS2lGLGNBQUEsU0FBeUIwVixHQUFBN1osRUFBQTZaLEdBQUFpVyxhQUFBLFFBQ3ZHQyxFQUFtQmxLLElBQVVnSyxFQUFBN3ZCLE1BQUFzbkIsWUFBQXNJLE1BQWdENXZCLEVBQUE2Z0IsVUFBQSxxQkFBQStPLElBRzdFLE9BQVduVCxFQUFBdmQsRUFBS2lGLGNBQ2hCLE9BQ09takIsVUFBQXRuQixFQUFBNmdCLFVBQUEsd0JBQ0RwRSxFQUFBdmQsRUFBSzh3QixhQUFBSCxHQUNYNXJCLElBQUFILEVBQUFzbEIsYUFDQTNCLFNBQUEzakIsRUFBQTBvQixjQUNBckIsVUE1d0JBLFdBQ0EsUUFBQXJWLEVBQUFuVSxVQUFBekIsT0FBQSt2QixFQUFBbGEsTUFBQUQsR0FBQUUsRUFBQSxFQUFnRUEsRUFBQUYsRUFBYUUsSUFDN0VpYSxFQUFBamEsR0FBQXJVLFVBQUFxVSxHQUdBLGtCQUNBLFFBQUFrYSxFQUFBdnVCLFVBQUF6QixPQUFBOEYsRUFBQStQLE1BQUFtYSxHQUFBQyxFQUFBLEVBQXNFQSxFQUFBRCxFQUFlQyxJQUNyRm5xQixFQUFBbXFCLEdBQUF4dUIsVUFBQXd1QixHQUtBLFFBQUFsd0IsRUFBQSxFQUFtQkEsRUFBQWd3QixFQUFBL3ZCLE9BQWdCRCxJQUNuQ2d3QixFQUFBaHdCLElBQUEsbUJBQUFnd0IsRUFBQWh3QixJQUNBZ3dCLEVBQUFod0IsR0FBQXlCLE1BQUFQLEtBQUE2RSxJQTh2QkFvcUIsQ0FBQXRzQixFQUFBZ2tCLGVBQUErSCxFQUFBN3ZCLE1BQUFtckIsVUFBQXJuQixFQUFBOUQsTUFBQThuQixnQkFDQXZxQixNQUFBdUcsRUFBQU4sTUFBQXdjLFdBQ0FwQixTQUFBNWUsRUFBQTRlLFNBQ0EwSSxVQUFBeUksSUFFTXRULEVBQUF2ZCxFQUFLaUYsY0FDWCxRQUVBRixJQUFBSCxFQUFBdWxCLG1CQUNBL0IsVUFBQXRuQixFQUFBNmdCLFVBQUEsMEJBRUEvYyxFQUFBTixNQUFBd2MsV0FDQSxPQUtBN2UsS0FBQTBvQixnQkFBQSxXQUNBLE9BQUEvbEIsRUFBQXVzQixXQUFBdnNCLEVBQUF1c0IsV0FBQUMsY0FBQSx1Q0FBQXhzQixFQUFBeXNCLFVBR0FwdkIsS0FBQTRvQixzQkFBQSxXQUNBLE9BQUFqbUIsRUFBQTBzQixnQkFHQXJ2QixLQUFBa2xCLGdCQUFBLFdBQ0EsT0FBQXZpQixFQUFBNnBCLGlCQUFBdEgsbUJBR0FsbEIsS0FBQXN2QixzQkFBQSxXQUNBLE9BQUEzc0IsRUFBQTZwQixpQkFBQXhILGdCQUdBaGxCLEtBQUE2ckIsYUFBQSxTQUFBL0QsRUFBQXlILEdBQ0EsSUFBQTF3QixFQUFBOEQsRUFBQTlELE1BR0EsR0FGQThELEVBQUFOLE1BRUF5bEIsU0FBQSxDQUtBbmxCLEVBQUE5RCxNQUFBd2xCLHlCQUNBMWhCLEVBQUE5RCxNQUFBd2xCLHdCQUFBeUQsR0FHQSxJQUFBM2xCLEdBQ0EybEIsT0FDQWxJLG1CQUFBdGpCLElBR0F3ckIsR0FBaUJuTCxFQUFZOWQsTUFBQXFrQixZQUM3QnZnQixFQUFBbXBCLGNBQUEsT0FFQWhFLEdBQ0FubEIsRUFBQXFxQixXQUFBbEYsRUFBQXlILEdBRUE1c0IsRUFBQTFGLFNBQUFrRixFQUFBLFdBQ0EybEIsR0FDQW5sQixFQUFBcXFCLFdBQUFsRixFQUFBeUgsVUFyQkE1c0IsRUFBQXFxQixXQUFBbEYsRUFBQXlILElBMEJBdnZCLEtBQUE4ckIsY0FBQSxTQUFBak4sR0FDQSxJQUFBMlEsSUFBQWh2QixVQUFBekIsT0FBQSxRQUFBekMsSUFBQWtFLFVBQUEsS0FBQUEsVUFBQSxHQUVBcWUsSUFBQWxjLEVBQUFOLE1BQUF3YyxhQUNBbGMsRUFBQTFGLFVBQ0E0aEIsY0FDT2xjLEVBQUFrbUIsaUJBQ1AyRyxHQUNBN3NCLEVBQUE5RCxNQUFBMm5CLFNBQUEzSCxLQUtBN2UsS0FBQTJyQixnQkFBQSxTQUFBbFEsR0FDQSxJQUFBZ1UsRUFBQTlzQixFQUFBOUQsTUFDQTJkLEVBQUFpVCxFQUFBalQsU0FDQXlLLEVBQUF3SSxFQUFBeEksZ0JBRUF5RSxFQUFBL29CLEVBQUFOLE1BQUFqRyxNQUNBc3pCLEdBQUEsRUFtQkEsT0p0dkJPLFNBQUFqVSxFQUFBOFAsR0FDUCxJQUFBamMsRUFBQSxJQUFBcWdCLE9BQUEsSUFBQXBFLEVBQUE1TixPQUFBLEtBQ0EsT0FBQWxDLEVBQUFtVSxNQUFBdGdCLEdBQUE1RyxPQUFBLFNBQUFtbkIsR0FDQSxPQUFBQSxJSWl1QklDLENBQWlCclUsRUFBQXdMLEdBQUF6b0IsUUFBQSxTQUFBMGQsR0FDckIsSUFBQXlRLEdBQUF6USxHQUNBLEdBQUFNLEVBQUEsQ0FDQSxJQUFBcGdCLEVBQUF1RyxFQUFBbXJCLGdCQUFBNVIsR0FDQTlmLElBQWtELElBQTdCNGdCLEVBQTZCME8sRUFBQXR2QixLQUNsRHN2QixJQUFBcFosT0FBQWxXLEdBQ0FzekIsR0FBQSxFQUNBL3NCLEVBQUFpcUIsV0FBQXh3QixTQUl5QyxJQUE3QjRnQixFQUE2QjBPLEVBQUF4UCxLQUN6Q3dQLElBQUFwWixPQUFBcWEsR0FDQStDLEdBQUEsRUFDQS9zQixFQUFBaXFCLFdBQUExUSxNQUlBd1QsRUFBQWhFLE9BQUFwdkIsR0FHQTBELEtBQUE0cEIsaUJBQUEsU0FBQXZuQixHQUNBLElBQUF5bEIsR0FBQXpsQixHQUFBTSxFQUFBTixPQUFBeWxCLEtBQ0FuRSxFQUFBaGhCLEVBQUE4bUIsYUFNQSxPQUxRL00sRUFBMEIvWixFQUFBOUQsUUFBQThELEVBQUE5RCxNQUFBcWtCLFlBQ2xDNEUsSUFBQW5FLEVBQUE1a0IsU0FDQStvQixHQUFBLEdBR0FBLEdBR0E5bkIsS0FBQXlzQixlQUFBLFNBQUFyTSxHQUNBLEdBQUF6ZCxFQUFBOUQsTUFBQThyQixXQUFvQ2hPLEVBQVloYSxFQUFBOUQsUUFBa0J3ZCxFQUFVMVosRUFBQTlELFFBQTVFLENBSUEsSUFBQU8sRUFBYzJjLEVBQWlCcUUsR0FFdkIvRCxFQUFVMVosRUFBQTlELFFBQ2xCOEQsRUFBQW1wQixjQUFBMXNCLEdBQUEsR0FHQXVELEVBQUExRixVQUNBYixPQUFBZ0QsR0FDQXdnQixjQUFBeGdCLE1BSUFZLEtBQUEya0IsYUFBQSxTQUFBbkgsRUFBQXhCLEdBQ0EsSUFBQStULEVBQUF2dkIsVUFBQXpCLE9BQUEsUUFBQXpDLElBQUFrRSxVQUFBLEdBQUFBLFVBQUEsR0FBNEYrYyxFQUM1Rm5oQixFQUFBdUcsRUFBQU4sTUFBQWpHLE1BRUEwa0IsRUFBQTFrQixJQUFBMkMsT0FBQSxHQUNBLElBQUF5ZSxHQUFBc0QsT0FBQW5lLEVBQUFOLE1BQUF1ZCxjQUNBLFNBRUEsSUFBQW9RLEVBQUFydEIsRUFBQTlELE1BQUE4bEIsYUFTQSxNQVJBLGlCQUFBaGlCLEVBQUE5RCxPQUNBLElBQUE4RCxFQUFBOUQsTUFBQThsQixlQUNBcUwsRUFBQUQsR0FHQUMsRUFBQUQsR0FHQUMsSUFFSyxtQkFBQUEsRUFDTEEsRUFBQTl2QixLQUFBeUMsRUFBQTZhLEVBQUF4QixJQUNLQSxFQUFBbmQsTUFBQTRlLFdBTUx6ZCxLQUFBK3JCLGFBQUEsV0FDQXBwQixFQUFBc3RCLFlBQ0F0dEIsRUFBQW1tQixpQkFFQW5tQixFQUFBc3RCLFdBQUF0cEIsV0FBQSxXQUNBaEUsRUFBQTlELE1BQUEwaUIsV0FDSyxLQUdMdmhCLEtBQUE4b0IsZUFBQSxXQUNBbm1CLEVBQUFzdEIsYUFDQTVXLGFBQUExVyxFQUFBc3RCLFlBQ0F0dEIsRUFBQXN0QixXQUFBLE9BSUFqd0IsS0FBQStvQixjQUFBLFdBQ0FwbUIsRUFBQXNxQixZQUNBNVQsYUFBQTFXLEVBQUFzcUIsV0FDQXRxQixFQUFBc3FCLFVBQUEsT0FJQWp0QixLQUFBZ3NCLHFCQUFBLFdBQ0EsSUFBQWtFLEVBQUF2dEIsRUFBQXV0QixRQUNBcnhCLEVBQUE4RCxFQUFBOUQsTUFHQThELEVBQUF3bkIsU0FDTWdHLElBQU9ELEdBQUFFLElBQUF2eEIsRUFBQTZnQixVQUFBLFlBRVB5USxJQUFPRCxHQUFBdmhCLE9BQUE5UCxFQUFBNmdCLFVBQUEsYUFJYjFmLEtBQUFndEIsV0FBQSxTQUFBbEYsRUFBQXlILEdBQ0EsR0FBQUEsR0FBQXpILEVBQUEsQ0FDQSxJQUFBdEssRUFBQTdhLEVBQUErbEIsa0JBRUEySCxFQURBaHFCLFNBQ0FncUIsY0FFQTdTLElBQUFzSyxHQUE0QnBMLEVBQTBCL1osRUFBQTlELFFBQ3REd3hCLElBQUE3UyxJQUNBQSxFQUFBZ0wsUUFDQTdsQixFQUFBd25CLFVBQUEsR0FHQWtHLElBQUExdEIsRUFBQXNtQixlQUNBdG1CLEVBQUFzbUIsYUFBQVQsUUFDQTdsQixFQUFBd25CLFVBQUEsS0FNQW5xQixLQUFBMHNCLGVBQUEsU0FBQTRELEVBQUFyeUIsR0FDQSxJQUFBWSxFQUFBOEQsRUFBQTlELE1BQ0EsSUFBQUEsRUFBQTRlLFdBQUE5YSxFQUFBNHRCLGdCQUFBRCxHQUFBLENBS0FyeUIsS0FBQTRULGlCQUNBNVQsRUFBQTRULGtCQUdBLElBQUF6VixFQUFBdUcsRUFBQU4sTUFBQWpHLE1BQUFzTSxPQUFBLFNBQUF1VSxHQUNBLE9BQUFBLElBQUFxVCxJQUlBLEdBRnNCL1QsRUFBZ0IxZCxHQUV0QyxDQUNBLElBQUEyUSxFQUFBOGdCLEVBQ0F6eEIsRUFBQWluQixlQUNBdFcsR0FDQXBRLElBQUFreEIsRUFDQXBVLE1BQUF2WixFQUFBcXJCLHNCQUFBc0MsS0FHQXp4QixFQUFBaWhCLFdBQUF0USxFQUFBN00sRUFBQWdyQix1QkFBQTJDLElBRUEzdEIsRUFBQWlwQixXQUFBeHZCLEtBR0E0RCxLQUFBcXNCLGtCQUFBLFdBQ0EsSUFBQXh0QixFQUFBOEQsRUFBQTlELE9BQ1F5YyxFQUFBdmQsRUFBS1EsU0FBQWl5QixNQUFBM3hCLEVBQUFSLFdBQW1Dc2UsRUFBWTlkLEtBQzVEOEQsRUFBQWtwQixjQUFBLElBSUE3ckIsS0FBQTRzQixXQUFBLFNBQUF4d0IsR0FDQXVHLEVBQUE5RCxNQUFBbWhCLFNBQUFyZCxFQUFBb3JCLG1CQUFBM3hCLEdBQUF1RyxFQUFBZ3JCLHVCQUFBdnhCLEtBR0E0RCxLQUFBNHJCLFdBQUEsU0FBQXh2QixHQUNBLElBQUF5QyxFQUFBOEQsRUFBQTlELE1BQ0EsVUFBQUEsR0FDQThELEVBQUExRixVQUNBYixTQUNPdUcsRUFBQWttQixpQkFFUCxJQUFBcUYsRUFBQXZyQixFQUFBMHFCLGlCQUFBanhCLEdBQ0F1bkIsRUFBQWhoQixFQUFBaXJCLHdCQUFBeHhCLEdBQ0F5QyxFQUFBeW5CLFNBQUE0SCxFQUF3QjNSLEVBQWdCNVosRUFBQTlELE9BQUE4a0IsSUFBQSxLQUd4QzNqQixLQUFBdXdCLGdCQUFBLFNBQUFueEIsR0FDQSxPQUFXbkQsT0FBQWlDLEVBQUEsRUFBQWpDLENBQWUwRyxFQUFBOUQsTUFBQVIsVUFBQWdILEtBQUEsU0FBQTJXLEdBRTFCLE9BRHVCRCxFQUFpQkMsS0FDeEM1YyxHQUFBNGMsRUFBQW5kLE9BQUFtZCxFQUFBbmQsTUFBQTRlLFlBSUF6ZCxLQUFBNm9CLGdCQUFBLFdBQ0FsbUIsRUFBQU4sTUFBQXlsQixNQUdBbmxCLEVBQUE2cEIsaUJBQUFySCxXQUFBMEQsbUJBR0E3b0IsS0FBQTBwQixvQkFBQSxXQUNBLElBQUE3SyxFQUFBbGMsRUFBQU4sTUFBQXdjLFdBQ0E0UixFQUFBOXRCLEVBQUE5RCxNQUNBUixFQUFBb3lCLEVBQUFweUIsU0FDQW9lLEVBQUFnVSxFQUFBaFUsS0FDQWtJLEVBQUE4TCxFQUFBOUwsYUFDQStGLEVBQUErRixFQUFBL0YsZ0JBRUFuTCxLQUNBbVIsS0FDQS9NLEVBQUFoaEIsRUFBQWd1QixnQ0FBQXR5QixFQUFBcXlCLEVBQUFuUixHQUNBLEdBQUE5QyxFQUFBLENBRUEsSUFBQXJnQixFQUFBdUcsRUFBQU4sTUFBQWpHLE1Bb0JBLElBbkJBQSxJQUFBc00sT0FBQSxTQUFBdVUsR0FDQSxXQUFBeVQsRUFBQWhzQixRQUFBdVksTUFBQTRCLEdBQUErUixPQUFBM1QsR0FBQXZZLFFBQUFrc0IsT0FBQS9SLEtBQUEsTUFFQXJnQixRQUFBLFNBQUF5ZSxHQUNBLElBQUE3ZCxFQUFBNmQsRUFDQTRULEVBQXVCdlYsRUFBQXZkLEVBQUtpRixjQUNsQitkLEVBQUEsR0FFVnhILE1BQW1CMkQsRUFDbkJpRSxLQUFBLFNBQ0EyUCxVQUF1QnpULEVBQ3ZCamhCLE1BQUFnRCxFQUNBQSxPQUVBQSxHQUVBdWtCLEVBQUFqbEIsS0FBQW15QixHQUNBdFIsRUFBQTdnQixLQUFBbXlCLEtBRUFoUyxFQUNBVSxFQUFBd1IsTUFBQSxTQUFBN0YsR0FLQSxJQUFBOEUsRUFBQSxXQUNBLE9BQW1CalUsRUFBaUJtUCxLQUFBck0sR0FFcEMsV0FBQThGLEdBQ0FoaUIsRUFBQWdpQixhQUFBemtCLEtBQUF5QyxFQUFBa2MsRUFBQXFNLEVBQUE4RSxJQUVBQSxPQUdBck0sRUFBQXFOLFFBQTBCMVYsRUFBQXZkLEVBQUtpRixjQUNuQitkLEVBQUEsR0FFWnhILE1BQXFCMkQsRUFDckJpRSxLQUFBLFNBQ0EyUCxVQUF5QnpULEVBQ3pCamhCLE1BQUF5aUIsRUFDQXpmLElBQUF5ZixHQUVBQSxJQW9CQSxPQWRBOEUsRUFBQTVrQixRQUFBMnJCLElBQ0EvRyxHQUFpQnJJLEVBQUF2ZCxFQUFLaUYsY0FDZCtkLEVBQUEsR0FFUnhILE1BQWlCMkQsRUFDakI0VCxVQUFxQnpULEVBQ3JCSSxVQUFBLEVBQ0EwRCxLQUFBLFNBQ0Eva0IsTUFBQSxZQUNBZ0QsSUFBQSxhQUVBc3JCLEtBR0EvRyxHQUdBM2pCLEtBQUEyd0IsZ0NBQUEsU0FBQXR5QixFQUFBcXlCLEVBQUFuUixHQUNBLElBQUEwUixLQUNBcHlCLEVBQUE4RCxFQUFBOUQsTUFDQWdnQixFQUFBbGMsRUFBQU4sTUFBQXdjLFdBRUFwQyxFQUFBNWQsRUFBQTRkLEtBK0NBLE9BOUNJbkIsRUFBQXZkLEVBQUtRLFNBQUFDLFFBQUFILEVBQUEsU0FBQTJkLEdBQ1QsR0FBQUEsRUFHQSxHQUFBQSxFQUFBckssS0FBQXNLLGlCQUFBLENBQ0EsSUFBQWlWLEVBQUF2dUIsRUFBQWd1QixnQ0FBQTNVLEVBQUFuZCxNQUFBUixTQUFBcXlCLEVBQUFuUixHQUNBLEdBQUEyUixFQUFBbnlCLE9BQUEsQ0FDQSxJQUFBbWQsRUFBQUYsRUFBQW5kLE1BQUFxZCxNQUNBOWMsRUFBQTRjLEVBQUE1YyxJQUNBQSxHQUFBLGlCQUFBOGMsR0FFV0EsR0FBQTljLElBQ1g4YyxFQUFBOWMsR0FGQUEsRUFBQThjLEVBSUErVSxFQUFBdnlCLEtBQW1CNGMsRUFBQXZkLEVBQUtpRixjQUNaK2QsRUFBQSxHQUNDM2hCLE1BQUEwYyxNQUFBSSxHQUNiZ1YsU0FiQSxDQW1CTUMsSUFBT25WLEVBQUFySyxLQUFBZ0ssZUFBQSx5RkFBQUssRUFBQXJLLEtBQUF6TyxNQUFBOFksRUFBQXJLLEtBQUExTyxhQUFBK1ksRUFBQXJLLE1BQUEsTUFFYixJQUFBeWYsRUFBdUJyVixFQUFpQkMsR0FJeEMsR0o3Z0NPLFNBQUE1ZixFQUFBeUMsR0FDUCxJQUFBOGQsRUFBQTlkLEtBaklPLFNBQUFBLEdBQ1AsT0FBQUEsRUFBQTJkLFNBZ0lBNlUsQ0FBQXh5QixJQUdBLGlCQUFBekMsRUFDQSxVQUFBK2YsTUFBQSxtQ0FBQS9mLEVBQUEsMkVJc2dDTWsxQixDQUFtQkYsRUFBQXp1QixFQUFBOUQsT0FFekI4RCxFQUFBZ2lCLGFBQUE5RixFQUFBN0MsR0FBQSxDQUNBLElBQUE2VSxFQUF1QnZWLEVBQUF2ZCxFQUFLaUYsY0FBZStkLEVBQUEsRUFBVUMsS0FDckR6SCxNQUFpQjJELEVBQ2pCNFQsVUFBcUJ6VCxFQUNyQmpoQixNQUFBZzFCLEVBQ0FoeUIsSUFBQWd5QixFQUNBalEsS0FBQSxVQUNTbkYsRUFBQW5kLFFBQ1RveUIsRUFBQXZ5QixLQUFBbXlCLEdBQ0F0UixFQUFBN2dCLEtBQUFteUIsR0FHQXBVLEdBQ0FpVSxFQUFBaHlCLEtBQUEweUIsTUFJQUgsR0FHQWp4QixLQUFBd3BCLHFCQUFBLFdBQ0EsSUFBQStILEVBQUE1dUIsRUFBQU4sTUFDQWpHLEVBQUFtMUIsRUFBQW4xQixNQUNBMHJCLEVBQUF5SixFQUFBekosS0FDQWpKLEVBQUEwUyxFQUFBMVMsV0FFQWhnQixFQUFBOEQsRUFBQTlELE1BQ0F3bkIsRUFBQXhuQixFQUFBd25CLHFCQUNBM0csRUFBQTdnQixFQUFBNmdCLFVBQ0FvSCxFQUFBam9CLEVBQUFpb0IsaUJBQ0FDLEVBQUFsb0IsRUFBQWtvQixZQUNBQyxFQUFBbm9CLEVBQUFtb0Isa0JBQ0E5RCxFQUFBcmtCLEVBQUFxa0IsV0FDQW1FLEVBQUF4b0IsRUFBQXdvQixXQUVBbEIsRUFBQXpHLEVBQUEsdUJBRUE4UixFQUFBLEtBQ0EsR0FBUTdVLEVBQVk5ZCxHQUFBLENBQ3BCLElBQUE4dEIsRUFBQSxLQUNBLEdBQUF2d0IsRUFBQTJDLE9BQUEsQ0FDQSxJQUFBMHlCLEdBQUEsRUFDQUMsRUFBQSxFQUNBeE8sR0FHQTRFLEdBQ0EySixHQUFBNVMsS0FFQTZTLEVBQUEsSUFMQUQsR0FBQSxFQVdBLElBQUF4VSxFQUFBN2dCLEVBQUEsR0FFQXUxQixFQUFBaHZCLEVBQUE0cUIsMkJBQUF0USxHQUNBZixFQUFBeVYsRUFBQXpWLE1BQ0FKLEVBQUE2VixFQUFBN1YsTUFFQTZRLEVBQXdCclIsRUFBQXZkLEVBQUtpRixjQUM3QixPQUVBNUQsSUFBQSxRQUNBK21CLFVBQUF6RyxFQUFBLDRCQUNBNUQsTUFBbUJELEVBQU9DLEdBQUFJLEdBQzFCM0MsT0FDQWlWLFFBQUFpRCxFQUFBLGVBQ0FDLFlBR0F4VixHQU1Bc1YsRUFIQXRPLEdBR0F5SixFQUFvQ3JSLEVBQUF2ZCxFQUFLaUYsY0FDekMsT0FFQW1qQixVQUFBekcsRUFBQSxXQUFBQSxFQUFBLGtCQUNBdGdCLElBQUEsUUFDQW1hLE9BQ0FpVixRQUFBMUcsRUFBQSxpQkFHQW5sQixFQUFBdWtCLHFCQVhBeUYsT0FjSyxDQUNMLElBQUFpRixLQUNBQyxFQUFBejFCLEVBQ0EwMUIsT0FBQSxFQUNBLFFBQUF4MUIsSUFBQXlxQixHQUFBM3FCLEVBQUEyQyxPQUFBZ29CLEVBQUEsQ0FDQThLLElBQUEvc0IsTUFBQSxFQUFBaWlCLEdBQ0EsSUFBQWdMLEVBQUFwdkIsRUFBQTBxQixpQkFBQWp4QixFQUFBMEksTUFBQWlpQixFQUFBM3FCLEVBQUEyQyxTQUNBaXpCLEVBQUEsTUFBQTUxQixFQUFBMkMsT0FBQWdvQixHQUFBLE9BQ0FDLElBQ0FnTCxFQUFBLG1CQUFBaEwsSUFBQStLLEdBQUEvSyxHQUVBOEssRUFBOEJ4VyxFQUFBdmQsRUFBS2lGLGNBQ25DLEtBQ1VnZSxLQUNWekgsTUFBbUIyRCxHQUNORyxHQUNib0UsWUFBeUIxRSxFQUN6Qm9KLFVBQUF6RyxFQUFBLHNCQUFBQSxFQUFBLCtCQUNBdGdCLElBQUEsb0JBQ0EwYyxNQUFtQkQsRUFBT21XLEtBRWhCMVcsRUFBQXZkLEVBQUtpRixjQUNmLE9BQ2FtakIsVUFBQXpHLEVBQUEsK0JBQ2JzUyxJQUlVelYsRUFBZ0IxZCxLQUMxQit5QixFQUFBQyxFQUFBN2pCLElBQUEsU0FBQWlQLEdBQ0EsSUFBQXVRLEVBQUE3cUIsRUFBQTRxQiwyQkFBQXRRLEdBQ0ErVSxFQUFBeEUsRUFBQXRSLE1BQ0FKLEVBQUEwUixFQUFBMVIsT0FBQWtXLEVBQ0FsTCxHQUFBLGlCQUFBa0wsS0FBQWp6QixPQUFBK25CLElBQ0FrTCxJQUFBbHRCLE1BQUEsRUFBQWdpQixHQUFBLE9BRUEsSUFBQXJKLEVBQUE5YSxFQUFBNHRCLGdCQUFBdFQsR0FDQWdWLEVBQUF4VSxFQUFBaUMsRUFBQSxzQkFBQUEsRUFBQSwrQkFBQUEsRUFBQSxxQkFDQSxPQUFpQnBFLEVBQUF2ZCxFQUFLaUYsY0FDdEIsS0FDWWdlLEtBQ1p6SCxNQUFxQjJELEdBQ05HLEdBQ2ZvRSxZQUEyQjFFLEVBQzNCb0osVUFBQThMLEVBQ0E3eUIsSUFBQTZkLEVBQ0FuQixNQUFxQkQsRUFBT0MsS0FFaEJSLEVBQUF2ZCxFQUFLaUYsY0FDakIsT0FDZW1qQixVQUFBekcsRUFBQSwrQkFDZnNTLEdBRUF2VSxFQUFBLEtBQThCbkMsRUFBQXZkLEVBQUtpRixjQUNuQyxRQUVBaWQsUUFBQSxTQUFBelEsR0FDQTdNLEVBQUErcEIsZUFBQXpQLEVBQUF6TixJQUVBMlcsVUFBQXpHLEVBQUEsOEJBRUEySCxHQUE0Qi9MLEVBQUF2ZCxFQUFLaUYsY0FDakMsS0FDaUJtakIsVUFBQXpHLEVBQUEsbUNBQ2pCLFVBTUFvUyxHQUNBRixFQUFBbHpCLEtBQUFvekIsR0FFQUYsRUFBQWx6QixLQUE4QjRjLEVBQUF2ZCxFQUFLaUYsY0FDbkMsTUFFQW1qQixVQUFBekcsRUFBQSxXQUFBQSxFQUFBLGtCQUNBdGdCLElBQUEsV0FFQXVELEVBQUF1a0Isb0JBSUFzSyxFQURValYsRUFBZ0IxZCxJQUFBd25CLEVBQ04vSyxFQUFBdmQsRUFBS2lGLGNBQ2ZrdkIsRUFBQSxHQUVWQyxRQUFBeHZCLEVBQUEycUIsdUJBQ0E4RSxVQUFBLEtBQ0E5TSxlQUFBZSxHQUVBdUwsR0FHb0J0VyxFQUFBdmQsRUFBS2lGLGNBQ3pCLEtBQ0EsS0FDQTR1QixHQUlBLE9BQVd0VyxFQUFBdmQsRUFBS2lGLGNBQ2hCLE9BQ09takIsWUFBQXJqQixJQUFBSCxFQUFBd2xCLGdCQUNQeGxCLEVBQUEyckIsd0JBQ0FrRCxLQUtBakssR0FBTXRrQixZQUFBLFNBRU5oSCxPQUFBbzJCLEVBQUEsU0FBQXAyQixDQUFTc3JCLElBRU0sSUFBQStLLEdBQUEsR0NyM0NYQyxHQUFRLFNBQUFoZSxHQUdaLFNBQUFpZSxJQUdBLE9BRklyWCxJQUFlbmIsS0FBQXd5QixHQUVScFgsSUFBMEJwYixLQUFBdVUsRUFBQWhVLE1BQUFQLEtBQUFRLFlBR3JDLE9BUkU2YSxJQUFTbVgsRUFBQWplLEdBUVhpZSxFQVRZLENBVVZsWCxFQUFBdmQsRUFBS2dELFdBRVB3eEIsR0FBUXRXLGtCQUFBLEVBQ08sSUFBQXdXLEdBQUEsR0NkZkgsR0FBTXBYLE9BQVVVLEVBQ2hCMFcsR0FBTUUsU0FBWUMsR0FFSCxJQUFBQyxHQUFBLEdDQ1hDLEdBQWMsU0FBQXBlLEdBR2xCLFNBQUFxZSxJQUdBLE9BRlF6WCxJQUFlbmIsS0FBQTR5QixHQUVSeFgsSUFBMEJwYixNQUFBNHlCLEVBQUF2eUIsV0FBQXBFLE9BQUFxRSxlQUFBc3lCLElBQUFyeUIsTUFBQVAsS0FBQVEsWUFpQ3pDLE9BdENJNmEsSUFBU3VYLEVBQUFyZSxHQVFUc2UsSUFBWUQsSUFDaEJ4ekIsSUFBQSxZQUNBaEQsTUFBQSxXQUNBLElBQUEybUIsRUFBQS9pQixLQUFBbkIsTUFDQThtQixFQUFBNUMsRUFBQTRDLGNBQ0FtTixFQUFBL1AsRUFBQStQLGNBQ0FDLEVBQUEveUIsS0FBQStCLFFBQUFneEIsVUFFQUMsRUFBQUQsS0FBQXBOLEdBQ0EsT0FBbUIzRSxPQUFXLG1CQUFBOFIsUUFBQUUsVUFHOUI1ekIsSUFBQSxnQkFDQWhELE1BQUEsV0FDQSxJQUFBMjJCLEVBQUEveUIsS0FBQStCLFFBQUFneEIsVUFFQUUsRUFBQUYsS0FBQUcsT0FFQSxPQUFBSCxLQUFBSSxRQUFBRixFQUNBLFFBRUFBLEtBR0E3ekIsSUFBQSxTQUNBaEQsTUFBQSxXQUNBLE9BQUE0RCxLQUFBbkIsTUFBQVIsU0FBQTJCLEtBQUFvekIsWUFBQXB6QixLQUFBcXpCLHFCQUlBVCxFQXZDa0IsQ0F3Q2hCL1IsRUFBQSxXQUVheVMsR0FBQSxHQUVmWCxHQUFjdnZCLGNBQ2QydkIsVUFBZVEsRUFBQSxRQ3JEQSxjQ0dBQyxJQUZmNU0sWUFBQSxlQ0dJNk0sSUFDSkMsS0FBVTFTLEtBQVU0RixZQUFBLGNBQUErTSxrQkFBQSwwQkFBNkVDLEdBQUEsR0FDakdDLGlCQUFzQjdTLE9BQWF3UyxLQ0ZwQk0sSUFDZlosT0FBQSxLQUNBYSxZSEpBQyxlQUFBLFNBQ0FDLFFBQUEsT0FDQUMsZ0JBQUEsVUFDQUMsS0FBQSxHQUdBQyxVQUFBLGdCQUNBQyxVQUFBLFlBQ0FDLE9BQUEsbUJBQ0FDLE9BQUEsZUFDQUMsT0FBQSxtQkFDQUMsT0FBQSxnQkdOQUMsV0RHZSxHQ0ZmQyxXQUFnQm5CLEdBQ2hCb0IsU0RDZSxHQ0FmQyxPQUNBQyxZQUFBLGNBQ0FDLGNBQUEsS0FDQUMsWUFBQSxRQUNBQyxVQUFBLFVBQ0FDLFVBQUEsc0JBQ0FDLGFBQUEsdUJBRUFDLE9BQ0FDLE9BQUEsS0FDQUMsV0FBQSxTQUNBQyxXQUFBLE1BRUFDLFlBQ0FILE9BQUEsS0FDQUMsV0FBQSxVQUVBRyxVQUNBQyxRQUFBLE9BQ0FoTCxnQkFBQSxZQUNBaUwsa0JBQUEsY0FDQUMsU0FBQSxPQUNBQyxVQUFBLFNBRUFyTyxRQUNBa0QsZ0JBQUEsYUFFQW9MLFFBQ0FDLFVBQUEsZUFDQUMsV0FBQSxjQUNBQyxZQUFBLGVBQ0FDLFlBQUEseUJDbkNBQyxHQUF5QixTQUFBbGQsRUFBQWhiLEdBQ3pCLElBQUE0WixLQUNBLFFBQUFuQixLQUFBdUMsRUFDQWhkLE9BQUF1RCxVQUFBZ0MsZUFBQXRCLEtBQUErWSxFQUFBdkMsSUFBQXpZLEVBQUF5RyxRQUFBZ1MsR0FBQSxJQUFBbUIsRUFBQW5CLEdBQUF1QyxFQUFBdkMsSUFDSyxTQUFBdUMsR0FBQSxtQkFBQWhkLE9BQUFtNkIsc0JBQUEsS0FBQXQzQixFQUFBLE1BQUE0WCxFQUFBemEsT0FBQW02QixzQkFBQW5kLEdBQXlIbmEsRUFBQTRYLEVBQUEzWCxPQUFjRCxJQUM1SWIsRUFBQXlHLFFBQUFnUyxFQUFBNVgsSUFBQSxJQUFBK1ksRUFBQW5CLEVBQUE1WCxJQUFBbWEsRUFBQXZDLEVBQUE1WCxLQUNLLE9BQUErWSxHQVVEd2UsSUFDSjNXLFVBQWU2VCxFQUFBLE9BQ2ZwTixVQUFlb04sRUFBQSxPQUNmN3RCLEtBQVU2dEIsRUFBQSxPQUFlLDRCQUN6QjdJLGdCQUFxQjZJLEVBQUEsSUFDckJyUSxXQUFnQnFRLEVBQUEsS0FDaEJuTixnQkFBcUJtTixFQUFBLE9BQ3JCak8sZUFBb0JpTyxFQUFBLE9BQ3BCbE4scUJBQTBCa04sRUFBQSxPQUMxQjdhLEdBQVE2YSxFQUFBLFFBS0orQyxHQUFNLFNBQUEvaEIsR0FHVixTQUFBaVQsRUFBQTNvQixHQUNRc2MsSUFBZW5iLEtBQUF3bkIsR0FFdkIsSUFBQXhsQixFQUFvQm9aLElBQTBCcGIsTUFBQXduQixFQUFBbm5CLFdBQUFwRSxPQUFBcUUsZUFBQWtuQixJQUFBdG5CLEtBQUFGLEtBQUFuQixJQWtDOUMsT0FoQ0FtRCxFQUFBdTBCLFdBQUEsU0FBQWpvQixHQUNBdE0sRUFBQXcwQixTQUFBbG9CLEdBRUF0TSxFQUFBeTBCLGFBQUEsU0FBQXZELEdBQ0EsSUFBQXdELEVBRUFDLEVBQUEzMEIsRUFBQW5ELE1BQ0E2Z0IsRUFBQWlYLEVBQUFqWCxVQUNBa1gsRUFBQUQsRUFBQXhRLFVBQ0FBLE9BQUE3cEIsSUFBQXM2QixFQUFBLEdBQUFBLEVBQ0FseEIsRUFBQWl4QixFQUFBanhCLEtBQ0FxZ0IsRUFBQTRRLEVBQUE1USxLQUNBOFEsRUFBQVYsR0FBQVEsR0FBQSx3Q0FDQUcsRUFBc0JwUyxLQUFVZ1MsS0FBb0JLLElBQWVMLEVBQUFoWCxFQUFBLGdCQUFBaGEsR0FBb0RxeEIsSUFBZUwsRUFBQWhYLEVBQUEsZ0JBQUFoYSxHQUFBZ3hCLEdBQUF2USxHQUN0SUMsRUFBQXBrQixFQUFBbkQsTUFBQXVuQixnQkFFQXBrQixFQUFBcWEsZUFFQStKLEtBQUEsU0FFQSxJQUFBNFEsR0FDQXhhLFNBQUEsYUFBQXVKLEVBQ0F0SixLQUFBLFNBQUFzSixFQUNBekosU0FBQXRhLEVBQUFxYSxjQUVBK0ssRUFBNEJ2RyxFQUFBLGNBQW9Cb1csR0FBQSxHQUFPdGxCLEtBQUEsT0FBQXdVLFVBQUF6RyxFQUFBLGdCQUN2RDJILEVBQTZCeEcsRUFBQSxjQUFvQm9XLEdBQUEsR0FBT3RsQixLQUFBLFFBQUF3VSxVQUFBekcsRUFBQSxpQkFDeER5SCxFQUE0QnRHLEVBQUEsY0FBb0JvVyxHQUFBLEdBQU90bEIsS0FBQSxlQUFBdWxCLE1BQUEsU0FBQS9RLFVBQUF6RyxFQUFBLGdCQUN2REYsRUFBdUNxQixFQUFBLGNBQW9Cb1csR0FBQSxHQUFPdGxCLEtBQUEsUUFBQXdVLFVBQUF6RyxFQUFBLG1CQUNsRSxPQUFtQm1CLEVBQUEsY0FBb0I2UixHQUFVMVIsS0FBVW9HLFlBQUFDLGFBQUFGLFlBQUEzSCx3QkFBaUhxWCxFQUFBRyxHQUEwQnRYLFlBQUF5RyxVQUFBMlEsRUFBQTFRLG1CQUFBLFdBQUFzRSxnQkFBQTFvQixFQUFBbTFCLG1CQUFBakUsR0FBQXB3QixJQUFBZCxFQUFBdTBCLGVBRTlMcEYsSUFBTyxhQUFBdHlCLEVBQUFrbkIsS0FBQSxzSEFDZi9qQixFQTBDQSxPQWpGSXFaLElBQVNtTSxFQUFBalQsR0EwQ1RzZSxJQUFZckwsSUFDaEJwb0IsSUFBQSxRQUNBaEQsTUFBQSxXQUNBNEQsS0FBQXcyQixTQUFBaE8sV0FHQXBwQixJQUFBLE9BQ0FoRCxNQUFBLFdBQ0E0RCxLQUFBdzJCLFNBQUF0TixVQUdBOXBCLElBQUEscUJBQ0FoRCxNQUFBLFNBQUE4MkIsR0FDQSxJQUFBeEksRUFBQTFxQixLQUFBbkIsTUFBQTZyQixnQkFFQSxPQUFBMXFCLEtBQUFxYyxrQkFFQS9mLElBQUFvdUIsRUFBQSxLQUFBQSxPQUVBcHVCLElBQUFvdUIsRUFBQXdJLEVBQUF4SSxxQkFHQXRyQixJQUFBLGFBQ0FoRCxNQUFBLFdBQ0EsSUFBQTJwQixFQUFBL2xCLEtBQUFuQixNQUFBa25CLEtBRUEsbUJBQUFBLE9BQUF5QixFQUFBNFAsbUNBR0FoNEIsSUFBQSxTQUNBaEQsTUFBQSxXQUNBLE9BQW1CeWtCLEVBQUEsY0FDSHlTLElBQ0MzTixjQUFBLFNBQUFtTixjQUF5Q2dCLEdBQWF0TSxRQUN2RXhuQixLQUFBeTJCLGtCQUtBalAsRUFsRlUsQ0FtRlIzRyxFQUFBLFdBRWF6akIsRUFBQSxLQUVmazVCLEdBQU1wYixPQUFVVSxFQUNoQjBhLEdBQU05RCxTQUFZQyxHQUNsQjZELEdBQU1jLGdDQUFBLGtDQUNOZCxHQUFNdGdCLGNBQ04wSixVQUFBLGFBQ0F3RCxZQUFBLEVBQ0FvQyxlQUFBLFdBQ0FlLHFCQUFBLFFBRUFpUSxHQUFNbjFCLFVBQWFrMUIseU9DbEluQixTQUFBZ0IsRUFBQS9vQixFQUFBZ3BCLEVBQUFDLEdBQ0EsSUFBQW5zQixPQUFBLEVBQ0Fvc0IsT0FBQSxFQUNBLE9BQVd2N0IsT0FBQXc3QixFQUFBLEVBQUF4N0IsQ0FBWXFTLEVBQUEsdUJBQ3ZCb3BCLE1BQUEsV0FDQUosR0FJQWxzQixFQUFBa0QsRUFBQXFwQixhQUNBcnBCLEVBQUFpTCxNQUFBbk8sT0FBQSxNQUNBa0QsRUFBQWlMLE1BQUFtWSxRQUFBLE1BTEFwakIsRUFBQWlMLE1BQUFuTyxPQUFBa0QsRUFBQXFwQixhQUFBLEtBQ0FycEIsRUFBQWlMLE1BQUFtWSxRQUFBLE1BT0FrRyxPQUFBLFdBQ0FKLEdBQ2dCL1ksRUFBQTFnQixFQUFHc2hCLE9BQUFtWSxHQUVuQkEsRUFBc0MvWSxJQUFHLFdBQ3pDblEsRUFBQWlMLE1BQUFuTyxRQUFBa3NCLEVBQUFsc0IsRUFBQSxRQUNBa0QsRUFBQWlMLE1BQUFtWSxRQUFBNEYsRUFBQSxXQUdBTyxJQUFBLFdBQ0FMLEdBQ2dCL1ksRUFBQTFnQixFQUFHc2hCLE9BQUFtWSxHQUVuQmxwQixFQUFBaUwsTUFBQW5PLE9BQUEsR0FDQWtELEVBQUFpTCxNQUFBbVksUUFBQSxHQUNBNkYsT0FJQSxJQVdlTyxHQVZmQyxNQUFBLFNBQUF6cEIsRUFBQWlwQixHQUNBLE9BQUFGLEVBQUEvb0IsR0FBQSxFQUFBaXBCLElBRUFTLE1BQUEsU0FBQTFwQixFQUFBaXBCLEdBQ0EsT0FBQUYsRUFBQS9vQixHQUFBLEVBQUFpcEIsSUFFQVUsT0FBQSxTQUFBM3BCLEVBQUFpcEIsR0FDQSxPQUFBRixFQUFBL29CLEdBQUEsRUFBQWlwQixhQ2pDSVcsRUFBTyxTQUFBM2pCLEdBR1gsU0FBQTRqQixJQUNRaGQsSUFBZW5iLEtBQUFtNEIsR0FFdkIsSUFBQW4yQixFQUFvQm9aLElBQTBCcGIsTUFBQW00QixFQUFBOTNCLFdBQUFwRSxPQUFBcUUsZUFBQTYzQixJQUFBNTNCLE1BQUFQLEtBQUFRLFlBUTlDLE9BTkF3QixFQUFBZ29CLFVBQUEsU0FBQS9yQixHQUNBK0QsRUFBQW8yQixRQUFBcE8sVUFBQS9yQixJQUVBK0QsRUFBQXEyQixZQUFBLFNBQUFELEdBQ0FwMkIsRUFBQW8yQixXQUVBcDJCLEVBZUEsT0E1QklxWixJQUFTOGMsRUFBQTVqQixHQWdCVHNlLElBQVlzRixJQUNoQi80QixJQUFBLFNBQ0FoRCxNQUFBLFdBQ0EsSUFBQTJtQixFQUFBL2lCLEtBQUFuQixNQUNBeTVCLEVBQUF2VixFQUFBdVYsY0FDQW5TLEVBQUFwRCxFQUFBb0QsVUFFQStRLEVBQUFsM0IsS0FBQStCLFFBQUF3MkIsY0FDQSxPQUFtQjFYLEVBQUEsY0FBb0JFLEVBQUEsRUFBV0MsT0FBV2hoQixLQUFBbkIsT0FBZWlFLElBQUE5QyxLQUFBcTRCLFlBQUE3VSxlQUF3Q2tCLElBQVU0VCxFQUFBLElBQUFwQixFQUFBL1EsVUFJOUhnUyxFQTdCVyxDQThCVHRYLEVBQUEsV0FFRnFYLEVBQU85MEIsY0FDUG0xQixjQUFtQmhGLEVBQUEsUUFHbkIyRSxFQUFPTSxVQUFBLEVBQ1EsSUFBQUMsRUFBQSxtQ0MvQ1hDLEdBQ0p0VyxRQUFBLEVBQ0FDLFFBQUEsR0FHQXNXLEdBQUEsS0FFT0MsR0FDUDl0QixNQUNBb1gsUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFNBQUEsS0FDQXdXLGdCQUVBNXRCLE9BQ0FtWCxRQUFBLFdBQ0FiLFNBQWNxWCxFQUNkdlcsUUFBQSxLQUNBd1csZ0JBRUExdEIsS0FDQWlYLFFBQUEsV0FDQWIsU0FBY3FYLEVBQ2R2VyxRQUFBLE1BQ0F3VyxnQkFFQXp0QixRQUNBZ1gsUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFFBQUEsS0FDQXdXLGdCQUVBclcsU0FDQUosUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFFBQUEsTUFDQXdXLGdCQUVBRSxTQUNBM1csUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFNBQUEsS0FDQXdXLGdCQUVBRyxVQUNBNVcsUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFFBQUEsTUFDQXdXLGdCQUVBSSxVQUNBN1csUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFFBQUEsS0FDQXdXLGdCQUVBSyxhQUNBOVcsUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFFBQUEsS0FDQXdXLGdCQUVBTSxhQUNBL1csUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFFBQUEsS0FDQXdXLGdCQUVBMVcsWUFDQUMsUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFFBQUEsS0FDQXdXLGdCQUVBTyxZQUNBaFgsUUFBQSxXQUNBYixTQUFjcVgsRUFDZHZXLFNBQUEsS0FDQXdXLGlCQ3hFSVEsRUFBTyxTQUFBNWtCLEdBR1gsU0FBQTZrQixJQUdBLE9BRklqZSxJQUFlbmIsS0FBQW81QixHQUVSaGUsSUFBMEJwYixLQUFBdVUsRUFBQWhVLE1BQUFQLEtBQUFRLFlBd0JyQyxPQTdCRTZhLElBQVMrZCxFQUFBN2tCLEdBUVg2a0IsRUFBQTU1QixVQUFBMmYsbUJBQUEsV0FDQSxJQUFBa2EsRUFBQXI1QixLQUFBbkIsTUFBQXc2QixRQUVBQSxHQUNBQSxFQUFBeFEsbUJBSUF1USxFQUFBNTVCLFVBQUFvRCxPQUFBLFdBQ0EsSUFBQW1nQixFQUFBL2lCLEtBQUFuQixNQUNBeTZCLEVBQUF2VyxFQUFBdVcsUUFDQTVaLEVBQUFxRCxFQUFBckQsVUFDQWhILEVBQUFxSyxFQUFBckssR0FFQSxPQUFXNEMsRUFBQXZkLEVBQUtpRixjQUNoQixPQUNPbWpCLFVBQUF6RyxFQUFBLFNBQUFoSCxLQUFBeUksS0FBQSxXQUNQLG1CQUFBbVksVUFJQUYsRUE5QlcsQ0ErQlQ5ZCxFQUFBdmQsRUFBS2dELFdBRVBvNEIsRUFBT2g0QixXQUNQdWUsVUFBYW5FLEVBQUF4ZCxFQUFTMGQsT0FDdEI2ZCxRQUFXL2QsRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBU3VRLEtBQU9pTixFQUFBeGQsRUFBU2hCLE9BQUFDLFdBQ3pEMGIsR0FBTTZDLEVBQUF4ZCxFQUFTMGQsT0FDZjRkLFFBQVc5ZCxFQUFBeGQsRUFBU2dZLEtBRUwsSUFBQXdqQixFQUFBLEVDbENYQyxFQUFPLFNBQUE1NUIsR0FHWCxTQUFBNjVCLElBQ0EsSUFBQWhsQixFQUFBelMsRUFBQTBTLEVBRUl5RyxJQUFlbmIsS0FBQXk1QixHQUVuQixRQUFBOWtCLEVBQUFuVSxVQUFBekIsT0FBQThGLEVBQUErUCxNQUFBRCxHQUFBRSxFQUFBLEVBQW1FQSxFQUFBRixFQUFhRSxJQUNoRmhRLEVBQUFnUSxHQUFBclUsVUFBQXFVLEdBR0EsT0FBQUosRUFBQXpTLEVBQW9Db1osSUFBMEJwYixLQUFBSixFQUFBTSxLQUFBSyxNQUFBWCxHQUFBSSxNQUFBc1MsT0FBQXpOLEtBQUE3QyxFQUFBMDNCLGdCQUFBLFdBQzlELElBQUF0a0IsRUFBQXBULEVBQUFuRCxNQUNBODZCLEVBQUF2a0IsRUFBQXVrQixhQUNBTCxFQUFBbGtCLEVBQUFra0IsUUFDQTVaLEVBQUF0SyxFQUFBc0ssVUFDQWhILEVBQUF0RCxFQUFBc0QsR0FFQSxPQUFjNEMsRUFBQXZkLEVBQUtpRixjQUNuQixPQUNTbWpCLFVBQUF6RyxFQUFBLFNBQUF0Z0IsSUFBQSxTQUNUdTZCLEdBQ1NyZSxFQUFBdmQsRUFBS2lGLGNBQWV1MkIsR0FDN0JuNkIsSUFBQSxVQUNBaTZCLFFBQUFyM0IsRUFBQXEzQixRQUNBM1osWUFDQWhILEtBQ0E0Z0IsY0FFS3QzQixFQUFBNDNCLFlBQUEsU0FBQXRyQixHQUNMdE0sRUFBQXEzQixRQUFBL3FCLEdBbkJBb0csRUFvQktELEVBQVUyRyxJQUEwQnBaLEVBQUEwUyxHQXlEekMsT0F4RkUyRyxJQUFTb2UsRUFBQTc1QixHQWtDWDY1QixFQUFBajZCLFVBQUE0bEIsZ0JBQUEsV0FDQSxPQUFBcGxCLEtBQUFxNUIsUUFBQWpVLG1CQUdBcVUsRUFBQWo2QixVQUFBb0QsT0FBQSxXQUNBLElBQUFtZ0IsRUFBQS9pQixLQUFBbkIsTUFDQWc3QixFQUFBOVcsRUFBQThXLGlCQUNBUixFQUFBdFcsRUFBQXNXLFFBQ0FTLEVBQUEvVyxFQUFBK1csZ0JBQ0FDLEVBQUFoWCxFQUFBZ1gsZ0JBQ0FDLEVBQUFqWCxFQUFBaVgsYUFDQXRhLEVBQUFxRCxFQUFBckQsVUFDQXJoQixFQUFBMGtCLEVBQUExa0IsU0FDQTQ3QixFQUFBbFgsRUFBQWtYLGdCQUNBQyxFQUFBblgsRUFBQW1YLG1CQUNBNVUsRUFBQXZDLEVBQUF1QyxlQUNBQyxFQUFBeEMsRUFBQXdDLFVBQ0E0VSxFQUFBcFgsRUFBQW9YLFVBQ0FDLEVBQUFyWCxFQUFBcVgsTUFDQUMsRUFBQXRYLEVBQUFzWCxxQkFDQUMsRUFBQXZYLEVBQUF1WCxlQUNBQyxFQUFBeFgsRUFBQXdYLG9CQUNBMUQsRUFBb0I3VCxJQUF3QkQsR0FBQSwrUEFFNUN5WCxFQUFxQnhaLE9BQVc2VixHQUloQyxNQUhBLFlBQUE3MkIsS0FBQW5CLFFBQ0EyN0IsRUFBQWhXLGFBQUF4a0IsS0FBQW5CLE1BQUF3VyxTQUVXaUcsRUFBQXZkLEVBQUtpRixjQUNWK2UsRUFBQSxFQUNBZixLQUNOd0MsZUFBQXFXLEVBQ0EvMkIsSUFBQTlDLEtBQUE0NUIsWUFDQWxhLFlBQ0E0RSxNQUFBdGtCLEtBQUEwNUIsZ0JBQ0FlLE9BQUFwQixFQUNBcFYsa0JBQTJCMlUsRUFDM0I1VSxlQUFBbVcsRUFDQTVWLFdBQUE2VixFQUNBM1Ysa0JBQUE4VixFQUNBblcscUJBQUE2VixFQUNBUyx3QkFBQVIsRUFDQWhXLG9CQUFBb0IsRUFDQXFWLGVBQUFwVixFQUNBcVYsb0JBQUFOLEVBQ0FPLG1CQUFBUixFQUNBTixrQkFDQWxXLFdBQUFtVyxFQUNBRixtQkFDT1UsR0FDUG44QixJQUlBbzdCLEVBekZXLENBMEZUNVksRUFBQSxXQUVGMlksRUFBT3I0QixXQUNQazRCLFFBQVc5ZCxFQUFBeGQsRUFBU2dZLElBQ3BCMVgsU0FBWWtkLEVBQUF4ZCxFQUFTZ1ksSUFDckJ1a0IsZUFBa0IvZSxFQUFBeGQsRUFBUytYLEtBQzNCVCxRQUFXa0csRUFBQXhkLEVBQVMrWCxLQUNwQnFrQixVQUFhNWUsRUFBQXhkLEVBQVMwZCxPQUN0QjZKLGVBQWtCL0osRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBUzBkLE9BQVNGLEVBQUF4ZCxFQUFTNmpCLFNBQ2xFMkQsVUFBYWhLLEVBQUF4ZCxFQUFTZ1ksSUFDdEJra0IsZ0JBQW1CMWUsRUFBQXhkLEVBQVNoQixLQUM1Qm05QixtQkFBc0IzZSxFQUFBeGQsRUFBU2hCLEtBQy9CdThCLFFBQVcvZCxFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTdVEsS0FBT2lOLEVBQUF4ZCxFQUFTaEIsT0FBQUMsV0FDekRnOUIsYUFBZ0J6ZSxFQUFBeGQsRUFBUzZqQixPQUN6QmlZLGlCQUFvQnRlLEVBQUF4ZCxFQUFTMGQsT0FDN0JpRSxVQUFhbkUsRUFBQXhkLEVBQVMwZCxPQUN0QnFlLGdCQUFtQnZlLEVBQUF4ZCxFQUFTMmQsT0FDNUJxZSxnQkFBbUJ4ZSxFQUFBeGQsRUFBUzJkLE9BQzVCNmUsb0JBQXVCaGYsRUFBQXhkLEVBQVNoQixLQUNoQ3M5QixxQkFBd0I5ZSxFQUFBeGQsRUFBUytYLEtBQ2pDc2tCLE1BQVM3ZSxFQUFBeGQsRUFBUzZqQixPQUNsQitYLGFBQWdCcGUsRUFBQXhkLEVBQVNnWSxJQUN6QjJDLEdBQU02QyxFQUFBeGQsRUFBUzBkLFFBRWYrZCxFQUFPeGpCLGNBQ1AwSixVQUFBLGFBQ0FvYSxnQkFBQSxFQUNBTyxzQkFBQSxFQUNBTixnQkFBQSxHQUNBSyxTQUNBRCxVQUFBLFFBQ0FkLFNBQUEsU0FDQU0sYUFBQSxNQUllLElDdklBbUIsRUR1SUEsRUV2SWZDLEdBQ0EzWSxRQUFBLEVBQ0FDLFFBQUEsR0FFQTJZLEdBQ0E1WSxRQUFBLEVBQ0FDLFFBQUEsR0FFSTRZLEdBQVksS0FDVCxTQUFBQyxFQUFBQyxHQUNQLHdCQUFBQSxFQUNBQSxFQUFBSixFQUFBQyxFQUVXaGEsT0FBV2dhLEVBQUFHLEdDSHRCLElBWUlDLEVBQU8sU0FBQTdtQixHQUdYLFNBQUFrbEIsRUFBQTU2QixHQUNRc2MsSUFBZW5iLEtBQUF5NUIsR0FFdkIsSUFBQXozQixFQUFvQm9aLElBQTBCcGIsTUFBQXk1QixFQUFBcDVCLFdBQUFwRSxPQUFBcUUsZUFBQW01QixJQUFBdjVCLEtBQUFGLEtBQUFuQixJQThDOUMsT0E1Q0FtRCxFQUFBaTRCLGdCQUFBLFNBQUE1a0IsR0FDQSxJQUFBNGtCLEVBQUFqNEIsRUFBQW5ELE1BQUFvN0IsZ0JBRUEsWUFBQWo0QixFQUFBbkQsT0FDQW1ELEVBQUEvRSxVQUFnQ29ZLFNBQUFyVCxFQUFBcTVCLGFBQUFobUIsSUFFaEM0a0IsSUFBQWo0QixFQUFBcTVCLGFBQ0FwQixFQUFBNWtCLElBSUFyVCxFQUFBczVCLGFBQUEsU0FBQUMsRUFBQW5CLEdBQ0EsSUFBQXhCLEVBQUE1MkIsRUFBQXc1QixnQkFFQXJCLEVBQUFsK0IsT0FBQTZILEtBQUE4MEIsR0FBQWx3QixPQUFBLFNBQUF0SixHQUNBLE9BQUF3NUIsRUFBQXg1QixHQUFBOGlCLE9BQUEsS0FBQWtZLEVBQUFsWSxPQUFBLElBQUEwVyxFQUFBeDVCLEdBQUE4aUIsT0FBQSxLQUFBa1ksRUFBQWxZLE9BQUEsS0FDYSxHQUNiLEdBQUFpWSxFQUFBLENBSUEsSUFBQXp0QixFQUFBNnVCLEVBQUFFLHdCQUNBQyxHQUNBendCLElBQUEsTUFDQUgsS0FBQSxPQUVBcXZCLEVBQUF6MUIsUUFBQSxXQUFBeTFCLEVBQUF6MUIsUUFBQSxhQUNBZzNCLEVBQUF6d0IsSUFBQXlCLEVBQUF0QixPQUFBZ3ZCLEVBQUFqWSxPQUFBLFNBQ2FnWSxFQUFBejFCLFFBQUEsV0FBQXkxQixFQUFBejFCLFFBQUEsZ0JBQ2JnM0IsRUFBQXp3QixLQUFBbXZCLEVBQUFqWSxPQUFBLFNBRUFnWSxFQUFBejFCLFFBQUEsWUFBQXkxQixFQUFBejFCLFFBQUEsWUFDQWczQixFQUFBNXdCLEtBQUE0QixFQUFBdkIsTUFBQWl2QixFQUFBalksT0FBQSxTQUNhZ1ksRUFBQXoxQixRQUFBLGFBQUF5MUIsRUFBQXoxQixRQUFBLGNBQ2JnM0IsRUFBQTV3QixNQUFBc3ZCLEVBQUFqWSxPQUFBLFNBRUFvWixFQUFBaGlCLE1BQUFtaUIsa0JBQUE1d0IsS0FBQSxJQUFBNHdCLEVBQUF6d0IsTUFFQWpKLEVBQUEyNUIsWUFBQSxTQUFBcnRCLEdBQ0F0TSxFQUFBNDVCLFFBQUF0dEIsR0FFQXRNLEVBQUFLLE9BQ0FnVCxVQUFBeFcsRUFBQXdXLFdBQUF4VyxFQUFBeTdCLGdCQUVBdDRCLEVBaUhBLE9BcEtJcVosSUFBU29lLEVBQUFsbEIsR0FzRFRzZSxJQUFZNEcsSUFDaEJyNkIsSUFBQSxrQkFDQWhELE1BQUEsV0FDQSxPQUFBNEQsS0FBQTQ3QixRQUFBeFcscUJBR0FobUIsSUFBQSxnQkFDQWhELE1BQUEsV0FDQSxJQUFBMm1CLEVBQUEvaUIsS0FBQW5CLE1BQ0FvbEIsRUFBQWxCLEVBQUFrQixrQkFDQTRYLEVBQUE5WSxFQUFBOFksbUJBQ0FWLEVBQUFwWSxFQUFBb1ksbUJBRUEsT0FBQWxYLEdEM0VlLFdBQ2YsSUFBQTZYLEVBQUF0N0IsVUFBQXpCLE9BQUEsUUFBQXpDLElBQUFrRSxVQUFBLEdBQUFBLFVBQUEsTUFDQXU3QixFQUFBRCxFQUFBRSxXQUNBQSxPQUFBMS9CLElBQUF5L0IsRUFBQSxFQUFBQSxFQUNBRSxFQUFBSCxFQUFBSSxxQkFDQUEsT0FBQTUvQixJQUFBMi9CLEVBQUEsR0FBQUEsRUFDQUUsRUFBQUwsRUFBQU0sbUJBQ0FBLE9BQUE5L0IsSUFBQTYvQixFQUFBLEdBQUFBLEVBQ0FFLEVBQUFQLEVBQUFYLG1CQUNBQSxPQUFBNytCLElBQUErL0IsS0FFQUMsR0FDQXh4QixNQUNBb1gsUUFBQSxXQUNBQyxTQUFBLE1BRUFwWCxPQUNBbVgsUUFBQSxXQUNBQyxRQUFBLE1BRUFsWCxLQUNBaVgsUUFBQSxXQUNBQyxRQUFBLE9BRUFqWCxRQUNBZ1gsUUFBQSxXQUNBQyxRQUFBLE1BRUFHLFNBQ0FKLFFBQUEsV0FDQUMsVUFBQStaLEVBQUFGLElBQUEsSUFFQW5ELFNBQ0EzVyxRQUFBLFdBQ0FDLFNBQUEsSUFBQWlhLEVBQUFKLEtBRUFsRCxVQUNBNVcsUUFBQSxXQUNBQyxRQUFBK1osRUFBQUYsR0FBQSxJQUVBakQsVUFDQTdXLFFBQUEsV0FDQUMsUUFBQSxJQUFBaWEsRUFBQUosS0FFQWhELGFBQ0E5VyxRQUFBLFdBQ0FDLFFBQUErWixFQUFBRixFQUFBLElBRUEvQyxhQUNBL1csUUFBQSxXQUNBQyxRQUFBLEVBQUFpYSxFQUFBSixJQUVBL1osWUFDQUMsUUFBQSxXQUNBQyxVQUFBK1osRUFBQUYsR0FBQSxJQUVBOUMsWUFDQWhYLFFBQUEsV0FDQUMsU0FBQSxFQUFBaWEsRUFBQUosS0FNQSxPQUhBLy9CLE9BQUE2SCxLQUFBdzRCLEdBQUE5OUIsUUFBQSxTQUFBWSxHQUNBazlCLEVBQUFsOUIsR0FBQTA4QixFQUFBRCxtQkFBd0Q3YSxPQUFXc2IsRUFBQWw5QixJQUFzQmlpQixTQUFBNlosRUFBQUMsR0FBQXhDLGFBQWlFc0MsSUFBa0JqYSxPQUFhNFgsRUFBWXg1QixJQUFRaWlCLFNBQUE2WixFQUFBQyxPQUU3TW1CLEVDV3dDQyxFQUN4Q1YscUJBQ0FPLG1CQUFBLEVBQ0FqQiwwQkFJQS83QixJQUFBLGlCQUNBaEQsTUFBQSxXQUNBLElBQUFpOUIsRUFBQXI1QixLQUFBbkIsTUFBQXc2QixRQUVBLE9BQUFBLEdBQUEsVUFBQUEsS0FHQXprQixNQUFBaUksUUFBQXdjLElBQ0FBLEVBQUEzMEIsUUFBQSxlQVNBdEYsSUFBQSxnQ0FDQWhELE1BQUEsU0FBQW9nQyxHQUNBLElBQUFBLEVBQUE3cUIsS0FBQThxQixjQUFBLFdBQUFELEVBQUE3cUIsT0FBQTZxQixFQUFBMzlCLE1BQUE0ZSxVQUFBemQsS0FBQTA4QixpQkFBQSxDQUdBLElBQUFDLEVBN0dlLFNBQUFuZ0MsRUFBQXNILEdBQ2YsSUFBQTg0QixLQUNBQyxFQUFrQjdiLE9BQVd4a0IsR0FPN0IsT0FOQXNILEVBQUF0RixRQUFBLFNBQUFZLEdBQ0E1QyxHQUFBNEMsS0FBQTVDLElBQ0FvZ0MsRUFBQXg5QixHQUFBNUMsRUFBQTRDLFVBQ0F5OUIsRUFBQXo5QixPQUdZdzlCLFNBQUFDLFdBb0d1QkMsQ0FBV04sRUFBQTM5QixNQUFBMGEsT0FBQSxzRUFDOUNxakIsRUFBQUQsRUFBQUMsT0FDQUMsRUFBQUYsRUFBQUUsUUFFQUUsRUFBZ0MvYixLQUFVd04sUUFBQSxnQkFBMEJvTyxHQUFXSSxPQUFBLGdCQUMvRUMsRUFBa0NqYyxPQUFXNmIsR0FBWUssY0FBQSxTQUN6RGxoQixFQUE0Qi9mLE9BQUE0a0IsRUFBQSxhQUFBNWtCLENBQVl1Z0MsR0FDeENqakIsTUFBQTBqQixFQUNBOVcsVUFBQSxPQUVBLE9BQXVCdEYsRUFBQSxjQUN2QixRQUNxQnRILE1BQUF3akIsRUFBQTVXLFVBQUFxVyxFQUFBMzlCLE1BQUFzbkIsV0FDckJuSyxHQUdBLE9BQUF3Z0IsS0FHQXA5QixJQUFBLFlBQ0FoRCxNQUFBLFdBQ0EsSUFBQXF6QixFQUFBenZCLEtBQUFuQixNQUNBaWQsRUFBQTJULEVBQUEzVCxNQUNBd2QsRUFBQTdKLEVBQUE2SixRQUVBLE9BQUF4ZCxJQUFBd2QsS0FHQWw2QixJQUFBLFNBQ0FoRCxNQUFBLFdBQ0EsSUFBQXlDLEVBQUFtQixLQUFBbkIsTUFDQXdELEVBQUFyQyxLQUFBcUMsTUFDQXFkLEVBQUE3Z0IsRUFBQTZnQixVQUNBNUQsRUFBQWpkLEVBQUFpZCxNQUNBd2QsRUFBQXo2QixFQUFBeTZCLFFBQ0E2RCxFQUFBdCtCLEVBQUFzK0IsY0FDQTFZLEVBQUE1bEIsRUFBQTRsQixrQkFDQThWLEVBQUExN0IsRUFBQTA3QixvQkFFQWw4QixFQUFBUSxFQUFBUixTQUNBZ1gsRUFBQWhULEVBQUFnVCxRQUVBLFlBQUF4VyxJQUFBbUIsS0FBQXE3QixjQUNBaG1CLEdBQUEsR0FFQSxJQUFBMkcsRUFBQWhjLEtBQUFvOUIsOEJBQTJEdmMsRUFBQSxlQUFvQnhpQixLQUF3QndpQixFQUFBLGNBQ3ZHLE9BQ0EsS0FDQXhpQixJQUVBZy9CLEVBQUFyaEIsRUFBQW5kLE1BQ0F5K0IsRUFBMkI1WSxJQUFVMlksRUFBQWxYLFVBQXVCNFEsT0FBa0JvRyxHQUFBemQsRUFBQSxhQUM5RSxPQUFtQm1CLEVBQUEsY0FDSGlhLEVBQ0E5WixPQUFXaGhCLEtBQUFuQixPQUFlMDdCLG9CQUFBOVYsR0FBQThWLEVBQUF6M0IsSUFBQTlDLEtBQUEyN0IsWUFBQTFYLGtCQUFBamtCLEtBQUF3N0IsZ0JBQUFsQyxXQUFBeGQsR0FBQSxHQUFBekcsVUFBQTRrQixnQkFBQWo2QixLQUFBaTZCLGdCQUFBcUIsYUFBQXQ3QixLQUFBczdCLGVBQzFDam1CLEVBQTBCcFosT0FBQTRrQixFQUFBLGFBQUE1a0IsQ0FBWStmLEdBQVNtSyxVQUFBbVgsSUFBc0J0aEIsUUFJckU1YyxJQUFBLDJCQUNBaEQsTUFBQSxTQUFBOGlCLEdBQ0Esa0JBQUFBLEdBQ3dCN0osUUFBQTZKLEVBQUE3SixTQUV4QixTQUlBb2tCLEVBcktXLENBc0tUNVksRUFBQSxXQUVGdWEsRUFBT3BsQixjQUNQMEosVUFBQSxjQUNBeWEsVUFBQSxNQUNBN1UsZUFBQSxnQkFDQXdVLGdCQUFBLEdBQ0FDLGdCQUFBLEdBQ0E4QixvQkFBQSxFQUNBVixvQkFBQSxHQUVBbC9CLE9BQUFvMkIsRUFBQSxTQUFBcDJCLENBQVNtL0IsR0FDTSxJQUFBUSxFQUFBLEVDaE1YMkIsRUFBUSxTQUFBaHBCLEdBR1osU0FBQWlwQixJQUNRcmlCLElBQWVuYixLQUFBdzlCLEdBRXZCLElBQUF4N0IsRUFBb0JvWixJQUEwQnBiLE1BQUF3OUIsRUFBQW45QixXQUFBcEUsT0FBQXFFLGVBQUFrOUIsSUFBQWo5QixNQUFBUCxLQUFBUSxZQVE5QyxPQU5Bd0IsRUFBQWdvQixVQUFBLFNBQUEvckIsR0FDQStELEVBQUE2dUIsU0FBQTdHLFVBQUEvckIsSUFFQStELEVBQUF5N0IsYUFBQSxTQUFBNU0sR0FDQTd1QixFQUFBNnVCLFlBRUE3dUIsRUFpQkEsT0E5QklxWixJQUFTbWlCLEVBQUFqcEIsR0FnQlRzZSxJQUFZMkssSUFDaEJwK0IsSUFBQSxTQUNBaEQsTUFBQSxXQUNBLElBQUFzaEMsRUFBQTE5QixLQUFBK0IsUUFBQTI3QixnQkFFQTcrQixFQUFBbUIsS0FBQW5CLE1BQ0EsT0FBbUJnaUIsRUFBQSxjQUNIK2EsR0FDQzlmLE1BQUE0aEIsR0FBQSxJQUFBNytCLEVBQUE4K0IsTUFBQTkrQixFQUFBUixTQUFBLEdBQUE4N0IsVUFBQSxRQUFBTixpQkFBQWg3QixFQUFBeTVCLGNBQUEsNkJBQ0R6WCxFQUFBLGNBQW9CRSxFQUFBLEVBQU1DLE9BQVduaUIsR0FBVWlFLElBQUE5QyxLQUFBeTlCLHFCQUsvREQsRUEvQlksQ0FnQ1YzYyxFQUFBLFdBRUYwYyxFQUFRbjZCLGNBQ1JzNkIsZ0JBQXFCbkssRUFBQSxNQUVyQmdLLEVBQVFLLFdBQUEsRUFDTyxJQUFBQyxFQUFBLEVDaENYQyxFQUFJLFNBQUF2cEIsR0FHUixTQUFBd3BCLEVBQUFsL0IsR0FDUXNjLElBQWVuYixLQUFBKzlCLEdBRXZCLElBQUEvN0IsRUFBb0JvWixJQUEwQnBiLE1BQUErOUIsRUFBQTE5QixXQUFBcEUsT0FBQXFFLGVBQUF5OUIsSUFBQTc5QixLQUFBRixLQUFBbkIsSUFFOUNtRCxFQUFBZzhCLGtCQUNBaDhCLEVBQUFpOEIsWUFBQSxTQUFBaGdDLEdBQ0ErRCxFQUFBazhCLHFCQUNBLElBQUFqZSxFQUFBamUsRUFBQW5ELE1BQUFvaEIsUUFFQUEsR0FDQUEsRUFBQWhpQixJQUdBK0QsRUFBQWs4QixpQkFBQSxTQUFBQyxHQUNBbjhCLEVBQUFvOEIsWUFBQUQsR0FDQSxJQUFBRSxFQUFBcjhCLEVBQUFuRCxNQUFBdy9CLGFBRUFBLEdBQ0FBLEVBQUFGLElBR1FsaUMsT0FBQXFpQyxFQUFBLEVBQUFyaUMsR0FBTyxXQUFBNEMsR0FBQSxZQUFBQSxHQUFBLHlIQUNQNUMsT0FBQXFpQyxFQUFBLEVBQUFyaUMsR0FBTyxvQkFBQTRDLEdBQUEsV0FBQUEsRUFBQWtuQixNQUFBLHVFQUNmLElBQUFvWSxPQUFBLEVBU0EsTUFSQSxhQUFBdC9CLEVBQ0FzL0IsRUFBQXQvQixFQUFBcy9CLFNBQ1Msb0JBQUF0L0IsSUFDVHMvQixFQUFBdC9CLEVBQUEwL0IsaUJBRUF2OEIsRUFBQUssT0FDQTg3QixnQkFFQW44QixFQStJQSxPQWxMSXFaLElBQVMwaUIsRUFBQXhwQixHQXNDVHNlLElBQVlrTCxJQUNoQjMrQixJQUFBLGtCQUNBaEQsTUFBQSxXQUNBLE9BQ0FzaEMsZ0JBQUExOUIsS0FBQXcrQixxQkFDQWpHLGNBQUF2NEIsS0FBQW5CLE1BQUFxNEIsVUFJQTkzQixJQUFBLDRCQUNBaEQsTUFBQSxTQUFBOGlCLEVBQUF1ZixHQUNBLElBQUEvZSxFQUFBMWYsS0FBQW5CLE1BQUE2Z0IsVUFLQSxHQUhBLFdBQUExZixLQUFBbkIsTUFBQWtuQixNQUFBLFdBQUE3RyxFQUFBNkcsT0FDQS9sQixLQUFBMCtCLHNCQUFBLEdBRUEsYUFBQXhmLEVBQ0FsZixLQUFBL0MsVUFBK0JraEMsU0FBQWpmLEVBQUFpZixlQUQvQixDQUlBLEdBQUFqZixFQUFBd2Usa0JBQUExOUIsS0FBQW5CLE1BQUE2K0IsaUJBQUFlLEVBQUFFLGlCQUFBMytCLEtBQUErQixRQUFBNDhCLGVBQUEsQ0FDQSxJQUFBQyxFQUErQjNpQyxPQUFBaWlCLEVBQUEsWUFBQWppQixDQUFXK0QsTUFDMUNBLEtBQUEwK0IsdUJBQUExK0IsS0FBQXFDLE1BQUE4N0IsU0FBQXAvQixVQUFBNi9CLEVBQUFDLGlCQUFBLElBQUFuZixFQUFBLGlCQUFBM2dCLE9BQ0FpQixLQUFBZytCLGVBQUFoK0IsS0FBQXFDLE1BQUE4N0IsU0FDQW4rQixLQUFBL0MsVUFBK0JraEMsZ0JBRS9CamYsRUFBQXdlLGlCQUFBMTlCLEtBQUFuQixNQUFBNitCLGtCQUFBZSxFQUFBRSxnQkFBQTMrQixLQUFBK0IsUUFBQTQ4QixrQkFDQTMrQixLQUFBL0MsVUFBK0JraEMsU0FBQW4rQixLQUFBZytCLGlCQUMvQmgrQixLQUFBZytCLHVCQUlBNStCLElBQUEsY0FDQWhELE1BQUEsU0FBQStoQyxHQUNBLGFBQUFuK0IsS0FBQW5CLE9BQ0FtQixLQUFBL0MsVUFBK0JraEMsZ0JBSS9CLytCLElBQUEsa0JBQ0FoRCxNQUFBLFdBQ0EsSUFBQXNoQyxFQUFBMTlCLEtBQUF3K0IscUJBQ0EsR0FBQXgrQixLQUFBMCtCLHNCQUFBaEIsRUFDQSxlQUVBLElBQUEzWCxFQUFBL2xCLEtBQUFuQixNQUFBa25CLEtBRUEsT0FBQTJYLEVBQUEsV0FBQTNYLEtBR0EzbUIsSUFBQSxxQkFDQWhELE1BQUEsV0FDQSxJQUFBc2hDLEVBQUExOUIsS0FBQW5CLE1BQUE2K0IsZ0JBRUEsWUFBQXBoQyxJQUFBMEQsS0FBQStCLFFBQUE0OEIsZUFDQTMrQixLQUFBK0IsUUFBQTQ4QixlQUVBakIsS0FHQXQrQixJQUFBLHVCQUNBaEQsTUFBQSxTQUFBMGlDLEdBQ0EsSUFBQW44QixFQUFBM0MsS0FFQStpQixFQUFBL2lCLEtBQUFuQixNQUNBa2dDLEVBQUFoYyxFQUFBZ2MsY0FDQUMsRUFBQWpjLEVBQUFpYyxtQkFFQUMsRUFBQUYsR0FBQUMsRUFDQSxRQUFBMWlDLElBQUF5aUMsUUFBQXppQyxJQUFBMGlDLEVBQ0EsT0FBQUYsR0FDQSxpQkFDQUcsRUFBQSxXQUNBLE1BQ0EsZUFDQSxvQkFDQSxxQkFHQWovQixLQUFBMCtCLHNCQUNBTyxFQUFBLEdBQ0FqL0IsS0FBQTArQixzQkFBQSxHQUVBTyxFQUFBLFdBRUEsTUFDQSxhQUNBQSxFQUE0Q2plLE9BQWE4VyxHQUFZRSxNQUFBLFNBQUExcEIsRUFBQWlwQixHQUNyRSxPQUF1Q08sRUFBU0UsTUFBQTFwQixFQUFBLFdBRWhEM0wsRUFBQSs3QixzQkFBQSxFQUNBLzdCLEVBQUExRixhQUdBLGFBQUEwRixFQUFBdThCLG1CQUdBM0gsU0FPQSxPQUFBMEgsS0FHQTcvQixJQUFBLFNBQ0FoRCxNQUFBLFdBQ0EsSUFBQXF6QixFQUFBenZCLEtBQUFuQixNQUNBNmdCLEVBQUErUCxFQUFBL1AsVUFDQXlHLEVBQUFzSixFQUFBdEosVUFDQStRLEVBQUF6SCxFQUFBeUgsTUFFQTRILEVBQUE5K0IsS0FBQWsvQixrQkFDQUQsRUFBQWovQixLQUFBbS9CLHFCQUFBTCxHQUNBTSxFQUFnQzFhLElBQVV5QixFQUFBekcsRUFBQSxJQUFBd1gsRUFBcUNILE9BQWtCclgsRUFBQSxvQkFBQTFmLEtBQUF3K0IsdUJBQ2pHM2UsR0FDQXNlLFNBQUFuK0IsS0FBQXFDLE1BQUE4N0IsU0FDQUUsYUFBQXIrQixLQUFBaytCLGlCQUNBL1gsVUFBQWlaLEVBQ0FyWixLQUFBK1ksR0FFQSxXQUFBQSxHQUVBamYsRUFBQUksUUFBQWpnQixLQUFBaStCLFlBQ0FwZSxFQUFBbWYsbUJBQUFDLEdBRUFwZixFQUFBa2YsY0FBQUUsRUFHQSxJQUFBSSxFQUFBci9CLEtBQUErQixRQUFBczlCLGVBRUEsT0FBQXIvQixLQUFBdytCLHNCQUFBLElBQUFhLEdBQUEsTUFBQUEsR0FBQSxRQUFBQSxFQUdtQnhlLEVBQUEsY0FBb0JFLEVBQUEsRUFBUUMsT0FBV2hoQixLQUFBbkIsTUFBQWdoQixJQUYxRCxTQU1Ba2UsRUFuTFEsQ0FvTE5sZCxFQUFBLFdBRWF6akIsRUFBQSxJQUVmMGdDLEVBQUl3QixRQUFXdmUsRUFBQSxFQUNmK2MsRUFBSXlCLEtBQVExQixFQUNaQyxFQUFJM0YsUUFBV00sRUFDZnFGLEVBQUkwQixVQUFhemUsRUFBQSxFQUNqQitjLEVBQUk5bkIsY0FDSjBKLFVBQUEsV0FDQXlHLFVBQUEsR0FDQStRLE1BQUEsUUFDQXVJLFdBQUEsR0FFQTNCLEVBQUkxOEIsbUJBQ0pzOEIsZ0JBQXFCbkssRUFBQSxLQUNyQmdGLGNBQW1CaEYsRUFBQSxRQUVuQnVLLEVBQUkxNkIsY0FDSnU3QixlQUFvQnBMLEVBQUEsS0FDcEI4TCxlQUFvQjlMLEVBQUEsV0FBcUJBLEVBQUEsT0FBa0JBLEVBQUEsc01Dak4zRDRDLEVBQXlCLFNBQUFsZCxFQUFBaGIsR0FDekIsSUFBQTRaLEtBQ0EsUUFBQW5CLEtBQUF1QyxFQUNBaGQsT0FBQXVELFVBQUFnQyxlQUFBdEIsS0FBQStZLEVBQUF2QyxJQUFBelksRUFBQXlHLFFBQUFnUyxHQUFBLElBQUFtQixFQUFBbkIsR0FBQXVDLEVBQUF2QyxJQUNLLFNBQUF1QyxHQUFBLG1CQUFBaGQsT0FBQW02QixzQkFBQSxLQUFBdDNCLEVBQUEsTUFBQTRYLEVBQUF6YSxPQUFBbTZCLHNCQUFBbmQsR0FBeUhuYSxFQUFBNFgsRUFBQTNYLE9BQWNELElBQzVJYixFQUFBeUcsUUFBQWdTLEVBQUE1WCxJQUFBLElBQUErWSxFQUFBbkIsRUFBQTVYLElBQUFtYSxFQUFBdkMsRUFBQTVYLEtBQ0ssT0FBQStZLEdBS0wsU0FBQTZuQixFQUFBN2dDLEdBQ0EsZ0JBQUE4Z0MsR0FDQSxnQkFBQXByQixHQUdBLFNBQUFxckIsSUFHQSxPQUZnQnprQixJQUFlbmIsS0FBQTQvQixHQUVSeGtCLElBQTBCcGIsTUFBQTQvQixFQUFBdi9CLFdBQUFwRSxPQUFBcUUsZUFBQXMvQixJQUFBci9CLE1BQUFQLEtBQUFRLFlBWWpELE9BakJZNmEsSUFBU3VrQixFQUFBcnJCLEdBUVRzZSxJQUFZK00sSUFDeEJ4Z0MsSUFBQSxTQUNBaEQsTUFBQSxXQUNBLElBQUFzakIsRUFBQTdnQixFQUFBNmdCLFVBRUEsT0FBMkJtQixFQUFBLGNBQW1COGUsRUFBaUIzZSxLQUFVdEIsYUFBdUIxZixLQUFBbkIsWUFJaEcrZ0MsRUFsQkEsQ0FtQlUvZSxFQUFBLFlBSVYsSUFBSWdmLEVBQUssU0FBQUMsR0FHVCxTQUFBQyxJQUdBLE9BRlE1a0IsSUFBZW5iLEtBQUErL0IsR0FFUjNrQixJQUEwQnBiLE1BQUErL0IsRUFBQTEvQixXQUFBcEUsT0FBQXFFLGVBQUF5L0IsSUFBQXgvQixNQUFBUCxLQUFBUSxZQW9CekMsT0F6Qkk2YSxJQUFTMGtCLEVBQUFELEdBUVRqTixJQUFZa04sSUFDaEIzZ0MsSUFBQSxTQUNBaEQsTUFBQSxXQUNBLElBQUF1NkIsRUFBQTMyQixLQUFBbkIsTUFDQTZnQixFQUFBaVgsRUFBQWpYLFVBQ0F5RyxFQUFBd1EsRUFBQXhRLFVBQ0E5bkIsRUFBQXM0QixFQUFBdDRCLFNBQ0EyaEMsRUFBQTdKLEVBQUFRLEdBQUEscUNBQ0FzSixFQUF5QnZiLElBQVV5QixFQUFBekcsR0FDbkMsT0FBbUJtQixFQUFBLGNBQ25CLE1BQ2dCRyxLQUFVbUYsVUFBQThaLEdBQW9CRCxHQUM5QzNoQyxPQUtBMGhDLEVBMUJTLENBMkJQbGYsRUFBQSxXQUVFcWYsRUFBVyxTQUFBQyxHQUdmLFNBQUFDLElBQ1FqbEIsSUFBZW5iLEtBQUFvZ0MsR0FFdkIsSUFBQUMsRUFBcUJqbEIsSUFBMEJwYixNQUFBb2dDLEVBQUEvL0IsV0FBQXBFLE9BQUFxRSxlQUFBOC9CLElBQUE3L0IsTUFBQVAsS0FBQVEsWUFHL0MsT0FEQTYvQixFQUFBaCtCLE9BQXdCaStCLFdBQ3hCRCxFQTJDQSxPQW5ESWhsQixJQUFTK2tCLEVBQUFELEdBV1R0TixJQUFZdU4sSUFDaEJoaEMsSUFBQSxrQkFDQWhELE1BQUEsV0FDQSxJQUFBbWtDLEVBQUF2Z0MsS0FFQSxPQUNBd2dDLFdBQ0FDLFNBQUEsU0FBQS9uQixHQUNBNm5CLEVBQUF0akMsVUFDQXFqQyxVQUFBaHVCLE9BQThDb3VCLElBQWtCSCxFQUFBbCtCLE1BQUFpK0IsU0FBQTVuQixPQUdoRWlvQixZQUFBLFNBQUFqb0IsR0FDQTZuQixFQUFBdGpDLFVBQ0FxakMsT0FBQUMsRUFBQWwrQixNQUFBaStCLE9BQUE1M0IsT0FBQSxTQUFBazRCLEdBQ0EsT0FBQUEsSUFBQWxvQixZQVFBdFosSUFBQSxTQUNBaEQsTUFBQSxXQUNBLElBQUF1NkIsRUFBQTMyQixLQUFBbkIsTUFDQTZnQixFQUFBaVgsRUFBQWpYLFVBQ0F5RyxFQUFBd1EsRUFBQXhRLFVBQ0E5bkIsRUFBQXM0QixFQUFBdDRCLFNBQ0F3aUMsRUFBQWxLLEVBQUFrSyxTQUNBYixFQUFBN0osRUFBQVEsR0FBQSxnREFDQXNKLEVBQXlCdmIsSUFBVXlCLEVBQUF6RyxFQUF1QnFYLE9BQWtCclgsRUFBQSxhQUFBbWhCLEdBQUE3Z0MsS0FBQXFDLE1BQUFpK0IsT0FBQXZoQyxPQUFBLElBQzVFLE9BQW1COGhCLEVBQUEsY0FDbkIsTUFDZ0JHLEtBQVVtRixVQUFBOFosR0FBb0JELEdBQzlDM2hDLE9BS0EraEMsRUFwRGUsQ0FxRGJ2ZixFQUFBLFdBRUZxZixFQUFXOStCLG1CQUNYby9CLFVBQWVqTixFQUFBLFFBRWYsSUFBQXVOLEVBQUFwQixHQUNBaGdCLFVBQUEsY0FEQWdnQixDQUVHUSxHQUNIYSxFQUFBckIsR0FDQWhnQixVQUFBLHFCQURBZ2dCLENBRUdHLEdBQ0htQixFQUFBdEIsR0FDQWhnQixVQUFBLHFCQURBZ2dCLENBRUdHLEdBQ0h6RyxFQUFBc0csR0FDQWhnQixVQUFBLHNCQURBZ2dCLENBRUdHLEdBQ0hpQixFQUFBQyxTQUNBRCxFQUFBRSxTQUNBRixFQUFBMUgsVUFDZSxJQUFBNkgsRUFBQSx5QkM5SUFDLEVBSGYsU0FBQTlrQyxHQUNBLE9BQUEra0MsTUFBQW4zQixXQUFBNU4sS0FBQWdsQyxTQUFBaGxDLElDS0lpbEMsRUFBcUIsU0FBQXBvQixFQUFBaGIsR0FDekIsSUFBQTRaLEtBQ0EsUUFBQW5CLEtBQUF1QyxFQUNBaGQsT0FBQXVELFVBQUFnQyxlQUFBdEIsS0FBQStZLEVBQUF2QyxJQUFBelksRUFBQXlHLFFBQUFnUyxHQUFBLElBQUFtQixFQUFBbkIsR0FBQXVDLEVBQUF2QyxJQUNLLFNBQUF1QyxHQUFBLG1CQUFBaGQsT0FBQW02QixzQkFBQSxLQUFBdDNCLEVBQUEsTUFBQTRYLEVBQUF6YSxPQUFBbTZCLHNCQUFBbmQsR0FBeUhuYSxFQUFBNFgsRUFBQTNYLE9BQWNELElBQzVJYixFQUFBeUcsUUFBQWdTLEVBQUE1WCxJQUFBLElBQUErWSxFQUFBbkIsRUFBQTVYLElBQUFtYSxFQUFBdkMsRUFBQTVYLEtBQ0ssT0FBQStZLEdBSUwsdUJBQUF6UixPQUFBLENBU0FBLE9BQUFrN0IsV0FBQWw3QixPQUFBazdCLFlBUkEsU0FBQUMsR0FDQSxPQUNBQyxNQUFBRCxFQUNBRSxTQUFBLEVBQ0FDLFlBQUEsYUFDQUMsZUFBQSxlQVlBLElBQUFDLEdBQ0FDLEdBQUEsUUFDQUMsR0FBQSxRQUNBQyxHQUFBLFFBQ0FDLEdBQUEsUUFDQUMsR0FBQSxTQUNBQyxJQUFBLFVBRUFDLEVBQUEsV0FDQSxJQUFBcmpDLEVBQUEsRUFDQSxrQkFJQSxVQUhBMEIsVUFBQXpCLE9BQUEsUUFBQXpDLElBQUFrRSxVQUFBLEdBQUFBLFVBQUEsUUFFQTFCLEdBQUEsSUFMQSxHQVVJc2pDLEVBQUssU0FBQTd0QixHQUdULFNBQUE4dEIsRUFBQXhqQyxHQUNRc2MsSUFBZW5iLEtBQUFxaUMsR0FFdkIsSUFBQXJnQyxFQUFvQm9aLElBQTBCcGIsTUFBQXFpQyxFQUFBaGlDLFdBQUFwRSxPQUFBcUUsZUFBQStoQyxJQUFBbmlDLEtBQUFGLEtBQUFuQixJQUU5Q21ELEVBQUFzZ0Msa0JBQUEsU0FBQUMsR0FDQXZnQyxFQUFBL0UsVUFBNEJ1bEMsTUFBQUQsRUFBQWQsVUFDNUIsSUFBQWdCLEVBQUF6Z0MsRUFBQW5ELE1BQUE0akMsYUFFQUEsR0FDQUEsRUFBQUYsRUFBQWQsU0FFQXovQixFQUFBSyxNQUFBcWdDLFlBQUFILEVBQUFkLFNBQ0F6L0IsRUFBQTJnQyxhQUFBSixFQUFBZCxRQUFBLGVBR0F6L0IsRUFBQTJnQyxhQUFBLFNBQUFELEVBQUEvd0IsR0FDQSxjQUFBM1AsRUFBQW5ELE9BQ0FtRCxFQUFBL0UsVUFDQXlsQyxjQUdBLElBQUFFLEVBQUE1Z0MsRUFBQW5ELE1BQUErakMsV0FFQUEsR0FDQUEsRUFBQUYsRUFBQS93QixJQUdBM1AsRUFBQTZnQyxPQUFBLFdBQ0EsSUFBQUgsR0FBQTFnQyxFQUFBSyxNQUFBcWdDLFVBQ0ExZ0MsRUFBQTJnQyxhQUFBRCxFQUFBLGlCQUVBMWdDLEVBQUE4Z0MsZ0JBQUEsV0FDQTlnQyxFQUFBL0UsVUFBNEI4bEMsV0FBQS9nQyxFQUFBSyxNQUFBMGdDLGFBRTVCL2dDLEVBQUFnaEMsU0FBQWIsRUFBQSxjQUNBLElBQUFiLE9BQUEsRUFDQSxvQkFBQWw3QixTQUNBazdCLEVBQUFsN0IsT0FBQWs3QixZQUVBQSxHQUFBemlDLEVBQUFva0MsWUFBQXBrQyxFQUFBb2tDLGNBQUFyQixJQUNBNS9CLEVBQUF1Z0MsSUFBQWpCLEVBQUEsZUFBQU0sRUFBQS9pQyxFQUFBb2tDLFlBQUEsTUFFQSxJQUFBUCxPQUFBLEVBVUEsT0FSQUEsRUFEQSxjQUFBN2pDLEVBQ0FBLEVBQUE2akMsVUFFQTdqQyxFQUFBcWtDLGlCQUVBbGhDLEVBQUFLLE9BQ0FxZ0MsWUFDQUYsT0FBQSxHQUVBeGdDLEVBOEZBLE9BckpJcVosSUFBU2duQixFQUFBOXRCLEdBMERUc2UsSUFBWXdQLElBQ2hCampDLElBQUEsa0JBQ0FoRCxNQUFBLFdBQ0EsT0FDQXVpQyxlQUFBMytCLEtBQUFxQyxNQUFBcWdDLFVBQ0FyRCxlQUFBci9CLEtBQUFuQixNQUFBd2dDLG1CQUlBamdDLElBQUEsb0JBQ0FoRCxNQUFBLFdBQ0E0RCxLQUFBdWlDLE1BQ0F2aUMsS0FBQXVpQyxJQUFBYixZQUFBMWhDLEtBQUFzaUMsbUJBQ0F0aUMsS0FBQXNpQyxrQkFBQXRpQyxLQUFBdWlDLE1BRUF2aUMsS0FBQStCLFFBQUF5K0IsV0FDQXhnQyxLQUFBK0IsUUFBQXkrQixVQUFBQyxTQUFBemdDLEtBQUFnakMsYUFJQTVqQyxJQUFBLHVCQUNBaEQsTUFBQSxXQUNBNEQsS0FBQXVpQyxLQUNBdmlDLEtBQUF1aUMsSUFBQVosZUFBQTNoQyxLQUFBc2lDLG1CQUVBdGlDLEtBQUErQixRQUFBeStCLFdBQ0F4Z0MsS0FBQStCLFFBQUF5K0IsVUFBQUcsWUFBQTNnQyxLQUFBZ2pDLGFBSUE1akMsSUFBQSxTQUNBaEQsTUFBQSxXQUNBLElBQUFzNkIsRUFFQUMsRUFBQTMyQixLQUFBbkIsTUFDQTZnQixFQUFBaVgsRUFBQWpYLFVBQ0F5RyxFQUFBd1EsRUFBQXhRLFVBQ0ErUSxFQUFBUCxFQUFBTyxNQUNBaU0sRUFBQXhNLEVBQUF3TSxZQUNBQyxFQUFBek0sRUFBQXlNLGFBQ0EvSixFQUFBMUMsRUFBQTBDLFFBQ0E5ZixFQUFBb2QsRUFBQXBkLE1BQ0FwTyxFQUFBd3JCLEVBQUF4ckIsTUFDQWswQixFQUFBMUksRUFBQTBJLGVBQ0FXLEVBQXlCcUIsRUFBTTFLLEdBQUEsMEdBQy9CME0sRUFBMkJwbkMsT0FBQThrQixFQUFBLEVBQUE5a0IsQ0FBSStqQyxHQUFBLDBFQUMvQnNELEVBQUF0akMsS0FBQXFDLE1BQUFxZ0MsVUFBQXJELEVBQUFsMEIsRUFFQW80QixFQUE2QnJDLEVBQVNvQyxLQUFBLEtBQUExUyxPQUFBMFMsR0FFdENFLEVBQUEsSUFBQXg1QixXQUFBNG1CLE9BQUF5TyxHQUFBLElBQW1GeGUsRUFBQSxjQUNuRixRQUNpQlosUUFBQWpnQixLQUFBNmlDLE9BQUExYyxVQUFBekcsRUFBQSx1QkFDRG1CLEVBQUEsY0FBb0JvVyxFQUFBLEdBQU90bEIsS0FBQSxVQUMzQyxLQU1BOHhCLEdBSkFDLFNBQUFOLEVBQTJDdmlCLEVBQUEsY0FBb0JvVyxFQUFBLEdBQU90bEIsS0FBQSxVQUFvQmtQLEVBQUEsY0FBb0JvVyxFQUFBLEdBQU90bEIsS0FBQSxTQUNySCt3QixVQUFBVSxFQUE0Q3ZpQixFQUFBLGNBQW9Cb1csRUFBQSxHQUFPdGxCLEtBQUEsU0FBbUJrUCxFQUFBLGNBQW9Cb1csRUFBQSxHQUFPdGxCLEtBQUEsV0FFckgzUixLQUFBcUMsTUFBQXFnQyxVQUFBLHdCQUVBaUIsRUFBQSxPQUFBdEssRUFBQW1LLEdBQW9FM2lCLEVBQUEsY0FDcEUsT0FDaUJzRixVQUFBekcsRUFBQSxXQUFBTyxRQUFBamdCLEtBQUE2aUMsT0FBQXRwQixPQUFrRXBPLE1BQUFvNEIsSUFDbkZsSyxHQUFBb0ssR0FDQSxLQUNBRyxFQUEyQjVpQixPQUFXekgsR0FBVXNxQixLQUFBLE9BQUFOLEVBQUFPLFNBQUFQLEVBQUFRLFNBQUFSLEVBQUFwNEIsTUFBQW80QixJQUNoRFMsRUFBMkJ0ZixJQUFVeUIsRUFBQXpHLElBQUEsSUFBQXdYLEdBQUFSLEtBQW1FSyxJQUFlTCxFQUFBaFgsRUFBQSxlQUFBMWYsS0FBQXFDLE1BQUFxZ0MsV0FBaUUzTCxJQUFlTCxFQUFBaFgsRUFBQSxlQUFBeWpCLEdBQUEsT0FBQTlKLElBQUFtSyxHQUFpR3pNLElBQWVMLEVBQUFoWCxFQUFBLFdBQUExZixLQUFBcUMsTUFBQW1nQyxPQUF5RHpMLElBQWVMLEVBQUFoWCxFQUFBLGtCQUFBMVYsV0FBQXU1QixJQUFBN00sSUFDL1gsT0FBbUI3VixFQUFBLGNBQ25CLE1BQ2dCRyxLQUFVbUYsVUFBQTZkLEdBQXNCWCxHQUFhOXBCLE1BQUFxcUIsSUFDN0MvaUIsRUFBQSxjQUNoQixPQUNxQnNGLFVBQUF6RyxFQUFBLGFBQ3JCMWYsS0FBQW5CLE1BQUFSLFVBRUE4a0MsR0FBQW5qQyxLQUFBcUMsTUFBQW1nQyxPQUFBZ0IsRUFBQUcsRUFBQSxXQUlBdmtDLElBQUEsMkJBQ0FoRCxNQUFBLFNBQUE4aUIsR0FDQSxvQkFBQUEsR0FFQXdqQixVQUFBeGpCLEVBQUF3akIsV0FHQSxTQUlBTCxFQXRKUyxDQXVKUHhoQixFQUFBLFdBRUZ1aEIsRUFBSzZCLG9CQUFBLEVBQ0w3QixFQUFLcHNCLGNBQ0wwSixVQUFBLG1CQUNBeWpCLGFBQUEsRUFDQUQsa0JBQUEsRUFDQUUsY0FBQSxFQUNBajRCLE1BQUEsSUFDQWswQixlQUFBLEdBQ0E5bEIsU0FDQTJkLE1BQUEsUUFFQWtMLEVBQUtoaEMsbUJBQ0x1OUIsZUFBb0JwTCxFQUFBLEtBQ3BCOEwsZUFBb0I5TCxFQUFBLFdBQXFCQSxFQUFBLE9BQWtCQSxFQUFBLFVBRTNENk8sRUFBS2gvQixjQUNMbzlCLFVBQWVqTixFQUFBLFFBRWZ0M0IsT0FBQW8yQixFQUFBLFNBQUFwMkIsQ0FBU21tQyxHQUNNLElBQUE4QixFQUFBLEVDOU5makQsRUFBTW9CLE1BQVM2QixFQUNBOW1DLEVBQUEsbUlDRGYrbUMsS0FFQUMsRUFBQSxFQWdDZUMsRUFYZixXQUNBLElBQUFDLEVBQUE5akMsVUFBQXpCLE9BQUEsUUFBQXpDLElBQUFrRSxVQUFBLEdBQUFBLFVBQUEsT0FDQStqQyxFQUFBL2pDLFVBQUF6QixPQUFBLFFBQUF6QyxJQUFBa0UsVUFBQSxHQUFBQSxVQUFBLE1BRUEsWUFBQThqQyxFQUNBQSxFQXhCb0IsU0FBQUEsR0FDcEIsSUFBQUUsRUFBQUYsRUFDQUcsRUFBQU4sRUFBQUssS0FBQUwsRUFBQUssT0FFQSxHQUFBQyxFQUFBSCxHQUFBLE9BQUFHLEVBQUFILEdBRUEsSUFBQUksRUFBMEJDLEVBQUE1bUMsRUFBWTZtQyxRQUFBTixHQU90QyxPQUxBRixFQVhBLE1BWUFLLEVBQUFILEdBQUFJLEVBQ0FOLEtBR0FNLEVBYWtCRyxDQUFnQlAsRUFDbEM1RSxDQUFBNkUsR0FBNEJPLFFBQUEsS0NqQzVCempDLEVBQUFwRixPQUFBcUYsUUFBQSxTQUFBM0QsR0FBbUQsUUFBQW1CLEVBQUEsRUFBZ0JBLEVBQUEwQixVQUFBekIsT0FBc0JELElBQUEsQ0FBTyxJQUFBeUMsRUFBQWYsVUFBQTFCLEdBQTJCLFFBQUFNLEtBQUFtQyxFQUEwQnRGLE9BQUF1RCxVQUFBZ0MsZUFBQXRCLEtBQUFxQixFQUFBbkMsS0FBeUR6QixFQUFBeUIsR0FBQW1DLEVBQUFuQyxJQUFpQyxPQUFBekIsR0FvQi9PLElBQUlvbkMsRUFBUSxTQUFBeHdCLEdBR1osU0FBQXl3QixJQUdBLE9BeEJBLFNBQUFubEMsRUFBQVIsR0FBaUQsS0FBQVEsYUFBQVIsR0FBMEMsVUFBQVMsVUFBQSxxQ0FzQjNGQyxDQUFBQyxLQUFBZ2xDLEdBcEJBLFNBQUEva0MsRUFBQUMsR0FBaUQsSUFBQUQsRUFBYSxVQUFBRSxlQUFBLDZEQUF5RixPQUFBRCxHQUFBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUFBRCxFQUFBQyxFQXNCdkpFLENBQUFKLEtBQUF1VSxFQUFBaFUsTUFBQVAsS0FBQVEsWUErREEsT0FuRkEsU0FBQUMsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQVosVUFBQSxrRUFBQVksR0FBdUdELEVBQUFqQixVQUFBdkQsT0FBQTBFLE9BQUFELEtBQUFsQixXQUF5RW9CLGFBQWV4RSxNQUFBcUUsRUFBQXhCLFlBQUEsRUFBQUUsVUFBQSxFQUFBRCxjQUFBLEtBQTZFd0IsSUFBQXpFLE9BQUE0RSxlQUFBNUUsT0FBQTRFLGVBQUFKLEVBQUFDLEdBQUFELEVBQUFKLFVBQUFLLEdBZXJYSSxDQUFBa2tDLEVBQUF6d0IsR0FRQXl3QixFQUFBeGxDLFVBQUF5bEMsU0FBQSxXQUNBLE9BQUFqbEMsS0FBQStCLFFBQUFtakMsUUFBQWxsQyxLQUFBK0IsUUFBQW1qQyxPQUFBQyxlQUdBSCxFQUFBeGxDLFVBQUE0bEMsbUJBQUEsV0FDSUMsSUFBU3JsQyxLQUFBK0IsUUFBQW1qQyxPQUFBLG9EQUVibGxDLEtBQUFpbEMsWUFBQWpsQyxLQUFBc2xDLFdBR0FOLEVBQUF4bEMsVUFBQXVmLGtCQUFBLFdBQ0EvZSxLQUFBaWxDLFlBQUFqbEMsS0FBQXNsQyxXQUdBTixFQUFBeGxDLFVBQUEyZixtQkFBQSxTQUFBaEosR0FDQSxJQUFBb3ZCLEVBQWlCdHBDLE9BQUE4a0IsRUFBQSxFQUFBOWtCLENBQWNrYSxFQUFBcXZCLElBQy9CQyxFQUFpQnhwQyxPQUFBOGtCLEVBQUEsRUFBQTlrQixDQUFjK0QsS0FBQW5CLE1BQUEybUMsSUFFdkJ2cEMsT0FBQThrQixFQUFBLEVBQUE5a0IsQ0FBaUJzcEMsRUFBQUUsR0FDbkJ0VSxLQUFPLG9FQUFBc1UsRUFBQUMsU0FBQUQsRUFBQUUsT0FBQSxLQUliM2xDLEtBQUFzbEMsV0FHQU4sRUFBQXhsQyxVQUFBb21DLFVBQUEsU0FBQXB4QixHQUNBLElBQUFxeEIsRUFBQXJ4QixFQUFBcXhCLGNBQ0FMLEVBQUFoeEIsRUFBQWd4QixHQUVBLE9BQUFLLEVBQ0EsaUJBQUFMLEVBQ2VuQixFQUFZbUIsRUFBQUssRUFBQXRCLFFBRTNCbGpDLEtBQTBCbWtDLEdBQzFCRSxTQUFvQnJCLEVBQVltQixFQUFBRSxTQUFBRyxFQUFBdEIsVUFLaENpQixHQUdBUixFQUFBeGxDLFVBQUE4bEMsUUFBQSxXQUNBLElBQUFRLEVBQUE5bEMsS0FBQStCLFFBQUFtakMsT0FBQVksUUFDQXBuQyxFQUFBc0IsS0FBQW5CLE1BQUFILEtBRUE4bUMsRUFBQXhsQyxLQUFBNGxDLFVBQUE1bEMsS0FBQW5CLE9BRUFILEVBQ0FvbkMsRUFBQXBuQyxLQUFBOG1DLEdBRUFNLEVBQUFDLFFBQUFQLElBSUFSLEVBQUF4bEMsVUFBQW9ELE9BQUEsV0FDQSxhQUdBb2lDLEVBckVZLENBc0VWMXBCLEVBQUF2ZCxFQUFLZ0QsV0FFUGdrQyxFQUFRNWpDLFdBQ1Iwa0MsY0FBaUJ0cUIsRUFBQXhkLEVBQVM2akIsT0FDMUJsakIsS0FBUTZjLEVBQUF4ZCxFQUFTK1gsS0FDakJrd0IsS0FBUXpxQixFQUFBeGQsRUFBUzBkLE9BQ2pCK3BCLEdBQU1qcUIsRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBUzBkLE9BQVNGLEVBQUF4ZCxFQUFTNmpCLFNBQUE1a0IsWUFFdEQrbkMsRUFBUS91QixjQUNSdFgsTUFBQSxHQUVBcW1DLEVBQVEzaEMsY0FDUjhoQyxPQUFVM3BCLEVBQUF4ZCxFQUFTbEIsT0FDbkJpcEMsUUFBYXZxQixFQUFBeGQsRUFBU2xCLE9BQ3RCNkIsS0FBWTZjLEVBQUF4ZCxFQUFTaEIsS0FBQUMsV0FDckIrb0MsUUFBZXhxQixFQUFBeGQsRUFBU2hCLEtBQUFDLGFBQ25CQSxXQUNMbW9DLGNBQW1CNXBCLEVBQUF4ZCxFQUFTNmpCLFNBQ3pCNWtCLFlBSVksSUFBQWlwQyxFQUFBLEVDN0dBN29DLEVBQUEsd01DRFIsU0FBQWtxQixLQUVBLFNBQUE0ZSxFQUFBbHFCLEVBQUFtcUIsRUFBQTFoQyxHQUNQLElBQUEyaEMsRUFBQUQsR0FBQSxHQUNBLE9BQUFucUIsRUFBQTVjLEtBQUFnbkMsRUFBQSxRQUFBM2hDLEVBR08sU0FBQTRoQyxFQUFBQyxHQUNQLE9BQUFBLEVBQUEsU0FHTyxTQUFBQyxFQUFBbG9DLEVBQUFSLEdBQ1AsSUFBQTRHLEdBQUEsRUFDRTZXLEVBQUF2ZCxFQUFLUSxTQUFBQyxRQUFBSCxFQUFBLFNBQUFJLEdBQ1BnRyxJQUNBaEcsS0FBQWtULE1BQUFsVCxFQUFBa1QsS0FBQTBPLGdCQUNNL0UsRUFBQXZkLEVBQUtRLFNBQUFDLFFBQUFDLEVBQUFJLE1BQUFSLFNBQUEsU0FBQW1vQyxHQUVYM29DLEVBQUEyb0MsSUFEQS9oQyxLQUlBNUcsRUFBQVksRUFBQWdHLEtBeUJPLElBQUFnaUMsR0FBQSx3cEJBR1AsK0ZBRU9DLEVBQUEsU0FBQUMsR0FDUCxPQUFBQSxFQUFBbEwsd0JBQUF0d0Isd0NDdERBZ3dCLEdBQ0EvWSxRQUFBLEVBQ0FDLFFBQUEsR0EwQmV1a0IsR0F0QmZ0a0IsU0FDQUosUUFBQSxXQUNBYixTQUFBOFosRUFDQWhaLFFBQUEsT0FFQUYsWUFDQUMsUUFBQSxXQUNBYixTQUFBOFosRUFDQWhaLFFBQUEsTUFFQTBXLFNBQ0EzVyxRQUFBLFdBQ0FiLFNBQUE4WixFQUNBaFosU0FBQSxNQUVBNFcsVUFDQTdXLFFBQUEsV0FDQWIsU0FBQThaLEVBQ0FoWixRQUFBLGVDUkEwa0IsRUFBQSxFQUVBQyxHQUNBQyxXQUFBLGFBQ0FDLFNBQUEsV0FDQUMsZ0JBQUEsV0FDQUMsaUJBQUEsV0FHSUMsRUFBd0IsU0FBQWxtQyxFQUFBcWxDLEVBQUFwbEIsR0FDNUIsSUFBQWttQixFQUVBQyxFQUFlaEIsRUFBNEJDLEdBQzNDamtDLEVBQUFwQixFQUFBL0QsV0FDQStELEVBQUFoRSxVQUNBaWtCLG1CQUF3QkYsT0FBVzNlLEVBQUE2ZSxvQkFBQWttQixLQUEyQ0EsRUFBQUMsR0FBQW5tQixFQUFBa21CLE9BSW5FbFAsRUFBTyxTQUFBM2pCLEdBR2xCLFNBQUE0akIsRUFBQXQ1QixHQUNJc2MsSUFBZW5iLEtBQUFtNEIsR0FFbkIsSUFBQW4yQixFQUFnQm9aLElBQTBCcGIsS0FBQXVVLEVBQUFyVSxLQUFBRixLQUFBbkIsSUFFdEN5b0MsRUFBZ0JwbkMsS0FBQThCLEdBRXBCLElBQUFmLEVBQUFwQyxFQUFBb0MsTUFDQXFsQyxFQUFBem5DLEVBQUF5bkMsU0FDQXBsQixFQUFBamdCLEVBQUEvRCxXQUFBZ2tCLG1CQUVBbGYsRUFBQXVsQyxZQUFBLEVBRUEsSUFBQW5yQyxHQUFBLEVBT0EsT0FMQThrQixJQUNBOWtCLEVBQUE4a0IsRUFBQW9sQixJQUdJYSxFQUF3QmxtQyxFQUFBcWxDLEVBQUFscUMsR0FDNUI0RixFQTRQQSxPQWxSRXFaLElBQVM4YyxFQUFBNWpCLEdBeUJYNGpCLEVBQUEzNEIsVUFBQXVmLGtCQUFBLFdBQ0EvZSxLQUFBbWYsc0JBR0FnWixFQUFBMzRCLFVBQUEyZixtQkFBQSxXQUNBLElBQUF4YyxFQUFBM0MsS0FFQStpQixFQUFBL2lCLEtBQUFuQixNQUNBa25CLEVBQUFoRCxFQUFBZ0QsS0FDQXloQixFQUFBemtCLEVBQUF5a0IsV0FDQUMsRUFBQTFrQixFQUFBMGtCLFVBSUFBLEdBQ0FBLEVBQUF6bkMsTUFHQSxlQUFBK2xCLEdBQUF5aEIsRUFBQUQsWUFBQXZuQyxLQUFBbkIsTUFBQTZvQyxTQUlBMW5DLEtBQUEybkMsZ0JBQUFoaEMsV0FBQSxXQUNBLE9BQUFoRSxFQUFBaWxDLGVBQ0ssS0FHTHpQLEVBQUEzNEIsVUFBQTRmLHFCQUFBLFdBQ0EsSUFBQXFRLEVBQUF6dkIsS0FBQW5CLE1BQ0FncEMsRUFBQXBZLEVBQUFvWSxVQUNBdkIsRUFBQTdXLEVBQUE2VyxTQUVBdUIsR0FDQUEsRUFBQXZCLEdBSUF0bUMsS0FBQTJuQyxpQkFDQXR1QixhQUFBclosS0FBQTJuQyxpQkFJQTNuQyxLQUFBOG5DLG1CQUNBenVCLGFBQUFyWixLQUFBOG5DLG9CQUlBM1AsRUFBQTM0QixVQUFBdW9DLGVBQUEsU0FBQTFwQyxHQUNBLElBQUFRLEVBQUFtQixLQUFBbkIsTUFDQW1wQyxHQUNBamlCLEtBQUEsZUFBQWxuQixFQUFBa25CLEtBQUEsV0FBQWxuQixFQUFBa25CLEtBQ0ExUSxRQUFBclYsS0FBQW5CLE1BQUE2b0MsT0FDQS9KLE1BQUE5K0IsRUFBQTgrQixNQUFBLEVBQ0FzSyxhQUFBcHBDLEVBQUFvcEMsYUFDQXhJLFdBQUEsRUFDQXhmLFFBQUFqZ0IsS0FBQWtvQyxlQUNBbG9CLFNBQUFoZ0IsS0FBQWdnQixTQUNBRixXQUFBOWYsS0FBQThmLFdBQ0ErbkIsVUFBQTduQyxLQUFBNm5DLFVBQ0EzbkIsYUFBQXJoQixFQUFBcWhCLGFBQ0FvbUIsU0FBQXpuQyxFQUFBeW5DLFNBQUEsU0FDQW5JLFNBQUF0L0IsRUFBQXMvQixTQUNBYSxtQkFBQW5nQyxFQUFBbWdDLG1CQUNBRCxjQUFBbGdDLEVBQUFrZ0MsY0FDQVYsYUFBQXIrQixLQUFBcStCLGFBQ0E4SixpQkFBQXRwQyxFQUFBc3BDLGlCQUNBWCxXQUFBeG5DLEtBQ0Fvb0Msa0JBQUF2cEMsRUFBQXVwQyxrQkFDQUMsbUJBQUF4cEMsRUFBQXdwQyxtQkFDQUMscUJBQUF6cEMsRUFBQXlwQyxxQkFDQXJrQixrQkFBQXBsQixFQUFBb2xCLGtCQUNBL0MsbUJBQUFyaUIsRUFBQW9DLE1BQUEvRCxXQUFBZ2tCLG1CQUFvRW1sQixFQUE0QnhuQyxFQUFBeW5DLFdBQ2hHOXBCLFNBQUEzZCxFQUFBMmQsU0FDQWtELFVBQUE3Z0IsRUFBQXk1QixjQUNBNWYsR0FBQTFZLEtBQUF1b0MsUUFDQWQsVUFBQXpuQyxLQUFBd29DLGlCQUNBcG5CLFNBQUF2aUIsRUFBQXVpQixTQUNBcW5CLFdBQUE1cEMsRUFBQTRwQyxZQUdBQyxFQUFBMW9DLEtBQUEwb0MsYUFLQSxHQUpBMW9DLEtBQUEwb0MsY0FBQSxFQUVBMW9DLEtBQUEyb0MsV0FBQTNvQyxLQUFBMm9DLFlBQUFYLEVBQUEzeUIsU0FBQTJ5QixFQUFBSyxvQkFFQXJvQyxLQUFBMm9DLFdBQ0EsT0FBYXJ0QixFQUFBdmQsRUFBS2lGLGNBQUEsWUFNbEIsSUFBQTRsQyxFQUFBRixJQUFBVixFQUFBM3lCLFNBQUEsWUFBQTJ5QixFQUFBamlCLEtBRUFpaUIsRUFBQTdoQixVQUFBLElBQUE2aEIsRUFBQXRvQixVQUFBLE9BQ0EsSUFBQW1wQixLQVdBLE9BVEFiLEVBQUFoSixtQkFDQTZKLEVBQUF2akIsZUFBQTBpQixFQUFBaEosbUJBQ0ssaUJBQUFnSixFQUFBakosZ0JBQ0w4SixFQUFBdGpCLFVBQTRCdkUsT0FBV2duQixFQUFBakosZUFDdkM2SixVQUNBQyxFQUFBdGpCLFVBQUEwUyxRQUlXM2MsRUFBQXZkLEVBQUtpRixjQUNWa3ZCLEVBQUEsRUFDQWxSLE9BQVc2bkIsR0FDakJDLFNBQUEsVUFDQTFXLFVBQUEsR0FDQXdXLHFCQUVNdHRCLEVBQUF2ZCxFQUFLaUYsY0FDSCtsQyxFQUNBL25CLE9BQVdnbkIsR0FBY3R2QixHQUFBMVksS0FBQXVvQyxVQUNqQ2xxQyxLQUtBODVCLEVBQUEzNEIsVUFBQW9ELE9BQUEsV0FDQSxJQUFBOHpCLEVBRUE3M0IsRUFBZ0JtaUIsT0FBV2hoQixLQUFBbkIsT0FDM0I2b0MsRUFBQTdvQyxFQUFBNm9DLE9BQ0EvSixFQUFBOStCLEVBQUE4K0IsTUFDQWplLEVBQUExZixLQUFBZ3BDLGVBQ0FDLEVBQUEsV0FBQXBxQyxFQUFBa25CLEtBQ0FJLEVBQW9CekIsSUFBVWhGLElBQUEsSUFBQTdnQixFQUFBa25CLE9BQUEyUSxNQUEyRDczQixFQUFBc25CLGFBQUF0bkIsRUFBQXNuQixVQUFBdVEsRUFBQTEyQixLQUFBa3BDLG9CQUFBeEIsRUFBQWhSLEVBQUExMkIsS0FBQW1wQyxzQkFBQXRxQyxFQUFBKzRCLFFBQUE4UCxJQUFBdUIsRUFBQXZTLEVBQUExMkIsS0FBQW9wQyx3QkFBQXZxQyxFQUFBNGUsU0FBQWlaLEVBQUExMkIsS0FBQXFwQyx3QkFBQXJwQyxLQUFBc3BDLHFCQUFBNVMsSUFFekYxMkIsS0FBQXVvQyxVQUNBMXBDLEVBQUF5bkMsU0FDQXRtQyxLQUFBdW9DLFFBQUExcEMsRUFBQXluQyxTQUFBLFFBRUF0bUMsS0FBQXVvQyxRQUFBLFVBQUExQixFQUFBLFNBSUEsSUFBQTBDLEtBQ0FDLEtBQ0FDLEtBQ0E1cUMsRUFBQTRlLFdBQ0E4ckIsR0FDQTdpQixhQUFBMW1CLEtBQUEwbUIsYUFDQUQsYUFBQXptQixLQUFBeW1CLGNBSUEraUIsR0FDQXZwQixRQUFBamdCLEtBQUEwcEMsY0FFQUQsR0FDQWhqQixhQUFBem1CLEtBQUEycEMsa0JBQ0FqakIsYUFBQTFtQixLQUFBNHBDLG9CQUlBLElBQUFyd0IsS0FDQTB2QixJQUNBMXZCLEVBQUFzd0IsWUFBQWhyQyxFQUFBb3BDLGFBQUFwcEMsRUFBQTgrQixPQUdBLElBQUFtTSxLQUlBOXBDLEtBQUFuQixNQUFBNm9DLFNBQ0FvQyxHQUNBQyxZQUFBL3BDLEtBQUF1b0MsVUFLQSxJQUFBdFIsRUFBQSxLQUNBLGVBQUFwNEIsRUFBQWtuQixPQUNBa1IsRUFBQWozQixLQUFBbkIsTUFBQTRwQyxXQUNBLG1CQUFBem9DLEtBQUFuQixNQUFBNHBDLGFBQ0F4UixFQUFlM2IsRUFBQXZkLEVBQUtpRixjQUFBaEQsS0FBQW5CLE1BQUE0cEMsV0FBc0N6bkIsT0FBV2hoQixLQUFBbkIsVUFJckUsSUFBQWlkLEVBQWdCUixFQUFBdmQsRUFBS2lGLGNBQ3JCLE1BQ01nZSxLQUNObGUsSUFBQTlDLEtBQUFncUMsaUJBQ0F6d0IsUUFDQTRNLFVBQUF6RyxFQUFBLFVBQ08rcEIsRUFBQUQsR0FDUGhmLGdCQUFBa2QsR0FDT29DLEdBQ1B2ZixnQkFBQSxPQUNBek8sTUFBQSxpQkFBQWpkLEVBQUFpZCxNQUFBamQsRUFBQWlkLFdBQUF4ZixJQUVBdUMsRUFBQWlkLE1BQ0FtYixHQUFjM2IsRUFBQXZkLEVBQUtpRixjQUFBLEtBQXFCbWpCLFVBQUF6RyxFQUFBLFlBRXhDcmhCLEVBQUEyQixLQUFBK25DLGVBQUFscEMsRUFBQVIsVUFFQW9tQixFQUFBNWxCLEVBQUEyb0MsV0FBQUQsV0FBQTFvQyxFQUFBMm9DLFdBQUEzb0MsTUFBQTRsQixrQkFBQSxTQUFBd2xCLEdBQ0EsT0FBQUEsRUFBQTE3QixZQUVBeVYsRUFBQThpQixFQUFBam9DLEVBQUFrbkIsTUFDQXhCLEVBQUExbEIsRUFBQXFyQyxhQUEwQy9uQixPQUFBdGpCLEVBQUFxckMsZ0JBQzFDMW1CLEVBQUEsV0FBQTNrQixFQUFBa25CLEtBQUEsR0FBQWxuQixFQUFBMmtCLGVBQ0EvRixFQUFBNWUsRUFBQTRlLFNBQ0E2cUIsRUFBQXpwQyxFQUFBeXBDLHFCQUNBSCxFQUFBdHBDLEVBQUFzcEMsaUJBQ0FFLEVBQUF4cEMsRUFBQXdwQyxtQkFDQUQsRUFBQXZwQyxFQUFBdXBDLGtCQUNBbmtCLEVBQUFwbEIsRUFBQW9sQixrQkFRQSxPQU5Jd2lCLEVBQVlqb0MsUUFBQSxTQUFBWSxHQUNoQixjQUFBUCxFQUFBTyxZQUdBUCxFQUFBb2hCLFFBRVczRSxFQUFBdmQsRUFBS2lGLGNBQ2hCLEtBQ01nZSxPQUFXbmlCLEVBQUEwcUMsR0FDakJwakIsWUFDQWhGLEtBQUEsYUFFQThuQixHQUFBbnRCLEVBQ0FtdEIsR0FBQTVxQyxHQUNBNHFDLEdBQXVCM3RCLEVBQUF2ZCxFQUFLaUYsY0FDcEIrZCxFQUFBLEdBRVJyQixZQUNBOEQsZUFBQTlELEVBQUEsVUFBQThELEVBQ0FpQixvQkFDQVIsa0JBQTZCakQsT0FBYTRsQixFQUFVM2lCLEdBQ3BERCxpQkFDQVEsYUFBQWtqQixFQUNBbmpCLGFBQ0FELE1BQUFqbUIsRUFDQW84QixPQUFBaGQsTUFBQTZxQixHQUNBeE8sZ0JBQUFxTyxFQUNBcE8sZ0JBQUFxTyxFQUNBaGtCLHFCQUFBcGtCLEtBQUFva0IscUJBQ0E3TyxZQUFBOHlCLEVBQ0E4QixPQUFBeE0sR0FFQTdoQixLQUtBcWMsRUFuUmtCLENBb1JoQjdjLEVBQUF2ZCxFQUFLZ0QsV0FFUG0zQixFQUFPLzJCLFdBQ1BxbUMsV0FBY2pzQixFQUFBeGQsRUFBUzZqQixPQUN2QjlGLE1BQVNQLEVBQUF4ZCxFQUFTdVEsS0FDbEJqUSxTQUFZa2QsRUFBQXhkLEVBQVNnWSxJQUNyQm1LLGFBQWdCM0UsRUFBQXhkLEVBQVNxc0MsTUFDekJqTSxTQUFZNWlCLEVBQUF4ZCxFQUFTcXNDLE1BQ3JCbnFCLFFBQVcxRSxFQUFBeGQsRUFBU2hCLEtBQ3BCc2hDLGFBQWdCOWlCLEVBQUF4ZCxFQUFTaEIsS0FDekJ1N0IsY0FBaUIvYyxFQUFBeGQsRUFBUzBkLE9BQzFCNnFCLFNBQVkvcUIsRUFBQXhkLEVBQVMwZCxPQUNyQmUsU0FBWWpCLEVBQUF4ZCxFQUFTK1gsS0FDckI4aEIsT0FBVXJjLEVBQUF4ZCxFQUFTK1gsS0FDbkJ1MEIsWUFBZTl1QixFQUFBeGQsRUFBU2hCLEtBQ3hCaWpCLFNBQVl6RSxFQUFBeGQsRUFBU2hCLEtBQ3JCdXJDLHFCQUF3Qi9zQixFQUFBeGQsRUFBUzBkLE9BQ2pDcUUsV0FBY3ZFLEVBQUF4ZCxFQUFTaEIsS0FDdkI4cUMsVUFBYXRzQixFQUFBeGQsRUFBU2hCLEtBQ3RCMHBCLGFBQWdCbEwsRUFBQXhkLEVBQVNoQixLQUN6QjJwQixhQUFnQm5MLEVBQUF4ZCxFQUFTaEIsS0FDekI0c0Msa0JBQXFCcHVCLEVBQUF4ZCxFQUFTaEIsS0FDOUI2c0Msa0JBQXFCcnVCLEVBQUF4ZCxFQUFTaEIsS0FDOUIyc0MsYUFBZ0JudUIsRUFBQXhkLEVBQVNoQixLQUN6Qm10QyxZQUFlM3VCLEVBQUF4ZCxFQUFTcXNDLE1BQ3hCMUMsT0FBVW5zQixFQUFBeGQsRUFBUytYLEtBQ25CN1UsTUFBU3NhLEVBQUF4ZCxFQUFTNmpCLE9BQ2xCbUUsS0FBUXhLLEVBQUF4ZCxFQUFTdXNDLE9BQUEsb0VBQ2pCN0MsVUFBYWxzQixFQUFBeGQsRUFBU2hCLEtBQ3RCcWtCLFNBQVk3RixFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTaEIsS0FBT3dlLEVBQUF4ZCxFQUFTdVEsT0FDMURtNkIsV0FBY2x0QixFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTaEIsS0FBT3dlLEVBQUF4ZCxFQUFTdVEsUUFFNUQ0cEIsRUFBT2xpQixjQUNQeVEsYUFBZ0JhLEVBQ2hCWixhQUFnQlksRUFDaEJxaUIsa0JBQXFCcmlCLEVBQ3JCc2lCLGtCQUFxQnRpQixFQUNyQm9pQixhQUFnQnBpQixFQUNoQm1nQixVQUFhbmdCLEVBQ2J2QixLQUFBLFdBQ0FqSyxNQUFBLElBR0EsSUFBSXdyQixFQUFnQixXQUNwQixJQUFBakgsRUFBQXJnQyxLQUVBQSxLQUFBNm5DLFVBQUEsU0FBQXpvQyxHQUNBaWhDLEVBQUF4aEMsTUFBQWdwQyxVQUFBem9DLElBR0FZLEtBQUFncUIsVUFBQSxTQUFBL3JCLEdBQ0EsSUFBQTJSLEVBQUEzUixFQUFBMlIsUUFDQTJjLEVBQUE4VCxFQUFBa0ssYUFDQTlaLEVBQUE0UCxFQUFBeGhDLE1BQ0E2b0MsRUFBQWpYLEVBQUFpWCxPQUNBem1DLEVBQUF3dkIsRUFBQXh2QixNQUdBLEdBQUEyTyxJQUFvQnFjLEVBQUEsRUFBT0MsTUFHM0IsT0FGQW1VLEVBQUFxSixhQUFBenJDLEdBQ01rcEMsRUFBd0JsbUMsRUFBQW8vQixFQUFBeGhDLE1BQUF5bkMsVUFBQSxJQUM5QixFQUdBLEdBQUExMkIsSUFBb0JxYyxFQUFBLEVBQU91ZSxNQVEzQixPQVBBOUMsRUFDQW5iLEVBQUF2QyxVQUFBL3JCLElBRUFvaUMsRUFBQW9LLG1CQUFBLEdBRVF0RCxFQUF3QmxtQyxFQUFBby9CLEVBQUF4aEMsTUFBQXluQyxVQUFBLEtBRWhDLEVBRUEsR0FBQTEyQixJQUFvQnFjLEVBQUEsRUFBT3llLEtBQUEsQ0FDM0IsSUFBQUMsT0FBQSxFQUNBLElBQUFqRCxFQUdBLE9BTUEsT0FSQWlELEVBQUFwZSxFQUFBdkMsVUFBQS9yQixNQUtBb2lDLEVBQUFvSyxtQkFBQSxHQUNBRSxHQUFBLEdBRUFBLEVBR0EsT0FBQWpELEdBQUE5M0IsSUFBK0JxYyxFQUFBLEVBQU8yZSxJQUFBaDdCLElBQW1CcWMsRUFBQSxFQUFPRSxVQUFoRSxFQUNBSSxFQUFBdkMsVUFBQS9yQixJQUlBK0IsS0FBQXErQixhQUFBLFNBQUFwZ0MsR0FDQW9pQyxFQUFBeGhDLE1BQUF3L0IsYUFBQXBnQyxJQUdBK0IsS0FBQW9rQixxQkFBQSxTQUFBL08sR0FDQWdyQixFQUFBb0ssa0JBQUFwMUIsSUFBQSw0QkFHQXJWLEtBQUF5bUIsYUFBQSxTQUFBeG9CLEdBQ0EsSUFBQTRzQyxFQUFBeEssRUFBQXhoQyxNQUNBTyxFQUFBeXJDLEVBQUF2RSxTQUNBN2YsRUFBQW9rQixFQUFBcGtCLGFBQ0F4bEIsRUFBQTRwQyxFQUFBNXBDLE1BRUlrbUMsRUFBd0JsbUMsRUFBQW8vQixFQUFBeGhDLE1BQUF5bkMsVUFBQSxHQUM1QjdmLEdBQ0FybkIsTUFDQTB0QixTQUFBN3VCLEtBSUErQixLQUFBMG1CLGFBQUEsU0FBQXpvQixHQUNBLElBQUE2c0MsRUFBQXpLLEVBQUF4aEMsTUFDQTJvQyxFQUFBc0QsRUFBQXRELFdBQ0FsQixFQUFBd0UsRUFBQXhFLFNBQ0E1ZixFQUFBb2tCLEVBQUFwa0IsYUFFQThnQixFQUFBdUQsZ0JBQUExSyxFQUNBM1osR0FDQXRuQixJQUFBa25DLEVBQ0F4WixTQUFBN3VCLEtBSUErQixLQUFBMnBDLGtCQUFBLFNBQUE3YyxHQUNBLElBQUFrZSxFQUFBM0ssRUFBQXhoQyxNQUNBTyxFQUFBNHJDLEVBQUExRSxTQUNBK0QsRUFBQVcsRUFBQVgsWUFDQVYsRUFBQXFCLEVBQUFyQixrQkFFQVUsR0FDQWpyQyxNQUNBNnJDLE9BQUEsSUFFQXRCLEdBQ0F2cUMsTUFDQTB0QixjQUlBOXNCLEtBQUE0cEMsa0JBQUEsU0FBQTNyQyxHQUNBLElBQUFpdEMsRUFBQTdLLEVBQUF4aEMsTUFDQTJvQyxFQUFBMEQsRUFBQTFELFdBQ0FsQixFQUFBNEUsRUFBQTVFLFNBQ0ErRCxFQUFBYSxFQUFBYixZQUNBVCxFQUFBc0IsRUFBQXRCLGtCQUVBcEMsRUFBQXVELGdCQUFBMUssRUFDQWdLLEdBQ0FqckMsSUFBQWtuQyxFQUNBMkUsT0FBQSxJQUVBckIsR0FDQXhxQyxJQUFBa25DLEVBQ0F4WixTQUFBN3VCLEtBSUErQixLQUFBMHBDLGFBQUEsU0FBQXpyQyxHQUNBLElBQUFZLEVBQUF3aEMsRUFBQXhoQyxNQUVBQSxFQUFBNnFDLGNBQ0F0cUMsSUFBQVAsRUFBQXluQyxTQUNBeFosU0FBQTd1QixJQUVBLFVBQUFZLEVBQUF5cEMsdUJBR0FqSSxFQUFBb0ssbUJBQUE1ckMsRUFBQTZvQyxPQUFBLFNBQ0lQLEVBQXdCdG9DLEVBQUFvQyxNQUFBby9CLEVBQUF4aEMsTUFBQXluQyxVQUFBLEtBRzVCdG1DLEtBQUFrb0MsZUFBQSxTQUFBMWEsR0FDQTZTLEVBQUF4aEMsTUFBQW9oQixRQUFBb2dCLEVBQUE4SyxXQUFBM2QsS0FHQXh0QixLQUFBZ2dCLFNBQUEsU0FBQXdOLEdBQ0E2UyxFQUFBeGhDLE1BQUFtaEIsU0FBQXdOLElBR0F4dEIsS0FBQThmLFdBQUEsU0FBQTBOLEdBQ0E2UyxFQUFBeGhDLE1BQUFpaEIsV0FBQTBOLElBR0F4dEIsS0FBQWdwQyxhQUFBLFdBQ0EsT0FBQTNJLEVBQUF4aEMsTUFBQXk1QixjQUFBLFlBR0F0NEIsS0FBQW1wQyxtQkFBQSxXQUNBLE9BQUE5SSxFQUFBMkksZUFBQSxXQUdBaHBDLEtBQUFvcEMscUJBQUEsV0FDQSxPQUFBL0ksRUFBQTJJLGVBQUEsYUFHQWhwQyxLQUFBcXBDLHFCQUFBLFdBQ0EsT0FBQWhKLEVBQUEySSxlQUFBLGFBR0FocEMsS0FBQWtwQyxpQkFBQSxXQUNBLE9BQUE3SSxFQUFBeGhDLE1BQUF5NUIsY0FBQSxpQkFHQXQ0QixLQUFBd29DLGlCQUFBLFNBQUEvcEMsR0FFQTRoQyxFQUFBa0ssYUFBQTlyQyxHQUdBdUIsS0FBQW1yQyxXQUFBLFNBQUEzZCxHQUNBLE9BQVd4TSxPQUFXd00sR0FDdEI0ZCxTQUFBNWQsRUFBQTRkLGFBQUE5NEIsT0FBQSt0QixFQUFBeGhDLE1BQUF5bkMsYUFJQXRtQyxLQUFBeXFDLGtCQUFBLFNBQUEzaUIsRUFBQW5XLEdBQ0EsSUFBQXZTLEVBQUFpaEMsRUFBQXhoQyxNQUFBeW5DLFNBQ0ErRSxFQUFBLFdBQ0FoTCxFQUFBaEMsY0FDQWovQixNQUNBZ2hCLEtBQUFpZ0IsRUFDQWhILFFBQUExbkIsRUFDQW1XLFVBR0EsZUFBQW5XLEVBRUEwdUIsRUFBQXlILGtCQUFBbmhDLFdBQUEsV0FDQTBrQyxLQUNPLEdBRVBBLEtBSUFyckMsS0FBQXNwQyxtQkFBQSxXQUNBLElBQUFockMsR0FBZWd0QyxNQUFBLEdBRWYsT0Y1Z0JPLFNBQUFDLEVBQUFsdEMsRUFBQXlGLEVBQUF4RixHQUVQRCxJQUFBQyxFQUFBZ3RDLE1BR0Vod0IsRUFBQXZkLEVBQUtRLFNBQUFDLFFBQUFILEVBQUEsU0FBQUksR0FDUCxHQUFBQSxFQUFBLENBQ0EsSUFBQStzQyxFQUFBL3NDLEVBQUFrVCxLQUNBLElBQUE2NUIsT0FBQWhULFdBQUFnVCxFQUFBNU4sWUFBQTROLEVBQUFuckIsaUJBQ0EsUUFFQSxJQUFBdmMsRUFBQVksUUFBQWpHLEVBQUFXLEtBQ0FkLEVBQUFndEMsTUFBQSxFQUNPN3NDLEVBQUFJLE1BQUFSLFVBQ1BrdEMsRUFBQTlzQyxFQUFBSSxNQUFBUixTQUFBeUYsRUFBQXhGLE1FNmZJaXRDLENBQXVCbEwsRUFBQXhoQyxNQUFBUixTQUFBZ2lDLEVBQUF4aEMsTUFBQXFoQixhQUFBNWhCLEdBQzNCQSxFQUFBZ3RDLE1BR0F0ckMsS0FBQTBuQyxPQUFBLFdBQ0EsV0FBQXJILEVBQUF4aEMsTUFBQXMvQixTQUFBejVCLFFBQUEyN0IsRUFBQXhoQyxNQUFBeW5DLFdBR0F0bUMsS0FBQTRuQyxZQUFBLFdBRUEsR0FBQXZILEVBQUFvTCxjQUFBcEwsRUFBQWtLLGFBQUEsQ0FHQSxJQUFBbUIsRUFBb0I3bUIsRUFBQTltQixFQUFRK21CLFlBQUF1YixFQUFBa0ssY0FDNUJtQixFQUFBM21CLGFBQUFzYixFQUFBb0wsYUFBQTFtQixjQUtBMm1CLEVBQUFueUIsTUFBQXdxQixTQUFBMUQsRUFBQW9MLGFBQUExbUIsWUFBQSxRQUdBL2tCLEtBQUFncUMsaUJBQUEsU0FBQXlCLEdBQ0FwTCxFQUFBb0wsaUJBSUFFLEVBQWdCMXZDLE9BQUEydkMsRUFBQSxRQUFBM3ZDLENBQU8sU0FBQXVZLEVBQUFxWSxHQUN2QixJQUFBc1IsRUFBQTNwQixFQUFBMnBCLFNBQ0F6ZCxFQUFBbE0sRUFBQWtNLFVBQ0FSLEVBQUExTCxFQUFBMEwsYUFDQW9tQixFQUFBelosRUFBQXlaLFNBQ0F1RixFQUFBaGYsRUFBQWdmLFdBQ0EsT0FDQW5FLE9BQUF2SixFQUFBejVCLFFBQUE0aEMsSUFBQSxFQUNBMU8sT0FBQWxYLEVBQUFtckIsS0FBQXZGLEVBQ0FwbUIsaUJBVGdCamtCLENBV2JpOEIsR0FFSHlULEVBQUFuVCxXQUFBLEVBRWUsSUFBQXNULEVBQUEsSUNya0JmLG9CQUFBMWxDLGdCQUFBQyxXQUFBRCxPQUFBQyxTQUFBckQsZ0JBSUVwRyxFQUFRLEtBR1YsSUFBSW12QyxFQUFPLFNBQUF4M0IsR0FHWCxTQUFBeTNCLElBQ0EsSUFBQXYzQixFQUFBelMsRUFBQTBTLEVBRUl5RyxJQUFlbmIsS0FBQWdzQyxHQUVuQixRQUFBcjNCLEVBQUFuVSxVQUFBekIsT0FBQThGLEVBQUErUCxNQUFBRCxHQUFBRSxFQUFBLEVBQW1FQSxFQUFBRixFQUFhRSxJQUNoRmhRLEVBQUFnUSxHQUFBclUsVUFBQXFVLEdBR0EsT0FBQUosRUFBQXpTLEVBQW9Db1osSUFBMEJwYixLQUFBdVUsRUFBQXJVLEtBQUFLLE1BQUFnVSxHQUFBdlUsTUFBQXNTLE9BQUF6TixLQUFBN0MsRUFBQUssT0FDOUQ0cEMsc0JBQUEzdkMsR0FDSzBGLEVBQUFrcUMseUJBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDTCxJQUFBajNCLEVBQUFwVCxFQUFBbkQsTUFDQXl0QyxFQUFBbDNCLEVBQUFrM0Isb0JBQ0EzTyxFQUFBdm9CLEVBQUF1b0IsTUFDQTVYLEVBQUEzUSxFQUFBMlEsS0FDQXJHLEVBQUF0SyxFQUFBc0ssVUFDQXdYLEVBQUE5aEIsRUFBQThoQixNQUNBcVYsRUFBQW4zQixFQUFBbUUsTUFFQSxPQUFBb2tCLEdBQUEsZUFBQTVYLEVBQ0EsWUFJQSxJQUVBeW1CLEVBRkF4cUMsRUFBQW5ELE1BQUFSLFNBQUEsR0FFQVEsTUFJQTR0QyxHQUhBRCxFQUFBbnVDLFNBQ0FtdUMsRUFBQTF3QixNQUNBMHdCLEVBQUFsRyxTQUNpQnRqQixJQUF3QndwQixHQUFBLGlDQUV6Q2p6QixFQUFrQnlILE9BQVd1ckIsR0FDN0JudEMsRUFBQStzQyxFQUFBLHdCQUVBLElBQUFDLEVBQUFydEMsU0FBQSxJQUFBc3RDLEVBQ0E5eUIsRUFBZ0J5SCxPQUFXekgsR0FDM0JpVixRQUFBLFNBRU82ZCxJQUNQOXlCLEVBQWdCeUgsT0FBV3pILEdBQzNCbXpCLFdBQUEsU0FFQXBpQyxTQUFBLGFBRUFsTCxHQUFBLGdCQUdBLElBQUFva0IsRUFBQTBULEVBQUF4WCxFQUFBLElBQUF3WCxFQUFBLEdBRUEsT0FBYTViLEVBQUF2ZCxFQUFLaUYsY0FDVjhvQyxFQUNBOXFCLEtBQ1JsRixNQUFBd3dCLEVBQ0FubUIsVUFBQXpHLEVBQUEsc0JBQ0E4RCxrQkFDU2lwQixHQUNUcnRDLE1BQ0FrbkMsU0FBQTZGLEVBQUEsd0JBQ0ExdUIsVUFBQSxFQUNBbEUsVUFFQTZ5QixJQUVLcHFDLEVBQUEycUMsMEJBQUEsV0FDTCxrQkFBQTNxQyxFQUFBbkQsTUFBQWtuQixLQUFBLENBR0EsSUFBQTZtQixFQUFlL25CLEVBQUE5bUIsRUFBUSttQixZQUFBOWlCLEdBRXZCLEdBQUE0cUMsRUFBQSxDQUlBLElBQUFDLEVBQUFELEVBQUF2dUMsU0FFQSxHQUFBd3VDLEdBQUEsSUFBQUEsRUFBQTl0QyxPQUFBLENBSUFpRCxFQUFBOHFDLGlCQUNBLElBQUF6dUMsRUFBQTJELEVBQUFuRCxNQUFBUixTQUdBMHVDLEVBQUFILEVBQUF2dUMsU0FBQXd1QyxFQUFBOXRDLE9BQUEsR0FHQWd1QyxFQUFBeHpCLE1BQUFwTyxNQUFBLE9BQ0FuSixFQUFBOHFDLGNBQUF6dUMsRUFBQTJQLElBQUEsU0FBQXZQLEVBQUFLLEdBQ0EsT0FBZTRuQyxFQUFRa0csRUFBQXZ1QyxTQUFBLEVBQUFTLEVBQUEsTUFHdkJrRCxFQUFBZ3JDLHlCQUF1Q3RHLEVBQVFrRyxFQUFBdnVDLFNBQUF1dUMsRUFBQXZ1QyxTQUFBVSxPQUFBLElBQy9DaUQsRUFBQWlyQyxtQkFBQWpyQyxFQUFBOHFDLGNBQUF6aUMsT0FBQSxTQUFBNmlDLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUMsR0FDTyxHQUNQbnJDLEVBQUFvckMsZUFHQUwsRUFBQXh6QixNQUFBcE8sTUFBQSxNQUNLbkosRUFBQXFyQyxlQUFBLEtBQUFyckMsRUFBQXNyQyxpQkFBQSxLQUFBdHJDLEVBQUFpckMsbUJBQUEsRUFBQWpyQyxFQUFBb3FDLG1CQUFBcHFDLEVBQUE4cUMsaUJBQUE5cUMsRUFBQW9yQyxhQUFBLFdBQ0wsa0JBQUFwckMsRUFBQW5ELE1BQUFrbkIsS0FBQSxDQUlBLElBQUE2bUIsRUFBZS9uQixFQUFBOW1CLEVBQVErbUIsWUFBQTlpQixHQUN2QixHQUFBNHFDLEVBQUEsQ0FHQSxJQUFBemhDLEVBQWtCdTdCLEVBQVFrRyxHQUUxQjVxQyxFQUFBb3FDLG1CQUNBLElBQUFtQixFQUFBLEVBR0F0QixPQUFBM3ZDLEVBRUEwRixFQUFBaXJDLG1CQUFBOWhDLElBQ0E4Z0MsR0FBQSxFQUVBanFDLEVBQUE4cUMsY0FBQXR1QyxRQUFBLFNBQUFndkMsSUFDQUQsR0FBQUMsR0FDQXhyQyxFQUFBZ3JDLDBCQUFBN2hDLEdBQ0E4Z0MsT0FLQWpxQyxFQUFBL0UsVUFBc0JndkMsd0JBeEh0QnYzQixFQXlIS0QsRUFBVTJHLElBQTBCcFosRUFBQTBTLEdBc0h6QyxPQTFQRTJHLElBQVMyd0IsRUFBQXozQixHQXVJWHkzQixFQUFBeHNDLFVBQUF1ZixrQkFBQSxXQUNBLElBQUFwYyxFQUFBM0MsS0FHQSxHQURBQSxLQUFBMnNDLDRCQUNBLElBQUEzc0MsS0FBQW5CLE1BQUE4K0IsT0FBQSxlQUFBMzlCLEtBQUFuQixNQUFBa25CLEtBQUEsQ0FDQSxJQUFBMG5CLEVBQW1CNW9CLEVBQUE5bUIsRUFBUSttQixZQUFBOWtCLE1BQzNCLElBQUF5dEMsRUFDQSxPQUVBenRDLEtBQUFxdEMsZUFBQSxJQUFnQ0ssRUFBQSxFQUFjLFNBQUE1bkMsR0FDOUNBLEVBQUF0SCxRQUFBbUUsRUFBQWdxQyxnQ0FHQTduQyxNQUFBNUUsS0FBQXV0QyxFQUFBcHZDLFVBQUFpVSxPQUFBbTdCLEdBQUFqdkMsUUFBQSxTQUFBbXZDLEdBQ0FockMsRUFBQTBxQyxlQUFBdGtDLFFBQUE0a0MsS0FHQSxvQkFBQTFtQyxtQkFDQWpILEtBQUFzdEMsaUJBQUEsSUFBQXJtQyxpQkFBQSxXQUNBdEUsRUFBQTBxQyxlQUFBaGtDLGdCQUNBdkUsTUFBQTVFLEtBQUF1dEMsRUFBQXB2QyxVQUFBaVUsT0FBQW03QixHQUFBanZDLFFBQUEsU0FBQW12QyxHQUNBaHJDLEVBQUEwcUMsZUFBQXRrQyxRQUFBNGtDLEtBRUFockMsRUFBQWdxQyw4QkFFQTNzQyxLQUFBc3RDLGlCQUFBdmtDLFFBQUEwa0MsR0FBK0N6a0MsWUFBQSxFQUFBQyxXQUFBLEVBQUEya0MsU0FBQSxPQUsvQzVCLEVBQUF4c0MsVUFBQTRmLHFCQUFBLFdBQ0FwZixLQUFBcXRDLGdCQUNBcnRDLEtBQUFxdEMsZUFBQWhrQyxhQUVBckosS0FBQXN0QyxrQkFDQXR0QyxLQUFBcXRDLGVBQUFoa0MsY0FnQkEyaUMsRUFBQXhzQyxVQUFBdW9DLGVBQUEsU0FBQTFwQyxHQUNBLElBQUFnaUMsRUFBQXJnQyxLQUdBaXNDLEVBQUFqc0MsS0FBQXFDLE1BQUE0cEMsaUJBRUEsT0FBQTV0QyxPQUFBZ00sT0FBQSxTQUFBNmlDLEVBQUFXLEVBQUFwcEMsR0FDQSxJQUFBMmIsRUFBQXl0QixFQUNBLGtCQUFBeE4sRUFBQXhoQyxNQUFBa25CLEtBQUEsQ0FDQSxJQUFBK25CLEVBQUF6TixFQUFBNkwseUJBQUEyQixFQUFBaHZDLE1BQUF5bkMsa0JBQ0FocUMsSUFBQTJ2QyxJQUFBLElBQUE1TCxFQUFBeGhDLE1BQUFzbkIsVUFBQXpoQixRQUFBMjdCLEVBQUF4aEMsTUFBQTZnQixVQUFBLFdBQ0FqYixFQUFBd25DLElBQ0E3ckIsRUFBbUI5RSxFQUFBdmQsRUFBSzh3QixhQUFBZ2YsR0FFWHQwQixPQUFTbXpCLFdBQUEsVUFBdUJwRyxTQUFBdUgsRUFBQWh2QyxNQUFBeW5DLFNBQUEsYUFFN0M3aEMsSUFBQXduQyxFQUFBLElBQ0E1TCxFQUFBK0wsZ0JBQUEvdEMsRUFBQXlHLE1BQUFtbkMsRUFBQSxHQUFBaitCLElBQUEsU0FBQXZQLEdBQ0EsT0FBcUI2YyxFQUFBdmQsRUFBSzh3QixhQUFBcHdCLEdBR1hXLElBQUFYLEVBQUFJLE1BQUF5bkMsU0FBQXZnQixLQUFBLG9CQUdmK25CLEVBQUF6TixFQUFBNkwseUJBQUEyQixFQUFBaHZDLE1BQUF5bkMsU0FBQWpHLEVBQUErTCxtQkFJQSxJQUFBOXRDLEtBQUFnVSxPQUFBNDZCLEdBQUFZLEVBQUExdEIsSUFNQSxPQUpBM2IsSUFBQXBHLEVBQUFVLE9BQUEsR0FFQVQsRUFBQUksS0FBQTJoQyxFQUFBNkwseUJBQUEyQixFQUFBaHZDLE1BQUF5bkMsYUFBQSxJQUVBaG9DLEVBRUEsU0FBQWdVLE9BQUE0NkIsR0FBQTlzQixVQUlBNHJCLEVBQUF4c0MsVUFBQW9ELE9BQUEsV0FDQSxJQUFBbWdCLEVBQUEvaUIsS0FBQW5CLE1BQ0FrdkMsRUFBQWhyQixFQUFBZ3JCLGdCQUNBMTRCLEVBQUEwTixFQUFBMU4sUUFLQTI0QixHQUpBanJCLEVBQUFyRCxVQUNBcUQsRUFBQXVwQixvQkFDQXZwQixFQUFBZ0QsS0FDQWhELEVBQUE0YSxNQUNBNWEsRUFBQWtyQixLQUdBeEIsR0FGQTFwQixFQUFBMWtCLFNBQ0Ewa0IsRUFBQW1VLE1BQ2VsVSxJQUF3QkQsR0FBQSx5R0FNdkMsT0FKQTFOLElBQ0FvM0IsRUFBQXRtQixXQUFBLElBQUE0bkIsR0FHV3p5QixFQUFBdmQsRUFBS2lGLGNBQ2hCZ3JDLEVBQ0F2QixFQUNBenNDLEtBQUErbkMsZUFBQS9uQyxLQUFBbkIsTUFBQVIsWUFJQTJ0QyxFQTNQVyxDQTRQVDF3QixFQUFBdmQsRUFBS2dELFdBRVBnckMsRUFBTzVxQyxXQUNQZ2xCLFVBQWE1SyxFQUFBeGQsRUFBUzBkLE9BQ3RCcGQsU0FBWWtkLEVBQUF4ZCxFQUFTdVEsS0FDckJ5WCxLQUFReEssRUFBQXhkLEVBQVN1c0MsT0FBQSxvRUFDakI1cUIsVUFBYW5FLEVBQUF4ZCxFQUFTMGQsT0FDdEJraUIsTUFBU3BpQixFQUFBeGQsRUFBUzJkLE9BQ2xCd2IsTUFBUzNiLEVBQUF4ZCxFQUFTMGQsT0FDbEI2d0Isb0JBQXVCL3dCLEVBQUF4ZCxFQUFTdVEsS0FDaEMrRyxRQUFXa0csRUFBQXhkLEVBQVMrWCxLQUNwQmk0QixnQkFBbUJ4eUIsRUFBQXhkLEVBQVMwZCxPQUM1Qnd5QixJQUFPMXlCLEVBQUF4ZCxFQUFTMGQsT0FDaEJsQyxNQUFTZ0MsRUFBQXhkLEVBQVM2akIsUUFHbEJtcUIsRUFBTy8xQixjQUNQaTRCLElBQUEsTUFDQTluQixVQUFBLElBR2UsSUFBQStuQixFQUFBLEVDN1FmLFNBQUFDLEVBQUFsdEMsRUFBQW9tQyxFQUFBM21CLEdBQ0EsSUFBQTBtQixFQUVBL2tDLEVBQUFwQixFQUFBL0QsV0FDQStELEVBQUFoRSxVQUNBeWpCLFVBQWVNLE9BQVczZSxFQUFBcWUsV0FBQTBtQixLQUFrQ0EsRUFBQUMsR0FBQTNtQixFQUFBMG1CLE1BSTVELFNBQUFnSCxFQUFBdnZDLEdBRUEsT0FBQUEsRUFBQXluQyxVQUFBLFVBR08sU0FBQStILEVBQUF4dkMsRUFBQXl2QyxHQUNQLElBQUE1dEIsRUFBQTR0QixFQUNBandDLEVBQUFRLEVBQUFSLFNBQ0Fpb0MsRUFBQXpuQyxFQUFBeW5DLFNBRUEsR0FBQTVsQixFQUFBLENBQ0EsSUFBQTBNLE9BQUEsRUFNQSxHQUxJbVosRUFBWWxvQyxFQUFBLFNBQUFJLEVBQUFLLEdBQ2hCTCxNQUFBSSxNQUFBNGUsVUFBQWlELElBQWtEd2xCLEVBQXVCem5DLEVBQUE2bkMsRUFBQXhuQyxLQUN6RXN1QixHQUFBLEtBR0FBLEVBQ0EsT0FBQTFNLEVBSUEsT0FEQUEsRUFBQSxLQUNBN2hCLEVBQUFxaUIsb0JBQ0lxbEIsRUFBWWxvQyxFQUFBLFNBQUFJLEVBQUFLLEdBQ2hCNGhCLElBQUFqaUIsS0FBQUksTUFBQTRlLFdBQ0FpRCxFQUFvQndsQixFQUF1QnpuQyxFQUFBNm5DLEVBQUF4bkMsTUFHM0M0aEIsR0FFQUEsRUFnQk8sSUFBSTZ0QixFQUFZLFNBQUFoNkIsR0FHdkIsU0FBQWk2QixFQUFBM3ZDLEdBQ0EsSUFBQTR2QyxFQUVJdHpCLElBQWVuYixLQUFBd3VDLEdBRW5CLElBQUF4c0MsRUFBZ0JvWixJQUEwQnBiLEtBQUF1VSxFQUFBclUsS0FBQUYsS0FBQW5CLElBUzFDLE9BUEk2dkMsRUFBZ0J4dUMsS0FBQThCLEdBRXBCbkQsRUFBQW9DLE1BQUFoRSxVQUNBeWpCLFVBQWlCTSxPQUFXbmlCLEVBQUFvQyxNQUFBL0QsV0FBQXdqQixXQUFBK3RCLEtBQW1EQSxFQUFBNXZDLEVBQUF5bkMsVUFBQStILEVBQUF4dkMsSUFBQTZoQixXQUFBK3RCLE1BRy9FenNDLEVBQUEyc0MsaUJBQ0Ezc0MsRUFvRkEsT0FwR0VxWixJQUFTbXpCLEVBQUFqNkIsR0FtQlhpNkIsRUFBQWh2QyxVQUFBdWYsa0JBQUEsV0FFQS9lLEtBQUFuQixNQUFBNG9DLFdBQ0F6bkMsS0FBQW5CLE1BQUE0b0MsVUFBQXpuQyxPQUlBd3VDLEVBQUFodkMsVUFBQXlmLHNCQUFBLFNBQUFDLEdBQ0EsT0FBQWxmLEtBQUFuQixNQUFBd1csU0FBQTZKLEVBQUE3SixTQUdBbTVCLEVBQUFodkMsVUFBQTJmLG1CQUFBLFdBQ0EsSUFBQXRnQixFQUFBbUIsS0FBQW5CLE1BQ0F5dkMsRUFBQSxjQUFBenZDLElBQUE2aEIsVUFBQTdoQixFQUFBb0MsTUFBQS9ELFdBQUF3akIsVUFBQTB0QixFQUFBdnZDLElBQ0E2aEIsRUFBQTJ0QixFQUFBeHZDLEVBQUF5dkMsR0FDQTV0QixJQUFBNHRCLEdBQ0FILEVBQUF0dkMsRUFBQW9DLE1BQUFtdEMsRUFBQXZ2QyxHQUFBNmhCLElBT0E4dEIsRUFBQWh2QyxVQUFBb0QsT0FBQSxXQUNBLElBQUFELEVBQUEzQyxLQUVBbkIsRUFBZ0Jta0IsSUFBd0JoakIsS0FBQW5CLFVBRXhDbUIsS0FBQTJ1QyxpQkFDQSxJQUNBQyxHQUNBem9CLFVBRm9CekIsSUFBVTdsQixFQUFBNmdCLFVBQUE3Z0IsRUFBQXNuQixVQUFBdG5CLEVBQUE2Z0IsVUFBQSxJQUFBN2dCLEVBQUFrbkIsTUFJOUI1RSxLQUFBdGlCLEVBQUFzaUIsTUFBQSxRQUVBdGlCLEVBQUE2WixLQUNBazJCLEVBQUFsMkIsR0FBQTdaLEVBQUE2WixJQUVBN1osRUFBQTRnQyxZQUNBbVAsRUFBQTNrQixTQUFBLElBQ0Eya0IsRUFBQTVrQixVQUFBaHFCLEtBQUFncUIsV0FFQSxJQUFBdEssRUFBQTdnQixFQUFBNmdCLFVBQ0E0bUIsRUFBQXpuQyxFQUFBeW5DLFNBQ0FqeEIsRUFBQXhXLEVBQUF3VyxRQUNBc29CLEVBQUE5K0IsRUFBQTgrQixNQUNBNVgsRUFBQWxuQixFQUFBa25CLEtBQ0F1bUIsRUFBQXp0QyxFQUFBeXRDLG9CQUNBcFYsRUFBQXI0QixFQUFBcTRCLE1BU0EsT0FQSXVQLEVBQVlqb0MsUUFBQSxTQUFBWSxHQUNoQixjQUFBUCxFQUFBTyxZQUlBUCxFQUFBb2hCLFFBS00zRSxFQUFBdmQsRUFBS2lGLGNBQ0hrckMsRUFDQWx0QixPQUFXbmlCLEdBQ25CNmdCLFlBQ0FxRyxPQUNBa29CLElBQUEsS0FDQXRRLFFBQ0F6RyxRQUNBNlcsZ0JBQUFydUIsRUFBQSxVQUNBckssVUFDQWkzQix1QkFDU3NDLEdBQ0R0ekIsRUFBQXZkLEVBQUtRLFNBQUF5UCxJQUFBblAsRUFBQVIsU0FBQSxTQUFBSSxFQUFBSyxHQUNiLE9BQUE2RCxFQUFBa3NDLGVBQUFwd0MsRUFBQUssRUFBQXduQyxHQUFBLGVBUUFrSSxFQXJHdUIsQ0FzR3JCbHpCLEVBQUF2ZCxFQUFLZ0QsV0FDUHd0QyxFQUFZcHRDLFdBQ1o2ZSxTQUFZekUsRUFBQXhkLEVBQVNoQixLQUNyQmtqQixRQUFXMUUsRUFBQXhkLEVBQVNoQixLQUNwQitpQixXQUFjdkUsRUFBQXhkLEVBQVNoQixLQUN2QnNoQyxhQUFnQjlpQixFQUFBeGQsRUFBU2hCLEtBQ3pCOHFDLFVBQWF0c0IsRUFBQXhkLEVBQVNoQixLQUN0QmlpQyxtQkFBc0J6akIsRUFBQXhkLEVBQVMwZCxPQUMvQnNqQixjQUFpQnhqQixFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTMGQsT0FBU0YsRUFBQXhkLEVBQVM2akIsU0FDakV1YyxTQUFZNWlCLEVBQUF4ZCxFQUFTNm1CLFFBQVNySixFQUFBeGQsRUFBUzBkLFFBQ3ZDcEcsUUFBV2tHLEVBQUF4ZCxFQUFTK1gsS0FDcEJ6WCxTQUFZa2QsRUFBQXhkLEVBQVNnWSxJQUNyQnl4QixXQUFjanNCLEVBQUF4ZCxFQUFTNmpCLE9BQ3ZCMGtCLFNBQVkvcUIsRUFBQXhkLEVBQVMwZCxPQUNyQnhhLE1BQVNzYSxFQUFBeGQsRUFBU2xCLE9BQ2xCSyxTQUFjcWUsRUFBQXhkLEVBQVNoQixLQUN2QkUsU0FBY3NlLEVBQUF4ZCxFQUFTaEIsT0FJdkIwaUMsVUFBYWxrQixFQUFBeGQsRUFBUytYLEtBQ3RCMEcsU0FBWWpCLEVBQUF4ZCxFQUFTK1gsS0FDckJ5RCxNQUFTZ0MsRUFBQXhkLEVBQVM2akIsT0FDbEJWLG1CQUFzQjNGLEVBQUF4ZCxFQUFTK1gsS0FDL0I0SyxVQUFhbkYsRUFBQXhkLEVBQVMwZCxPQUN0QnlFLGFBQWdCM0UsRUFBQXhkLEVBQVM2bUIsUUFBU3JKLEVBQUF4ZCxFQUFTMGQsUUFDM0NxekIsb0JBQXVCdnpCLEVBQUF4ZCxFQUFTNm1CLFFBQVNySixFQUFBeGQsRUFBUzBkLFFBQ2xEOGlCLGdCQUFtQmhqQixFQUFBeGQsRUFBUzZtQixRQUFTckosRUFBQXhkLEVBQVMwZCxRQUM5Q2tpQixNQUFTcGlCLEVBQUF4ZCxFQUFTMmQsT0FDbEJxSyxLQUFReEssRUFBQXhkLEVBQVN1c0MsT0FBQSxvRUFDakJoQyxxQkFBd0Ivc0IsRUFBQXhkLEVBQVN1c0MsT0FBQSxrQkFDakNyQyxhQUFnQjFzQixFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTMmQsT0FBU0gsRUFBQXhkLEVBQVMwZCxTQUNoRWdzQixVQUFhbHNCLEVBQUF4ZCxFQUFTaEIsS0FDdEJxa0IsU0FBWTdGLEVBQUF4ZCxFQUFTeWQsV0FBWUQsRUFBQXhkLEVBQVNoQixLQUFPd2UsRUFBQXhkLEVBQVN1USxPQUMxRG02QixXQUFjbHRCLEVBQUF4ZCxFQUFTeWQsV0FBWUQsRUFBQXhkLEVBQVNoQixLQUFPd2UsRUFBQXhkLEVBQVN1USxRQUU1RGlnQyxFQUFZdjRCLGNBQ1owSixVQUFBLFVBQ0F5RyxVQUFBLEdBQ0FKLEtBQUEsV0FDQTRYLE1BQUEsRUFDQXNLLGFBQUEsR0FDQTV5QixTQUFBLEVBQ0FvcUIsV0FBQSxFQUNBbG1CLFNBQ0FrdUIsVUFBYW5nQixHQUdiLElBQUlvbkIsRUFBZ0IsV0FDcEIsSUFBQXJPLEVBQUFyZ0MsS0FFQUEsS0FBQWdxQixVQUFBLFNBQUEvckIsRUFBQUgsR0FDQSxJQUFBOFIsRUFBQTNSLEVBQUEyUixRQUNBKzZCLE9BQUEsRUFNQSxHQUxBdEssRUFBQTBPLHVCQUFBdndDLFFBQUEsU0FBQWhDLEdBQ0FBLEtBQUFxQyxNQUFBKzRCLFFBQUFwN0IsRUFBQXd0QixZQUNBMmdCLEVBQUFudUMsRUFBQXd0QixVQUFBL3JCLE1BR0Ewc0MsRUFDQSxTQUVBLElBQUFxRSxFQUFBLEtBSUEsT0FIQXAvQixJQUFvQnFjLEVBQUEsRUFBTzJlLElBQUFoN0IsSUFBbUJxYyxFQUFBLEVBQU9FLE9BQ3JENmlCLEVBQUEzTyxFQUFBNE8sS0FBQXIvQixJQUEyQ3FjLEVBQUEsRUFBTzJlLElBQUEsTUFFbERvRSxHQUNBL3dDLEVBQUE0VSxpQkFDQXM3QixFQUFBOU4sRUFBQXhoQyxNQUFBb0MsTUFBQW10QyxFQUFBL04sRUFBQXhoQyxPQUFBbXdDLEVBQUFud0MsTUFBQXluQyxVQUVBLG1CQUFBeG9DLEdBQ0FBLEVBQUFreEMsR0FHQSxRQVJBLEdBWUFodkMsS0FBQXFxQyxZQUFBLFNBQUFwc0MsR0FDQSxJQUFBbUIsRUFBQW5CLEVBQUFtQixJQUNBNnJDLEVBQUFodEMsRUFBQWd0QyxNQUVBa0QsRUFBQTlOLEVBQUF4aEMsTUFBQW9DLE1BQUFtdEMsRUFBQS9OLEVBQUF4aEMsT0FBQW9zQyxFQUFBN3JDLEVBQUEsT0FHQVksS0FBQThmLFdBQUEsU0FBQW92QixHQUNBN08sRUFBQXhoQyxNQUFBaWhCLFdBQUFvdkIsSUFHQWx2QyxLQUFBZ2dCLFNBQUEsU0FBQWt2QixHQUNBN08sRUFBQXhoQyxNQUFBbWhCLFNBQUFrdkIsSUFHQWx2QyxLQUFBaWdCLFFBQUEsU0FBQWhpQixHQUNBb2lDLEVBQUF4aEMsTUFBQW9oQixRQUFBaGlCLElBR0ErQixLQUFBcStCLGFBQUEsU0FBQXBnQyxHQUNBb2lDLEVBQUF4aEMsTUFBQXcvQixhQUFBcGdDLElBR0ErQixLQUFBNm5DLFVBQUEsU0FBQXpvQyxHQUVBaWhDLEVBQUF4aEMsTUFBQWdwQyxVQUFBem9DLElBR0FZLEtBQUErdUMscUJBQUEsV0FDQSxPQUFBMU8sRUFBQXNPLGVBR0EzdUMsS0FBQW12QyxzQkFBQSxXQUNBLE9BQUE5TyxFQUFBeGhDLE1BQUFtZ0Msb0JBR0FoL0IsS0FBQWl2QyxLQUFBLFNBQUFHLEdBQ0EsSUFBQS93QyxFQUFBZ2lDLEVBQUEwTyx1QkFDQXJ1QixFQUFBMmYsRUFBQXhoQyxNQUFBb0MsTUFBQS9ELFdBQUF3akIsVUFBQTB0QixFQUFBL04sRUFBQXhoQyxRQUNBdUwsRUFBQS9MLEVBQUFVLE9BQ0EsSUFBQXFMLEVBQ0EsWUFFQWdsQyxFQUFBLElBQ0Evd0MsSUFBQWlVLFNBQUErOEIsV0FHQSxJQUFBQyxHQUFBLEVBUUEsR0FQQWp4QyxFQUFBMHlCLE1BQUEsU0FBQXR5QixFQUFBOHdDLEdBQ0EsT0FBQTl3QyxLQUFBSSxNQUFBeW5DLFdBQUE1bEIsSUFDQTR1QixFQUFBQyxHQUNBLEtBSUFsUCxFQUFBeGhDLE1BQUFxaUIscUJBQUEsSUFBQW91QixJQTNTQSxTQUFBbnFDLEdBQ0EsT0FBQUEsRUFBQXBHLFFBR0FvRyxFQUFBNHJCLE1BQUEsU0FBQXR5QixHQUNBLFFBQUFBLEVBQUFJLE1BQUE0ZSxXQXNTQSt4QixDQUFBbnhDLEVBQUF5RyxNQUFBd3FDLEVBQUFsbEMsRUFBQSxLQUdBLElBQUFzdEIsR0FBQTRYLEVBQUEsR0FBQWxsQyxFQUNBdEwsRUFBQTQ0QixFQUVBLEdBQ0EsSUFBQTFiLEVBQUEzZCxFQUFBUyxHQUNBLEdBQUFrZCxNQUFBbmQsTUFBQTRlLFNBR0EsT0FBQXpCLEVBRkFsZCxLQUFBLEdBQUFzTCxRQUlLdEwsSUFBQTQ0QixHQUVMLGNBR0ExM0IsS0FBQXl2QyxxQkFBQSxTQUFBenpCLEVBQUFsZCxFQUFBMDdCLEdBQ0EsSUFBQW40QixFQUFBZytCLEVBQUF4aEMsTUFBQW9DLE1BQUEvRCxXQUNBMkIsRUFBQXdoQyxFQUFBeGhDLE1BQ0FPLEVBQWM4bUMsRUFBdUJscUIsRUFBQW5kLEVBQUF5bkMsU0FBQXhuQyxHQUNyQ3UrQixFQUFBcmhCLEVBQUFuZCxNQUNBNE4sRUFBQXJOLElBQUFpRCxFQUFBcWUsVUFDQWd2QixFQUF3QjF1QixLQUN4QitFLEtBQUFzWCxFQUFBdFgsTUFBQWxuQixFQUFBa25CLEtBQ0E0WCxNQUFBOStCLEVBQUE4K0IsTUFDQXNLLGFBQUFwcEMsRUFBQW9wQyxhQUNBNEcsZUFBQXhPLEVBQUF3TyxlQUNBdlcsY0FBQXo1QixFQUFBNmdCLFVBQ0FqYixNQUFBM0YsRUFDQTBvQyxXQUFBM29DLEVBQUEyb0MsV0FFQUMsVUFBQXBLLEVBQUE1ZixjQUFBbmhCLEVBQW1ETCxPQUFBMkksRUFBQSxFQUFBM0ksQ0FBcUIrZixFQUFBbFosSUF6UmpFLFNBQUFyRSxHQUNQLEdBQUFBLEVBQUEsQ0FDQSxJQUFBZ0csRUFBQXpFLEtBQUEydUMsY0FBQWpxQyxRQUFBakcsSUFDQSxJQUFBZ0csRUFFQXpFLEtBQUEydUMsY0FBQWxxQyxHQUFBaEcsRUFHQXVCLEtBQUEydUMsY0FBQWp3QyxLQUFBRCxLQWlSd0V3RixLQUFBbzhCLElBQ3hFaUcsU0FBQWxuQyxFQUNBdzRCLFFBQUF5RixFQUFBNWYsVUFBQWhSLEVBQ0ErUCxTQUFBM2QsRUFBQTJkLFNBQ0F5RCxRQUFBLFNBQUFoaUIsSUFDQW8vQixFQUFBcGQsU0FBK0JxSCxHQUFJcnBCLEdBQ25Db2lDLEVBQUFwZ0IsUUFBQWhpQixJQUVBb3NDLFlBQUFoSyxFQUFBZ0ssWUFDQXJMLG1CQUFBcUIsRUFBQThPLHdCQUNBcFEsY0FBQWxnQyxFQUFBa2dDLGNBQ0FvSixpQkFBQXRwQyxFQUFBc3BDLGlCQUNBQyxrQkFBQXZwQyxFQUFBdXBDLGtCQUNBQyxtQkFBQXhwQyxFQUFBd3BDLG1CQUNBaEssYUFBQWdDLEVBQUFoQyxhQUNBdmUsV0FBQXVnQixFQUFBdmdCLFdBQ0FFLFNBQUFxZ0IsRUFBQXJnQixTQUNBaUUsa0JBQUFwbEIsRUFBQW9sQixrQkFDQTdDLFNBQUFpYyxFQUFBamMsVUFBQWlmLEVBQUF4aEMsTUFBQXVpQixTQUNBcW5CLFdBQUFwTCxFQUFBb0wsWUFBQXBJLEVBQUF4aEMsTUFBQTRwQyxZQUNLak8sR0FJTCxNQUhBLFdBQUEzN0IsRUFBQWtuQixPQUNBMnBCLEVBQUFwSCxxQkFBQSxTQUVXaHRCLEVBQUF2ZCxFQUFLOHdCLGFBQUE3UyxFQUFBMHpCLElBR2hCMXZDLEtBQUE2dUMsZUFBQSxTQUFBcHdDLEVBQUFLLEVBQUErc0MsR0FFQSxJQUFBcHRDLEVBQ0EsWUFFQSxJQUFBNEQsRUFBQWcrQixFQUFBeGhDLE1BQUFvQyxNQUFBL0QsV0FDQXM5QixHQUNBMkQsU0FBQTk3QixFQUFBODdCLFNBQ0FqZSxhQUFBN2QsRUFBQTZkLGFBQ0Fvb0IscUJBQUFqSSxFQUFBeGhDLE1BQUF5cEMscUJBQ0F1RCxjQUVBLE9BQUF4TCxFQUFBb1AscUJBQUFoeEMsRUFBQUssRUFBQTA3QixLQU1ldU8sRUFGQzlzQyxPQUFBMnZDLEVBQUEsUUFBQTN2QyxHQUFVc3lDLEdDMVh0Qm9CLEVBQUksU0FBQXA3QixHQUdSLFNBQUF3cEIsRUFBQWwvQixHQUNJc2MsSUFBZW5iLEtBQUErOUIsR0FFbkIsSUFBQS83QixFQUFnQm9aLElBQTBCcGIsS0FBQXVVLEVBQUFyVSxLQUFBRixLQUFBbkIsSUFFdEMrd0MsRUFBZ0IxdkMsS0FBQThCLEdBRXBCQSxFQUFBdWxDLFlBQUEsRUFFQSxJQUFBcm5CLEVBQUFyaEIsRUFBQWl3QyxvQkFDQTNRLEVBQUF0L0IsRUFBQTAvQixnQkFhQSxNQVpBLGlCQUFBMS9CLElBQ0FxaEIsRUFBQXJoQixFQUFBcWhCLGtCQUVBLGFBQUFyaEIsSUFDQXMvQixFQUFBdC9CLEVBQUFzL0IsY0FHQW44QixFQUFBZixNQUFrQmhGLE9BQUEydkMsRUFBQSxPQUFBM3ZDLEVBQ2xCaWtCLGVBQ0FpZSxXQUNBemQsV0FBa0JtdkIsVUFBWXhCLEVBQVl4dkMsSUFBQTZoQixjQUUxQzFlLEVBd0RBLE9BakZFcVosSUFBUzBpQixFQUFBeHBCLEdBNEJYd3BCLEVBQUF2K0IsVUFBQXVmLGtCQUFBLFdBQ0EvZSxLQUFBOHZDLG1CQUdBL1IsRUFBQXYrQixVQUFBMmYsbUJBQUEsV0FDQW5mLEtBQUE4dkMsbUJBUUEvUixFQUFBditCLFVBQUFzd0MsZ0JBQUEsV0FDQSxpQkFBQTl2QyxLQUFBbkIsT0FDQW1CLEtBQUFpQixNQUFBaEUsVUFDQWlqQixhQUFBbGdCLEtBQUFuQixNQUFBcWhCLG1CQUdBLGFBQUFsZ0IsS0FBQW5CLE9BQ0FtQixLQUFBaUIsTUFBQWhFLFVBQ0FraEMsU0FBQW4rQixLQUFBbkIsTUFBQXMvQixnQkFLQUosRUFBQXYrQixVQUFBb0QsT0FBQSxXQUNBLElBQUFELEVBQUEzQyxLQUVBbkIsRUFBZ0Jta0IsSUFBd0JoakIsS0FBQW5CLFVBV3hDLE9BVEFBLEVBQUFzbkIsV0FBQSxJQUFBdG5CLEVBQUE2Z0IsVUFBQSxRQUNBN2dCLEVBQVltaUIsT0FBV25pQixHQUN2Qm9oQixRQUFBamdCLEtBQUFpZ0IsUUFDQW9lLGFBQUFyK0IsS0FBQXErQixhQUNBdmUsV0FBQTlmLEtBQUE4ZixXQUNBRSxTQUFBaGdCLEtBQUFnZ0IsU0FDQWdmLG1CQUFBaC9CLEtBQUFtdkMsd0JBQ0EzSCxXQUFBeG5DLE9BRVdzYixFQUFBdmQsRUFBS2lGLGNBQ1Y0b0MsRUFBQSxVQUNDM3FDLE1BQUFqQixLQUFBaUIsT0FDRHFhLEVBQUF2ZCxFQUFLaUYsY0FDSCtsQyxFQUNBL25CLE9BQVduaUIsR0FBVWlFLElBQUEsU0FBQXJFLEdBQzdCLE9BQUFrRSxFQUFBb3RDLFVBQUF0eEMsS0FFQXVCLEtBQUFuQixNQUFBUixZQUtBMC9CLEVBbEZRLENBbUZOemlCLEVBQUF2ZCxFQUFLZ0QsV0FFUDR1QyxFQUFJeHVDLFdBQ0oydEMsb0JBQXVCdnpCLEVBQUF4ZCxFQUFTNm1CLFFBQVNySixFQUFBeGQsRUFBUzBkLFFBQ2xEeUYsbUJBQXNCM0YsRUFBQXhkLEVBQVMrWCxLQUMvQm9LLGFBQWdCM0UsRUFBQXhkLEVBQVM2bUIsUUFBU3JKLEVBQUF4ZCxFQUFTMGQsUUFDM0M4aUIsZ0JBQW1CaGpCLEVBQUF4ZCxFQUFTNm1CLFFBQVNySixFQUFBeGQsRUFBUzBkLFFBQzlDMGlCLFNBQVk1aUIsRUFBQXhkLEVBQVM2bUIsUUFBU3JKLEVBQUF4ZCxFQUFTMGQsUUFDdkNzSyxLQUFReEssRUFBQXhkLEVBQVN1c0MsT0FBQSxvRUFDakI3bEIsa0JBQXFCbEosRUFBQXhkLEVBQVNoQixLQUM5QmtqQixRQUFXMUUsRUFBQXhkLEVBQVNoQixLQUNwQmlqQixTQUFZekUsRUFBQXhkLEVBQVNoQixLQUNyQitpQixXQUFjdkUsRUFBQXhkLEVBQVNoQixLQUN2QjhxQyxVQUFhdHNCLEVBQUF4ZCxFQUFTaEIsS0FDdEJpaUMsbUJBQXNCempCLEVBQUF4ZCxFQUFTMGQsT0FDL0JzakIsY0FBaUJ4akIsRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBUzBkLE9BQVNGLEVBQUF4ZCxFQUFTNmpCLFNBQ2pFdW1CLGlCQUFvQjVzQixFQUFBeGQsRUFBUzJkLE9BQzdCMHNCLGtCQUFxQjdzQixFQUFBeGQsRUFBUzJkLE9BQzlCMnNCLG1CQUFzQjlzQixFQUFBeGQsRUFBUytYLEtBQy9Cd3lCLHFCQUF3Qi9zQixFQUFBeGQsRUFBUzBkLE9BQ2pDa2lCLE1BQVNwaUIsRUFBQXhkLEVBQVMyZCxPQUNsQnMwQixXQUFjejBCLEVBQUF4ZCxFQUFTK1gsS0FDdkIwRyxTQUFZakIsRUFBQXhkLEVBQVMrWCxLQUNyQnpYLFNBQVlrZCxFQUFBeGQsRUFBU2dZLElBQ3JCb1EsVUFBYTVLLEVBQUF4ZCxFQUFTMGQsT0FDdEJsQyxNQUFTZ0MsRUFBQXhkLEVBQVM2akIsT0FDbEJsQixVQUFhbkYsRUFBQXhkLEVBQVMwZCxPQUN0QmlFLFVBQWFuRSxFQUFBeGQsRUFBUzBkLE9BQ3RCd0ksa0JBQXFCMUksRUFBQXhkLEVBQVM2akIsT0FDOUJSLFNBQVk3RixFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTaEIsS0FBT3dlLEVBQUF4ZCxFQUFTdVEsT0FDMURtNkIsV0FBY2x0QixFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTaEIsS0FBT3dlLEVBQUF4ZCxFQUFTdVEsT0FDNURnK0Isb0JBQXVCL3dCLEVBQUF4ZCxFQUFTdVEsTUFFaENxaEMsRUFBSTM1QixjQUNKZzZCLFlBQUEsRUFDQS92QixRQUFXcUgsRUFDWHRILFNBQVlzSCxFQUNaK1csYUFBZ0IvVyxFQUNoQnhILFdBQWN3SCxFQUNkd25CLHVCQUNBdlEsbUJBQ0E0SixpQkFBQSxHQUNBQyxrQkFBQSxHQUNBRSxxQkFBQSxRQUNBNW9CLFVBQUEsVUFDQXlHLFVBQUEsR0FDQUosS0FBQSxXQUNBeE0sU0FDQTBLLHFCQUNBcW9CLG9CQUF1Qmh4QixFQUFBdmQsRUFBS2lGLGNBQzVCLE9BQ0EsS0FDQSxRQUlBLElBQUk0c0MsRUFBZ0IsV0FDcEIsSUFBQXZQLEVBQUFyZ0MsS0FFQUEsS0FBQWdnQixTQUFBLFNBQUFrdkIsR0FDQSxJQUFBcndDLEVBQUF3aEMsRUFBQXhoQyxNQUNBLEdBQUFBLEVBQUFteEMsV0FBQSxDQUVBLElBQUE5dkIsRUFBQW1nQixFQUFBcC9CLE1BQUEvRCxXQUFBZ2pCLGFBQ0FvUSxFQUFBNGUsRUFBQTl2QyxJQUVBOGdCLEVBREFyaEIsRUFBQTJkLFNBQ0EwRCxFQUFBNU4sUUFBQWdlLEtBRUFBLEdBRUEsaUJBQUF6eEIsR0FDQXdoQyxFQUFBcC9CLE1BQUFoRSxVQUNBaWpCLGlCQUdBcmhCLEVBQUFtaEIsU0FBcUJnQixPQUFXa3VCLEdBQ2hDaHZCLG9CQUtBbGdCLEtBQUFpZ0IsUUFBQSxTQUFBaGlCLEdBQ0FvaUMsRUFBQXhoQyxNQUFBb2hCLFFBQUFoaUIsSUFHQStCLEtBQUFncUIsVUFBQSxTQUFBL3JCLEVBQUFILEdBQ0F1aUMsRUFBQTBQLFVBQUFFLHFCQUFBam1CLFVBQUEvckIsRUFBQUgsSUFHQWtDLEtBQUFxK0IsYUFBQSxTQUFBN3VCLEdBQ0EsSUFBQTNRLEVBQUF3aEMsRUFBQXhoQyxNQUNBcy9CLEVBQUFrQyxFQUFBcC9CLE1BQUEvRCxXQUFBaWhDLFNBQUE3ckIsU0FDQTQ5QixHQUFBLEVBQ0FDLEVBQUEsU0FBQWx5QyxHQUNBLElBQUFteUMsR0FBQSxFQUNBLEdBQUFueUMsRUFBQTZwQixNQUNBc29CLEdBQUEsSUFBQWpTLEVBQUF6NUIsUUFBQXpHLEVBQUFtQixPQUVBKytCLEVBQUF6L0IsS0FBQVQsRUFBQW1CLFNBRU8sQ0FDUCxJQUFBcUYsRUFBQTA1QixFQUFBejVCLFFBQUF6RyxFQUFBbUIsTUFDQWd4QyxHQUFBLElBQUEzckMsSUFFQTA1QixFQUFBeDVCLE9BQUFGLEVBQUEsR0FHQXlyQyxLQUFBRSxHQUVBeDdCLE1BQUFpSSxRQUFBck4sR0FFQUEsRUFBQWhSLFFBQUEyeEMsR0FFQUEsRUFBQTNnQyxHQUVBMGdDLElBQ0EsYUFBQTdQLEVBQUF4aEMsT0FDQXdoQyxFQUFBcC9CLE1BQUFoRSxVQUErQmtoQyxhQUUvQnQvQixFQUFBdy9CLGFBQUFGLEtBSUFuK0IsS0FBQThmLFdBQUEsU0FBQW92QixHQUNBLElBQUFyd0MsRUFBQXdoQyxFQUFBeGhDLE1BQ0EsR0FBQUEsRUFBQW14QyxXQUFBLENBQ0EsSUFBQTl2QixFQUFBbWdCLEVBQUFwL0IsTUFBQS9ELFdBQUFnakIsYUFBQTVOLFNBQ0FnZSxFQUFBNGUsRUFBQTl2QyxJQUNBcUYsRUFBQXliLEVBQUF4YixRQUFBNHJCLElBQ0EsSUFBQTdyQixHQUNBeWIsRUFBQXZiLE9BQUFGLEVBQUEsR0FFQSxpQkFBQTVGLEdBQ0F3aEMsRUFBQXAvQixNQUFBaEUsVUFDQWlqQixpQkFHQXJoQixFQUFBaWhCLFdBQXVCa0IsT0FBV2t1QixHQUNsQ2h2QixvQkFLQWxnQixLQUFBbXZDLHNCQUFBLFdBQ0EsSUFBQXR3QyxFQUFBd2hDLEVBQUF4aEMsTUFDQXltQixFQUFBem1CLEVBQUFtZ0MsbUJBQ0FxUixFQUFBeHhDLEVBQUFrZ0MsY0FJQSxPQUhBelosR0FBQSxpQkFBQStxQixJQUNBL3FCLEVBQUF6bUIsRUFBQTZnQixVQUFBLFNBQUEyd0IsR0FFQS9xQixJQUllZ3JCLEVBQUEsb0JDek9KL1MsR0FBUSxTQUFBaHBCLEdBR25CLFNBQUFpcEIsRUFBQTMrQixHQUNJc2MsSUFBZW5iLEtBQUF3OUIsR0FFbkIsSUFBQXg3QixFQUFnQm9aLElBQTBCcGIsS0FBQXVVLEVBQUFyVSxLQUFBRixLQUFBbkIsSUFxRTFDLE9BbkVBbUQsRUFBQWdvQixVQUFBLFNBQUEvckIsR0FFQSxHQURBQSxFQUFBMlIsVUFDc0JxYyxFQUFBLEVBQU9DLE1BRTdCLE9BREFscUIsRUFBQWllLFFBQUFoaUIsSUFDQSxHQUlBK0QsRUFBQTBrQixhQUFBLFNBQUF6b0IsR0FDQSxJQUFBbVgsRUFBQXBULEVBQUFuRCxNQUNBeW5DLEVBQUFseEIsRUFBQWt4QixTQUNBK0QsRUFBQWoxQixFQUFBaTFCLFlBQ0EzakIsRUFBQXRSLEVBQUFzUixhQUVBMmpCLEdBQ0FqckMsSUFBQWtuQyxFQUNBMkUsT0FBQSxJQUVBdmtCLEdBQ0F0bkIsSUFBQWtuQyxFQUNBeFosU0FBQTd1QixLQUlBK0QsRUFBQXlrQixhQUFBLFNBQUF4b0IsR0FDQSxJQUFBc3lDLEVBQUF2dUMsRUFBQW5ELE1BQ0F5bkMsRUFBQWlLLEVBQUFqSyxTQUNBK0QsRUFBQWtHLEVBQUFsRyxZQUNBNWpCLEVBQUE4cEIsRUFBQTlwQixhQUVBNGpCLEdBQ0FqckMsSUFBQWtuQyxFQUNBMkUsT0FBQSxJQUVBeGtCLEdBQ0FybkIsSUFBQWtuQyxFQUNBeFosU0FBQTd1QixLQUlBK0QsRUFBQWllLFFBQUEsU0FBQWhpQixHQUNBLElBQUF1eUMsRUFBQXh1QyxFQUFBbkQsTUFDQXluQyxFQUFBa0ssRUFBQWxLLFNBQ0E5cEIsRUFBQWcwQixFQUFBaDBCLFNBQ0F5RCxFQUFBdXdCLEVBQUF2d0IsUUFDQUQsRUFBQXd3QixFQUFBeHdCLFNBQ0FGLEVBQUEwd0IsRUFBQTF3QixXQUNBMndCLEVBQUFELEVBQUFDLFdBRUFqakIsR0FDQXB1QixJQUFBa25DLEVBQ0E4RSxTQUFBOUUsR0FDQWxtQixLQUFBcGUsRUFDQThxQixTQUFBN3VCLEdBRUFnaUIsRUFBQXVOLEdBQ0FoUixFQUNBaTBCLEVBQ0Ezd0IsRUFBQTBOLEdBRUF4TixFQUFBd04sR0FFT2lqQixHQUNQendCLEVBQUF3TixJQUlBeHJCLEVBb0dBLE9BOUtFcVosSUFBU21pQixFQUFBanBCLEdBNkVYaXBCLEVBQUFoK0IsVUFBQXVmLGtCQUFBLFdBRUEvZSxLQUFBMHdDLFdBR0FsVCxFQUFBaCtCLFVBQUEyZixtQkFBQSxXQUNBbmYsS0FBQW5CLE1BQUErNEIsUUFDTStZLEtBQWU5ckIsRUFBQTltQixFQUFRK21CLFlBQUE5a0IsTUFBb0I2a0IsRUFBQTltQixFQUFRK21CLFlBQUE5a0IsS0FBQW5CLE1BQUEyb0MsYUFDekRscEIsb0JBQUEsSUFHQXRlLEtBQUEwd0MsV0FHQWxULEVBQUFoK0IsVUFBQTRmLHFCQUFBLFdBQ0EsSUFBQXZnQixFQUFBbUIsS0FBQW5CLE1BQ0FBLEVBQUFncEMsV0FDQWhwQyxFQUFBZ3BDLFVBQUFocEMsRUFBQXluQyxXQUlBOUksRUFBQWgrQixVQUFBd3BDLGFBQUEsV0FDQSxPQUFBaHBDLEtBQUFuQixNQUFBeTVCLGNBQUEsU0FHQWtGLEVBQUFoK0IsVUFBQTJwQyxtQkFBQSxXQUNBLE9BQUFucEMsS0FBQWdwQyxlQUFBLFdBR0F4TCxFQUFBaCtCLFVBQUE2cEMscUJBQUEsV0FDQSxPQUFBcnBDLEtBQUFncEMsZUFBQSxhQUdBeEwsRUFBQWgrQixVQUFBNHBDLHFCQUFBLFdBQ0EsT0FBQXBwQyxLQUFBZ3BDLGVBQUEsYUFHQXhMLEVBQUFoK0IsVUFBQWt4QyxRQUFBLFdBQ0Exd0MsS0FBQW5CLE1BQUE0b0MsV0FDQXpuQyxLQUFBbkIsTUFBQTRvQyxVQUFBem5DLE9BSUF3OUIsRUFBQWgrQixVQUFBb0QsT0FBQSxXQUNBLElBQUE4ekIsRUFFQTczQixFQUFnQm1pQixPQUFXaGhCLEtBQUFuQixPQUMzQnNuQixFQUFvQnpCLElBQVUxa0IsS0FBQWdwQyxlQUFBbnFDLEVBQUFzbkIsWUFBQXVRLE1BQXdEMTJCLEtBQUFtcEMsdUJBQUF0cUMsRUFBQTRlLFVBQUE1ZSxFQUFBKzRCLE9BQUFsQixFQUFBMTJCLEtBQUFxcEMsd0JBQUF4cUMsRUFBQTR4QyxXQUFBL1osRUFBQTEyQixLQUFBb3BDLHdCQUFBdnFDLEVBQUE0ZSxTQUFBaVosSUFDdEZrYSxFQUFnQjV2QixPQUFXbmlCLEVBQUFpeUIsV0FDM0JoVixNQUFBamQsRUFBQWlkLE1BQ0FxSyxZQUVBaEYsS0FBQXRpQixFQUFBc2lCLE1BQUEsV0FDQTB2QixnQkFBQWh5QyxFQUFBNGUsV0FHQSxXQUFBNWUsRUFBQXNpQixLQUVBeXZCLEVBQWM1dkIsT0FBVzR2QixHQUN6Qnp2QixLQUFBLFNBQ0EydkIsZ0JBQUFqeUMsRUFBQTR4QyxhQUVLLE9BQUE1eEMsRUFBQXNpQixNQUFBLFNBQUF0aUIsRUFBQXNpQixPQU1MeXZCLEVBQUF6dkIsS0FBQSxRQUdBLElBQUE0dkIsR0FDQTl3QixRQUFBcGhCLEVBQUE0ZSxTQUFBLEtBQUF6ZCxLQUFBaWdCLFFBQ0F5RyxhQUFBN25CLEVBQUE0ZSxTQUFBLEtBQUF6ZCxLQUFBMG1CLGFBQ0FELGFBQUE1bkIsRUFBQTRlLFNBQUEsS0FBQXpkLEtBQUF5bUIsY0FFQWxOLEVBQWdCeUgsT0FBV25pQixFQUFBMGEsT0FDM0IsV0FBQTFhLEVBQUFrbkIsT0FDQXhNLEVBQUFzd0IsWUFBQWhyQyxFQUFBb3BDLGFBQUFwcEMsRUFBQTgrQixPQUVJOEksRUFBWWpvQyxRQUFBLFNBQUFZLEdBQ2hCLGNBQUFQLEVBQUFPLEtBRUEsSUFBQTYzQixFQUFBajNCLEtBQUFuQixNQUFBdWlCLFNBSUEsTUFIQSxtQkFBQXBoQixLQUFBbkIsTUFBQXVpQixXQUNBNlYsRUFBYTNiLEVBQUF2ZCxFQUFLaUYsY0FBQWhELEtBQUFuQixNQUFBdWlCLFNBQUFwaEIsS0FBQW5CLFFBRVB5YyxFQUFBdmQsRUFBS2lGLGNBQ2hCLEtBQ01nZSxPQUFXbmlCLEVBQUEreEMsRUFBQUcsR0FDakJ4M0IsVUFFQTFhLEVBQUFSLFNBQ0E0NEIsSUFJQXVHLEVBL0ttQixDQWdMakJsaUIsRUFBQXZkLEVBQUtnRCxXQUVQdzhCLEdBQVFwOEIsV0FDUjJ2QixVQUFhdlYsRUFBQXhkLEVBQVM2akIsT0FDdEIwVyxjQUFpQi9jLEVBQUF4ZCxFQUFTMGQsT0FDMUI2cUIsU0FBWS9xQixFQUFBeGQsRUFBUzBkLE9BQ3JCbWMsT0FBVXJjLEVBQUF4ZCxFQUFTK1gsS0FDbkJ6WCxTQUFZa2QsRUFBQXhkLEVBQVNnWSxJQUNyQm1LLGFBQWdCM0UsRUFBQXhkLEVBQVNxc0MsTUFDekIzc0IsU0FBWWxDLEVBQUF4ZCxFQUFTK1gsS0FDckJnRyxNQUFTUCxFQUFBeGQsRUFBUzBkLE9BQ2xCNHVCLFlBQWU5dUIsRUFBQXhkLEVBQVNoQixLQUN4QmlqQixTQUFZekUsRUFBQXhkLEVBQVNoQixLQUNyQmtqQixRQUFXMUUsRUFBQXhkLEVBQVNoQixLQUNwQitpQixXQUFjdkUsRUFBQXhkLEVBQVNoQixLQUN2QnlxQyxXQUFjanNCLEVBQUF4ZCxFQUFTNmpCLE9BQ3ZCaW1CLFVBQWF0c0IsRUFBQXhkLEVBQVNoQixLQUN0QjBwQixhQUFnQmxMLEVBQUF4ZCxFQUFTaEIsS0FDekIycEIsYUFBZ0JuTCxFQUFBeGQsRUFBU2hCLEtBQ3pCeWYsU0FBWWpCLEVBQUF4ZCxFQUFTK1gsS0FDckIyNkIsV0FBY2wxQixFQUFBeGQsRUFBUytYLEtBQ3ZCMnhCLFVBQWFsc0IsRUFBQXhkLEVBQVNoQixLQUN0QnFrQixTQUFZN0YsRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBU2hCLEtBQU93ZSxFQUFBeGQsRUFBU3VRLFFBRTFEaXZCLEdBQVF2bkIsY0FDUmdLLFNBQVlzSCxFQUNaYixhQUFnQmEsRUFDaEJaLGFBQWdCWSxFQUNoQm1nQixVQUFhbmdCLEdBRWJpVyxHQUFRSyxZQUFBLEVBRVIsSUFXZW9ULEdBWEMvMEMsT0FBQTJ2QyxFQUFBLFFBQUEzdkMsQ0FBTyxTQUFBdVksRUFBQXFZLEdBQ3ZCLElBQUFuTSxFQUFBbE0sRUFBQWtNLFVBQ0FSLEVBQUExTCxFQUFBMEwsYUFDQW9tQixFQUFBelosRUFBQXlaLFNBRUEsT0FDQTFPLE9BQUFsWCxFQUZBbU0sRUFBQWdmLGNBRUF2RixFQUNBbUssWUFBQSxJQUFBdndCLEVBQUF4YixRQUFBNGhDLEtBUGdCcnFDLENBU2JzaEMsSUMvTkMwVCxHQUFhLFNBQUExOEIsR0FHakIsU0FBQTI4QixJQUNBLElBQUF6OEIsRUFBQXpTLEVBQUEwUyxFQUVJeUcsSUFBZW5iLEtBQUFreEMsR0FFbkIsUUFBQXY4QixFQUFBblUsVUFBQXpCLE9BQUE4RixFQUFBK1AsTUFBQUQsR0FBQUUsRUFBQSxFQUFtRUEsRUFBQUYsRUFBYUUsSUFDaEZoUSxFQUFBZ1EsR0FBQXJVLFVBQUFxVSxHQUdBLE9BQUFKLEVBQUF6UyxFQUFvQ29aLElBQTBCcGIsS0FBQXVVLEVBQUFyVSxLQUFBSyxNQUFBZ1UsR0FBQXZVLE1BQUFzUyxPQUFBek4sS0FBQTdDLEVBQUFtdkMsb0JBQUEsU0FBQS93QixHQUM5RCxJQUFBaEwsRUFBQXBULEVBQUFuRCxNQUlBLE9BQUFnd0MsRUFIQXo1QixFQUFBeTVCLGdCQUdBenVCLEVBRkFoTCxFQUFBM1EsTUFFQXpDLEVBQUFuRCxNQUFBZ3RDLGFBTEFuM0IsRUFNS0QsRUFBVTJHLElBQTBCcFosRUFBQTBTLEdBeUN6QyxPQTFERTJHLElBQVM2MUIsRUFBQTM4QixHQW9CWDI4QixFQUFBMXhDLFVBQUFvRCxPQUFBLFdBQ0EsSUFBQS9ELEVBQWdCbWtCLElBQXdCaGpCLEtBQUFuQixVQUV4Q3V5QyxFQUFBdnlDLEVBQUFzbkIsVUFDQUEsT0FBQTdwQixJQUFBODBDLEVBQUEsR0FBQUEsRUFDQTlZLEVBQUF6NUIsRUFBQXk1QixjQUVBK1ksRUFBQS9ZLEVBQUEsb0JBQ0FnWixFQUFBaFosRUFBQSxtQkFDQXhjLEVBQUFqZCxFQUFBaWQsTUFDQXpkLEVBQUFRLEVBQUFSLFNBU0EsT0FQSW9vQyxFQUFZam9DLFFBQUEsU0FBQVksR0FDaEIsY0FBQVAsRUFBQU8sWUFJQVAsRUFBQW9oQixRQUVXM0UsRUFBQXZkLEVBQUtpRixjQUNoQixLQUNNZ2UsT0FBV25pQixHQUFVc25CLFlBQUEsSUFBQW1TLEVBQUEsZ0JBQ3JCaGQsRUFBQXZkLEVBQUtpRixjQUNYLE9BRUFtakIsVUFBQWtyQixFQUNBdjFCLE1BQUEsaUJBQUFBLFNBQUF4ZixHQUVBd2YsR0FFTVIsRUFBQXZkLEVBQUtpRixjQUNYLE1BQ1NtakIsVUFBQW1yQixHQUNEaDJCLEVBQUF2ZCxFQUFLUSxTQUFBeVAsSUFBQTNQLEVBQUEyQixLQUFBbXhDLHdCQUtiRCxFQTNEaUIsQ0E0RGY1MUIsRUFBQXZkLEVBQUtnRCxXQUVQa3dDLEdBQWE5dkMsV0FDYjB0QyxlQUFrQnR6QixFQUFBeGQsRUFBU2hCLEtBQzNCMEgsTUFBUzhXLEVBQUF4ZCxFQUFTMmQsT0FDbEJ5SyxVQUFhNUssRUFBQXhkLEVBQVMwZCxPQUN0Qm93QixXQUFjdHdCLEVBQUF4ZCxFQUFTMGQsT0FDdkI2YyxjQUFpQi9jLEVBQUF4ZCxFQUFTMGQsUUFFMUJ3MUIsR0FBYWo3QixjQUNieUgsVUFBQSxHQUlBd3pCLEdBQWE1d0IsaUJBQUEsRUFFRSxJQUFBa3hCLEdBQUEsR0MvRVhDLEdBQU8sU0FBQWo5QixHQUdYLFNBQUErcUIsSUFHQSxPQUZJbmtCLElBQWVuYixLQUFBcy9CLEdBRVJsa0IsSUFBMEJwYixLQUFBdVUsRUFBQWhVLE1BQUFQLEtBQUFRLFlBZXJDLE9BcEJFNmEsSUFBU2lrQixFQUFBL3FCLEdBUVgrcUIsRUFBQTkvQixVQUFBb0QsT0FBQSxXQUNBLElBQUFtZ0IsRUFBQS9pQixLQUFBbkIsTUFDQXNuQixFQUFBcEQsRUFBQW9ELFVBQ0FtUyxFQUFBdlYsRUFBQXVWLGNBQ0EvZSxFQUFBd0osRUFBQXhKLE1BRUEsT0FBVytCLEVBQUF2ZCxFQUFLaUYsY0FBQSxNQUNoQm1qQixZQUFBLElBQUFtUyxFQUFBLGdCQUNBL2UsV0FJQStsQixFQXJCVyxDQXNCVGhrQixFQUFBdmQsRUFBS2dELFdBRVB5d0MsR0FBT3J3QyxXQUNQZ2xCLFVBQWE1SyxFQUFBeGQsRUFBUzBkLE9BQ3RCNmMsY0FBaUIvYyxFQUFBeGQsRUFBUzBkLE9BQzFCbEMsTUFBU2dDLEVBQUF4ZCxFQUFTNmpCLFFBRWxCNHZCLEdBQU94N0IsY0FFUHlILFVBQUEsRUFDQTBJLFVBQUEsR0FDQTVNLFVBRWUsSUFBQWs0QixHQUFBLEdDekNmNzBDLEVBQUFPLEVBQUFDLEVBQUEsc0JBQUEwdUMsSUFBQWx2QyxFQUFBTyxFQUFBQyxFQUFBLHNCQUFBNHpDLEtBQUFwMEMsRUFBQU8sRUFBQUMsRUFBQSxzQkFBQW0wQyxLQUFBMzBDLEVBQUFPLEVBQUFDLEVBQUEsc0JBQUFxMEMsS0FRZXIwQyxFQUFBLHFDQ05mbkIsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUF3RSxPQUFBeEUsRUFBQXUxQyxRQUFBdjFDLEVBQUF3RCxjQUFBckQsRUFFQSxJQUVBcTFDLEVBQUFoMUMsRUFGaUJDLEVBQVEsTUFNekJnMUMsRUFBQWoxQyxFQUZnQkMsRUFBUSxNQU14QmkxQyxFQUFBbDFDLEVBRmVDLEVBQVEsTUFJdkIsU0FBQUQsRUFBQUgsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBRTdFTCxFQUFBd0QsU0FBQWd5QyxFQUFBajFDLFFBQ0FQLEVBQUF1MUMsUUFBQUUsRUFBQWwxQyxRQUNBUCxFQUFBd0UsT0FBQWt4QyxFQUFBbjFDLHlDQ2pCQSxJQUFBdXZCLEdBSUE2bEIsVUFBQSxFQUlBMWxCLFVBQUEsRUFJQTJsQixJQUFBLEVBSUFDLFdBQUEsR0FJQTlsQixNQUFBLEdBSUErbEIsTUFBQSxHQUlBQyxLQUFBLEdBSUFDLElBQUEsR0FJQUMsTUFBQSxHQUlBQyxVQUFBLEdBSUEvbEIsSUFBQSxHQUlBZ21CLE1BQUEsR0FJQUMsUUFBQSxHQUlBQyxVQUFBLEdBSUFDLElBQUEsR0FJQUMsS0FBQSxHQUlBaEksS0FBQSxHQUlBRSxHQUFBLEdBSUFKLE1BQUEsR0FJQXJlLEtBQUEsR0FJQXdtQixhQUFBLEdBSUFDLE9BQUEsR0FJQUMsT0FBQSxHQUlBQyxLQUFBLEdBSUFDLElBQUEsR0FJQUMsSUFBQSxHQUlBQyxNQUFBLEdBSUFDLEtBQUEsR0FJQUMsS0FBQSxHQUlBQyxJQUFBLEdBSUFDLE1BQUEsR0FJQUMsTUFBQSxHQUlBQyxLQUFBLEdBSUFDLGNBQUEsR0FJQWo4QixFQUFBLEdBSUErQixFQUFBLEdBSUFsQyxFQUFBLEdBSUFrQixFQUFBLEdBSUFILEVBQUEsR0FJQUMsRUFBQSxHQUlBSSxFQUFBLEdBSUFJLEVBQUEsR0FJQVEsRUFBQSxHQUlBakMsRUFBQSxHQUlBa0IsRUFBQSxHQUlBbzdCLEVBQUEsR0FJQUMsRUFBQSxHQUlBajdCLEVBQUEsR0FJQWs3QixFQUFBLEdBSUFDLEVBQUEsR0FJQUMsRUFBQSxHQUlBQyxFQUFBLEdBSUFDLEVBQUEsR0FJQUMsRUFBQSxHQUlBQyxFQUFBLEdBSUFDLEVBQUEsR0FJQUMsRUFBQSxHQUlBQyxFQUFBLEdBSUFDLEVBQUEsR0FJQUMsRUFBQSxHQUlBQyxLQUFBLEdBSUFDLGNBQUEsR0FJQUMsYUFBQSxHQUlBQyxTQUFBLEdBSUFDLFFBQUEsR0FJQUMsUUFBQSxHQUlBQyxVQUFBLEdBSUFDLFNBQUEsSUFJQUMsU0FBQSxJQUlBQyxRQUFBLElBSUFDLFVBQUEsSUFJQUMsVUFBQSxJQUlBQyxTQUFBLElBSUFDLGFBQUEsSUFJQUMsU0FBQSxJQUlBQyxVQUFBLElBSUFDLFdBQUEsSUFJQUMsYUFBQSxJQUlBQyxHQUFBLElBSUFDLEdBQUEsSUFJQUMsR0FBQSxJQUlBQyxHQUFBLElBSUFDLEdBQUEsSUFJQUMsR0FBQSxJQUlBQyxHQUFBLElBSUFDLEdBQUEsSUFJQUMsR0FBQSxJQUlBQyxJQUFBLElBSUFDLElBQUEsSUFJQUMsSUFBQSxJQUlBQyxRQUFBLElBSUFDLFVBQUEsSUFJQUMsS0FBQSxJQUlBQyxPQUFBLElBSUFDLE1BQUEsSUFJQUMsT0FBQSxJQUlBQyxNQUFBLElBSUFDLFdBQUEsSUFJQUMsYUFBQSxJQUlBQyxvQkFBQSxJQUlBQyxVQUFBLElBSUFDLHFCQUFBLElBSUFDLFFBQUEsSUFJQUMsWUFBQSxJQUlBQyxRQUFBLElBTUFDLHdCQUFBLFNBQUFuNUMsR0FDQSxJQUFBMlIsRUFBQTNSLEVBQUEyUixRQUNBLEdBQUEzUixFQUFBbzVDLFNBQUFwNUMsRUFBQTZSLFNBQUE3UixFQUFBNFIsU0FFQUQsR0FBQXFjLEVBQUF3cEIsSUFBQTdsQyxHQUFBcWMsRUFBQW1xQixJQUNBLFNBS0EsT0FBQXhtQyxHQUNBLEtBQUFxYyxFQUFBa21CLElBQ0EsS0FBQWxtQixFQUFBb21CLFVBQ0EsS0FBQXBtQixFQUFBd29CLGFBQ0EsS0FBQXhvQixFQUFBaW1CLEtBQ0EsS0FBQWptQixFQUFBRSxLQUNBLEtBQUFGLEVBQUF3bUIsSUFDQSxLQUFBeG1CLEVBQUFLLElBQ0EsS0FBQUwsRUFBQXltQixLQUNBLEtBQUF6bUIsRUFBQTJtQixPQUNBLEtBQUEzbUIsRUFBQXllLEtBQ0EsS0FBQXplLEVBQUFpckIsWUFDQSxLQUFBanJCLEVBQUFzb0IsS0FDQSxLQUFBdG9CLEVBQUFvcUIsUUFDQSxLQUFBcHFCLEVBQUErbEIsV0FDQSxLQUFBL2xCLEVBQUF1bUIsVUFDQSxLQUFBdm1CLEVBQUFzbUIsUUFDQSxLQUFBdG1CLEVBQUFtbUIsTUFDQSxLQUFBbm1CLEVBQUEwbUIsYUFDQSxLQUFBMW1CLEVBQUF1ZSxNQUNBLEtBQUF2ZSxFQUFBZ21CLE1BQ0EsS0FBQWhtQixFQUFBMmUsR0FDQSxLQUFBM2UsRUFBQWdyQixRQUNBLEtBQUFockIsRUFBQXVvQixjQUNBLFNBQ0EsUUFDQSxXQU9BOEMsZUFBQSxTQUFBMW5DLEdBQ0EsR0FBQUEsR0FBQXFjLEVBQUE2bUIsTUFBQWxqQyxHQUFBcWMsRUFBQXNuQixLQUNBLFNBR0EsR0FBQTNqQyxHQUFBcWMsRUFBQXlvQixVQUFBOWtDLEdBQUFxYyxFQUFBbXBCLGFBQ0EsU0FHQSxHQUFBeGxDLEdBQUFxYyxFQUFBMVUsR0FBQTNILEdBQUFxYyxFQUFBcW9CLEVBQ0EsU0FJQSxRQUFBbHVDLE9BQUFteEMsV0FBQUMsVUFBQTl5QyxRQUFBLGVBQUFrTCxFQUNBLFNBR0EsT0FBQUEsR0FDQSxLQUFBcWMsRUFBQXFtQixNQUNBLEtBQUFybUIsRUFBQXVuQixjQUNBLEtBQUF2bkIsRUFBQW9wQixTQUNBLEtBQUFwcEIsRUFBQXFwQixVQUNBLEtBQUFycEIsRUFBQXNwQixXQUNBLEtBQUF0cEIsRUFBQXVwQixhQUNBLEtBQUF2cEIsRUFBQXFxQixVQUNBLEtBQUFycUIsRUFBQXNxQixLQUNBLEtBQUF0cUIsRUFBQXVxQixPQUNBLEtBQUF2cUIsRUFBQXdxQixNQUNBLEtBQUF4cUIsRUFBQXlxQixPQUNBLEtBQUF6cUIsRUFBQTBxQixNQUNBLEtBQUExcUIsRUFBQTJxQixXQUNBLEtBQUEzcUIsRUFBQTRxQixhQUNBLEtBQUE1cUIsRUFBQTZxQixvQkFDQSxLQUFBN3FCLEVBQUE4cUIsVUFDQSxLQUFBOXFCLEVBQUErcUIscUJBQ0EsU0FDQSxRQUNBLFlBSWU1NUMsRUFBQSxrTkNwZ0JmLFNBQUFxNkMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBQSxFQUNBRixFQUFBLEtBQUFDLEVBQUEsR0FFQUQsRUFBQSxLQUFBQyxFQUFBLElBQUFELEVBQUEsS0FBQUMsRUFBQSxHQW9CTyxTQUFBOTVCLEVBQUEzYSxFQUFBa3ZCLEdBQ1BweUIsS0FBQWtELEdBQUFrdkIsRUMxQkEsSUFBQXlsQixPQUFBLEVBRUFDLEdBQ0FDLE9BQUEsV0FDQUMsSUFBQSxRQUVBQyxHQUFBLE9BQ0F0RSxFQUFBLE9BR0EsU0FBQXVFLElBQ0EsUUFBQTU3QyxJQUFBdTdDLEVBQ0EsT0FBQUEsRUFFQUEsRUFBQSxHQUNBLElBQUF0K0IsRUFBQWxULFNBQUFyRCxjQUFBLEtBQUF1VyxNQUVBLFFBQUFuYSxLQUFBMDRDLEVBQ0ExNEMsRUFGQSxjQUVBbWEsSUFDQXMrQixFQUFBejRDLEdBR0EsT0FBQXk0QyxFQUdBLFNBQUFNLElBQ0EsT0FBQUQsUUFBQSwwQ0FHTyxTQUFBRSxJQUNQLE9BQUFGLFFBQUEsd0JBR08sU0FBQUcsRUFBQS9wQyxFQUFBbFMsR0FDUCxJQUFBOEcsRUFBQWkxQyxJQUNBajFDLElBQ0FvTCxFQUFBaUwsTUFBQXJXLEdBQUE5RyxFQUNBLHVCQUFBOEcsSUFDQW9MLEVBQUFpTCxNQUFBKytCLG1CQUFBbDhDLElBS0EsU0FBQW04QyxFQUFBanFDLEVBQUFsUyxHQUNBLElBQUE4RyxFQUFBazFDLElBQ0FsMUMsSUFDQW9MLEVBQUFpTCxNQUFBclcsR0FBQTlHLEVBQ0EsY0FBQThHLElBQ0FvTCxFQUFBaUwsTUFBQStILFVBQUFsbEIsSUFzQkEsSUFBQW84QyxFQUFBLGlCQUNBQyxFQUFBLG1CQ3ZFQSxJQUFBQyxFQUFBLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUFBLFNBQUFwOEMsR0FBb0csY0FBQUEsR0FBcUIsU0FBQUEsR0FBbUIsT0FBQUEsR0FBQSxtQkFBQW04QyxRQUFBbjhDLEVBQUFvRSxjQUFBKzNDLFFBQUFuOEMsSUFBQW04QyxPQUFBbjVDLFVBQUEsZ0JBQUFoRCxHQU01SXE4QyxPQUFBLEVBR0EsU0FBQUMsRUFBQW5TLEdBQ0EsSUFBQW9TLEVBQUFwUyxFQUFBcHRCLE1BQUFpVixRQUNBbVksRUFBQXB0QixNQUFBaVYsUUFBQSxPQUNBbVksRUFBQWhQLGFBQ0FnUCxFQUFBcHRCLE1BQUFpVixRQUFBdXFCLEVBR0EsU0FBQUMsRUFBQXJMLEVBQUF6cUMsRUFBQXNULEdBQ0EsSUFBQXBhLEVBQUFvYSxFQUNBLHdCQUFBdFQsRUFBQSxZQUFBdzFDLEVBQUF4MUMsSUFRQSxnQkFBQTlHLEdBQ0EsaUJBQUFBLElBQ0FBLEdBQUEsV0FFQXV4QyxFQUFBcDBCLE1BQUFyVyxHQUFBOUcsSUFHQXk4QyxFQUFBbEwsRUFBQXpxQyxHQWRBLFFBQUFwRSxLQUFBb0UsRUFDQUEsRUFBQTFCLGVBQUExQyxJQUNBazZDLEVBQUFyTCxFQUFBN3VDLEVBQUFvRSxFQUFBcEUsSUE2REEsU0FBQW02QyxFQUFBN3BDLEVBQUFuRSxHQUNBLElBQUEzTSxFQUFBOFEsRUFBQSxRQUFBbkUsRUFBQSxtQkFDQWtELEVBQUEsVUFBQWxELEVBQUEsY0FDQSxvQkFBQTNNLEVBQUEsQ0FDQSxJQUFBbkIsRUFBQWlTLEVBQUEvSSxTQUdBLGlCQURBL0gsRUFBQW5CLEVBQUFvTyxnQkFBQTRDLE1BR0E3UCxFQUFBbkIsRUFBQXdULEtBQUF4QyxJQUdBLE9BQUE3UCxFQUdBLFNBQUE0NkMsRUFBQTlwQyxHQUNBLE9BQUE2cEMsRUFBQTdwQyxHQUdBLFNBQUErcEMsRUFBQS9wQyxHQUNBLE9BQUE2cEMsRUFBQTdwQyxHQUFBLEdBR0EsU0FBQWdxQyxFQUFBekwsR0FDQSxJQUFBMEwsRUF0RUEsU0FBQTFTLEdBQ0EsSUFBQTJTLEVBQ0FudEMsT0FBQSxFQUNBQyxPQUFBLEVBQ0FzRSxFQUFBaTJCLEVBQUFoOUIsY0FDQWdILEVBQUFELEVBQUFDLEtBQ0E0b0MsRUFBQTdvQyxLQUFBbkYsZ0JBa0NBLE9BMUJBWSxHQU5BbXRDLEVBQUEzUyxFQUFBbEwseUJBTUEzd0IsS0FDQXNCLEVBQUFrdEMsRUFBQXJ1QyxLQTBCQUgsS0FKQXFCLEdBQUFvdEMsRUFBQXZvQyxZQUFBTCxFQUFBSyxZQUFBLEVBS0EvRixJQUpBbUIsR0FBQW10QyxFQUFBbm9DLFdBQUFULEVBQUFTLFdBQUEsR0FnQ0Fvb0MsQ0FBQTdMLEdBQ0FqOUIsRUFBQWk5QixFQUFBaGtDLGNBQ0F5RixFQUFBc0IsRUFBQTlHLGFBQUE4RyxFQUFBK29DLGFBR0EsT0FGQUosRUFBQXZ1QyxNQUFBb3VDLEVBQUE5cEMsR0FDQWlxQyxFQUFBcHVDLEtBQUFrdUMsRUFBQS9wQyxHQUNBaXFDLEVBT0EsU0FBQUssRUFBQWw5QyxHQUdBLGNBQUFBLFFBQUFGLElBQUFFLFFBQUE0SixPQUdBLFNBQUF1ekMsRUFBQXJyQyxHQUNBLE9BQUFvckMsRUFBQXByQyxHQUNBQSxFQUFBakksU0FFQSxJQUFBaUksRUFBQW9FLFNBQ0FwRSxFQUVBQSxFQUFBM0UsY0FpQkEsSUFBQWl3QyxFQUFBLElBQUFqcUIsT0FBQSxLQWhKQSx3Q0FBQXB1QixPQWdKQSx1QkFDQXM0QyxFQUFBLDRCQUNBQyxFQUFBLGVBQ0FDLEVBQUEsZUFDQXJQLEVBQUEsT0FDQXNQLEVBQUEsS0EwQ0EsU0FBQUMsRUFBQUMsRUFBQWh2QixHQUNBLGVBQUFndkIsRUFDQWh2QixFQUFBaXZCLFlBQUEsUUFBQUQsRUFFQWh2QixFQUFBa3ZCLGFBQUEsU0FBQUYsRUFHQSxTQUFBRyxFQUFBSCxHQUNBLGVBQUFBLEVBQ0EsUUFDRyxVQUFBQSxFQUNILE9BQ0csUUFBQUEsRUFDSCxTQUNHLFdBQUFBLEVBQ0gsV0FERyxFQU1ILFNBQUFJLEVBQUEzVCxFQUFBeGtCLEVBQUErSSxHQUVBLFdBQUE4dEIsRUFBQXJTLEVBQUEsY0FDQUEsRUFBQXB0QixNQUFBalAsU0FBQSxZQUVBLElBQUFpd0MsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEVBQUFSLEVBQUEsT0FBQS91QixHQUNBd3ZCLEVBQUFULEVBQUEsTUFBQS91QixHQUNBeXZCLEVBQUFOLEVBQUFJLEdBQ0FHLEVBQUFQLEVBQUFLLEdBRUEsU0FBQUQsSUFDQUYsRUFBQSxLQUdBLFFBQUFHLElBQ0FGLEVBQUEsS0FFQSxJQUFBSyxFQUFBLEdBQ0FDLEVBQUExQixFQUFBelMsSUFDQSxTQUFBeGtCLEdBQUEsUUFBQUEsS0FDQTA0QixFRHhMTyxTQUFBdnNDLEdBQ1AsT0FBQUEsRUFBQWlMLE1BQUErK0Isb0JBQUFocUMsRUFBQWlMLE1BQUE0K0IsS0N1THlCNEMsQ0FBcUJwVSxJQUFBLEdBQzFDMFIsRUFBcUIxUixFQUFBLFNBRXpCLFNBQUF4a0IsSUFDQXdrQixFQUFBcHRCLE1BQUFvaEMsR0FBQSxHQUNBaFUsRUFBQXB0QixNQUFBa2hDLEdBQUFGLEVBQUEsTUFFQSxRQUFBcDRCLElBQ0F3a0IsRUFBQXB0QixNQUFBcWhDLEdBQUEsR0FDQWpVLEVBQUFwdEIsTUFBQW1oQyxHQUFBRixFQUFBLE1BR0ExQixFQUFBblMsR0FDQSxJQUFBcVUsRUFBQTVCLEVBQUF6UyxHQUNBb1MsS0FDQSxRQUFBMzVDLEtBQUEraUIsRUFDQSxHQUFBQSxFQUFBM2dCLGVBQUFwQyxHQUFBLENBQ0EsSUFBQTg2QyxFQUFBRCxFQUFBNzZDLEVBQUE4ckIsR0FDQSt2QixFQUFBLFNBQUE3N0MsRUFBQW03QyxFQUFBQyxFQUNBVSxFQUFBSixFQUFBMTdDLEdBQUE0N0MsRUFBQTU3QyxHQUVBMjVDLEVBQUFtQixHQURBQSxJQUFBOTZDLEVBQ0E2N0MsRUFBQUMsRUFFQUQsRUFBQUMsRUFJQWxDLEVBQUFyUyxFQUFBb1MsR0FFQUQsRUFBQW5TLElBQ0EsU0FBQXhrQixHQUFBLFFBQUFBLElBQ0lrMkIsRUFBcUIxUixFQUFBa1UsR0FFekIsSUFBQXY4QyxLQUNBLFFBQUF1VyxLQUFBc04sRUFDQSxHQUFBQSxFQUFBM2dCLGVBQUFxVCxHQUFBLENBQ0EsSUFBQXNtQyxFQUFBbEIsRUFBQXBsQyxFQUFBcVcsR0FDQWt3QixFQUFBajVCLEVBQUF0TixHQUFBaW1DLEVBQUFqbUMsR0FFQXZXLEVBQUE2OEMsR0FEQXRtQyxJQUFBc21DLEVBQ0FwQyxFQUFBb0MsR0FBQUMsRUFFQXJDLEVBQUFvQyxHQUFBQyxFQUlBcEMsRUFBQXJTLEVBQUFyb0MsR0FHQSxTQUFTKzhDLEVBQVkxVSxFQUFBeGtCLEdBQ3JCLElBQUEyNEIsRUFBQTFCLEVBQUF6UyxHQUNBMlUsRUR0T08sU0FBQWh0QyxHQUNQLElBQUFpTCxFQUFBblQsT0FBQXNFLGlCQUFBNEQsRUFBQSxNQUNBZ1QsRUFBQS9ILEVBQUFnaUMsaUJBQUEsY0FBQWhpQyxFQUFBZ2lDLGlCQUFBbkQsS0FDQSxHQUFBOTJCLEdBQUEsU0FBQUEsRUFBQSxDQUNBLElBQUFrNkIsRUFBQWw2QixFQUFBeWtCLFFBQUEsa0JBQUFuVyxNQUFBLEtBQ0EsT0FBWXpqQixFQUFBbkMsV0FBQXd4QyxFQUFBLEtBQUFBLEVBQUEsTUFBQXB2QyxFQUFBcEMsV0FBQXd4QyxFQUFBLEtBQUFBLEVBQUEsT0FFWixPQUNBcnZDLEVBQUEsRUFDQUMsRUFBQSxHQzZObUJxdkMsQ0FBYzlVLEdBQ2pDK1UsR0FBa0J2dkMsRUFBQW12QyxFQUFBbnZDLEVBQUFDLEVBQUFrdkMsRUFBQWx2QyxHQUNsQixTQUFBK1YsSUFDQXU1QixFQUFBdnZDLEVBQUFtdkMsRUFBQW52QyxFQUFBZ1csRUFBQXJYLEtBQUFnd0MsRUFBQWh3QyxNQUVBLFFBQUFxWCxJQUNBdTVCLEVBQUF0dkMsRUFBQWt2QyxFQUFBbHZDLEVBQUErVixFQUFBbFgsSUFBQTZ2QyxFQUFBN3ZDLEtENU5PLFNBQUFxRCxFQUFBcXRDLEdBQ1AsSUFBQXBpQyxFQUFBblQsT0FBQXNFLGlCQUFBNEQsRUFBQSxNQUNBZ1QsRUFBQS9ILEVBQUFnaUMsaUJBQUEsY0FBQWhpQyxFQUFBZ2lDLGlCQUFBbkQsS0FDQSxHQUFBOTJCLEdBQUEsU0FBQUEsRUFBQSxDQUNBLElBQUFuYyxPQUFBLEVBQ0F5MkMsRUFBQXQ2QixFQUFBOU8sTUFBQWdtQyxHQUNBb0QsSUFFQXoyQyxHQURBeTJDLElBQUEsSUFDQWhzQixNQUFBLEtBQUE1aEIsSUFBQSxTQUFBb1MsR0FDQSxPQUFBcFcsV0FBQW9XLEVBQUEsT0FFQSxHQUFBdTdCLEVBQUF4dkMsRUFDQWhILEVBQUEsR0FBQXcyQyxFQUFBdnZDLEVBQ0Ftc0MsRUFBQWpxQyxFQUFBLFVBQUFuSixFQUFBd1ksS0FBQSxhQUdBeFksRUFEQW1jLEVBQUE5TyxNQUFBaW1DLEdBQUEsR0FDQTdvQixNQUFBLEtBQUE1aEIsSUFBQSxTQUFBb1MsR0FDQSxPQUFBcFcsV0FBQW9XLEVBQUEsT0FFQSxJQUFBdTdCLEVBQUF4dkMsRUFDQWhILEVBQUEsSUFBQXcyQyxFQUFBdnZDLEVBQ0Ftc0MsRUFBQWpxQyxFQUFBLFlBQUFuSixFQUFBd1ksS0FBQSxnQkFHQTQ2QixFQUFBanFDLEVBQUEsY0FBQXF0QyxFQUFBeHZDLEVBQUEsa0JBQUF3dkMsRUFBQXZ2QyxFQUFBLHFCQ3NNRXl2QyxDQUFjbFYsRUFBQStVLEdBMEJoQixTQUFBSSxHQUFBMzJDLEVBQUE0MkMsR0FDQSxRQUFBajlDLEVBQUEsRUFBaUJBLEVBQUFxRyxFQUFBcEcsT0FBZ0JELElBQ2pDaTlDLEVBQUE1MkMsRUFBQXJHLElBSUEsU0FBQWs5QyxHQUFBclYsR0FDQSxxQkFBQWtTLEVBQUFsUyxFQUFBLGFBeklBLG9CQUFBdmdDLFNBQ0F5eUMsRUFBQXp5QyxPQUFBc0UsaUJBMURBLFNBQUFpOEIsRUFBQXpqQyxFQUFBKzRDLEdBQ0EsSUFBQUMsRUFBQUQsRUFDQTN3QixFQUFBLEdBQ0FudUIsRUFBQXc4QyxFQUFBaFQsR0FRQSxPQVBBdVYsS0FBQS8rQyxFQUFBeU0sWUFBQWMsaUJBQUFpOEIsRUFBQSxTQUlBcmIsRUFBQTR3QixFQUFBWCxpQkFBQXI0QyxJQUFBZzVDLEVBQUFoNUMsSUFHQW9vQixHQVVBLFNBQUFxYixFQUFBempDLEdBR0EsSUFBQTVFLEVBQUFxb0MsRUFBQW1ULElBQUFuVCxFQUFBbVQsR0FBQTUyQyxHQVlBLEdBQUEwMkMsRUFBQXVDLEtBQUE3OUMsS0FBQXU3QyxFQUFBc0MsS0FBQWo1QyxHQUFBLENBRUEsSUFBQXFXLEVBQUFvdEIsRUFBQXB0QixNQUNBek8sRUFBQXlPLEVBQUFteEIsR0FDQTBSLEVBQUF6VixFQUFBb1QsR0FBQXJQLEdBR0EvRCxFQUFBb1QsR0FBQXJQLEdBQUEvRCxFQUFBbVQsR0FBQXBQLEdBR0FueEIsRUFBQW14QixHQUFBLGFBQUF4bkMsRUFBQSxNQUFBNUUsR0FBQSxFQUNBQSxFQUFBaWIsRUFBQThpQyxVQUFBckMsRUFHQXpnQyxFQUFBbXhCLEdBQUE1L0IsRUFFQTY3QixFQUFBb1QsR0FBQXJQLEdBQUEwUixFQUVBLFdBQUE5OUMsRUFBQSxPQUFBQSxJQStJQSxJQUFBZytDLElBQUEsNkJBQ0FDLElBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBMEJBLFNBQUFDLEdBQUEvVixFQUFBOW5DLEVBQUE2USxHQUNBLElBQUF0VCxFQUFBLEVBQ0FpVyxPQUFBLEVBQ0F1RixPQUFBLEVBQ0E5WSxPQUFBLEVBQ0EsSUFBQThZLEVBQUEsRUFBYUEsRUFBQS9ZLEVBQUFFLE9BQWtCNlksSUFFL0IsR0FEQXZGLEVBQUF4VCxFQUFBK1ksR0FFQSxJQUFBOVksRUFBQSxFQUFpQkEsRUFBQTRRLEVBQUEzUSxPQUFrQkQsSUFBQSxDQUNuQyxJQUFBNjlDLE9BQUEsRUFFQUEsRUFEQSxXQUFBdHFDLEVBQ0EsR0FBQUEsRUFBQTNDLEVBQUE1USxHQUFBLFFBRUF1VCxFQUFBM0MsRUFBQTVRLEdBRUExQyxHQUFBNE4sV0FBQTZ1QyxFQUFBbFMsRUFBQWdXLEtBQUEsRUFJQSxPQUFBdmdELEVBR0EsSUFBQXdnRCxNQWtDQSxTQUFBQyxHQUFBbFcsRUFBQXpqQyxFQUFBNDVDLEdBQ0EsSUFBQUMsRUFBQUQsRUFDQSxHQUFBcEQsRUFBQS9TLEdBQ0EsZ0JBQUF6akMsRUFBQTA1QyxHQUFBSSxjQUFBclcsR0FBQWlXLEdBQUFLLGVBQUF0VyxHQUNHLE9BQUFBLEVBQUFqMEIsU0FDSCxnQkFBQXhQLEVBQUEwNUMsR0FBQU0sU0FBQXZXLEdBQUFpVyxHQUFBTyxVQUFBeFcsR0FFQSxJQUFBajNCLEVBQUEsVUFBQXhNLEdBQUEsaUNBQ0FrNkMsRUFBQSxVQUFBbDZDLEVBQUF5akMsRUFBQWxMLHdCQUFBdHdCLE1BQUF3N0IsRUFBQWxMLHdCQUFBcndCLE9BRUFpeUMsR0FEQXhFLEVBQUFsUyxHQUNBcVYsR0FBQXJWLElBQ0EyVyxFQUFBLEdBQ0EsT0FBQUYsUUFBQTlnRCxJQUFBOGdELE1BQUEsS0FDQUEsT0FBQTlnRCxHQUdBLFFBREFnaEQsRUFBQXpFLEVBQUFsUyxFQUFBempDLFVBQ0E1RyxJQUFBZ2hELEdBQUFDLE9BQUFELEdBQUEsS0FDQUEsRUFBQTNXLEVBQUFwdEIsTUFBQXJXLElBQUEsR0FHQW82QyxFQUFBdHpDLFdBQUFzekMsSUFBQSxRQUVBaGhELElBQUF5Z0QsSUFDQUEsRUFBQU0sRUFBQVosR0FBQUYsSUFFQSxJQUFBaUIsT0FBQWxoRCxJQUFBOGdELEdBQUFDLEVBQ0EveEIsRUFBQTh4QixHQUFBRSxFQUNBLE9BQUFQLElBQUFSLEdBQ0FpQixFQUNBbHlCLEVBQUFveEIsR0FBQS9WLEdBQUEsb0JBQUFqM0IsR0FFQTR0QyxFQUNHRSxFQUNIVCxJQUFBTixHQUNBbnhCLEVBRUFBLEdBQUF5eEIsSUFBQVAsSUFBQUUsR0FBQS9WLEdBQUEsVUFBQWozQixHQUFBZ3RDLEdBQUEvVixHQUFBLFVBQUFqM0IsSUFFQTR0QyxFQUFBWixHQUFBL1YsRUFBQTJWLEdBQUF4M0MsTUFBQWk0QyxHQUFBcnRDLEdBdEVBb3NDLElBQUEsMkJBQUE1NEMsR0FDQTA1QyxHQUFBLE1BQUExNUMsR0FBQSxTQUFBdTZDLEdBQ0EsSUFBQXRnRCxFQUFBc2dELEVBQUFwM0MsU0FDQSxPQUFBRSxLQUFBbTNDLElBR0F2Z0QsRUFBQW9PLGdCQUFBLFNBQUFySSxHQUVBL0YsRUFBQXdULEtBQUEsU0FBQXpOLEdBQUEwNUMsR0FBQSxXQUFBMTVDLEdBQUEvRixLQUdBeS9DLEdBQUEsV0FBQTE1QyxHQUFBLFNBQUF5NkMsR0FFQSxJQUFBdHJDLEVBQUEsU0FBQW5QLEVBQ0F3TixFQUFBaXRDLEVBQUF0M0MsU0FDQXNLLEVBQUFELEVBQUFDLEtBRUFpdEMsRUFEQWx0QyxFQUFBbkYsZ0JBQ0E4RyxHQUdBLHFCQUFBM0IsRUFBQW10QyxZQUFBRCxHQUFBanRDLEtBQUEwQixJQUFBdXJDLEtBcURBLElBQUFFLElBQ0F4ekMsU0FBQSxXQUNBb2lDLFdBQUEsU0FDQWxlLFFBQUEsU0FJQSxTQUFBdXZCLEtBQ0EsUUFBQXBwQyxFQUFBblUsVUFBQXpCLE9BQUE4RixFQUFBK1AsTUFBQUQsR0FBQXFhLEVBQUEsRUFBa0VBLEVBQUFyYSxFQUFjcWEsSUFDaEZucUIsRUFBQW1xQixHQUFBeHVCLFVBQUF3dUIsR0FHQSxJQUFBMUQsT0FBQSxFQUNBcWIsRUFBQTloQyxFQUFBLEdBVUEsT0FQQSxJQUFBOGhDLEVBQUE1aEIsWUFDQXVHLEVBQUF1eEIsR0FBQXQ4QyxXQUFBakUsRUFBQXVJLEdBeklBLFNBQUE4aEMsRUFBQWhqQixFQUFBN2xCLEdBQ0EsSUFBQWs5QyxLQUNBemhDLEVBQUFvdEIsRUFBQXB0QixNQUNBclcsT0FBQSxFQUdBLElBQUFBLEtBQUF5Z0IsRUFDQUEsRUFBQW5pQixlQUFBMEIsS0FDQTgzQyxFQUFBOTNDLEdBQUFxVyxFQUFBclcsR0FDQXFXLEVBQUFyVyxHQUFBeWdCLEVBQUF6Z0IsSUFPQSxJQUFBQSxLQUhBcEYsRUFBQW9DLEtBQUF5bUMsR0FHQWhqQixFQUNBQSxFQUFBbmlCLGVBQUEwQixLQUNBcVcsRUFBQXJXLEdBQUE4M0MsRUFBQTkzQyxJQXlIQTg2QyxDQUFBclgsRUFBQW1YLEdBQUEsV0FDQXh5QixFQUFBdXhCLEdBQUF0OEMsV0FBQWpFLEVBQUF1SSxLQUdBeW1CLEVBMkJBLFNBQUEyeUIsR0FBQXpZLEVBQUFRLEdBQ0EsUUFBQWxuQyxLQUFBa25DLEVBQ0FBLEVBQUF4a0MsZUFBQTFDLEtBQ0EwbUMsRUFBQTFtQyxHQUFBa25DLEVBQUFsbkMsSUFHQSxPQUFBMG1DLEVBOUJBc1csSUFBQSwyQkFBQTU0QyxHQUNBLElBQUFnN0MsRUFBQWg3QyxFQUFBaTdDLE9BQUEsR0FBQUMsY0FBQWw3QyxFQUFBNEIsTUFBQSxHQUNBODNDLEdBQUEsUUFBQXNCLEdBQUEsU0FBQXZRLEVBQUEwUSxHQUNBLE9BQUExUSxHQUFBb1EsR0FBQXBRLEVBQUF6cUMsRUFBQW03QyxFQXZKQSxFQXVKQTVCLEtBRUEsSUFBQS9zQyxFQUFBLFVBQUF4TSxHQUFBLGlDQUVBMDVDLEdBQUExNUMsR0FBQSxTQUFBeWpDLEVBQUFud0IsR0FDQSxJQUFBOFUsRUFBQTlVLEVBQ0EsUUFBQWxhLElBQUFndkIsRUFXQSxPQUFBcWIsR0FBQW9YLEdBQUFwWCxFQUFBempDLEVBQUFxNUMsSUFWQSxHQUFBNVYsRUFBQSxDQUNBa1MsRUFBQWxTLEdBS0EsT0FKQXFWLEdBQUFyVixLQUVBcmIsR0FBQW94QixHQUFBL1YsR0FBQSxvQkFBQWozQixJQUVBc3BDLEVBQUFyUyxFQUFBempDLEVBQUFvb0IsT0FpQkEsSUFBQWd6QixJQUNBQyxVQUFBLFNBQUFqd0MsR0FDQSxHQUFBQSxLQUFBakksVUFBQWlJLEVBQUEzSCxXQUNBLE9BQUEySCxFQUVBLElBQUFvQyxFQUFBcEMsRUFBQTNFLGVBQUEyRSxFQUNBLE9BQUFvQyxFQUFBOUcsYUFBQThHLEVBQUErb0MsY0FHQUUsY0FDQXgzQixPQUFBLFNBQUF3ckIsRUFBQXZ4QyxFQUFBOHVCLEdBQ0EsWUFBQTl1QixFQUdBLE9BQUFnOUMsRUFBQXpMLElBeE9BLFNBQUFoSCxFQUFBeGtCLEVBQUErSSxHQUNBLEdBQUFBLEVBQUFzekIsWUFBQSxDQUNBLElBQUFDLEVBQUFyRixFQUFBelMsR0FFQStYLEVBQUFELEVBQUEzekMsS0FBQTZ6QyxRQUFBLEdBQ0FDLEVBQUFILEVBQUF4ekMsSUFBQTB6QyxRQUFBLEdBQ0FFLEVBQUExOEIsRUFBQXJYLEtBQUE2ekMsUUFBQSxHQUNBRyxFQUFBMzhCLEVBQUFsWCxJQUFBMHpDLFFBQUEsR0FFQSxHQUFBRCxJQUFBRyxHQUFBRCxJQUFBRSxFQUNBLE9BSUE1ekIsRUFBQWl2QixhQUFBanZCLEVBQUFrdkIsYUFDQUUsRUFBQTNULEVBQUF4a0IsRUFBQStJLEdBQ0dBLEVBQUE2ekIsaUJBQW9DM0csTUFBZ0IveEMsU0FBQXNLLEtBQUE0SSxNQUNuRDhoQyxFQUFZMVUsRUFBQXhrQixHQUVoQm00QixFQUFBM1QsRUFBQXhrQixFQUFBK0ksR0FtTkE4ekIsQ0FBQXJSLEVBQUF2eEMsRUFBQTh1QixRQU1Bd3VCLFdBQ0FvQyxRQUNBOUMsTUFDQXA0QixNQUFBLFNBQUFwa0IsR0FDQSxJQUFBc0MsT0FBQSxFQUNBUixLQUNBLElBQUFRLEtBQUF0QyxFQUNBQSxFQUFBZ0YsZUFBQTFDLEtBQ0FSLEVBQUFRLEdBQUF0QyxFQUFBc0MsSUFJQSxHQURBdEMsRUFBQTZrQixTQUVBLElBQUF2aUIsS0FBQXRDLEVBQ0FBLEVBQUFnRixlQUFBMUMsS0FDQVIsRUFBQStpQixTQUFBdmlCLEdBQUF0QyxFQUFBNmtCLFNBQUF2aUIsSUFJQSxPQUFBUixHQUdBMi9DLE9BQ0FnQixvQkFBQSxTQUFBN3ZDLEdBQ0EsT0FBQThwQyxFQUFBOXBDLElBRUE4dkMsbUJBQUEsU0FBQTl2QyxHQUNBLE9BQUErcEMsRUFBQS9wQyxJQUVBK3ZDLE1BQUEsV0FHQSxJQUZBLElBQUE3Z0QsS0FFQXl3QixFQUFBdnVCLFVBQUF6QixPQUFBOEYsRUFBQStQLE1BQUFtYSxHQUFBcXdCLEVBQUEsRUFBc0VBLEVBQUFyd0IsRUFBZXF3QixJQUNyRnY2QyxFQUFBdTZDLEdBQUE1K0MsVUFBQTQrQyxHQUdBLFFBQUF0Z0QsRUFBQSxFQUFtQkEsRUFBQStGLEVBQUE5RixPQUFpQkQsSUFDcEN3L0MsR0FBQUwsSUFBQTMvQyxFQUFBdUcsRUFBQS9GLElBRUEsT0FBQVIsR0FHQTArQyxjQUFBLEVBQ0FDLGVBQUEsR0FHQWdCLEdBQUFLLEdBQUExQixJQUVlLElBQUF5QyxHQUFBLEdDMWhCQSxJQUFBQyxHQXRDZixTQUFBOWlCLEdBQ0EsR0FBTTZpQixHQUFLM0YsU0FBQWxkLElBQUEsSUFBQUEsRUFBQTlwQixTQUNYLFlBaUJBLElBQ0EvQixFQURZMHVDLEdBQUsxRixZQUFBbmQsR0FDakI3ckIsS0FDQThFLE9BQUEsRUFDQThwQyxFQUFzQkYsR0FBS3JHLElBQUF4YyxFQUFBLFlBRzNCLEdBRkEsVUFBQStpQixHQUFBLGFBQUFBLEVBR0EsZUFBQS9pQixFQUFBZ2pCLFNBQUE1aEMsY0FBQSxLQUFBNGUsRUFBQWp1QixXQUdBLElBQUFrSCxFQUFBK21CLEVBQUFqdUIsV0FBbUNrSCxPQUFBOUUsRUFBMkI4RSxJQUFBbEgsV0FFOUQsZUFEQWd4QyxFQUFvQkYsR0FBS3JHLElBQUF2akMsRUFBQSxhQUV6QixPQUFBQSxFQUdBLGFDOENlLElBQUFncUMsR0FoRmYsU0FBQWpqQixHQWVBLElBZEEsSUFBQWtqQixHQUNBNTBDLEtBQUEsRUFDQUMsTUFBQTQwQyxJQUNBMTBDLElBQUEsRUFDQUMsT0FBQXkwQyxLQUVBaFMsRUFBVzJSLEdBQWU5aUIsR0FDMUI5ckIsRUFBWTJ1QyxHQUFLMUYsWUFBQW5kLEdBQ2pCbWhCLEVBQUFqdEMsRUFBQTlHLGFBQUE4RyxFQUFBK29DLGFBQ0E5b0MsRUFBQUQsRUFBQUMsS0FDQXBGLEVBQUFtRixFQUFBbkYsZ0JBSUFvaUMsR0FBQSxDQUVBLFFBQUFpUyxVQUFBcEksVUFBQTl5QyxRQUFBLGFBQUFpcEMsRUFBQW5qQyxhQUlBbWpDLElBQUFoOUIsR0FBQWc5QixJQUFBcGlDLEdBQWtELFlBQUw4ekMsR0FBS3JHLElBQUFyTCxFQUFBLGFBVzdDLEdBQUFBLElBQUFoOUIsR0FBQWc5QixJQUFBcGlDLEVBQ0wsVUFaa0QsQ0FDbEQsSUFBQTh0QyxFQUFnQmdHLEdBQUtsOUIsT0FBQXdyQixHQUVyQjBMLEVBQUF2dUMsTUFBQTZpQyxFQUFBMzhCLFdBQ0Fxb0MsRUFBQXB1QyxLQUFBMGlDLEVBQUF2OEIsVUFDQXN1QyxFQUFBejBDLElBQUExRSxLQUFBbTNDLElBQUFnQyxFQUFBejBDLElBQUFvdUMsRUFBQXB1QyxLQUNBeTBDLEVBQUEzMEMsTUFBQXhFLEtBQUFzNUMsSUFBQUgsRUFBQTMwQyxNQUVBc3VDLEVBQUF2dUMsS0FBQTZpQyxFQUFBbmpDLGFBQ0FrMUMsRUFBQXgwQyxPQUFBM0UsS0FBQXM1QyxJQUFBSCxFQUFBeDBDLE9BQUFtdUMsRUFBQXB1QyxJQUFBMGlDLEVBQUFsakMsY0FDQWkxQyxFQUFBNTBDLEtBQUF2RSxLQUFBbTNDLElBQUFnQyxFQUFBNTBDLEtBQUF1dUMsRUFBQXZ1QyxNQUlBNmlDLEVBQVMyUixHQUFlM1IsR0FNeEIsSUFBQW1TLEVBQUEsS0FDT1QsR0FBSzNGLFNBQUFsZCxJQUFBLElBQUFBLEVBQUE5cEIsV0FDWm90QyxFQUFBdGpCLEVBQUFqakIsTUFBQWpQLFNBRUEsYUFEbUIrMEMsR0FBS3JHLElBQUF4YyxFQUFBLGNBRXhCQSxFQUFBampCLE1BQUFqUCxTQUFBLFVBSUEsSUFBQXkxQyxFQUFnQlYsR0FBS0osb0JBQUF0QixHQUNyQnFDLEVBQWdCWCxHQUFLSCxtQkFBQXZCLEdBQ3JCWCxFQUFzQnFDLEdBQUtyQyxjQUFBVyxHQUMzQlYsRUFBdUJvQyxHQUFLcEMsZUFBQVUsR0FDNUJzQyxFQUFBMTBDLEVBQUEyMEMsWUFDQUMsRUFBQTUwQyxFQUFBNjBDLGFBT0EsR0FKQTVqQixFQUFBampCLFFBQ0FpakIsRUFBQWpqQixNQUFBalAsU0FBQXcxQyxHQ2hFZSxTQUFBdGpCLEdBQ2YsR0FBTTZpQixHQUFLM0YsU0FBQWxkLElBQUEsSUFBQUEsRUFBQTlwQixTQUNYLFNBR0EsSUFDQS9CLEVBRFkwdUMsR0FBSzFGLFlBQUFuZCxHQUNqQjdyQixLQUNBOEUsRUFBQSxLQUNBLElBQUFBLEVBQUErbUIsRUFBQWp1QixXQUFtQ2tILE9BQUE5RSxFQUEyQjhFLElBQUFsSCxXQUU5RCxhQUR3Qjh3QyxHQUFLckcsSUFBQXZqQyxFQUFBLFlBRTdCLFNBR0EsU0RxRE00cUMsQ0FBZTdqQixHQUVyQmtqQixFQUFBNTBDLEtBQUF2RSxLQUFBbTNDLElBQUFnQyxFQUFBNTBDLEtBQUFpMUMsR0FDQUwsRUFBQXowQyxJQUFBMUUsS0FBQW0zQyxJQUFBZ0MsRUFBQXowQyxJQUFBKzBDLEdBQ0FOLEVBQUEzMEMsTUFBQXhFLEtBQUFzNUMsSUFBQUgsRUFBQTMwQyxNQUFBZzFDLEVBQUEvQyxHQUNBMEMsRUFBQXgwQyxPQUFBM0UsS0FBQXM1QyxJQUFBSCxFQUFBeDBDLE9BQUE4MEMsRUFBQS9DLE9BQ0csQ0FFSCxJQUFBcUQsRUFBQS81QyxLQUFBbTNDLElBQUF1QyxFQUFBRixFQUFBL0MsR0FDQTBDLEVBQUEzMEMsTUFBQXhFLEtBQUFzNUMsSUFBQUgsRUFBQTMwQyxNQUFBdTFDLEdBRUEsSUFBQUMsRUFBQWg2QyxLQUFBbTNDLElBQUF5QyxFQUFBSCxFQUFBL0MsR0FDQXlDLEVBQUF4MEMsT0FBQTNFLEtBQUFzNUMsSUFBQUgsRUFBQXgwQyxPQUFBcTFDLEdBR0EsT0FBQWIsRUFBQXowQyxLQUFBLEdBQUF5MEMsRUFBQTUwQyxNQUFBLEdBQUE0MEMsRUFBQXgwQyxPQUFBdzBDLEVBQUF6MEMsS0FBQXkwQyxFQUFBMzBDLE1BQUEyMEMsRUFBQTUwQyxLQUFBNDBDLEVBQUEsTUV6Q2UsSUFBQWMsR0F6Q2YsU0FBQUMsRUFBQUMsRUFBQWhCLEVBQUFyK0IsR0FDQSxJQUFBZzRCLEVBQVlnRyxHQUFLeitCLE1BQUE2L0IsR0FDakIvNkMsR0FDQXlGLE1BQUF1MUMsRUFBQXYxQyxNQUNBQyxPQUFBczFDLEVBQUF0MUMsUUFrQ0EsT0EvQkFpVyxFQUFBZSxTQUFBaTNCLEVBQUF2dUMsS0FBQTQwQyxFQUFBNTBDLE9BQ0F1dUMsRUFBQXZ1QyxLQUFBNDBDLEVBQUE1MEMsTUFJQXVXLEVBQUFzL0IsYUFBQXRILEVBQUF2dUMsTUFBQTQwQyxFQUFBNTBDLE1BQUF1dUMsRUFBQXZ1QyxLQUFBcEYsRUFBQXlGLE1BQUF1MEMsRUFBQTMwQyxRQUNBckYsRUFBQXlGLE9BQUFrdUMsRUFBQXZ1QyxLQUFBcEYsRUFBQXlGLE1BQUF1MEMsRUFBQTMwQyxPQUlBc1csRUFBQWUsU0FBQWkzQixFQUFBdnVDLEtBQUFwRixFQUFBeUYsTUFBQXUwQyxFQUFBMzBDLFFBRUFzdUMsRUFBQXZ1QyxLQUFBdkUsS0FBQW0zQyxJQUFBZ0MsRUFBQTMwQyxNQUFBckYsRUFBQXlGLE1BQUF1MEMsRUFBQTUwQyxPQUlBdVcsRUFBQWdCLFNBQUFnM0IsRUFBQXB1QyxJQUFBeTBDLEVBQUF6MEMsTUFDQW91QyxFQUFBcHVDLElBQUF5MEMsRUFBQXowQyxLQUlBb1csRUFBQXUvQixjQUFBdkgsRUFBQXB1QyxLQUFBeTBDLEVBQUF6MEMsS0FBQW91QyxFQUFBcHVDLElBQUF2RixFQUFBMEYsT0FBQXMwQyxFQUFBeDBDLFNBQ0F4RixFQUFBMEYsUUFBQWl1QyxFQUFBcHVDLElBQUF2RixFQUFBMEYsT0FBQXMwQyxFQUFBeDBDLFFBSUFtVyxFQUFBZ0IsU0FBQWczQixFQUFBcHVDLElBQUF2RixFQUFBMEYsT0FBQXMwQyxFQUFBeDBDLFNBRUFtdUMsRUFBQXB1QyxJQUFBMUUsS0FBQW0zQyxJQUFBZ0MsRUFBQXgwQyxPQUFBeEYsRUFBQTBGLE9BQUFzMEMsRUFBQXowQyxNQUdTbzBDLEdBQUtwQixJQUFBNUUsRUFBQTN6QyxJQ2hCQyxJQUFBbTdDLEdBdEJmLFNBQUF2eUMsR0FDQSxJQUFBNlQsT0FBQSxFQUNBL1MsT0FBQSxFQUNBc0ksT0FBQSxFQUNBLEdBQU8ybkMsR0FBSzNGLFNBQUFwckMsSUFBQSxJQUFBQSxFQUFBb0UsU0FJVCxDQUNILElBQUFpckMsRUFBYzBCLEdBQUtkLFVBQUFqd0MsR0FDbkI2VCxHQUNBclgsS0FBWXUwQyxHQUFLSixvQkFBQXRCLEdBQ2pCMXlDLElBQVdvMEMsR0FBS0gsbUJBQUF2QixJQUVoQnZ1QyxFQUFRaXdDLEdBQUtyQyxjQUFBVyxHQUNiam1DLEVBQVEybkMsR0FBS3BDLGVBQUFVLFFBVmJ4N0IsRUFBYWs5QixHQUFLbDlCLE9BQUE3VCxHQUNsQmMsRUFBUWl3QyxHQUFLeUIsV0FBQXh5QyxHQUNib0osRUFBUTJuQyxHQUFLMEIsWUFBQXp5QyxHQVliLE9BRkE2VCxFQUFBaFgsTUFBQWlFLEVBQ0ErUyxFQUFBL1csT0FBQXNNLEVBQ0F5SyxHQ1VlLElBQUE2K0IsR0EzQmYsU0FBQUMsRUFBQTdtQixHQUNBLElBQUE4WixFQUFBOVosRUFBQStqQixPQUFBLEdBQ0F2bEMsRUFBQXdoQixFQUFBK2pCLE9BQUEsR0FDQS91QyxFQUFBNnhDLEVBQUE5MUMsTUFDQXVNLEVBQUF1cEMsRUFBQTcxQyxPQUVBZSxFQUFBODBDLEVBQUFuMkMsS0FDQXNCLEVBQUE2MEMsRUFBQWgyQyxJQWNBLE1BWkEsTUFBQWlwQyxFQUNBOW5DLEdBQUFzTCxFQUFBLEVBQ0csTUFBQXc4QixJQUNIOW5DLEdBQUFzTCxHQUdBLE1BQUFrQixFQUNBek0sR0FBQWlELEVBQUEsRUFDRyxNQUFBd0osSUFDSHpNLEdBQUFpRCxJQUlBdEUsS0FBQXFCLEVBQ0FsQixJQUFBbUIsSUNkZSxJQUFBODBDLEdBWGYsU0FBQVIsRUFBQVMsRUFBQWovQixFQUFBQyxFQUFBd1csR0FDQSxJQUFBeW9CLEVBQVdKLEdBQWNHLEVBQUFqL0IsRUFBQSxJQUN6Qm0vQixFQUFXTCxHQUFjTixFQUFBeCtCLEVBQUEsSUFDekJvL0IsR0FBQUQsRUFBQXYyQyxLQUFBczJDLEVBQUF0MkMsS0FBQXUyQyxFQUFBcDJDLElBQUFtMkMsRUFBQW4yQyxLQUVBLE9BQ0FILEtBQUE0MUMsRUFBQTUxQyxLQUFBdzJDLEVBQUEsR0FBQW4vQixFQUFBLEdBQUF3VyxFQUFBLEdBQ0ExdEIsSUFBQXkxQyxFQUFBejFDLElBQUFxMkMsRUFBQSxHQUFBbi9CLEVBQUEsR0FBQXdXLEVBQUEsS0NJQSxTQUFBNG9CLEdBQUFkLEVBQUFDLEVBQUFoQixHQUNBLE9BQUFlLEVBQUEzMUMsS0FBQTQwQyxFQUFBNTBDLE1BQUEyMUMsRUFBQTMxQyxLQUFBNDFDLEVBQUF2MUMsTUFBQXUwQyxFQUFBMzBDLE1BR0EsU0FBQXkyQyxHQUFBZixFQUFBQyxFQUFBaEIsR0FDQSxPQUFBZSxFQUFBeDFDLElBQUF5MEMsRUFBQXowQyxLQUFBdzFDLEVBQUF4MUMsSUFBQXkxQyxFQUFBdDFDLE9BQUFzMEMsRUFBQXgwQyxPQVdBLFNBQUF1MkMsR0FBQXYvQixFQUFBNVMsRUFBQXRCLEdBQ0EsSUFBQTFQLEtBTUEsT0FMRStnRCxHQUFLdkQsS0FBQTU1QixFQUFBLFNBQUF4TCxHQUNQcFksRUFBQUksS0FBQWdZLEVBQUFxdkIsUUFBQXoyQixFQUFBLFNBQUFtSCxHQUNBLE9BQUF6SSxFQUFBeUksUUFHQW5ZLEVBR0EsU0FBQW9qRCxHQUFBdi9CLEVBQUExZCxHQUVBLE9BREEwZCxFQUFBMWQsSUFBQTBkLEVBQUExZCxHQUNBMGQsRUFHQSxTQUFBdy9CLEdBQUFDLEVBQUFDLEdBT0EsT0FMQSxLQUFBMUYsS0FBQXlGLEdBQ0FFLFNBQUFGLEVBQUFHLFVBQUEsRUFBQUgsRUFBQTdpRCxPQUFBLFdBQUE4aUQsRUFFQUMsU0FBQUYsRUFBQSxNQUVBLEVBR0EsU0FBQUksR0FBQTcvQixFQUFBd3JCLEdBQ0F4ckIsRUFBQSxHQUFBdy9CLEdBQUF4L0IsRUFBQSxHQUFBd3JCLEVBQUF4aUMsT0FDQWdYLEVBQUEsR0FBQXcvQixHQUFBeC9CLEVBQUEsR0FBQXdyQixFQUFBdmlDLFFBbUllLElBQUE2MkMsR0EzSGYsU0FBQXRVLEVBQUF1VSxFQUFBOW5CLEVBQUErbkIsR0FDQSxJQUFBamdDLEVBQUFrWSxFQUFBbFksT0FDQUMsRUFBQWlZLEVBQUFqWSxTQUFBLEtBQ0F3VyxFQUFBeUIsRUFBQXpCLGVBQUEsS0FDQXRYLEVBQUErWSxFQUFBL1ksU0FDQTlmLEVBQUE2NEIsRUFBQTc0QixRQUFBb3NDLEVBQ0F4ckIsS0FBQTdQLE9BQUE2UCxHQUNBd1csS0FBQXJtQixPQUFBcW1CLEdBQ0F0WCxRQUNBLElBQUErZ0MsS0FDQUMsRUFBQSxFQUVBM0MsRUFBb0JELEdBQXdCbCtDLEdBRTVDbS9DLEVBQWlCRyxHQUFTdC9DLEdBRTFCeWdELEdBQUE3L0IsRUFBQXUrQixHQUNBc0IsR0FBQXJwQixFQUFBdXBCLEdBRUEsSUFBQXpCLEVBQW9CUyxHQUFjUixFQUFBd0IsRUFBQWhnQyxFQUFBQyxFQUFBd1csR0FFbEMycEIsRUFBb0JqRCxHQUFLRixNQUFBdUIsRUFBQUQsR0FHekIsR0FBQWYsSUFBQXIrQixFQUFBZSxTQUFBZixFQUFBZ0IsVUFBQTgvQixFQUFBLENBQ0EsR0FBQTlnQyxFQUFBZSxTQUVBbS9CLEdBQUFkLEVBQUFDLEVBQUFoQixHQUFBLENBRUEsSUFBQTZDLEVBQUFkLEdBQUF2L0IsRUFBQSxVQUNBOVAsRUFBQSxJQUNBOEYsRUFBQSxNQUdBc3FDLEVBQUFkLEdBQUF2L0IsRUFBQSxHQUNBc2dDLEVBQUFmLEdBQUEvb0IsRUFBQSxJQTlFQSxTQUFBOG5CLEVBQUFDLEVBQUFoQixHQUNBLE9BQUFlLEVBQUEzMUMsS0FBQTQwQyxFQUFBMzBDLE9BQUEwMUMsRUFBQTMxQyxLQUFBNDFDLEVBQUF2MUMsTUFBQXUwQyxFQUFBNTBDLE1BZ0ZBNDNDLENBRjZCeEIsR0FBY1IsRUFBQXdCLEVBQUFLLEVBQUFDLEVBQUFDLEdBRTNDL0IsRUFBQWhCLEtBQ0EyQyxFQUFBLEVBQ0FuZ0MsRUFBQXFnQyxFQUNBcGdDLEVBQUFxZ0MsRUFDQTdwQixFQUFBOHBCLEdBS0EsR0FBQXBoQyxFQUFBZ0IsU0FFQW0vQixHQUFBZixFQUFBQyxFQUFBaEIsR0FBQSxDQUVBLElBQUFpRCxFQUFBbEIsR0FBQXYvQixFQUFBLFVBQ0FySyxFQUFBLElBQ0FsQixFQUFBLE1BR0Fpc0MsRUFBQWxCLEdBQUF2L0IsRUFBQSxHQUNBMGdDLEVBQUFuQixHQUFBL29CLEVBQUEsSUFoR0EsU0FBQThuQixFQUFBQyxFQUFBaEIsR0FDQSxPQUFBZSxFQUFBeDFDLElBQUF5MEMsRUFBQXgwQyxRQUFBdTFDLEVBQUF4MUMsSUFBQXkxQyxFQUFBdDFDLE9BQUFzMEMsRUFBQXowQyxLQWtHQTYzQyxDQUY4QjVCLEdBQWNSLEVBQUF3QixFQUFBUyxFQUFBQyxFQUFBQyxHQUU1Q25DLEVBQUFoQixLQUNBMkMsRUFBQSxFQUNBbmdDLEVBQUF5Z0MsRUFDQXhnQyxFQUFBeWdDLEVBQ0FqcUIsRUFBQWtxQixHQU1BUixJQUNBNUIsRUFBb0JTLEdBQWNSLEVBQUF3QixFQUFBaGdDLEVBQUFDLEVBQUF3VyxHQUM1QjBtQixHQUFLcEIsSUFBQXFFLEVBQUE3QixJQUVYLElBQUFzQyxFQUFBeEIsR0FBQWQsRUFBQUMsRUFBQWhCLEdBQ0FzRCxFQUFBeEIsR0FBQWYsRUFBQUMsRUFBQWhCLElBR0FxRCxHQUFBQyxLQUNBOWdDLEVBQUFrWSxFQUFBbFksT0FDQUMsRUFBQWlZLEVBQUFqWSxTQUFBLEtBQ0F3VyxFQUFBeUIsRUFBQXpCLGVBQUEsTUFHQXlwQixFQUFBaGdDLFFBQUFmLEVBQUFlLFNBQUEyZ0MsRUFDQVgsRUFBQS8vQixRQUFBaEIsRUFBQWdCLFNBQUEyZ0MsR0FHQVosRUFBQWhnQyxTQUFBZ2dDLEVBQUEvL0IsV0FDQWlnQyxFQUFvQjlCLEdBQWlCQyxFQUFBQyxFQUFBaEIsRUFBQTBDLElBMEJyQyxPQXJCQUUsRUFBQW4zQyxRQUFBdTFDLEVBQUF2MUMsT0FDSWswQyxHQUFLckcsSUFBQXozQyxFQUFBLFFBQXNCODlDLEdBQUtsMEMsTUFBQTVKLEdBQUErZ0QsRUFBQW4zQyxNQUFBdTFDLEVBQUF2MUMsT0FHcENtM0MsRUFBQWwzQyxTQUFBczFDLEVBQUF0MUMsUUFDSWkwQyxHQUFLckcsSUFBQXozQyxFQUFBLFNBQXVCODlDLEdBQUtqMEMsT0FBQTdKLEdBQUErZ0QsRUFBQWwzQyxPQUFBczFDLEVBQUF0MUMsUUFNbkNpMEMsR0FBS2w5QixPQUFBNWdCLEdBQ1B1SixLQUFBdzNDLEVBQUF4M0MsS0FDQUcsSUFBQXEzQyxFQUFBcjNDLE1BRUFrdkMsWUFBQS9mLEVBQUErZixZQUNBQyxhQUFBaGdCLEVBQUFnZ0IsYUFDQTJFLGdCQUFBM2tCLEVBQUEya0IsZ0JBQ0FQLFlBQUFwa0IsRUFBQW9rQixlQUlBdDhCLFNBQ0FDLFNBQ0F3VyxlQUNBdFgsU0FBQStnQyxJQzNLQSxTQUFBYSxHQUFBdFYsRUFBQXVWLEVBQUE5b0IsR0FDQSxJQUFBejhCLEVBQUF5OEIsRUFBQXo4QixRQUFBdWxELEVBQ0EvQixFQUFzQk4sR0FBU2xqRCxHQUUvQndsRCxHQVhBLFNBQUF4bEQsR0FDQSxJQUFBK2hELEVBQW9CRCxHQUF3QjloRCxHQUM1Q3lsRCxFQUFxQnZDLEdBQVNsakQsR0FFOUIsT0FBQStoRCxHQUFBMEQsRUFBQXQ0QyxLQUFBczRDLEVBQUFqNEMsT0FBQXUwQyxFQUFBNTBDLE1BQUFzNEMsRUFBQW40QyxJQUFBbTRDLEVBQUFoNEMsUUFBQXMwQyxFQUFBejBDLEtBQUFtNEMsRUFBQXQ0QyxNQUFBNDBDLEVBQUEzMEMsT0FBQXE0QyxFQUFBbjRDLEtBQUF5MEMsRUFBQXgwQyxPQU9BbTRDLENBQUExbEQsR0FFQSxPQUFTc2tELEdBQU90VSxFQUFBd1QsRUFBQS9tQixFQUFBK29CLEdBR2hCRixHQUFBSyxrQkFBaUNoRSxHQUVqQzJELEdBQUFNLDJCQUEwQzlELEdBRTNCLElBQUErRCxHQUFBLEdDekJmbmlELEdBQUFwRixPQUFBcUYsUUFBQSxTQUFBM0QsR0FBbUQsUUFBQW1CLEVBQUEsRUFBZ0JBLEVBQUEwQixVQUFBekIsT0FBc0JELElBQUEsQ0FBTyxJQUFBeUMsRUFBQWYsVUFBQTFCLEdBQTJCLFFBQUFNLEtBQUFtQyxFQUEwQnRGLE9BQUF1RCxVQUFBZ0MsZUFBQXRCLEtBQUFxQixFQUFBbkMsS0FBeUR6QixFQUFBeUIsR0FBQW1DLEVBQUFuQyxJQUFpQyxPQUFBekIsR0FpRGhPLElBQUE4bEQsR0F2Q2YsU0FBbUI5VixFQUFBK1YsRUFBQXRwQixHQUNuQixJQUFBdnBCLE9BQUEsRUFDQUksT0FBQSxFQUVBUCxFQUFZMnVDLEdBQUsxRixZQUFBaE0sR0FDakJnUSxFQUFBanRDLEVBQUE5RyxhQUFBOEcsRUFBQStvQyxhQUVBc0csRUFBZ0JWLEdBQUtKLG9CQUFBdEIsR0FDckJxQyxFQUFnQlgsR0FBS0gsbUJBQUF2QixHQUNyQlgsRUFBc0JxQyxHQUFLckMsY0FBQVcsR0FDM0JWLEVBQXVCb0MsR0FBS3BDLGVBQUFVLEdBYzVCdUUsR0FDQXAzQyxLQVpBK0YsRUFEQSxVQUFBNnlDLEVBQ0FBLEVBQUE3eUMsTUFFQWt2QyxFQUFBMkQsRUFBQTV5QyxRQVdBN0YsSUFQQWdHLEVBREEsVUFBQXl5QyxFQUNBQSxFQUFBenlDLE1BRUErdUMsRUFBQTBELEVBQUF4eUMsUUFNQS9GLE1BQUEsRUFDQUMsT0FBQSxHQUdBdTRDLEVBQUE5eUMsR0FBQSxHQUFBQSxHQUFBa3ZDLEVBQUEvQyxHQUFBL3JDLEdBQUEsR0FBQUEsR0FBQSt1QyxFQUFBL0MsRUFHQS82QixHQUFBa1ksRUFBQWxZLE9BQUEsU0FFQSxPQUFTKy9CLEdBQU90VSxFQUFBdVUsRUFBQTdnRCxNQUEyQis0QixHQUFVbFksV0FBaUJ5aEMsSUNYL0QsU0FBU0MsR0FBUXBuRCxHQUN4QixPQUFBQSxHQUFBLGlCQUFBQSxLQUFBNEosU0FBQTVKLEVDekJBLFNBQUFxbkQsR0FBQTltRCxHQUNBLHlCQUFBQSxLQUNBQSxJQURBLEtBSUEsU0FBQSttRCxHQUFBQyxHQUNBLHVCQUFBQSxLQUNBQSxFQURBLEtBSUEsSUFBSUMsR0FBSyxTQUFBcGtELEdBR1QsU0FBQXFrRCxJQUNBLElBQUF4dkMsRUFBQXpTLEVBQUEwUyxFQUVJeUcsSUFBZW5iLEtBQUFpa0QsR0FFbkIsUUFBQXR2QyxFQUFBblUsVUFBQXpCLE9BQUE4RixFQUFBK1AsTUFBQUQsR0FBQUUsRUFBQSxFQUFtRUEsRUFBQUYsRUFBYUUsSUFDaEZoUSxFQUFBZ1EsR0FBQXJVLFVBQUFxVSxHQUdBLE9BQUFKLEVBQUF6UyxFQUFvQ29aLElBQTBCcGIsS0FBQUosRUFBQU0sS0FBQUssTUFBQVgsR0FBQUksTUFBQXNTLE9BQUF6TixLQUFBN0MsRUFBQWtpRCxXQUFBLFdBQzlELElBQUE5dUMsRUFBQXBULEVBQUFuRCxNQUNBNGUsRUFBQXJJLEVBQUFxSSxTQUNBOWYsRUFBQXlYLEVBQUF6WCxPQUNBeThCLEVBQUFobEIsRUFBQWdsQixNQUNBK3BCLEVBQUEvdUMsRUFBQSt1QyxRQUVBLElBQUExbUMsR0FBQTlmLEVBQUEsQ0FDQSxJQUFBNEQsRUFBcUJzakIsRUFBQTltQixFQUFRK21CLFlBQUE5aUIsR0FFN0JvRCxPQUFBLEVBQ0FvM0IsRUFBQXFuQixHQUFBbG1ELEdBQ0FvbUQsRUFBQUQsR0FBQW5tRCxHQUVBNitCLEVBQ0FwM0IsRUFBbUJvK0MsR0FBWWppRCxFQUFBaTdCLEVBQUFwQyxHQUN0QjJwQixJQUNUMytDLEVBQW1CcStDLEdBQVVsaUQsRUFBQXdpRCxFQUFBM3BCLElBRzdCK3BCLEdBQ0FBLEVBQUE1aUQsRUFBQTZELEtBckJBc1AsRUF3QktELEVBQVUyRyxJQUEwQnBaLEVBQUEwUyxHQWtHekMsT0FySUUyRyxJQUFTNG9DLEVBQUFya0QsR0FzQ1hxa0QsRUFBQXprRCxVQUFBdWYsa0JBQUEsV0FDQSxJQUFBbGdCLEVBQUFtQixLQUFBbkIsTUFFQW1CLEtBQUFra0QsY0FDQXJsRCxFQUFBNGUsVUFBQTVlLEVBQUF1bEQscUJBQ0Fwa0QsS0FBQXFrRCw0QkFJQUosRUFBQXprRCxVQUFBMmYsbUJBQUEsU0FBQWhKLEdBQ0EsSUFBQW11QyxHQUFBLEVBQ0F6bEQsRUFBQW1CLEtBQUFuQixNQUVBLElBQUFBLEVBQUE0ZSxTQUFBLENBQ0EsSUFBQWxjLEVBQW1Cc2pCLEVBQUE5bUIsRUFBUSttQixZQUFBOWtCLE1BQzNCdWtELEVBQUFoakQsSUFBQWs2Qix3QkFBQSxLQUVBLEdBQUF0bEIsRUFBQXNILFNBQ0E2bUMsR0FBQSxNQUNPLENBQ1AsSUFBQUUsRUFBQVgsR0FBQTF0QyxFQUFBeFksUUFDQThtRCxFQUFBWixHQUFBaGxELEVBQUFsQixRQUNBK21ELEVBQUFaLEdBQUEzdEMsRUFBQXhZLFFBQ0FnbkQsRUFBQWIsR0FBQWpsRCxFQUFBbEIsUUFFWWltRCxHQUFRWSxJQUFpQlosR0FBUWEsR0FFN0NILEdBQUEsR0FDU0UsSUFBQUMsR0FDVEQsSUFBQUMsR0FBQUUsR0FDQUQsR0FBQUMsR0FBQUYsR0FDQUUsSUR2RU8sU0FBQUMsRUFBQUMsR0FDUCxPQUFBRCxJQUFBQyxNQUNBRCxJQUFBQyxLQUVBLFVBQUFBLEdBQUEsVUFBQUEsRUFDQUQsRUFBQS96QyxRQUFBZzBDLEVBQUFoMEMsT0FBQSt6QyxFQUFBM3pDLFFBQUE0ekMsRUFBQTV6QyxNQUdBLFlBQUE0ekMsR0FBQSxZQUFBQSxHQUNBRCxFQUFBOXpDLFVBQUErekMsRUFBQS96QyxTQUFBOHpDLEVBQUExekMsVUFBQTJ6QyxFQUFBM3pDLFNDOER5QjR6QyxDQUFXSixFQUFBQyxNQUNwQ0wsR0FBQSxHQUlBLElBQUFTLEVBQUEva0QsS0FBQXVrRCxlQUNBRCxJQUFBL2lELEdBQUF3akQsRUFBQTU1QyxRQUFBbzVDLEVBQUFwNUMsT0FBQTQ1QyxFQUFBMzVDLFNBQUFtNUMsRUFBQW41QyxTQUNBazVDLEdBQUEsR0FJQXRrRCxLQUFBdWtELGFBR0FELEdBQ0F0a0QsS0FBQWtrRCxhQUdBcmxELEVBQUF1bEQsc0JBQUF2bEQsRUFBQTRlLFNBQ0F6ZCxLQUFBcWtELDJCQUVBcmtELEtBQUFnbEQsMkJBSUFmLEVBQUF6a0QsVUFBQTRmLHFCQUFBLFdBQ0FwZixLQUFBZ2xELDJCQUdBZixFQUFBemtELFVBQUE2a0QseUJBQUEsV0FDQXJrRCxLQUFBaWxELGdCQUNBamxELEtBQUFrbEQsY0QxSE8sU0FBQW5KLEVBQUE5RCxHQUNQLElBQUFrTixPQUFBLEVBRUEsU0FBQW4vQyxJQUNBbS9DLElBQ0E5ckMsYUFBQThyQyxHQUNBQSxFQUFBLE1BSUEsU0FBQUMsSUFDQXAvQyxJQUNBbS9DLEVBQUF4K0MsV0FBQW8xQyxFQUFBOUQsR0FLQSxPQUZBbU4sRUFBQXAvQyxRQUVBby9DLEVDeUcyQkMsQ0FBTXJsRCxLQUFBa2tELFdBQUFsa0QsS0FBQW5CLE1BQUF5bUQsbUJBQ2pDdGxELEtBQUFpbEQsY0FBMkJocEQsT0FBQTZNLEVBQUEsRUFBQTdNLENBQWdCbUssT0FBQSxTQUFBcEcsS0FBQWtsRCxpQkFJM0NqQixFQUFBemtELFVBQUF3bEQsd0JBQUEsV0FDQWhsRCxLQUFBaWxELGdCQUNBamxELEtBQUFrbEQsY0FBQWwvQyxRQUNBaEcsS0FBQWlsRCxjQUFBdDJDLFNBQ0EzTyxLQUFBaWxELGNBQUEsT0FJQWhCLEVBQUF6a0QsVUFBQW9ELE9BQUEsV0FDQSxJQUFBRCxFQUFBM0MsS0FFQStpQixFQUFBL2lCLEtBQUFuQixNQUNBMG1ELEVBQUF4aUMsRUFBQXdpQyxjQUNBbG5ELEVBQUEwa0IsRUFBQTFrQixTQUVBMmQsRUFBZ0JWLEVBQUF2ZCxFQUFLUSxTQUFBMkMsS0FBQTdDLEdBQ3JCLEdBQUFrbkQsRUFBQSxDQUNBLElBQUFsZ0MsS0FNQSxPQUxBcHBCLE9BQUE2SCxLQUFBeWhELEdBQ0EvbUQsUUFBQSxTQUFBNlQsR0FDQWdULEVBQUFoVCxHQUFBMVAsRUFBQTlELE1BQUEwbUQsRUFBQWx6QyxNQUdhaUosRUFBQXZkLEVBQUs4d0IsYUFBQTdTLEVBQUFxSixHQUVsQixPQUFBckosR0FHQWlvQyxFQXRJUyxDQXVJUHBqQyxFQUFBLFdBRUZtakMsR0FBSzdpRCxXQUNMb2tELGNBQWlCaHFDLEVBQUF4ZCxFQUFTNmpCLE9BQzFCd1ksTUFBUzdlLEVBQUF4ZCxFQUFTNmpCLE9BQUE1a0IsV0FDbEJXLE9BQVU0ZCxFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTaEIsS0FBT3dlLEVBQUF4ZCxFQUFTbEIsT0FDeERpVSxRQUFheUssRUFBQXhkLEVBQVMyZCxPQUN0QnhLLFFBQWFxSyxFQUFBeGQsRUFBUzJkLE9BQ3RCN0ssTUFBVzBLLEVBQUF4ZCxFQUFTMmQsT0FDcEJ6SyxNQUFXc0ssRUFBQXhkLEVBQVMyZCxXQUVwQnlvQyxRQUFXNW9DLEVBQUF4ZCxFQUFTaEIsS0FDcEJ1b0Qsa0JBQXFCL3BDLEVBQUF4ZCxFQUFTMmQsT0FDOUIwb0Msb0JBQXVCN29DLEVBQUF4ZCxFQUFTK1gsS0FDaEMySCxTQUFZbEMsRUFBQXhkLEVBQVMrWCxLQUNyQnpYLFNBQVlrZCxFQUFBeGQsRUFBU2dZLEtBRXJCaXVDLEdBQUtodUMsY0FDTHJZLE9BQUEsV0FDQSxPQUFBeUksUUFFQWsvQyxrQkFBQSxHQUNBbEIscUJBQUEsRUFDQTNtQyxVQUFBLEdBSWUsSUNwTEErbkMsR0RvTEEsZ0NFaExYQyxHQUFhLFNBQUE3bEQsR0FHakIsU0FBQThsRCxJQUdBLE9BRkl2cUMsSUFBZW5iLEtBQUEwbEQsR0FFUnRxQyxJQUEwQnBiLEtBQUFKLEVBQUFXLE1BQUFQLEtBQUFRLFlBdUJyQyxPQTVCRTZhLElBQVNxcUMsRUFBQTlsRCxHQVFYOGxELEVBQUFsbUQsVUFBQXlmLHNCQUFBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQTZ1QixpQkFBQTd1QixFQUFBN0osU0FHQXF3QyxFQUFBbG1ELFVBQUFvRCxPQUFBLFdBQ0EsSUFBQW1nQixFQUFBL2lCLEtBQUFuQixNQUNBa3ZDLEVBQUFockIsRUFBQWdyQixnQkFDQTE0QixFQUFBME4sRUFBQTFOLFFBQ0F4VyxFQUFnQm1rQixLQUF3QkQsR0FBQSw4QkFFeEMsT0FBQWdyQixHQUEyQnp5QixFQUFBdmQsRUFBS1EsU0FBQWl5QixNQUFBM3hCLEVBQUFSLFVBQUEsSUFDaENnWCxHQUFBMDRCLElBQ0FsdkMsRUFBQXNuQixXQUFBLElBQUE0bkIsR0FFYXp5QixFQUFBdmQsRUFBS2lGLGNBQUEsTUFBQW5FLElBR1B5YyxFQUFBdmQsRUFBS1EsU0FBQTJDLEtBQUFyQyxFQUFBUixXQUdoQnFuRCxFQTdCaUIsQ0E4QmY3a0MsRUFBQSxXQUVGNGtDLEdBQWF0a0QsV0FDYjlDLFNBQVlrZCxFQUFBeGQsRUFBU2dZLElBQ3JCb1EsVUFBYTVLLEVBQUF4ZCxFQUFTMGQsT0FDdEJwRyxRQUFXa0csRUFBQXhkLEVBQVMrWCxLQUNwQmk0QixnQkFBbUJ4eUIsRUFBQXhkLEVBQVMwZCxRQUliLElBQUFrcUMsR0FBQSxHQ3hDWEMsR0FBVSxTQUFBaG1ELEdBR2QsU0FBQWltRCxJQUdBLE9BRkkxcUMsSUFBZW5iLEtBQUE2bEQsR0FFUnpxQyxJQUEwQnBiLEtBQUFKLEVBQUFXLE1BQUFQLEtBQUFRLFlBMkJyQyxPQWhDRTZhLElBQVN3cUMsRUFBQWptRCxHQVFYaW1ELEVBQUFybUQsVUFBQW9ELE9BQUEsV0FDQSxJQUFBL0QsRUFBQW1CLEtBQUFuQixNQUNBc25CLEVBQUF0bkIsRUFBQXNuQixVQUlBLE9BSEF0bkIsRUFBQXdXLFVBQ0E4USxHQUFBLElBQUF0bkIsRUFBQWt2QyxpQkFFV3p5QixFQUFBdmQsRUFBS2lGLGNBQ2hCLE9BRUFtakIsWUFDQU0sYUFBQTVuQixFQUFBNG5CLGFBQ0FDLGFBQUE3bkIsRUFBQTZuQixhQUNBakYsWUFBQTVpQixFQUFBNGlCLFlBQ0Fxa0MsYUFBQWpuRCxFQUFBaW5ELGFBQ0F2c0MsTUFBQTFhLEVBQUEwYSxPQUVNK0IsRUFBQXZkLEVBQUtpRixjQUNIMmlELElBQ0N4L0IsVUFBQXRuQixFQUFBNmdCLFVBQUEsV0FBQXJLLFFBQUF4VyxFQUFBd1csU0FDVHhXLEVBQUFSLFlBS0F3bkQsRUFqQ2MsQ0FrQ1pobEMsRUFBQSxXQUVGK2tDLEdBQVV6a0QsV0FDVjRzQyxnQkFBbUJ4eUIsRUFBQXhkLEVBQVMwZCxPQUM1QjBLLFVBQWE1SyxFQUFBeGQsRUFBUzBkLE9BQ3RCaUUsVUFBYW5FLEVBQUF4ZCxFQUFTMGQsT0FDdEJnTCxhQUFnQmxMLEVBQUF4ZCxFQUFTaEIsS0FDekIycEIsYUFBZ0JuTCxFQUFBeGQsRUFBU2hCLEtBQ3pCMGtCLFlBQWVsRyxFQUFBeGQsRUFBU2hCLEtBQ3hCK29ELGFBQWdCdnFDLEVBQUF4ZCxFQUFTaEIsS0FDekJzQixTQUFZa2QsRUFBQXhkLEVBQVNnWSxLQUlOLElBQUFnd0MsR0FBQSxHQzFDWEMsR0FBSyxTQUFBcG1ELEdBR1QsU0FBQXFtRCxFQUFBcG5ELEdBQ0lzYyxJQUFlbmIsS0FBQWltRCxHQUVuQixJQUFBamtELEVBQWdCb1osSUFBMEJwYixLQUFBSixFQUFBTSxLQUFBRixLQUFBbkIsSUFhMUMsT0FYSXFuRCxHQUFnQmhtRCxLQUFBOEIsR0FFcEJBLEVBQUFLLE9BRUE4akQsZ0JBQUEsRUFDQUMsaUJBQUE5cEQsRUFDQStwRCxrQkFBQS9wRCxHQUdBMEYsRUFBQXNrRCxhQUF5QnpvQyxFQUFPNVosS0FBQWpDLEVBQUEsaUJBQ2hDQSxFQUFBdWtELGFBQXlCMW9DLEVBQU81WixLQUFBakMsRUFBQSxpQkFDaENBLEVBOE5BLE9BaFBFcVosSUFBUzRxQyxFQUFBcm1ELEdBcUJYcW1ELEVBQUF6bUQsVUFBQXVmLGtCQUFBLFdBQ0EvZSxLQUFBd21ELFNBQUF4bUQsS0FBQW9sQixrQkFDQXBsQixLQUFBeW1ELGtCQUdBUixFQUFBem1ELFVBQUEyZixtQkFBQSxXQUNBbmYsS0FBQXltRCxrQkFNQVIsRUFBQXptRCxVQUFBNGxCLGdCQUFBLFdBQ0EsT0FBV1AsRUFBQTltQixFQUFRK21CLFlBQUE5a0IsS0FBQTBtRCxnQkFPbkJULEVBQUF6bUQsVUFBQW1uRCxzQkFBQSxXQUNBLElBQUE5bkQsRUFBQW1CLEtBQUFuQixNQUNBeW1CLEVBQUF6bUIsRUFBQStuRCxtQkFDQXJoQyxFQUFBMW1CLEVBQUFnb0QsY0FJQSxPQUhBdmhDLEdBQUFDLElBQ0FELEVBQUF6bUIsRUFBQTZnQixVQUFBLElBQUE2RixHQUVBRCxHQUdBMmdDLEVBQUF6bUQsVUFBQTI0QyxrQkFBQSxXQUNBLElBQUF0NUMsRUFBQW1CLEtBQUFuQixNQUNBeW1CLEVBQUF6bUIsRUFBQXltQixlQUlBLE9BSEFBLEdBQUF6bUIsRUFBQTBtQixZQUNBRCxFQUFBem1CLEVBQUE2Z0IsVUFBQSxJQUFBN2dCLEVBQUEwbUIsV0FFQUQsR0FHQTJnQyxFQUFBem1ELFVBQUFzbkQsYUFBQSxTQUFBQyxHQUNBLE9BQUEvbUQsS0FBQW5CLE1BQUE2Z0IsVUFBQSxJQUFBMWYsS0FBQW5CLE1BQUFzbkIsVUFBQSxJQUFBNGdDLEdBR0FkLEVBQUF6bUQsVUFBQWs2QixnQkFBQSxXQUNBLElBQUEvMkIsRUFBQTNDLEtBRUFzbUQsRUFBQXRtRCxLQUFBc21ELGFBQ0FsOUIsRUFBQXBwQixLQUFBcUMsTUFDQThqRCxFQUFBLzhCLEVBQUErOEIsZUFDQUUsRUFBQWo5QixFQUFBaTlCLGFBQ0FELEVBQUFoOUIsRUFBQWc5QixZQUNBcmpDLEVBQUEvaUIsS0FBQW5CLE1BQ0F1N0IsRUFBQXJYLEVBQUFxWCxNQUNBL2tCLEVBQUEwTixFQUFBMU4sUUFDQXFLLEVBQUFxRCxFQUFBckQsVUFDQW5HLEVBQUF3SixFQUFBeEosTUFDQXl0QyxFQUFBamtDLEVBQUFpa0Msc0JBQ0Fuc0IsRUFBQTlYLEVBQUE4WCxtQkFDQW9zQixFQUFBbGtDLEVBQUFra0MsUUFDQTVvRCxFQUFBMGtCLEVBQUExa0IsU0FDQW9vQixFQUFBMUQsRUFBQTBELGFBQ0FDLEVBQUEzRCxFQUFBMkQsYUFDQWpGLEVBQUFzQixFQUFBdEIsWUFDQXFrQyxFQUFBL2lDLEVBQUEraUMsYUFFQTMvQixFQUFBbm1CLEtBQUE4bUQsYUFBQTltRCxLQUFBK21ELHVCQUFBQyxFQUFBNXNCLElBQ0EyVCxFQUFBcnVCLEVBQUEsVUFFQXJLLElBQ0FyVixLQUFBK21ELHNCQUFBLE1BR0EsSUFBQUcsS0FDQUQsS0FFQSxJQUFBQSxFQUFBdmlELFFBQUEsVUFDQXdpRCxFQUFBOTdDLE9BQUFpN0MsR0FDTyxJQUFBWSxFQUFBdmlELFFBQUEsZUFDUHdpRCxFQUFBQyxVQUFBZCxJQUVBLElBQUFZLEVBQUF2aUQsUUFBQSxTQUNBd2lELEVBQUEvN0MsTUFBQWk3QyxHQUNPLElBQUFhLEVBQUF2aUQsUUFBQSxjQUNQd2lELEVBQUFuakIsU0FBQXFpQixHQUlBRCxJQUNBZSxFQUFBeGEsV0FBQSxTQUNBL2xDLFdBQUEsV0FDQWhFLEVBQUF5a0QsZUFDQXprRCxFQUFBeWtELGNBQUFsRCxjQUVTLEtBSVQsSUFFQW1ELEdBQ0FsaEMsWUFDQXpHLFlBQ0E1YyxJQUFBd2pELEVBQ0E3L0IsZUFDQUMsZUFDQWpGLGNBQ0Fxa0MsZUFDQXZzQyxNQVZtQnlILE9BQVdrbUMsRUFBQTN0QyxFQUFBdlosS0FBQXNuRCxtQkFZOUIsT0FBQXpzQixFQUNhdmYsRUFBQXZkLEVBQUtpRixjQUNWa3ZCLEdBQUEsR0FFUkUsVUFBQSxHQUNBbTFCLFdBQUEsRUFDQTNlLGtCQUFBLEVBQ0F0akIsZUFBQXRsQixLQUFBbTRDLHFCQUVBOWlDLEVBQWtCaUcsRUFBQXZkLEVBQUtpRixjQUNid2lELElBRVY3bkQsT0FBQXFDLEtBQUF3bkQsaUJBQ0Fwb0QsSUFBQSxRQUNBMEQsSUFBQTlDLEtBQUF1bUQsYUFDQW5DLHFCQUFBLEVBQ0FocUIsUUFDQStwQixRQUFBbmtELEtBQUFta0QsU0FFVTdvQyxFQUFBdmQsRUFBS2lGLGNBQ0graUQsR0FDQS9rQyxLQUNaM0wsU0FBQSxHQUNhZ3lDLEdBQ2JocEQsSUFFQSxNQUlXaWQsRUFBQXZkLEVBQUtpRixjQUNWa3ZCLEdBQUEsR0FFTkUsVUFBQSxHQUNBbTFCLFdBQUEsRUFDQTNlLGtCQUFBLEVBQ0F0akIsZUFBQXRsQixLQUFBbTRDLG9CQUNBclAsU0FBQSxZQUVNeHRCLEVBQUF2ZCxFQUFLaUYsY0FDSHdpRCxJQUVSN25ELE9BQUFxQyxLQUFBd25ELGlCQUNBcG9ELElBQUEsUUFDQTBELElBQUE5QyxLQUFBdW1ELGFBQ0FuQyxxQkFBQSxFQUNBcUQsU0FBQXB5QyxFQUNBa3dDLGVBQTBCbHdDLFFBQUEsWUFDMUJvSSxVQUFBcEksRUFDQStrQixRQUNBK3BCLFFBQUFua0QsS0FBQW1rRCxTQUVRN29DLEVBQUF2ZCxFQUFLaUYsY0FDSCtpRCxHQUNBL2tDLEtBQ1Yrc0IsbUJBQ1dzWixHQUNYaHBELE1BTUE0bkQsRUFBQXptRCxVQUFBOG5ELGVBQUEsV0FDQSxJQUFBL3RDLEtBQ0ExYSxFQUFBbUIsS0FBQW5CLE1BSUEsWUFIQXZDLElBQUF1QyxFQUFBc3JDLFNBQ0E1d0IsRUFBQTR3QixPQUFBdHJDLEVBQUFzckMsUUFFQTV3QixHQUdBMHNDLEVBQUF6bUQsVUFBQWtvRCxlQUFBLFdBQ0EsSUFBQTdvRCxFQUFBbUIsS0FBQW5CLE1BQ0E4b0QsT0FBQSxFQUNBLEdBQUE5b0QsRUFBQStvRCxLQUFBLENBQ0EsSUFBQUMsRUFBQTduRCxLQUFBMm1ELHdCQUNBZ0IsRUFBb0Jyc0MsRUFBQXZkLEVBQUtpRixjQUFlMmlELElBQ3hDcHNDLE1BQUF2WixLQUFBc25ELGlCQUNBbG9ELElBQUEsT0FDQSttQixVQUFBdG5CLEVBQUE2Z0IsVUFBQSxRQUNBcXVCLGdCQUFBbHZDLEVBQUE2Z0IsVUFBQSxlQUNBckssUUFBQXhXLEVBQUF3VyxVQUVBd3lDLElBQ0FGLEVBQXNCcnNDLEVBQUF2ZCxFQUFLaUYsY0FDakJrdkIsR0FBQSxHQUVWOXlCLElBQUEsT0FDQTBwQyxTQUFBLFVBQ0FGLGtCQUFBLEVBQ0F4VyxVQUFBLEdBQ0E5TSxlQUFBdWlDLEdBRUFGLElBSUEsT0FBQUEsR0FHQTFCLEVBQUF6bUQsVUFBQW9ELE9BQUEsV0FDQSxPQUFXMFksRUFBQXZkLEVBQUtpRixjQUNoQixNQUNBLEtBQ0FoRCxLQUFBMG5ELGlCQUNBMW5ELEtBQUEwNUIsb0JBSUF1c0IsRUFqUFMsQ0FrUFBwbEMsRUFBQSxXQUVGbWxDLEdBQUs3a0QsV0FDTGtVLFFBQVdrRyxFQUFBeGQsRUFBUytYLEtBQ3BCeUQsTUFBU2dDLEVBQUF4ZCxFQUFTNmpCLE9BQ2xCb2xDLHNCQUF5QnpyQyxFQUFBeGQsRUFBU2hCLEtBQ2xDb25ELFFBQVc1b0MsRUFBQXhkLEVBQVNoQixLQUNwQitxRCxlQUFrQnZzQyxFQUFBeGQsRUFBU2hCLEtBQzNCcTlCLE1BQVM3ZSxFQUFBeGQsRUFBU2dZLElBQ2xCOGtCLG1CQUFzQnRmLEVBQUF4ZCxFQUFTK1gsS0FDL0JxUSxVQUFhNUssRUFBQXhkLEVBQVMwZCxPQUN0QmlFLFVBQWFuRSxFQUFBeGQsRUFBUzBkLE9BQ3RCZ0wsYUFBZ0JsTCxFQUFBeGQsRUFBU2hCLEtBQ3pCMnBCLGFBQWdCbkwsRUFBQXhkLEVBQVNoQixLQUN6QjBrQixZQUFlbEcsRUFBQXhkLEVBQVNoQixLQUN4QitvRCxhQUFnQnZxQyxFQUFBeGQsRUFBU2hCLEtBQ3pCa3FELFFBQVcxckMsRUFBQXhkLEVBQVMwZCxPQUNwQnBkLFNBQVlrZCxFQUFBeGQsRUFBU3VRLEtBQ3JCeTFDLE1BQVN4b0MsRUFBQXhkLEVBQVNsQixPQUNsQmdVLE1BQVcwSyxFQUFBeGQsRUFBUzJkLE9BQ3BCekssTUFBV3NLLEVBQUF4ZCxFQUFTMmQsVUFJcEIsSUFBSXdxQyxHQUFnQixXQUNwQixJQUFBN2xCLEVBQUFyZ0MsS0FFQUEsS0FBQW1rRCxRQUFBLFNBQUE0RCxFQUFBM3RCLEdBQ0EsSUFBQXY3QixFQUFBd2hDLEVBQUF4aEMsTUFDQWtvRCxFQUFBbG9ELEVBQUFtb0Qsc0JBQUE1c0IsR0FHQWlHLEVBQUEwbUIsNEJBQ0ExbUIsRUFBQTBtQix3QkFDQWdCLEVBQUE1aEMsVUFBQWthLEVBQUF5bUIsYUFBQUMsSUFFQWxvRCxFQUFBc2xELFFBQUE0RCxFQUFBM3RCLElBR0FwNkIsS0FBQXltRCxlQUFBLFdBQ0EsSUFBQWgzQixFQUFBNFEsRUFBQXhoQyxNQUNBb29ELEVBQUF4M0IsRUFBQXczQixRQUNBYSxFQUFBcjRCLEVBQUFxNEIsZUFDQXp5QyxFQUFBb2EsRUFBQXBhLFFBQ0FrYyxFQUFBOE8sRUFBQWgrQixNQUNBOGpELEVBQUE1MEIsRUFBQTQwQixlQUNBRSxFQUFBOTBCLEVBQUE4MEIsYUFDQUQsRUFBQTcwQixFQUFBNjBCLFlBR0EsR0FBQWEsR0FBQTV4QyxFQUFBLENBT0EsSUFBQTJ5QyxFQUFBRixJQUNBLEdBQUFFLEVBQUEsQ0FFQSxJQUFBNThDLEVBQUE0OEMsRUFBQXJ3QixhQUNBeHNCLEVBQUE2OEMsRUFBQWpqQyxZQUVBc2hDLElBQUFqN0MsR0FBQWc3QyxJQUFBajdDLEdBQUFnN0MsR0FDQTlsQixFQUFBcGpDLFVBQ0FrcEQsZ0JBQUEsRUFDQUUsYUFBQWo3QyxFQUNBZzdDLFlBQUFqN0MsVUFoQkFnN0MsR0FDQTlsQixFQUFBcGpDLFVBQXlCa3BELGdCQUFBLEtBb0J6Qm5tRCxLQUFBaW9ELGlCQUFBLFdBQ0EsT0FBQTVuQixFQUFBeGhDLE1BQUFpcEQsa0JBR0E5bkQsS0FBQXduRCxlQUFBLFdBQ0EsSUFBQXpELEVBQUExakIsRUFBQXhoQyxNQUFBa2xELE1BRUEsT0FBQUEsR0FHQTFqQixFQUFBNG5CLG1CQUllQyxHQUFBLEdDclVmLFNBQUE1Z0MsTUFVQSxJQUFBNmdDLElBQUEseUdBRUFDLEtBQW9CbHFDLEVBQUEsYUFFcEI5YSxJQUNBaWxELFVBQWE5c0MsRUFBQXhkLEVBQVNsQixPQUN0QnlyRCxpQkFBc0Ivc0MsRUFBQXhkLEVBQVNoQixRQUkzQndyRCxHQUFPLFNBQUFoMEMsR0FHWCxTQUFBaTBDLEVBQUEzcEQsR0FDSXNjLElBQWVuYixLQUFBd29ELEdBRW5CLElBQUF4bUQsRUFBZ0JvWixJQUEwQnBiLEtBQUF1VSxFQUFBclUsS0FBQUYsS0FBQW5CLElBRXRDNHBELEdBQWdCdm9ELEtBQUE4QixHQUVwQixJQUFBd2lCLE9BQUEsRUFZQSxPQVZBQSxFQURBLGlCQUFBM2xCLElBQ0FBLEVBQUEybEIsZUFFQTNsQixFQUFBKzdCLG9CQUdBNTRCLEVBQUEwbUQsaUJBQUFsa0MsRUFFQXhpQixFQUFBSyxPQUNBbWlCLGdCQUVBeGlCLEVBaVdBLE9BdFhFcVosSUFBU210QyxFQUFBajBDLEdBd0JYaTBDLEVBQUFocEQsVUFBQW1wRCxnQkFBQSxXQUNBLE9BQ0FOLFdBQ0FDLGlCQUFBdG9ELEtBQUFzb0Qsb0JBS0FFLEVBQUFocEQsVUFBQTRsQyxtQkFBQSxXQUNBLElBQUF6aUMsRUFBQTNDLEtBRUFtb0QsR0FBQTNwRCxRQUFBLFNBQUFrWixHQUNBL1UsRUFBQSxPQUFBK1UsR0FBQSxTQUFBelosR0FDQTBFLEVBQUFpbUQsV0FBQWx4QyxFQUFBelosT0FLQXVxRCxFQUFBaHBELFVBQUF1ZixrQkFBQSxXQUNBL2UsS0FBQW1mLHVCQUNBcUYsYUFBQXhrQixLQUFBcUMsTUFBQW1pQixnQkFJQWdrQyxFQUFBaHBELFVBQUFxcEQsMEJBQUEsU0FBQXIwQyxHQUNBLElBQUFnUSxFQUFBaFEsRUFBQWdRLGtCQUVBbG9CLElBQUFrb0IsR0FDQXhrQixLQUFBL0MsVUFDQXVuQixrQkFLQWdrQyxFQUFBaHBELFVBQUEyZixtQkFBQSxTQUFBMnBDLEVBQUF2bUQsR0FDQSxJQUFBMUQsRUFBQW1CLEtBQUFuQixNQUNBd0QsRUFBQXJDLEtBQUFxQyxNQWdCQSxHQVZBK2xELElBQ0Fwb0QsS0FBQWtWLGdCQUFBLEtBTkEsV0FDQTNTLEVBQUFpaUIsZUFBQW5pQixFQUFBbWlCLGNBQ0EzbEIsRUFBQTY3Qix3QkFBQXI0QixFQUFBbWlCLGdCQU9BeGtCLEtBQUEwb0QsaUJBQUFubUQsRUFBQWlpQixhQU1BbmlCLEVBQUFtaUIsYUFBQSxDQUNBLElBQUF1a0MsT0FBQSxFQW1CQSxPQWxCQS9vRCxLQUFBZ3BELHNCQUFBaHBELEtBQUFpcEQsa0JBQUFqcEQsS0FBQWtwRCx3QkFDQUgsRUFBQWxxRCxFQUFBODZDLGNBQ0EzNUMsS0FBQWdwRCxvQkFBbUMvc0QsT0FBQTZNLEVBQUEsRUFBQTdNLENBQWdCOHNELEVBQUEsWUFBQS9vRCxLQUFBbXBELGtCQUduRG5wRCxLQUFBb3BELHNCQUNBTCxLQUFBbHFELEVBQUE4NkMsY0FDQTM1QyxLQUFBb3BELG9CQUFtQ250RCxPQUFBNk0sRUFBQSxFQUFBN00sQ0FBZ0I4c0QsRUFBQSxhQUFBL29ELEtBQUFtcEQsbUJBR25EbnBELEtBQUFxcEQsNEJBQUFycEQsS0FBQWtwRCx3QkFDQUgsS0FBQWxxRCxFQUFBODZDLGNBQ0EzNUMsS0FBQXFwRCwyQkFBMENwdEQsT0FBQTZNLEVBQUEsRUFBQTdNLENBQWdCOHNELEVBQUEsU0FBQS9vRCxLQUFBc3BELDJCQUcxRHRwRCxLQUFBdXBELDRCQUFBdnBELEtBQUFrcEQsd0JBQ0FscEQsS0FBQXVwRCwyQkFBMEN0dEQsT0FBQTZNLEVBQUEsRUFBQTdNLENBQWdCbUssT0FBQSxPQUFBcEcsS0FBQXNwRCxzQkFLMUR0cEQsS0FBQXdwRCx1QkFHQWhCLEVBQUFocEQsVUFBQTRmLHFCQUFBLFdBQ0FwZixLQUFBeXBELGtCQUNBenBELEtBQUF3cEQsc0JBQ0Fud0MsYUFBQXJaLEtBQUEwcEQsbUJBR0FsQixFQUFBaHBELFVBQUE0bEIsZ0JBQUEsV0FFQSxPQUFBcGxCLEtBQUEwVixZQUFBMVYsS0FBQTBWLFdBQUEwUCxnQkFDQXBsQixLQUFBMFYsV0FBQTBQLGtCQUVBLE1BR0FvakMsRUFBQWhwRCxVQUFBbXFELGNBQUEsV0FDQSxJQUFBOXFELEVBQUFtQixLQUFBbkIsTUFDQW1sQixFQUFBbmxCLEVBQUFtbEIsZUFDQU8sRUFBQTFsQixFQUFBMGxCLFdBQ0FOLEVBQUFwbEIsRUFBQW9sQixrQkFFQSxPQUFBRCxHQUFBQyxFbkJ2Sk8sU0FBQUEsRUFBQTJsQyxFQUFBeHZCLEdBQ1AsSUFBQXl2QixFQUFBNWxDLEVBQUEybEMsT0FDQSxPQUFTNW9DLE9BQVc2b0MsRUFBQXp2QixHbUJzSlAwdkIsQ0FBcUI3bEMsRUFBQUQsRUFBQU8sR0FFbENBLEdBT0Fpa0MsRUFBQWhwRCxVQUFBdXFELGdCQUFBLFNBQUF2bEMsRUFBQWhWLEdBQ0EsSUFBQXc2QyxFQUFBaHFELEtBQUFuQixNQUFBbXJELFdBR0FocUQsS0FBQXlwRCxrQkFFQXpwRCxLQUFBcUMsTUFBQW1pQixtQkFDQSxpQkFBQXhrQixLQUFBbkIsT0FDQW1CLEtBQUEvQyxVQUF1QnVuQixpQkFFdkJ4a0IsS0FBQW5CLE1BQUF1bEIscUJBQUFJLElBSUF3bEMsR0FBQXg2QyxHQUNBeFAsS0FBQWlxRCxTQUFBejZDLElBSUFnNUMsRUFBQWhwRCxVQUFBMHFELHFCQUFBLFNBQUE3MEMsRUFBQTgwQyxFQUFBMzZDLEdBQ0EsSUFBQTZ3QixFQUFBcmdDLEtBRUF5SCxFQUFBLElBQUEwaUQsRUFFQSxHQURBbnFELEtBQUF5cEQsa0JBQ0FoaUQsRUFBQSxDQUNBLElBQUFzOEMsRUFBQXYwQyxHQUEyQnFCLE1BQUFyQixFQUFBcUIsTUFBQUksTUFBQXpCLEVBQUF5QixPQUF5QyxLQUNwRWpSLEtBQUFvcUQsV0FBQXpqRCxXQUFBLFdBQ0EwNUIsRUFBQTBwQixnQkFBQTEwQyxFQUFBMHVDLEdBQ0ExakIsRUFBQW9wQixtQkFDT2hpRCxRQUVQekgsS0FBQStwRCxnQkFBQTEwQyxFQUFBN0YsSUFJQWc1QyxFQUFBaHBELFVBQUFpcUQsZ0JBQUEsV0FDQXpwRCxLQUFBb3FELGFBQ0Evd0MsYUFBQXJaLEtBQUFvcUQsWUFDQXBxRCxLQUFBb3FELFdBQUEsT0FJQTVCLEVBQUFocEQsVUFBQWdxRCxvQkFBQSxXQUNBeHBELEtBQUFncEQsc0JBQ0FocEQsS0FBQWdwRCxvQkFBQXI2QyxTQUNBM08sS0FBQWdwRCxvQkFBQSxNQUdBaHBELEtBQUFxcEQsNkJBQ0FycEQsS0FBQXFwRCwyQkFBQTE2QyxTQUNBM08sS0FBQXFwRCwyQkFBQSxNQUdBcnBELEtBQUF1cEQsNkJBQ0F2cEQsS0FBQXVwRCwyQkFBQTU2QyxTQUNBM08sS0FBQXVwRCwyQkFBQSxNQUdBdnBELEtBQUFvcEQsc0JBQ0FwcEQsS0FBQW9wRCxvQkFBQXo2QyxTQUNBM08sS0FBQW9wRCxvQkFBQSxPQUlBWixFQUFBaHBELFVBQUE2cUQsZ0JBQUEsU0FBQTc2QyxHQUNBLElBQUE4NkMsRUFBQXRxRCxLQUFBbkIsTUFBQVIsU0FBQVEsTUFDQUEsRUFBQW1CLEtBQUFuQixNQUNBLE9BQUF5ckQsRUFBQTk2QyxJQUFBM1EsRUFBQTJRLEdBQ0F4UCxLQUFBLE9BQUF3UCxHQUVBODZDLEVBQUE5NkMsSUFBQTNRLEVBQUEyUSxJQUdBZzVDLEVBQUFocEQsVUFBQStxRCxjQUFBLFdBQ0EsSUFBQXhuQyxFQUFBL2lCLEtBQUFuQixNQUNBNDdCLEVBQUExWCxFQUFBMFgsT0FDQTFXLEVBQUFoQixFQUFBZ0IsV0FFQSxXQUFBMFcsRUFBQS8xQixRQUFBLGVBQUFxZixFQUFBcmYsUUFBQSxVQUdBOGpELEVBQUFocEQsVUFBQTBwRCxvQkFBQSxXQUNBLElBQUF6NUIsRUFBQXp2QixLQUFBbkIsTUFDQTQ3QixFQUFBaEwsRUFBQWdMLE9BQ0ExVyxFQUFBMEwsRUFBQTFMLFdBRUEsV0FBQTBXLEVBQUEvMUIsUUFBQSxxQkFBQXFmLEVBQUFyZixRQUFBLGdCQUdBOGpELEVBQUFocEQsVUFBQXlwRCxjQUFBLFdBQ0EsSUFBQXg0QixFQUFBendCLEtBQUFuQixNQUNBNDdCLEVBQUFoSyxFQUFBZ0ssT0FDQTdXLEVBQUE2TSxFQUFBN00sV0FFQSxXQUFBNlcsRUFBQS8xQixRQUFBLGVBQUFrZixFQUFBbGYsUUFBQSxVQUdBOGpELEVBQUFocEQsVUFBQWdyRCxtQkFBQSxXQUNBLElBQUEzZixFQUFBN3FDLEtBQUFuQixNQUNBNDdCLEVBQUFvUSxFQUFBcFEsT0FDQTFXLEVBQUE4bUIsRUFBQTltQixXQUVBLFdBQUEwVyxFQUFBLzFCLFFBQUEsZUFBQXFmLEVBQUFyZixRQUFBLGVBR0E4akQsRUFBQWhwRCxVQUFBaXJELG1CQUFBLFdBQ0EsSUFBQTNmLEVBQUE5cUMsS0FBQW5CLE1BQ0E0N0IsRUFBQXFRLEVBQUFyUSxPQUNBN1csRUFBQWtuQixFQUFBbG5CLFdBRUEsV0FBQTZXLEVBQUEvMUIsUUFBQSxlQUFBa2YsRUFBQWxmLFFBQUEsZUFHQThqRCxFQUFBaHBELFVBQUFrckQsY0FBQSxXQUNBLElBQUExZixFQUFBaHJDLEtBQUFuQixNQUNBNDdCLEVBQUF1USxFQUFBdlEsT0FDQTFXLEVBQUFpbkIsRUFBQWpuQixXQUVBLFdBQUEwVyxFQUFBLzFCLFFBQUEsZUFBQXFmLEVBQUFyZixRQUFBLFVBR0E4akQsRUFBQWhwRCxVQUFBbXJELGFBQUEsV0FDQSxJQUFBemYsRUFBQWxyQyxLQUFBbkIsTUFDQTQ3QixFQUFBeVEsRUFBQXpRLE9BQ0E3VyxFQUFBc25CLEVBQUF0bkIsV0FFQSxXQUFBNlcsRUFBQS8xQixRQUFBLGVBQUFrZixFQUFBbGYsUUFBQSxTQUdBOGpELEVBQUFocEQsVUFBQXFwQixnQkFBQSxXQUNBN29CLEtBQUFxQyxNQUFBbWlCLGNBQUF4a0IsS0FBQTBWLFlBQUExVixLQUFBMFYsV0FBQTB4QyxlQUNBcG5ELEtBQUEwVixXQUFBMHhDLGNBQUFsRCxjQUlBc0UsRUFBQWhwRCxVQUFBb3BELFdBQUEsU0FBQWozQyxFQUFBMVQsR0FDQSxJQUFBMnNELEVBQUE1cUQsS0FBQW5CLE1BQUFSLFNBQUFRLE1BQUE4UyxHQUNBaTVDLEdBQ0FBLEVBQUEzc0QsR0FFQSxJQUFBSCxFQUFBa0MsS0FBQW5CLE1BQUE4UyxHQUNBN1QsR0FDQUEsRUFBQUcsSUFJQXVxRCxFQUFBaHBELFVBQUFxckQsTUFBQSxXQUNBN3FELEtBQUErcEQsaUJBQUEsSUFHQXZCLEVBQUFocEQsVUFBQW9ELE9BQUEsV0FDQSxJQUFBMjlCLEVBQUF2Z0MsS0FFQXdrQixFQUFBeGtCLEtBQUFxQyxNQUFBbWlCLGFBQ0FzbUMsRUFBQTlxRCxLQUFBbkIsTUFDQVIsRUFBQXlzRCxFQUFBenNELFNBQ0FrWCxFQUFBdTFDLEVBQUF2MUMsWUFDQXkwQyxFQUFBYyxFQUFBZCxXQUNBN2pDLEVBQUEya0MsRUFBQTNrQyxVQUVBbkssRUFBZ0JWLEVBQUF2ZCxFQUFLUSxTQUFBMkMsS0FBQTdDLEdBQ3JCcXhDLEdBQXlCdHdDLElBQUEsV0FFekJZLEtBQUFrcEQsc0JBQ0F4WixFQUFBcWIsY0FBQS9xRCxLQUFBK3FELGNBRUFyYixFQUFBcWIsY0FBQS9xRCxLQUFBcXFELGdCQUFBLGlCQUdBcnFELEtBQUFpcEQsaUJBQUFqcEQsS0FBQXVxRCxpQkFDQTdhLEVBQUF6dkIsUUFBQWpnQixLQUFBaWdCLFFBQ0F5dkIsRUFBQWp1QixZQUFBemhCLEtBQUF5aEIsWUFDQWl1QixFQUFBb1csYUFBQTlsRCxLQUFBOGxELGVBRUFwVyxFQUFBenZCLFFBQUFqZ0IsS0FBQXFxRCxnQkFBQSxXQUNBM2EsRUFBQWp1QixZQUFBemhCLEtBQUFxcUQsZ0JBQUEsZUFDQTNhLEVBQUFvVyxhQUFBOWxELEtBQUFxcUQsZ0JBQUEsaUJBRUFycUQsS0FBQXdxRCxzQkFDQTlhLEVBQUFqcEIsYUFBQXptQixLQUFBeW1CLGFBQ0F1akMsSUFDQXRhLEVBQUFzYixZQUFBaHJELEtBQUFnckQsY0FHQXRiLEVBQUFqcEIsYUFBQXptQixLQUFBcXFELGdCQUFBLGdCQUVBcnFELEtBQUF5cUQscUJBQ0EvYSxFQUFBaHBCLGFBQUExbUIsS0FBQTBtQixhQUVBZ3BCLEVBQUFocEIsYUFBQTFtQixLQUFBcXFELGdCQUFBLGdCQUVBcnFELEtBQUEwcUQsaUJBQUExcUQsS0FBQTJxRCxnQkFDQWpiLEVBQUFudUIsUUFBQXZoQixLQUFBdWhCLFFBQ0FtdUIsRUFBQW5wQixPQUFBdm1CLEtBQUF1bUIsU0FFQW1wQixFQUFBbnVCLFFBQUF2aEIsS0FBQXFxRCxnQkFBQSxXQUNBM2EsRUFBQW5wQixPQUFBdm1CLEtBQUFxcUQsZ0JBQUEsV0FHQSxJQUFBWSxFQUE0QnZtQyxJQUFVMUksS0FBQW5kLE9BQUFtZCxFQUFBbmQsTUFBQXNuQixhQUN0QzhrQyxJQUNBdmIsRUFBQXZwQixVQUFBOGtDLEdBRUEsSUFBQTV4QixFQUFrQi9kLEVBQUF2ZCxFQUFLOHdCLGFBQUE3UyxFQUFBMHpCLEdBRXZCLElBQUEwWSxHQUNBLE9BQWE5c0MsRUFBQXZkLEVBQUtpRixjQUNWc1IsRUFBQSxHQUVSbUIsT0FBQXpWLEtBQ0FxVixRQUFBbVAsRUFDQTVPLFdBQUEsRUFDQUwsY0FDQUQsYUFBQXRWLEtBQUFzVixhQUNBRSxhQUFBeFYsS0FBQXdWLGNBRUEsU0FBQXFYLEdBQ0EsSUFBQTNYLEVBQUEyWCxFQUFBM1gsZ0JBR0EsT0FEQXFyQixFQUFBcnJCLGtCQUNBbWtCLElBS0EsSUFBQTZ4QixPQUFBLEVBY0EsT0FaQTFtQyxHQUFBeGtCLEtBQUEwVixZQUFBSCxLQUNBMjFDLEVBQWU1dkMsRUFBQXZkLEVBQUtpRixjQUNaaVQsRUFBQSxHQUVSN1csSUFBQSxTQUNBb1csYUFBQXhWLEtBQUF3VixhQUNBWSxVQUFBcFcsS0FBQW1yRCxvQkFFQW5yRCxLQUFBc1Ysa0JBSUErakIsRUFBQTZ4QixJQUdBMUMsRUF2WFcsQ0F3WFRsdEMsRUFBQXZkLEVBQUtnRCxXQUVQd25ELEdBQU9wbkQsV0FDUDlDLFNBQVlrZCxFQUFBeGQsRUFBU2dZLElBQ3JCMGtCLE9BQVVsZixFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTMGQsT0FBU0YsRUFBQXhkLEVBQVM2bUIsUUFBU3JKLEVBQUF4ZCxFQUFTMGQsVUFDNUVzSSxXQUFjeEksRUFBQXhkLEVBQVNnWSxJQUN2QjZOLFdBQWNySSxFQUFBeGQsRUFBU2dZLElBQ3ZCcTFDLDJCQUE4Qjd2QyxFQUFBeGQsRUFBU2dZLElBQ3ZDcU8scUJBQXdCN0ksRUFBQXhkLEVBQVNoQixLQUNqQzI5Qix3QkFBMkJuZixFQUFBeGQsRUFBU2hCLEtBQ3BDdW5CLE1BQVMvSSxFQUFBeGQsRUFBU3lkLFdBQVlELEVBQUF4ZCxFQUFTdVEsS0FBT2lOLEVBQUF4ZCxFQUFTaEIsT0FBQUMsV0FDdkQ2bUIsV0FBY3RJLEVBQUF4ZCxFQUFTNmpCLE9BQ3ZCbEMsVUFBYW5FLEVBQUF4ZCxFQUFTMGQsT0FDdEIrSCxlQUFrQmpJLEVBQUF4ZCxFQUFTMGQsT0FDM0IwSyxVQUFhNUssRUFBQXhkLEVBQVMwZCxPQUN0QnVJLGVBQWtCekksRUFBQXhkLEVBQVMwZCxPQUMzQndJLGtCQUFxQjFJLEVBQUF4ZCxFQUFTNmpCLE9BQzlCc0Msb0JBQXVCM0ksRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBUzBkLE9BQVNGLEVBQUF4ZCxFQUFTNmpCLFNBQ3ZFK1ksZUFBa0JwZixFQUFBeGQsRUFBU2dZLElBQzNCK2pCLGdCQUFtQnZlLEVBQUF4ZCxFQUFTMmQsT0FDNUJxZSxnQkFBbUJ4ZSxFQUFBeGQsRUFBUzJkLE9BQzVCeXVCLE9BQVU1dUIsRUFBQXhkLEVBQVMyZCxPQUNuQjJ2QyxXQUFjOXZDLEVBQUF4ZCxFQUFTMmQsT0FDdkI0dkMsVUFBYS92QyxFQUFBeGQsRUFBUzJkLE9BQ3RCK0ksa0JBQXFCbEosRUFBQXhkLEVBQVNoQixLQUM5QjQ4QyxZQUFlcCtCLEVBQUF4ZCxFQUFTaEIsS0FDeEJ3WSxZQUFlZ0csRUFBQXhkLEVBQVMrWCxLQUN4QitrQixtQkFBc0J0ZixFQUFBeGQsRUFBUytYLEtBQy9COHhDLEtBQVFyc0MsRUFBQXhkLEVBQVMrWCxLQUNqQnkxQyxhQUFnQmh3QyxFQUFBeGQsRUFBUytYLEtBQ3pCd2xCLGFBQWdCL2YsRUFBQXhkLEVBQVNoQixLQUN6QnduQixXQUFjaEosRUFBQXhkLEVBQVM2akIsT0FDdkI0QyxhQUFnQmpKLEVBQUF4ZCxFQUFTK1gsS0FDekI4a0Isb0JBQXVCcmYsRUFBQXhkLEVBQVMrWCxLQUNoQzh3QyxtQkFBc0JyckMsRUFBQXhkLEVBQVN5ZCxXQUFZRCxFQUFBeGQsRUFBUzBkLE9BQVNGLEVBQUF4ZCxFQUFTNmpCLFNBQ3RFaWxDLGNBQWlCdHJDLEVBQUF4ZCxFQUFTMGQsT0FDMUJ3ckMsUUFBVzFyQyxFQUFBeGQsRUFBUzBkLE9BQ3BCdXVDLFdBQWN6dUMsRUFBQXhkLEVBQVMrWCxNQUV2Qnl5QyxHQUFPbmxELGdCQUNQbWxELEdBQU9ubkQsa0JBQUFnQyxHQUNQbWxELEdBQU92eUMsY0FDUDBKLFVBQUEsbUJBQ0EwckMsMkJBcmJBLFdBQ0EsVUFxYkF6UixZQWxiQSxXQUNBLE9BQUF2ekMsT0FBQUMsVUFrYkErZCxxQkFBQWtELEdBQ0FvVCx3QkFBQXBULEdBQ0FnVSxhQUFBaFUsR0FDQTlELGVBQUEsR0FDQXNXLGdCQUFBLEVBQ0FDLGdCQUFBLEdBQ0FzeEIsV0FBQSxFQUNBQyxVQUFBLElBQ0F6bkMsY0FDQWdYLG9CQUFBLEVBQ0F0VyxjQUNBcVcscUJBQUEsRUFDQWd0QixNQUFBLEVBQ0EyRCxjQUFBLEVBQ0E5d0IsVUFDQTFXLGNBQ0FILGVBR0EsSUFBSTZrQyxHQUFnQixXQUNwQixJQUFBK0MsRUFBQXhyRCxLQUVBQSxLQUFBeW1CLGFBQUEsU0FBQXhvQixHQUNBLElBQUE2N0IsRUFBQTB4QixFQUFBM3NELE1BQUFpN0IsZ0JBRUEweEIsRUFBQTVDLFdBQUEsZUFBQTNxRCxHQUNBdXRELEVBQUF0QixzQkFBQSxFQUFBcHdCLElBQUEsS0FBQTc3QixJQUdBK0IsS0FBQWdyRCxZQUFBLFNBQUEvc0QsR0FDQXV0RCxFQUFBNUMsV0FBQSxjQUFBM3FELEdBQ0F1dEQsRUFBQXZCLFNBQUFoc0QsSUFHQStCLEtBQUEwbUIsYUFBQSxTQUFBem9CLEdBQ0F1dEQsRUFBQTVDLFdBQUEsZUFBQTNxRCxHQUNBdXRELEVBQUF0QixzQkFBQSxFQUFBc0IsRUFBQTNzRCxNQUFBazdCLGtCQUdBLzVCLEtBQUF5ckQsa0JBQUEsV0FDQUQsRUFBQS9CLG1CQUdBenBELEtBQUEwckQsa0JBQUEsU0FBQXp0RCxHQUdBQSxFQUFBb1QsZ0JBQUFwVCxFQUFBb1QsY0FBQTFLLFlBQUE2a0QsRUFBQTkxQyxZQUFBODFDLEVBQUE5MUMsV0FBQTBQLGlCQUFvSG5wQixPQUFBbVMsRUFBQSxFQUFBblMsQ0FBUXV2RCxFQUFBOTFDLFdBQUEwUCxrQkFBQW5uQixFQUFBb1QsZ0JBRzVIbTZDLEVBQUF0QixzQkFBQSxFQUFBc0IsRUFBQTNzRCxNQUFBazdCLGtCQUdBLzVCLEtBQUF1aEIsUUFBQSxTQUFBdGpCLEdBQ0F1dEQsRUFBQTVDLFdBQUEsVUFBQTNxRCxHQUVBdXRELEVBQUEvQixrQkFDQStCLEVBQUFkLGtCQUNBYyxFQUFBRyxVQUFBL2tELEtBQUFDLE1BQ0Eya0QsRUFBQXRCLHNCQUFBLEVBQUFzQixFQUFBM3NELE1BQUF3c0QsY0FJQXJyRCxLQUFBeWhCLFlBQUEsU0FBQXhqQixHQUNBdXRELEVBQUE1QyxXQUFBLGNBQUEzcUQsR0FDQXV0RCxFQUFBSSxhQUFBaGxELEtBQUFDLE9BR0E3RyxLQUFBOGxELGFBQUEsU0FBQTduRCxHQUNBdXRELEVBQUE1QyxXQUFBLGVBQUEzcUQsR0FDQXV0RCxFQUFBSyxhQUFBamxELEtBQUFDLE9BR0E3RyxLQUFBdW1CLE9BQUEsU0FBQXRvQixHQUNBdXRELEVBQUE1QyxXQUFBLFNBQUEzcUQsR0FDQXV0RCxFQUFBL0Isa0JBQ0ErQixFQUFBYixnQkFDQWEsRUFBQXRCLHNCQUFBLEVBQUFzQixFQUFBM3NELE1BQUF5c0QsWUFJQXRyRCxLQUFBK3FELGNBQUEsU0FBQTlzRCxHQUNBQSxFQUFBNFUsaUJBQ0EyNEMsRUFBQTVDLFdBQUEsZ0JBQUEzcUQsR0FDQXV0RCxFQUFBekIsaUJBQUEsRUFBQTlyRCxJQUdBK0IsS0FBQXNwRCxtQkFBQSxXQUNBa0MsRUFBQXRDLHVCQUNBc0MsRUFBQVgsU0FJQTdxRCxLQUFBaWdCLFFBQUEsU0FBQXpRLEdBR0EsR0FGQWc4QyxFQUFBNUMsV0FBQSxVQUFBcDVDLEdBRUFnOEMsRUFBQUcsVUFBQSxDQUNBLElBQUFHLE9BQUEsRUFRQSxHQVBBTixFQUFBSSxjQUFBSixFQUFBSyxhQUNBQyxFQUFBdmxELEtBQUFzNUMsSUFBQTJMLEVBQUFJLGFBQUFKLEVBQUFLLGNBQ09MLEVBQUFJLGFBQ1BFLEVBQUFOLEVBQUFJLGFBQ09KLEVBQUFLLGVBQ1BDLEVBQUFOLEVBQUFLLGNBRUF0bEQsS0FBQW9GLElBQUFtZ0QsRUFBQU4sRUFBQUcsV0FBQSxHQUNBLE9BRUFILEVBQUFHLFVBQUEsRUFFQUgsRUFBQUksYUFBQSxFQUNBSixFQUFBSyxhQUFBLEVBQ0FyOEMsS0FBQXFELGdCQUNBckQsRUFBQXFELGlCQUVBLElBQUFrNUMsR0FBQVAsRUFBQW5wRCxNQUFBbWlCLGNBQ0FnbkMsRUFBQXZDLGtCQUFBOEMsTUFBQVAsRUFBQWpCLGtCQUNBaUIsRUFBQXpCLGlCQUFBeUIsRUFBQW5wRCxNQUFBbWlCLGFBQUFoVixJQUlBeFAsS0FBQXNvRCxpQkFBQSxXQUNBLElBQUEwRCxFQUFBUixFQUFBenBELFFBQUFzbUQsVUFDQUEsT0FBQS9yRCxJQUFBMHZELEtBQXlEQSxFQUV6RFIsRUFBQVMsbUJBQUEsRUFFQTV5QyxhQUFBbXlDLEVBQUE5QixrQkFDQThCLEVBQUE5QixpQkFBQS9pRCxXQUFBLFdBQ0E2a0QsRUFBQVMsbUJBQUEsR0FDSyxHQUVMNUQsRUFBQUMsa0JBQ0FELEVBQUFDLGlCQUFBL25ELE1BQUE4bkQsRUFBQTduRCxZQUlBUixLQUFBbXBELGdCQUFBLFNBQUEzNUMsR0FDQSxJQUFBZzhDLEVBQUEzc0QsTUFBQStvRCxNQUFBNEQsRUFBQTNzRCxNQUFBMHNELGFBQUEsQ0FJQSxJQUFBNXRELEVBQUE2UixFQUFBN1IsT0FDQTBRLEVBQWVwUyxPQUFBaWlCLEVBQUEsWUFBQWppQixDQUFXdXZELEdBQ2pCdnZELE9BQUFtUyxFQUFBLEVBQUFuUyxDQUFRb1MsRUFBQTFRLElBQUE2dEQsRUFBQVMsbUJBQ2pCVCxFQUFBWCxVQUlBN3FELEtBQUE4bkQsZUFBQSxXQUNBLE9BQVc3ckQsT0FBQWlpQixFQUFBLFlBQUFqaUIsQ0FBV3V2RCxJQUd0QnhyRCxLQUFBb3JELDJCQUFBLFNBQUFoeEIsR0FDQSxJQUFBalUsS0FDQStsQyxFQUFBVixFQUFBM3NELE1BQ0FtbEIsRUFBQWtvQyxFQUFBbG9DLGVBQ0FDLEVBQUFpb0MsRUFBQWpvQyxrQkFDQXZFLEVBQUF3c0MsRUFBQXhzQyxVQUNBc3FDLEVBQUFrQyxFQUFBbEMsV0FDQW9CLEVBQUFjLEVBQUFkLDJCQVFBLE9BTkFwbkMsR0FBQUMsR0FDQWtDLEVBQUF6bkIsS25COWxCTyxTQUFBdWxCLEVBQUF2RSxFQUFBMGEsRUFBQXdkLEdBQ1AsSUFBQTExQixFQUFBa1ksRUFBQWxZLE9BQ0EsUUFBQWlZLEtBQUFsVyxFQUNBLEdBQUFBLEVBQUF6aUIsZUFBQTI0QixJQUNBc2QsRUFBQXh6QixFQUFBa1csR0FBQWpZLFNBQUEwMUIsR0FDQSxPQUFBbDRCLEVBQUEsY0FBQXlhLEVBSUEsU21CcWxCcUJneUIsQ0FBc0Jsb0MsRUFBQXZFLEVBQUEwYSxFQUFBNHZCLElBRTNDb0IsR0FDQWpsQyxFQUFBem5CLEtBQUEwc0QsRUFBQWh4QixJQUVBalUsRUFBQXhJLEtBQUEsTUFHQTNkLEtBQUFzVixhQUFBLFdBQ0EsSUFBQTgyQyxFQUFBWixFQUFBM3NELE1BQ0E2Z0IsRUFBQTBzQyxFQUFBMXNDLFVBQ0FtYixFQUFBdXhCLEVBQUF2eEIsbUJBQ0FyWCxFQUFBNG9DLEVBQUE1b0MsZUFDQWlYLEVBQUEyeEIsRUFBQTN4QixPQUNBYSxFQUFBOHdCLEVBQUE5d0IsYUFDQVgsRUFBQXl4QixFQUFBenhCLGVBQ0F6VyxFQUFBa29DLEVBQUFsb0Msb0JBQ0FMLEVBQUF1b0MsRUFBQXZvQyxXQUNBK2pDLEVBQUF3RSxFQUFBeEUsS0FDQWYsRUFBQXVGLEVBQUF2RixjQUNBRCxFQUFBd0YsRUFBQXhGLG1CQUNBemMsRUFBQWlpQixFQUFBamlCLE9BQ0E3bEIsRUFBQThuQyxFQUFBOW5DLE1BQ0EyaUMsRUFBQW1GLEVBQUFuRixRQUNBK0MsRUFBQW9DLEVBQUFwQyxXQUNBNWdDLEVBQUFvaUMsRUFBQW5wRCxNQUNBbWlCLEVBQUE0RSxFQUFBNUUsYUFDQXUvQixFQUFBMzZCLEVBQUEyNkIsTUFHQTNwQixFQUFBb3hCLEVBQUE3QixnQkFFQTBDLEtBV0EsT0FWQWIsRUFBQWhCLHVCQUNBNkIsRUFBQTVsQyxhQUFBK2tDLEVBQUFDLG1CQUVBRCxFQUFBZix1QkFDQTRCLEVBQUEzbEMsYUFBQThrQyxFQUFBRSxtQkFHQVcsRUFBQTVxQyxZQUFBK3BDLEVBQUFsRCxpQkFDQStELEVBQUF2RyxhQUFBMEYsRUFBQWxELGlCQUVXaHRDLEVBQUF2ZCxFQUFLaUYsY0FDVmtsRCxHQUNBbG5DLEtBQ050QixZQUNBbWIscUJBQ0F4bEIsUUFBQW1QLEVBQ0F1L0IsTUFBQWlHLEdBQUFqRyxFQUNBNTlCLFVBQUEzQyxFQUNBaVgsU0FDQUwsUUFDQStwQixRQUFBN29CLEVBQ0EvVixVQUFBb1YsRUFDQXFzQixzQkFBQXdFLEVBQUFKLDRCQUNPaUIsR0FDUHBGLFVBQ0FhLGVBQUEwRCxFQUFBMUQsZUFDQXZ1QyxNQUFBc0ssRUFDQStqQyxPQUNBemQsU0FDQTdrQixlQUFBcEIsRUFDQTJpQyxnQkFDQUQscUJBQ0E5akQsSUFBQTBvRCxFQUFBYyxZQUVBLG1CQUFBaG9DLFVBSUF0a0IsS0FBQXdWLGFBQUEsV0FDQSxJQUFBM1csRUFBQTJzRCxFQUFBM3NELE1BRUEwdEQsRUFBQWxtRCxTQUFBckQsY0FBQSxPQVNBLE9BTkF1cEQsRUFBQWh6QyxNQUFBalAsU0FBQSxXQUNBaWlELEVBQUFoekMsTUFBQXRPLElBQUEsSUFDQXNoRCxFQUFBaHpDLE1BQUF6TyxLQUFBLElBQ0F5aEQsRUFBQWh6QyxNQUFBcE8sTUFBQSxRQUNBdE0sRUFBQTRsQixrQkFBQTVsQixFQUFBNGxCLGtCQUFzRXhvQixPQUFBaWlCLEVBQUEsWUFBQWppQixDQUFXdXZELElBQUEzc0QsRUFBQTg2QyxjQUFBaHBDLE1BQ2pGMGQsWUFBQWsrQixHQUNBQSxHQUdBdnNELEtBQUFpcUQsU0FBQSxTQUFBbEcsR0FDQXlILEVBQUEzc0QsTUFBQW1yRCxZQUVBakcsR0FFQXlILEVBQUF2dUQsVUFDQThtRCxPQUNBbHpDLE1BQUFrekMsRUFBQWx6QyxNQUNBSSxNQUFBOHlDLEVBQUE5eUMsVUFLQWpSLEtBQUFtckQsbUJBQUEsV0FDQUssRUFBQTlDLG1CQUFBOEMsRUFBQW5wRCxNQUFBbWlCLGNBQ0FnbkMsRUFBQTNzRCxNQUFBNjdCLHdCQUFBOHdCLEVBQUFucEQsTUFBQW1pQixlQUlBeGtCLEtBQUFzc0QsVUFBQSxTQUFBaCtDLEdBQ0FrOUMsRUFBQTkxQyxXQUFBcEgsSUFJZWxSLEVBQUEiLCJmaWxlIjoiOC43Y2QxODg5MWYyYjQyYWJiZDY2Mi5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnN0b3JlU2hhcGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc3RvcmVTaGFwZSA9IGV4cG9ydHMuc3RvcmVTaGFwZSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICBzdWJzY3JpYmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICBzZXRTdGF0ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZFxufSk7IiwiaW1wb3J0IGFkZERPTUV2ZW50TGlzdGVuZXIgZnJvbSAnYWRkLWRvbS1ldmVudC1saXN0ZW5lcic7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcldyYXAodGFyZ2V0LCBldmVudFR5cGUsIGNiKSB7XG4gIC8qIGVzbGludCBjYW1lbGNhc2U6IDIgKi9cbiAgdmFyIGNhbGxiYWNrID0gUmVhY3RET00udW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPyBmdW5jdGlvbiBydW4oZSkge1xuICAgIFJlYWN0RE9NLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzKGNiLCBlKTtcbiAgfSA6IGNiO1xuICByZXR1cm4gYWRkRE9NRXZlbnRMaXN0ZW5lcih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgdmFyIHJldCA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldC5wdXNoKGMpO1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUHJvdmlkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQcm92aWRlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFByb3ZpZGVyLCBbe1xuICAgIGtleTogJ2dldENoaWxkQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1pbmlTdG9yZTogdGhpcy5wcm9wcy5zdG9yZVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICBzdG9yZTogX1Byb3BUeXBlcy5zdG9yZVNoYXBlLmlzUmVxdWlyZWRcbn07XG5Qcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgbWluaVN0b3JlOiBfUHJvcFR5cGVzLnN0b3JlU2hhcGUuaXNSZXF1aXJlZFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IFByb3ZpZGVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY29ubmVjdDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3NoYWxsb3dlcXVhbCA9IHJlcXVpcmUoJ3NoYWxsb3dlcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dlcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93ZXF1YWwpO1xuXG52YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzID0gcmVxdWlyZSgnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnKTtcblxudmFyIF9ob2lzdE5vblJlYWN0U3RhdGljczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ob2lzdE5vblJlYWN0U3RhdGljcyk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZSgncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgcmV0dXJuIFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xufVxuXG5mdW5jdGlvbiBpc1N0YXRlbGVzcyhDb21wb25lbnQpIHtcbiAgcmV0dXJuICFDb21wb25lbnQucHJvdG90eXBlLnJlbmRlcjtcbn1cblxudmFyIGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzKCkge1xuICByZXR1cm4ge307XG59O1xuXG5mdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykge1xuICB2YXIgc2hvdWxkU3Vic2NyaWJlID0gISFtYXBTdGF0ZVRvUHJvcHM7XG4gIHZhciBmaW5uYWxNYXBTdGF0ZVRvUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMgfHwgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcztcblxuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICB2YXIgQ29ubmVjdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHMoQ29ubmVjdCwgX0NvbXBvbmVudCk7XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhDb25uZWN0LCBudWxsLCBbe1xuICAgICAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgICAvLyB1c2luZyBvd25Qcm9wc1xuICAgICAgICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMgJiYgbWFwU3RhdGVUb1Byb3BzLmxlbmd0aCA9PT0gMiAmJiBwcm9wcyAhPT0gcHJldlN0YXRlLnByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBzdWJzY3JpYmVkOiBmaW5uYWxNYXBTdGF0ZVRvUHJvcHMocHJldlN0YXRlLnN0b3JlLmdldFN0YXRlKCksIHByb3BzKSxcbiAgICAgICAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBwcm9wczogcHJvcHMgfTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29ubmVjdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbm5lY3QpKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghX3RoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG5leHRTdGF0ZSA9IGZpbm5hbE1hcFN0YXRlVG9Qcm9wcyhfdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLCBfdGhpcy5wcm9wcyk7XG4gICAgICAgICAgaWYgKCEoMCwgX3NoYWxsb3dlcXVhbDIuZGVmYXVsdCkoX3RoaXMuc3RhdGUuc3Vic2NyaWJlZCwgbmV4dFN0YXRlKSkge1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBzdWJzY3JpYmVkOiBuZXh0U3RhdGUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLnN0b3JlID0gY29udGV4dC5taW5pU3RvcmU7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgIHN1YnNjcmliZWQ6IGZpbm5hbE1hcFN0YXRlVG9Qcm9wcyhfdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyksXG4gICAgICAgICAgc3RvcmU6IF90aGlzLnN0b3JlLFxuICAgICAgICAgIHByb3BzOiBwcm9wc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhDb25uZWN0LCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgIHRoaXMudHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICd0cnlTdWJzY3JpYmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgICAgICAgIGlmIChzaG91bGRTdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZUNoYW5nZSk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICd0cnlVbnN1YnNjcmliZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFdyYXBwZWRJbnN0YW5jZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRXcmFwcGVkSW5zdGFuY2UoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlZEluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZS5zdWJzY3JpYmVkLCB7XG4gICAgICAgICAgICBzdG9yZTogdGhpcy5zdG9yZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCFpc1N0YXRlbGVzcyhXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIud3JhcHBlZEluc3RhbmNlID0gYztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9ICdDb25uZWN0KCcgKyBnZXREaXNwbGF5TmFtZShXcmFwcGVkQ29tcG9uZW50KSArICcpJztcbiAgICBDb25uZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgICAgIG1pbmlTdG9yZTogX1Byb3BUeXBlcy5zdG9yZVNoYXBlLmlzUmVxdWlyZWRcbiAgICB9O1xuXG5cbiAgICAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoQ29ubmVjdCk7XG5cbiAgICByZXR1cm4gKDAsIF9ob2lzdE5vblJlYWN0U3RhdGljczIuZGVmYXVsdCkoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZTtcbmZ1bmN0aW9uIGNyZWF0ZShpbml0aWFsU3RhdGUpIHtcbiAgdmFyIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUocGFydGlhbCkge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCBwYXJ0aWFsKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0U3RhdGU6IHNldFN0YXRlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZVxuICB9O1xufSIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbigpIHtcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhcmdzW2ldICYmIGFyZ3NbaV0uYXBwbHkpIHtcbiAgICAgICAgYXJnc1tpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0iLCIvKipcclxuICogQSBjb2xsZWN0aW9uIG9mIHNoaW1zIHRoYXQgcHJvdmlkZSBtaW5pbWFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVTNiBjb2xsZWN0aW9ucy5cclxuICpcclxuICogVGhlc2UgaW1wbGVtZW50YXRpb25zIGFyZSBub3QgbWVhbnQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBSZXNpemVPYnNlcnZlclxyXG4gKiBtb2R1bGVzIGFzIHRoZXkgY292ZXIgb25seSBhIGxpbWl0ZWQgcmFuZ2Ugb2YgdXNlIGNhc2VzLlxyXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtanNkb2MsIHZhbGlkLWpzZG9jICovXG52YXIgTWFwU2hpbSA9IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBNYXA7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGluZGV4IGluIHByb3ZpZGVkIGFycmF5IHRoYXQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGtleS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PEFycmF5Pn0gYXJyXHJcbiAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEluZGV4KGFyciwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAtMTtcblxuICAgICAgICBhcnIuc29tZShmdW5jdGlvbiAoZW50cnksIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYW5vbnltb3VzKCkge1xuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgc2l6ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xuICAgICAgICBwcm90b3R5cGVBY2Nlc3NvcnMuc2l6ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2VudHJpZXNfXy5sZW5ndGg7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5fX2VudHJpZXNfX1tpbmRleF07XG5cbiAgICAgICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVsxXTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgodGhpcy5fX2VudHJpZXNfXywga2V5KTtcblxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX19baW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18ucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXG4gICAgICAgIGFub255bW91cy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLl9fZW50cmllc19fO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgoZW50cmllcywga2V5KTtcblxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xuICAgICAgICBhbm9ueW1vdXMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAhIX5nZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xuICAgICAgICBhbm9ueW1vdXMucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXy5zcGxpY2UoMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAgICAgKiBAcGFyYW0geyp9IFtjdHg9bnVsbF1cclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjdHgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCBjdHggPT09IHZvaWQgMCApIGN0eCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gdGhpcyQxLl9fZW50cmllc19fOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGxpc3RbaV07XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGN0eCwgZW50cnlbMV0sIGVudHJ5WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggYW5vbnltb3VzLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICAgICAgcmV0dXJuIGFub255bW91cztcbiAgICB9KCkpO1xufSkoKTtcblxuLyoqXHJcbiAqIERldGVjdHMgd2hldGhlciB3aW5kb3cgYW5kIGRvY3VtZW50IG9iamVjdHMgYXJlIGF2YWlsYWJsZSBpbiBjdXJyZW50IGVudmlyb25tZW50LlxyXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCA9PT0gZG9jdW1lbnQ7XG5cbi8vIFJldHVybnMgZ2xvYmFsIG9iamVjdCBvZiBhIGN1cnJlbnQgZW52aXJvbm1lbnQuXG52YXIgZ2xvYmFsJDEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwuTWF0aCA9PT0gTWF0aCkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PT0gTWF0aCkge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufSkoKTtcblxuLyoqXHJcbiAqIEEgc2hpbSBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB3aGljaCBmYWxscyBiYWNrIHRvIHRoZSBzZXRUaW1lb3V0IGlmXHJcbiAqIGZpcnN0IG9uZSBpcyBub3Qgc3VwcG9ydGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXF1ZXN0cycgaWRlbnRpZmllci5cclxuICovXG52YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIEl0J3MgcmVxdWlyZWQgdG8gdXNlIGEgYm91bmRlZCBmdW5jdGlvbiBiZWNhdXNlIElFIHNvbWV0aW1lcyB0aHJvd3NcbiAgICAgICAgLy8gYW4gXCJJbnZhbGlkIGNhbGxpbmcgb2JqZWN0XCIgZXJyb3IgaWYgckFGIGlzIGludm9rZWQgd2l0aG91dCB0aGUgZ2xvYmFsXG4gICAgICAgIC8vIG9iamVjdCBvbiB0aGUgbGVmdCBoYW5kIHNpZGUuXG4gICAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZChnbG9iYWwkMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjayhEYXRlLm5vdygpKTsgfSwgMTAwMCAvIDYwKTsgfTtcbn0pKCk7XG5cbi8vIERlZmluZXMgbWluaW11bSB0aW1lb3V0IGJlZm9yZSBhZGRpbmcgYSB0cmFpbGluZyBjYWxsLlxudmFyIHRyYWlsaW5nVGltZW91dCA9IDI7XG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBlbnN1cmVzIHRoYXQgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZVxyXG4gKiBpbnZva2VkIG9ubHkgb25jZSBkdXJpbmcgdGhlIHNwZWNpZmllZCBkZWxheSBwZXJpb2QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgZGVsYXkgcGVyaW9kLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBEZWxheSBhZnRlciB3aGljaCB0byBpbnZva2UgY2FsbGJhY2suXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICovXG52YXIgdGhyb3R0bGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgdmFyIGxlYWRpbmdDYWxsID0gZmFsc2UsXG4gICAgICAgIHRyYWlsaW5nQ2FsbCA9IGZhbHNlLFxuICAgICAgICBsYXN0Q2FsbFRpbWUgPSAwO1xuXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIHRoZSBvcmlnaW5hbCBjYWxsYmFjayBmdW5jdGlvbiBhbmQgc2NoZWR1bGVzIG5ldyBpbnZvY2F0aW9uIGlmXHJcbiAgICAgKiB0aGUgXCJwcm94eVwiIHdhcyBjYWxsZWQgZHVyaW5nIGN1cnJlbnQgcmVxdWVzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVQZW5kaW5nKCkge1xuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhaWxpbmdDYWxsKSB7XG4gICAgICAgICAgICBwcm94eSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXkuIEl0IHdpbGwgZnVydGhlciBwb3N0cG9uZVxyXG4gICAgICogaW52b2NhdGlvbiBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gZGVsZWdhdGluZyBpdCB0byB0aGVcclxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXRDYWxsYmFjaygpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEocmVzb2x2ZVBlbmRpbmcpO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGVzIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJveHkoKSB7XG4gICAgICAgIHZhciB0aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmIChsZWFkaW5nQ2FsbCkge1xuICAgICAgICAgICAgLy8gUmVqZWN0IGltbWVkaWF0ZWx5IGZvbGxvd2luZyBjYWxscy5cbiAgICAgICAgICAgIGlmICh0aW1lU3RhbXAgLSBsYXN0Q2FsbFRpbWUgPCB0cmFpbGluZ1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIG5ldyBjYWxsIHRvIGJlIGluIGludm9rZWQgd2hlbiB0aGUgcGVuZGluZyBvbmUgaXMgcmVzb2x2ZWQuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBmb3IgXCJ0cmFuc2l0aW9uc1wiIHdoaWNoIG5ldmVyIGFjdHVhbGx5IHN0YXJ0XG4gICAgICAgICAgICAvLyBpbW1lZGlhdGVseSBzbyB0aGVyZSBpcyBhIGNoYW5jZSB0aGF0IHdlIG1pZ2h0IG1pc3Mgb25lIGlmIGNoYW5nZVxuICAgICAgICAgICAgLy8gaGFwcGVucyBhbWlkcyB0aGUgcGVuZGluZyBpbnZvY2F0aW9uLlxuICAgICAgICAgICAgdHJhaWxpbmdDYWxsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYWlsaW5nQ2FsbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRpbWVvdXRDYWxsYmFjaywgZGVsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZVN0YW1wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm94eTtcbn07XG5cbi8vIE1pbmltdW0gZGVsYXkgYmVmb3JlIGludm9raW5nIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLlxudmFyIFJFRlJFU0hfREVMQVkgPSAyMDtcblxuLy8gQSBsaXN0IG9mIHN1YnN0cmluZ3Mgb2YgQ1NTIHByb3BlcnRpZXMgdXNlZCB0byBmaW5kIHRyYW5zaXRpb24gZXZlbnRzIHRoYXRcbi8vIG1pZ2h0IGFmZmVjdCBkaW1lbnNpb25zIG9mIG9ic2VydmVkIGVsZW1lbnRzLlxudmFyIHRyYW5zaXRpb25LZXlzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3NpemUnLCAnd2VpZ2h0J107XG5cbi8vIENoZWNrIGlmIE11dGF0aW9uT2JzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxudmFyIG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxyXG4gKiBTaW5nbGV0b24gY29udHJvbGxlciBjbGFzcyB3aGljaCBoYW5kbGVzIHVwZGF0ZXMgb2YgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2VzLlxyXG4gKi9cbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbiAgICB0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfID0gZmFsc2U7XG4gICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xuICAgIHRoaXMub2JzZXJ2ZXJzXyA9IFtdO1xuXG4gICAgdGhpcy5vblRyYW5zaXRpb25FbmRfID0gdGhpcy5vblRyYW5zaXRpb25FbmRfLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWZyZXNoID0gdGhyb3R0bGUodGhpcy5yZWZyZXNoLmJpbmQodGhpcyksIFJFRlJFU0hfREVMQVkpO1xufTtcblxuLyoqXHJcbiAqIEFkZHMgb2JzZXJ2ZXIgdG8gb2JzZXJ2ZXJzIGxpc3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJTUEl9IG9ic2VydmVyIC0gT2JzZXJ2ZXIgdG8gYmUgYWRkZWQuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblxuXG4vKipcclxuICogSG9sZHMgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyJ3MgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAqL1xuXG5cbi8qKlxyXG4gKiBLZWVwcyByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIE11dGF0aW9uT2JzZXJ2ZXIuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtNdXRhdGlvbk9ic2VydmVyfVxyXG4gKi9cblxuLyoqXHJcbiAqIEluZGljYXRlcyB3aGV0aGVyIERPTSBsaXN0ZW5lcnMgaGF2ZSBiZWVuIGFkZGVkLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmFkZE9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgaWYgKCF+dGhpcy5vYnNlcnZlcnNfLmluZGV4T2Yob2JzZXJ2ZXIpKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzXy5wdXNoKG9ic2VydmVyKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbGlzdGVuZXJzIGlmIHRoZXkgaGF2ZW4ndCBiZWVuIGFkZGVkIHlldC5cbiAgICBpZiAoIXRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICB0aGlzLmNvbm5lY3RfKCk7XG4gICAgfVxufTtcblxuLyoqXHJcbiAqIFJlbW92ZXMgb2JzZXJ2ZXIgZnJvbSBvYnNlcnZlcnMgbGlzdC5cclxuICpcclxuICogQHBhcmFtIHtSZXNpemVPYnNlcnZlclNQSX0gb2JzZXJ2ZXIgLSBPYnNlcnZlciB0byBiZSByZW1vdmVkLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXztcbiAgICB2YXIgaW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcik7XG5cbiAgICAvLyBSZW1vdmUgb2JzZXJ2ZXIgaWYgaXQncyBwcmVzZW50IGluIHJlZ2lzdHJ5LlxuICAgIGlmICh+aW5kZXgpIHtcbiAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGxpc3RlbmVycyBpZiBjb250cm9sbGVyIGhhcyBubyBjb25uZWN0ZWQgb2JzZXJ2ZXJzLlxuICAgIGlmICghb2JzZXJ2ZXJzLmxlbmd0aCAmJiB0aGlzLmNvbm5lY3RlZF8pIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0XygpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBJbnZva2VzIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLiBJdCB3aWxsIGNvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpbnNvZmFyXHJcbiAqIGl0IGRldGVjdHMgY2hhbmdlcy5cclxuICpcclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VzRGV0ZWN0ZWQgPSB0aGlzLnVwZGF0ZU9ic2VydmVyc18oKTtcblxuICAgIC8vIENvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpZiBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZCBhcyB0aGVyZSBtaWdodFxuICAgIC8vIGJlIGZ1dHVyZSBvbmVzIGNhdXNlZCBieSBDU1MgdHJhbnNpdGlvbnMuXG4gICAgaWYgKGNoYW5nZXNEZXRlY3RlZCkge1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG59O1xuXG4vKipcclxuICogVXBkYXRlcyBldmVyeSBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0IGFuZCBub3RpZmllcyB0aGVtIG9mIHF1ZXVlZFxyXG4gKiBlbnRyaWVzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBcInRydWVcIiBpZiBhbnkgb2JzZXJ2ZXIgaGFzIGRldGVjdGVkIGNoYW5nZXMgaW5cclxuICogIGRpbWVuc2lvbnMgb2YgaXQncyBlbGVtZW50cy5cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZU9ic2VydmVyc18gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ29sbGVjdCBvYnNlcnZlcnMgdGhhdCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXG4gICAgdmFyIGFjdGl2ZU9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXy5maWx0ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5nYXRoZXJBY3RpdmUoKSwgb2JzZXJ2ZXIuaGFzQWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBEZWxpdmVyIG5vdGlmaWNhdGlvbnMgaW4gYSBzZXBhcmF0ZSBjeWNsZSBpbiBvcmRlciB0byBhdm9pZCBhbnlcbiAgICAvLyBjb2xsaXNpb25zIGJldHdlZW4gb2JzZXJ2ZXJzLCBlLmcuIHdoZW4gbXVsdGlwbGUgaW5zdGFuY2VzIG9mXG4gICAgLy8gUmVzaXplT2JzZXJ2ZXIgYXJlIHRyYWNraW5nIHRoZSBzYW1lIGVsZW1lbnQgYW5kIHRoZSBjYWxsYmFjayBvZiBvbmVcbiAgICAvLyBvZiB0aGVtIGNoYW5nZXMgY29udGVudCBkaW1lbnNpb25zIG9mIHRoZSBvYnNlcnZlZCB0YXJnZXQuIFNvbWV0aW1lc1xuICAgIC8vIHRoaXMgbWF5IHJlc3VsdCBpbiBub3RpZmljYXRpb25zIGJlaW5nIGJsb2NrZWQgZm9yIHRoZSByZXN0IG9mIG9ic2VydmVycy5cbiAgICBhY3RpdmVPYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIG9ic2VydmVyLmJyb2FkY2FzdEFjdGl2ZSgpOyB9KTtcblxuICAgIHJldHVybiBhY3RpdmVPYnNlcnZlcnMubGVuZ3RoID4gMDtcbn07XG5cbi8qKlxyXG4gKiBJbml0aWFsaXplcyBET00gbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmNvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IGFkZGVkLlxuICAgIGlmICghaXNCcm93c2VyIHx8IHRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU3Vic2NyaXB0aW9uIHRvIHRoZSBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBpcyB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3JcbiAgICAvLyBkZWxheWVkIHRyYW5zaXRpb25zLiBUaGlzIHdheSBpdCdzIHBvc3NpYmxlIHRvIGNhcHR1cmUgYXQgbGVhc3QgdGhlXG4gICAgLy8gZmluYWwgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlZnJlc2gpO1xuXG4gICAgaWYgKG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlZnJlc2gpO1xuXG4gICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xuXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuY29ubmVjdGVkXyA9IHRydWU7XG59O1xuXG4vKipcclxuICogUmVtb3ZlcyBET00gbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmRpc2Nvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IHJlbW92ZWQuXG4gICAgaWYgKCFpc0Jyb3dzZXIgfHwgIXRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kXyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVmcmVzaCk7XG5cbiAgICBpZiAodGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8pIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8uZGlzY29ubmVjdCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMucmVmcmVzaCk7XG4gICAgfVxuXG4gICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xuICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcbiAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbn07XG5cbi8qKlxyXG4gKiBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBoYW5kbGVyLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge1RyYW5zaXRpb25FdmVudH0gZXZlbnRcclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmRfID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gcmVmLnByb3BlcnR5TmFtZTsgaWYgKCBwcm9wZXJ0eU5hbWUgPT09IHZvaWQgMCApIHByb3BlcnR5TmFtZSA9ICcnO1xuXG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgdHJhbnNpdGlvbiBtYXkgYWZmZWN0IGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudC5cbiAgICB2YXIgaXNSZWZsb3dQcm9wZXJ0eSA9IHRyYW5zaXRpb25LZXlzLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gISF+cHJvcGVydHlOYW1lLmluZGV4T2Yoa2V5KTtcbiAgICB9KTtcblxuICAgIGlmIChpc1JlZmxvd1Byb3BlcnR5KSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBSZXR1cm5zIGluc3RhbmNlIG9mIHRoZSBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZV8pIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZV8gPSBuZXcgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VfO1xufTtcblxuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmluc3RhbmNlXyA9IG51bGw7XG5cbi8qKlxyXG4gKiBEZWZpbmVzIG5vbi13cml0YWJsZS9lbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHByb3ZpZGVkIHRhcmdldCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgLSBPYmplY3QgZm9yIHdoaWNoIHRvIGRlZmluZSBwcm9wZXJ0aWVzLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBQcm9wZXJ0aWVzIHRvIGJlIGRlZmluZWQuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRhcmdldCBvYmplY3QuXHJcbiAqL1xudmFyIGRlZmluZUNvbmZpZ3VyYWJsZSA9IChmdW5jdGlvbiAodGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gT2JqZWN0LmtleXMocHJvcHMpOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIga2V5ID0gbGlzdFtpXTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wc1trZXldLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbn0pO1xuXG4vKipcclxuICogUmV0dXJucyB0aGUgZ2xvYmFsIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggcHJvdmlkZWQgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKi9cbnZhciBnZXRXaW5kb3dPZiA9IChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgLy8gQXNzdW1lIHRoYXQgdGhlIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgTm9kZSwgd2hpY2ggbWVhbnMgdGhhdCBpdFxuICAgIC8vIGhhcyB0aGUgXCJvd25lckRvY3VtZW50XCIgcHJvcGVydHkgZnJvbSB3aGljaCB3ZSBjYW4gcmV0cmlldmUgYVxuICAgIC8vIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9iamVjdC5cbiAgICB2YXIgb3duZXJHbG9iYWwgPSB0YXJnZXQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cbiAgICAvLyBSZXR1cm4gdGhlIGxvY2FsIGdsb2JhbCBvYmplY3QgaWYgaXQncyBub3QgcG9zc2libGUgZXh0cmFjdCBvbmUgZnJvbVxuICAgIC8vIHByb3ZpZGVkIGVsZW1lbnQuXG4gICAgcmV0dXJuIG93bmVyR2xvYmFsIHx8IGdsb2JhbCQxO1xufSk7XG5cbi8vIFBsYWNlaG9sZGVyIG9mIGFuIGVtcHR5IGNvbnRlbnQgcmVjdGFuZ2xlLlxudmFyIGVtcHR5UmVjdCA9IGNyZWF0ZVJlY3RJbml0KDAsIDAsIDAsIDApO1xuXG4vKipcclxuICogQ29udmVydHMgcHJvdmlkZWQgc3RyaW5nIHRvIGEgbnVtYmVyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xuZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xufVxuXG4vKipcclxuICogRXh0cmFjdHMgYm9yZGVycyBzaXplIGZyb20gcHJvdmlkZWQgc3R5bGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xyXG4gKiBAcGFyYW0gey4uLnN0cmluZ30gcG9zaXRpb25zIC0gQm9yZGVycyBwb3NpdGlvbnMgKHRvcCwgcmlnaHQsIC4uLilcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgcG9zaXRpb25zWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHNpemUsIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1snYm9yZGVyLScgKyBwb3NpdGlvbiArICctd2lkdGgnXTtcblxuICAgICAgICByZXR1cm4gc2l6ZSArIHRvRmxvYXQodmFsdWUpO1xuICAgIH0sIDApO1xufVxuXG4vKipcclxuICogRXh0cmFjdHMgcGFkZGluZ3Mgc2l6ZXMgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhZGRpbmdzIGJveC5cclxuICovXG5mdW5jdGlvbiBnZXRQYWRkaW5ncyhzdHlsZXMpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcbiAgICB2YXIgcGFkZGluZ3MgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcG9zaXRpb25zOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBsaXN0W2ldO1xuXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1sncGFkZGluZy0nICsgcG9zaXRpb25dO1xuXG4gICAgICAgIHBhZGRpbmdzW3Bvc2l0aW9uXSA9IHRvRmxvYXQodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBwYWRkaW5ncztcbn1cblxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgY29udGVudCByZWN0YW5nbGUgb2YgcHJvdmlkZWQgU1ZHIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U1ZHR3JhcGhpY3NFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHdoaWNoIG5lZWRzXHJcbiAqICAgICAgdG8gYmUgY2FsY3VsYXRlZC5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cbmZ1bmN0aW9uIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCkge1xuICAgIHZhciBiYm94ID0gdGFyZ2V0LmdldEJCb3goKTtcblxuICAgIHJldHVybiBjcmVhdGVSZWN0SW5pdCgwLCAwLCBiYm94LndpZHRoLCBiYm94LmhlaWdodCk7XG59XG5cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHByb3ZpZGVkIEhUTUxFbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGZvciB3aGljaCB0byBjYWxjdWxhdGUgdGhlIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpIHtcbiAgICAvLyBDbGllbnQgd2lkdGggJiBoZWlnaHQgcHJvcGVydGllcyBjYW4ndCBiZVxuICAgIC8vIHVzZWQgZXhjbHVzaXZlbHkgYXMgdGhleSBwcm92aWRlIHJvdW5kZWQgdmFsdWVzLlxuICAgIHZhciBjbGllbnRXaWR0aCA9IHRhcmdldC5jbGllbnRXaWR0aDtcbiAgICB2YXIgY2xpZW50SGVpZ2h0ID0gdGFyZ2V0LmNsaWVudEhlaWdodDtcblxuICAgIC8vIEJ5IHRoaXMgY29uZGl0aW9uIHdlIGNhbiBjYXRjaCBhbGwgbm9uLXJlcGxhY2VkIGlubGluZSwgaGlkZGVuIGFuZFxuICAgIC8vIGRldGFjaGVkIGVsZW1lbnRzLiBUaG91Z2ggZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGxlc3NcbiAgICAvLyB0aGFuIDAuNSB3aWxsIGJlIGRpc2NhcmRlZCBhcyB3ZWxsLlxuICAgIC8vXG4gICAgLy8gV2l0aG91dCBpdCB3ZSB3b3VsZCBuZWVkIHRvIGltcGxlbWVudCBzZXBhcmF0ZSBtZXRob2RzIGZvciBlYWNoIG9mXG4gICAgLy8gdGhvc2UgY2FzZXMgYW5kIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHBlcmZvcm0gYSBwcmVjaXNlIGFuZCBwZXJmb3JtYW5jZVxuICAgIC8vIGVmZmVjdGl2ZSB0ZXN0IGZvciBoaWRkZW4gZWxlbWVudHMuIEUuZy4gZXZlbiBqUXVlcnkncyAnOnZpc2libGUnIGZpbHRlclxuICAgIC8vIGdpdmVzIHdyb25nIHJlc3VsdHMgZm9yIGVsZW1lbnRzIHdpdGggd2lkdGggJiBoZWlnaHQgbGVzcyB0aGFuIDAuNS5cbiAgICBpZiAoIWNsaWVudFdpZHRoICYmICFjbGllbnRIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0gZ2V0V2luZG93T2YodGFyZ2V0KS5nZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XG4gICAgdmFyIHBhZGRpbmdzID0gZ2V0UGFkZGluZ3Moc3R5bGVzKTtcbiAgICB2YXIgaG9yaXpQYWQgPSBwYWRkaW5ncy5sZWZ0ICsgcGFkZGluZ3MucmlnaHQ7XG4gICAgdmFyIHZlcnRQYWQgPSBwYWRkaW5ncy50b3AgKyBwYWRkaW5ncy5ib3R0b207XG5cbiAgICAvLyBDb21wdXRlZCBzdHlsZXMgb2Ygd2lkdGggJiBoZWlnaHQgYXJlIGJlaW5nIHVzZWQgYmVjYXVzZSB0aGV5IGFyZSB0aGVcbiAgICAvLyBvbmx5IGRpbWVuc2lvbnMgYXZhaWxhYmxlIHRvIEpTIHRoYXQgY29udGFpbiBub24tcm91bmRlZCB2YWx1ZXMuIEl0IGNvdWxkXG4gICAgLy8gYmUgcG9zc2libGUgdG8gdXRpbGl6ZSB0aGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlmIG9ubHkgaXQncyBkYXRhIHdhc24ndFxuICAgIC8vIGFmZmVjdGVkIGJ5IENTUyB0cmFuc2Zvcm1hdGlvbnMgbGV0IGFsb25lIHBhZGRpbmdzLCBib3JkZXJzIGFuZCBzY3JvbGwgYmFycy5cbiAgICB2YXIgd2lkdGggPSB0b0Zsb2F0KHN0eWxlcy53aWR0aCksXG4gICAgICAgIGhlaWdodCA9IHRvRmxvYXQoc3R5bGVzLmhlaWdodCk7XG5cbiAgICAvLyBXaWR0aCAmIGhlaWdodCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHdoZW4gdGhlICdib3JkZXItYm94JyBib3hcbiAgICAvLyBtb2RlbCBpcyBhcHBsaWVkIChleGNlcHQgZm9yIElFKS5cbiAgICBpZiAoc3R5bGVzLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIC8vIEZvbGxvd2luZyBjb25kaXRpb25zIGFyZSByZXF1aXJlZCB0byBoYW5kbGUgSW50ZXJuZXQgRXhwbG9yZXIgd2hpY2hcbiAgICAgICAgLy8gZG9lc24ndCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHRvIGNvbXB1dGVkIENTUyBkaW1lbnNpb25zLlxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBjYW4gc2F5IHRoYXQgaWYgQ1NTIGRpbWVuc2lvbnMgKyBwYWRkaW5ncyBhcmUgZXF1YWwgdG8gdGhlIFwiY2xpZW50XCJcbiAgICAgICAgLy8gcHJvcGVydGllcyB0aGVuIGl0J3MgZWl0aGVyIElFLCBhbmQgdGh1cyB3ZSBkb24ndCBuZWVkIHRvIHN1YnRyYWN0XG4gICAgICAgIC8vIGFueXRoaW5nLCBvciBhbiBlbGVtZW50IG1lcmVseSBkb2Vzbid0IGhhdmUgcGFkZGluZ3MvYm9yZGVycyBzdHlsZXMuXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpICE9PSBjbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgd2lkdGggLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAnbGVmdCcsICdyaWdodCcpICsgaG9yaXpQYWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5yb3VuZChoZWlnaHQgKyB2ZXJ0UGFkKSAhPT0gY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICBoZWlnaHQgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAndG9wJywgJ2JvdHRvbScpICsgdmVydFBhZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvbGxvd2luZyBzdGVwcyBjYW4ndCBiZSBhcHBsaWVkIHRvIHRoZSBkb2N1bWVudCdzIHJvb3QgZWxlbWVudCBhcyBpdHNcbiAgICAvLyBjbGllbnRbV2lkdGgvSGVpZ2h0XSBwcm9wZXJ0aWVzIHJlcHJlc2VudCB2aWV3cG9ydCBhcmVhIG9mIHRoZSB3aW5kb3cuXG4gICAgLy8gQmVzaWRlcywgaXQncyBhcyB3ZWxsIG5vdCBuZWNlc3NhcnkgYXMgdGhlIDxodG1sPiBpdHNlbGYgbmVpdGhlciBoYXNcbiAgICAvLyByZW5kZXJlZCBzY3JvbGwgYmFycyBub3IgaXQgY2FuIGJlIGNsaXBwZWQuXG4gICAgaWYgKCFpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMgKG9ubHkgaW4gRmlyZWZveCwgYWN0dWFsbHkpIENTUyB3aWR0aCAmIGhlaWdodFxuICAgICAgICAvLyBpbmNsdWRlIHNjcm9sbCBiYXJzIHNpemUgd2hpY2ggY2FuIGJlIHJlbW92ZWQgYXQgdGhpcyBzdGVwIGFzIHNjcm9sbFxuICAgICAgICAvLyBiYXJzIGFyZSB0aGUgb25seSBkaWZmZXJlbmNlIGJldHdlZW4gcm91bmRlZCBkaW1lbnNpb25zICsgcGFkZGluZ3NcbiAgICAgICAgLy8gYW5kIFwiY2xpZW50XCIgcHJvcGVydGllcywgdGhvdWdoIHRoYXQgaXMgbm90IGFsd2F5cyB0cnVlIGluIENocm9tZS5cbiAgICAgICAgdmFyIHZlcnRTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpIC0gY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBob3JpelNjcm9sbGJhciA9IE1hdGgucm91bmQoaGVpZ2h0ICsgdmVydFBhZCkgLSBjbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgLy8gQ2hyb21lIGhhcyBhIHJhdGhlciB3ZWlyZCByb3VuZGluZyBvZiBcImNsaWVudFwiIHByb3BlcnRpZXMuXG4gICAgICAgIC8vIEUuZy4gZm9yIGFuIGVsZW1lbnQgd2l0aCBjb250ZW50IHdpZHRoIG9mIDMxNC4ycHggaXQgc29tZXRpbWVzIGdpdmVzXG4gICAgICAgIC8vIHRoZSBjbGllbnQgd2lkdGggb2YgMzE1cHggYW5kIGZvciB0aGUgd2lkdGggb2YgMzE0LjdweCBpdCBtYXkgZ2l2ZVxuICAgICAgICAvLyAzMTRweC4gQW5kIGl0IGRvZXNuJ3QgaGFwcGVuIGFsbCB0aGUgdGltZS4gU28ganVzdCBpZ25vcmUgdGhpcyBkZWx0YVxuICAgICAgICAvLyBhcyBhIG5vbi1yZWxldmFudC5cbiAgICAgICAgaWYgKE1hdGguYWJzKHZlcnRTY3JvbGxiYXIpICE9PSAxKSB7XG4gICAgICAgICAgICB3aWR0aCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKGhvcml6U2Nyb2xsYmFyKSAhPT0gMSkge1xuICAgICAgICAgICAgaGVpZ2h0IC09IGhvcml6U2Nyb2xsYmFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KHBhZGRpbmdzLmxlZnQsIHBhZGRpbmdzLnRvcCwgd2lkdGgsIGhlaWdodCk7XG59XG5cbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGFuIGluc3RhbmNlIG9mIHRoZSBTVkdHcmFwaGljc0VsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG52YXIgaXNTVkdHcmFwaGljc0VsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIFNvbWUgYnJvd3NlcnMsIG5hbWVseSBJRSBhbmQgRWRnZSwgZG9uJ3QgaGF2ZSB0aGUgU1ZHR3JhcGhpY3NFbGVtZW50XG4gICAgLy8gaW50ZXJmYWNlLlxuICAgIGlmICh0eXBlb2YgU1ZHR3JhcGhpY3NFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5TVkdHcmFwaGljc0VsZW1lbnQ7IH07XG4gICAgfVxuXG4gICAgLy8gSWYgaXQncyBzbywgdGhlbiBjaGVjayB0aGF0IGVsZW1lbnQgaXMgYXQgbGVhc3QgYW4gaW5zdGFuY2Ugb2YgdGhlXG4gICAgLy8gU1ZHRWxlbWVudCBhbmQgdGhhdCBpdCBoYXMgdGhlIFwiZ2V0QkJveFwiIG1ldGhvZC5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHRWxlbWVudCAmJiB0eXBlb2YgdGFyZ2V0LmdldEJCb3ggPT09ICdmdW5jdGlvbic7IH07XG59KSgpO1xuXG4vKipcclxuICogQ2hlY2tzIHdoZXRoZXIgcHJvdmlkZWQgZWxlbWVudCBpcyBhIGRvY3VtZW50IGVsZW1lbnQgKDxodG1sPikuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5mdW5jdGlvbiBpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0ID09PSBnZXRXaW5kb3dPZih0YXJnZXQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYW4gYXBwcm9wcmlhdGUgY29udGVudCByZWN0YW5nbGUgZm9yIHByb3ZpZGVkIGh0bWwgb3Igc3ZnIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkcyB0byBiZSBjYWxjdWxhdGVkLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gZ2V0Q29udGVudFJlY3QodGFyZ2V0KSB7XG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcbiAgICB9XG5cbiAgICBpZiAoaXNTVkdHcmFwaGljc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gZ2V0U1ZHQ29udGVudFJlY3QodGFyZ2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpO1xufVxuXG4vKipcclxuICogQ3JlYXRlcyByZWN0YW5nbGUgd2l0aCBhbiBpbnRlcmZhY2Ugb2YgdGhlIERPTVJlY3RSZWFkT25seS5cclxuICogU3BlYzogaHR0cHM6Ly9kcmFmdHMuZnh0Zi5vcmcvZ2VvbWV0cnkvI2RvbXJlY3RyZWFkb25seVxyXG4gKlxyXG4gKiBAcGFyYW0ge0RPTVJlY3RJbml0fSByZWN0SW5pdCAtIE9iamVjdCB3aXRoIHJlY3RhbmdsZSdzIHgveSBjb29yZGluYXRlcyBhbmQgZGltZW5zaW9ucy5cclxuICogQHJldHVybnMge0RPTVJlY3RSZWFkT25seX1cclxuICovXG5mdW5jdGlvbiBjcmVhdGVSZWFkT25seVJlY3QocmVmKSB7XG4gICAgdmFyIHggPSByZWYueDtcbiAgICB2YXIgeSA9IHJlZi55O1xuICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgIC8vIElmIERPTVJlY3RSZWFkT25seSBpcyBhdmFpbGFibGUgdXNlIGl0IGFzIGEgcHJvdG90eXBlIGZvciB0aGUgcmVjdGFuZ2xlLlxuICAgIHZhciBDb25zdHIgPSB0eXBlb2YgRE9NUmVjdFJlYWRPbmx5ICE9PSAndW5kZWZpbmVkJyA/IERPTVJlY3RSZWFkT25seSA6IE9iamVjdDtcbiAgICB2YXIgcmVjdCA9IE9iamVjdC5jcmVhdGUoQ29uc3RyLnByb3RvdHlwZSk7XG5cbiAgICAvLyBSZWN0YW5nbGUncyBwcm9wZXJ0aWVzIGFyZSBub3Qgd3JpdGFibGUgYW5kIG5vbi1lbnVtZXJhYmxlLlxuICAgIGRlZmluZUNvbmZpZ3VyYWJsZShyZWN0LCB7XG4gICAgICAgIHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHRvcDogeSxcbiAgICAgICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICAgICAgYm90dG9tOiBoZWlnaHQgKyB5LFxuICAgICAgICBsZWZ0OiB4XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVjdDtcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgRE9NUmVjdEluaXQgb2JqZWN0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkaW1lbnNpb25zIGFuZCB0aGUgeC95IGNvb3JkaW5hdGVzLlxyXG4gKiBTcGVjOiBodHRwczovL2RyYWZ0cy5meHRmLm9yZy9nZW9tZXRyeS8jZGljdGRlZi1kb21yZWN0aW5pdFxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFggY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZIGNvb3JkaW5hdGUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFJlY3RhbmdsZSdzIHdpZHRoLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gUmVjdGFuZ2xlJ3MgaGVpZ2h0LlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVjdEluaXQoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcbn1cblxuLyoqXHJcbiAqIENsYXNzIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGF0aW9ucyBvZiB0aGUgY29udGVudCByZWN0YW5nbGUgb2ZcclxuICogcHJvdmlkZWQgRE9NIGVsZW1lbnQgYW5kIGZvciBrZWVwaW5nIHRyYWNrIG9mIGl0J3MgY2hhbmdlcy5cclxuICovXG52YXIgUmVzaXplT2JzZXJ2YXRpb24gPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICB0aGlzLmJyb2FkY2FzdFdpZHRoID0gMDtcbiAgICB0aGlzLmJyb2FkY2FzdEhlaWdodCA9IDA7XG4gICAgdGhpcy5jb250ZW50UmVjdF8gPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcblxuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xufTtcblxuLyoqXHJcbiAqIFVwZGF0ZXMgY29udGVudCByZWN0YW5nbGUgYW5kIHRlbGxzIHdoZXRoZXIgaXQncyB3aWR0aCBvciBoZWlnaHQgcHJvcGVydGllc1xyXG4gKiBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYnJvYWRjYXN0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5cblxuLyoqXHJcbiAqIFJlZmVyZW5jZSB0byB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICpcclxuICogQHByaXZhdGUge0RPTVJlY3RJbml0fVxyXG4gKi9cblxuXG4vKipcclxuICogQnJvYWRjYXN0ZWQgd2lkdGggb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xuUmVzaXplT2JzZXJ2YXRpb24ucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q29udGVudFJlY3QodGhpcy50YXJnZXQpO1xuXG4gICAgdGhpcy5jb250ZW50UmVjdF8gPSByZWN0O1xuXG4gICAgcmV0dXJuIHJlY3Qud2lkdGggIT09IHRoaXMuYnJvYWRjYXN0V2lkdGggfHwgcmVjdC5oZWlnaHQgIT09IHRoaXMuYnJvYWRjYXN0SGVpZ2h0O1xufTtcblxuLyoqXHJcbiAqIFVwZGF0ZXMgJ2Jyb2FkY2FzdFdpZHRoJyBhbmQgJ2Jyb2FkY2FzdEhlaWdodCcgcHJvcGVydGllcyB3aXRoIGEgZGF0YVxyXG4gKiBmcm9tIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnRpZXMgb2YgdGhlIGxhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH0gTGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICovXG5SZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuYnJvYWRjYXN0UmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVjdCA9IHRoaXMuY29udGVudFJlY3RfO1xuXG4gICAgdGhpcy5icm9hZGNhc3RXaWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSByZWN0LmhlaWdodDtcblxuICAgIHJldHVybiByZWN0O1xufTtcblxudmFyIFJlc2l6ZU9ic2VydmVyRW50cnkgPSBmdW5jdGlvbih0YXJnZXQsIHJlY3RJbml0KSB7XG4gICAgdmFyIGNvbnRlbnRSZWN0ID0gY3JlYXRlUmVhZE9ubHlSZWN0KHJlY3RJbml0KTtcblxuICAgIC8vIEFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgbm90IHdyaXRhYmxlXG4gICAgLy8gYW5kIGFyZSBhbHNvIG5vdCBlbnVtZXJhYmxlIGluIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24uXG4gICAgLy9cbiAgICAvLyBQcm9wZXJ0eSBhY2Nlc3NvcnMgYXJlIG5vdCBiZWluZyB1c2VkIGFzIHRoZXknZCByZXF1aXJlIHRvIGRlZmluZSBhXG4gICAgLy8gcHJpdmF0ZSBXZWFrTWFwIHN0b3JhZ2Ugd2hpY2ggbWF5IGNhdXNlIG1lbW9yeSBsZWFrcyBpbiBicm93c2VycyB0aGF0XG4gICAgLy8gZG9uJ3Qgc3VwcG9ydCB0aGlzIHR5cGUgb2YgY29sbGVjdGlvbnMuXG4gICAgZGVmaW5lQ29uZmlndXJhYmxlKHRoaXMsIHsgdGFyZ2V0OiB0YXJnZXQsIGNvbnRlbnRSZWN0OiBjb250ZW50UmVjdCB9KTtcbn07XG5cbnZhciBSZXNpemVPYnNlcnZlclNQSSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250cm9sbGVyLCBjYWxsYmFja0N0eCkge1xuICAgIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXyA9IFtdO1xuICAgIHRoaXMub2JzZXJ2YXRpb25zXyA9IG5ldyBNYXBTaGltKCk7XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbGxiYWNrXyA9IGNhbGxiYWNrO1xuICAgIHRoaXMuY29udHJvbGxlcl8gPSBjb250cm9sbGVyO1xuICAgIHRoaXMuY2FsbGJhY2tDdHhfID0gY2FsbGJhY2tDdHg7XG59O1xuXG4vKipcclxuICogU3RhcnRzIG9ic2VydmluZyBwcm92aWRlZCBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgb2JzZXJ2ZWQuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblxuXG4vKipcclxuICogUmVnaXN0cnkgb2YgdGhlIFJlc2l6ZU9ic2VydmF0aW9uIGluc3RhbmNlcy5cclxuICpcclxuICogQHByaXZhdGUge01hcDxFbGVtZW50LCBSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAqL1xuXG5cbi8qKlxyXG4gKiBQdWJsaWMgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2Ugd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrXHJcbiAqIGZ1bmN0aW9uIGFuZCB1c2VkIGFzIGEgdmFsdWUgb2YgaXQncyBcInRoaXNcIiBiaW5kaW5nLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZSB7UmVzaXplT2JzZXJ2ZXJ9XHJcbiAqL1xuXG4vKipcclxuICogQ29sbGVjdGlvbiBvZiByZXNpemUgb2JzZXJ2YXRpb25zIHRoYXQgaGF2ZSBkZXRlY3RlZCBjaGFuZ2VzIGluIGRpbWVuc2lvbnNcclxuICogb2YgZWxlbWVudHMuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtBcnJheTxSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4nKTtcbiAgICB9XG5cbiAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cbiAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuRWxlbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgXCJFbGVtZW50XCIuJyk7XG4gICAgfVxuXG4gICAgdmFyIG9ic2VydmF0aW9ucyA9IHRoaXMub2JzZXJ2YXRpb25zXztcblxuICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIG9ic2VydmVkLlxuICAgIGlmIChvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9ic2VydmF0aW9ucy5zZXQodGFyZ2V0LCBuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0KSk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXJfLmFkZE9ic2VydmVyKHRoaXMpO1xuXG4gICAgLy8gRm9yY2UgdGhlIHVwZGF0ZSBvZiBvYnNlcnZhdGlvbnMuXG4gICAgdGhpcy5jb250cm9sbGVyXy5yZWZyZXNoKCk7XG59O1xuXG4vKipcclxuICogU3RvcHMgb2JzZXJ2aW5nIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBzdG9wIG9ic2VydmluZy5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xuICAgIH1cblxuICAgIC8vIERvIG5vdGhpbmcgaWYgY3VycmVudCBlbnZpcm9ubWVudCBkb2Vzbid0IGhhdmUgdGhlIEVsZW1lbnQgaW50ZXJmYWNlLlxuICAgIGlmICh0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgIShFbGVtZW50IGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5FbGVtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSBcIkVsZW1lbnRcIi4nKTtcbiAgICB9XG5cbiAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xuXG4gICAgLy8gRG8gbm90aGluZyBpZiBlbGVtZW50IGlzIG5vdCBiZWluZyBvYnNlcnZlZC5cbiAgICBpZiAoIW9ic2VydmF0aW9ucy5oYXModGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb2JzZXJ2YXRpb25zLmRlbGV0ZSh0YXJnZXQpO1xuXG4gICAgaWYgKCFvYnNlcnZhdGlvbnMuc2l6ZSkge1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBTdG9wcyBvYnNlcnZpbmcgYWxsIGVsZW1lbnRzLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XG4gICAgdGhpcy5vYnNlcnZhdGlvbnNfLmNsZWFyKCk7XG4gICAgdGhpcy5jb250cm9sbGVyXy5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbn07XG5cbi8qKlxyXG4gKiBDb2xsZWN0cyBvYnNlcnZhdGlvbiBpbnN0YW5jZXMgdGhlIGFzc29jaWF0ZWQgZWxlbWVudCBvZiB3aGljaCBoYXMgY2hhbmdlZFxyXG4gKiBpdCdzIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZ2F0aGVyQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcblxuICAgIHRoaXMub2JzZXJ2YXRpb25zXy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xuICAgICAgICBpZiAob2JzZXJ2YXRpb24uaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgdGhpcyQxLmFjdGl2ZU9ic2VydmF0aW9uc18ucHVzaChvYnNlcnZhdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbi8qKlxyXG4gKiBJbnZva2VzIGluaXRpYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBhIGxpc3Qgb2YgUmVzaXplT2JzZXJ2ZXJFbnRyeVxyXG4gKiBpbnN0YW5jZXMgY29sbGVjdGVkIGZyb20gYWN0aXZlIHJlc2l6ZSBvYnNlcnZhdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5icm9hZGNhc3RBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiBvYnNlcnZlciBkb2Vzbid0IGhhdmUgYWN0aXZlIG9ic2VydmF0aW9ucy5cbiAgICBpZiAoIXRoaXMuaGFzQWN0aXZlKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjdHggPSB0aGlzLmNhbGxiYWNrQ3R4XztcblxuICAgIC8vIENyZWF0ZSBSZXNpemVPYnNlcnZlckVudHJ5IGluc3RhbmNlIGZvciBldmVyeSBhY3RpdmUgb2JzZXJ2YXRpb24uXG4gICAgdmFyIGVudHJpZXMgPSB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubWFwKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob2JzZXJ2YXRpb24udGFyZ2V0LCBvYnNlcnZhdGlvbi5icm9hZGNhc3RSZWN0KCkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jYWxsYmFja18uY2FsbChjdHgsIGVudHJpZXMsIGN0eCk7XG4gICAgdGhpcy5jbGVhckFjdGl2ZSgpO1xufTtcblxuLyoqXHJcbiAqIENsZWFycyB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuY2xlYXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnNwbGljZSgwKTtcbn07XG5cbi8qKlxyXG4gKiBUZWxscyB3aGV0aGVyIG9ic2VydmVyIGhhcyBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuaGFzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubGVuZ3RoID4gMDtcbn07XG5cbi8vIFJlZ2lzdHJ5IG9mIGludGVybmFsIG9ic2VydmVycy4gSWYgV2Vha01hcCBpcyBub3QgYXZhaWxhYmxlIHVzZSBjdXJyZW50IHNoaW1cbi8vIGZvciB0aGUgTWFwIGNvbGxlY3Rpb24gYXMgaXQgaGFzIGFsbCByZXF1aXJlZCBtZXRob2RzIGFuZCBiZWNhdXNlIFdlYWtNYXBcbi8vIGNhbid0IGJlIGZ1bGx5IHBvbHlmaWxsZWQgYW55d2F5LlxudmFyIG9ic2VydmVycyA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyA/IG5ldyBXZWFrTWFwKCkgOiBuZXcgTWFwU2hpbSgpO1xuXG4vKipcclxuICogUmVzaXplT2JzZXJ2ZXIgQVBJLiBFbmNhcHN1bGF0ZXMgdGhlIFJlc2l6ZU9ic2VydmVyIFNQSSBpbXBsZW1lbnRhdGlvblxyXG4gKiBleHBvc2luZyBvbmx5IHRob3NlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgdGhhdCBhcmUgZGVmaW5lZCBpbiB0aGUgc3BlYy5cclxuICovXG52YXIgUmVzaXplT2JzZXJ2ZXIgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNpemVPYnNlcnZlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uLicpO1xuICAgIH1cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xuICAgIH1cblxuICAgIHZhciBjb250cm9sbGVyID0gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCB0aGlzKTtcblxuICAgIG9ic2VydmVycy5zZXQodGhpcywgb2JzZXJ2ZXIpO1xufTtcblxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzIG9mIFJlc2l6ZU9ic2VydmVyLlxuWydvYnNlcnZlJywgJ3Vub2JzZXJ2ZScsICdkaXNjb25uZWN0J10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAocmVmID0gb2JzZXJ2ZXJzLmdldCh0aGlzKSlbbWV0aG9kXS5hcHBseShyZWYsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciByZWY7XG4gICAgfTtcbn0pO1xuXG52YXIgaW5kZXggPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIEV4cG9ydCBleGlzdGluZyBpbXBsZW1lbnRhdGlvbiBpZiBhdmFpbGFibGUuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwkMS5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbCQxLlJlc2l6ZU9ic2VydmVyO1xuICAgIH1cblxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlcjtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocm9vdCwgbikge1xuICB2YXIgbm9kZSA9IG47XG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUgPT09IHJvb3QpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gYWRkRXZlbnRMaXN0ZW5lcjtcblxudmFyIF9FdmVudE9iamVjdCA9IHJlcXVpcmUoJy4vRXZlbnRPYmplY3QnKTtcblxudmFyIF9FdmVudE9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FdmVudE9iamVjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiB3cmFwQ2FsbGJhY2soZSkge1xuICAgIHZhciBuZSA9IG5ldyBfRXZlbnRPYmplY3QyW1wiZGVmYXVsdFwiXShlKTtcbiAgICBjYWxsYmFjay5jYWxsKHRhcmdldCwgbmUpO1xuICB9XG5cbiAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCB3cmFwQ2FsbGJhY2ssIGZhbHNlKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgd3JhcENhbGxiYWNrLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICB0YXJnZXQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgd3JhcENhbGxiYWNrKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCB3cmFwQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9FdmVudEJhc2VPYmplY3QgPSByZXF1aXJlKCcuL0V2ZW50QmFzZU9iamVjdCcpO1xuXG52YXIgX0V2ZW50QmFzZU9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FdmVudEJhc2VPYmplY3QpO1xuXG52YXIgX29iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9vYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0QXNzaWduKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbi8qKlxuICogQGlnbm9yZVxuICogZXZlbnQgb2JqZWN0IGZvciBkb21cbiAqIEBhdXRob3IgeWltaW5naGVAZ21haWwuY29tXG4gKi9cblxudmFyIFRSVUUgPSB0cnVlO1xudmFyIEZBTFNFID0gZmFsc2U7XG52YXIgY29tbW9uUHJvcHMgPSBbJ2FsdEtleScsICdidWJibGVzJywgJ2NhbmNlbGFibGUnLCAnY3RybEtleScsICdjdXJyZW50VGFyZ2V0JywgJ2V2ZW50UGhhc2UnLCAnbWV0YUtleScsICdzaGlmdEtleScsICd0YXJnZXQnLCAndGltZVN0YW1wJywgJ3ZpZXcnLCAndHlwZSddO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZCh3KSB7XG4gIHJldHVybiB3ID09PSBudWxsIHx8IHcgPT09IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50Tm9ybWFsaXplcnMgPSBbe1xuICByZWc6IC9ea2V5LyxcbiAgcHJvcHM6IFsnY2hhcicsICdjaGFyQ29kZScsICdrZXknLCAna2V5Q29kZScsICd3aGljaCddLFxuICBmaXg6IGZ1bmN0aW9uIGZpeChldmVudCwgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoZXZlbnQud2hpY2gpKSB7XG4gICAgICBldmVudC53aGljaCA9ICFpc051bGxPclVuZGVmaW5lZChuYXRpdmVFdmVudC5jaGFyQ29kZSkgPyBuYXRpdmVFdmVudC5jaGFyQ29kZSA6IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gICAgfVxuXG4gICAgLy8gYWRkIG1ldGFLZXkgdG8gbm9uLU1hYyBicm93c2VycyAodXNlIGN0cmwgZm9yIFBDICdzIGFuZCBNZXRhIGZvciBNYWNzKVxuICAgIGlmIChldmVudC5tZXRhS2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGV2ZW50Lm1ldGFLZXkgPSBldmVudC5jdHJsS2V5O1xuICAgIH1cbiAgfVxufSwge1xuICByZWc6IC9edG91Y2gvLFxuICBwcm9wczogWyd0b3VjaGVzJywgJ2NoYW5nZWRUb3VjaGVzJywgJ3RhcmdldFRvdWNoZXMnXVxufSwge1xuICByZWc6IC9eaGFzaGNoYW5nZSQvLFxuICBwcm9wczogWyduZXdVUkwnLCAnb2xkVVJMJ11cbn0sIHtcbiAgcmVnOiAvXmdlc3R1cmVjaGFuZ2UkL2ksXG4gIHByb3BzOiBbJ3JvdGF0aW9uJywgJ3NjYWxlJ11cbn0sIHtcbiAgcmVnOiAvXihtb3VzZXdoZWVsfERPTU1vdXNlU2Nyb2xsKSQvLFxuICBwcm9wczogW10sXG4gIGZpeDogZnVuY3Rpb24gZml4KGV2ZW50LCBuYXRpdmVFdmVudCkge1xuICAgIHZhciBkZWx0YVggPSB2b2lkIDA7XG4gICAgdmFyIGRlbHRhWSA9IHZvaWQgMDtcbiAgICB2YXIgZGVsdGEgPSB2b2lkIDA7XG4gICAgdmFyIHdoZWVsRGVsdGEgPSBuYXRpdmVFdmVudC53aGVlbERlbHRhO1xuICAgIHZhciBheGlzID0gbmF0aXZlRXZlbnQuYXhpcztcbiAgICB2YXIgd2hlZWxEZWx0YVkgPSBuYXRpdmVFdmVudC53aGVlbERlbHRhWTtcbiAgICB2YXIgd2hlZWxEZWx0YVggPSBuYXRpdmVFdmVudC53aGVlbERlbHRhWDtcbiAgICB2YXIgZGV0YWlsID0gbmF0aXZlRXZlbnQuZGV0YWlsO1xuXG4gICAgLy8gaWUvd2Via2l0XG4gICAgaWYgKHdoZWVsRGVsdGEpIHtcbiAgICAgIGRlbHRhID0gd2hlZWxEZWx0YSAvIDEyMDtcbiAgICB9XG5cbiAgICAvLyBnZWNrb1xuICAgIGlmIChkZXRhaWwpIHtcbiAgICAgIC8vIHByZXNzIGNvbnRyb2wgZS5kZXRhaWwgPT0gMSBlbHNlIGUuZGV0YWlsID09IDNcbiAgICAgIGRlbHRhID0gMCAtIChkZXRhaWwgJSAzID09PSAwID8gZGV0YWlsIC8gMyA6IGRldGFpbCk7XG4gICAgfVxuXG4gICAgLy8gR2Vja29cbiAgICBpZiAoYXhpcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYXhpcyA9PT0gZXZlbnQuSE9SSVpPTlRBTF9BWElTKSB7XG4gICAgICAgIGRlbHRhWSA9IDA7XG4gICAgICAgIGRlbHRhWCA9IDAgLSBkZWx0YTtcbiAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gZXZlbnQuVkVSVElDQUxfQVhJUykge1xuICAgICAgICBkZWx0YVggPSAwO1xuICAgICAgICBkZWx0YVkgPSBkZWx0YTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZWJraXRcbiAgICBpZiAod2hlZWxEZWx0YVkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVsdGFZID0gd2hlZWxEZWx0YVkgLyAxMjA7XG4gICAgfVxuICAgIGlmICh3aGVlbERlbHRhWCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWx0YVggPSAtMSAqIHdoZWVsRGVsdGFYIC8gMTIwO1xuICAgIH1cblxuICAgIC8vIOm7mOiupCBkZWx0YVkgKGllKVxuICAgIGlmICghZGVsdGFYICYmICFkZWx0YVkpIHtcbiAgICAgIGRlbHRhWSA9IGRlbHRhO1xuICAgIH1cblxuICAgIGlmIChkZWx0YVggIT09IHVuZGVmaW5lZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBkZWx0YVggb2YgbW91c2V3aGVlbCBldmVudFxuICAgICAgICogQHByb3BlcnR5IGRlbHRhWFxuICAgICAgICogQG1lbWJlciBFdmVudC5Eb21FdmVudC5PYmplY3RcbiAgICAgICAqL1xuICAgICAgZXZlbnQuZGVsdGFYID0gZGVsdGFYO1xuICAgIH1cblxuICAgIGlmIChkZWx0YVkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBkZWx0YVkgb2YgbW91c2V3aGVlbCBldmVudFxuICAgICAgICogQHByb3BlcnR5IGRlbHRhWVxuICAgICAgICogQG1lbWJlciBFdmVudC5Eb21FdmVudC5PYmplY3RcbiAgICAgICAqL1xuICAgICAgZXZlbnQuZGVsdGFZID0gZGVsdGFZO1xuICAgIH1cblxuICAgIGlmIChkZWx0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvKipcbiAgICAgICAqIGRlbHRhIG9mIG1vdXNld2hlZWwgZXZlbnRcbiAgICAgICAqIEBwcm9wZXJ0eSBkZWx0YVxuICAgICAgICogQG1lbWJlciBFdmVudC5Eb21FdmVudC5PYmplY3RcbiAgICAgICAqL1xuICAgICAgZXZlbnQuZGVsdGEgPSBkZWx0YTtcbiAgICB9XG4gIH1cbn0sIHtcbiAgcmVnOiAvXm1vdXNlfGNvbnRleHRtZW51fGNsaWNrfG1zcG9pbnRlcnwoXkRPTU1vdXNlU2Nyb2xsJCkvaSxcbiAgcHJvcHM6IFsnYnV0dG9ucycsICdjbGllbnRYJywgJ2NsaWVudFknLCAnYnV0dG9uJywgJ29mZnNldFgnLCAncmVsYXRlZFRhcmdldCcsICd3aGljaCcsICdmcm9tRWxlbWVudCcsICd0b0VsZW1lbnQnLCAnb2Zmc2V0WScsICdwYWdlWCcsICdwYWdlWScsICdzY3JlZW5YJywgJ3NjcmVlblknXSxcbiAgZml4OiBmdW5jdGlvbiBmaXgoZXZlbnQsIG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGV2ZW50RG9jID0gdm9pZCAwO1xuICAgIHZhciBkb2MgPSB2b2lkIDA7XG4gICAgdmFyIGJvZHkgPSB2b2lkIDA7XG4gICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICB2YXIgYnV0dG9uID0gbmF0aXZlRXZlbnQuYnV0dG9uO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxuICAgIGlmICh0YXJnZXQgJiYgaXNOdWxsT3JVbmRlZmluZWQoZXZlbnQucGFnZVgpICYmICFpc051bGxPclVuZGVmaW5lZChuYXRpdmVFdmVudC5jbGllbnRYKSkge1xuICAgICAgZXZlbnREb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbiAgICAgIGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIGJvZHkgPSBldmVudERvYy5ib2R5O1xuICAgICAgZXZlbnQucGFnZVggPSBuYXRpdmVFdmVudC5jbGllbnRYICsgKGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwKSAtIChkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCk7XG4gICAgICBldmVudC5wYWdlWSA9IG5hdGl2ZUV2ZW50LmNsaWVudFkgKyAoZG9jICYmIGRvYy5zY3JvbGxUb3AgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCB8fCAwKSAtIChkb2MgJiYgZG9jLmNsaWVudFRvcCB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wIHx8IDApO1xuICAgIH1cblxuICAgIC8vIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuICAgIC8vIGRvIG5vdCB1c2UgYnV0dG9uXG4gICAgaWYgKCFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGJ1dHRvbiAmIDEpIHtcbiAgICAgICAgZXZlbnQud2hpY2ggPSAxO1xuICAgICAgfSBlbHNlIGlmIChidXR0b24gJiAyKSB7XG4gICAgICAgIGV2ZW50LndoaWNoID0gMztcbiAgICAgIH0gZWxzZSBpZiAoYnV0dG9uICYgNCkge1xuICAgICAgICBldmVudC53aGljaCA9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC53aGljaCA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkIHJlbGF0ZWRUYXJnZXQsIGlmIG5lY2Vzc2FyeVxuICAgIGlmICghZXZlbnQucmVsYXRlZFRhcmdldCAmJiBldmVudC5mcm9tRWxlbWVudCkge1xuICAgICAgZXZlbnQucmVsYXRlZFRhcmdldCA9IGV2ZW50LmZyb21FbGVtZW50ID09PSB0YXJnZXQgPyBldmVudC50b0VsZW1lbnQgOiBldmVudC5mcm9tRWxlbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbn1dO1xuXG5mdW5jdGlvbiByZXRUcnVlKCkge1xuICByZXR1cm4gVFJVRTtcbn1cblxuZnVuY3Rpb24gcmV0RmFsc2UoKSB7XG4gIHJldHVybiBGQUxTRTtcbn1cblxuZnVuY3Rpb24gRG9tRXZlbnRPYmplY3QobmF0aXZlRXZlbnQpIHtcbiAgdmFyIHR5cGUgPSBuYXRpdmVFdmVudC50eXBlO1xuXG4gIHZhciBpc05hdGl2ZSA9IHR5cGVvZiBuYXRpdmVFdmVudC5zdG9wUHJvcGFnYXRpb24gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIG5hdGl2ZUV2ZW50LmNhbmNlbEJ1YmJsZSA9PT0gJ2Jvb2xlYW4nO1xuXG4gIF9FdmVudEJhc2VPYmplY3QyW1wiZGVmYXVsdFwiXS5jYWxsKHRoaXMpO1xuXG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICAvLyBpbiBjYXNlIGRvbSBldmVudCBoYXMgYmVlbiBtYXJrIGFzIGRlZmF1bHQgcHJldmVudGVkIGJ5IGxvd2VyIGRvbSBub2RlXG4gIHZhciBpc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXRGYWxzZTtcbiAgaWYgKCdkZWZhdWx0UHJldmVudGVkJyBpbiBuYXRpdmVFdmVudCkge1xuICAgIGlzRGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPyByZXRUcnVlIDogcmV0RmFsc2U7XG4gIH0gZWxzZSBpZiAoJ2dldFByZXZlbnREZWZhdWx0JyBpbiBuYXRpdmVFdmVudCkge1xuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5MTE1MVxuICAgIGlzRGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LmdldFByZXZlbnREZWZhdWx0KCkgPyByZXRUcnVlIDogcmV0RmFsc2U7XG4gIH0gZWxzZSBpZiAoJ3JldHVyblZhbHVlJyBpbiBuYXRpdmVFdmVudCkge1xuICAgIGlzRGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBGQUxTRSA/IHJldFRydWUgOiByZXRGYWxzZTtcbiAgfVxuXG4gIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gaXNEZWZhdWx0UHJldmVudGVkO1xuXG4gIHZhciBmaXhGbnMgPSBbXTtcbiAgdmFyIGZpeEZuID0gdm9pZCAwO1xuICB2YXIgbCA9IHZvaWQgMDtcbiAgdmFyIHByb3AgPSB2b2lkIDA7XG4gIHZhciBwcm9wcyA9IGNvbW1vblByb3BzLmNvbmNhdCgpO1xuXG4gIGV2ZW50Tm9ybWFsaXplcnMuZm9yRWFjaChmdW5jdGlvbiAobm9ybWFsaXplcikge1xuICAgIGlmICh0eXBlLm1hdGNoKG5vcm1hbGl6ZXIucmVnKSkge1xuICAgICAgcHJvcHMgPSBwcm9wcy5jb25jYXQobm9ybWFsaXplci5wcm9wcyk7XG4gICAgICBpZiAobm9ybWFsaXplci5maXgpIHtcbiAgICAgICAgZml4Rm5zLnB1c2gobm9ybWFsaXplci5maXgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgbCA9IHByb3BzLmxlbmd0aDtcblxuICAvLyBjbG9uZSBwcm9wZXJ0aWVzIG9mIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgd2hpbGUgKGwpIHtcbiAgICBwcm9wID0gcHJvcHNbLS1sXTtcbiAgICB0aGlzW3Byb3BdID0gbmF0aXZlRXZlbnRbcHJvcF07XG4gIH1cblxuICAvLyBmaXggdGFyZ2V0IHByb3BlcnR5LCBpZiBuZWNlc3NhcnlcbiAgaWYgKCF0aGlzLnRhcmdldCAmJiBpc05hdGl2ZSkge1xuICAgIHRoaXMudGFyZ2V0ID0gbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCBkb2N1bWVudDsgLy8gc3JjRWxlbWVudCBtaWdodCBub3QgYmUgZGVmaW5lZCBlaXRoZXJcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIHRhcmdldCBpcyBhIHRleHQgbm9kZSAoc2FmYXJpKVxuICBpZiAodGhpcy50YXJnZXQgJiYgdGhpcy50YXJnZXQubm9kZVR5cGUgPT09IDMpIHtcbiAgICB0aGlzLnRhcmdldCA9IHRoaXMudGFyZ2V0LnBhcmVudE5vZGU7XG4gIH1cblxuICBsID0gZml4Rm5zLmxlbmd0aDtcblxuICB3aGlsZSAobCkge1xuICAgIGZpeEZuID0gZml4Rm5zWy0tbF07XG4gICAgZml4Rm4odGhpcywgbmF0aXZlRXZlbnQpO1xuICB9XG5cbiAgdGhpcy50aW1lU3RhbXAgPSBuYXRpdmVFdmVudC50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcbn1cblxudmFyIEV2ZW50QmFzZU9iamVjdFByb3RvID0gX0V2ZW50QmFzZU9iamVjdDJbXCJkZWZhdWx0XCJdLnByb3RvdHlwZTtcblxuKDAsIF9vYmplY3RBc3NpZ24yW1wiZGVmYXVsdFwiXSkoRG9tRXZlbnRPYmplY3QucHJvdG90eXBlLCBFdmVudEJhc2VPYmplY3RQcm90bywge1xuICBjb25zdHJ1Y3RvcjogRG9tRXZlbnRPYmplY3QsXG5cbiAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KCkge1xuICAgIHZhciBlID0gdGhpcy5uYXRpdmVFdmVudDtcblxuICAgIC8vIGlmIHByZXZlbnREZWZhdWx0IGV4aXN0cyBydW4gaXQgb24gdGhlIG9yaWdpbmFsIGV2ZW50XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gb3RoZXJ3aXNlIHNldCB0aGUgcmV0dXJuVmFsdWUgcHJvcGVydHkgb2YgdGhlIG9yaWdpbmFsIGV2ZW50IHRvIEZBTFNFIChJRSlcbiAgICAgIGUucmV0dXJuVmFsdWUgPSBGQUxTRTtcbiAgICB9XG5cbiAgICBFdmVudEJhc2VPYmplY3RQcm90by5wcmV2ZW50RGVmYXVsdC5jYWxsKHRoaXMpO1xuICB9LFxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgICB2YXIgZSA9IHRoaXMubmF0aXZlRXZlbnQ7XG5cbiAgICAvLyBpZiBzdG9wUHJvcGFnYXRpb24gZXhpc3RzIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnRcbiAgICBpZiAoZS5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBzZXQgdGhlIGNhbmNlbEJ1YmJsZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gVFJVRSAoSUUpXG4gICAgICBlLmNhbmNlbEJ1YmJsZSA9IFRSVUU7XG4gICAgfVxuXG4gICAgRXZlbnRCYXNlT2JqZWN0UHJvdG8uc3RvcFByb3BhZ2F0aW9uLmNhbGwodGhpcyk7XG4gIH1cbn0pO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IERvbUV2ZW50T2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcbiAqIEBpZ25vcmVcbiAqIGJhc2UgZXZlbnQgb2JqZWN0IGZvciBjdXN0b20gYW5kIGRvbSBldmVudC5cbiAqIEBhdXRob3IgeWltaW5naGVAZ21haWwuY29tXG4gKi9cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50QmFzZU9iamVjdCgpIHtcbiAgdGhpcy50aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuICB0aGlzLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5FdmVudEJhc2VPYmplY3QucHJvdG90eXBlID0ge1xuICBpc0V2ZW50T2JqZWN0OiAxLFxuXG4gIGNvbnN0cnVjdG9yOiBFdmVudEJhc2VPYmplY3QsXG5cbiAgaXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblxuICBpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cbiAgaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG4gIH0sXG4gIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuICB9LFxuICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICB0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcbiAgICAvLyBmaXhlZCAxLjJcbiAgICAvLyBjYWxsIHN0b3BQcm9wYWdhdGlvbiBpbXBsaWNpdGx5XG4gICAgdGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSxcbiAgaGFsdDogZnVuY3Rpb24gaGFsdChpbW1lZGlhdGUpIHtcbiAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICB0aGlzLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICB0aGlzLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn07XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gRXZlbnRCYXNlT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnZhciBDb250YWluZXJSZW5kZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ29udGFpbmVyUmVuZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb250YWluZXJSZW5kZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRhaW5lclJlbmRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gQ29udGFpbmVyUmVuZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29udGFpbmVyUmVuZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMucmVtb3ZlQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmNvbnRhaW5lcikge1xuICAgICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKF90aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIF90aGlzLmNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF90aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIF90aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgICB9XG4gICAgfSwgX3RoaXMucmVuZGVyQ29tcG9uZW50ID0gZnVuY3Rpb24gKHByb3BzLCByZWFkeSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdmlzaWJsZSA9IF90aGlzJHByb3BzLnZpc2libGUsXG4gICAgICAgICAgZ2V0Q29tcG9uZW50ID0gX3RoaXMkcHJvcHMuZ2V0Q29tcG9uZW50LFxuICAgICAgICAgIGZvcmNlUmVuZGVyID0gX3RoaXMkcHJvcHMuZm9yY2VSZW5kZXIsXG4gICAgICAgICAgZ2V0Q29udGFpbmVyID0gX3RoaXMkcHJvcHMuZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIHBhcmVudCA9IF90aGlzJHByb3BzLnBhcmVudDtcblxuICAgICAgaWYgKHZpc2libGUgfHwgcGFyZW50Ll9jb21wb25lbnQgfHwgZm9yY2VSZW5kZXIpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICBfdGhpcy5jb250YWluZXIgPSBnZXRDb250YWluZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBSZWFjdERPTS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnQsIGdldENvbXBvbmVudChwcm9wcyksIF90aGlzLmNvbnRhaW5lciwgZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgICAgaWYgKHJlYWR5KSB7XG4gICAgICAgICAgICByZWFkeS5jYWxsKHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29udGFpbmVyUmVuZGVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvTW91bnQpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJDb21wb25lbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvTW91bnQpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJDb21wb25lbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b0Rlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDb250YWluZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih7XG4gICAgICAgIHJlbmRlckNvbXBvbmVudDogdGhpcy5yZW5kZXJDb21wb25lbnQsXG4gICAgICAgIHJlbW92ZUNvbnRhaW5lcjogdGhpcy5yZW1vdmVDb250YWluZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb250YWluZXJSZW5kZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNvbnRhaW5lclJlbmRlci5wcm9wVHlwZXMgPSB7XG4gIGF1dG9Nb3VudDogUHJvcFR5cGVzLmJvb2wsXG4gIGF1dG9EZXN0cm95OiBQcm9wVHlwZXMuYm9vbCxcbiAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGZvcmNlUmVuZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgcGFyZW50OiBQcm9wVHlwZXMuYW55LFxuICBnZXRDb21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldENvbnRhaW5lcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn07XG5Db250YWluZXJSZW5kZXIuZGVmYXVsdFByb3BzID0ge1xuICBhdXRvTW91bnQ6IHRydWUsXG4gIGF1dG9EZXN0cm95OiB0cnVlLFxuICBmb3JjZVJlbmRlcjogZmFsc2Vcbn07XG5leHBvcnQgZGVmYXVsdCBDb250YWluZXJSZW5kZXI7IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnZhciBQb3J0YWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWwoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcnRhbCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBvcnRhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBvcnRhbCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvcnRhbCwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5jcmVhdGVDb250YWluZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgZGlkVXBkYXRlID0gdGhpcy5wcm9wcy5kaWRVcGRhdGU7XG5cbiAgICAgIGlmIChkaWRVcGRhdGUpIHtcbiAgICAgICAgZGlkVXBkYXRlKHByZXZQcm9wcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ29udGFpbmVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlQ29udGFpbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKCkge1xuICAgICAgdGhpcy5fY29udGFpbmVyID0gdGhpcy5wcm9wcy5nZXRDb250YWluZXIoKTtcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVDb250YWluZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVDb250YWluZXIoKSB7XG4gICAgICBpZiAodGhpcy5fY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKHRoaXMucHJvcHMuY2hpbGRyZW4sIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICBnZXRDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBkaWRVcGRhdGU6IFByb3BUeXBlcy5mdW5jXG59O1xuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsIi8vIG11dGF0aW9ub2JzZXJ2ZXItc2hpbSB2MC4zLjIgKGdpdGh1Yi5jb20vbWVnYXdhYy9NdXRhdGlvbk9ic2VydmVyLmpzKVxuLy8gQXV0aG9yczogR3JhZW1lIFllYXRlcyAoZ2l0aHViLmNvbS9tZWdhd2FjKSBcbndpbmRvdy5NdXRhdGlvbk9ic2VydmVyPXdpbmRvdy5NdXRhdGlvbk9ic2VydmVyfHxmdW5jdGlvbih3KXtmdW5jdGlvbiB2KGEpe3RoaXMuaT1bXTt0aGlzLm09YX1mdW5jdGlvbiBJKGEpeyhmdW5jdGlvbiBjKCl7dmFyIGQ9YS50YWtlUmVjb3JkcygpO2QubGVuZ3RoJiZhLm0oZCxhKTthLmg9c2V0VGltZW91dChjLHYuX3BlcmlvZCl9KSgpfWZ1bmN0aW9uIHAoYSl7dmFyIGI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxhZGRlZE5vZGVzOltdLHJlbW92ZWROb2RlczpbXSxwcmV2aW91c1NpYmxpbmc6bnVsbCxuZXh0U2libGluZzpudWxsLGF0dHJpYnV0ZU5hbWU6bnVsbCxhdHRyaWJ1dGVOYW1lc3BhY2U6bnVsbCxvbGRWYWx1ZTpudWxsfSxjO2ZvcihjIGluIGEpYltjXSE9PXcmJmFbY10hPT13JiYoYltjXT1hW2NdKTtyZXR1cm4gYn1mdW5jdGlvbiBKKGEsYil7dmFyIGM9QyhhLGIpO3JldHVybiBmdW5jdGlvbihkKXt2YXIgZj1kLmxlbmd0aCxuO2IuYSYmMz09PWEubm9kZVR5cGUmJlxuYS5ub2RlVmFsdWUhPT1jLmEmJmQucHVzaChuZXcgcCh7dHlwZTpcImNoYXJhY3RlckRhdGFcIix0YXJnZXQ6YSxvbGRWYWx1ZTpjLmF9KSk7Yi5iJiZjLmImJkEoZCxhLGMuYixiLmYpO2lmKGIuY3x8Yi5nKW49SyhkLGEsYyxiKTtpZihufHxkLmxlbmd0aCE9PWYpYz1DKGEsYil9fWZ1bmN0aW9uIEwoYSxiKXtyZXR1cm4gYi52YWx1ZX1mdW5jdGlvbiBNKGEsYil7cmV0dXJuXCJzdHlsZVwiIT09Yi5uYW1lP2IudmFsdWU6YS5zdHlsZS5jc3NUZXh0fWZ1bmN0aW9uIEEoYSxiLGMsZCl7Zm9yKHZhciBmPXt9LG49Yi5hdHRyaWJ1dGVzLGssZyx4PW4ubGVuZ3RoO3gtLTspaz1uW3hdLGc9ay5uYW1lLGQmJmRbZ109PT13fHwoRChiLGspIT09Y1tnXSYmYS5wdXNoKHAoe3R5cGU6XCJhdHRyaWJ1dGVzXCIsdGFyZ2V0OmIsYXR0cmlidXRlTmFtZTpnLG9sZFZhbHVlOmNbZ10sYXR0cmlidXRlTmFtZXNwYWNlOmsubmFtZXNwYWNlVVJJfSkpLGZbZ109ITApO2ZvcihnIGluIGMpZltnXXx8YS5wdXNoKHAoe3RhcmdldDpiLFxudHlwZTpcImF0dHJpYnV0ZXNcIixhdHRyaWJ1dGVOYW1lOmcsb2xkVmFsdWU6Y1tnXX0pKX1mdW5jdGlvbiBLKGEsYixjLGQpe2Z1bmN0aW9uIGYoYixjLGYsayx5KXt2YXIgZz1iLmxlbmd0aC0xO3k9LX4oKGcteSkvMik7Zm9yKHZhciBoLGwsZTtlPWIucG9wKCk7KWg9ZltlLmpdLGw9a1tlLmxdLGQuYyYmeSYmTWF0aC5hYnMoZS5qLWUubCk+PWcmJihhLnB1c2gocCh7dHlwZTpcImNoaWxkTGlzdFwiLHRhcmdldDpjLGFkZGVkTm9kZXM6W2hdLHJlbW92ZWROb2RlczpbaF0sbmV4dFNpYmxpbmc6aC5uZXh0U2libGluZyxwcmV2aW91c1NpYmxpbmc6aC5wcmV2aW91c1NpYmxpbmd9KSkseS0tKSxkLmImJmwuYiYmQShhLGgsbC5iLGQuZiksZC5hJiYzPT09aC5ub2RlVHlwZSYmaC5ub2RlVmFsdWUhPT1sLmEmJmEucHVzaChwKHt0eXBlOlwiY2hhcmFjdGVyRGF0YVwiLHRhcmdldDpoLG9sZFZhbHVlOmwuYX0pKSxkLmcmJm4oaCxsKX1mdW5jdGlvbiBuKGIsYyl7Zm9yKHZhciBnPWIuY2hpbGROb2RlcyxcbnE9Yy5jLHg9Zy5sZW5ndGgsdj1xP3EubGVuZ3RoOjAsaCxsLGUsbSx0LHo9MCx1PTAscj0wO3U8eHx8cjx2OyltPWdbdV0sdD0oZT1xW3JdKSYmZS5ub2RlLG09PT10PyhkLmImJmUuYiYmQShhLG0sZS5iLGQuZiksZC5hJiZlLmEhPT13JiZtLm5vZGVWYWx1ZSE9PWUuYSYmYS5wdXNoKHAoe3R5cGU6XCJjaGFyYWN0ZXJEYXRhXCIsdGFyZ2V0Om0sb2xkVmFsdWU6ZS5hfSkpLGwmJmYobCxiLGcscSx6KSxkLmcmJihtLmNoaWxkTm9kZXMubGVuZ3RofHxlLmMmJmUuYy5sZW5ndGgpJiZuKG0sZSksdSsrLHIrKyk6KGs9ITAsaHx8KGg9e30sbD1bXSksbSYmKGhbZT1FKG0pXXx8KGhbZV09ITAsLTE9PT0oZT1GKHEsbSxyLFwibm9kZVwiKSk/ZC5jJiYoYS5wdXNoKHAoe3R5cGU6XCJjaGlsZExpc3RcIix0YXJnZXQ6YixhZGRlZE5vZGVzOlttXSxuZXh0U2libGluZzptLm5leHRTaWJsaW5nLHByZXZpb3VzU2libGluZzptLnByZXZpb3VzU2libGluZ30pKSx6KyspOmwucHVzaCh7ajp1LGw6ZX0pKSxcbnUrKyksdCYmdCE9PWdbdV0mJihoW2U9RSh0KV18fChoW2VdPSEwLC0xPT09KGU9RihnLHQsdSkpP2QuYyYmKGEucHVzaChwKHt0eXBlOlwiY2hpbGRMaXN0XCIsdGFyZ2V0OmMubm9kZSxyZW1vdmVkTm9kZXM6W3RdLG5leHRTaWJsaW5nOnFbcisxXSxwcmV2aW91c1NpYmxpbmc6cVtyLTFdfSkpLHotLSk6bC5wdXNoKHtqOmUsbDpyfSkpLHIrKykpO2wmJmYobCxiLGcscSx6KX12YXIgaztuKGIsYyk7cmV0dXJuIGt9ZnVuY3Rpb24gQyhhLGIpe3ZhciBjPSEwO3JldHVybiBmdW5jdGlvbiBmKGEpe3ZhciBrPXtub2RlOmF9OyFiLmF8fDMhPT1hLm5vZGVUeXBlJiY4IT09YS5ub2RlVHlwZT8oYi5iJiZjJiYxPT09YS5ub2RlVHlwZSYmKGsuYj1HKGEuYXR0cmlidXRlcyxmdW5jdGlvbihjLGYpe2lmKCFiLmZ8fGIuZltmLm5hbWVdKWNbZi5uYW1lXT1EKGEsZik7cmV0dXJuIGN9KSksYyYmKGIuY3x8Yi5hfHxiLmImJmIuZykmJihrLmM9TihhLmNoaWxkTm9kZXMsZikpLGM9Yi5nKTprLmE9XG5hLm5vZGVWYWx1ZTtyZXR1cm4ga30oYSl9ZnVuY3Rpb24gRShhKXt0cnl7cmV0dXJuIGEuaWR8fChhLm1vX2lkPWEubW9faWR8fEgrKyl9Y2F0Y2goYil7dHJ5e3JldHVybiBhLm5vZGVWYWx1ZX1jYXRjaChjKXtyZXR1cm4gSCsrfX19ZnVuY3Rpb24gTihhLGIpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhLmxlbmd0aDtkKyspY1tkXT1iKGFbZF0sZCxhKTtyZXR1cm4gY31mdW5jdGlvbiBHKGEsYil7Zm9yKHZhciBjPXt9LGQ9MDtkPGEubGVuZ3RoO2QrKyljPWIoYyxhW2RdLGQsYSk7cmV0dXJuIGN9ZnVuY3Rpb24gRihhLGIsYyxkKXtmb3IoO2M8YS5sZW5ndGg7YysrKWlmKChkP2FbY11bZF06YVtjXSk9PT1iKXJldHVybiBjO3JldHVybi0xfXYuX3BlcmlvZD0zMDt2LnByb3RvdHlwZT17b2JzZXJ2ZTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz17YjohIShiLmF0dHJpYnV0ZXN8fGIuYXR0cmlidXRlRmlsdGVyfHxiLmF0dHJpYnV0ZU9sZFZhbHVlKSxjOiEhYi5jaGlsZExpc3QsZzohIWIuc3VidHJlZSxcbmE6ISghYi5jaGFyYWN0ZXJEYXRhJiYhYi5jaGFyYWN0ZXJEYXRhT2xkVmFsdWUpfSxkPXRoaXMuaSxmPTA7ZjxkLmxlbmd0aDtmKyspZFtmXS5zPT09YSYmZC5zcGxpY2UoZiwxKTtiLmF0dHJpYnV0ZUZpbHRlciYmKGMuZj1HKGIuYXR0cmlidXRlRmlsdGVyLGZ1bmN0aW9uKGEsYil7YVtiXT0hMDtyZXR1cm4gYX0pKTtkLnB1c2goe3M6YSxvOkooYSxjKX0pO3RoaXMuaHx8SSh0aGlzKX0sdGFrZVJlY29yZHM6ZnVuY3Rpb24oKXtmb3IodmFyIGE9W10sYj10aGlzLmksYz0wO2M8Yi5sZW5ndGg7YysrKWJbY10ubyhhKTtyZXR1cm4gYX0sZGlzY29ubmVjdDpmdW5jdGlvbigpe3RoaXMuaT1bXTtjbGVhclRpbWVvdXQodGhpcy5oKTt0aGlzLmg9bnVsbH19O3ZhciBCPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO0Iuc3R5bGUudG9wPTA7dmFyIEQ9KEI9XCJudWxsXCIhPUIuYXR0cmlidXRlcy5zdHlsZS52YWx1ZSk/TDpNLEg9MTtyZXR1cm4gdn0odm9pZCAwKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11dGF0aW9ub2JzZXJ2ZXIubWFwXG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnVG9kYXknLFxuICBub3c6ICdOb3cnLFxuICBiYWNrVG9Ub2RheTogJ0JhY2sgdG8gdG9kYXknLFxuICBvazogJ09rJyxcbiAgY2xlYXI6ICdDbGVhcicsXG4gIG1vbnRoOiAnTW9udGgnLFxuICB5ZWFyOiAnWWVhcicsXG4gIHRpbWVTZWxlY3Q6ICdzZWxlY3QgdGltZScsXG4gIGRhdGVTZWxlY3Q6ICdzZWxlY3QgZGF0ZScsXG4gIHdlZWtTZWxlY3Q6ICdDaG9vc2UgYSB3ZWVrJyxcbiAgbW9udGhTZWxlY3Q6ICdDaG9vc2UgYSBtb250aCcsXG4gIHllYXJTZWxlY3Q6ICdDaG9vc2UgYSB5ZWFyJyxcbiAgZGVjYWRlU2VsZWN0OiAnQ2hvb3NlIGEgZGVjYWRlJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnTS9EL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdNL0QvWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ1ByZXZpb3VzIG1vbnRoIChQYWdlVXApJyxcbiAgbmV4dE1vbnRoOiAnTmV4dCBtb250aCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnTGFzdCB5ZWFyIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ05leHQgeWVhciAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnTGFzdCBkZWNhZGUnLFxuICBuZXh0RGVjYWRlOiAnTmV4dCBkZWNhZGUnLFxuICBwcmV2aW91c0NlbnR1cnk6ICdMYXN0IGNlbnR1cnknLFxuICBuZXh0Q2VudHVyeTogJ05leHQgY2VudHVyeSdcbn07IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgT3B0aW9uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE9wdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3B0aW9uKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcHRpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gT3B0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5PcHRpb24ucHJvcFR5cGVzID0ge1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pXG59O1xuT3B0aW9uLmlzU2VsZWN0T3B0aW9uID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IE9wdGlvbjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9UaXRsZSh0aXRsZSkge1xuICBpZiAodHlwZW9mIHRpdGxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0aXRsZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlUHJvcFZhbHVlKGNoaWxkKSB7XG4gIGlmICghY2hpbGQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBwcm9wcyA9IGNoaWxkLnByb3BzO1xuICBpZiAoJ3ZhbHVlJyBpbiBwcm9wcykge1xuICAgIHJldHVybiBwcm9wcy52YWx1ZTtcbiAgfVxuICBpZiAoY2hpbGQua2V5KSB7XG4gICAgcmV0dXJuIGNoaWxkLmtleTtcbiAgfVxuICBpZiAoY2hpbGQudHlwZSAmJiBjaGlsZC50eXBlLmlzU2VsZWN0T3B0R3JvdXAgJiYgcHJvcHMubGFiZWwpIHtcbiAgICByZXR1cm4gcHJvcHMubGFiZWw7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdOZWVkIGF0IGxlYXN0IGEga2V5IG9yIGEgdmFsdWUgb3IgYSBsYWJlbCAob25seSBmb3IgT3B0R3JvdXApIGZvciAnICsgY2hpbGQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcFZhbHVlKGNoaWxkLCBwcm9wKSB7XG4gIGlmIChwcm9wID09PSAndmFsdWUnKSB7XG4gICAgcmV0dXJuIGdldFZhbHVlUHJvcFZhbHVlKGNoaWxkKTtcbiAgfVxuICByZXR1cm4gY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc011bHRpcGxlKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5tdWx0aXBsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tYm9ib3gocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLmNvbWJvYm94O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNdWx0aXBsZU9yVGFncyhwcm9wcykge1xuICByZXR1cm4gcHJvcHMubXVsdGlwbGUgfHwgcHJvcHMudGFncztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTXVsdGlwbGVPclRhZ3NPckNvbWJvYm94KHByb3BzKSB7XG4gIHJldHVybiBpc011bHRpcGxlT3JUYWdzKHByb3BzKSB8fCBpc0NvbWJvYm94KHByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2luZ2xlTW9kZShwcm9wcykge1xuICByZXR1cm4gIWlzTXVsdGlwbGVPclRhZ3NPckNvbWJvYm94KHByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgdmFyIHJldCA9IHZhbHVlO1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldCA9IFtdO1xuICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldCA9IFt2YWx1ZV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1hcEtleSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlICsgJy0nICsgdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdEV2ZW50KGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEluZGV4SW5WYWx1ZUJ5U2luZ2xlVmFsdWUodmFsdWUsIHNpbmdsZVZhbHVlKSB7XG4gIHZhciBpbmRleCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHZhbHVlW2ldID09PSBzaW5nbGVWYWx1ZSkge1xuICAgICAgaW5kZXggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmRleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldExhYmVsRnJvbVByb3BzVmFsdWUodmFsdWUsIGtleSkge1xuICB2YXIgbGFiZWwgPSB2b2lkIDA7XG4gIHZhbHVlID0gdG9BcnJheSh2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodmFsdWVbaV0ua2V5ID09PSBrZXkpIHtcbiAgICAgIGxhYmVsID0gdmFsdWVbaV0ubGFiZWw7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0S2V5cyhtZW51SXRlbXMsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciBzZWxlY3RlZEtleXMgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChtZW51SXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0udHlwZS5pc01lbnVJdGVtR3JvdXApIHtcbiAgICAgIHNlbGVjdGVkS2V5cyA9IHNlbGVjdGVkS2V5cy5jb25jYXQoZ2V0U2VsZWN0S2V5cyhpdGVtLnByb3BzLmNoaWxkcmVuLCB2YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXRlbVZhbHVlID0gZ2V0VmFsdWVQcm9wVmFsdWUoaXRlbSk7XG4gICAgICB2YXIgaXRlbUtleSA9IGl0ZW0ua2V5O1xuICAgICAgaWYgKGZpbmRJbmRleEluVmFsdWVCeVNpbmdsZVZhbHVlKHZhbHVlLCBpdGVtVmFsdWUpICE9PSAtMSAmJiBpdGVtS2V5KSB7XG4gICAgICAgIHNlbGVjdGVkS2V5cy5wdXNoKGl0ZW1LZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWxlY3RlZEtleXM7XG59XG5cbmV4cG9ydCB2YXIgVU5TRUxFQ1RBQkxFX1NUWUxFID0ge1xuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIFdlYmtpdFVzZXJTZWxlY3Q6ICdub25lJ1xufTtcblxuZXhwb3J0IHZhciBVTlNFTEVDVEFCTEVfQVRUUklCVVRFID0ge1xuICB1bnNlbGVjdGFibGU6ICdvbidcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRmlyc3RNZW51SXRlbShjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGNoaWxkLnR5cGUuaXNNZW51SXRlbUdyb3VwKSB7XG4gICAgICB2YXIgZm91bmQgPSBmaW5kRmlyc3RNZW51SXRlbShjaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5jbHVkZXNTZXBhcmF0b3JzKHN0cmluZywgc2VwYXJhdG9ycykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcGFyYXRvcnMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoc3RyaW5nLmxhc3RJbmRleE9mKHNlcGFyYXRvcnNbaV0pID4gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0QnlTZXBhcmF0b3JzKHN0cmluZywgc2VwYXJhdG9ycykge1xuICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgnWycgKyBzZXBhcmF0b3JzLmpvaW4oKSArICddJyk7XG4gIHJldHVybiBzdHJpbmcuc3BsaXQocmVnKS5maWx0ZXIoZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXJGbihpbnB1dCwgY2hpbGQpIHtcbiAgaWYgKGNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWx1ZSA9IHRvQXJyYXkoZ2V0UHJvcFZhbHVlKGNoaWxkLCB0aGlzLnByb3BzLm9wdGlvbkZpbHRlclByb3ApKS5qb2luKCcnKTtcbiAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC50b0xvd2VyQ2FzZSgpKSA+IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25WYWx1ZSh2YWx1ZSwgcHJvcHMpIHtcbiAgaWYgKGlzU2luZ2xlTW9kZShwcm9wcykgfHwgaXNNdWx0aXBsZShwcm9wcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYHZhbHVlYCBvZiB0eXBlIGAnICsgdHlwZW9mIHZhbHVlICsgJ2Agc3VwcGxpZWQgdG8gT3B0aW9uLCAnICsgJ2V4cGVjdGVkIGBzdHJpbmdgIHdoZW4gYHRhZ3MvY29tYm9ib3hgIGlzIGB0cnVlYC4nKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVJlZihpbnN0YW5jZSwgbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpbnN0YW5jZVtuYW1lXSA9IG5vZGU7XG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB0b0FycmF5IGZyb20gJ3JjLXV0aWwvZXMvQ2hpbGRyZW4vdG9BcnJheSc7XG5pbXBvcnQgTWVudSBmcm9tICdyYy1tZW51JztcbmltcG9ydCBzY3JvbGxJbnRvVmlldyBmcm9tICdkb20tc2Nyb2xsLWludG8tdmlldyc7XG5pbXBvcnQgcmFmIGZyb20gJ3JhZic7XG5pbXBvcnQgeyBnZXRTZWxlY3RLZXlzLCBwcmV2ZW50RGVmYXVsdEV2ZW50LCBzYXZlUmVmIH0gZnJvbSAnLi91dGlsJztcblxudmFyIERyb3Bkb3duTWVudSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcm9wZG93bk1lbnUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duTWVudShwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcm9wZG93bk1lbnUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5zY3JvbGxBY3RpdmVJdGVtVG9WaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc2Nyb2xsIGludG8gdmlld1xuICAgICAgdmFyIGl0ZW1Db21wb25lbnQgPSBmaW5kRE9NTm9kZShfdGhpcy5maXJzdEFjdGl2ZUl0ZW0pO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wcy52YWx1ZSxcbiAgICAgICAgICB2aXNpYmxlID0gX3RoaXMkcHJvcHMudmlzaWJsZSxcbiAgICAgICAgICBmaXJzdEFjdGl2ZVZhbHVlID0gX3RoaXMkcHJvcHMuZmlyc3RBY3RpdmVWYWx1ZTtcblxuXG4gICAgICBpZiAoIWl0ZW1Db21wb25lbnQgfHwgIXZpc2libGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHNjcm9sbEludG9WaWV3T3B0cyA9IHtcbiAgICAgICAgb25seVNjcm9sbElmTmVlZGVkOiB0cnVlXG4gICAgICB9O1xuICAgICAgaWYgKCghdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwKSAmJiBmaXJzdEFjdGl2ZVZhbHVlKSB7XG4gICAgICAgIHNjcm9sbEludG9WaWV3T3B0cy5hbGlnbldpdGhUb3AgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBEZWxheSB0byBzY3JvbGwgc2luY2UgY3VycmVudCBmcmFtZSBpdGVtIHBvc2l0aW9uIGlzIG5vdCByZWFkeSB3aGVuIHByZSB2aWV3IGlzIGJ5IGZpbHRlclxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTEyNjgjaXNzdWVjb21tZW50LTQwNjYzNDQ2MlxuICAgICAgX3RoaXMucmFmSW5zdGFuY2UgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY3JvbGxJbnRvVmlldyhpdGVtQ29tcG9uZW50LCBmaW5kRE9NTm9kZShfdGhpcy5tZW51UmVmKSwgc2Nyb2xsSW50b1ZpZXdPcHRzKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5sYXN0SW5wdXRWYWx1ZSA9IHByb3BzLmlucHV0VmFsdWU7XG4gICAgX3RoaXMuc2F2ZU1lbnVSZWYgPSBzYXZlUmVmKF90aGlzLCAnbWVudVJlZicpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIERyb3Bkb3duTWVudS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNjcm9sbEFjdGl2ZUl0ZW1Ub1ZpZXcoKTtcbiAgICB0aGlzLmxhc3RWaXNpYmxlID0gdGhpcy5wcm9wcy52aXNpYmxlO1xuICB9O1xuXG4gIERyb3Bkb3duTWVudS5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIGlmICghbmV4dFByb3BzLnZpc2libGUpIHtcbiAgICAgIHRoaXMubGFzdFZpc2libGUgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gZnJlZXplIHdoZW4gaGlkZVxuICAgIHJldHVybiBuZXh0UHJvcHMudmlzaWJsZSB8fCBuZXh0UHJvcHMuaW5wdXRWYWx1ZSAhPT0gdGhpcy5wcm9wcy5pbnB1dFZhbHVlO1xuICB9O1xuXG4gIERyb3Bkb3duTWVudS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFwcmV2UHJvcHMudmlzaWJsZSAmJiBwcm9wcy52aXNpYmxlKSB7XG4gICAgICB0aGlzLnNjcm9sbEFjdGl2ZUl0ZW1Ub1ZpZXcoKTtcbiAgICB9XG4gICAgdGhpcy5sYXN0VmlzaWJsZSA9IHByb3BzLnZpc2libGU7XG4gICAgdGhpcy5sYXN0SW5wdXRWYWx1ZSA9IHByb3BzLmlucHV0VmFsdWU7XG4gIH07XG5cbiAgRHJvcGRvd25NZW51LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnJhZkluc3RhbmNlICYmIHRoaXMucmFmSW5zdGFuY2UuY2FuY2VsKSB7XG4gICAgICB0aGlzLnJhZkluc3RhbmNlLmNhbmNlbCgpO1xuICAgIH1cbiAgfTtcblxuICBEcm9wZG93bk1lbnUucHJvdG90eXBlLnJlbmRlck1lbnUgPSBmdW5jdGlvbiByZW5kZXJNZW51KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgbWVudUl0ZW1zID0gcHJvcHMubWVudUl0ZW1zLFxuICAgICAgICBtZW51SXRlbVNlbGVjdGVkSWNvbiA9IHByb3BzLm1lbnVJdGVtU2VsZWN0ZWRJY29uLFxuICAgICAgICBkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24gPSBwcm9wcy5kZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24sXG4gICAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICAgIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgICAgbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZSxcbiAgICAgICAgb25NZW51U2VsZWN0ID0gcHJvcHMub25NZW51U2VsZWN0LFxuICAgICAgICBpbnB1dFZhbHVlID0gcHJvcHMuaW5wdXRWYWx1ZSxcbiAgICAgICAgZmlyc3RBY3RpdmVWYWx1ZSA9IHByb3BzLmZpcnN0QWN0aXZlVmFsdWUsXG4gICAgICAgIGJhY2tmaWxsVmFsdWUgPSBwcm9wcy5iYWNrZmlsbFZhbHVlO1xuXG4gICAgaWYgKG1lbnVJdGVtcyAmJiBtZW51SXRlbXMubGVuZ3RoKSB7XG4gICAgICB2YXIgbWVudVByb3BzID0ge307XG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgbWVudVByb3BzLm9uRGVzZWxlY3QgPSBwcm9wcy5vbk1lbnVEZXNlbGVjdDtcbiAgICAgICAgbWVudVByb3BzLm9uU2VsZWN0ID0gb25NZW51U2VsZWN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVudVByb3BzLm9uQ2xpY2sgPSBvbk1lbnVTZWxlY3Q7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RlZEtleXMgPSBnZXRTZWxlY3RLZXlzKG1lbnVJdGVtcywgdmFsdWUpO1xuICAgICAgdmFyIGFjdGl2ZUtleVByb3BzID0ge307XG5cbiAgICAgIHZhciBjbG9uZWRNZW51SXRlbXMgPSBtZW51SXRlbXM7XG4gICAgICBpZiAoc2VsZWN0ZWRLZXlzLmxlbmd0aCB8fCBmaXJzdEFjdGl2ZVZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9wcy52aXNpYmxlICYmICF0aGlzLmxhc3RWaXNpYmxlKSB7XG4gICAgICAgICAgYWN0aXZlS2V5UHJvcHMuYWN0aXZlS2V5ID0gc2VsZWN0ZWRLZXlzWzBdIHx8IGZpcnN0QWN0aXZlVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZvdW5kRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgLy8gc2V0IGZpcnN0QWN0aXZlSXRlbSB2aWEgY2xvbmluZyBtZW51c1xuICAgICAgICAvLyBmb3Igc2Nyb2xsIGludG8gdmlld1xuICAgICAgICB2YXIgY2xvbmUgPSBmdW5jdGlvbiBjbG9uZShpdGVtKSB7XG4gICAgICAgICAgaWYgKCFmb3VuZEZpcnN0ICYmIHNlbGVjdGVkS2V5cy5pbmRleE9mKGl0ZW0ua2V5KSAhPT0gLTEgfHwgIWZvdW5kRmlyc3QgJiYgIXNlbGVjdGVkS2V5cy5sZW5ndGggJiYgZmlyc3RBY3RpdmVWYWx1ZS5pbmRleE9mKGl0ZW0ua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGZvdW5kRmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChpdGVtLCB7XG4gICAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIuZmlyc3RBY3RpdmVJdGVtID0gX3JlZjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNsb25lZE1lbnVJdGVtcyA9IG1lbnVJdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoaXRlbS50eXBlLmlzTWVudUl0ZW1Hcm91cCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdG9BcnJheShpdGVtLnByb3BzLmNoaWxkcmVuKS5tYXAoY2xvbmUpO1xuICAgICAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChpdGVtLCB7fSwgY2hpbGRyZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2xvbmUoaXRlbSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2xlYXIgZmlyc3RBY3RpdmVJdGVtIHdoZW4gZHJvcGRvd24gbWVudSBpdGVtcyB3YXMgZW1wdHlcbiAgICAgICAgLy8gQXZvaWQgYFVuYWJsZSB0byBmaW5kIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudGBcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTA3NzRcbiAgICAgICAgdGhpcy5maXJzdEFjdGl2ZUl0ZW0gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBjbGVhciBhY3RpdmVLZXkgd2hlbiBpbnB1dFZhbHVlIGNoYW5nZVxuICAgICAgdmFyIGxhc3RWYWx1ZSA9IHZhbHVlICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGlucHV0VmFsdWUgIT09IHRoaXMubGFzdElucHV0VmFsdWUgJiYgKCFsYXN0VmFsdWUgfHwgbGFzdFZhbHVlICE9PSBiYWNrZmlsbFZhbHVlKSkge1xuICAgICAgICBhY3RpdmVLZXlQcm9wcy5hY3RpdmVLZXkgPSAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBNZW51LFxuICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgcmVmOiB0aGlzLnNhdmVNZW51UmVmLFxuICAgICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLmRyb3Bkb3duTWVudVN0eWxlLFxuICAgICAgICAgIGRlZmF1bHRBY3RpdmVGaXJzdDogZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uLFxuICAgICAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgICAgICBpdGVtSWNvbjogbXVsdGlwbGUgPyBtZW51SXRlbVNlbGVjdGVkSWNvbiA6IG51bGxcbiAgICAgICAgfSwgYWN0aXZlS2V5UHJvcHMsIHtcbiAgICAgICAgICBtdWx0aXBsZTogbXVsdGlwbGVcbiAgICAgICAgfSwgbWVudVByb3BzLCB7XG4gICAgICAgICAgc2VsZWN0ZWRLZXlzOiBzZWxlY3RlZEtleXMsXG4gICAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMgKyAnLW1lbnUnXG4gICAgICAgIH0pLFxuICAgICAgICBjbG9uZWRNZW51SXRlbXNcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIERyb3Bkb3duTWVudS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByZW5kZXJNZW51ID0gdGhpcy5yZW5kZXJNZW51KCk7XG4gICAgcmV0dXJuIHJlbmRlck1lbnUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVaKDApJ1xuICAgICAgICB9LFxuICAgICAgICBvbkZvY3VzOiB0aGlzLnByb3BzLm9uUG9wdXBGb2N1cyxcbiAgICAgICAgb25Nb3VzZURvd246IHByZXZlbnREZWZhdWx0RXZlbnQsXG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLnByb3BzLm9uUG9wdXBTY3JvbGxcbiAgICAgIH0sXG4gICAgICByZW5kZXJNZW51XG4gICAgKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duTWVudTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRHJvcGRvd25NZW51LmRpc3BsYXlOYW1lID0gJ0Ryb3Bkb3duTWVudSc7XG5Ecm9wZG93bk1lbnUucHJvcFR5cGVzID0ge1xuICBkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb246IFByb3BUeXBlcy5ib29sLFxuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgZHJvcGRvd25NZW51U3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25Qb3B1cEZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Qb3B1cFNjcm9sbDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTWVudURlU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25NZW51U2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtZW51SXRlbXM6IFByb3BUeXBlcy5hbnksXG4gIGlucHV0VmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICBmaXJzdEFjdGl2ZVZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtZW51SXRlbVNlbGVjdGVkSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSlcbn07XG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bk1lbnU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgVHJpZ2dlciBmcm9tICdyYy10cmlnZ2VyJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgRHJvcGRvd25NZW51IGZyb20gJy4vRHJvcGRvd25NZW51JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgaXNTaW5nbGVNb2RlLCBzYXZlUmVmIH0gZnJvbSAnLi91dGlsJztcblxuVHJpZ2dlci5kaXNwbGF5TmFtZSA9ICdUcmlnZ2VyJztcblxudmFyIEJVSUxUX0lOX1BMQUNFTUVOVFMgPSB7XG4gIGJvdHRvbUxlZnQ6IHtcbiAgICBwb2ludHM6IFsndGwnLCAnYmwnXSxcbiAgICBvZmZzZXQ6IFswLCA0XSxcbiAgICBvdmVyZmxvdzoge1xuICAgICAgYWRqdXN0WDogMCxcbiAgICAgIGFkanVzdFk6IDFcbiAgICB9XG4gIH0sXG4gIHRvcExlZnQ6IHtcbiAgICBwb2ludHM6IFsnYmwnLCAndGwnXSxcbiAgICBvZmZzZXQ6IFswLCAtNF0sXG4gICAgb3ZlcmZsb3c6IHtcbiAgICAgIGFkanVzdFg6IDAsXG4gICAgICBhZGp1c3RZOiAxXG4gICAgfVxuICB9XG59O1xuXG52YXIgU2VsZWN0VHJpZ2dlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTZWxlY3RUcmlnZ2VyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTZWxlY3RUcmlnZ2VyKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdFRyaWdnZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpO1xuXG4gICAgX3RoaXMuc2F2ZURyb3Bkb3duTWVudVJlZiA9IHNhdmVSZWYoX3RoaXMsICdkcm9wZG93bk1lbnVSZWYnKTtcbiAgICBfdGhpcy5zYXZlVHJpZ2dlclJlZiA9IHNhdmVSZWYoX3RoaXMsICd0cmlnZ2VyUmVmJyk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRyb3Bkb3duV2lkdGg6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFNlbGVjdFRyaWdnZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zZXREcm9wZG93bldpZHRoKCk7XG4gIH07XG5cbiAgU2VsZWN0VHJpZ2dlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuc2V0RHJvcGRvd25XaWR0aCgpO1xuICB9O1xuXG4gIFNlbGVjdFRyaWdnZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3BvcHVwQ2xhc3NOYW1lO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uUG9wdXBGb2N1cyA9IF9wcm9wcy5vblBvcHVwRm9jdXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydvblBvcHVwRm9jdXMnXSk7XG5cbiAgICB2YXIgbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZSxcbiAgICAgICAgdmlzaWJsZSA9IHByb3BzLnZpc2libGUsXG4gICAgICAgIGlucHV0VmFsdWUgPSBwcm9wcy5pbnB1dFZhbHVlLFxuICAgICAgICBkcm9wZG93bkFsaWduID0gcHJvcHMuZHJvcGRvd25BbGlnbixcbiAgICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgc2hvd1NlYXJjaCA9IHByb3BzLnNob3dTZWFyY2gsXG4gICAgICAgIGRyb3Bkb3duQ2xhc3NOYW1lID0gcHJvcHMuZHJvcGRvd25DbGFzc05hbWUsXG4gICAgICAgIGRyb3Bkb3duU3R5bGUgPSBwcm9wcy5kcm9wZG93blN0eWxlLFxuICAgICAgICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGggPSBwcm9wcy5kcm9wZG93bk1hdGNoU2VsZWN0V2lkdGg7XG5cbiAgICB2YXIgZHJvcGRvd25QcmVmaXhDbHMgPSB0aGlzLmdldERyb3Bkb3duUHJlZml4Q2xzKCk7XG4gICAgdmFyIHBvcHVwQ2xhc3NOYW1lID0gKF9wb3B1cENsYXNzTmFtZSA9IHt9LCBfcG9wdXBDbGFzc05hbWVbZHJvcGRvd25DbGFzc05hbWVdID0gISFkcm9wZG93bkNsYXNzTmFtZSwgX3BvcHVwQ2xhc3NOYW1lW2Ryb3Bkb3duUHJlZml4Q2xzICsgJy0tJyArIChtdWx0aXBsZSA/ICdtdWx0aXBsZScgOiAnc2luZ2xlJyldID0gMSwgX3BvcHVwQ2xhc3NOYW1lKTtcbiAgICB2YXIgcG9wdXBFbGVtZW50ID0gdGhpcy5nZXREcm9wZG93bkVsZW1lbnQoe1xuICAgICAgbWVudUl0ZW1zOiBwcm9wcy5vcHRpb25zLFxuICAgICAgb25Qb3B1cEZvY3VzOiBvblBvcHVwRm9jdXMsXG4gICAgICBtdWx0aXBsZTogbXVsdGlwbGUsXG4gICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlLFxuICAgICAgdmlzaWJsZTogdmlzaWJsZVxuICAgIH0pO1xuICAgIHZhciBoaWRlQWN0aW9uID0gdm9pZCAwO1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgaGlkZUFjdGlvbiA9IFtdO1xuICAgIH0gZWxzZSBpZiAoaXNTaW5nbGVNb2RlKHByb3BzKSAmJiAhc2hvd1NlYXJjaCkge1xuICAgICAgaGlkZUFjdGlvbiA9IFsnY2xpY2snXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlkZUFjdGlvbiA9IFsnYmx1ciddO1xuICAgIH1cbiAgICB2YXIgcG9wdXBTdHlsZSA9IF9leHRlbmRzKHt9LCBkcm9wZG93blN0eWxlKTtcbiAgICB2YXIgd2lkdGhQcm9wID0gZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoID8gJ3dpZHRoJyA6ICdtaW5XaWR0aCc7XG4gICAgaWYgKHRoaXMuc3RhdGUuZHJvcGRvd25XaWR0aCkge1xuICAgICAgcG9wdXBTdHlsZVt3aWR0aFByb3BdID0gdGhpcy5zdGF0ZS5kcm9wZG93bldpZHRoICsgJ3B4JztcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFRyaWdnZXIsXG4gICAgICBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgc2hvd0FjdGlvbjogZGlzYWJsZWQgPyBbXSA6IHRoaXMucHJvcHMuc2hvd0FjdGlvbixcbiAgICAgICAgaGlkZUFjdGlvbjogaGlkZUFjdGlvbixcbiAgICAgICAgcmVmOiB0aGlzLnNhdmVUcmlnZ2VyUmVmLFxuICAgICAgICBwb3B1cFBsYWNlbWVudDogJ2JvdHRvbUxlZnQnLFxuICAgICAgICBidWlsdGluUGxhY2VtZW50czogQlVJTFRfSU5fUExBQ0VNRU5UUyxcbiAgICAgICAgcHJlZml4Q2xzOiBkcm9wZG93blByZWZpeENscyxcbiAgICAgICAgcG9wdXBUcmFuc2l0aW9uTmFtZTogdGhpcy5nZXREcm9wZG93blRyYW5zaXRpb25OYW1lKCksXG4gICAgICAgIG9uUG9wdXBWaXNpYmxlQ2hhbmdlOiBwcm9wcy5vbkRyb3Bkb3duVmlzaWJsZUNoYW5nZSxcbiAgICAgICAgcG9wdXA6IHBvcHVwRWxlbWVudCxcbiAgICAgICAgcG9wdXBBbGlnbjogZHJvcGRvd25BbGlnbixcbiAgICAgICAgcG9wdXBWaXNpYmxlOiB2aXNpYmxlLFxuICAgICAgICBnZXRQb3B1cENvbnRhaW5lcjogcHJvcHMuZ2V0UG9wdXBDb250YWluZXIsXG4gICAgICAgIHBvcHVwQ2xhc3NOYW1lOiBjbGFzc25hbWVzKHBvcHVwQ2xhc3NOYW1lKSxcbiAgICAgICAgcG9wdXBTdHlsZTogcG9wdXBTdHlsZVxuICAgICAgfSksXG4gICAgICBwcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFNlbGVjdFRyaWdnZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblNlbGVjdFRyaWdnZXIucHJvcFR5cGVzID0ge1xuICBvblBvcHVwRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICBvblBvcHVwU2Nyb2xsOiBQcm9wVHlwZXMuZnVuYyxcbiAgZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZHJvcGRvd25BbGlnbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd1NlYXJjaDogUHJvcFR5cGVzLmJvb2wsXG4gIGRyb3Bkb3duQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGlucHV0VmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZpbHRlck9wdGlvbjogUHJvcFR5cGVzLmFueSxcbiAgb3B0aW9uczogUHJvcFR5cGVzLmFueSxcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwb3B1cENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIHNob3dBY3Rpb246IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICBtZW51SXRlbVNlbGVjdGVkSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSlcbn07XG5cbnZhciBfaW5pdGlhbGlzZVByb3BzID0gZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgdGhpcy5zZXREcm9wZG93bldpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3RoaXMyLnByb3BzLmRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgd2lkdGggPSBSZWFjdERPTS5maW5kRE9NTm9kZShfdGhpczIpLm9mZnNldFdpZHRoO1xuICAgIGlmICh3aWR0aCAhPT0gX3RoaXMyLnN0YXRlLmRyb3Bkb3duV2lkdGgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IGRyb3Bkb3duV2lkdGg6IHdpZHRoIH0pO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldElubmVyTWVudSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMyLmRyb3Bkb3duTWVudVJlZiAmJiBfdGhpczIuZHJvcGRvd25NZW51UmVmLm1lbnVSZWY7XG4gIH07XG5cbiAgdGhpcy5nZXRQb3B1cERPTU5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMi50cmlnZ2VyUmVmLmdldFBvcHVwRG9tTm9kZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RHJvcGRvd25FbGVtZW50ID0gZnVuY3Rpb24gKG5ld1Byb3BzKSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duTWVudSwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiBfdGhpczIuc2F2ZURyb3Bkb3duTWVudVJlZlxuICAgIH0sIG5ld1Byb3BzLCB7XG4gICAgICBwcmVmaXhDbHM6IF90aGlzMi5nZXREcm9wZG93blByZWZpeENscygpLFxuICAgICAgb25NZW51U2VsZWN0OiBwcm9wcy5vbk1lbnVTZWxlY3QsXG4gICAgICBvbk1lbnVEZXNlbGVjdDogcHJvcHMub25NZW51RGVzZWxlY3QsXG4gICAgICBvblBvcHVwU2Nyb2xsOiBwcm9wcy5vblBvcHVwU2Nyb2xsLFxuICAgICAgdmFsdWU6IHByb3BzLnZhbHVlLFxuICAgICAgYmFja2ZpbGxWYWx1ZTogcHJvcHMuYmFja2ZpbGxWYWx1ZSxcbiAgICAgIGZpcnN0QWN0aXZlVmFsdWU6IHByb3BzLmZpcnN0QWN0aXZlVmFsdWUsXG4gICAgICBkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb246IHByb3BzLmRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbixcbiAgICAgIGRyb3Bkb3duTWVudVN0eWxlOiBwcm9wcy5kcm9wZG93bk1lbnVTdHlsZSxcbiAgICAgIG1lbnVJdGVtU2VsZWN0ZWRJY29uOiBwcm9wcy5tZW51SXRlbVNlbGVjdGVkSWNvblxuICAgIH0pKTtcbiAgfTtcblxuICB0aGlzLmdldERyb3Bkb3duVHJhbnNpdGlvbk5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzO1xuICAgIHZhciB0cmFuc2l0aW9uTmFtZSA9IHByb3BzLnRyYW5zaXRpb25OYW1lO1xuICAgIGlmICghdHJhbnNpdGlvbk5hbWUgJiYgcHJvcHMuYW5pbWF0aW9uKSB7XG4gICAgICB0cmFuc2l0aW9uTmFtZSA9IF90aGlzMi5nZXREcm9wZG93blByZWZpeENscygpICsgJy0nICsgcHJvcHMuYW5pbWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWU7XG4gIH07XG5cbiAgdGhpcy5nZXREcm9wZG93blByZWZpeENscyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMyLnByb3BzLnByZWZpeENscyArICctZHJvcGRvd24nO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0VHJpZ2dlcjtcblxuXG5TZWxlY3RUcmlnZ2VyLmRpc3BsYXlOYW1lID0gJ1NlbGVjdFRyaWdnZXInOyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmZ1bmN0aW9uIHZhbHVlVHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgdmFyIGJhc2ljVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKTtcblxuICB2YXIgbGFiZWxJblZhbHVlU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGtleTogYmFzaWNUeXBlLmlzUmVxdWlyZWQsXG4gICAgbGFiZWw6IFByb3BUeXBlcy5ub2RlXG4gIH0pO1xuICBpZiAocHJvcHMubGFiZWxJblZhbHVlKSB7XG4gICAgdmFyIHZhbGlkYXRlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YobGFiZWxJblZhbHVlU2hhcGUpLCBsYWJlbEluVmFsdWVTaGFwZV0pO1xuICAgIHZhciBlcnJvciA9IHZhbGlkYXRlLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvcCBgJyArIHByb3BOYW1lICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsICcgKyAoJ3doZW4geW91IHNldCBgbGFiZWxJblZhbHVlYCB0byBgdHJ1ZWAsIGAnICsgcHJvcE5hbWUgKyAnYCBzaG91bGQgaW4gJykgKyAnc2hhcGUgb2YgYHsga2V5OiBzdHJpbmcgfCBudW1iZXIsIGxhYmVsPzogUmVhY3ROb2RlIH1gLicpO1xuICAgIH1cbiAgfSBlbHNlIGlmICgocHJvcHMubW9kZSA9PT0gJ211bHRpcGxlJyB8fCBwcm9wcy5tb2RlID09PSAndGFncycgfHwgcHJvcHMubXVsdGlwbGUgfHwgcHJvcHMudGFncykgJiYgcHJvcHNbcHJvcE5hbWVdID09PSAnJykge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvcCBgJyArIHByb3BOYW1lICsgJ2Agb2YgdHlwZSBgc3RyaW5nYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgJyArICdleHBlY3RlZCBgYXJyYXlgIHdoZW4gYG11bHRpcGxlYCBvciBgdGFnc2AgaXMgYHRydWVgLicpO1xuICB9IGVsc2Uge1xuICAgIHZhciBfdmFsaWRhdGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihiYXNpY1R5cGUpLCBiYXNpY1R5cGVdKTtcbiAgICByZXR1cm4gX3ZhbGlkYXRlLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIFNlbGVjdFByb3BUeXBlcyA9IHtcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZmlsdGVyT3B0aW9uOiBQcm9wVHlwZXMuYW55LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgc2hvd1NlYXJjaDogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWxsb3dDbGVhcjogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dBcnJvdzogUHJvcFR5cGVzLmJvb2wsXG4gIHRhZ3M6IFByb3BUeXBlcy5ib29sLFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdHJhbnNpdGlvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9wdGlvbkxhYmVsUHJvcDogUHJvcFR5cGVzLnN0cmluZyxcbiAgb3B0aW9uRmlsdGVyUHJvcDogUHJvcFR5cGVzLnN0cmluZyxcbiAgYW5pbWF0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaG9pY2VUcmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvblNlYXJjaDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUG9wdXBTY3JvbGw6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICBvbklucHV0S2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuYW55LFxuICBvbkRlc2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgbGFiZWxJblZhbHVlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdmFsdWU6IHZhbHVlVHlwZSxcbiAgZGVmYXVsdFZhbHVlOiB2YWx1ZVR5cGUsXG4gIGRyb3Bkb3duU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1heFRhZ1RleHRMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIG1heFRhZ0NvdW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICBtYXhUYWdQbGFjZWhvbGRlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIHRva2VuU2VwYXJhdG9yczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIGdldElucHV0RWxlbWVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHNob3dBY3Rpb246IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICBjbGVhckljb246IFByb3BUeXBlcy5ub2RlLFxuICBpbnB1dEljb246IFByb3BUeXBlcy5ub2RlLFxuICByZW1vdmVJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgbWVudUl0ZW1TZWxlY3RlZEljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pXG59OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuLyogZXNsaW50IGZ1bmMtbmFtZXM6IDEgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IHBvbHlmaWxsIH0gZnJvbSAncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnO1xuaW1wb3J0IEtleUNvZGUgZnJvbSAncmMtdXRpbC9lcy9LZXlDb2RlJztcbmltcG9ydCBjaGlsZHJlblRvQXJyYXkgZnJvbSAncmMtdXRpbC9lcy9DaGlsZHJlbi90b0FycmF5JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAncmMtYW5pbWF0ZSc7XG5pbXBvcnQgY2xhc3NlcyBmcm9tICdjb21wb25lbnQtY2xhc3Nlcyc7XG5pbXBvcnQgeyBJdGVtIGFzIE1lbnVJdGVtLCBJdGVtR3JvdXAgYXMgTWVudUl0ZW1Hcm91cCB9IGZyb20gJ3JjLW1lbnUnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgT3B0aW9uIGZyb20gJy4vT3B0aW9uJztcblxuaW1wb3J0IHsgZ2V0UHJvcFZhbHVlLCBnZXRWYWx1ZVByb3BWYWx1ZSwgaXNDb21ib2JveCwgaXNNdWx0aXBsZU9yVGFncywgaXNNdWx0aXBsZU9yVGFnc09yQ29tYm9ib3gsIGlzU2luZ2xlTW9kZSwgdG9BcnJheSwgZ2V0TWFwS2V5LCBmaW5kSW5kZXhJblZhbHVlQnlTaW5nbGVWYWx1ZSwgZ2V0TGFiZWxGcm9tUHJvcHNWYWx1ZSwgVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSwgVU5TRUxFQ1RBQkxFX1NUWUxFLCBwcmV2ZW50RGVmYXVsdEV2ZW50LCBmaW5kRmlyc3RNZW51SXRlbSwgaW5jbHVkZXNTZXBhcmF0b3JzLCBzcGxpdEJ5U2VwYXJhdG9ycywgZGVmYXVsdEZpbHRlckZuLCB2YWxpZGF0ZU9wdGlvblZhbHVlLCBzYXZlUmVmLCB0b1RpdGxlIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCBTZWxlY3RUcmlnZ2VyIGZyb20gJy4vU2VsZWN0VHJpZ2dlcic7XG5pbXBvcnQgeyBTZWxlY3RQcm9wVHlwZXMgfSBmcm9tICcuL1Byb3BUeXBlcyc7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBjaGFpbmluZygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZucyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZuc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZm5zW2ldICYmIHR5cGVvZiBmbnNbaV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZm5zW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxudmFyIFNlbGVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTZWxlY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNlbGVjdChwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3QpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpO1xuXG4gICAgdmFyIG9wdGlvbnNJbmZvID0gU2VsZWN0LmdldE9wdGlvbnNJbmZvRnJvbVByb3BzKHByb3BzKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlOiBTZWxlY3QuZ2V0VmFsdWVGcm9tUHJvcHMocHJvcHMsIHRydWUpLCAvLyB0cnVlOiB1c2UgZGVmYXVsdCB2YWx1ZVxuICAgICAgaW5wdXRWYWx1ZTogcHJvcHMuY29tYm9ib3ggPyBTZWxlY3QuZ2V0SW5wdXRWYWx1ZUZvckNvbWJvYm94KHByb3BzLCBvcHRpb25zSW5mbywgdHJ1ZSAvLyB1c2UgZGVmYXVsdCB2YWx1ZVxuICAgICAgKSA6ICcnLFxuICAgICAgb3BlbjogcHJvcHMuZGVmYXVsdE9wZW4sXG4gICAgICBvcHRpb25zSW5mbzogb3B0aW9uc0luZm8sXG4gICAgICAvLyBhIGZsYWcgZm9yIGF2aW9kIHJlZHVuZGFudCBnZXRPcHRpb25zSW5mb0Zyb21Qcm9wcyBjYWxsXG4gICAgICBza2lwQnVpbGRPcHRpb25zSW5mbzogdHJ1ZVxuICAgIH07XG5cbiAgICBfdGhpcy5zYXZlSW5wdXRSZWYgPSBzYXZlUmVmKF90aGlzLCAnaW5wdXRSZWYnKTtcbiAgICBfdGhpcy5zYXZlSW5wdXRNaXJyb3JSZWYgPSBzYXZlUmVmKF90aGlzLCAnaW5wdXRNaXJyb3JSZWYnKTtcbiAgICBfdGhpcy5zYXZlVG9wQ3RybFJlZiA9IHNhdmVSZWYoX3RoaXMsICd0b3BDdHJsUmVmJyk7XG4gICAgX3RoaXMuc2F2ZVNlbGVjdFRyaWdnZXJSZWYgPSBzYXZlUmVmKF90aGlzLCAnc2VsZWN0VHJpZ2dlclJlZicpO1xuICAgIF90aGlzLnNhdmVSb290UmVmID0gc2F2ZVJlZihfdGhpcywgJ3Jvb3RSZWYnKTtcbiAgICBfdGhpcy5zYXZlU2VsZWN0aW9uUmVmID0gc2F2ZVJlZihfdGhpcywgJ3NlbGVjdGlvblJlZicpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFNlbGVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgU2VsZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgaWYgKGlzTXVsdGlwbGVPclRhZ3ModGhpcy5wcm9wcykpIHtcbiAgICAgIHZhciBpbnB1dE5vZGUgPSB0aGlzLmdldElucHV0RE9NTm9kZSgpO1xuICAgICAgdmFyIG1pcnJvck5vZGUgPSB0aGlzLmdldElucHV0TWlycm9yRE9NTm9kZSgpO1xuICAgICAgaWYgKGlucHV0Tm9kZS52YWx1ZSkge1xuICAgICAgICBpbnB1dE5vZGUuc3R5bGUud2lkdGggPSAnJztcbiAgICAgICAgaW5wdXROb2RlLnN0eWxlLndpZHRoID0gbWlycm9yTm9kZS5jbGllbnRXaWR0aCArICdweCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnB1dE5vZGUuc3R5bGUud2lkdGggPSAnJztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5mb3JjZVBvcHVwQWxpZ24oKTtcbiAgfTtcblxuICBTZWxlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jbGVhckZvY3VzVGltZSgpO1xuICAgIHRoaXMuY2xlYXJCbHVyVGltZSgpO1xuICAgIGlmICh0aGlzLmRyb3Bkb3duQ29udGFpbmVyKSB7XG4gICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMuZHJvcGRvd25Db250YWluZXIpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmRyb3Bkb3duQ29udGFpbmVyKTtcbiAgICAgIHRoaXMuZHJvcGRvd25Db250YWluZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICAvLyBjb21ib2JveCBpZ25vcmVcblxuXG4gIFNlbGVjdC5wcm90b3R5cGUuZm9jdXMgPSBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICBpZiAoaXNTaW5nbGVNb2RlKHRoaXMucHJvcHMpKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvblJlZi5mb2N1cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdldElucHV0RE9NTm9kZSgpLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIFNlbGVjdC5wcm90b3R5cGUuYmx1ciA9IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgaWYgKGlzU2luZ2xlTW9kZSh0aGlzLnByb3BzKSkge1xuICAgICAgdGhpcy5zZWxlY3Rpb25SZWYuYmx1cigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdldElucHV0RE9NTm9kZSgpLmJsdXIoKTtcbiAgICB9XG4gIH07XG5cbiAgU2VsZWN0LnByb3RvdHlwZS5yZW5kZXJDbGVhciA9IGZ1bmN0aW9uIHJlbmRlckNsZWFyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBhbGxvd0NsZWFyID0gX3Byb3BzLmFsbG93Q2xlYXIsXG4gICAgICAgIGNsZWFySWNvbiA9IF9wcm9wcy5jbGVhckljb247XG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHZhbHVlID0gX3N0YXRlLnZhbHVlLFxuICAgICAgICBpbnB1dFZhbHVlID0gX3N0YXRlLmlucHV0VmFsdWU7XG5cbiAgICB2YXIgY2xlYXIgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6ICdjbGVhcicsXG4gICAgICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX2NsZWFyJyxcbiAgICAgICAgb25Nb3VzZURvd246IHByZXZlbnREZWZhdWx0RXZlbnQsXG4gICAgICAgIHN0eWxlOiBVTlNFTEVDVEFCTEVfU1RZTEVcbiAgICAgIH0sIFVOU0VMRUNUQUJMRV9BVFRSSUJVVEUsIHtcbiAgICAgICAgb25DbGljazogdGhpcy5vbkNsZWFyU2VsZWN0aW9uXG4gICAgICB9KSxcbiAgICAgIGNsZWFySWNvbiB8fCBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnaScsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvbl9fY2xlYXItaWNvbicgfSxcbiAgICAgICAgJ1xceEQ3J1xuICAgICAgKVxuICAgICk7XG4gICAgaWYgKCFhbGxvd0NsZWFyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzQ29tYm9ib3godGhpcy5wcm9wcykpIHtcbiAgICAgIGlmIChpbnB1dFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjbGVhcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaW5wdXRWYWx1ZSB8fCB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBjbGVhcjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgU2VsZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9yb290Q2xzO1xuXG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgbXVsdGlwbGUgPSBpc011bHRpcGxlT3JUYWdzKHByb3BzKTtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgICAgaW5wdXRJY29uID0gcHJvcHMuaW5wdXRJY29uO1xuXG4gICAgdmFyIGN0cmxOb2RlID0gdGhpcy5yZW5kZXJUb3BDb250cm9sTm9kZSgpO1xuICAgIHZhciBvcGVuID0gdGhpcy5zdGF0ZS5vcGVuO1xuXG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIHRoaXMuX29wdGlvbnMgPSB0aGlzLnJlbmRlckZpbHRlck9wdGlvbnMoKTtcbiAgICB9XG4gICAgdmFyIHJlYWxPcGVuID0gdGhpcy5nZXRSZWFsT3BlblN0YXRlKCk7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zIHx8IFtdO1xuICAgIHZhciBkYXRhT3JBcmlhQXR0cmlidXRlUHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChrZXkuc3Vic3RyKDAsIDUpID09PSAnZGF0YS0nIHx8IGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScgfHwga2V5ID09PSAncm9sZScpKSB7XG4gICAgICAgIGRhdGFPckFyaWFBdHRyaWJ1dGVQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGV4dHJhU2VsZWN0aW9uUHJvcHMgPSBfZXh0ZW5kcyh7fSwgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzKTtcbiAgICBpZiAoIWlzTXVsdGlwbGVPclRhZ3NPckNvbWJvYm94KHByb3BzKSkge1xuICAgICAgZXh0cmFTZWxlY3Rpb25Qcm9wcyA9IF9leHRlbmRzKHt9LCBleHRyYVNlbGVjdGlvblByb3BzLCB7XG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5vbktleURvd24sXG4gICAgICAgIHRhYkluZGV4OiBwcm9wcy5kaXNhYmxlZCA/IC0xIDogMFxuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciByb290Q2xzID0gKF9yb290Q2xzID0ge30sIF9yb290Q2xzW2NsYXNzTmFtZV0gPSAhIWNsYXNzTmFtZSwgX3Jvb3RDbHNbcHJlZml4Q2xzXSA9IDEsIF9yb290Q2xzW3ByZWZpeENscyArICctb3BlbiddID0gb3BlbiwgX3Jvb3RDbHNbcHJlZml4Q2xzICsgJy1mb2N1c2VkJ10gPSBvcGVuIHx8ICEhdGhpcy5fZm9jdXNlZCwgX3Jvb3RDbHNbcHJlZml4Q2xzICsgJy1jb21ib2JveCddID0gaXNDb21ib2JveChwcm9wcyksIF9yb290Q2xzW3ByZWZpeENscyArICctZGlzYWJsZWQnXSA9IGRpc2FibGVkLCBfcm9vdENsc1twcmVmaXhDbHMgKyAnLWVuYWJsZWQnXSA9ICFkaXNhYmxlZCwgX3Jvb3RDbHNbcHJlZml4Q2xzICsgJy1hbGxvdy1jbGVhciddID0gISFwcm9wcy5hbGxvd0NsZWFyLCBfcm9vdENsc1twcmVmaXhDbHMgKyAnLW5vLWFycm93J10gPSAhcHJvcHMuc2hvd0Fycm93LCBfcm9vdENscyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTZWxlY3RUcmlnZ2VyLFxuICAgICAge1xuICAgICAgICBvblBvcHVwRm9jdXM6IHRoaXMub25Qb3B1cEZvY3VzLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMucHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMucHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgICBkcm9wZG93bkFsaWduOiBwcm9wcy5kcm9wZG93bkFsaWduLFxuICAgICAgICBkcm9wZG93bkNsYXNzTmFtZTogcHJvcHMuZHJvcGRvd25DbGFzc05hbWUsXG4gICAgICAgIGRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aDogcHJvcHMuZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoLFxuICAgICAgICBkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb246IHByb3BzLmRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbixcbiAgICAgICAgZHJvcGRvd25NZW51U3R5bGU6IHByb3BzLmRyb3Bkb3duTWVudVN0eWxlLFxuICAgICAgICB0cmFuc2l0aW9uTmFtZTogcHJvcHMudHJhbnNpdGlvbk5hbWUsXG4gICAgICAgIGFuaW1hdGlvbjogcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICBwcmVmaXhDbHM6IHByb3BzLnByZWZpeENscyxcbiAgICAgICAgZHJvcGRvd25TdHlsZTogcHJvcHMuZHJvcGRvd25TdHlsZSxcbiAgICAgICAgY29tYm9ib3g6IHByb3BzLmNvbWJvYm94LFxuICAgICAgICBzaG93U2VhcmNoOiBwcm9wcy5zaG93U2VhcmNoLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICBtdWx0aXBsZTogbXVsdGlwbGUsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgdmlzaWJsZTogcmVhbE9wZW4sXG4gICAgICAgIGlucHV0VmFsdWU6IHN0YXRlLmlucHV0VmFsdWUsXG4gICAgICAgIHZhbHVlOiBzdGF0ZS52YWx1ZSxcbiAgICAgICAgYmFja2ZpbGxWYWx1ZTogc3RhdGUuYmFja2ZpbGxWYWx1ZSxcbiAgICAgICAgZmlyc3RBY3RpdmVWYWx1ZTogcHJvcHMuZmlyc3RBY3RpdmVWYWx1ZSxcbiAgICAgICAgb25Ecm9wZG93blZpc2libGVDaGFuZ2U6IHRoaXMub25Ecm9wZG93blZpc2libGVDaGFuZ2UsXG4gICAgICAgIGdldFBvcHVwQ29udGFpbmVyOiBwcm9wcy5nZXRQb3B1cENvbnRhaW5lcixcbiAgICAgICAgb25NZW51U2VsZWN0OiB0aGlzLm9uTWVudVNlbGVjdCxcbiAgICAgICAgb25NZW51RGVzZWxlY3Q6IHRoaXMub25NZW51RGVzZWxlY3QsXG4gICAgICAgIG9uUG9wdXBTY3JvbGw6IHByb3BzLm9uUG9wdXBTY3JvbGwsXG4gICAgICAgIHNob3dBY3Rpb246IHByb3BzLnNob3dBY3Rpb24sXG4gICAgICAgIHJlZjogdGhpcy5zYXZlU2VsZWN0VHJpZ2dlclJlZixcbiAgICAgICAgbWVudUl0ZW1TZWxlY3RlZEljb246IHByb3BzLm1lbnVJdGVtU2VsZWN0ZWRJY29uXG4gICAgICB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogcHJvcHMuaWQsXG4gICAgICAgICAgc3R5bGU6IHByb3BzLnN0eWxlLFxuICAgICAgICAgIHJlZjogdGhpcy5zYXZlUm9vdFJlZixcbiAgICAgICAgICBvbkJsdXI6IHRoaXMub25PdXRlckJsdXIsXG4gICAgICAgICAgb25Gb2N1czogdGhpcy5vbk91dGVyRm9jdXMsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzKHJvb3RDbHMpXG4gICAgICAgIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgICAgcmVmOiB0aGlzLnNhdmVTZWxlY3Rpb25SZWYsXG4gICAgICAgICAgICBrZXk6ICdzZWxlY3Rpb24nLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvblxcbiAgICAgICAgICAgICcgKyBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvbi0tJyArIChtdWx0aXBsZSA/ICdtdWx0aXBsZScgOiAnc2luZ2xlJyksXG4gICAgICAgICAgICByb2xlOiAnY29tYm9ib3gnLFxuICAgICAgICAgICAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogJ2xpc3QnLFxuICAgICAgICAgICAgJ2FyaWEtaGFzcG9wdXAnOiAndHJ1ZScsXG4gICAgICAgICAgICAnYXJpYS1leHBhbmRlZCc6IHJlYWxPcGVuXG4gICAgICAgICAgfSwgZXh0cmFTZWxlY3Rpb25Qcm9wcyksXG4gICAgICAgICAgY3RybE5vZGUsXG4gICAgICAgICAgdGhpcy5yZW5kZXJDbGVhcigpLFxuICAgICAgICAgIG11bHRpcGxlIHx8ICFwcm9wcy5zaG93QXJyb3cgPyBudWxsIDogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgICAga2V5OiAnYXJyb3cnLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctYXJyb3cnLFxuICAgICAgICAgICAgICBzdHlsZTogVU5TRUxFQ1RBQkxFX1NUWUxFXG4gICAgICAgICAgICB9LCBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLCB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMub25BcnJvd0NsaWNrXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGlucHV0SWNvbiB8fCBSZWFjdC5jcmVhdGVFbGVtZW50KCdpJywgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctYXJyb3ctaWNvbicgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBTZWxlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblNlbGVjdC5wcm9wVHlwZXMgPSBTZWxlY3RQcm9wVHlwZXM7XG5TZWxlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwcmVmaXhDbHM6ICdyYy1zZWxlY3QnLFxuICBkZWZhdWx0T3BlbjogZmFsc2UsXG4gIGxhYmVsSW5WYWx1ZTogZmFsc2UsXG4gIGRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbjogdHJ1ZSxcbiAgc2hvd1NlYXJjaDogdHJ1ZSxcbiAgYWxsb3dDbGVhcjogZmFsc2UsXG4gIHBsYWNlaG9sZGVyOiAnJyxcbiAgb25DaGFuZ2U6IG5vb3AsXG4gIG9uRm9jdXM6IG5vb3AsXG4gIG9uQmx1cjogbm9vcCxcbiAgb25TZWxlY3Q6IG5vb3AsXG4gIG9uU2VhcmNoOiBub29wLFxuICBvbkRlc2VsZWN0OiBub29wLFxuICBvbklucHV0S2V5RG93bjogbm9vcCxcbiAgc2hvd0Fycm93OiB0cnVlLFxuICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGg6IHRydWUsXG4gIGRyb3Bkb3duU3R5bGU6IHt9LFxuICBkcm9wZG93bk1lbnVTdHlsZToge30sXG4gIG9wdGlvbkZpbHRlclByb3A6ICd2YWx1ZScsXG4gIG9wdGlvbkxhYmVsUHJvcDogJ3ZhbHVlJyxcbiAgbm90Rm91bmRDb250ZW50OiAnTm90IEZvdW5kJyxcbiAgYmFja2ZpbGw6IGZhbHNlLFxuICBzaG93QWN0aW9uOiBbJ2NsaWNrJ10sXG4gIHRva2VuU2VwYXJhdG9yczogW10sXG4gIGF1dG9DbGVhclNlYXJjaFZhbHVlOiB0cnVlXG59O1xuXG5TZWxlY3QuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gIHZhciBvcHRpb25zSW5mbyA9IHByZXZTdGF0ZS5za2lwQnVpbGRPcHRpb25zSW5mbyA/IHByZXZTdGF0ZS5vcHRpb25zSW5mbyA6IFNlbGVjdC5nZXRPcHRpb25zSW5mb0Zyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG5cbiAgdmFyIG5ld1N0YXRlID0ge1xuICAgIG9wdGlvbnNJbmZvOiBvcHRpb25zSW5mbyxcbiAgICBza2lwQnVpbGRPcHRpb25zSW5mbzogZmFsc2VcbiAgfTtcblxuICBpZiAoJ29wZW4nIGluIG5leHRQcm9wcykge1xuICAgIG5ld1N0YXRlLm9wZW4gPSBuZXh0UHJvcHMub3BlbjtcbiAgfVxuXG4gIGlmICgndmFsdWUnIGluIG5leHRQcm9wcykge1xuICAgIHZhciB2YWx1ZSA9IFNlbGVjdC5nZXRWYWx1ZUZyb21Qcm9wcyhuZXh0UHJvcHMpO1xuICAgIG5ld1N0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgaWYgKG5leHRQcm9wcy5jb21ib2JveCkge1xuICAgICAgbmV3U3RhdGUuaW5wdXRWYWx1ZSA9IFNlbGVjdC5nZXRJbnB1dFZhbHVlRm9yQ29tYm9ib3gobmV4dFByb3BzLCBvcHRpb25zSW5mbyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdTdGF0ZTtcbn07XG5cblNlbGVjdC5nZXRPcHRpb25zRnJvbUNoaWxkcmVuID0gZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcblxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjaGlsZC50eXBlLmlzU2VsZWN0T3B0R3JvdXApIHtcbiAgICAgIFNlbGVjdC5nZXRPcHRpb25zRnJvbUNoaWxkcmVuKGNoaWxkLnByb3BzLmNoaWxkcmVuLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3B0aW9ucztcbn07XG5cblNlbGVjdC5nZXRJbnB1dFZhbHVlRm9yQ29tYm9ib3ggPSBmdW5jdGlvbiAocHJvcHMsIG9wdGlvbnNJbmZvLCB1c2VEZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHZhbHVlID0gW107XG4gIGlmICgndmFsdWUnIGluIHByb3BzICYmICF1c2VEZWZhdWx0VmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvQXJyYXkocHJvcHMudmFsdWUpO1xuICB9XG4gIGlmICgnZGVmYXVsdFZhbHVlJyBpbiBwcm9wcyAmJiB1c2VEZWZhdWx0VmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvQXJyYXkocHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgfVxuICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgdmFsdWUgPSB2YWx1ZVswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIGxhYmVsID0gdmFsdWU7XG4gIGlmIChwcm9wcy5sYWJlbEluVmFsdWUpIHtcbiAgICBsYWJlbCA9IHZhbHVlLmxhYmVsO1xuICB9IGVsc2UgaWYgKG9wdGlvbnNJbmZvW2dldE1hcEtleSh2YWx1ZSldKSB7XG4gICAgbGFiZWwgPSBvcHRpb25zSW5mb1tnZXRNYXBLZXkodmFsdWUpXS5sYWJlbDtcbiAgfVxuICBpZiAobGFiZWwgPT09IHVuZGVmaW5lZCkge1xuICAgIGxhYmVsID0gJyc7XG4gIH1cbiAgcmV0dXJuIGxhYmVsO1xufTtcblxuU2VsZWN0LmdldExhYmVsRnJvbU9wdGlvbiA9IGZ1bmN0aW9uIChwcm9wcywgb3B0aW9uKSB7XG4gIHJldHVybiBnZXRQcm9wVmFsdWUob3B0aW9uLCBwcm9wcy5vcHRpb25MYWJlbFByb3ApO1xufTtcblxuU2VsZWN0LmdldE9wdGlvbnNJbmZvRnJvbVByb3BzID0gZnVuY3Rpb24gKHByb3BzLCBwcmVTdGF0ZSkge1xuICB2YXIgb3B0aW9ucyA9IFNlbGVjdC5nZXRPcHRpb25zRnJvbUNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIG9wdGlvbnNJbmZvID0ge307XG4gIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgdmFyIHNpbmdsZVZhbHVlID0gZ2V0VmFsdWVQcm9wVmFsdWUob3B0aW9uKTtcbiAgICBvcHRpb25zSW5mb1tnZXRNYXBLZXkoc2luZ2xlVmFsdWUpXSA9IHtcbiAgICAgIG9wdGlvbjogb3B0aW9uLFxuICAgICAgdmFsdWU6IHNpbmdsZVZhbHVlLFxuICAgICAgbGFiZWw6IFNlbGVjdC5nZXRMYWJlbEZyb21PcHRpb24ocHJvcHMsIG9wdGlvbiksXG4gICAgICB0aXRsZTogb3B0aW9uLnByb3BzLnRpdGxlXG4gICAgfTtcbiAgfSk7XG4gIGlmIChwcmVTdGF0ZSkge1xuICAgIC8vIGtlZXAgb3B0aW9uIGluZm8gaW4gcHJlIHN0YXRlIHZhbHVlLlxuICAgIHZhciBvbGRPcHRpb25zSW5mbyA9IHByZVN0YXRlLm9wdGlvbnNJbmZvO1xuICAgIHZhciB2YWx1ZSA9IHByZVN0YXRlLnZhbHVlO1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgIHZhciBrZXkgPSBnZXRNYXBLZXkodik7XG4gICAgICBpZiAoIW9wdGlvbnNJbmZvW2tleV0gJiYgb2xkT3B0aW9uc0luZm9ba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnNJbmZvW2tleV0gPSBvbGRPcHRpb25zSW5mb1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvcHRpb25zSW5mbztcbn07XG5cblNlbGVjdC5nZXRWYWx1ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIChwcm9wcywgdXNlRGVmYXVsdFZhbHVlKSB7XG4gIHZhciB2YWx1ZSA9IFtdO1xuICBpZiAoJ3ZhbHVlJyBpbiBwcm9wcyAmJiAhdXNlRGVmYXVsdFZhbHVlKSB7XG4gICAgdmFsdWUgPSB0b0FycmF5KHByb3BzLnZhbHVlKTtcbiAgfVxuICBpZiAoJ2RlZmF1bHRWYWx1ZScgaW4gcHJvcHMgJiYgdXNlRGVmYXVsdFZhbHVlKSB7XG4gICAgdmFsdWUgPSB0b0FycmF5KHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gIH1cbiAgaWYgKHByb3BzLmxhYmVsSW5WYWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdi5rZXk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICB0aGlzLm9uSW5wdXRDaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdG9rZW5TZXBhcmF0b3JzID0gX3RoaXMyLnByb3BzLnRva2VuU2VwYXJhdG9ycztcblxuICAgIHZhciB2YWwgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgaWYgKGlzTXVsdGlwbGVPclRhZ3MoX3RoaXMyLnByb3BzKSAmJiB0b2tlblNlcGFyYXRvcnMubGVuZ3RoICYmIGluY2x1ZGVzU2VwYXJhdG9ycyh2YWwsIHRva2VuU2VwYXJhdG9ycykpIHtcbiAgICAgIHZhciBuZXh0VmFsdWUgPSBfdGhpczIuZ2V0VmFsdWVCeUlucHV0KHZhbCk7XG4gICAgICBpZiAobmV4dFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgX3RoaXMyLmZpcmVDaGFuZ2UobmV4dFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIF90aGlzMi5zZXRPcGVuU3RhdGUoZmFsc2UsIHRydWUpO1xuICAgICAgX3RoaXMyLnNldElucHV0VmFsdWUoJycsIGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3RoaXMyLnNldElucHV0VmFsdWUodmFsKTtcbiAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgb3BlbjogdHJ1ZVxuICAgIH0pO1xuICAgIGlmIChpc0NvbWJvYm94KF90aGlzMi5wcm9wcykpIHtcbiAgICAgIF90aGlzMi5maXJlQ2hhbmdlKFt2YWxdKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbkRyb3Bkb3duVmlzaWJsZUNoYW5nZSA9IGZ1bmN0aW9uIChvcGVuKSB7XG4gICAgaWYgKG9wZW4gJiYgIV90aGlzMi5fZm9jdXNlZCkge1xuICAgICAgX3RoaXMyLmNsZWFyQmx1clRpbWUoKTtcbiAgICAgIF90aGlzMi50aW1lb3V0Rm9jdXMoKTtcbiAgICAgIF90aGlzMi5fZm9jdXNlZCA9IHRydWU7XG4gICAgICBfdGhpczIudXBkYXRlRm9jdXNDbGFzc05hbWUoKTtcbiAgICB9XG4gICAgX3RoaXMyLnNldE9wZW5TdGF0ZShvcGVuKTtcbiAgfTtcblxuICB0aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBvcGVuID0gX3RoaXMyLnN0YXRlLm9wZW47XG4gICAgdmFyIGRpc2FibGVkID0gX3RoaXMyLnByb3BzLmRpc2FibGVkO1xuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICBpZiAob3BlbiAmJiAhX3RoaXMyLmdldElucHV0RE9NTm9kZSgpKSB7XG4gICAgICBfdGhpczIub25JbnB1dEtleURvd24oZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5FTlRFUiB8fCBrZXlDb2RlID09PSBLZXlDb2RlLkRPV04pIHtcbiAgICAgIGlmICghb3BlbikgX3RoaXMyLnNldE9wZW5TdGF0ZSh0cnVlKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25JbnB1dEtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHM7XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBzdGF0ZSA9IF90aGlzMi5zdGF0ZTtcbiAgICB2YXIga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG4gICAgaWYgKGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpICYmICFldmVudC50YXJnZXQudmFsdWUgJiYga2V5Q29kZSA9PT0gS2V5Q29kZS5CQUNLU1BBQ0UpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBfdGhpczIucmVtb3ZlU2VsZWN0ZWQodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5ET1dOKSB7XG4gICAgICBpZiAoIXN0YXRlLm9wZW4pIHtcbiAgICAgICAgX3RoaXMyLm9wZW5JZkhhc0NoaWxkcmVuKCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLkVOVEVSICYmIHN0YXRlLm9wZW4pIHtcbiAgICAgIC8vIEF2aW9kIHRyaWdnZXIgZm9ybSBzdWJtaXQgd2hlbiBzZWxlY3QgaXRlbVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTA4NjFcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLkVTQykge1xuICAgICAgaWYgKHN0YXRlLm9wZW4pIHtcbiAgICAgICAgX3RoaXMyLnNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfdGhpczIuZ2V0UmVhbE9wZW5TdGF0ZShzdGF0ZSkpIHtcbiAgICAgIHZhciBtZW51ID0gX3RoaXMyLnNlbGVjdFRyaWdnZXJSZWYuZ2V0SW5uZXJNZW51KCk7XG4gICAgICBpZiAobWVudSAmJiBtZW51Lm9uS2V5RG93bihldmVudCwgX3RoaXMyLmhhbmRsZUJhY2tmaWxsKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbk1lbnVTZWxlY3QgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBpdGVtID0gX3JlZi5pdGVtO1xuXG4gICAgaWYgKCFpdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gX3RoaXMyLnN0YXRlLnZhbHVlO1xuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICB2YXIgc2VsZWN0ZWRWYWx1ZSA9IGdldFZhbHVlUHJvcFZhbHVlKGl0ZW0pO1xuICAgIHZhciBsYXN0VmFsdWUgPSB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXTtcbiAgICBfdGhpczIuZmlyZVNlbGVjdChzZWxlY3RlZFZhbHVlKTtcbiAgICBpZiAoaXNNdWx0aXBsZU9yVGFncyhwcm9wcykpIHtcbiAgICAgIGlmIChmaW5kSW5kZXhJblZhbHVlQnlTaW5nbGVWYWx1ZSh2YWx1ZSwgc2VsZWN0ZWRWYWx1ZSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuY29uY2F0KFtzZWxlY3RlZFZhbHVlXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsYXN0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiBsYXN0VmFsdWUgPT09IHNlbGVjdGVkVmFsdWUgJiYgc2VsZWN0ZWRWYWx1ZSAhPT0gX3RoaXMyLnN0YXRlLmJhY2tmaWxsVmFsdWUpIHtcbiAgICAgICAgX3RoaXMyLnNldE9wZW5TdGF0ZShmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gW3NlbGVjdGVkVmFsdWVdO1xuICAgICAgX3RoaXMyLnNldE9wZW5TdGF0ZShmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICAgIF90aGlzMi5maXJlQ2hhbmdlKHZhbHVlKTtcbiAgICB2YXIgaW5wdXRWYWx1ZSA9IHZvaWQgMDtcbiAgICBpZiAoaXNDb21ib2JveChwcm9wcykpIHtcbiAgICAgIGlucHV0VmFsdWUgPSBnZXRQcm9wVmFsdWUoaXRlbSwgcHJvcHMub3B0aW9uTGFiZWxQcm9wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRWYWx1ZSA9ICcnO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYXV0b0NsZWFyU2VhcmNoVmFsdWUpIHtcbiAgICAgIF90aGlzMi5zZXRJbnB1dFZhbHVlKGlucHV0VmFsdWUsIGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbk1lbnVEZXNlbGVjdCA9IGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciBpdGVtID0gX3JlZjIuaXRlbSxcbiAgICAgICAgZG9tRXZlbnQgPSBfcmVmMi5kb21FdmVudDtcblxuICAgIGlmIChkb21FdmVudC50eXBlID09PSAna2V5ZG93bicgJiYgZG9tRXZlbnQua2V5Q29kZSA9PT0gS2V5Q29kZS5FTlRFUikge1xuICAgICAgX3RoaXMyLnJlbW92ZVNlbGVjdGVkKGdldFZhbHVlUHJvcFZhbHVlKGl0ZW0pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGRvbUV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgIF90aGlzMi5yZW1vdmVTZWxlY3RlZChnZXRWYWx1ZVByb3BWYWx1ZShpdGVtKSk7XG4gICAgfVxuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcblxuICAgIGlmIChwcm9wcy5hdXRvQ2xlYXJTZWFyY2hWYWx1ZSkge1xuICAgICAgX3RoaXMyLnNldElucHV0VmFsdWUoJycsIGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbkFycm93Q2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICghX3RoaXMyLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBfdGhpczIuc2V0T3BlblN0YXRlKCFfdGhpczIuc3RhdGUub3BlbiwgIV90aGlzMi5zdGF0ZS5vcGVuKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vblBsYWNlaG9sZGVyQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKF90aGlzMi5nZXRJbnB1dERPTU5vZGUoKSkge1xuICAgICAgX3RoaXMyLmdldElucHV0RE9NTm9kZSgpLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25PdXRlckZvY3VzID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoX3RoaXMyLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF90aGlzMi5jbGVhckJsdXJUaW1lKCk7XG4gICAgaWYgKCFpc011bHRpcGxlT3JUYWdzT3JDb21ib2JveChfdGhpczIucHJvcHMpICYmIGUudGFyZ2V0ID09PSBfdGhpczIuZ2V0SW5wdXRET01Ob2RlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKF90aGlzMi5fZm9jdXNlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfdGhpczIuX2ZvY3VzZWQgPSB0cnVlO1xuICAgIF90aGlzMi51cGRhdGVGb2N1c0NsYXNzTmFtZSgpO1xuICAgIF90aGlzMi50aW1lb3V0Rm9jdXMoKTtcbiAgfTtcblxuICB0aGlzLm9uUG9wdXBGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBmaXggaWUgc2Nyb2xsYmFyLCBmb2N1cyBlbGVtZW50IGFnYWluXG4gICAgX3RoaXMyLm1heWJlRm9jdXModHJ1ZSwgdHJ1ZSk7XG4gIH07XG5cbiAgdGhpcy5vbk91dGVyQmx1ciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKF90aGlzMi5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfdGhpczIuYmx1clRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuX2ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzMi51cGRhdGVGb2N1c0NsYXNzTmFtZSgpO1xuICAgICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzO1xuICAgICAgdmFyIHZhbHVlID0gX3RoaXMyLnN0YXRlLnZhbHVlO1xuICAgICAgdmFyIGlucHV0VmFsdWUgPSBfdGhpczIuc3RhdGUuaW5wdXRWYWx1ZTtcblxuICAgICAgaWYgKGlzU2luZ2xlTW9kZShwcm9wcykgJiYgcHJvcHMuc2hvd1NlYXJjaCAmJiBpbnB1dFZhbHVlICYmIHByb3BzLmRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IF90aGlzMi5fb3B0aW9ucyB8fCBbXTtcbiAgICAgICAgaWYgKG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGZpcnN0T3B0aW9uID0gZmluZEZpcnN0TWVudUl0ZW0ob3B0aW9ucyk7XG4gICAgICAgICAgaWYgKGZpcnN0T3B0aW9uKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFtnZXRWYWx1ZVByb3BWYWx1ZShmaXJzdE9wdGlvbildO1xuICAgICAgICAgICAgX3RoaXMyLmZpcmVDaGFuZ2UodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc011bHRpcGxlT3JUYWdzKHByb3BzKSAmJiBpbnB1dFZhbHVlKSB7XG4gICAgICAgIC8vIHdoeSBub3QgdXNlIHNldFN0YXRlP1xuICAgICAgICBfdGhpczIuc3RhdGUuaW5wdXRWYWx1ZSA9IF90aGlzMi5nZXRJbnB1dERPTU5vZGUoKS52YWx1ZSA9ICcnO1xuXG4gICAgICAgIHZhbHVlID0gX3RoaXMyLmdldFZhbHVlQnlJbnB1dChpbnB1dFZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBfdGhpczIuZmlyZUNoYW5nZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzMi5zZXRPcGVuU3RhdGUoZmFsc2UpO1xuICAgICAgcHJvcHMub25CbHVyKF90aGlzMi5nZXRWTEZvck9uQ2hhbmdlKHZhbHVlKSk7XG4gICAgfSwgMTApO1xuICB9O1xuXG4gIHRoaXMub25DbGVhclNlbGVjdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICB2YXIgc3RhdGUgPSBfdGhpczIuc3RhdGU7XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpbnB1dFZhbHVlID0gc3RhdGUuaW5wdXRWYWx1ZSxcbiAgICAgICAgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmIChpbnB1dFZhbHVlIHx8IHZhbHVlLmxlbmd0aCkge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBfdGhpczIuZmlyZUNoYW5nZShbXSk7XG4gICAgICB9XG4gICAgICBfdGhpczIuc2V0T3BlblN0YXRlKGZhbHNlLCB0cnVlKTtcbiAgICAgIGlmIChpbnB1dFZhbHVlKSB7XG4gICAgICAgIF90aGlzMi5zZXRJbnB1dFZhbHVlKCcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbkNob2ljZUFuaW1hdGlvbkxlYXZlID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzMi5mb3JjZVBvcHVwQWxpZ24oKTtcbiAgfTtcblxuICB0aGlzLmdldE9wdGlvbkluZm9CeVNpbmdsZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zSW5mbykge1xuICAgIHZhciBpbmZvID0gdm9pZCAwO1xuICAgIG9wdGlvbnNJbmZvID0gb3B0aW9uc0luZm8gfHwgX3RoaXMyLnN0YXRlLm9wdGlvbnNJbmZvO1xuICAgIGlmIChvcHRpb25zSW5mb1tnZXRNYXBLZXkodmFsdWUpXSkge1xuICAgICAgaW5mbyA9IG9wdGlvbnNJbmZvW2dldE1hcEtleSh2YWx1ZSldO1xuICAgIH1cbiAgICBpZiAoaW5mbykge1xuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuICAgIHZhciBkZWZhdWx0TGFiZWwgPSB2YWx1ZTtcbiAgICBpZiAoX3RoaXMyLnByb3BzLmxhYmVsSW5WYWx1ZSkge1xuICAgICAgdmFyIGxhYmVsID0gZ2V0TGFiZWxGcm9tUHJvcHNWYWx1ZShfdGhpczIucHJvcHMudmFsdWUsIHZhbHVlKTtcbiAgICAgIGlmIChsYWJlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlZmF1bHRMYWJlbCA9IGxhYmVsO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZGVmYXVsdEluZm8gPSB7XG4gICAgICBvcHRpb246IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIE9wdGlvbixcbiAgICAgICAgeyB2YWx1ZTogdmFsdWUsIGtleTogdmFsdWUgfSxcbiAgICAgICAgdmFsdWVcbiAgICAgICksXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBsYWJlbDogZGVmYXVsdExhYmVsXG4gICAgfTtcbiAgICByZXR1cm4gZGVmYXVsdEluZm87XG4gIH07XG5cbiAgdGhpcy5nZXRPcHRpb25CeVNpbmdsZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIF9nZXRPcHRpb25JbmZvQnlTaW5nbCA9IF90aGlzMi5nZXRPcHRpb25JbmZvQnlTaW5nbGVWYWx1ZSh2YWx1ZSksXG4gICAgICAgIG9wdGlvbiA9IF9nZXRPcHRpb25JbmZvQnlTaW5nbC5vcHRpb247XG5cbiAgICByZXR1cm4gb3B0aW9uO1xuICB9O1xuXG4gIHRoaXMuZ2V0T3B0aW9uc0J5U2luZ2xlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLmdldE9wdGlvbkJ5U2luZ2xlVmFsdWUodmFsdWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZ2V0VmFsdWVCeUxhYmVsID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgaWYgKGxhYmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgIE9iamVjdC5rZXlzKF90aGlzMi5zdGF0ZS5vcHRpb25zSW5mbykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgaW5mbyA9IF90aGlzMi5zdGF0ZS5vcHRpb25zSW5mb1trZXldO1xuICAgICAgaWYgKHRvQXJyYXkoaW5mby5sYWJlbCkuam9pbignJykgPT09IGxhYmVsKSB7XG4gICAgICAgIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgdGhpcy5nZXRWTEJ5U2luZ2xlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoX3RoaXMyLnByb3BzLmxhYmVsSW5WYWx1ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiB2YWx1ZSxcbiAgICAgICAgbGFiZWw6IF90aGlzMi5nZXRMYWJlbEJ5U2luZ2xlVmFsdWUodmFsdWUpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgdGhpcy5nZXRWTEZvck9uQ2hhbmdlID0gZnVuY3Rpb24gKHZsc18pIHtcbiAgICB2YXIgdmxzID0gdmxzXztcbiAgICBpZiAodmxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghX3RoaXMyLnByb3BzLmxhYmVsSW5WYWx1ZSkge1xuICAgICAgICB2bHMgPSB2bHMubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmxzID0gdmxzLm1hcChmdW5jdGlvbiAodmwpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiB2bCxcbiAgICAgICAgICAgIGxhYmVsOiBfdGhpczIuZ2V0TGFiZWxCeVNpbmdsZVZhbHVlKHZsKVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzTXVsdGlwbGVPclRhZ3MoX3RoaXMyLnByb3BzKSA/IHZscyA6IHZsc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIHZscztcbiAgfTtcblxuICB0aGlzLmdldExhYmVsQnlTaW5nbGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9uc0luZm8pIHtcbiAgICB2YXIgX2dldE9wdGlvbkluZm9CeVNpbmdsMiA9IF90aGlzMi5nZXRPcHRpb25JbmZvQnlTaW5nbGVWYWx1ZSh2YWx1ZSwgb3B0aW9uc0luZm8pLFxuICAgICAgICBsYWJlbCA9IF9nZXRPcHRpb25JbmZvQnlTaW5nbDIubGFiZWw7XG5cbiAgICByZXR1cm4gbGFiZWw7XG4gIH07XG5cbiAgdGhpcy5nZXREcm9wZG93bkNvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIV90aGlzMi5kcm9wZG93bkNvbnRhaW5lcikge1xuICAgICAgX3RoaXMyLmRyb3Bkb3duQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKF90aGlzMi5kcm9wZG93bkNvbnRhaW5lcik7XG4gICAgfVxuICAgIHJldHVybiBfdGhpczIuZHJvcGRvd25Db250YWluZXI7XG4gIH07XG5cbiAgdGhpcy5nZXRQbGFjZWhvbGRlckVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzLFxuICAgICAgICBzdGF0ZSA9IF90aGlzMi5zdGF0ZTtcblxuICAgIHZhciBoaWRkZW4gPSBmYWxzZTtcbiAgICBpZiAoc3RhdGUuaW5wdXRWYWx1ZSkge1xuICAgICAgaGlkZGVuID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHN0YXRlLnZhbHVlLmxlbmd0aCkge1xuICAgICAgaGlkZGVuID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGlzQ29tYm9ib3gocHJvcHMpICYmIHN0YXRlLnZhbHVlLmxlbmd0aCA9PT0gMSAmJiAhc3RhdGUudmFsdWVbMF0pIHtcbiAgICAgIGhpZGRlbiA9IGZhbHNlO1xuICAgIH1cbiAgICB2YXIgcGxhY2Vob2xkZXIgPSBwcm9wcy5wbGFjZWhvbGRlcjtcbiAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgIG9uTW91c2VEb3duOiBwcmV2ZW50RGVmYXVsdEV2ZW50LFxuICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBkaXNwbGF5OiBoaWRkZW4gPyAnbm9uZScgOiAnYmxvY2snXG4gICAgICAgICAgfSwgVU5TRUxFQ1RBQkxFX1NUWUxFKVxuICAgICAgICB9LCBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLCB7XG4gICAgICAgICAgb25DbGljazogX3RoaXMyLm9uUGxhY2Vob2xkZXJDbGljayxcbiAgICAgICAgICBjbGFzc05hbWU6IHByb3BzLnByZWZpeENscyArICctc2VsZWN0aW9uX19wbGFjZWhvbGRlcidcbiAgICAgICAgfSksXG4gICAgICAgIHBsYWNlaG9sZGVyXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLmdldElucHV0RWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2NsYXNzbmFtZXM7XG5cbiAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHM7XG4gICAgdmFyIGlucHV0RWxlbWVudCA9IHByb3BzLmdldElucHV0RWxlbWVudCA/IHByb3BzLmdldElucHV0RWxlbWVudCgpIDogUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IGlkOiBwcm9wcy5pZCwgYXV0b0NvbXBsZXRlOiAnb2ZmJyB9KTtcbiAgICB2YXIgaW5wdXRDbHMgPSBjbGFzc25hbWVzKGlucHV0RWxlbWVudC5wcm9wcy5jbGFzc05hbWUsIChfY2xhc3NuYW1lcyA9IHt9LCBfY2xhc3NuYW1lc1twcm9wcy5wcmVmaXhDbHMgKyAnLXNlYXJjaF9fZmllbGQnXSA9IHRydWUsIF9jbGFzc25hbWVzKSk7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNDk5MiNpc3N1ZWNvbW1lbnQtMjgxNTQyMTU5XG4gICAgLy8gQWRkIHNwYWNlIHRvIHRoZSBlbmQgb2YgdGhlIGlucHV0VmFsdWUgYXMgdGhlIHdpZHRoIG1lYXN1cmVtZW50IHRvbGVyYW5jZVxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogcHJvcHMucHJlZml4Q2xzICsgJy1zZWFyY2hfX2ZpZWxkX193cmFwJyB9LFxuICAgICAgUmVhY3QuY2xvbmVFbGVtZW50KGlucHV0RWxlbWVudCwge1xuICAgICAgICByZWY6IF90aGlzMi5zYXZlSW5wdXRSZWYsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpczIub25JbnB1dENoYW5nZSxcbiAgICAgICAgb25LZXlEb3duOiBjaGFpbmluZyhfdGhpczIub25JbnB1dEtleURvd24sIGlucHV0RWxlbWVudC5wcm9wcy5vbktleURvd24sIF90aGlzMi5wcm9wcy5vbklucHV0S2V5RG93biksXG4gICAgICAgIHZhbHVlOiBfdGhpczIuc3RhdGUuaW5wdXRWYWx1ZSxcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICBjbGFzc05hbWU6IGlucHV0Q2xzXG4gICAgICB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAge1xuICAgICAgICAgIHJlZjogX3RoaXMyLnNhdmVJbnB1dE1pcnJvclJlZixcbiAgICAgICAgICBjbGFzc05hbWU6IHByb3BzLnByZWZpeENscyArICctc2VhcmNoX19maWVsZF9fbWlycm9yJ1xuICAgICAgICB9LFxuICAgICAgICBfdGhpczIuc3RhdGUuaW5wdXRWYWx1ZSxcbiAgICAgICAgJ1xceEEwJ1xuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgdGhpcy5nZXRJbnB1dERPTU5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMi50b3BDdHJsUmVmID8gX3RoaXMyLnRvcEN0cmxSZWYucXVlcnlTZWxlY3RvcignaW5wdXQsdGV4dGFyZWEsZGl2W2NvbnRlbnRFZGl0YWJsZV0nKSA6IF90aGlzMi5pbnB1dFJlZjtcbiAgfTtcblxuICB0aGlzLmdldElucHV0TWlycm9yRE9NTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMyLmlucHV0TWlycm9yUmVmO1xuICB9O1xuXG4gIHRoaXMuZ2V0UG9wdXBET01Ob2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczIuc2VsZWN0VHJpZ2dlclJlZi5nZXRQb3B1cERPTU5vZGUoKTtcbiAgfTtcblxuICB0aGlzLmdldFBvcHVwTWVudUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMyLnNlbGVjdFRyaWdnZXJSZWYuZ2V0SW5uZXJNZW51KCk7XG4gIH07XG5cbiAgdGhpcy5zZXRPcGVuU3RhdGUgPSBmdW5jdGlvbiAob3BlbiwgbmVlZEZvY3VzKSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzLFxuICAgICAgICBzdGF0ZSA9IF90aGlzMi5zdGF0ZTtcblxuICAgIGlmIChzdGF0ZS5vcGVuID09PSBvcGVuKSB7XG4gICAgICBfdGhpczIubWF5YmVGb2N1cyhvcGVuLCBuZWVkRm9jdXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfdGhpczIucHJvcHMub25Ecm9wZG93blZpc2libGVDaGFuZ2UpIHtcbiAgICAgIF90aGlzMi5wcm9wcy5vbkRyb3Bkb3duVmlzaWJsZUNoYW5nZShvcGVuKTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFN0YXRlID0ge1xuICAgICAgb3Blbjogb3BlbixcbiAgICAgIGJhY2tmaWxsVmFsdWU6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgLy8gY2xlYXIgc2VhcmNoIGlucHV0IHZhbHVlIHdoZW4gb3BlbiBpcyBmYWxzZSBpbiBzaW5nbGVNb2RlLlxuICAgIGlmICghb3BlbiAmJiBpc1NpbmdsZU1vZGUocHJvcHMpICYmIHByb3BzLnNob3dTZWFyY2gpIHtcbiAgICAgIF90aGlzMi5zZXRJbnB1dFZhbHVlKCcnLCBmYWxzZSk7XG4gICAgfVxuICAgIGlmICghb3Blbikge1xuICAgICAgX3RoaXMyLm1heWJlRm9jdXMob3BlbiwgbmVlZEZvY3VzKTtcbiAgICB9XG4gICAgX3RoaXMyLnNldFN0YXRlKG5leHRTdGF0ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgX3RoaXMyLm1heWJlRm9jdXMob3BlbiwgbmVlZEZvY3VzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnNldElucHV0VmFsdWUgPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuICAgIHZhciBmaXJlU2VhcmNoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gICAgaWYgKGlucHV0VmFsdWUgIT09IF90aGlzMi5zdGF0ZS5pbnB1dFZhbHVlKSB7XG4gICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlXG4gICAgICB9LCBfdGhpczIuZm9yY2VQb3B1cEFsaWduKTtcbiAgICAgIGlmIChmaXJlU2VhcmNoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vblNlYXJjaChpbnB1dFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5nZXRWYWx1ZUJ5SW5wdXQgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIF9wcm9wczIgPSBfdGhpczIucHJvcHMsXG4gICAgICAgIG11bHRpcGxlID0gX3Byb3BzMi5tdWx0aXBsZSxcbiAgICAgICAgdG9rZW5TZXBhcmF0b3JzID0gX3Byb3BzMi50b2tlblNlcGFyYXRvcnM7XG5cbiAgICB2YXIgbmV4dFZhbHVlID0gX3RoaXMyLnN0YXRlLnZhbHVlO1xuICAgIHZhciBoYXNOZXdWYWx1ZSA9IGZhbHNlO1xuICAgIHNwbGl0QnlTZXBhcmF0b3JzKHN0cmluZywgdG9rZW5TZXBhcmF0b3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgdmFyIHNlbGVjdGVkVmFsdWUgPSBbbGFiZWxdO1xuICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IF90aGlzMi5nZXRWYWx1ZUJ5TGFiZWwobGFiZWwpO1xuICAgICAgICBpZiAodmFsdWUgJiYgZmluZEluZGV4SW5WYWx1ZUJ5U2luZ2xlVmFsdWUobmV4dFZhbHVlLCB2YWx1ZSkgPT09IC0xKSB7XG4gICAgICAgICAgbmV4dFZhbHVlID0gbmV4dFZhbHVlLmNvbmNhdCh2YWx1ZSk7XG4gICAgICAgICAgaGFzTmV3VmFsdWUgPSB0cnVlO1xuICAgICAgICAgIF90aGlzMi5maXJlU2VsZWN0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGFnXG4gICAgICAgIGlmIChmaW5kSW5kZXhJblZhbHVlQnlTaW5nbGVWYWx1ZShuZXh0VmFsdWUsIGxhYmVsKSA9PT0gLTEpIHtcbiAgICAgICAgICBuZXh0VmFsdWUgPSBuZXh0VmFsdWUuY29uY2F0KHNlbGVjdGVkVmFsdWUpO1xuICAgICAgICAgIGhhc05ld1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICBfdGhpczIuZmlyZVNlbGVjdChsYWJlbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaGFzTmV3VmFsdWUgPyBuZXh0VmFsdWUgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5nZXRSZWFsT3BlblN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgdmFyIG9wZW4gPSAoc3RhdGUgfHwgX3RoaXMyLnN0YXRlKS5vcGVuO1xuICAgIHZhciBvcHRpb25zID0gX3RoaXMyLl9vcHRpb25zIHx8IFtdO1xuICAgIGlmIChpc011bHRpcGxlT3JUYWdzT3JDb21ib2JveChfdGhpczIucHJvcHMpIHx8ICFfdGhpczIucHJvcHMuc2hvd1NlYXJjaCkge1xuICAgICAgaWYgKG9wZW4gJiYgIW9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIG9wZW4gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wZW47XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVCYWNrZmlsbCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKCFfdGhpczIucHJvcHMuYmFja2ZpbGwgfHwgIShpc1NpbmdsZU1vZGUoX3RoaXMyLnByb3BzKSB8fCBpc0NvbWJvYm94KF90aGlzMi5wcm9wcykpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IGdldFZhbHVlUHJvcFZhbHVlKGl0ZW0pO1xuXG4gICAgaWYgKGlzQ29tYm9ib3goX3RoaXMyLnByb3BzKSkge1xuICAgICAgX3RoaXMyLnNldElucHV0VmFsdWUoa2V5LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgIHZhbHVlOiBba2V5XSxcbiAgICAgIGJhY2tmaWxsVmFsdWU6IGtleVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZmlsdGVyT3B0aW9uID0gZnVuY3Rpb24gKGlucHV0LCBjaGlsZCkge1xuICAgIHZhciBkZWZhdWx0RmlsdGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0RmlsdGVyRm47XG4gICAgdmFyIHZhbHVlID0gX3RoaXMyLnN0YXRlLnZhbHVlO1xuXG4gICAgdmFyIGxhc3RWYWx1ZSA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdO1xuICAgIGlmICghaW5wdXQgfHwgbGFzdFZhbHVlICYmIGxhc3RWYWx1ZSA9PT0gX3RoaXMyLnN0YXRlLmJhY2tmaWxsVmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgZmlsdGVyRm4gPSBfdGhpczIucHJvcHMuZmlsdGVyT3B0aW9uO1xuICAgIGlmICgnZmlsdGVyT3B0aW9uJyBpbiBfdGhpczIucHJvcHMpIHtcbiAgICAgIGlmIChfdGhpczIucHJvcHMuZmlsdGVyT3B0aW9uID09PSB0cnVlKSB7XG4gICAgICAgIGZpbHRlckZuID0gZGVmYXVsdEZpbHRlcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZmlsdGVyRm4gPSBkZWZhdWx0RmlsdGVyO1xuICAgIH1cblxuICAgIGlmICghZmlsdGVyRm4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpbHRlckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZmlsdGVyRm4uY2FsbChfdGhpczIsIGlucHV0LCBjaGlsZCk7XG4gICAgfSBlbHNlIGlmIChjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICB0aGlzLnRpbWVvdXRGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX3RoaXMyLmZvY3VzVGltZXIpIHtcbiAgICAgIF90aGlzMi5jbGVhckZvY3VzVGltZSgpO1xuICAgIH1cbiAgICBfdGhpczIuZm9jdXNUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRm9jdXMoKTtcbiAgICB9LCAxMCk7XG4gIH07XG5cbiAgdGhpcy5jbGVhckZvY3VzVGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX3RoaXMyLmZvY3VzVGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpczIuZm9jdXNUaW1lcik7XG4gICAgICBfdGhpczIuZm9jdXNUaW1lciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY2xlYXJCbHVyVGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX3RoaXMyLmJsdXJUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMi5ibHVyVGltZXIpO1xuICAgICAgX3RoaXMyLmJsdXJUaW1lciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMudXBkYXRlRm9jdXNDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJvb3RSZWYgPSBfdGhpczIucm9vdFJlZixcbiAgICAgICAgcHJvcHMgPSBfdGhpczIucHJvcHM7XG4gICAgLy8gYXZvaWQgc2V0U3RhdGUgYW5kIGl0cyBzaWRlIGVmZmVjdFxuXG4gICAgaWYgKF90aGlzMi5fZm9jdXNlZCkge1xuICAgICAgY2xhc3Nlcyhyb290UmVmKS5hZGQocHJvcHMucHJlZml4Q2xzICsgJy1mb2N1c2VkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsYXNzZXMocm9vdFJlZikucmVtb3ZlKHByb3BzLnByZWZpeENscyArICctZm9jdXNlZCcpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm1heWJlRm9jdXMgPSBmdW5jdGlvbiAob3BlbiwgbmVlZEZvY3VzKSB7XG4gICAgaWYgKG5lZWRGb2N1cyB8fCBvcGVuKSB7XG4gICAgICB2YXIgaW5wdXQgPSBfdGhpczIuZ2V0SW5wdXRET01Ob2RlKCk7XG4gICAgICB2YXIgX2RvY3VtZW50ID0gZG9jdW1lbnQsXG4gICAgICAgICAgYWN0aXZlRWxlbWVudCA9IF9kb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gICAgICBpZiAoaW5wdXQgJiYgKG9wZW4gfHwgaXNNdWx0aXBsZU9yVGFnc09yQ29tYm9ib3goX3RoaXMyLnByb3BzKSkpIHtcbiAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgIT09IGlucHV0KSB7XG4gICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICBfdGhpczIuX2ZvY3VzZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCAhPT0gX3RoaXMyLnNlbGVjdGlvblJlZikge1xuICAgICAgICAgIF90aGlzMi5zZWxlY3Rpb25SZWYuZm9jdXMoKTtcbiAgICAgICAgICBfdGhpczIuX2ZvY3VzZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucmVtb3ZlU2VsZWN0ZWQgPSBmdW5jdGlvbiAoc2VsZWN0ZWRLZXksIGUpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHM7XG4gICAgaWYgKHByb3BzLmRpc2FibGVkIHx8IF90aGlzMi5pc0NoaWxkRGlzYWJsZWQoc2VsZWN0ZWRLZXkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRG8gbm90IHRyaWdnZXIgVHJpZ2dlciBwb3B1cFxuICAgIGlmIChlICYmIGUuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IF90aGlzMi5zdGF0ZS52YWx1ZS5maWx0ZXIoZnVuY3Rpb24gKHNpbmdsZVZhbHVlKSB7XG4gICAgICByZXR1cm4gc2luZ2xlVmFsdWUgIT09IHNlbGVjdGVkS2V5O1xuICAgIH0pO1xuICAgIHZhciBjYW5NdWx0aXBsZSA9IGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpO1xuXG4gICAgaWYgKGNhbk11bHRpcGxlKSB7XG4gICAgICB2YXIgZXZlbnQgPSBzZWxlY3RlZEtleTtcbiAgICAgIGlmIChwcm9wcy5sYWJlbEluVmFsdWUpIHtcbiAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAga2V5OiBzZWxlY3RlZEtleSxcbiAgICAgICAgICBsYWJlbDogX3RoaXMyLmdldExhYmVsQnlTaW5nbGVWYWx1ZShzZWxlY3RlZEtleSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHByb3BzLm9uRGVzZWxlY3QoZXZlbnQsIF90aGlzMi5nZXRPcHRpb25CeVNpbmdsZVZhbHVlKHNlbGVjdGVkS2V5KSk7XG4gICAgfVxuICAgIF90aGlzMi5maXJlQ2hhbmdlKHZhbHVlKTtcbiAgfTtcblxuICB0aGlzLm9wZW5JZkhhc0NoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICBpZiAoUmVhY3QuQ2hpbGRyZW4uY291bnQocHJvcHMuY2hpbGRyZW4pIHx8IGlzU2luZ2xlTW9kZShwcm9wcykpIHtcbiAgICAgIF90aGlzMi5zZXRPcGVuU3RhdGUodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZmlyZVNlbGVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIF90aGlzMi5wcm9wcy5vblNlbGVjdChfdGhpczIuZ2V0VkxCeVNpbmdsZVZhbHVlKHZhbHVlKSwgX3RoaXMyLmdldE9wdGlvbkJ5U2luZ2xlVmFsdWUodmFsdWUpKTtcbiAgfTtcblxuICB0aGlzLmZpcmVDaGFuZ2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHM7XG4gICAgaWYgKCEoJ3ZhbHVlJyBpbiBwcm9wcykpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSwgX3RoaXMyLmZvcmNlUG9wdXBBbGlnbik7XG4gICAgfVxuICAgIHZhciB2bHMgPSBfdGhpczIuZ2V0VkxGb3JPbkNoYW5nZSh2YWx1ZSk7XG4gICAgdmFyIG9wdGlvbnMgPSBfdGhpczIuZ2V0T3B0aW9uc0J5U2luZ2xlVmFsdWUodmFsdWUpO1xuICAgIHByb3BzLm9uQ2hhbmdlKHZscywgaXNNdWx0aXBsZU9yVGFncyhfdGhpczIucHJvcHMpID8gb3B0aW9ucyA6IG9wdGlvbnNbMF0pO1xuICB9O1xuXG4gIHRoaXMuaXNDaGlsZERpc2FibGVkID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBjaGlsZHJlblRvQXJyYXkoX3RoaXMyLnByb3BzLmNoaWxkcmVuKS5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgdmFyIGNoaWxkVmFsdWUgPSBnZXRWYWx1ZVByb3BWYWx1ZShjaGlsZCk7XG4gICAgICByZXR1cm4gY2hpbGRWYWx1ZSA9PT0ga2V5ICYmIGNoaWxkLnByb3BzICYmIGNoaWxkLnByb3BzLmRpc2FibGVkO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZm9yY2VQb3B1cEFsaWduID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3RoaXMyLnN0YXRlLm9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3RoaXMyLnNlbGVjdFRyaWdnZXJSZWYudHJpZ2dlclJlZi5mb3JjZVBvcHVwQWxpZ24oKTtcbiAgfTtcblxuICB0aGlzLnJlbmRlckZpbHRlck9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlucHV0VmFsdWUgPSBfdGhpczIuc3RhdGUuaW5wdXRWYWx1ZTtcbiAgICB2YXIgX3Byb3BzMyA9IF90aGlzMi5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMzLmNoaWxkcmVuLFxuICAgICAgICB0YWdzID0gX3Byb3BzMy50YWdzLFxuICAgICAgICBmaWx0ZXJPcHRpb24gPSBfcHJvcHMzLmZpbHRlck9wdGlvbixcbiAgICAgICAgbm90Rm91bmRDb250ZW50ID0gX3Byb3BzMy5ub3RGb3VuZENvbnRlbnQ7XG5cbiAgICB2YXIgbWVudUl0ZW1zID0gW107XG4gICAgdmFyIGNoaWxkcmVuS2V5cyA9IFtdO1xuICAgIHZhciBvcHRpb25zID0gX3RoaXMyLnJlbmRlckZpbHRlck9wdGlvbnNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4sIGNoaWxkcmVuS2V5cywgbWVudUl0ZW1zKTtcbiAgICBpZiAodGFncykge1xuICAgICAgLy8gdGFncyB2YWx1ZSBtdXN0IGJlIHN0cmluZ1xuICAgICAgdmFyIHZhbHVlID0gX3RoaXMyLnN0YXRlLnZhbHVlO1xuICAgICAgdmFsdWUgPSB2YWx1ZS5maWx0ZXIoZnVuY3Rpb24gKHNpbmdsZVZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbktleXMuaW5kZXhPZihzaW5nbGVWYWx1ZSkgPT09IC0xICYmICghaW5wdXRWYWx1ZSB8fCBTdHJpbmcoc2luZ2xlVmFsdWUpLmluZGV4T2YoU3RyaW5nKGlucHV0VmFsdWUpKSA+IC0xKTtcbiAgICAgIH0pO1xuICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoc2luZ2xlVmFsdWUpIHtcbiAgICAgICAgdmFyIGtleSA9IHNpbmdsZVZhbHVlO1xuICAgICAgICB2YXIgbWVudUl0ZW0gPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIE1lbnVJdGVtLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0eWxlOiBVTlNFTEVDVEFCTEVfU1RZTEUsXG4gICAgICAgICAgICByb2xlOiAnb3B0aW9uJyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSxcbiAgICAgICAgICAgIHZhbHVlOiBrZXksXG4gICAgICAgICAgICBrZXk6IGtleVxuICAgICAgICAgIH0sXG4gICAgICAgICAga2V5XG4gICAgICAgICk7XG4gICAgICAgIG9wdGlvbnMucHVzaChtZW51SXRlbSk7XG4gICAgICAgIG1lbnVJdGVtcy5wdXNoKG1lbnVJdGVtKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGlucHV0VmFsdWUpIHtcbiAgICAgICAgdmFyIG5vdEZpbmRJbnB1dEl0ZW0gPSBtZW51SXRlbXMuZXZlcnkoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgIC8vIHRoaXMuZmlsdGVyT3B0aW9uIHJldHVybiB0cnVlIGhhcyB0d28gbWVhbmluZyxcbiAgICAgICAgICAvLyAxLCBzb21lIG9uZSBleGlzdHMgYWZ0ZXIgZmlsdGVyaW5nXG4gICAgICAgICAgLy8gMiwgZmlsdGVyT3B0aW9uIGlzIHNldCB0byBmYWxzZVxuICAgICAgICAgIC8vIGNvbmRpdGlvbiAyIGRvZXMgbm90IG1lYW4gdGhlIG9wdGlvbiBoYXMgc2FtZSB2YWx1ZSB3aXRoIGlucHV0VmFsdWVcbiAgICAgICAgICB2YXIgZmlsdGVyRm4gPSBmdW5jdGlvbiBmaWx0ZXJGbigpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRWYWx1ZVByb3BWYWx1ZShvcHRpb24pID09PSBpbnB1dFZhbHVlO1xuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGZpbHRlck9wdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiAhX3RoaXMyLmZpbHRlck9wdGlvbi5jYWxsKF90aGlzMiwgaW5wdXRWYWx1ZSwgb3B0aW9uLCBmaWx0ZXJGbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAhZmlsdGVyRm4oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChub3RGaW5kSW5wdXRJdGVtKSB7XG4gICAgICAgICAgb3B0aW9ucy51bnNoaWZ0KFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBNZW51SXRlbSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRSxcbiAgICAgICAgICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZTogVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSxcbiAgICAgICAgICAgICAgdmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICAgICAgICAgIGtleTogaW5wdXRWYWx1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlucHV0VmFsdWVcbiAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5sZW5ndGggJiYgbm90Rm91bmRDb250ZW50KSB7XG4gICAgICBvcHRpb25zID0gW1JlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIE1lbnVJdGVtLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRSxcbiAgICAgICAgICBhdHRyaWJ1dGU6IFVOU0VMRUNUQUJMRV9BVFRSSUJVVEUsXG4gICAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICAgICAgdmFsdWU6ICdOT1RfRk9VTkQnLFxuICAgICAgICAgIGtleTogJ05PVF9GT1VORCdcbiAgICAgICAgfSxcbiAgICAgICAgbm90Rm91bmRDb250ZW50XG4gICAgICApXTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH07XG5cbiAgdGhpcy5yZW5kZXJGaWx0ZXJPcHRpb25zRnJvbUNoaWxkcmVuID0gZnVuY3Rpb24gKGNoaWxkcmVuLCBjaGlsZHJlbktleXMsIG1lbnVJdGVtcykge1xuICAgIHZhciBzZWwgPSBbXTtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHM7XG4gICAgdmFyIGlucHV0VmFsdWUgPSBfdGhpczIuc3RhdGUuaW5wdXRWYWx1ZTtcblxuICAgIHZhciB0YWdzID0gcHJvcHMudGFncztcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGNoaWxkLnR5cGUuaXNTZWxlY3RPcHRHcm91cCkge1xuICAgICAgICB2YXIgaW5uZXJJdGVtcyA9IF90aGlzMi5yZW5kZXJGaWx0ZXJPcHRpb25zRnJvbUNoaWxkcmVuKGNoaWxkLnByb3BzLmNoaWxkcmVuLCBjaGlsZHJlbktleXMsIG1lbnVJdGVtcyk7XG4gICAgICAgIGlmIChpbm5lckl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBsYWJlbCA9IGNoaWxkLnByb3BzLmxhYmVsO1xuICAgICAgICAgIHZhciBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgICAgaWYgKCFrZXkgJiYgdHlwZW9mIGxhYmVsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAga2V5ID0gbGFiZWw7XG4gICAgICAgICAgfSBlbHNlIGlmICghbGFiZWwgJiYga2V5KSB7XG4gICAgICAgICAgICBsYWJlbCA9IGtleTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIE1lbnVJdGVtR3JvdXAsXG4gICAgICAgICAgICB7IGtleToga2V5LCB0aXRsZTogbGFiZWwgfSxcbiAgICAgICAgICAgIGlubmVySXRlbXNcbiAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHdhcm5pbmcoY2hpbGQudHlwZS5pc1NlbGVjdE9wdGlvbiwgJ3RoZSBjaGlsZHJlbiBvZiBgU2VsZWN0YCBzaG91bGQgYmUgYFNlbGVjdC5PcHRpb25gIG9yIGBTZWxlY3QuT3B0R3JvdXBgLCAnICsgKCdpbnN0ZWFkIG9mIGAnICsgKGNoaWxkLnR5cGUubmFtZSB8fCBjaGlsZC50eXBlLmRpc3BsYXlOYW1lIHx8IGNoaWxkLnR5cGUpICsgJ2AuJykpO1xuXG4gICAgICB2YXIgY2hpbGRWYWx1ZSA9IGdldFZhbHVlUHJvcFZhbHVlKGNoaWxkKTtcblxuICAgICAgdmFsaWRhdGVPcHRpb25WYWx1ZShjaGlsZFZhbHVlLCBfdGhpczIucHJvcHMpO1xuXG4gICAgICBpZiAoX3RoaXMyLmZpbHRlck9wdGlvbihpbnB1dFZhbHVlLCBjaGlsZCkpIHtcbiAgICAgICAgdmFyIG1lbnVJdGVtID0gUmVhY3QuY3JlYXRlRWxlbWVudChNZW51SXRlbSwgX2V4dGVuZHMoe1xuICAgICAgICAgIHN0eWxlOiBVTlNFTEVDVEFCTEVfU1RZTEUsXG4gICAgICAgICAgYXR0cmlidXRlOiBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLFxuICAgICAgICAgIHZhbHVlOiBjaGlsZFZhbHVlLFxuICAgICAgICAgIGtleTogY2hpbGRWYWx1ZSxcbiAgICAgICAgICByb2xlOiAnb3B0aW9uJ1xuICAgICAgICB9LCBjaGlsZC5wcm9wcykpO1xuICAgICAgICBzZWwucHVzaChtZW51SXRlbSk7XG4gICAgICAgIG1lbnVJdGVtcy5wdXNoKG1lbnVJdGVtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhZ3MpIHtcbiAgICAgICAgY2hpbGRyZW5LZXlzLnB1c2goY2hpbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VsO1xuICB9O1xuXG4gIHRoaXMucmVuZGVyVG9wQ29udHJvbE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9zdGF0ZTIgPSBfdGhpczIuc3RhdGUsXG4gICAgICAgIHZhbHVlID0gX3N0YXRlMi52YWx1ZSxcbiAgICAgICAgb3BlbiA9IF9zdGF0ZTIub3BlbixcbiAgICAgICAgaW5wdXRWYWx1ZSA9IF9zdGF0ZTIuaW5wdXRWYWx1ZTtcblxuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICB2YXIgY2hvaWNlVHJhbnNpdGlvbk5hbWUgPSBwcm9wcy5jaG9pY2VUcmFuc2l0aW9uTmFtZSxcbiAgICAgICAgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBtYXhUYWdUZXh0TGVuZ3RoID0gcHJvcHMubWF4VGFnVGV4dExlbmd0aCxcbiAgICAgICAgbWF4VGFnQ291bnQgPSBwcm9wcy5tYXhUYWdDb3VudCxcbiAgICAgICAgbWF4VGFnUGxhY2Vob2xkZXIgPSBwcm9wcy5tYXhUYWdQbGFjZWhvbGRlcixcbiAgICAgICAgc2hvd1NlYXJjaCA9IHByb3BzLnNob3dTZWFyY2gsXG4gICAgICAgIHJlbW92ZUljb24gPSBwcm9wcy5yZW1vdmVJY29uO1xuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHByZWZpeENscyArICctc2VsZWN0aW9uX19yZW5kZXJlZCc7XG4gICAgLy8gc2VhcmNoIGlucHV0IGlzIGluc2lkZSB0b3BDb250cm9sTm9kZSBpbiBzaW5nbGUsIG11bHRpcGxlICYgY29tYm9ib3guIDIwMTYvMDQvMTNcbiAgICB2YXIgaW5uZXJOb2RlID0gbnVsbDtcbiAgICBpZiAoaXNTaW5nbGVNb2RlKHByb3BzKSkge1xuICAgICAgdmFyIHNlbGVjdGVkVmFsdWUgPSBudWxsO1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICB2YXIgc2hvd1NlbGVjdGVkVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIG9wYWNpdHkgPSAxO1xuICAgICAgICBpZiAoIXNob3dTZWFyY2gpIHtcbiAgICAgICAgICBzaG93U2VsZWN0ZWRWYWx1ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gIWlucHV0VmFsdWU7XG4gICAgICAgICAgICBpZiAoc2hvd1NlbGVjdGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgb3BhY2l0eSA9IDAuNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkVmFsdWUgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgc2luZ2xlVmFsdWUgPSB2YWx1ZVswXTtcblxuICAgICAgICB2YXIgX2dldE9wdGlvbkluZm9CeVNpbmdsMyA9IF90aGlzMi5nZXRPcHRpb25JbmZvQnlTaW5nbGVWYWx1ZShzaW5nbGVWYWx1ZSksXG4gICAgICAgICAgICBsYWJlbCA9IF9nZXRPcHRpb25JbmZvQnlTaW5nbDMubGFiZWwsXG4gICAgICAgICAgICB0aXRsZSA9IF9nZXRPcHRpb25JbmZvQnlTaW5nbDMudGl0bGU7XG5cbiAgICAgICAgc2VsZWN0ZWRWYWx1ZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAga2V5OiAndmFsdWUnLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvbi1zZWxlY3RlZC12YWx1ZScsXG4gICAgICAgICAgICB0aXRsZTogdG9UaXRsZSh0aXRsZSB8fCBsYWJlbCksXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBzaG93U2VsZWN0ZWRWYWx1ZSA/ICdibG9jaycgOiAnbm9uZScsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGxhYmVsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIXNob3dTZWFyY2gpIHtcbiAgICAgICAgaW5uZXJOb2RlID0gW3NlbGVjdGVkVmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5uZXJOb2RlID0gW3NlbGVjdGVkVmFsdWUsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlYXJjaCAnICsgcHJlZml4Q2xzICsgJy1zZWFyY2gtLWlubGluZScsXG4gICAgICAgICAgICBrZXk6ICdpbnB1dCcsXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBvcGVuID8gJ2Jsb2NrJyA6ICdub25lJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgX3RoaXMyLmdldElucHV0RWxlbWVudCgpXG4gICAgICAgICldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2VsZWN0ZWRWYWx1ZU5vZGVzID0gW107XG4gICAgICB2YXIgbGltaXRlZENvdW50VmFsdWUgPSB2YWx1ZTtcbiAgICAgIHZhciBtYXhUYWdQbGFjZWhvbGRlckVsID0gdm9pZCAwO1xuICAgICAgaWYgKG1heFRhZ0NvdW50ICE9PSB1bmRlZmluZWQgJiYgdmFsdWUubGVuZ3RoID4gbWF4VGFnQ291bnQpIHtcbiAgICAgICAgbGltaXRlZENvdW50VmFsdWUgPSBsaW1pdGVkQ291bnRWYWx1ZS5zbGljZSgwLCBtYXhUYWdDb3VudCk7XG4gICAgICAgIHZhciBvbWl0dGVkVmFsdWVzID0gX3RoaXMyLmdldFZMRm9yT25DaGFuZ2UodmFsdWUuc2xpY2UobWF4VGFnQ291bnQsIHZhbHVlLmxlbmd0aCkpO1xuICAgICAgICB2YXIgY29udGVudCA9ICcrICcgKyAodmFsdWUubGVuZ3RoIC0gbWF4VGFnQ291bnQpICsgJyAuLi4nO1xuICAgICAgICBpZiAobWF4VGFnUGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICBjb250ZW50ID0gdHlwZW9mIG1heFRhZ1BsYWNlaG9sZGVyID09PSAnZnVuY3Rpb24nID8gbWF4VGFnUGxhY2Vob2xkZXIob21pdHRlZFZhbHVlcykgOiBtYXhUYWdQbGFjZWhvbGRlcjtcbiAgICAgICAgfVxuICAgICAgICBtYXhUYWdQbGFjZWhvbGRlckVsID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnbGknLFxuICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgIHN0eWxlOiBVTlNFTEVDVEFCTEVfU1RZTEVcbiAgICAgICAgICB9LCBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLCB7XG4gICAgICAgICAgICBvbk1vdXNlRG93bjogcHJldmVudERlZmF1bHRFdmVudCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX2Nob2ljZSAnICsgcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX2Nob2ljZV9fZGlzYWJsZWQnLFxuICAgICAgICAgICAga2V5OiAnbWF4VGFnUGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgdGl0bGU6IHRvVGl0bGUoY29udGVudClcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX2Nob2ljZV9fY29udGVudCcgfSxcbiAgICAgICAgICAgIGNvbnRlbnRcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNNdWx0aXBsZU9yVGFncyhwcm9wcykpIHtcbiAgICAgICAgc2VsZWN0ZWRWYWx1ZU5vZGVzID0gbGltaXRlZENvdW50VmFsdWUubWFwKGZ1bmN0aW9uIChzaW5nbGVWYWx1ZSkge1xuICAgICAgICAgIHZhciBpbmZvID0gX3RoaXMyLmdldE9wdGlvbkluZm9CeVNpbmdsZVZhbHVlKHNpbmdsZVZhbHVlKTtcbiAgICAgICAgICB2YXIgY29udGVudCA9IGluZm8ubGFiZWw7XG4gICAgICAgICAgdmFyIHRpdGxlID0gaW5mby50aXRsZSB8fCBjb250ZW50O1xuICAgICAgICAgIGlmIChtYXhUYWdUZXh0TGVuZ3RoICYmIHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJyAmJiBjb250ZW50Lmxlbmd0aCA+IG1heFRhZ1RleHRMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDAsIG1heFRhZ1RleHRMZW5ndGgpICsgJy4uLic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBkaXNhYmxlZCA9IF90aGlzMi5pc0NoaWxkRGlzYWJsZWQoc2luZ2xlVmFsdWUpO1xuICAgICAgICAgIHZhciBjaG9pY2VDbGFzc05hbWUgPSBkaXNhYmxlZCA/IHByZWZpeENscyArICctc2VsZWN0aW9uX19jaG9pY2UgJyArIHByZWZpeENscyArICctc2VsZWN0aW9uX19jaG9pY2VfX2Rpc2FibGVkJyA6IHByZWZpeENscyArICctc2VsZWN0aW9uX19jaG9pY2UnO1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRVxuICAgICAgICAgICAgfSwgVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSwge1xuICAgICAgICAgICAgICBvbk1vdXNlRG93bjogcHJldmVudERlZmF1bHRFdmVudCxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjaG9pY2VDbGFzc05hbWUsXG4gICAgICAgICAgICAgIGtleTogc2luZ2xlVmFsdWUsXG4gICAgICAgICAgICAgIHRpdGxlOiB0b1RpdGxlKHRpdGxlKVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctc2VsZWN0aW9uX19jaG9pY2VfX2NvbnRlbnQnIH0sXG4gICAgICAgICAgICAgIGNvbnRlbnRcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBkaXNhYmxlZCA/IG51bGwgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBfdGhpczIucmVtb3ZlU2VsZWN0ZWQoc2luZ2xlVmFsdWUsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX2Nob2ljZV9fcmVtb3ZlJ1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICByZW1vdmVJY29uIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2knLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvbl9fY2hvaWNlX19yZW1vdmUtaWNvbicgfSxcbiAgICAgICAgICAgICAgICAnXFx4RDcnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhUYWdQbGFjZWhvbGRlckVsKSB7XG4gICAgICAgIHNlbGVjdGVkVmFsdWVOb2Rlcy5wdXNoKG1heFRhZ1BsYWNlaG9sZGVyRWwpO1xuICAgICAgfVxuICAgICAgc2VsZWN0ZWRWYWx1ZU5vZGVzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2xpJyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1zZWFyY2ggJyArIHByZWZpeENscyArICctc2VhcmNoLS1pbmxpbmUnLFxuICAgICAgICAgIGtleTogJ19faW5wdXQnXG4gICAgICAgIH0sXG4gICAgICAgIF90aGlzMi5nZXRJbnB1dEVsZW1lbnQoKVxuICAgICAgKSk7XG5cbiAgICAgIGlmIChpc011bHRpcGxlT3JUYWdzKHByb3BzKSAmJiBjaG9pY2VUcmFuc2l0aW9uTmFtZSkge1xuICAgICAgICBpbm5lck5vZGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEFuaW1hdGUsXG4gICAgICAgICAge1xuICAgICAgICAgICAgb25MZWF2ZTogX3RoaXMyLm9uQ2hvaWNlQW5pbWF0aW9uTGVhdmUsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICd1bCcsXG4gICAgICAgICAgICB0cmFuc2l0aW9uTmFtZTogY2hvaWNlVHJhbnNpdGlvbk5hbWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNlbGVjdGVkVmFsdWVOb2Rlc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5uZXJOb2RlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAndWwnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgc2VsZWN0ZWRWYWx1ZU5vZGVzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCByZWY6IF90aGlzMi5zYXZlVG9wQ3RybFJlZiB9LFxuICAgICAgX3RoaXMyLmdldFBsYWNlaG9sZGVyRWxlbWVudCgpLFxuICAgICAgaW5uZXJOb2RlXG4gICAgKTtcbiAgfTtcbn07XG5cblNlbGVjdC5kaXNwbGF5TmFtZSA9ICdTZWxlY3QnO1xuXG5wb2x5ZmlsbChTZWxlY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnZhciBPcHRHcm91cCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhPcHRHcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3B0R3JvdXAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9wdEdyb3VwKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIE9wdEdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5PcHRHcm91cC5pc1NlbGVjdE9wdEdyb3VwID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IE9wdEdyb3VwOyIsImltcG9ydCBTZWxlY3QgZnJvbSAnLi9TZWxlY3QnO1xuaW1wb3J0IE9wdGlvbiBmcm9tICcuL09wdGlvbic7XG5pbXBvcnQgeyBTZWxlY3RQcm9wVHlwZXMgfSBmcm9tICcuL1Byb3BUeXBlcyc7XG5pbXBvcnQgT3B0R3JvdXAgZnJvbSAnLi9PcHRHcm91cCc7XG5TZWxlY3QuT3B0aW9uID0gT3B0aW9uO1xuU2VsZWN0Lk9wdEdyb3VwID0gT3B0R3JvdXA7XG5leHBvcnQgeyBPcHRpb24sIE9wdEdyb3VwLCBTZWxlY3RQcm9wVHlwZXMgfTtcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxudmFyIExvY2FsZVJlY2VpdmVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9jYWxlUmVjZWl2ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9jYWxlUmVjZWl2ZXIoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2NhbGVSZWNlaXZlcik7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMb2NhbGVSZWNlaXZlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvY2FsZVJlY2VpdmVyKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvY2FsZVJlY2VpdmVyLCBbe1xuICAgICAgICBrZXk6ICdnZXRMb2NhbGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9jYWxlKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50TmFtZSA9IF9wcm9wcy5jb21wb25lbnROYW1lLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRMb2NhbGUgPSBfcHJvcHMuZGVmYXVsdExvY2FsZTtcbiAgICAgICAgICAgIHZhciBhbnRMb2NhbGUgPSB0aGlzLmNvbnRleHQuYW50TG9jYWxlO1xuXG4gICAgICAgICAgICB2YXIgbG9jYWxlRnJvbUNvbnRleHQgPSBhbnRMb2NhbGUgJiYgYW50TG9jYWxlW2NvbXBvbmVudE5hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0eXBlb2YgZGVmYXVsdExvY2FsZSA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRMb2NhbGUoKSA6IGRlZmF1bHRMb2NhbGUsIGxvY2FsZUZyb21Db250ZXh0IHx8IHt9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0TG9jYWxlQ29kZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMb2NhbGVDb2RlKCkge1xuICAgICAgICAgICAgdmFyIGFudExvY2FsZSA9IHRoaXMuY29udGV4dC5hbnRMb2NhbGU7XG5cbiAgICAgICAgICAgIHZhciBsb2NhbGVDb2RlID0gYW50TG9jYWxlICYmIGFudExvY2FsZS5sb2NhbGU7XG4gICAgICAgICAgICAvLyBIYWQgdXNlIExvY2FsZVByb3ZpZGUgYnV0IGRpZG4ndCBzZXQgbG9jYWxlXG4gICAgICAgICAgICBpZiAoYW50TG9jYWxlICYmIGFudExvY2FsZS5leGlzdCAmJiAhbG9jYWxlQ29kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZW4tdXMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZUNvZGU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih0aGlzLmdldExvY2FsZSgpLCB0aGlzLmdldExvY2FsZUNvZGUoKSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9jYWxlUmVjZWl2ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IExvY2FsZVJlY2VpdmVyO1xuXG5Mb2NhbGVSZWNlaXZlci5jb250ZXh0VHlwZXMgPSB7XG4gICAgYW50TG9jYWxlOiBQcm9wVHlwZXMub2JqZWN0XG59OyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICcvIHBhZ2UnLFxuICBqdW1wX3RvOiAnR290bycsXG4gIGp1bXBfdG9fY29uZmlybTogJ2NvbmZpcm0nLFxuICBwYWdlOiAnJyxcblxuICAvLyBQYWdpbmF0aW9uLmpzeFxuICBwcmV2X3BhZ2U6ICdQcmV2aW91cyBQYWdlJyxcbiAgbmV4dF9wYWdlOiAnTmV4dCBQYWdlJyxcbiAgcHJldl81OiAnUHJldmlvdXMgNSBQYWdlcycsXG4gIG5leHRfNTogJ05leHQgNSBQYWdlcycsXG4gIHByZXZfMzogJ1ByZXZpb3VzIDMgUGFnZXMnLFxuICBuZXh0XzM6ICdOZXh0IDMgUGFnZXMnXG59OyIsInZhciBsb2NhbGUgPSB7XG4gICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgdGltZSdcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBDYWxlbmRhckxvY2FsZSBmcm9tICdyYy1jYWxlbmRhci9lcy9sb2NhbGUvZW5fVVMnO1xuaW1wb3J0IFRpbWVQaWNrZXJMb2NhbGUgZnJvbSAnLi4vLi4vdGltZS1waWNrZXIvbG9jYWxlL2VuX1VTJztcbi8vIE1lcmdlIGludG8gYSBsb2NhbGUgb2JqZWN0XG52YXIgbG9jYWxlID0ge1xuICAgIGxhbmc6IF9leHRlbmRzKHsgcGxhY2Vob2xkZXI6ICdTZWxlY3QgZGF0ZScsIHJhbmdlUGxhY2Vob2xkZXI6IFsnU3RhcnQgZGF0ZScsICdFbmQgZGF0ZSddIH0sIENhbGVuZGFyTG9jYWxlKSxcbiAgICB0aW1lUGlja2VyTG9jYWxlOiBfZXh0ZW5kcyh7fSwgVGltZVBpY2tlckxvY2FsZSlcbn07XG4vLyBBbGwgc2V0dGluZ3MgYXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2Jsb2IvbWFzdGVyL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvbG9jYWxlL2V4YW1wbGUuanNvblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBQYWdpbmF0aW9uIGZyb20gJ3JjLXBhZ2luYXRpb24vZXMvbG9jYWxlL2VuX1VTJztcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4uL2RhdGUtcGlja2VyL2xvY2FsZS9lbl9VUyc7XG5pbXBvcnQgVGltZVBpY2tlciBmcm9tICcuLi90aW1lLXBpY2tlci9sb2NhbGUvZW5fVVMnO1xuaW1wb3J0IENhbGVuZGFyIGZyb20gJy4uL2NhbGVuZGFyL2xvY2FsZS9lbl9VUyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbG9jYWxlOiAnZW4nLFxuICAgIFBhZ2luYXRpb246IFBhZ2luYXRpb24sXG4gICAgRGF0ZVBpY2tlcjogRGF0ZVBpY2tlcixcbiAgICBUaW1lUGlja2VyOiBUaW1lUGlja2VyLFxuICAgIENhbGVuZGFyOiBDYWxlbmRhcixcbiAgICBUYWJsZToge1xuICAgICAgICBmaWx0ZXJUaXRsZTogJ0ZpbHRlciBtZW51JyxcbiAgICAgICAgZmlsdGVyQ29uZmlybTogJ09LJyxcbiAgICAgICAgZmlsdGVyUmVzZXQ6ICdSZXNldCcsXG4gICAgICAgIGVtcHR5VGV4dDogJ05vIGRhdGEnLFxuICAgICAgICBzZWxlY3RBbGw6ICdTZWxlY3QgY3VycmVudCBwYWdlJyxcbiAgICAgICAgc2VsZWN0SW52ZXJ0OiAnSW52ZXJ0IGN1cnJlbnQgcGFnZSdcbiAgICB9LFxuICAgIE1vZGFsOiB7XG4gICAgICAgIG9rVGV4dDogJ09LJyxcbiAgICAgICAgY2FuY2VsVGV4dDogJ0NhbmNlbCcsXG4gICAgICAgIGp1c3RPa1RleHQ6ICdPSydcbiAgICB9LFxuICAgIFBvcGNvbmZpcm06IHtcbiAgICAgICAgb2tUZXh0OiAnT0snLFxuICAgICAgICBjYW5jZWxUZXh0OiAnQ2FuY2VsJ1xuICAgIH0sXG4gICAgVHJhbnNmZXI6IHtcbiAgICAgICAgdGl0bGVzOiBbJycsICcnXSxcbiAgICAgICAgbm90Rm91bmRDb250ZW50OiAnTm90IEZvdW5kJyxcbiAgICAgICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdTZWFyY2ggaGVyZScsXG4gICAgICAgIGl0ZW1Vbml0OiAnaXRlbScsXG4gICAgICAgIGl0ZW1zVW5pdDogJ2l0ZW1zJ1xuICAgIH0sXG4gICAgU2VsZWN0OiB7XG4gICAgICAgIG5vdEZvdW5kQ29udGVudDogJ05vdCBGb3VuZCdcbiAgICB9LFxuICAgIFVwbG9hZDoge1xuICAgICAgICB1cGxvYWRpbmc6ICdVcGxvYWRpbmcuLi4nLFxuICAgICAgICByZW1vdmVGaWxlOiAnUmVtb3ZlIGZpbGUnLFxuICAgICAgICB1cGxvYWRFcnJvcjogJ1VwbG9hZCBlcnJvcicsXG4gICAgICAgIHByZXZpZXdGaWxlOiAnUHJldmlldyBmaWxlJ1xuICAgIH1cbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gICAgfWlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCkgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgfXJldHVybiB0O1xufTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSY1NlbGVjdCwgeyBPcHRpb24sIE9wdEdyb3VwIH0gZnJvbSAncmMtc2VsZWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IExvY2FsZVJlY2VpdmVyIGZyb20gJy4uL2xvY2FsZS1wcm92aWRlci9Mb2NhbGVSZWNlaXZlcic7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tICcuLi9sb2NhbGUtcHJvdmlkZXIvZGVmYXVsdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb24nO1xudmFyIFNlbGVjdFByb3BUeXBlcyA9IHtcbiAgICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnbGFyZ2UnLCAnc21hbGwnXSksXG4gICAgbm90Rm91bmRDb250ZW50OiBQcm9wVHlwZXMuYW55LFxuICAgIHNob3dTZWFyY2g6IFByb3BUeXBlcy5ib29sLFxuICAgIG9wdGlvbkxhYmVsUHJvcDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0cmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaG9pY2VUcmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpZDogUHJvcFR5cGVzLnN0cmluZ1xufTtcbi8vID0+IEl0IGlzIG5lZWRsZXNzIHRvIGV4cG9ydCB0aGUgZGVjbGFyYXRpb24gb2YgYmVsb3cgdHdvIGlubmVyIGNvbXBvbmVudHMuXG4vLyBleHBvcnQgeyBPcHRpb24sIE9wdEdyb3VwIH07XG5cbnZhciBTZWxlY3QgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhTZWxlY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gU2VsZWN0KHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3QpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTZWxlY3QuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTZWxlY3QpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc2F2ZVNlbGVjdCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBfdGhpcy5yY1NlbGVjdCA9IG5vZGU7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnJlbmRlclNlbGVjdCA9IGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgcHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgIF9hJGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBfYSRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX2EkY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIHNpemUgPSBfYS5zaXplLFxuICAgICAgICAgICAgICAgIG1vZGUgPSBfYS5tb2RlLFxuICAgICAgICAgICAgICAgIHJlc3RQcm9wcyA9IF9fcmVzdChfYSwgW1wicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwic2l6ZVwiLCBcIm1vZGVcIl0pO1xuICAgICAgICAgICAgdmFyIGNscyA9IGNsYXNzTmFtZXMoKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgcHJlZml4Q2xzICsgJy1sZycsIHNpemUgPT09ICdsYXJnZScpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIHByZWZpeENscyArICctc20nLCBzaXplID09PSAnc21hbGwnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgdmFyIG9wdGlvbkxhYmVsUHJvcCA9IF90aGlzLnByb3BzLm9wdGlvbkxhYmVsUHJvcDtcblxuICAgICAgICAgICAgaWYgKF90aGlzLmlzQ29tYm9ib3goKSkge1xuICAgICAgICAgICAgICAgIC8vIGNoaWxkcmVuIOW4piBkb20g57uT5p6E5pe277yM5peg5rOV5aGr5YWl6L6T5YWl5qGGXG4gICAgICAgICAgICAgICAgb3B0aW9uTGFiZWxQcm9wID0gb3B0aW9uTGFiZWxQcm9wIHx8ICd2YWx1ZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbW9kZUNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBtdWx0aXBsZTogbW9kZSA9PT0gJ211bHRpcGxlJyxcbiAgICAgICAgICAgICAgICB0YWdzOiBtb2RlID09PSAndGFncycsXG4gICAgICAgICAgICAgICAgY29tYm9ib3g6IF90aGlzLmlzQ29tYm9ib3goKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBpbnB1dEljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgdHlwZTogJ2Rvd24nLCBjbGFzc05hbWU6IHByZWZpeENscyArICctYXJyb3ctaWNvbicgfSk7XG4gICAgICAgICAgICB2YXIgcmVtb3ZlSWNvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyB0eXBlOiAnY2xvc2UnLCBjbGFzc05hbWU6IHByZWZpeENscyArICctcmVtb3ZlLWljb24nIH0pO1xuICAgICAgICAgICAgdmFyIGNsZWFySWNvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyB0eXBlOiAnY2xvc2UtY2lyY2xlJywgdGhlbWU6ICdmaWxsZWQnLCBjbGFzc05hbWU6IHByZWZpeENscyArICctY2xlYXItaWNvbicgfSk7XG4gICAgICAgICAgICB2YXIgbWVudUl0ZW1TZWxlY3RlZEljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgdHlwZTogJ2NoZWNrJywgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlbGVjdGVkLWljb24nIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmNTZWxlY3QsIF9leHRlbmRzKHsgaW5wdXRJY29uOiBpbnB1dEljb24sIHJlbW92ZUljb246IHJlbW92ZUljb24sIGNsZWFySWNvbjogY2xlYXJJY29uLCBtZW51SXRlbVNlbGVjdGVkSWNvbjogbWVudUl0ZW1TZWxlY3RlZEljb24gfSwgcmVzdFByb3BzLCBtb2RlQ29uZmlnLCB7IHByZWZpeENsczogcHJlZml4Q2xzLCBjbGFzc05hbWU6IGNscywgb3B0aW9uTGFiZWxQcm9wOiBvcHRpb25MYWJlbFByb3AgfHwgJ2NoaWxkcmVuJywgbm90Rm91bmRDb250ZW50OiBfdGhpcy5nZXROb3RGb3VuZENvbnRlbnQobG9jYWxlKSwgcmVmOiBfdGhpcy5zYXZlU2VsZWN0IH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgd2FybmluZyhwcm9wcy5tb2RlICE9PSAnY29tYm9ib3gnLCAnVGhlIGNvbWJvYm94IG1vZGUgb2YgU2VsZWN0IGlzIGRlcHJlY2F0ZWQsJyArICdpdCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLCcgKyAncGxlYXNlIHVzZSBBdXRvQ29tcGxldGUgaW5zdGVhZCcpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNlbGVjdCwgW3tcbiAgICAgICAga2V5OiAnZm9jdXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLnJjU2VsZWN0LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2JsdXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgICAgICAgIHRoaXMucmNTZWxlY3QuYmx1cigpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXROb3RGb3VuZENvbnRlbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Tm90Rm91bmRDb250ZW50KGxvY2FsZSkge1xuICAgICAgICAgICAgdmFyIG5vdEZvdW5kQ29udGVudCA9IHRoaXMucHJvcHMubm90Rm91bmRDb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0NvbWJvYm94KCkpIHtcbiAgICAgICAgICAgICAgICAvLyBBdXRvQ29tcGxldGUgZG9uJ3QgaGF2ZSBub3RGb3VuZENvbnRlbnQgZGVmYXVsdGx5XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vdEZvdW5kQ29udGVudCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG5vdEZvdW5kQ29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub3RGb3VuZENvbnRlbnQgPT09IHVuZGVmaW5lZCA/IGxvY2FsZS5ub3RGb3VuZENvbnRlbnQgOiBub3RGb3VuZENvbnRlbnQ7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2lzQ29tYm9ib3gnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNDb21ib2JveCgpIHtcbiAgICAgICAgICAgIHZhciBtb2RlID0gdGhpcy5wcm9wcy5tb2RlO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9kZSA9PT0gJ2NvbWJvYm94JyB8fCBtb2RlID09PSBTZWxlY3QuU0VDUkVUX0NPTUJPQk9YX01PREVfRE9fTk9UX1VTRTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIExvY2FsZVJlY2VpdmVyLFxuICAgICAgICAgICAgICAgIHsgY29tcG9uZW50TmFtZTogJ1NlbGVjdCcsIGRlZmF1bHRMb2NhbGU6IGRlZmF1bHRMb2NhbGUuU2VsZWN0IH0sXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZWxlY3RcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2VsZWN0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7XG5cblNlbGVjdC5PcHRpb24gPSBPcHRpb247XG5TZWxlY3QuT3B0R3JvdXAgPSBPcHRHcm91cDtcblNlbGVjdC5TRUNSRVRfQ09NQk9CT1hfTU9ERV9ET19OT1RfVVNFID0gJ1NFQ1JFVF9DT01CT0JPWF9NT0RFX0RPX05PVF9VU0UnO1xuU2VsZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBwcmVmaXhDbHM6ICdhbnQtc2VsZWN0JyxcbiAgICBzaG93U2VhcmNoOiBmYWxzZSxcbiAgICB0cmFuc2l0aW9uTmFtZTogJ3NsaWRlLXVwJyxcbiAgICBjaG9pY2VUcmFuc2l0aW9uTmFtZTogJ3pvb20nXG59O1xuU2VsZWN0LnByb3BUeXBlcyA9IFNlbGVjdFByb3BUeXBlczsiLCJpbXBvcnQgY3NzQW5pbWF0aW9uIGZyb20gJ2Nzcy1hbmltYXRpb24nO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYnO1xuZnVuY3Rpb24gYW5pbWF0ZShub2RlLCBzaG93LCBkb25lKSB7XG4gICAgdmFyIGhlaWdodCA9IHZvaWQgMDtcbiAgICB2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSB2b2lkIDA7XG4gICAgcmV0dXJuIGNzc0FuaW1hdGlvbihub2RlLCAnYW50LW1vdGlvbi1jb2xsYXBzZScsIHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICAgICAgaWYgKCFzaG93KSB7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBub2RlLm9mZnNldEhlaWdodCArICdweCc7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBub2RlLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9ICcwcHgnO1xuICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZlOiBmdW5jdGlvbiBhY3RpdmUoKSB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQpIHtcbiAgICAgICAgICAgICAgICByYWYuY2FuY2VsKHJlcXVlc3RBbmltYXRpb25GcmFtZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gcmFmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IChzaG93ID8gaGVpZ2h0IDogMCkgKyAncHgnO1xuICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9IHNob3cgPyAnMScgOiAnMCc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiBmdW5jdGlvbiBlbmQoKSB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQpIHtcbiAgICAgICAgICAgICAgICByYWYuY2FuY2VsKHJlcXVlc3RBbmltYXRpb25GcmFtZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgICAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAnJztcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxudmFyIGFuaW1hdGlvbiA9IHtcbiAgICBlbnRlcjogZnVuY3Rpb24gZW50ZXIobm9kZSwgZG9uZSkge1xuICAgICAgICByZXR1cm4gYW5pbWF0ZShub2RlLCB0cnVlLCBkb25lKTtcbiAgICB9LFxuICAgIGxlYXZlOiBmdW5jdGlvbiBsZWF2ZShub2RlLCBkb25lKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRlKG5vZGUsIGZhbHNlLCBkb25lKTtcbiAgICB9LFxuICAgIGFwcGVhcjogZnVuY3Rpb24gYXBwZWFyKG5vZGUsIGRvbmUpIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGUobm9kZSwgdHJ1ZSwgZG9uZSk7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGFuaW1hdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN1Yk1lbnUgYXMgUmNTdWJNZW51IH0gZnJvbSAncmMtbWVudSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxudmFyIFN1Yk1lbnUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhTdWJNZW51LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFN1Yk1lbnUoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJNZW51KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU3ViTWVudS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFN1Yk1lbnUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgICAgICBfdGhpcy5vbktleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgX3RoaXMuc3ViTWVudS5vbktleURvd24oZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNhdmVTdWJNZW51ID0gZnVuY3Rpb24gKHN1Yk1lbnUpIHtcbiAgICAgICAgICAgIF90aGlzLnN1Yk1lbnUgPSBzdWJNZW51O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFN1Yk1lbnUsIFt7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICByb290UHJlZml4Q2xzID0gX3Byb3BzLnJvb3RQcmVmaXhDbHMsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZTtcblxuICAgICAgICAgICAgdmFyIHRoZW1lID0gdGhpcy5jb250ZXh0LmFudGRNZW51VGhlbWU7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSY1N1Yk1lbnUsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IHJlZjogdGhpcy5zYXZlU3ViTWVudSwgcG9wdXBDbGFzc05hbWU6IGNsYXNzTmFtZXMocm9vdFByZWZpeENscyArICctJyArIHRoZW1lLCBjbGFzc05hbWUpIH0pKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTdWJNZW51O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TdWJNZW51LmNvbnRleHRUeXBlcyA9IHtcbiAgICBhbnRkTWVudVRoZW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuLy8gZml4IGlzc3VlOmh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzg2NjZcblN1Yk1lbnUuaXNTdWJNZW51ID0gMTtcbmV4cG9ydCBkZWZhdWx0IFN1Yk1lbnU7IiwidmFyIGF1dG9BZGp1c3RPdmVyZmxvdyA9IHtcbiAgYWRqdXN0WDogMSxcbiAgYWRqdXN0WTogMVxufTtcblxudmFyIHRhcmdldE9mZnNldCA9IFswLCAwXTtcblxuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0ge1xuICBsZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ2NyJywgJ2NsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFstNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICBwb2ludHM6IFsnY2wnLCAnY3InXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzQsIDBdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIHRvcDoge1xuICAgIHBvaW50czogWydiYycsICd0YyddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgLTRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIGJvdHRvbToge1xuICAgIHBvaW50czogWyd0YycsICdiYyddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgdG9wTGVmdDoge1xuICAgIHBvaW50czogWydibCcsICd0bCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgLTRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIGxlZnRUb3A6IHtcbiAgICBwb2ludHM6IFsndHInLCAndGwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWy00LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICB0b3BSaWdodDoge1xuICAgIHBvaW50czogWydicicsICd0ciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgLTRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIHJpZ2h0VG9wOiB7XG4gICAgcG9pbnRzOiBbJ3RsJywgJ3RyJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFs0LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICBib3R0b21SaWdodDoge1xuICAgIHBvaW50czogWyd0cicsICdiciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgcmlnaHRCb3R0b206IHtcbiAgICBwb2ludHM6IFsnYmwnLCAnYnInXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzQsIDBdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIGJvdHRvbUxlZnQ6IHtcbiAgICBwb2ludHM6IFsndGwnLCAnYmwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIDRdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIGxlZnRCb3R0b206IHtcbiAgICBwb2ludHM6IFsnYnInLCAnYmwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWy00LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwbGFjZW1lbnRzOyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxudmFyIENvbnRlbnQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ29udGVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29udGVudCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGVudCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIENvbnRlbnQucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB2YXIgdHJpZ2dlciA9IHRoaXMucHJvcHMudHJpZ2dlcjtcblxuICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICB0cmlnZ2VyLmZvcmNlUG9wdXBBbGlnbigpO1xuICAgIH1cbiAgfTtcblxuICBDb250ZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG92ZXJsYXkgPSBfcHJvcHMub3ZlcmxheSxcbiAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzLnByZWZpeENscyxcbiAgICAgICAgaWQgPSBfcHJvcHMuaWQ7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctaW5uZXInLCBpZDogaWQsIHJvbGU6ICd0b29sdGlwJyB9LFxuICAgICAgdHlwZW9mIG92ZXJsYXkgPT09ICdmdW5jdGlvbicgPyBvdmVybGF5KCkgOiBvdmVybGF5XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gQ29udGVudDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ29udGVudC5wcm9wVHlwZXMgPSB7XG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgb3ZlcmxheTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSkuaXNSZXF1aXJlZCxcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRyaWdnZXI6IFByb3BUeXBlcy5hbnlcbn07XG5leHBvcnQgZGVmYXVsdCBDb250ZW50OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVHJpZ2dlciBmcm9tICdyYy10cmlnZ2VyJztcbmltcG9ydCB7IHBsYWNlbWVudHMgfSBmcm9tICcuL3BsYWNlbWVudHMnO1xuaW1wb3J0IENvbnRlbnQgZnJvbSAnLi9Db250ZW50JztcblxudmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVG9vbHRpcCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9vbHRpcCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRvb2x0aXApO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmdldFBvcHVwRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGFycm93Q29udGVudCA9IF90aGlzJHByb3BzLmFycm93Q29udGVudCxcbiAgICAgICAgICBvdmVybGF5ID0gX3RoaXMkcHJvcHMub3ZlcmxheSxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZDtcblxuICAgICAgcmV0dXJuIFtSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctYXJyb3cnLCBrZXk6ICdhcnJvdycgfSxcbiAgICAgICAgYXJyb3dDb250ZW50XG4gICAgICApLCBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRlbnQsIHtcbiAgICAgICAga2V5OiAnY29udGVudCcsXG4gICAgICAgIHRyaWdnZXI6IF90aGlzLnRyaWdnZXIsXG4gICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICBpZDogaWQsXG4gICAgICAgIG92ZXJsYXk6IG92ZXJsYXlcbiAgICAgIH0pXTtcbiAgICB9LCBfdGhpcy5zYXZlVHJpZ2dlciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy50cmlnZ2VyID0gbm9kZTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFBvcHVwRG9tTm9kZSA9IGZ1bmN0aW9uIGdldFBvcHVwRG9tTm9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyLmdldFBvcHVwRG9tTm9kZSgpO1xuICB9O1xuXG4gIFRvb2x0aXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb3ZlcmxheUNsYXNzTmFtZSA9IF9wcm9wcy5vdmVybGF5Q2xhc3NOYW1lLFxuICAgICAgICB0cmlnZ2VyID0gX3Byb3BzLnRyaWdnZXIsXG4gICAgICAgIG1vdXNlRW50ZXJEZWxheSA9IF9wcm9wcy5tb3VzZUVudGVyRGVsYXksXG4gICAgICAgIG1vdXNlTGVhdmVEZWxheSA9IF9wcm9wcy5tb3VzZUxlYXZlRGVsYXksXG4gICAgICAgIG92ZXJsYXlTdHlsZSA9IF9wcm9wcy5vdmVybGF5U3R5bGUsXG4gICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBvblZpc2libGVDaGFuZ2UgPSBfcHJvcHMub25WaXNpYmxlQ2hhbmdlLFxuICAgICAgICBhZnRlclZpc2libGVDaGFuZ2UgPSBfcHJvcHMuYWZ0ZXJWaXNpYmxlQ2hhbmdlLFxuICAgICAgICB0cmFuc2l0aW9uTmFtZSA9IF9wcm9wcy50cmFuc2l0aW9uTmFtZSxcbiAgICAgICAgYW5pbWF0aW9uID0gX3Byb3BzLmFuaW1hdGlvbixcbiAgICAgICAgcGxhY2VtZW50ID0gX3Byb3BzLnBsYWNlbWVudCxcbiAgICAgICAgYWxpZ24gPSBfcHJvcHMuYWxpZ24sXG4gICAgICAgIGRlc3Ryb3lUb29sdGlwT25IaWRlID0gX3Byb3BzLmRlc3Ryb3lUb29sdGlwT25IaWRlLFxuICAgICAgICBkZWZhdWx0VmlzaWJsZSA9IF9wcm9wcy5kZWZhdWx0VmlzaWJsZSxcbiAgICAgICAgZ2V0VG9vbHRpcENvbnRhaW5lciA9IF9wcm9wcy5nZXRUb29sdGlwQ29udGFpbmVyLFxuICAgICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ292ZXJsYXlDbGFzc05hbWUnLCAndHJpZ2dlcicsICdtb3VzZUVudGVyRGVsYXknLCAnbW91c2VMZWF2ZURlbGF5JywgJ292ZXJsYXlTdHlsZScsICdwcmVmaXhDbHMnLCAnY2hpbGRyZW4nLCAnb25WaXNpYmxlQ2hhbmdlJywgJ2FmdGVyVmlzaWJsZUNoYW5nZScsICd0cmFuc2l0aW9uTmFtZScsICdhbmltYXRpb24nLCAncGxhY2VtZW50JywgJ2FsaWduJywgJ2Rlc3Ryb3lUb29sdGlwT25IaWRlJywgJ2RlZmF1bHRWaXNpYmxlJywgJ2dldFRvb2x0aXBDb250YWluZXInXSk7XG5cbiAgICB2YXIgZXh0cmFQcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0UHJvcHMpO1xuICAgIGlmICgndmlzaWJsZScgaW4gdGhpcy5wcm9wcykge1xuICAgICAgZXh0cmFQcm9wcy5wb3B1cFZpc2libGUgPSB0aGlzLnByb3BzLnZpc2libGU7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVHJpZ2dlcixcbiAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgcG9wdXBDbGFzc05hbWU6IG92ZXJsYXlDbGFzc05hbWUsXG4gICAgICAgIHJlZjogdGhpcy5zYXZlVHJpZ2dlcixcbiAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgIHBvcHVwOiB0aGlzLmdldFBvcHVwRWxlbWVudCxcbiAgICAgICAgYWN0aW9uOiB0cmlnZ2VyLFxuICAgICAgICBidWlsdGluUGxhY2VtZW50czogcGxhY2VtZW50cyxcbiAgICAgICAgcG9wdXBQbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgcG9wdXBBbGlnbjogYWxpZ24sXG4gICAgICAgIGdldFBvcHVwQ29udGFpbmVyOiBnZXRUb29sdGlwQ29udGFpbmVyLFxuICAgICAgICBvblBvcHVwVmlzaWJsZUNoYW5nZTogb25WaXNpYmxlQ2hhbmdlLFxuICAgICAgICBhZnRlclBvcHVwVmlzaWJsZUNoYW5nZTogYWZ0ZXJWaXNpYmxlQ2hhbmdlLFxuICAgICAgICBwb3B1cFRyYW5zaXRpb25OYW1lOiB0cmFuc2l0aW9uTmFtZSxcbiAgICAgICAgcG9wdXBBbmltYXRpb246IGFuaW1hdGlvbixcbiAgICAgICAgZGVmYXVsdFBvcHVwVmlzaWJsZTogZGVmYXVsdFZpc2libGUsXG4gICAgICAgIGRlc3Ryb3lQb3B1cE9uSGlkZTogZGVzdHJveVRvb2x0aXBPbkhpZGUsXG4gICAgICAgIG1vdXNlTGVhdmVEZWxheTogbW91c2VMZWF2ZURlbGF5LFxuICAgICAgICBwb3B1cFN0eWxlOiBvdmVybGF5U3R5bGUsXG4gICAgICAgIG1vdXNlRW50ZXJEZWxheTogbW91c2VFbnRlckRlbGF5XG4gICAgICB9LCBleHRyYVByb3BzKSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVG9vbHRpcDtcbn0oQ29tcG9uZW50KTtcblxuVG9vbHRpcC5wcm9wVHlwZXMgPSB7XG4gIHRyaWdnZXI6IFByb3BUeXBlcy5hbnksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBkZWZhdWx0VmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIHZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIGFuaW1hdGlvbjogUHJvcFR5cGVzLmFueSxcbiAgb25WaXNpYmxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgYWZ0ZXJWaXNpYmxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb3ZlcmxheTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSkuaXNSZXF1aXJlZCxcbiAgb3ZlcmxheVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBvdmVybGF5Q2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1vdXNlRW50ZXJEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgbW91c2VMZWF2ZURlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRUb29sdGlwQ29udGFpbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgZGVzdHJveVRvb2x0aXBPbkhpZGU6IFByb3BUeXBlcy5ib29sLFxuICBhbGlnbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYXJyb3dDb250ZW50OiBQcm9wVHlwZXMuYW55LFxuICBpZDogUHJvcFR5cGVzLnN0cmluZ1xufTtcblRvb2x0aXAuZGVmYXVsdFByb3BzID0ge1xuICBwcmVmaXhDbHM6ICdyYy10b29sdGlwJyxcbiAgbW91c2VFbnRlckRlbGF5OiAwLFxuICBkZXN0cm95VG9vbHRpcE9uSGlkZTogZmFsc2UsXG4gIG1vdXNlTGVhdmVEZWxheTogMC4xLFxuICBhbGlnbjoge30sXG4gIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgdHJpZ2dlcjogWydob3ZlciddLFxuICBhcnJvd0NvbnRlbnQ6IG51bGxcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcDsiLCJpbXBvcnQgVG9vbHRpcCBmcm9tICcuL1Rvb2x0aXAnO1xuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgeyBwbGFjZW1lbnRzIGFzIHJjUGxhY2VtZW50cyB9IGZyb20gJ3JjLXRvb2x0aXAvZXMvcGxhY2VtZW50cyc7XG52YXIgYXV0b0FkanVzdE92ZXJmbG93RW5hYmxlZCA9IHtcbiAgICBhZGp1c3RYOiAxLFxuICAgIGFkanVzdFk6IDFcbn07XG52YXIgYXV0b0FkanVzdE92ZXJmbG93RGlzYWJsZWQgPSB7XG4gICAgYWRqdXN0WDogMCxcbiAgICBhZGp1c3RZOiAwXG59O1xudmFyIHRhcmdldE9mZnNldCA9IFswLCAwXTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRPdmVyZmxvd09wdGlvbnMoYXV0b0FkanVzdE92ZXJmbG93KSB7XG4gICAgaWYgKHR5cGVvZiBhdXRvQWRqdXN0T3ZlcmZsb3cgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gYXV0b0FkanVzdE92ZXJmbG93ID8gYXV0b0FkanVzdE92ZXJmbG93RW5hYmxlZCA6IGF1dG9BZGp1c3RPdmVyZmxvd0Rpc2FibGVkO1xuICAgIH1cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGF1dG9BZGp1c3RPdmVyZmxvd0Rpc2FibGVkLCBhdXRvQWRqdXN0T3ZlcmZsb3cpO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGxhY2VtZW50cygpIHtcbiAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgX2NvbmZpZyRhcnJvd1dpZHRoID0gY29uZmlnLmFycm93V2lkdGgsXG4gICAgICAgIGFycm93V2lkdGggPSBfY29uZmlnJGFycm93V2lkdGggPT09IHVuZGVmaW5lZCA/IDUgOiBfY29uZmlnJGFycm93V2lkdGgsXG4gICAgICAgIF9jb25maWckaG9yaXpvbnRhbEFyciA9IGNvbmZpZy5ob3Jpem9udGFsQXJyb3dTaGlmdCxcbiAgICAgICAgaG9yaXpvbnRhbEFycm93U2hpZnQgPSBfY29uZmlnJGhvcml6b250YWxBcnIgPT09IHVuZGVmaW5lZCA/IDE2IDogX2NvbmZpZyRob3Jpem9udGFsQXJyLFxuICAgICAgICBfY29uZmlnJHZlcnRpY2FsQXJyb3cgPSBjb25maWcudmVydGljYWxBcnJvd1NoaWZ0LFxuICAgICAgICB2ZXJ0aWNhbEFycm93U2hpZnQgPSBfY29uZmlnJHZlcnRpY2FsQXJyb3cgPT09IHVuZGVmaW5lZCA/IDEyIDogX2NvbmZpZyR2ZXJ0aWNhbEFycm93LFxuICAgICAgICBfY29uZmlnJGF1dG9BZGp1c3RPdmUgPSBjb25maWcuYXV0b0FkanVzdE92ZXJmbG93LFxuICAgICAgICBhdXRvQWRqdXN0T3ZlcmZsb3cgPSBfY29uZmlnJGF1dG9BZGp1c3RPdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfY29uZmlnJGF1dG9BZGp1c3RPdmU7XG5cbiAgICB2YXIgcGxhY2VtZW50TWFwID0ge1xuICAgICAgICBsZWZ0OiB7XG4gICAgICAgICAgICBwb2ludHM6IFsnY3InLCAnY2wnXSxcbiAgICAgICAgICAgIG9mZnNldDogWy00LCAwXVxuICAgICAgICB9LFxuICAgICAgICByaWdodDoge1xuICAgICAgICAgICAgcG9pbnRzOiBbJ2NsJywgJ2NyJ10sXG4gICAgICAgICAgICBvZmZzZXQ6IFs0LCAwXVxuICAgICAgICB9LFxuICAgICAgICB0b3A6IHtcbiAgICAgICAgICAgIHBvaW50czogWydiYycsICd0YyddLFxuICAgICAgICAgICAgb2Zmc2V0OiBbMCwgLTRdXG4gICAgICAgIH0sXG4gICAgICAgIGJvdHRvbToge1xuICAgICAgICAgICAgcG9pbnRzOiBbJ3RjJywgJ2JjJ10sXG4gICAgICAgICAgICBvZmZzZXQ6IFswLCA0XVxuICAgICAgICB9LFxuICAgICAgICB0b3BMZWZ0OiB7XG4gICAgICAgICAgICBwb2ludHM6IFsnYmwnLCAndGMnXSxcbiAgICAgICAgICAgIG9mZnNldDogWy0oaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKSwgLTRdXG4gICAgICAgIH0sXG4gICAgICAgIGxlZnRUb3A6IHtcbiAgICAgICAgICAgIHBvaW50czogWyd0cicsICdjbCddLFxuICAgICAgICAgICAgb2Zmc2V0OiBbLTQsIC0odmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCldXG4gICAgICAgIH0sXG4gICAgICAgIHRvcFJpZ2h0OiB7XG4gICAgICAgICAgICBwb2ludHM6IFsnYnInLCAndGMnXSxcbiAgICAgICAgICAgIG9mZnNldDogW2hvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCwgLTRdXG4gICAgICAgIH0sXG4gICAgICAgIHJpZ2h0VG9wOiB7XG4gICAgICAgICAgICBwb2ludHM6IFsndGwnLCAnY3InXSxcbiAgICAgICAgICAgIG9mZnNldDogWzQsIC0odmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCldXG4gICAgICAgIH0sXG4gICAgICAgIGJvdHRvbVJpZ2h0OiB7XG4gICAgICAgICAgICBwb2ludHM6IFsndHInLCAnYmMnXSxcbiAgICAgICAgICAgIG9mZnNldDogW2hvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCwgNF1cbiAgICAgICAgfSxcbiAgICAgICAgcmlnaHRCb3R0b206IHtcbiAgICAgICAgICAgIHBvaW50czogWydibCcsICdjciddLFxuICAgICAgICAgICAgb2Zmc2V0OiBbNCwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF1cbiAgICAgICAgfSxcbiAgICAgICAgYm90dG9tTGVmdDoge1xuICAgICAgICAgICAgcG9pbnRzOiBbJ3RsJywgJ2JjJ10sXG4gICAgICAgICAgICBvZmZzZXQ6IFstKGhvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCksIDRdXG4gICAgICAgIH0sXG4gICAgICAgIGxlZnRCb3R0b206IHtcbiAgICAgICAgICAgIHBvaW50czogWydicicsICdjbCddLFxuICAgICAgICAgICAgb2Zmc2V0OiBbLTQsIHZlcnRpY2FsQXJyb3dTaGlmdCArIGFycm93V2lkdGhdXG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKHBsYWNlbWVudE1hcCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHBsYWNlbWVudE1hcFtrZXldID0gY29uZmlnLmFycm93UG9pbnRBdENlbnRlciA/IF9leHRlbmRzKHt9LCBwbGFjZW1lbnRNYXBba2V5XSwgeyBvdmVyZmxvdzogZ2V0T3ZlcmZsb3dPcHRpb25zKGF1dG9BZGp1c3RPdmVyZmxvdyksIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0IH0pIDogX2V4dGVuZHMoe30sIHJjUGxhY2VtZW50c1trZXldLCB7IG92ZXJmbG93OiBnZXRPdmVyZmxvd09wdGlvbnMoYXV0b0FkanVzdE92ZXJmbG93KSB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcGxhY2VtZW50TWFwO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5pbXBvcnQgUmNUb29sdGlwIGZyb20gJ3JjLXRvb2x0aXAnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgX2dldFBsYWNlbWVudHMgZnJvbSAnLi9wbGFjZW1lbnRzJztcbnZhciBzcGxpdE9iamVjdCA9IGZ1bmN0aW9uIHNwbGl0T2JqZWN0KG9iaiwga2V5cykge1xuICAgIHZhciBwaWNrZWQgPSB7fTtcbiAgICB2YXIgb21pdHRlZCA9IF9leHRlbmRzKHt9LCBvYmopO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChvYmogJiYga2V5IGluIG9iaikge1xuICAgICAgICAgICAgcGlja2VkW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGRlbGV0ZSBvbWl0dGVkW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4geyBwaWNrZWQ6IHBpY2tlZCwgb21pdHRlZDogb21pdHRlZCB9O1xufTtcblxudmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhUb29sdGlwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFRvb2x0aXAocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRvb2x0aXApO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUb29sdGlwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9vbHRpcCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5vblZpc2libGVDaGFuZ2UgPSBmdW5jdGlvbiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdmFyIG9uVmlzaWJsZUNoYW5nZSA9IF90aGlzLnByb3BzLm9uVmlzaWJsZUNoYW5nZTtcblxuICAgICAgICAgICAgaWYgKCEoJ3Zpc2libGUnIGluIF90aGlzLnByb3BzKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmlzaWJsZTogX3RoaXMuaXNOb1RpdGxlKCkgPyBmYWxzZSA6IHZpc2libGUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob25WaXNpYmxlQ2hhbmdlICYmICFfdGhpcy5pc05vVGl0bGUoKSkge1xuICAgICAgICAgICAgICAgIG9uVmlzaWJsZUNoYW5nZSh2aXNpYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8g5Yqo5oCB6K6+572u5Yqo55S754K5XG4gICAgICAgIF90aGlzLm9uUG9wdXBBbGlnbiA9IGZ1bmN0aW9uIChkb21Ob2RlLCBhbGlnbikge1xuICAgICAgICAgICAgdmFyIHBsYWNlbWVudHMgPSBfdGhpcy5nZXRQbGFjZW1lbnRzKCk7XG4gICAgICAgICAgICAvLyDlvZPliY3ov5Tlm57nmoTkvY3nva5cbiAgICAgICAgICAgIHZhciBwbGFjZW1lbnQgPSBPYmplY3Qua2V5cyhwbGFjZW1lbnRzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwbGFjZW1lbnRzW2tleV0ucG9pbnRzWzBdID09PSBhbGlnbi5wb2ludHNbMF0gJiYgcGxhY2VtZW50c1trZXldLnBvaW50c1sxXSA9PT0gYWxpZ24ucG9pbnRzWzFdO1xuICAgICAgICAgICAgfSlbMF07XG4gICAgICAgICAgICBpZiAoIXBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIOagueaNruW9k+WJjeWdkOagh+iuvue9ruWKqOeUu+eCuVxuICAgICAgICAgICAgdmFyIHJlY3QgPSBkb21Ob2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybU9yaWdpbiA9IHtcbiAgICAgICAgICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICAgICAgICAgIGxlZnQ6ICc1MCUnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCd0b3AnKSA+PSAwIHx8IHBsYWNlbWVudC5pbmRleE9mKCdCb3R0b20nKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luLnRvcCA9IHJlY3QuaGVpZ2h0IC0gYWxpZ24ub2Zmc2V0WzFdICsgJ3B4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGxhY2VtZW50LmluZGV4T2YoJ1RvcCcpID49IDAgfHwgcGxhY2VtZW50LmluZGV4T2YoJ2JvdHRvbScpID49IDApIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW4udG9wID0gLWFsaWduLm9mZnNldFsxXSArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2xlZnQnKSA+PSAwIHx8IHBsYWNlbWVudC5pbmRleE9mKCdSaWdodCcpID49IDApIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW4ubGVmdCA9IHJlY3Qud2lkdGggLSBhbGlnbi5vZmZzZXRbMF0gKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwbGFjZW1lbnQuaW5kZXhPZigncmlnaHQnKSA+PSAwIHx8IHBsYWNlbWVudC5pbmRleE9mKCdMZWZ0JykgPj0gMCkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbi5sZWZ0ID0gLWFsaWduLm9mZnNldFswXSArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb21Ob2RlLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHRyYW5zZm9ybU9yaWdpbi5sZWZ0ICsgJyAnICsgdHJhbnNmb3JtT3JpZ2luLnRvcDtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc2F2ZVRvb2x0aXAgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgX3RoaXMudG9vbHRpcCA9IG5vZGU7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmlzaWJsZTogISFwcm9wcy52aXNpYmxlIHx8ICEhcHJvcHMuZGVmYXVsdFZpc2libGVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhUb29sdGlwLCBbe1xuICAgICAgICBrZXk6ICdnZXRQb3B1cERvbU5vZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UG9wdXBEb21Ob2RlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcC5nZXRQb3B1cERvbU5vZGUoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0UGxhY2VtZW50cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQbGFjZW1lbnRzKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgYnVpbHRpblBsYWNlbWVudHMgPSBfcHJvcHMuYnVpbHRpblBsYWNlbWVudHMsXG4gICAgICAgICAgICAgICAgYXJyb3dQb2ludEF0Q2VudGVyID0gX3Byb3BzLmFycm93UG9pbnRBdENlbnRlcixcbiAgICAgICAgICAgICAgICBhdXRvQWRqdXN0T3ZlcmZsb3cgPSBfcHJvcHMuYXV0b0FkanVzdE92ZXJmbG93O1xuXG4gICAgICAgICAgICByZXR1cm4gYnVpbHRpblBsYWNlbWVudHMgfHwgX2dldFBsYWNlbWVudHMoe1xuICAgICAgICAgICAgICAgIGFycm93UG9pbnRBdENlbnRlcjogYXJyb3dQb2ludEF0Q2VudGVyLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQXJyb3dTaGlmdDogOCxcbiAgICAgICAgICAgICAgICBhdXRvQWRqdXN0T3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvd1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2lzSG92ZXJUcmlnZ2VyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzSG92ZXJUcmlnZ2VyKCkge1xuICAgICAgICAgICAgdmFyIHRyaWdnZXIgPSB0aGlzLnByb3BzLnRyaWdnZXI7XG5cbiAgICAgICAgICAgIGlmICghdHJpZ2dlciB8fCB0cmlnZ2VyID09PSAnaG92ZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0cmlnZ2VyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyLmluZGV4T2YoJ2hvdmVyJykgPj0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaXggVG9vbHRpcCB3b24ndCBoaWRlIGF0IGRpc2FibGVkIGJ1dHRvblxuICAgICAgICAvLyBtb3VzZSBldmVudHMgZG9uJ3QgdHJpZ2dlciBhdCBkaXNhYmxlZCBidXR0b24gaW4gQ2hyb21lXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdG9vbHRpcC9pc3N1ZXMvMThcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0RGlzYWJsZWRDb21wYXRpYmxlQ2hpbGRyZW4nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGlzYWJsZWRDb21wYXRpYmxlQ2hpbGRyZW4oZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKChlbGVtZW50LnR5cGUuX19BTlRfQlVUVE9OIHx8IGVsZW1lbnQudHlwZSA9PT0gJ2J1dHRvbicpICYmIGVsZW1lbnQucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5pc0hvdmVyVHJpZ2dlcigpKSB7XG4gICAgICAgICAgICAgICAgLy8gUGljayBzb21lIGxheW91dCByZWxhdGVkIHN0eWxlIHByb3BlcnRpZXMgdXAgdG8gc3BhblxuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgbGF5b3V0IGJ1Z3MgbGlrZSBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy81MjU0XG4gICAgICAgICAgICAgICAgdmFyIF9zcGxpdE9iamVjdCA9IHNwbGl0T2JqZWN0KGVsZW1lbnQucHJvcHMuc3R5bGUsIFsncG9zaXRpb24nLCAnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJywgJ2Zsb2F0JywgJ2Rpc3BsYXknLCAnekluZGV4J10pLFxuICAgICAgICAgICAgICAgICAgICBwaWNrZWQgPSBfc3BsaXRPYmplY3QucGlja2VkLFxuICAgICAgICAgICAgICAgICAgICBvbWl0dGVkID0gX3NwbGl0T2JqZWN0Lm9taXR0ZWQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3BhblN0eWxlID0gX2V4dGVuZHMoeyBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyB9LCBwaWNrZWQsIHsgY3Vyc29yOiAnbm90LWFsbG93ZWQnIH0pO1xuICAgICAgICAgICAgICAgIHZhciBidXR0b25TdHlsZSA9IF9leHRlbmRzKHt9LCBvbWl0dGVkLCB7IHBvaW50ZXJFdmVudHM6ICdub25lJyB9KTtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZTogYnV0dG9uU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHNwYW5TdHlsZSwgY2xhc3NOYW1lOiBlbGVtZW50LnByb3BzLmNsYXNzTmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICBjaGlsZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaXNOb1RpdGxlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzTm9UaXRsZSgpIHtcbiAgICAgICAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICB0aXRsZSA9IF9wcm9wczIudGl0bGUsXG4gICAgICAgICAgICAgICAgb3ZlcmxheSA9IF9wcm9wczIub3ZlcmxheTtcblxuICAgICAgICAgICAgcmV0dXJuICF0aXRsZSAmJiAhb3ZlcmxheTsgLy8gb3ZlcmxheSBmb3Igb2xkIHZlcnNpb24gY29tcGF0aWJpbGl0eVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICB2YXIgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgIHRpdGxlID0gcHJvcHMudGl0bGUsXG4gICAgICAgICAgICAgICAgb3ZlcmxheSA9IHByb3BzLm92ZXJsYXksXG4gICAgICAgICAgICAgICAgb3BlbkNsYXNzTmFtZSA9IHByb3BzLm9wZW5DbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgZ2V0UG9wdXBDb250YWluZXIgPSBwcm9wcy5nZXRQb3B1cENvbnRhaW5lcixcbiAgICAgICAgICAgICAgICBnZXRUb29sdGlwQ29udGFpbmVyID0gcHJvcHMuZ2V0VG9vbHRpcENvbnRhaW5lcjtcblxuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gICAgICAgICAgICB2YXIgdmlzaWJsZSA9IHN0YXRlLnZpc2libGU7XG4gICAgICAgICAgICAvLyBIaWRlIHRvb2x0aXAgd2hlbiB0aGVyZSBpcyBubyB0aXRsZVxuICAgICAgICAgICAgaWYgKCEoJ3Zpc2libGUnIGluIHByb3BzKSAmJiB0aGlzLmlzTm9UaXRsZSgpKSB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5nZXREaXNhYmxlZENvbXBhdGlibGVDaGlsZHJlbihSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbiA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgdmFyIGNoaWxkUHJvcHMgPSBjaGlsZC5wcm9wcztcbiAgICAgICAgICAgIHZhciBjaGlsZENscyA9IGNsYXNzTmFtZXMoY2hpbGRQcm9wcy5jbGFzc05hbWUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgb3BlbkNsYXNzTmFtZSB8fCBwcmVmaXhDbHMgKyAnLW9wZW4nLCB0cnVlKSk7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBSY1Rvb2x0aXAsXG4gICAgICAgICAgICAgICAgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgZ2V0VG9vbHRpcENvbnRhaW5lcjogZ2V0UG9wdXBDb250YWluZXIgfHwgZ2V0VG9vbHRpcENvbnRhaW5lciwgcmVmOiB0aGlzLnNhdmVUb29sdGlwLCBidWlsdGluUGxhY2VtZW50czogdGhpcy5nZXRQbGFjZW1lbnRzKCksIG92ZXJsYXk6IG92ZXJsYXkgfHwgdGl0bGUgfHwgJycsIHZpc2libGU6IHZpc2libGUsIG9uVmlzaWJsZUNoYW5nZTogdGhpcy5vblZpc2libGVDaGFuZ2UsIG9uUG9wdXBBbGlnbjogdGhpcy5vblBvcHVwQWxpZ24gfSksXG4gICAgICAgICAgICAgICAgdmlzaWJsZSA/IGNsb25lRWxlbWVudChjaGlsZCwgeyBjbGFzc05hbWU6IGNoaWxkQ2xzIH0pIDogY2hpbGRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIGlmICgndmlzaWJsZScgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmlzaWJsZTogbmV4dFByb3BzLnZpc2libGUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRvb2x0aXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRvb2x0aXAuZGVmYXVsdFByb3BzID0ge1xuICAgIHByZWZpeENsczogJ2FudC10b29sdGlwJyxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHRyYW5zaXRpb25OYW1lOiAnem9vbS1iaWctZmFzdCcsXG4gICAgbW91c2VFbnRlckRlbGF5OiAwLjEsXG4gICAgbW91c2VMZWF2ZURlbGF5OiAwLjEsXG4gICAgYXJyb3dQb2ludEF0Q2VudGVyOiBmYWxzZSxcbiAgICBhdXRvQWRqdXN0T3ZlcmZsb3c6IHRydWVcbn07XG5wb2x5ZmlsbChUb29sdGlwKTtcbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSAncmMtbWVudSc7XG5pbXBvcnQgKiBhcyBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi90b29sdGlwJztcblxudmFyIE1lbnVJdGVtID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTWVudUl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTWVudUl0ZW0oKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51SXRlbSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1lbnVJdGVtLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTWVudUl0ZW0pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgICAgICBfdGhpcy5vbktleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgX3RoaXMubWVudUl0ZW0ub25LZXlEb3duKGUpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zYXZlTWVudUl0ZW0gPSBmdW5jdGlvbiAobWVudUl0ZW0pIHtcbiAgICAgICAgICAgIF90aGlzLm1lbnVJdGVtID0gbWVudUl0ZW07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTWVudUl0ZW0sIFt7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgaW5saW5lQ29sbGFwc2VkID0gdGhpcy5jb250ZXh0LmlubGluZUNvbGxhcHNlZDtcblxuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIFRvb2x0aXAsXG4gICAgICAgICAgICAgICAgeyB0aXRsZTogaW5saW5lQ29sbGFwc2VkICYmIHByb3BzLmxldmVsID09PSAxID8gcHJvcHMuY2hpbGRyZW4gOiAnJywgcGxhY2VtZW50OiAncmlnaHQnLCBvdmVybGF5Q2xhc3NOYW1lOiBwcm9wcy5yb290UHJlZml4Q2xzICsgJy1pbmxpbmUtY29sbGFwc2VkLXRvb2x0aXAnIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJdGVtLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgcmVmOiB0aGlzLnNhdmVNZW51SXRlbSB9KSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTWVudUl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbnVJdGVtLmNvbnRleHRUeXBlcyA9IHtcbiAgICBpbmxpbmVDb2xsYXBzZWQ6IFByb3BUeXBlcy5ib29sXG59O1xuTWVudUl0ZW0uaXNNZW51SXRlbSA9IDE7XG5leHBvcnQgZGVmYXVsdCBNZW51SXRlbTsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBSY01lbnUsIHsgRGl2aWRlciwgSXRlbUdyb3VwIH0gZnJvbSAncmMtbWVudSc7XG5pbXBvcnQgKiBhcyBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBhbmltYXRpb24gZnJvbSAnLi4vX3V0aWwvb3BlbkFuaW1hdGlvbic7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi9fdXRpbC93YXJuaW5nJztcbmltcG9ydCBTdWJNZW51IGZyb20gJy4vU3ViTWVudSc7XG5pbXBvcnQgSXRlbSBmcm9tICcuL01lbnVJdGVtJztcblxudmFyIE1lbnUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhNZW51LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIE1lbnUocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnUpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNZW51Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTWVudSkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5pbmxpbmVPcGVuS2V5cyA9IFtdO1xuICAgICAgICBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVPcGVuQ2hhbmdlKFtdKTtcbiAgICAgICAgICAgIHZhciBvbkNsaWNrID0gX3RoaXMucHJvcHMub25DbGljaztcblxuICAgICAgICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBvbkNsaWNrKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVPcGVuQ2hhbmdlID0gZnVuY3Rpb24gKG9wZW5LZXlzKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRPcGVuS2V5cyhvcGVuS2V5cyk7XG4gICAgICAgICAgICB2YXIgb25PcGVuQ2hhbmdlID0gX3RoaXMucHJvcHMub25PcGVuQ2hhbmdlO1xuXG4gICAgICAgICAgICBpZiAob25PcGVuQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgb25PcGVuQ2hhbmdlKG9wZW5LZXlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2FybmluZyghKCdvbk9wZW4nIGluIHByb3BzIHx8ICdvbkNsb3NlJyBpbiBwcm9wcyksICdgb25PcGVuYCBhbmQgYG9uQ2xvc2VgIGFyZSByZW1vdmVkLCBwbGVhc2UgdXNlIGBvbk9wZW5DaGFuZ2VgIGluc3RlYWQsICcgKyAnc2VlOiBodHRwczovL3UuYW50LmRlc2lnbi9tZW51LW9uLW9wZW4tY2hhbmdlLicpO1xuICAgICAgICB3YXJuaW5nKCEoJ2lubGluZUNvbGxhcHNlZCcgaW4gcHJvcHMgJiYgcHJvcHMubW9kZSAhPT0gJ2lubGluZScpLCAnYGlubGluZUNvbGxhcHNlZGAgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIE1lbnVcXCdzIGBtb2RlYCBpcyBpbmxpbmUuJyk7XG4gICAgICAgIHZhciBvcGVuS2V5cyA9IHZvaWQgMDtcbiAgICAgICAgaWYgKCdvcGVuS2V5cycgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIG9wZW5LZXlzID0gcHJvcHMub3BlbktleXM7XG4gICAgICAgIH0gZWxzZSBpZiAoJ2RlZmF1bHRPcGVuS2V5cycgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIG9wZW5LZXlzID0gcHJvcHMuZGVmYXVsdE9wZW5LZXlzO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgb3BlbktleXM6IG9wZW5LZXlzIHx8IFtdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTWVudSwgW3tcbiAgICAgICAga2V5OiAnZ2V0Q2hpbGRDb250ZXh0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5saW5lQ29sbGFwc2VkOiB0aGlzLmdldElubGluZUNvbGxhcHNlZCgpLFxuICAgICAgICAgICAgICAgIGFudGRNZW51VGhlbWU6IHRoaXMucHJvcHMudGhlbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgcHJlZml4Q2xzID0gdGhpcy5wcm9wcy5wcmVmaXhDbHM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT09ICdpbmxpbmUnICYmIG5leHRQcm9wcy5tb2RlICE9PSAnaW5saW5lJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoTW9kZUZyb21JbmxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdvcGVuS2V5cycgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW5LZXlzOiBuZXh0UHJvcHMub3BlbktleXMgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy5pbmxpbmVDb2xsYXBzZWQgJiYgIXRoaXMucHJvcHMuaW5saW5lQ29sbGFwc2VkIHx8IG5leHRDb250ZXh0LnNpZGVyQ29sbGFwc2VkICYmICF0aGlzLmNvbnRleHQuc2lkZXJDb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVudU5vZGUgPSBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN3aXRjaE1vZGVGcm9tSW5saW5lID0gISF0aGlzLnN0YXRlLm9wZW5LZXlzLmxlbmd0aCAmJiAhIW1lbnVOb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcHJlZml4Q2xzICsgJy1zdWJtZW51LW9wZW4nKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmxpbmVPcGVuS2V5cyA9IHRoaXMuc3RhdGUub3BlbktleXM7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW5LZXlzOiBbXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbmV4dFByb3BzLmlubGluZUNvbGxhcHNlZCAmJiB0aGlzLnByb3BzLmlubGluZUNvbGxhcHNlZCB8fCAhbmV4dENvbnRleHQuc2lkZXJDb2xsYXBzZWQgJiYgdGhpcy5jb250ZXh0LnNpZGVyQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW5LZXlzOiB0aGlzLmlubGluZU9wZW5LZXlzIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5saW5lT3BlbktleXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2V0T3BlbktleXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3BlbktleXMob3BlbktleXMpIHtcbiAgICAgICAgICAgIGlmICghKCdvcGVuS2V5cycgaW4gdGhpcy5wcm9wcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbktleXM6IG9wZW5LZXlzIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRSZWFsTWVudU1vZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVhbE1lbnVNb2RlKCkge1xuICAgICAgICAgICAgdmFyIGlubGluZUNvbGxhcHNlZCA9IHRoaXMuZ2V0SW5saW5lQ29sbGFwc2VkKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zd2l0Y2hNb2RlRnJvbUlubGluZSAmJiBpbmxpbmVDb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2lubGluZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbW9kZSA9IHRoaXMucHJvcHMubW9kZTtcblxuICAgICAgICAgICAgcmV0dXJuIGlubGluZUNvbGxhcHNlZCA/ICd2ZXJ0aWNhbCcgOiBtb2RlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRJbmxpbmVDb2xsYXBzZWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5saW5lQ29sbGFwc2VkKCkge1xuICAgICAgICAgICAgdmFyIGlubGluZUNvbGxhcHNlZCA9IHRoaXMucHJvcHMuaW5saW5lQ29sbGFwc2VkO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnNpZGVyQ29sbGFwc2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnNpZGVyQ29sbGFwc2VkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlubGluZUNvbGxhcHNlZDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0TWVudU9wZW5BbmltYXRpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWVudU9wZW5BbmltYXRpb24obWVudU1vZGUpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICBvcGVuQW5pbWF0aW9uID0gX3Byb3BzLm9wZW5BbmltYXRpb24sXG4gICAgICAgICAgICAgICAgb3BlblRyYW5zaXRpb25OYW1lID0gX3Byb3BzLm9wZW5UcmFuc2l0aW9uTmFtZTtcblxuICAgICAgICAgICAgdmFyIG1lbnVPcGVuQW5pbWF0aW9uID0gb3BlbkFuaW1hdGlvbiB8fCBvcGVuVHJhbnNpdGlvbk5hbWU7XG4gICAgICAgICAgICBpZiAob3BlbkFuaW1hdGlvbiA9PT0gdW5kZWZpbmVkICYmIG9wZW5UcmFuc2l0aW9uTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChtZW51TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVPcGVuQW5pbWF0aW9uID0gJ3NsaWRlLXVwJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd2ZXJ0aWNhbCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZlcnRpY2FsLWxlZnQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2ZXJ0aWNhbC1yaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIG1vZGUgc3dpdGNoIGZyb20gaW5saW5lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWJtZW51IHNob3VsZCBoaWRlIHdpdGhvdXQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zd2l0Y2hNb2RlRnJvbUlubGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVPcGVuQW5pbWF0aW9uID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2l0Y2hNb2RlRnJvbUlubGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51T3BlbkFuaW1hdGlvbiA9ICd6b29tLWJpZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5saW5lJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVPcGVuQW5pbWF0aW9uID0gX2V4dGVuZHMoe30sIGFuaW1hdGlvbiwgeyBsZWF2ZTogZnVuY3Rpb24gbGVhdmUobm9kZSwgZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uLmxlYXZlKG5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBpbmxpbmUgbWVudSBsZWF2ZSBhbmltYXRpb24gZmluaXNoZWQgYmVmb3JlIG1vZGUgaXMgc3dpdGNoZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5zd2l0Y2hNb2RlRnJvbUlubGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gaW5saW5lQ29sbGFwc2VkIGNoYW5nZSBmYWxzZSB0byB0cnVlLCBhbGwgc3VibWVudSB3aWxsIGJlIHVubW91bnRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCBoYW5kbGUgYW5pbWF0aW9uIGxlYXZpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLmdldFJlYWxNZW51TW9kZSgpID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lbnVPcGVuQW5pbWF0aW9uO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIHByZWZpeENscyA9IF9wcm9wczIucHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIHRoZW1lID0gX3Byb3BzMi50aGVtZTtcblxuICAgICAgICAgICAgdmFyIG1lbnVNb2RlID0gdGhpcy5nZXRSZWFsTWVudU1vZGUoKTtcbiAgICAgICAgICAgIHZhciBtZW51T3BlbkFuaW1hdGlvbiA9IHRoaXMuZ2V0TWVudU9wZW5BbmltYXRpb24obWVudU1vZGUpO1xuICAgICAgICAgICAgdmFyIG1lbnVDbGFzc05hbWUgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcHJlZml4Q2xzICsgJy0nICsgdGhlbWUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJlZml4Q2xzICsgJy1pbmxpbmUtY29sbGFwc2VkJywgdGhpcy5nZXRJbmxpbmVDb2xsYXBzZWQoKSkpO1xuICAgICAgICAgICAgdmFyIG1lbnVQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICBvcGVuS2V5czogdGhpcy5zdGF0ZS5vcGVuS2V5cyxcbiAgICAgICAgICAgICAgICBvbk9wZW5DaGFuZ2U6IHRoaXMuaGFuZGxlT3BlbkNoYW5nZSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IG1lbnVDbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgbW9kZTogbWVudU1vZGVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAobWVudU1vZGUgIT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgICAgLy8gY2xvc2luZyB2ZXJ0aWNhbCBwb3B1cCBzdWJtZW51IGFmdGVyIGNsaWNrIGl0XG4gICAgICAgICAgICAgICAgbWVudVByb3BzLm9uQ2xpY2sgPSB0aGlzLmhhbmRsZUNsaWNrO1xuICAgICAgICAgICAgICAgIG1lbnVQcm9wcy5vcGVuVHJhbnNpdGlvbk5hbWUgPSBtZW51T3BlbkFuaW1hdGlvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVudVByb3BzLm9wZW5BbmltYXRpb24gPSBtZW51T3BlbkFuaW1hdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzg1ODdcbiAgICAgICAgICAgIHZhciBjb2xsYXBzZWRXaWR0aCA9IHRoaXMuY29udGV4dC5jb2xsYXBzZWRXaWR0aDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0SW5saW5lQ29sbGFwc2VkKCkgJiYgKGNvbGxhcHNlZFdpZHRoID09PSAwIHx8IGNvbGxhcHNlZFdpZHRoID09PSAnMCcgfHwgY29sbGFwc2VkV2lkdGggPT09ICcwcHgnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmNNZW51LCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgbWVudVByb3BzKSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTWVudTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgTWVudTtcblxuTWVudS5EaXZpZGVyID0gRGl2aWRlcjtcbk1lbnUuSXRlbSA9IEl0ZW07XG5NZW51LlN1Yk1lbnUgPSBTdWJNZW51O1xuTWVudS5JdGVtR3JvdXAgPSBJdGVtR3JvdXA7XG5NZW51LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBwcmVmaXhDbHM6ICdhbnQtbWVudScsXG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICB0aGVtZTogJ2xpZ2h0JyxcbiAgICBmb2N1c2FibGU6IGZhbHNlXG59O1xuTWVudS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgICBpbmxpbmVDb2xsYXBzZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGFudGRNZW51VGhlbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5NZW51LmNvbnRleHRUeXBlcyA9IHtcbiAgICBzaWRlckNvbGxhcHNlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgY29sbGFwc2VkV2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufTsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheSc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbnZhciBfX3Jlc3QgPSB0aGlzICYmIHRoaXMuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgICB9aWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgICB9cmV0dXJuIHQ7XG59O1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5mdW5jdGlvbiBnZW5lcmF0b3IocHJvcHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2ljQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgICAgICAgICAgX2luaGVyaXRzKEFkYXB0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBBZGFwdGVyKCkge1xuICAgICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBZGFwdGVyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQWRhcHRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEFkYXB0ZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKEFkYXB0ZXIsIFt7XG4gICAgICAgICAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2ljQ29tcG9uZW50LCBfZXh0ZW5kcyh7IHByZWZpeENsczogcHJlZml4Q2xzIH0sIHRoaXMucHJvcHMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XSk7XG5cbiAgICAgICAgICAgIHJldHVybiBBZGFwdGVyO1xuICAgICAgICB9KFJlYWN0LkNvbXBvbmVudCk7XG4gICAgfTtcbn1cblxudmFyIEJhc2ljID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzKEJhc2ljLCBfUmVhY3QkQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBCYXNpYygpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2ljKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJhc2ljLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmFzaWMpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQmFzaWMsIFt7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIHByZWZpeENscyA9IF9hLnByZWZpeENscyxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbixcbiAgICAgICAgICAgICAgICBvdGhlcnMgPSBfX3Jlc3QoX2EsIFtcInByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcbiAgICAgICAgICAgIHZhciBkaXZDbHMgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcHJlZml4Q2xzKTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIF9leHRlbmRzKHsgY2xhc3NOYW1lOiBkaXZDbHMgfSwgb3RoZXJzKSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlblxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCYXNpYztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIEJhc2ljTGF5b3V0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQzKSB7XG4gICAgX2luaGVyaXRzKEJhc2ljTGF5b3V0LCBfUmVhY3QkQ29tcG9uZW50Myk7XG5cbiAgICBmdW5jdGlvbiBCYXNpY0xheW91dCgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2ljTGF5b3V0KTtcblxuICAgICAgICB2YXIgX3RoaXMzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJhc2ljTGF5b3V0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmFzaWNMYXlvdXQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgICAgICBfdGhpczMuc3RhdGUgPSB7IHNpZGVyczogW10gfTtcbiAgICAgICAgcmV0dXJuIF90aGlzMztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQmFzaWNMYXlvdXQsIFt7XG4gICAgICAgIGtleTogJ2dldENoaWxkQ29udGV4dCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzaWRlckhvb2s6IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU2lkZXI6IGZ1bmN0aW9uIGFkZFNpZGVyKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczQuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGVyczogW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShfdGhpczQuc3RhdGUuc2lkZXJzKSwgW2lkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZW1vdmVTaWRlcjogZnVuY3Rpb24gcmVtb3ZlU2lkZXIoaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZXJzOiBfdGhpczQuc3RhdGUuc2lkZXJzLmZpbHRlcihmdW5jdGlvbiAoY3VycmVudElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50SWQgIT09IGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIHByZWZpeENscyA9IF9hLnByZWZpeENscyxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbixcbiAgICAgICAgICAgICAgICBoYXNTaWRlciA9IF9hLmhhc1NpZGVyLFxuICAgICAgICAgICAgICAgIG90aGVycyA9IF9fcmVzdChfYSwgW1wicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJoYXNTaWRlclwiXSk7XG4gICAgICAgICAgICB2YXIgZGl2Q2xzID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeENscywgX2RlZmluZVByb3BlcnR5KHt9LCBwcmVmaXhDbHMgKyAnLWhhcy1zaWRlcicsIGhhc1NpZGVyIHx8IHRoaXMuc3RhdGUuc2lkZXJzLmxlbmd0aCA+IDApKTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIF9leHRlbmRzKHsgY2xhc3NOYW1lOiBkaXZDbHMgfSwgb3RoZXJzKSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlblxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCYXNpY0xheW91dDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQmFzaWNMYXlvdXQuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICAgc2lkZXJIb29rOiBQcm9wVHlwZXMub2JqZWN0XG59O1xudmFyIExheW91dCA9IGdlbmVyYXRvcih7XG4gICAgcHJlZml4Q2xzOiAnYW50LWxheW91dCdcbn0pKEJhc2ljTGF5b3V0KTtcbnZhciBIZWFkZXIgPSBnZW5lcmF0b3Ioe1xuICAgIHByZWZpeENsczogJ2FudC1sYXlvdXQtaGVhZGVyJ1xufSkoQmFzaWMpO1xudmFyIEZvb3RlciA9IGdlbmVyYXRvcih7XG4gICAgcHJlZml4Q2xzOiAnYW50LWxheW91dC1mb290ZXInXG59KShCYXNpYyk7XG52YXIgQ29udGVudCA9IGdlbmVyYXRvcih7XG4gICAgcHJlZml4Q2xzOiAnYW50LWxheW91dC1jb250ZW50J1xufSkoQmFzaWMpO1xuTGF5b3V0LkhlYWRlciA9IEhlYWRlcjtcbkxheW91dC5Gb290ZXIgPSBGb290ZXI7XG5MYXlvdXQuQ29udGVudCA9IENvbnRlbnQ7XG5leHBvcnQgZGVmYXVsdCBMYXlvdXQ7IiwidmFyIGlzTnVtZXJpYyA9IGZ1bmN0aW9uIGlzTnVtZXJpYyh2YWx1ZSkge1xuICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpICYmIGlzRmluaXRlKHZhbHVlKTtcbn07XG5leHBvcnQgZGVmYXVsdCBpc051bWVyaWM7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG52YXIgX19yZXN0ID0gdGhpcyAmJiB0aGlzLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gICAgfWlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCkgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgfXJldHVybiB0O1xufTtcbi8vIG1hdGNoTWVkaWEgcG9seWZpbGwgZm9yXG4vLyBodHRwczovL2dpdGh1Yi5jb20vV2lja3lOaWxsaWFtcy9lbnF1aXJlLmpzL2lzc3Vlcy84MlxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG1hdGNoTWVkaWFQb2x5ZmlsbCA9IGZ1bmN0aW9uIG1hdGNoTWVkaWFQb2x5ZmlsbChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZWRpYTogbWVkaWFRdWVyeSxcbiAgICAgICAgICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgICAgICAgICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uIGFkZExpc3RlbmVyKCkge30sXG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoKSB7fVxuICAgICAgICB9O1xuICAgIH07XG4gICAgd2luZG93Lm1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYSB8fCBtYXRjaE1lZGlhUG9seWZpbGw7XG59XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwb2x5ZmlsbCB9IGZyb20gJ3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IG9taXQgZnJvbSAnb21pdC5qcyc7XG5pbXBvcnQgKiBhcyBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcbmltcG9ydCBpc051bWVyaWMgZnJvbSAnLi4vX3V0aWwvaXNOdW1lcmljJztcbnZhciBkaW1lbnNpb25NYXAgPSB7XG4gICAgeHM6ICc0ODBweCcsXG4gICAgc206ICc1NzZweCcsXG4gICAgbWQ6ICc3NjhweCcsXG4gICAgbGc6ICc5OTJweCcsXG4gICAgeGw6ICcxMjAwcHgnLFxuICAgIHh4bDogJzE2MDBweCdcbn07XG52YXIgZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgICByZXR1cm4gJycgKyBwcmVmaXggKyBpO1xuICAgIH07XG59KCk7XG5cbnZhciBTaWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFNpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFNpZGVyKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaWRlcik7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNpZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2lkZXIpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMucmVzcG9uc2l2ZUhhbmRsZXIgPSBmdW5jdGlvbiAobXFsKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGJlbG93OiBtcWwubWF0Y2hlcyB9KTtcbiAgICAgICAgICAgIHZhciBvbkJyZWFrcG9pbnQgPSBfdGhpcy5wcm9wcy5vbkJyZWFrcG9pbnQ7XG5cbiAgICAgICAgICAgIGlmIChvbkJyZWFrcG9pbnQpIHtcbiAgICAgICAgICAgICAgICBvbkJyZWFrcG9pbnQobXFsLm1hdGNoZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLnN0YXRlLmNvbGxhcHNlZCAhPT0gbXFsLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRDb2xsYXBzZWQobXFsLm1hdGNoZXMsICdyZXNwb25zaXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldENvbGxhcHNlZCA9IGZ1bmN0aW9uIChjb2xsYXBzZWQsIHR5cGUpIHtcbiAgICAgICAgICAgIGlmICghKCdjb2xsYXBzZWQnIGluIF90aGlzLnByb3BzKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VkOiBjb2xsYXBzZWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBvbkNvbGxhcHNlID0gX3RoaXMucHJvcHMub25Db2xsYXBzZTtcblxuICAgICAgICAgICAgaWYgKG9uQ29sbGFwc2UpIHtcbiAgICAgICAgICAgICAgICBvbkNvbGxhcHNlKGNvbGxhcHNlZCwgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsYXBzZWQgPSAhX3RoaXMuc3RhdGUuY29sbGFwc2VkO1xuICAgICAgICAgICAgX3RoaXMuc2V0Q29sbGFwc2VkKGNvbGxhcHNlZCwgJ2NsaWNrVHJpZ2dlcicpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5iZWxvd1Nob3dDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGJlbG93U2hvdzogIV90aGlzLnN0YXRlLmJlbG93U2hvdyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMudW5pcXVlSWQgPSBnZW5lcmF0ZUlkKCdhbnQtc2lkZXItJyk7XG4gICAgICAgIHZhciBtYXRjaE1lZGlhID0gdm9pZCAwO1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hNZWRpYSAmJiBwcm9wcy5icmVha3BvaW50ICYmIHByb3BzLmJyZWFrcG9pbnQgaW4gZGltZW5zaW9uTWFwKSB7XG4gICAgICAgICAgICBfdGhpcy5tcWwgPSBtYXRjaE1lZGlhKCcobWF4LXdpZHRoOiAnICsgZGltZW5zaW9uTWFwW3Byb3BzLmJyZWFrcG9pbnRdICsgJyknKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29sbGFwc2VkID0gdm9pZCAwO1xuICAgICAgICBpZiAoJ2NvbGxhcHNlZCcgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGNvbGxhcHNlZCA9IHByb3BzLmNvbGxhcHNlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbGxhcHNlZCA9IHByb3BzLmRlZmF1bHRDb2xsYXBzZWQ7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb2xsYXBzZWQ6IGNvbGxhcHNlZCxcbiAgICAgICAgICAgIGJlbG93OiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNpZGVyLCBbe1xuICAgICAgICBrZXk6ICdnZXRDaGlsZENvbnRleHQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzaWRlckNvbGxhcHNlZDogdGhpcy5zdGF0ZS5jb2xsYXBzZWQsXG4gICAgICAgICAgICAgICAgY29sbGFwc2VkV2lkdGg6IHRoaXMucHJvcHMuY29sbGFwc2VkV2lkdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubXFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tcWwuYWRkTGlzdGVuZXIodGhpcy5yZXNwb25zaXZlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zaXZlSGFuZGxlcih0aGlzLm1xbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnNpZGVySG9vaykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zaWRlckhvb2suYWRkU2lkZXIodGhpcy51bmlxdWVJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubXFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tcWwucmVtb3ZlTGlzdGVuZXIodGhpcy5yZXNwb25zaXZlSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnNpZGVySG9vaykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zaWRlckhvb2sucmVtb3ZlU2lkZXIodGhpcy51bmlxdWVJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgcHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICB0aGVtZSA9IF9hLnRoZW1lLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNpYmxlID0gX2EuY29sbGFwc2libGUsXG4gICAgICAgICAgICAgICAgcmV2ZXJzZUFycm93ID0gX2EucmV2ZXJzZUFycm93LFxuICAgICAgICAgICAgICAgIHRyaWdnZXIgPSBfYS50cmlnZ2VyLFxuICAgICAgICAgICAgICAgIHN0eWxlID0gX2Euc3R5bGUsXG4gICAgICAgICAgICAgICAgd2lkdGggPSBfYS53aWR0aCxcbiAgICAgICAgICAgICAgICBjb2xsYXBzZWRXaWR0aCA9IF9hLmNvbGxhcHNlZFdpZHRoLFxuICAgICAgICAgICAgICAgIG90aGVycyA9IF9fcmVzdChfYSwgW1wicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwidGhlbWVcIiwgXCJjb2xsYXBzaWJsZVwiLCBcInJldmVyc2VBcnJvd1wiLCBcInRyaWdnZXJcIiwgXCJzdHlsZVwiLCBcIndpZHRoXCIsIFwiY29sbGFwc2VkV2lkdGhcIl0pO1xuICAgICAgICAgICAgdmFyIGRpdlByb3BzID0gb21pdChvdGhlcnMsIFsnY29sbGFwc2VkJywgJ2RlZmF1bHRDb2xsYXBzZWQnLCAnb25Db2xsYXBzZScsICdicmVha3BvaW50JywgJ29uQnJlYWtwb2ludCddKTtcbiAgICAgICAgICAgIHZhciByYXdXaWR0aCA9IHRoaXMuc3RhdGUuY29sbGFwc2VkID8gY29sbGFwc2VkV2lkdGggOiB3aWR0aDtcbiAgICAgICAgICAgIC8vIHVzZSBcInB4XCIgYXMgZmFsbGJhY2sgdW5pdCBmb3Igd2lkdGhcbiAgICAgICAgICAgIHZhciBzaWRlcldpZHRoID0gaXNOdW1lcmljKHJhd1dpZHRoKSA/IHJhd1dpZHRoICsgJ3B4JyA6IFN0cmluZyhyYXdXaWR0aCk7XG4gICAgICAgICAgICAvLyBzcGVjaWFsIHRyaWdnZXIgd2hlbiBjb2xsYXBzZWRXaWR0aCA9PSAwXG4gICAgICAgICAgICB2YXIgemVyb1dpZHRoVHJpZ2dlciA9IHBhcnNlRmxvYXQoU3RyaW5nKGNvbGxhcHNlZFdpZHRoIHx8IDApKSA9PT0gMCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgIHsgb25DbGljazogdGhpcy50b2dnbGUsIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy16ZXJvLXdpZHRoLXRyaWdnZXInIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IHR5cGU6ICdiYXJzJyB9KVxuICAgICAgICAgICAgKSA6IG51bGw7XG4gICAgICAgICAgICB2YXIgaWNvbk9iaiA9IHtcbiAgICAgICAgICAgICAgICAnZXhwYW5kZWQnOiByZXZlcnNlQXJyb3cgPyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgdHlwZTogJ3JpZ2h0JyB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyB0eXBlOiAnbGVmdCcgfSksXG4gICAgICAgICAgICAgICAgJ2NvbGxhcHNlZCc6IHJldmVyc2VBcnJvdyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyB0eXBlOiAnbGVmdCcgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgdHlwZTogJ3JpZ2h0JyB9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLmNvbGxhcHNlZCA/ICdjb2xsYXBzZWQnIDogJ2V4cGFuZGVkJztcbiAgICAgICAgICAgIHZhciBkZWZhdWx0VHJpZ2dlciA9IGljb25PYmpbc3RhdHVzXTtcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyRG9tID0gdHJpZ2dlciAhPT0gbnVsbCA/IHplcm9XaWR0aFRyaWdnZXIgfHwgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy10cmlnZ2VyJywgb25DbGljazogdGhpcy50b2dnbGUsIHN0eWxlOiB7IHdpZHRoOiBzaWRlcldpZHRoIH0gfSxcbiAgICAgICAgICAgICAgICB0cmlnZ2VyIHx8IGRlZmF1bHRUcmlnZ2VyXG4gICAgICAgICAgICApIDogbnVsbDtcbiAgICAgICAgICAgIHZhciBkaXZTdHlsZSA9IF9leHRlbmRzKHt9LCBzdHlsZSwgeyBmbGV4OiAnMCAwICcgKyBzaWRlcldpZHRoLCBtYXhXaWR0aDogc2lkZXJXaWR0aCwgbWluV2lkdGg6IHNpZGVyV2lkdGgsIHdpZHRoOiBzaWRlcldpZHRoIH0pO1xuICAgICAgICAgICAgdmFyIHNpZGVyQ2xzID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeENscywgcHJlZml4Q2xzICsgJy0nICsgdGhlbWUsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIHByZWZpeENscyArICctY29sbGFwc2VkJywgISF0aGlzLnN0YXRlLmNvbGxhcHNlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgcHJlZml4Q2xzICsgJy1oYXMtdHJpZ2dlcicsIGNvbGxhcHNpYmxlICYmIHRyaWdnZXIgIT09IG51bGwgJiYgIXplcm9XaWR0aFRyaWdnZXIpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIHByZWZpeENscyArICctYmVsb3cnLCAhIXRoaXMuc3RhdGUuYmVsb3cpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIHByZWZpeENscyArICctemVyby13aWR0aCcsIHBhcnNlRmxvYXQoc2lkZXJXaWR0aCkgPT09IDApLCBfY2xhc3NOYW1lcykpO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgX2V4dGVuZHMoeyBjbGFzc05hbWU6IHNpZGVyQ2xzIH0sIGRpdlByb3BzLCB7IHN0eWxlOiBkaXZTdHlsZSB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctY2hpbGRyZW4nIH0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNpYmxlIHx8IHRoaXMuc3RhdGUuYmVsb3cgJiYgemVyb1dpZHRoVHJpZ2dlciA/IHRyaWdnZXJEb20gOiBudWxsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgICAgICBpZiAoJ2NvbGxhcHNlZCcgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VkOiBuZXh0UHJvcHMuY29sbGFwc2VkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNpZGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TaWRlci5fX0FOVF9MQVlPVVRfU0lERVIgPSB0cnVlO1xuU2lkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIHByZWZpeENsczogJ2FudC1sYXlvdXQtc2lkZXInLFxuICAgIGNvbGxhcHNpYmxlOiBmYWxzZSxcbiAgICBkZWZhdWx0Q29sbGFwc2VkOiBmYWxzZSxcbiAgICByZXZlcnNlQXJyb3c6IGZhbHNlLFxuICAgIHdpZHRoOiAyMDAsXG4gICAgY29sbGFwc2VkV2lkdGg6IDgwLFxuICAgIHN0eWxlOiB7fSxcbiAgICB0aGVtZTogJ2RhcmsnXG59O1xuU2lkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICAgc2lkZXJDb2xsYXBzZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGNvbGxhcHNlZFdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn07XG5TaWRlci5jb250ZXh0VHlwZXMgPSB7XG4gICAgc2lkZXJIb29rOiBQcm9wVHlwZXMub2JqZWN0XG59O1xucG9seWZpbGwoU2lkZXIpO1xuZXhwb3J0IGRlZmF1bHQgU2lkZXI7IiwiaW1wb3J0IExheW91dCBmcm9tICcuL2xheW91dCc7XG5pbXBvcnQgU2lkZXIgZnJvbSAnLi9TaWRlcic7XG5MYXlvdXQuU2lkZXIgPSBTaWRlcjtcbmV4cG9ydCBkZWZhdWx0IExheW91dDsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZUdlbmVyYXRvciA9IGZ1bmN0aW9uIGNvbXBpbGVHZW5lcmF0b3IocGF0dGVybikge1xuICB2YXIgY2FjaGVLZXkgPSBwYXR0ZXJuO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBjb21waWxlZEdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdHRlcm4pO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdHRlcm5dID0gY29tcGlsZWRHZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkR2VuZXJhdG9yO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXR0ZXJuIGFuZCBwYXJhbWV0ZXJzLlxuICovXG52YXIgZ2VuZXJhdGVQYXRoID0gZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKCkge1xuICB2YXIgcGF0dGVybiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCIvXCI7XG4gIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmIChwYXR0ZXJuID09PSBcIi9cIikge1xuICAgIHJldHVybiBwYXR0ZXJuO1xuICB9XG4gIHZhciBnZW5lcmF0b3IgPSBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pO1xuICByZXR1cm4gZ2VuZXJhdG9yKHBhcmFtcywgeyBwcmV0dHk6IHRydWUgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZVBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IGdlbmVyYXRlUGF0aCBmcm9tIFwiLi9nZW5lcmF0ZVBhdGhcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgdXBkYXRpbmcgdGhlIGxvY2F0aW9uIHByb2dyYW1tYXRpY2FsbHlcbiAqIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSZWRpcmVjdC5wcm90b3R5cGUuaXNTdGF0aWMgPSBmdW5jdGlvbiBpc1N0YXRpYygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlciAmJiB0aGlzLmNvbnRleHQucm91dGVyLnN0YXRpY0NvbnRleHQ7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcHJldlRvID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICB2YXIgbmV4dFRvID0gY3JlYXRlTG9jYXRpb24odGhpcy5wcm9wcy50byk7XG5cbiAgICBpZiAobG9jYXRpb25zQXJlRXF1YWwocHJldlRvLCBuZXh0VG8pKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIllvdSB0cmllZCB0byByZWRpcmVjdCB0byB0aGUgc2FtZSByb3V0ZSB5b3UncmUgY3VycmVudGx5IG9uOiBcIiArIChcIlxcXCJcIiArIG5leHRUby5wYXRobmFtZSArIG5leHRUby5zZWFyY2ggKyBcIlxcXCJcIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wdXRlVG8gPSBmdW5jdGlvbiBjb21wdXRlVG8oX3JlZikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICB0byA9IF9yZWYudG87XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkge1xuICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0bztcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uIHBlcmZvcm0oKSB7XG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgdmFyIHB1c2ggPSB0aGlzLnByb3BzLnB1c2g7XG5cbiAgICB2YXIgdG8gPSB0aGlzLmNvbXB1dGVUbyh0aGlzLnByb3BzKTtcblxuICAgIGlmIChwdXNoKSB7XG4gICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgIH1cbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbn07XG5SZWRpcmVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHB1c2g6IGZhbHNlXG59O1xuUmVkaXJlY3QuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSZWRpcmVjdCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBub29wKCkge31cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleUZyb21DaGlsZHJlbkluZGV4KGNoaWxkLCBtZW51RXZlbnRLZXksIGluZGV4KSB7XG4gIHZhciBwcmVmaXggPSBtZW51RXZlbnRLZXkgfHwgJyc7XG4gIHJldHVybiBjaGlsZC5rZXkgfHwgcHJlZml4ICsgJ2l0ZW1fJyArIGluZGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVudUlkRnJvbVN1Yk1lbnVFdmVudEtleShldmVudEtleSkge1xuICByZXR1cm4gZXZlbnRLZXkgKyAnLW1lbnUtJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvb3BNZW51SXRlbShjaGlsZHJlbiwgY2IpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgaW5kZXgrKztcbiAgICBpZiAoYyAmJiBjLnR5cGUgJiYgYy50eXBlLmlzTWVudUl0ZW1Hcm91cCkge1xuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoYzIpIHtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgY2IoYzIsIGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYihjLCBpbmRleCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvb3BNZW51SXRlbVJlY3Vyc2l2ZWx5KGNoaWxkcmVuLCBrZXlzLCByZXQpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRyZW4gfHwgcmV0LmZpbmQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICBpZiAoYykge1xuICAgICAgdmFyIGNvbnN0cnVjdCA9IGMudHlwZTtcbiAgICAgIGlmICghY29uc3RydWN0IHx8ICEoY29uc3RydWN0LmlzU3ViTWVudSB8fCBjb25zdHJ1Y3QuaXNNZW51SXRlbSB8fCBjb25zdHJ1Y3QuaXNNZW51SXRlbUdyb3VwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5cy5pbmRleE9mKGMua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgcmV0LmZpbmQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgIGxvb3BNZW51SXRlbVJlY3Vyc2l2ZWx5KGMucHJvcHMuY2hpbGRyZW4sIGtleXMsIHJldCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHZhciBtZW51QWxsUHJvcHMgPSBbJ2RlZmF1bHRTZWxlY3RlZEtleXMnLCAnc2VsZWN0ZWRLZXlzJywgJ2RlZmF1bHRPcGVuS2V5cycsICdvcGVuS2V5cycsICdtb2RlJywgJ2dldFBvcHVwQ29udGFpbmVyJywgJ29uU2VsZWN0JywgJ29uRGVzZWxlY3QnLCAnb25EZXN0cm95JywgJ29wZW5UcmFuc2l0aW9uTmFtZScsICdvcGVuQW5pbWF0aW9uJywgJ3N1Yk1lbnVPcGVuRGVsYXknLCAnc3ViTWVudUNsb3NlRGVsYXknLCAnZm9yY2VTdWJNZW51UmVuZGVyJywgJ3RyaWdnZXJTdWJNZW51QWN0aW9uJywgJ2xldmVsJywgJ3NlbGVjdGFibGUnLCAnbXVsdGlwbGUnLCAnb25PcGVuQ2hhbmdlJywgJ3Zpc2libGUnLCAnZm9jdXNhYmxlJywgJ2RlZmF1bHRBY3RpdmVGaXJzdCcsICdwcmVmaXhDbHMnLCAnaW5saW5lSW5kZW50JywgJ3BhcmVudE1lbnUnLCAndGl0bGUnLCAncm9vdFByZWZpeENscycsICdldmVudEtleScsICdhY3RpdmUnLCAnb25JdGVtSG92ZXInLCAnb25UaXRsZU1vdXNlRW50ZXInLCAnb25UaXRsZU1vdXNlTGVhdmUnLCAnb25UaXRsZUNsaWNrJywgJ3BvcHVwQWxpZ24nLCAncG9wdXBPZmZzZXQnLCAnaXNPcGVuJywgJ3JlbmRlck1lbnVJdGVtJywgJ21hbnVhbFJlZicsICdzdWJNZW51S2V5JywgJ2Rpc2FibGVkJywgJ2luZGV4JywgJ2lzU2VsZWN0ZWQnLCAnc3RvcmUnLCAnYWN0aXZlS2V5JywgJ2J1aWx0aW5QbGFjZW1lbnRzJywgJ292ZXJmbG93ZWRJbmRpY2F0b3InLFxuXG4vLyB0aGUgZm9sbG93aW5nIGtleXMgZm91bmQgbmVlZCB0byBiZSByZW1vdmVkIGZyb20gdGVzdCByZWdyZXNzaW9uXG4nYXR0cmlidXRlJywgJ3ZhbHVlJywgJ3BvcHVwQ2xhc3NOYW1lJywgJ2lubGluZUNvbGxhcHNlZCcsICdtZW51JywgJ3RoZW1lJywgJ2l0ZW1JY29uJywgJ2V4cGFuZEljb24nXTtcblxuZXhwb3J0IHZhciBnZXRXaWR0aCA9IGZ1bmN0aW9uIGdldFdpZHRoKGVsZW0pIHtcbiAgcmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG59OyIsInZhciBhdXRvQWRqdXN0T3ZlcmZsb3cgPSB7XG4gIGFkanVzdFg6IDEsXG4gIGFkanVzdFk6IDFcbn07XG5cbmV4cG9ydCB2YXIgcGxhY2VtZW50cyA9IHtcbiAgdG9wTGVmdDoge1xuICAgIHBvaW50czogWydibCcsICd0bCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgLTddXG4gIH0sXG4gIGJvdHRvbUxlZnQ6IHtcbiAgICBwb2ludHM6IFsndGwnLCAnYmwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIDddXG4gIH0sXG4gIGxlZnRUb3A6IHtcbiAgICBwb2ludHM6IFsndHInLCAndGwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWy00LCAwXVxuICB9LFxuICByaWdodFRvcDoge1xuICAgIHBvaW50czogWyd0bCcsICd0ciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbNCwgMF1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGxhY2VtZW50czsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVHJpZ2dlciBmcm9tICdyYy10cmlnZ2VyJztcbmltcG9ydCBLZXlDb2RlIGZyb20gJ3JjLXV0aWwvZXMvS2V5Q29kZSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdtaW5pLXN0b3JlJztcbmltcG9ydCBTdWJQb3B1cE1lbnUgZnJvbSAnLi9TdWJQb3B1cE1lbnUnO1xuaW1wb3J0IHBsYWNlbWVudHMgZnJvbSAnLi9wbGFjZW1lbnRzJztcbmltcG9ydCBBbmltYXRlIGZyb20gJ3JjLWFuaW1hdGUnO1xuaW1wb3J0IHsgbm9vcCwgbG9vcE1lbnVJdGVtUmVjdXJzaXZlbHksIGdldE1lbnVJZEZyb21TdWJNZW51RXZlbnRLZXksIG1lbnVBbGxQcm9wcyB9IGZyb20gJy4vdXRpbCc7XG5cbnZhciBndWlkID0gMDtcblxudmFyIHBvcHVwUGxhY2VtZW50TWFwID0ge1xuICBob3Jpem9udGFsOiAnYm90dG9tTGVmdCcsXG4gIHZlcnRpY2FsOiAncmlnaHRUb3AnLFxuICAndmVydGljYWwtbGVmdCc6ICdyaWdodFRvcCcsXG4gICd2ZXJ0aWNhbC1yaWdodCc6ICdsZWZ0VG9wJ1xufTtcblxudmFyIHVwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdCA9IGZ1bmN0aW9uIHVwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdChzdG9yZSwgZXZlbnRLZXksIGRlZmF1bHRBY3RpdmVGaXJzdCkge1xuICB2YXIgX2V4dGVuZHMyO1xuXG4gIHZhciBtZW51SWQgPSBnZXRNZW51SWRGcm9tU3ViTWVudUV2ZW50S2V5KGV2ZW50S2V5KTtcbiAgdmFyIHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgc3RvcmUuc2V0U3RhdGUoe1xuICAgIGRlZmF1bHRBY3RpdmVGaXJzdDogX2V4dGVuZHMoe30sIHN0YXRlLmRlZmF1bHRBY3RpdmVGaXJzdCwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbbWVudUlkXSA9IGRlZmF1bHRBY3RpdmVGaXJzdCwgX2V4dGVuZHMyKSlcbiAgfSk7XG59O1xuXG5leHBvcnQgdmFyIFN1Yk1lbnUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3ViTWVudSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3ViTWVudShwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJNZW51KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKTtcblxuICAgIHZhciBzdG9yZSA9IHByb3BzLnN0b3JlO1xuICAgIHZhciBldmVudEtleSA9IHByb3BzLmV2ZW50S2V5O1xuICAgIHZhciBkZWZhdWx0QWN0aXZlRmlyc3QgPSBzdG9yZS5nZXRTdGF0ZSgpLmRlZmF1bHRBY3RpdmVGaXJzdDtcblxuICAgIF90aGlzLmlzUm9vdE1lbnUgPSBmYWxzZTtcblxuICAgIHZhciB2YWx1ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGRlZmF1bHRBY3RpdmVGaXJzdCkge1xuICAgICAgdmFsdWUgPSBkZWZhdWx0QWN0aXZlRmlyc3RbZXZlbnRLZXldO1xuICAgIH1cblxuICAgIHVwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdChzdG9yZSwgZXZlbnRLZXksIHZhbHVlKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBTdWJNZW51LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlKCk7XG4gIH07XG5cbiAgU3ViTWVudS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG1vZGUgPSBfcHJvcHMubW9kZSxcbiAgICAgICAgcGFyZW50TWVudSA9IF9wcm9wcy5wYXJlbnRNZW51LFxuICAgICAgICBtYW51YWxSZWYgPSBfcHJvcHMubWFudWFsUmVmO1xuXG4gICAgLy8gaW52b2tlIGN1c3RvbWl6ZWQgcmVmIHRvIGV4cG9zZSBjb21wb25lbnQgdG8gbWl4aW5cblxuICAgIGlmIChtYW51YWxSZWYpIHtcbiAgICAgIG1hbnVhbFJlZih0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAobW9kZSAhPT0gJ2hvcml6b250YWwnIHx8ICFwYXJlbnRNZW51LmlzUm9vdE1lbnUgfHwgIXRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5taW5XaWR0aFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczIuYWRqdXN0V2lkdGgoKTtcbiAgICB9LCAwKTtcbiAgfTtcblxuICBTdWJNZW51LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25EZXN0cm95ID0gX3Byb3BzMi5vbkRlc3Ryb3ksXG4gICAgICAgIGV2ZW50S2V5ID0gX3Byb3BzMi5ldmVudEtleTtcblxuICAgIGlmIChvbkRlc3Ryb3kpIHtcbiAgICAgIG9uRGVzdHJveShldmVudEtleSk7XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMubWluV2lkdGhUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5taW5XaWR0aFRpbWVvdXQpO1xuICAgIH1cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLm1vdXNlZW50ZXJUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5tb3VzZWVudGVyVGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIFN1Yk1lbnUucHJvdG90eXBlLnJlbmRlckNoaWxkcmVuID0gZnVuY3Rpb24gcmVuZGVyQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBiYXNlUHJvcHMgPSB7XG4gICAgICBtb2RlOiBwcm9wcy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogcHJvcHMubW9kZSxcbiAgICAgIHZpc2libGU6IHRoaXMucHJvcHMuaXNPcGVuLFxuICAgICAgbGV2ZWw6IHByb3BzLmxldmVsICsgMSxcbiAgICAgIGlubGluZUluZGVudDogcHJvcHMuaW5saW5lSW5kZW50LFxuICAgICAgZm9jdXNhYmxlOiBmYWxzZSxcbiAgICAgIG9uQ2xpY2s6IHRoaXMub25TdWJNZW51Q2xpY2ssXG4gICAgICBvblNlbGVjdDogdGhpcy5vblNlbGVjdCxcbiAgICAgIG9uRGVzZWxlY3Q6IHRoaXMub25EZXNlbGVjdCxcbiAgICAgIG9uRGVzdHJveTogdGhpcy5vbkRlc3Ryb3ksXG4gICAgICBzZWxlY3RlZEtleXM6IHByb3BzLnNlbGVjdGVkS2V5cyxcbiAgICAgIGV2ZW50S2V5OiBwcm9wcy5ldmVudEtleSArICctbWVudS0nLFxuICAgICAgb3BlbktleXM6IHByb3BzLm9wZW5LZXlzLFxuICAgICAgb3BlblRyYW5zaXRpb25OYW1lOiBwcm9wcy5vcGVuVHJhbnNpdGlvbk5hbWUsXG4gICAgICBvcGVuQW5pbWF0aW9uOiBwcm9wcy5vcGVuQW5pbWF0aW9uLFxuICAgICAgb25PcGVuQ2hhbmdlOiB0aGlzLm9uT3BlbkNoYW5nZSxcbiAgICAgIHN1Yk1lbnVPcGVuRGVsYXk6IHByb3BzLnN1Yk1lbnVPcGVuRGVsYXksXG4gICAgICBwYXJlbnRNZW51OiB0aGlzLFxuICAgICAgc3ViTWVudUNsb3NlRGVsYXk6IHByb3BzLnN1Yk1lbnVDbG9zZURlbGF5LFxuICAgICAgZm9yY2VTdWJNZW51UmVuZGVyOiBwcm9wcy5mb3JjZVN1Yk1lbnVSZW5kZXIsXG4gICAgICB0cmlnZ2VyU3ViTWVudUFjdGlvbjogcHJvcHMudHJpZ2dlclN1Yk1lbnVBY3Rpb24sXG4gICAgICBidWlsdGluUGxhY2VtZW50czogcHJvcHMuYnVpbHRpblBsYWNlbWVudHMsXG4gICAgICBkZWZhdWx0QWN0aXZlRmlyc3Q6IHByb3BzLnN0b3JlLmdldFN0YXRlKCkuZGVmYXVsdEFjdGl2ZUZpcnN0W2dldE1lbnVJZEZyb21TdWJNZW51RXZlbnRLZXkocHJvcHMuZXZlbnRLZXkpXSxcbiAgICAgIG11bHRpcGxlOiBwcm9wcy5tdWx0aXBsZSxcbiAgICAgIHByZWZpeENsczogcHJvcHMucm9vdFByZWZpeENscyxcbiAgICAgIGlkOiB0aGlzLl9tZW51SWQsXG4gICAgICBtYW51YWxSZWY6IHRoaXMuc2F2ZU1lbnVJbnN0YW5jZSxcbiAgICAgIGl0ZW1JY29uOiBwcm9wcy5pdGVtSWNvbixcbiAgICAgIGV4cGFuZEljb246IHByb3BzLmV4cGFuZEljb25cbiAgICB9O1xuXG4gICAgdmFyIGhhdmVSZW5kZXJlZCA9IHRoaXMuaGF2ZVJlbmRlcmVkO1xuICAgIHRoaXMuaGF2ZVJlbmRlcmVkID0gdHJ1ZTtcblxuICAgIHRoaXMuaGF2ZU9wZW5lZCA9IHRoaXMuaGF2ZU9wZW5lZCB8fCBiYXNlUHJvcHMudmlzaWJsZSB8fCBiYXNlUHJvcHMuZm9yY2VTdWJNZW51UmVuZGVyO1xuICAgIC8vIG5ldmVyIHJlbmRlcmVkIG5vdCBwbGFubmluZyB0bywgZG9uJ3QgcmVuZGVyXG4gICAgaWYgKCF0aGlzLmhhdmVPcGVuZWQpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBudWxsKTtcbiAgICB9XG5cbiAgICAvLyBkb24ndCBzaG93IHRyYW5zaXRpb24gb24gZmlyc3QgcmVuZGVyaW5nIChubyBhbmltYXRpb24gZm9yIG9wZW5lZCBtZW51KVxuICAgIC8vIHNob3cgYXBwZWFyIHRyYW5zaXRpb24gaWYgaXQncyBub3QgdmlzaWJsZSAobm90IHN1cmUgd2h5KVxuICAgIC8vIHNob3cgYXBwZWFyIHRyYW5zaXRpb24gaWYgaXQncyBub3QgaW5saW5lIG1vZGVcbiAgICB2YXIgdHJhbnNpdGlvbkFwcGVhciA9IGhhdmVSZW5kZXJlZCB8fCAhYmFzZVByb3BzLnZpc2libGUgfHwgIWJhc2VQcm9wcy5tb2RlID09PSAnaW5saW5lJztcblxuICAgIGJhc2VQcm9wcy5jbGFzc05hbWUgPSAnICcgKyBiYXNlUHJvcHMucHJlZml4Q2xzICsgJy1zdWInO1xuICAgIHZhciBhbmltUHJvcHMgPSB7fTtcblxuICAgIGlmIChiYXNlUHJvcHMub3BlblRyYW5zaXRpb25OYW1lKSB7XG4gICAgICBhbmltUHJvcHMudHJhbnNpdGlvbk5hbWUgPSBiYXNlUHJvcHMub3BlblRyYW5zaXRpb25OYW1lO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJhc2VQcm9wcy5vcGVuQW5pbWF0aW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgYW5pbVByb3BzLmFuaW1hdGlvbiA9IF9leHRlbmRzKHt9LCBiYXNlUHJvcHMub3BlbkFuaW1hdGlvbik7XG4gICAgICBpZiAoIXRyYW5zaXRpb25BcHBlYXIpIHtcbiAgICAgICAgZGVsZXRlIGFuaW1Qcm9wcy5hbmltYXRpb24uYXBwZWFyO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQW5pbWF0ZSxcbiAgICAgIF9leHRlbmRzKHt9LCBhbmltUHJvcHMsIHtcbiAgICAgICAgc2hvd1Byb3A6ICd2aXNpYmxlJyxcbiAgICAgICAgY29tcG9uZW50OiAnJyxcbiAgICAgICAgdHJhbnNpdGlvbkFwcGVhcjogdHJhbnNpdGlvbkFwcGVhclxuICAgICAgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBTdWJQb3B1cE1lbnUsXG4gICAgICAgIF9leHRlbmRzKHt9LCBiYXNlUHJvcHMsIHsgaWQ6IHRoaXMuX21lbnVJZCB9KSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIFN1Yk1lbnUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG4gICAgdmFyIGlzT3BlbiA9IHByb3BzLmlzT3BlbjtcbiAgICB2YXIgbGV2ZWwgPSBwcm9wcy5sZXZlbDtcbiAgICB2YXIgcHJlZml4Q2xzID0gdGhpcy5nZXRQcmVmaXhDbHMoKTtcbiAgICB2YXIgaXNJbmxpbmVNb2RlID0gcHJvcHMubW9kZSA9PT0gJ2lubGluZSc7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCBwcmVmaXhDbHMgKyAnLScgKyBwcm9wcy5tb2RlLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2NsYXNzTmFtZXNbcHJvcHMuY2xhc3NOYW1lXSA9ICEhcHJvcHMuY2xhc3NOYW1lLCBfY2xhc3NOYW1lc1t0aGlzLmdldE9wZW5DbGFzc05hbWUoKV0gPSBpc09wZW4sIF9jbGFzc05hbWVzW3RoaXMuZ2V0QWN0aXZlQ2xhc3NOYW1lKCldID0gcHJvcHMuYWN0aXZlIHx8IGlzT3BlbiAmJiAhaXNJbmxpbmVNb2RlLCBfY2xhc3NOYW1lc1t0aGlzLmdldERpc2FibGVkQ2xhc3NOYW1lKCldID0gcHJvcHMuZGlzYWJsZWQsIF9jbGFzc05hbWVzW3RoaXMuZ2V0U2VsZWN0ZWRDbGFzc05hbWUoKV0gPSB0aGlzLmlzQ2hpbGRyZW5TZWxlY3RlZCgpLCBfY2xhc3NOYW1lcykpO1xuXG4gICAgaWYgKCF0aGlzLl9tZW51SWQpIHtcbiAgICAgIGlmIChwcm9wcy5ldmVudEtleSkge1xuICAgICAgICB0aGlzLl9tZW51SWQgPSBwcm9wcy5ldmVudEtleSArICckTWVudSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9tZW51SWQgPSAnJF9fJCcgKyArK2d1aWQgKyAnJE1lbnUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtb3VzZUV2ZW50cyA9IHt9O1xuICAgIHZhciB0aXRsZUNsaWNrRXZlbnRzID0ge307XG4gICAgdmFyIHRpdGxlTW91c2VFdmVudHMgPSB7fTtcbiAgICBpZiAoIXByb3BzLmRpc2FibGVkKSB7XG4gICAgICBtb3VzZUV2ZW50cyA9IHtcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLm9uTW91c2VFbnRlclxuICAgICAgfTtcblxuICAgICAgLy8gb25seSB3b3JrcyBpbiB0aXRsZSwgbm90IG91dGVyIGxpXG4gICAgICB0aXRsZUNsaWNrRXZlbnRzID0ge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uVGl0bGVDbGlja1xuICAgICAgfTtcbiAgICAgIHRpdGxlTW91c2VFdmVudHMgPSB7XG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5vblRpdGxlTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLm9uVGl0bGVNb3VzZUxlYXZlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBzdHlsZSA9IHt9O1xuICAgIGlmIChpc0lubGluZU1vZGUpIHtcbiAgICAgIHN0eWxlLnBhZGRpbmdMZWZ0ID0gcHJvcHMuaW5saW5lSW5kZW50ICogcHJvcHMubGV2ZWw7XG4gICAgfVxuXG4gICAgdmFyIGFyaWFPd25zID0ge307XG4gICAgLy8gb25seSBzZXQgYXJpYS1vd25zIHdoZW4gbWVudSBpcyBvcGVuXG4gICAgLy8gb3RoZXJ3aXNlIGl0IHdvdWxkIGJlIGFuIGludmFsaWQgYXJpYS1vd25zIHZhbHVlXG4gICAgLy8gc2luY2UgY29ycmVzcG9uZGluZyBub2RlIGNhbm5vdCBiZSBmb3VuZFxuICAgIGlmICh0aGlzLnByb3BzLmlzT3Blbikge1xuICAgICAgYXJpYU93bnMgPSB7XG4gICAgICAgICdhcmlhLW93bnMnOiB0aGlzLl9tZW51SWRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZXhwYW5kIGN1c3RvbSBpY29uIHNob3VsZCBOT1QgYmUgZGlzcGxheWVkIGluIG1lbnUgd2l0aCBob3Jpem9udGFsIG1vZGUuXG4gICAgdmFyIGljb24gPSBudWxsO1xuICAgIGlmIChwcm9wcy5tb2RlICE9PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgIGljb24gPSB0aGlzLnByb3BzLmV4cGFuZEljb247IC8vIFJlYWN0Tm9kZVxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmV4cGFuZEljb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWNvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5leHBhbmRJY29uLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0aXRsZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiB0aGlzLnNhdmVTdWJNZW51VGl0bGUsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXRpdGxlJ1xuICAgICAgfSwgdGl0bGVNb3VzZUV2ZW50cywgdGl0bGVDbGlja0V2ZW50cywge1xuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGlzT3BlblxuICAgICAgfSwgYXJpYU93bnMsIHtcbiAgICAgICAgJ2FyaWEtaGFzcG9wdXAnOiAndHJ1ZScsXG4gICAgICAgIHRpdGxlOiB0eXBlb2YgcHJvcHMudGl0bGUgPT09ICdzdHJpbmcnID8gcHJvcHMudGl0bGUgOiB1bmRlZmluZWRcbiAgICAgIH0pLFxuICAgICAgcHJvcHMudGl0bGUsXG4gICAgICBpY29uIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2knLCB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1hcnJvdycgfSlcbiAgICApO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucmVuZGVyQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgdmFyIGdldFBvcHVwQ29udGFpbmVyID0gcHJvcHMucGFyZW50TWVudS5pc1Jvb3RNZW51ID8gcHJvcHMucGFyZW50TWVudS5wcm9wcy5nZXRQb3B1cENvbnRhaW5lciA6IGZ1bmN0aW9uICh0cmlnZ2VyTm9kZSkge1xuICAgICAgcmV0dXJuIHRyaWdnZXJOb2RlLnBhcmVudE5vZGU7XG4gICAgfTtcbiAgICB2YXIgcG9wdXBQbGFjZW1lbnQgPSBwb3B1cFBsYWNlbWVudE1hcFtwcm9wcy5tb2RlXTtcbiAgICB2YXIgcG9wdXBBbGlnbiA9IHByb3BzLnBvcHVwT2Zmc2V0ID8geyBvZmZzZXQ6IHByb3BzLnBvcHVwT2Zmc2V0IH0gOiB7fTtcbiAgICB2YXIgcG9wdXBDbGFzc05hbWUgPSBwcm9wcy5tb2RlID09PSAnaW5saW5lJyA/ICcnIDogcHJvcHMucG9wdXBDbGFzc05hbWU7XG4gICAgdmFyIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIHRyaWdnZXJTdWJNZW51QWN0aW9uID0gcHJvcHMudHJpZ2dlclN1Yk1lbnVBY3Rpb24sXG4gICAgICAgIHN1Yk1lbnVPcGVuRGVsYXkgPSBwcm9wcy5zdWJNZW51T3BlbkRlbGF5LFxuICAgICAgICBmb3JjZVN1Yk1lbnVSZW5kZXIgPSBwcm9wcy5mb3JjZVN1Yk1lbnVSZW5kZXIsXG4gICAgICAgIHN1Yk1lbnVDbG9zZURlbGF5ID0gcHJvcHMuc3ViTWVudUNsb3NlRGVsYXksXG4gICAgICAgIGJ1aWx0aW5QbGFjZW1lbnRzID0gcHJvcHMuYnVpbHRpblBsYWNlbWVudHM7XG5cbiAgICBtZW51QWxsUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gZGVsZXRlIHByb3BzW2tleV07XG4gICAgfSk7XG4gICAgLy8gU2V0IG9uQ2xpY2sgdG8gbnVsbCwgdG8gaWdub3JlIHByb3BhZ2F0ZWQgb25DbGljayBldmVudFxuICAgIGRlbGV0ZSBwcm9wcy5vbkNsaWNrO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnbGknLFxuICAgICAgX2V4dGVuZHMoe30sIHByb3BzLCBtb3VzZUV2ZW50cywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgcm9sZTogJ21lbnVpdGVtJ1xuICAgICAgfSksXG4gICAgICBpc0lubGluZU1vZGUgJiYgdGl0bGUsXG4gICAgICBpc0lubGluZU1vZGUgJiYgY2hpbGRyZW4sXG4gICAgICAhaXNJbmxpbmVNb2RlICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRyaWdnZXIsXG4gICAgICAgIHtcbiAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICBwb3B1cENsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1wb3B1cCAnICsgcG9wdXBDbGFzc05hbWUsXG4gICAgICAgICAgZ2V0UG9wdXBDb250YWluZXI6IGdldFBvcHVwQ29udGFpbmVyLFxuICAgICAgICAgIGJ1aWx0aW5QbGFjZW1lbnRzOiBfZXh0ZW5kcyh7fSwgcGxhY2VtZW50cywgYnVpbHRpblBsYWNlbWVudHMpLFxuICAgICAgICAgIHBvcHVwUGxhY2VtZW50OiBwb3B1cFBsYWNlbWVudCxcbiAgICAgICAgICBwb3B1cFZpc2libGU6IGlzT3BlbixcbiAgICAgICAgICBwb3B1cEFsaWduOiBwb3B1cEFsaWduLFxuICAgICAgICAgIHBvcHVwOiBjaGlsZHJlbixcbiAgICAgICAgICBhY3Rpb246IGRpc2FibGVkID8gW10gOiBbdHJpZ2dlclN1Yk1lbnVBY3Rpb25dLFxuICAgICAgICAgIG1vdXNlRW50ZXJEZWxheTogc3ViTWVudU9wZW5EZWxheSxcbiAgICAgICAgICBtb3VzZUxlYXZlRGVsYXk6IHN1Yk1lbnVDbG9zZURlbGF5LFxuICAgICAgICAgIG9uUG9wdXBWaXNpYmxlQ2hhbmdlOiB0aGlzLm9uUG9wdXBWaXNpYmxlQ2hhbmdlLFxuICAgICAgICAgIGZvcmNlUmVuZGVyOiBmb3JjZVN1Yk1lbnVSZW5kZXIsXG4gICAgICAgICAgekluZGV4OiBsZXZlbFxuICAgICAgICB9LFxuICAgICAgICB0aXRsZVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFN1Yk1lbnU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN1Yk1lbnUucHJvcFR5cGVzID0ge1xuICBwYXJlbnRNZW51OiBQcm9wVHlwZXMub2JqZWN0LFxuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBzZWxlY3RlZEtleXM6IFByb3BUeXBlcy5hcnJheSxcbiAgb3BlbktleXM6IFByb3BUeXBlcy5hcnJheSxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uT3BlbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHJvb3RQcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV2ZW50S2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsIC8vIFRPRE86IHJlbW92ZVxuICBvbkl0ZW1Ib3ZlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgdHJpZ2dlclN1Yk1lbnVBY3Rpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uRGVzZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbkRlc3Ryb3k6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICBvblRpdGxlTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uVGl0bGVNb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25UaXRsZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgcG9wdXBPZmZzZXQ6IFByb3BUeXBlcy5hcnJheSxcbiAgaXNPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RvcmU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG1vZGU6IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnLCAndmVydGljYWwtbGVmdCcsICd2ZXJ0aWNhbC1yaWdodCcsICdpbmxpbmUnXSksXG4gIG1hbnVhbFJlZjogUHJvcFR5cGVzLmZ1bmMsXG4gIGl0ZW1JY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgZXhwYW5kSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSlcbn07XG5TdWJNZW51LmRlZmF1bHRQcm9wcyA9IHtcbiAgb25Nb3VzZUVudGVyOiBub29wLFxuICBvbk1vdXNlTGVhdmU6IG5vb3AsXG4gIG9uVGl0bGVNb3VzZUVudGVyOiBub29wLFxuICBvblRpdGxlTW91c2VMZWF2ZTogbm9vcCxcbiAgb25UaXRsZUNsaWNrOiBub29wLFxuICBtYW51YWxSZWY6IG5vb3AsXG4gIG1vZGU6ICd2ZXJ0aWNhbCcsXG4gIHRpdGxlOiAnJ1xufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXMzID0gdGhpcztcblxuICB0aGlzLm9uRGVzdHJveSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBfdGhpczMucHJvcHMub25EZXN0cm95KGtleSk7XG4gIH07XG5cbiAgdGhpcy5vbktleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBrZXlDb2RlID0gZS5rZXlDb2RlO1xuICAgIHZhciBtZW51ID0gX3RoaXMzLm1lbnVJbnN0YW5jZTtcbiAgICB2YXIgX3Byb3BzMyA9IF90aGlzMy5wcm9wcyxcbiAgICAgICAgaXNPcGVuID0gX3Byb3BzMy5pc09wZW4sXG4gICAgICAgIHN0b3JlID0gX3Byb3BzMy5zdG9yZTtcblxuXG4gICAgaWYgKGtleUNvZGUgPT09IEtleUNvZGUuRU5URVIpIHtcbiAgICAgIF90aGlzMy5vblRpdGxlQ2xpY2soZSk7XG4gICAgICB1cGRhdGVEZWZhdWx0QWN0aXZlRmlyc3Qoc3RvcmUsIF90aGlzMy5wcm9wcy5ldmVudEtleSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5SSUdIVCkge1xuICAgICAgaWYgKGlzT3Blbikge1xuICAgICAgICBtZW51Lm9uS2V5RG93bihlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzMy50cmlnZ2VyT3BlbkNoYW5nZSh0cnVlKTtcbiAgICAgICAgLy8gbmVlZCB0byB1cGRhdGUgY3VycmVudCBtZW51J3MgZGVmYXVsdEFjdGl2ZUZpcnN0IHZhbHVlXG4gICAgICAgIHVwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdChzdG9yZSwgX3RoaXMzLnByb3BzLmV2ZW50S2V5LCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5MRUZUKSB7XG4gICAgICB2YXIgaGFuZGxlZCA9IHZvaWQgMDtcbiAgICAgIGlmIChpc09wZW4pIHtcbiAgICAgICAgaGFuZGxlZCA9IG1lbnUub25LZXlEb3duKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICghaGFuZGxlZCkge1xuICAgICAgICBfdGhpczMudHJpZ2dlck9wZW5DaGFuZ2UoZmFsc2UpO1xuICAgICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYW5kbGVkO1xuICAgIH1cblxuICAgIGlmIChpc09wZW4gJiYgKGtleUNvZGUgPT09IEtleUNvZGUuVVAgfHwga2V5Q29kZSA9PT0gS2V5Q29kZS5ET1dOKSkge1xuICAgICAgcmV0dXJuIG1lbnUub25LZXlEb3duKGUpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uT3BlbkNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgX3RoaXMzLnByb3BzLm9uT3BlbkNoYW5nZShlKTtcbiAgfTtcblxuICB0aGlzLm9uUG9wdXBWaXNpYmxlQ2hhbmdlID0gZnVuY3Rpb24gKHZpc2libGUpIHtcbiAgICBfdGhpczMudHJpZ2dlck9wZW5DaGFuZ2UodmlzaWJsZSwgdmlzaWJsZSA/ICdtb3VzZWVudGVyJyA6ICdtb3VzZWxlYXZlJyk7XG4gIH07XG5cbiAgdGhpcy5vbk1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBfcHJvcHM0ID0gX3RoaXMzLnByb3BzLFxuICAgICAgICBrZXkgPSBfcHJvcHM0LmV2ZW50S2V5LFxuICAgICAgICBvbk1vdXNlRW50ZXIgPSBfcHJvcHM0Lm9uTW91c2VFbnRlcixcbiAgICAgICAgc3RvcmUgPSBfcHJvcHM0LnN0b3JlO1xuXG4gICAgdXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0KHN0b3JlLCBfdGhpczMucHJvcHMuZXZlbnRLZXksIGZhbHNlKTtcbiAgICBvbk1vdXNlRW50ZXIoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBkb21FdmVudDogZVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMub25Nb3VzZUxlYXZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgX3Byb3BzNSA9IF90aGlzMy5wcm9wcyxcbiAgICAgICAgcGFyZW50TWVudSA9IF9wcm9wczUucGFyZW50TWVudSxcbiAgICAgICAgZXZlbnRLZXkgPSBfcHJvcHM1LmV2ZW50S2V5LFxuICAgICAgICBvbk1vdXNlTGVhdmUgPSBfcHJvcHM1Lm9uTW91c2VMZWF2ZTtcblxuICAgIHBhcmVudE1lbnUuc3ViTWVudUluc3RhbmNlID0gX3RoaXMzO1xuICAgIG9uTW91c2VMZWF2ZSh7XG4gICAgICBrZXk6IGV2ZW50S2V5LFxuICAgICAgZG9tRXZlbnQ6IGVcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLm9uVGl0bGVNb3VzZUVudGVyID0gZnVuY3Rpb24gKGRvbUV2ZW50KSB7XG4gICAgdmFyIF9wcm9wczYgPSBfdGhpczMucHJvcHMsXG4gICAgICAgIGtleSA9IF9wcm9wczYuZXZlbnRLZXksXG4gICAgICAgIG9uSXRlbUhvdmVyID0gX3Byb3BzNi5vbkl0ZW1Ib3ZlcixcbiAgICAgICAgb25UaXRsZU1vdXNlRW50ZXIgPSBfcHJvcHM2Lm9uVGl0bGVNb3VzZUVudGVyO1xuXG4gICAgb25JdGVtSG92ZXIoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBob3ZlcjogdHJ1ZVxuICAgIH0pO1xuICAgIG9uVGl0bGVNb3VzZUVudGVyKHtcbiAgICAgIGtleToga2V5LFxuICAgICAgZG9tRXZlbnQ6IGRvbUV2ZW50XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5vblRpdGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIF9wcm9wczcgPSBfdGhpczMucHJvcHMsXG4gICAgICAgIHBhcmVudE1lbnUgPSBfcHJvcHM3LnBhcmVudE1lbnUsXG4gICAgICAgIGV2ZW50S2V5ID0gX3Byb3BzNy5ldmVudEtleSxcbiAgICAgICAgb25JdGVtSG92ZXIgPSBfcHJvcHM3Lm9uSXRlbUhvdmVyLFxuICAgICAgICBvblRpdGxlTW91c2VMZWF2ZSA9IF9wcm9wczcub25UaXRsZU1vdXNlTGVhdmU7XG5cbiAgICBwYXJlbnRNZW51LnN1Yk1lbnVJbnN0YW5jZSA9IF90aGlzMztcbiAgICBvbkl0ZW1Ib3Zlcih7XG4gICAgICBrZXk6IGV2ZW50S2V5LFxuICAgICAgaG92ZXI6IGZhbHNlXG4gICAgfSk7XG4gICAgb25UaXRsZU1vdXNlTGVhdmUoe1xuICAgICAga2V5OiBldmVudEtleSxcbiAgICAgIGRvbUV2ZW50OiBlXG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5vblRpdGxlQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBwcm9wcyA9IF90aGlzMy5wcm9wcztcblxuICAgIHByb3BzLm9uVGl0bGVDbGljayh7XG4gICAgICBrZXk6IHByb3BzLmV2ZW50S2V5LFxuICAgICAgZG9tRXZlbnQ6IGVcbiAgICB9KTtcbiAgICBpZiAocHJvcHMudHJpZ2dlclN1Yk1lbnVBY3Rpb24gPT09ICdob3ZlcicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3RoaXMzLnRyaWdnZXJPcGVuQ2hhbmdlKCFwcm9wcy5pc09wZW4sICdjbGljaycpO1xuICAgIHVwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdChwcm9wcy5zdG9yZSwgX3RoaXMzLnByb3BzLmV2ZW50S2V5LCBmYWxzZSk7XG4gIH07XG5cbiAgdGhpcy5vblN1Yk1lbnVDbGljayA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgX3RoaXMzLnByb3BzLm9uQ2xpY2soX3RoaXMzLmFkZEtleVBhdGgoaW5mbykpO1xuICB9O1xuXG4gIHRoaXMub25TZWxlY3QgPSBmdW5jdGlvbiAoaW5mbykge1xuICAgIF90aGlzMy5wcm9wcy5vblNlbGVjdChpbmZvKTtcbiAgfTtcblxuICB0aGlzLm9uRGVzZWxlY3QgPSBmdW5jdGlvbiAoaW5mbykge1xuICAgIF90aGlzMy5wcm9wcy5vbkRlc2VsZWN0KGluZm8pO1xuICB9O1xuXG4gIHRoaXMuZ2V0UHJlZml4Q2xzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczMucHJvcHMucm9vdFByZWZpeENscyArICctc3VibWVudSc7XG4gIH07XG5cbiAgdGhpcy5nZXRBY3RpdmVDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMy5nZXRQcmVmaXhDbHMoKSArICctYWN0aXZlJztcbiAgfTtcblxuICB0aGlzLmdldERpc2FibGVkQ2xhc3NOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczMuZ2V0UHJlZml4Q2xzKCkgKyAnLWRpc2FibGVkJztcbiAgfTtcblxuICB0aGlzLmdldFNlbGVjdGVkQ2xhc3NOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczMuZ2V0UHJlZml4Q2xzKCkgKyAnLXNlbGVjdGVkJztcbiAgfTtcblxuICB0aGlzLmdldE9wZW5DbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMy5wcm9wcy5yb290UHJlZml4Q2xzICsgJy1zdWJtZW51LW9wZW4nO1xuICB9O1xuXG4gIHRoaXMuc2F2ZU1lbnVJbnN0YW5jZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgLy8gY2hpbGRyZW4gbWVudSBpbnN0YW5jZVxuICAgIF90aGlzMy5tZW51SW5zdGFuY2UgPSBjO1xuICB9O1xuXG4gIHRoaXMuYWRkS2V5UGF0aCA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBpbmZvLCB7XG4gICAgICBrZXlQYXRoOiAoaW5mby5rZXlQYXRoIHx8IFtdKS5jb25jYXQoX3RoaXMzLnByb3BzLmV2ZW50S2V5KVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMudHJpZ2dlck9wZW5DaGFuZ2UgPSBmdW5jdGlvbiAob3BlbiwgdHlwZSkge1xuICAgIHZhciBrZXkgPSBfdGhpczMucHJvcHMuZXZlbnRLZXk7XG4gICAgdmFyIG9wZW5DaGFuZ2UgPSBmdW5jdGlvbiBvcGVuQ2hhbmdlKCkge1xuICAgICAgX3RoaXMzLm9uT3BlbkNoYW5nZSh7XG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBpdGVtOiBfdGhpczMsXG4gICAgICAgIHRyaWdnZXI6IHR5cGUsXG4gICAgICAgIG9wZW46IG9wZW5cbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKHR5cGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgLy8gbWFrZSBzdXJlIG1vdXNlZW50ZXIgaGFwcGVuIGFmdGVyIG90aGVyIG1lbnUgaXRlbSdzIG1vdXNlbGVhdmVcbiAgICAgIF90aGlzMy5tb3VzZWVudGVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBvcGVuQ2hhbmdlKCk7XG4gICAgICB9LCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3BlbkNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmlzQ2hpbGRyZW5TZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmV0ID0geyBmaW5kOiBmYWxzZSB9O1xuICAgIGxvb3BNZW51SXRlbVJlY3Vyc2l2ZWx5KF90aGlzMy5wcm9wcy5jaGlsZHJlbiwgX3RoaXMzLnByb3BzLnNlbGVjdGVkS2V5cywgcmV0KTtcbiAgICByZXR1cm4gcmV0LmZpbmQ7XG4gIH07XG5cbiAgdGhpcy5pc09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMy5wcm9wcy5vcGVuS2V5cy5pbmRleE9mKF90aGlzMy5wcm9wcy5ldmVudEtleSkgIT09IC0xO1xuICB9O1xuXG4gIHRoaXMuYWRqdXN0V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFfdGhpczMuc3ViTWVudVRpdGxlIHx8ICFfdGhpczMubWVudUluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBwb3B1cE1lbnUgPSBSZWFjdERPTS5maW5kRE9NTm9kZShfdGhpczMubWVudUluc3RhbmNlKTtcbiAgICBpZiAocG9wdXBNZW51Lm9mZnNldFdpZHRoID49IF90aGlzMy5zdWJNZW51VGl0bGUub2Zmc2V0V2lkdGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHBvcHVwTWVudS5zdHlsZS5taW5XaWR0aCA9IF90aGlzMy5zdWJNZW51VGl0bGUub2Zmc2V0V2lkdGggKyAncHgnO1xuICB9O1xuXG4gIHRoaXMuc2F2ZVN1Yk1lbnVUaXRsZSA9IGZ1bmN0aW9uIChzdWJNZW51VGl0bGUpIHtcbiAgICBfdGhpczMuc3ViTWVudVRpdGxlID0gc3ViTWVudVRpdGxlO1xuICB9O1xufTtcblxudmFyIGNvbm5lY3RlZCA9IGNvbm5lY3QoZnVuY3Rpb24gKF9yZWYsIF9yZWYyKSB7XG4gIHZhciBvcGVuS2V5cyA9IF9yZWYub3BlbktleXMsXG4gICAgICBhY3RpdmVLZXkgPSBfcmVmLmFjdGl2ZUtleSxcbiAgICAgIHNlbGVjdGVkS2V5cyA9IF9yZWYuc2VsZWN0ZWRLZXlzO1xuICB2YXIgZXZlbnRLZXkgPSBfcmVmMi5ldmVudEtleSxcbiAgICAgIHN1Yk1lbnVLZXkgPSBfcmVmMi5zdWJNZW51S2V5O1xuICByZXR1cm4ge1xuICAgIGlzT3Blbjogb3BlbktleXMuaW5kZXhPZihldmVudEtleSkgPiAtMSxcbiAgICBhY3RpdmU6IGFjdGl2ZUtleVtzdWJNZW51S2V5XSA9PT0gZXZlbnRLZXksXG4gICAgc2VsZWN0ZWRLZXlzOiBzZWxlY3RlZEtleXNcbiAgfTtcbn0pKFN1Yk1lbnUpO1xuXG5jb25uZWN0ZWQuaXNTdWJNZW51ID0gdHJ1ZTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdGVkOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwnO1xuaW1wb3J0IFN1Yk1lbnUgZnJvbSAnLi9TdWJNZW51JztcbmltcG9ydCB7IGdldFdpZHRoIH0gZnJvbSAnLi91dGlsJztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8vIEZpeCBzc3JcbmlmIChjYW5Vc2VET00pIHtcbiAgcmVxdWlyZSgnbXV0YXRpb25vYnNlcnZlci1zaGltJyk7XG59XG5cbnZhciBET01XcmFwID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERPTVdyYXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERPTVdyYXAoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBET01XcmFwKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxhc3RWaXNpYmxlSW5kZXg6IHVuZGVmaW5lZFxuICAgIH0sIF90aGlzLmdldE92ZXJmbG93ZWRTdWJNZW51SXRlbSA9IGZ1bmN0aW9uIChrZXlQcmVmaXgsIG92ZXJmbG93ZWRJdGVtcywgcmVuZGVyUGxhY2Vob2xkZXIpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG92ZXJmbG93ZWRJbmRpY2F0b3IgPSBfdGhpcyRwcm9wcy5vdmVyZmxvd2VkSW5kaWNhdG9yLFxuICAgICAgICAgIGxldmVsID0gX3RoaXMkcHJvcHMubGV2ZWwsXG4gICAgICAgICAgbW9kZSA9IF90aGlzJHByb3BzLm1vZGUsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMudGhlbWUsXG4gICAgICAgICAgcHJvcFN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGU7XG5cbiAgICAgIGlmIChsZXZlbCAhPT0gMSB8fCBtb2RlICE9PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICAvLyBwdXQgYWxsIHRoZSBvdmVyZmxvd2VkIGl0ZW0gaW5zaWRlIGEgc3VibWVudVxuICAgICAgLy8gd2l0aCBhIHRpdGxlIG9mIG92ZXJmbG93IGluZGljYXRvciAoJy4uLicpXG4gICAgICB2YXIgY29weSA9IF90aGlzLnByb3BzLmNoaWxkcmVuWzBdO1xuXG4gICAgICB2YXIgX2NvcHkkcHJvcHMgPSBjb3B5LnByb3BzLFxuICAgICAgICAgIHRocm93QXdheSA9IF9jb3B5JHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHRpdGxlID0gX2NvcHkkcHJvcHMudGl0bGUsXG4gICAgICAgICAgZXZlbnRLZXkgPSBfY29weSRwcm9wcy5ldmVudEtleSxcbiAgICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9jb3B5JHByb3BzLCBbJ2NoaWxkcmVuJywgJ3RpdGxlJywgJ2V2ZW50S2V5J10pO1xuXG4gICAgICB2YXIgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgcHJvcFN0eWxlKTtcbiAgICAgIHZhciBrZXkgPSBrZXlQcmVmaXggKyAnLW92ZXJmbG93ZWQtaW5kaWNhdG9yJztcblxuICAgICAgaWYgKG92ZXJmbG93ZWRJdGVtcy5sZW5ndGggPT09IDAgJiYgcmVuZGVyUGxhY2Vob2xkZXIgIT09IHRydWUpIHtcbiAgICAgICAgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIHtcbiAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHJlbmRlclBsYWNlaG9sZGVyKSB7XG4gICAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCB7XG4gICAgICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICAgICAgLy8gcHJldmVudCBmcm9tIHRha2luZyBub3JtYWwgZG9tIHNwYWNlXG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgICAgfSk7XG4gICAgICAgIGtleSA9IGtleSArICctcGxhY2Vob2xkZXInO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9wdXBDbGFzc05hbWUgPSB0aGVtZSA/IHByZWZpeENscyArICctJyArIHRoZW1lIDogJyc7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBTdWJNZW51LFxuICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgdGl0bGU6IG92ZXJmbG93ZWRJbmRpY2F0b3IsXG4gICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLW92ZXJmbG93ZWQtc3VibWVudScsXG4gICAgICAgICAgcG9wdXBDbGFzc05hbWU6IHBvcHVwQ2xhc3NOYW1lXG4gICAgICAgIH0sIHJlc3QsIHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBldmVudEtleToga2V5UHJlZml4ICsgJy1vdmVyZmxvd2VkLWluZGljYXRvcicsXG4gICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICB9KSxcbiAgICAgICAgb3ZlcmZsb3dlZEl0ZW1zXG4gICAgICApO1xuICAgIH0sIF90aGlzLnNldENoaWxkcmVuV2lkdGhBbmRSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubW9kZSAhPT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB1bCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF90aGlzKTtcblxuICAgICAgaWYgKCF1bCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB1bENoaWxkcmVuTm9kZXMgPSB1bC5jaGlsZHJlbjtcblxuICAgICAgaWYgKCF1bENoaWxkcmVuTm9kZXMgfHwgdWxDaGlsZHJlbk5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNoaWxkcmVuU2l6ZXMgPSBbXTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IF90aGlzLnByb3BzLmNoaWxkcmVuO1xuXG5cbiAgICAgIHZhciBsYXN0T3ZlcmZsb3dlZEluZGljYXRvclBsYWNlaG9sZGVyID0gdWwuY2hpbGRyZW5bdWxDaGlsZHJlbk5vZGVzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAvLyBuZWVkIGxhc3Qgb3ZlcmZsb3dlZCBpbmRpY2F0b3IgZm9yIGNhbGN1bGF0aW5nIGxlbmd0aDtcbiAgICAgIGxhc3RPdmVyZmxvd2VkSW5kaWNhdG9yUGxhY2Vob2xkZXIuc3R5bGUud2lkdGggPSAnYXV0byc7XG4gICAgICBfdGhpcy5jaGlsZHJlblNpemVzID0gY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjLCBpKSB7XG4gICAgICAgIHJldHVybiBnZXRXaWR0aCh1bC5jaGlsZHJlblsyICogaSArIDFdKTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5vdmVyZmxvd2VkSW5kaWNhdG9yV2lkdGggPSBnZXRXaWR0aCh1bC5jaGlsZHJlblt1bC5jaGlsZHJlbi5sZW5ndGggLSAxXSk7XG4gICAgICBfdGhpcy5vcmlnaW5hbFRvdGFsV2lkdGggPSBfdGhpcy5jaGlsZHJlblNpemVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXIpIHtcbiAgICAgICAgcmV0dXJuIGFjYyArIGN1cjtcbiAgICAgIH0sIDApO1xuICAgICAgX3RoaXMuaGFuZGxlUmVzaXplKCk7XG5cbiAgICAgIC8vIHByZXZlbnQgdGhlIG92ZXJmbG93ZWQgaW5kaWNhdG9yIGZyb20gdGFraW5nIHNwYWNlO1xuICAgICAgbGFzdE92ZXJmbG93ZWRJbmRpY2F0b3JQbGFjZWhvbGRlci5zdHlsZS53aWR0aCA9IDA7XG4gICAgfSwgX3RoaXMucmVzaXplT2JzZXJ2ZXIgPSBudWxsLCBfdGhpcy5tdXRhdGlvbk9ic2VydmVyID0gbnVsbCwgX3RoaXMub3JpZ2luYWxUb3RhbFdpZHRoID0gMCwgX3RoaXMub3ZlcmZsb3dlZEl0ZW1zID0gW10sIF90aGlzLmNoaWxkcmVuU2l6ZXMgPSBbXSwgX3RoaXMuaGFuZGxlUmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm1vZGUgIT09ICdob3Jpem9udGFsJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB1bCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF90aGlzKTtcbiAgICAgIGlmICghdWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHdpZHRoID0gZ2V0V2lkdGgodWwpO1xuXG4gICAgICBfdGhpcy5vdmVyZmxvd2VkSXRlbXMgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50U3VtV2lkdGggPSAwO1xuXG4gICAgICAvLyBpbmRleCBmb3IgbGFzdCB2aXNpYmxlIGNoaWxkIGluIGhvcml6b250YWwgbW9kZVxuICAgICAgdmFyIGxhc3RWaXNpYmxlSW5kZXggPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChfdGhpcy5vcmlnaW5hbFRvdGFsV2lkdGggPiB3aWR0aCkge1xuICAgICAgICBsYXN0VmlzaWJsZUluZGV4ID0gLTE7XG5cbiAgICAgICAgX3RoaXMuY2hpbGRyZW5TaXplcy5mb3JFYWNoKGZ1bmN0aW9uIChsaVdpZHRoKSB7XG4gICAgICAgICAgY3VycmVudFN1bVdpZHRoICs9IGxpV2lkdGg7XG4gICAgICAgICAgaWYgKGN1cnJlbnRTdW1XaWR0aCArIF90aGlzLm92ZXJmbG93ZWRJbmRpY2F0b3JXaWR0aCA8PSB3aWR0aCkge1xuICAgICAgICAgICAgbGFzdFZpc2libGVJbmRleCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHsgbGFzdFZpc2libGVJbmRleDogbGFzdFZpc2libGVJbmRleCB9KTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIERPTVdyYXAucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB0aGlzLnNldENoaWxkcmVuV2lkdGhBbmRSZXNpemUoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5sZXZlbCA9PT0gMSAmJiB0aGlzLnByb3BzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgdmFyIG1lbnVVbCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgaWYgKCFtZW51VWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goX3RoaXMyLnNldENoaWxkcmVuV2lkdGhBbmRSZXNpemUpO1xuICAgICAgfSk7XG5cbiAgICAgIFtdLnNsaWNlLmNhbGwobWVudVVsLmNoaWxkcmVuKS5jb25jYXQobWVudVVsKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBfdGhpczIucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShlbCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICBbXS5zbGljZS5jYWxsKG1lbnVVbC5jaGlsZHJlbikuY29uY2F0KG1lbnVVbCkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIF90aGlzMi5yZXNpemVPYnNlcnZlci5vYnNlcnZlKGVsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBfdGhpczIuc2V0Q2hpbGRyZW5XaWR0aEFuZFJlc2l6ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLm9ic2VydmUobWVudVVsLCB7IGF0dHJpYnV0ZXM6IGZhbHNlLCBjaGlsZExpc3Q6IHRydWUsIHN1YlRyZWU6IGZhbHNlIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBET01XcmFwLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIG1lbW9yaXplIHJlbmRlcmVkIG1lbnVTaXplXG5cblxuICAvLyBvcmlnaW5hbCBzY3JvbGwgc2l6ZSBvZiB0aGUgbGlzdFxuXG5cbiAgLy8gY29weSBvZiBvdmVyZmxvd2VkIGl0ZW1zXG5cblxuICAvLyBjYWNoZSBpdGVtIG9mIHRoZSBvcmlnaW5hbCBpdGVtcyAoc28gd2UgY2FuIHRyYWNrIHRoZSBzaXplIGFuZCBvcmRlcilcblxuXG4gIERPTVdyYXAucHJvdG90eXBlLnJlbmRlckNoaWxkcmVuID0gZnVuY3Rpb24gcmVuZGVyQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIC8vIG5lZWQgdG8gdGFrZSBjYXJlIG9mIG92ZXJmbG93ZWQgaXRlbXMgaW4gaG9yaXpvbnRhbCBtb2RlXG4gICAgdmFyIGxhc3RWaXNpYmxlSW5kZXggPSB0aGlzLnN0YXRlLmxhc3RWaXNpYmxlSW5kZXg7XG5cbiAgICByZXR1cm4gKGNoaWxkcmVuIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY2hpbGROb2RlLCBpbmRleCkge1xuICAgICAgdmFyIGl0ZW0gPSBjaGlsZE5vZGU7XG4gICAgICBpZiAoX3RoaXMzLnByb3BzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICB2YXIgb3ZlcmZsb3dlZCA9IF90aGlzMy5nZXRPdmVyZmxvd2VkU3ViTWVudUl0ZW0oY2hpbGROb2RlLnByb3BzLmV2ZW50S2V5LCBbXSk7XG4gICAgICAgIGlmIChsYXN0VmlzaWJsZUluZGV4ICE9PSB1bmRlZmluZWQgJiYgX3RoaXMzLnByb3BzLmNsYXNzTmFtZS5pbmRleE9mKF90aGlzMy5wcm9wcy5wcmVmaXhDbHMgKyAnLXJvb3QnKSAhPT0gLTEpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPiBsYXN0VmlzaWJsZUluZGV4KSB7XG4gICAgICAgICAgICBpdGVtID0gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkTm9kZSxcbiAgICAgICAgICAgIC8vIOi/memHjOS/ruaUuSBldmVudEtleSDmmK/kuLrkuobpmLLmraLpmpDol4/nirbmgIHkuIvov5jkvJrop6blj5Egb3BlbmtleXMg5LqL5Lu2XG4gICAgICAgICAgICB7IHN0eWxlOiB7IHZpc2liaWxpdHk6ICdoaWRkZW4nIH0sIGV2ZW50S2V5OiBjaGlsZE5vZGUucHJvcHMuZXZlbnRLZXkgKyAnLWhpZGRlbicgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbmRleCA9PT0gbGFzdFZpc2libGVJbmRleCArIDEpIHtcbiAgICAgICAgICAgIF90aGlzMy5vdmVyZmxvd2VkSXRlbXMgPSBjaGlsZHJlbi5zbGljZShsYXN0VmlzaWJsZUluZGV4ICsgMSkubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoYyxcbiAgICAgICAgICAgICAgLy8gY2hpbGRyZW5baW5kZXhdLmtleSB3aWxsIGJlY29tZSAnLiRrZXknIGluIGNsb25lIGJ5IGRlZmF1bHQsXG4gICAgICAgICAgICAgIC8vIHdlIGhhdmUgdG8gb3ZlcndyaXRlIHdpdGggdGhlIGNvcnJlY3Qga2V5IGV4cGxpY2l0bHlcbiAgICAgICAgICAgICAgeyBrZXk6IGMucHJvcHMuZXZlbnRLZXksIG1vZGU6ICd2ZXJ0aWNhbC1sZWZ0JyB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBvdmVyZmxvd2VkID0gX3RoaXMzLmdldE92ZXJmbG93ZWRTdWJNZW51SXRlbShjaGlsZE5vZGUucHJvcHMuZXZlbnRLZXksIF90aGlzMy5vdmVyZmxvd2VkSXRlbXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXQgPSBbXS5jb25jYXQoYWNjLCBbb3ZlcmZsb3dlZCwgaXRlbV0pO1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIC8vIG5lZWQgYSBwbGFjZWhvbGRlciBmb3IgY2FsY3VsYXRpbmcgb3ZlcmZsb3dlZCBpbmRpY2F0b3Igd2lkdGhcbiAgICAgICAgICByZXQucHVzaChfdGhpczMuZ2V0T3ZlcmZsb3dlZFN1Yk1lbnVJdGVtKGNoaWxkTm9kZS5wcm9wcy5ldmVudEtleSwgW10sIHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtdLmNvbmNhdChhY2MsIFtpdGVtXSk7XG4gICAgfSwgW10pO1xuICB9O1xuXG4gIERPTVdyYXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaGlkZGVuQ2xhc3NOYW1lID0gX3Byb3BzLmhpZGRlbkNsYXNzTmFtZSxcbiAgICAgICAgdmlzaWJsZSA9IF9wcm9wcy52aXNpYmxlLFxuICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBvdmVyZmxvd2VkSW5kaWNhdG9yID0gX3Byb3BzLm92ZXJmbG93ZWRJbmRpY2F0b3IsXG4gICAgICAgIG1vZGUgPSBfcHJvcHMubW9kZSxcbiAgICAgICAgbGV2ZWwgPSBfcHJvcHMubGV2ZWwsXG4gICAgICAgIFRhZyA9IF9wcm9wcy50YWcsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICB0aGVtZSA9IF9wcm9wcy50aGVtZSxcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaGlkZGVuQ2xhc3NOYW1lJywgJ3Zpc2libGUnLCAncHJlZml4Q2xzJywgJ292ZXJmbG93ZWRJbmRpY2F0b3InLCAnbW9kZScsICdsZXZlbCcsICd0YWcnLCAnY2hpbGRyZW4nLCAndGhlbWUnXSk7XG5cbiAgICBpZiAoIXZpc2libGUpIHtcbiAgICAgIHJlc3QuY2xhc3NOYW1lICs9ICcgJyArIGhpZGRlbkNsYXNzTmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFRhZyxcbiAgICAgIHJlc3QsXG4gICAgICB0aGlzLnJlbmRlckNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gRE9NV3JhcDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRE9NV3JhcC5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBtb2RlOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ3ZlcnRpY2FsLWxlZnQnLCAndmVydGljYWwtcmlnaHQnLCAnaW5saW5lJ10pLFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGxldmVsOiBQcm9wVHlwZXMubnVtYmVyLFxuICB0aGVtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb3ZlcmZsb3dlZEluZGljYXRvcjogUHJvcFR5cGVzLm5vZGUsXG4gIHZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICBoaWRkZW5DbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRhZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbkRPTVdyYXAuZGVmYXVsdFByb3BzID0ge1xuICB0YWc6ICdkaXYnLFxuICBjbGFzc05hbWU6ICcnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBET01XcmFwOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAnbWluaS1zdG9yZSc7XG5pbXBvcnQgS2V5Q29kZSBmcm9tICdyYy11dGlsL2VzL0tleUNvZGUnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICdyYy11dGlsL2VzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IGdldEtleUZyb21DaGlsZHJlbkluZGV4LCBsb29wTWVudUl0ZW0sIG5vb3AsIG1lbnVBbGxQcm9wcyB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgRE9NV3JhcCBmcm9tICcuL0RPTVdyYXAnO1xuXG5mdW5jdGlvbiBhbGxEaXNhYmxlZChhcnIpIHtcbiAgaWYgKCFhcnIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGFyci5ldmVyeShmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAhIWMucHJvcHMuZGlzYWJsZWQ7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVBY3RpdmVLZXkoc3RvcmUsIG1lbnVJZCwgYWN0aXZlS2V5KSB7XG4gIHZhciBfZXh0ZW5kczI7XG5cbiAgdmFyIHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgc3RvcmUuc2V0U3RhdGUoe1xuICAgIGFjdGl2ZUtleTogX2V4dGVuZHMoe30sIHN0YXRlLmFjdGl2ZUtleSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbbWVudUlkXSA9IGFjdGl2ZUtleSwgX2V4dGVuZHMyKSlcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50S2V5KHByb3BzKSB7XG4gIC8vIHdoZW4gZXZlbnRLZXkgbm90IGF2YWlsYWJsZSAsaXQncyBtZW51IGFuZCByZXR1cm4gbWVudSBpZCAnMC1tZW51LSdcbiAgcmV0dXJuIHByb3BzLmV2ZW50S2V5IHx8ICcwLW1lbnUtJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZUtleShwcm9wcywgb3JpZ2luYWxBY3RpdmVLZXkpIHtcbiAgdmFyIGFjdGl2ZUtleSA9IG9yaWdpbmFsQWN0aXZlS2V5O1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGV2ZW50S2V5ID0gcHJvcHMuZXZlbnRLZXk7XG5cbiAgaWYgKGFjdGl2ZUtleSkge1xuICAgIHZhciBmb3VuZCA9IHZvaWQgMDtcbiAgICBsb29wTWVudUl0ZW0oY2hpbGRyZW4sIGZ1bmN0aW9uIChjLCBpKSB7XG4gICAgICBpZiAoYyAmJiAhYy5wcm9wcy5kaXNhYmxlZCAmJiBhY3RpdmVLZXkgPT09IGdldEtleUZyb21DaGlsZHJlbkluZGV4KGMsIGV2ZW50S2V5LCBpKSkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICByZXR1cm4gYWN0aXZlS2V5O1xuICAgIH1cbiAgfVxuICBhY3RpdmVLZXkgPSBudWxsO1xuICBpZiAocHJvcHMuZGVmYXVsdEFjdGl2ZUZpcnN0KSB7XG4gICAgbG9vcE1lbnVJdGVtKGNoaWxkcmVuLCBmdW5jdGlvbiAoYywgaSkge1xuICAgICAgaWYgKCFhY3RpdmVLZXkgJiYgYyAmJiAhYy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICBhY3RpdmVLZXkgPSBnZXRLZXlGcm9tQ2hpbGRyZW5JbmRleChjLCBldmVudEtleSwgaSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjdGl2ZUtleTtcbiAgfVxuICByZXR1cm4gYWN0aXZlS2V5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVJlZihjKSB7XG4gIGlmIChjKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbnN0YW5jZUFycmF5LmluZGV4T2YoYyk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgLy8gdXBkYXRlIGNvbXBvbmVudCBpZiBpdCdzIGFscmVhZHkgaW5zaWRlIGluc3RhbmNlQXJyYXlcbiAgICAgIHRoaXMuaW5zdGFuY2VBcnJheVtpbmRleF0gPSBjO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhZGQgY29tcG9uZW50IGlmIGl0J3Mgbm90IGluIGluc3RhbmNlQXJyYXkgeWV0O1xuICAgICAgdGhpcy5pbnN0YW5jZUFycmF5LnB1c2goYyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB2YXIgU3ViUG9wdXBNZW51ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN1YlBvcHVwTWVudSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3ViUG9wdXBNZW51KHByb3BzKSB7XG4gICAgdmFyIF9leHRlbmRzMztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJQb3B1cE1lbnUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpO1xuXG4gICAgcHJvcHMuc3RvcmUuc2V0U3RhdGUoe1xuICAgICAgYWN0aXZlS2V5OiBfZXh0ZW5kcyh7fSwgcHJvcHMuc3RvcmUuZ2V0U3RhdGUoKS5hY3RpdmVLZXksIChfZXh0ZW5kczMgPSB7fSwgX2V4dGVuZHMzW3Byb3BzLmV2ZW50S2V5XSA9IGdldEFjdGl2ZUtleShwcm9wcywgcHJvcHMuYWN0aXZlS2V5KSwgX2V4dGVuZHMzKSlcbiAgICB9KTtcblxuICAgIF90aGlzLmluc3RhbmNlQXJyYXkgPSBbXTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBTdWJQb3B1cE1lbnUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gaW52b2tlIGN1c3RvbWl6ZWQgcmVmIHRvIGV4cG9zZSBjb21wb25lbnQgdG8gbWl4aW5cbiAgICBpZiAodGhpcy5wcm9wcy5tYW51YWxSZWYpIHtcbiAgICAgIHRoaXMucHJvcHMubWFudWFsUmVmKHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICBTdWJQb3B1cE1lbnUucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy52aXNpYmxlIHx8IG5leHRQcm9wcy52aXNpYmxlO1xuICB9O1xuXG4gIFN1YlBvcHVwTWVudS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIG9yaWdpbmFsQWN0aXZlS2V5ID0gJ2FjdGl2ZUtleScgaW4gcHJvcHMgPyBwcm9wcy5hY3RpdmVLZXkgOiBwcm9wcy5zdG9yZS5nZXRTdGF0ZSgpLmFjdGl2ZUtleVtnZXRFdmVudEtleShwcm9wcyldO1xuICAgIHZhciBhY3RpdmVLZXkgPSBnZXRBY3RpdmVLZXkocHJvcHMsIG9yaWdpbmFsQWN0aXZlS2V5KTtcbiAgICBpZiAoYWN0aXZlS2V5ICE9PSBvcmlnaW5hbEFjdGl2ZUtleSkge1xuICAgICAgdXBkYXRlQWN0aXZlS2V5KHByb3BzLnN0b3JlLCBnZXRFdmVudEtleShwcm9wcyksIGFjdGl2ZUtleSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGFsbCBrZXlib2FyZCBldmVudHMgY2FsbGJhY2tzIHJ1biBmcm9tIGhlcmUgYXQgZmlyc3RcblxuXG4gIFN1YlBvcHVwTWVudS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHRoaXMucHJvcHMsIFtdKTtcblxuICAgIHRoaXMuaW5zdGFuY2VBcnJheSA9IFtdO1xuICAgIHZhciBjbGFzc05hbWUgPSBjbGFzc05hbWVzKHByb3BzLnByZWZpeENscywgcHJvcHMuY2xhc3NOYW1lLCBwcm9wcy5wcmVmaXhDbHMgKyAnLScgKyBwcm9wcy5tb2RlKTtcbiAgICB2YXIgZG9tUHJvcHMgPSB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIC8vIHJvbGUgY291bGQgYmUgJ3NlbGVjdCcgYW5kIGJ5IGRlZmF1bHQgc2V0IHRvIG1lbnVcbiAgICAgIHJvbGU6IHByb3BzLnJvbGUgfHwgJ21lbnUnXG4gICAgfTtcbiAgICBpZiAocHJvcHMuaWQpIHtcbiAgICAgIGRvbVByb3BzLmlkID0gcHJvcHMuaWQ7XG4gICAgfVxuICAgIGlmIChwcm9wcy5mb2N1c2FibGUpIHtcbiAgICAgIGRvbVByb3BzLnRhYkluZGV4ID0gJzAnO1xuICAgICAgZG9tUHJvcHMub25LZXlEb3duID0gdGhpcy5vbktleURvd247XG4gICAgfVxuICAgIHZhciBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgIGV2ZW50S2V5ID0gcHJvcHMuZXZlbnRLZXksXG4gICAgICAgIHZpc2libGUgPSBwcm9wcy52aXNpYmxlLFxuICAgICAgICBsZXZlbCA9IHByb3BzLmxldmVsLFxuICAgICAgICBtb2RlID0gcHJvcHMubW9kZSxcbiAgICAgICAgb3ZlcmZsb3dlZEluZGljYXRvciA9IHByb3BzLm92ZXJmbG93ZWRJbmRpY2F0b3IsXG4gICAgICAgIHRoZW1lID0gcHJvcHMudGhlbWU7XG5cbiAgICBtZW51QWxsUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gZGVsZXRlIHByb3BzW2tleV07XG4gICAgfSk7XG5cbiAgICAvLyBPdGhlcndpc2UsIHRoZSBwcm9wYWdhdGVkIGNsaWNrIGV2ZW50IHdpbGwgdHJpZ2dlciBhbm90aGVyIG9uQ2xpY2tcbiAgICBkZWxldGUgcHJvcHMub25DbGljaztcblxuICAgIHJldHVybiAoXG4gICAgICAvLyBFU0xpbnQgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBrbm93IHRoYXQgdGhlIHR5cGUgb2YgYGNoaWxkcmVuYCB3YXMgY2hlY2tlZC5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBET01XcmFwLFxuICAgICAgICBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICBtb2RlOiBtb2RlLFxuICAgICAgICAgIHRhZzogJ3VsJyxcbiAgICAgICAgICBsZXZlbDogbGV2ZWwsXG4gICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgIGhpZGRlbkNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1oaWRkZW4nLFxuICAgICAgICAgIHZpc2libGU6IHZpc2libGUsXG4gICAgICAgICAgb3ZlcmZsb3dlZEluZGljYXRvcjogb3ZlcmZsb3dlZEluZGljYXRvclxuICAgICAgICB9LCBkb21Qcm9wcyksXG4gICAgICAgIFJlYWN0LkNoaWxkcmVuLm1hcChwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLnJlbmRlck1lbnVJdGVtKGMsIGksIGV2ZW50S2V5IHx8ICcwLW1lbnUtJyk7XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAvKmVzbGludC1lbmFibGUgKi9cblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFN1YlBvcHVwTWVudTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblN1YlBvcHVwTWVudS5wcm9wVHlwZXMgPSB7XG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRGVzZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbk9wZW5DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvbkRlc3Ryb3k6IFByb3BUeXBlcy5mdW5jLFxuICBvcGVuVHJhbnNpdGlvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9wZW5BbmltYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgb3BlbktleXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIHBhcmVudE1lbnU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGV2ZW50S2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jXG4gIH0pLFxuXG4gIC8vIGFkZGluZyBpbiByZWZhY3RvclxuICBmb2N1c2FibGU6IFByb3BUeXBlcy5ib29sLFxuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBkZWZhdWx0QWN0aXZlRmlyc3Q6IFByb3BUeXBlcy5ib29sLFxuICBhY3RpdmVLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNlbGVjdGVkS2V5czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIGRlZmF1bHRTZWxlY3RlZEtleXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICBkZWZhdWx0T3BlbktleXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICBsZXZlbDogUHJvcFR5cGVzLm51bWJlcixcbiAgbW9kZTogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCcsICd2ZXJ0aWNhbC1sZWZ0JywgJ3ZlcnRpY2FsLXJpZ2h0JywgJ2lubGluZSddKSxcbiAgdHJpZ2dlclN1Yk1lbnVBY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ2NsaWNrJywgJ2hvdmVyJ10pLFxuICBpbmxpbmVJbmRlbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgbWFudWFsUmVmOiBQcm9wVHlwZXMuZnVuYyxcbiAgaXRlbUljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBleHBhbmRJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKVxufTtcblN1YlBvcHVwTWVudS5kZWZhdWx0UHJvcHMgPSB7XG4gIHByZWZpeENsczogJ3JjLW1lbnUnLFxuICBjbGFzc05hbWU6ICcnLFxuICBtb2RlOiAndmVydGljYWwnLFxuICBsZXZlbDogMSxcbiAgaW5saW5lSW5kZW50OiAyNCxcbiAgdmlzaWJsZTogdHJ1ZSxcbiAgZm9jdXNhYmxlOiB0cnVlLFxuICBzdHlsZToge30sXG4gIG1hbnVhbFJlZjogbm9vcFxufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXMzID0gdGhpcztcblxuICB0aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChlLCBjYWxsYmFjaykge1xuICAgIHZhciBrZXlDb2RlID0gZS5rZXlDb2RlO1xuICAgIHZhciBoYW5kbGVkID0gdm9pZCAwO1xuICAgIF90aGlzMy5nZXRGbGF0SW5zdGFuY2VBcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgaWYgKG9iaiAmJiBvYmoucHJvcHMuYWN0aXZlICYmIG9iai5vbktleURvd24pIHtcbiAgICAgICAgaGFuZGxlZCA9IG9iai5vbktleURvd24oZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGhhbmRsZWQpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICB2YXIgYWN0aXZlSXRlbSA9IG51bGw7XG4gICAgaWYgKGtleUNvZGUgPT09IEtleUNvZGUuVVAgfHwga2V5Q29kZSA9PT0gS2V5Q29kZS5ET1dOKSB7XG4gICAgICBhY3RpdmVJdGVtID0gX3RoaXMzLnN0ZXAoa2V5Q29kZSA9PT0gS2V5Q29kZS5VUCA/IC0xIDogMSk7XG4gICAgfVxuICAgIGlmIChhY3RpdmVJdGVtKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB1cGRhdGVBY3RpdmVLZXkoX3RoaXMzLnByb3BzLnN0b3JlLCBnZXRFdmVudEtleShfdGhpczMucHJvcHMpLCBhY3RpdmVJdGVtLnByb3BzLmV2ZW50S2V5KTtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayhhY3RpdmVJdGVtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25JdGVtSG92ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBrZXkgPSBlLmtleSxcbiAgICAgICAgaG92ZXIgPSBlLmhvdmVyO1xuXG4gICAgdXBkYXRlQWN0aXZlS2V5KF90aGlzMy5wcm9wcy5zdG9yZSwgZ2V0RXZlbnRLZXkoX3RoaXMzLnByb3BzKSwgaG92ZXIgPyBrZXkgOiBudWxsKTtcbiAgfTtcblxuICB0aGlzLm9uRGVzZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0SW5mbykge1xuICAgIF90aGlzMy5wcm9wcy5vbkRlc2VsZWN0KHNlbGVjdEluZm8pO1xuICB9O1xuXG4gIHRoaXMub25TZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0SW5mbykge1xuICAgIF90aGlzMy5wcm9wcy5vblNlbGVjdChzZWxlY3RJbmZvKTtcbiAgfTtcblxuICB0aGlzLm9uQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzMy5wcm9wcy5vbkNsaWNrKGUpO1xuICB9O1xuXG4gIHRoaXMub25PcGVuQ2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBfdGhpczMucHJvcHMub25PcGVuQ2hhbmdlKGUpO1xuICB9O1xuXG4gIHRoaXMub25EZXN0cm95ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgX3RoaXMzLnByb3BzLm9uRGVzdHJveShrZXkpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RmxhdEluc3RhbmNlQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMy5pbnN0YW5jZUFycmF5O1xuICB9O1xuXG4gIHRoaXMuZ2V0T3BlblRyYW5zaXRpb25OYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczMucHJvcHMub3BlblRyYW5zaXRpb25OYW1lO1xuICB9O1xuXG4gIHRoaXMuc3RlcCA9IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBfdGhpczMuZ2V0RmxhdEluc3RhbmNlQXJyYXkoKTtcbiAgICB2YXIgYWN0aXZlS2V5ID0gX3RoaXMzLnByb3BzLnN0b3JlLmdldFN0YXRlKCkuYWN0aXZlS2V5W2dldEV2ZW50S2V5KF90aGlzMy5wcm9wcyldO1xuICAgIHZhciBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgaWYgKCFsZW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZGlyZWN0aW9uIDwgMCkge1xuICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoKS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIC8vIGZpbmQgY3VycmVudCBhY3RpdmVJbmRleFxuICAgIHZhciBhY3RpdmVJbmRleCA9IC0xO1xuICAgIGNoaWxkcmVuLmV2ZXJ5KGZ1bmN0aW9uIChjLCBjaSkge1xuICAgICAgaWYgKGMgJiYgYy5wcm9wcy5ldmVudEtleSA9PT0gYWN0aXZlS2V5KSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gY2k7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIGlmICghX3RoaXMzLnByb3BzLmRlZmF1bHRBY3RpdmVGaXJzdCAmJiBhY3RpdmVJbmRleCAhPT0gLTEgJiYgYWxsRGlzYWJsZWQoY2hpbGRyZW4uc2xpY2UoYWN0aXZlSW5kZXgsIGxlbiAtIDEpKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdmFyIHN0YXJ0ID0gKGFjdGl2ZUluZGV4ICsgMSkgJSBsZW47XG4gICAgdmFyIGkgPSBzdGFydDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKCFjaGlsZCB8fCBjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICBpID0gKGkgKyAxKSAlIGxlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChpICE9PSBzdGFydCk7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLnJlbmRlckNvbW1vbk1lbnVJdGVtID0gZnVuY3Rpb24gKGNoaWxkLCBpLCBleHRyYVByb3BzKSB7XG4gICAgdmFyIHN0YXRlID0gX3RoaXMzLnByb3BzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdmFyIHByb3BzID0gX3RoaXMzLnByb3BzO1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tQ2hpbGRyZW5JbmRleChjaGlsZCwgcHJvcHMuZXZlbnRLZXksIGkpO1xuICAgIHZhciBjaGlsZFByb3BzID0gY2hpbGQucHJvcHM7XG4gICAgdmFyIGlzQWN0aXZlID0ga2V5ID09PSBzdGF0ZS5hY3RpdmVLZXk7XG4gICAgdmFyIG5ld0NoaWxkUHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBtb2RlOiBjaGlsZFByb3BzLm1vZGUgfHwgcHJvcHMubW9kZSxcbiAgICAgIGxldmVsOiBwcm9wcy5sZXZlbCxcbiAgICAgIGlubGluZUluZGVudDogcHJvcHMuaW5saW5lSW5kZW50LFxuICAgICAgcmVuZGVyTWVudUl0ZW06IF90aGlzMy5yZW5kZXJNZW51SXRlbSxcbiAgICAgIHJvb3RQcmVmaXhDbHM6IHByb3BzLnByZWZpeENscyxcbiAgICAgIGluZGV4OiBpLFxuICAgICAgcGFyZW50TWVudTogcHJvcHMucGFyZW50TWVudSxcbiAgICAgIC8vIGN1c3RvbWl6ZWQgcmVmIGZ1bmN0aW9uLCBuZWVkIHRvIGJlIGludm9rZWQgbWFudWFsbHkgaW4gY2hpbGQncyBjb21wb25lbnREaWRNb3VudFxuICAgICAgbWFudWFsUmVmOiBjaGlsZFByb3BzLmRpc2FibGVkID8gdW5kZWZpbmVkIDogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNoaWxkLnJlZiwgc2F2ZVJlZi5iaW5kKF90aGlzMykpLFxuICAgICAgZXZlbnRLZXk6IGtleSxcbiAgICAgIGFjdGl2ZTogIWNoaWxkUHJvcHMuZGlzYWJsZWQgJiYgaXNBY3RpdmUsXG4gICAgICBtdWx0aXBsZTogcHJvcHMubXVsdGlwbGUsXG4gICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgKGNoaWxkUHJvcHMub25DbGljayB8fCBub29wKShlKTtcbiAgICAgICAgX3RoaXMzLm9uQ2xpY2soZSk7XG4gICAgICB9LFxuICAgICAgb25JdGVtSG92ZXI6IF90aGlzMy5vbkl0ZW1Ib3ZlcixcbiAgICAgIG9wZW5UcmFuc2l0aW9uTmFtZTogX3RoaXMzLmdldE9wZW5UcmFuc2l0aW9uTmFtZSgpLFxuICAgICAgb3BlbkFuaW1hdGlvbjogcHJvcHMub3BlbkFuaW1hdGlvbixcbiAgICAgIHN1Yk1lbnVPcGVuRGVsYXk6IHByb3BzLnN1Yk1lbnVPcGVuRGVsYXksXG4gICAgICBzdWJNZW51Q2xvc2VEZWxheTogcHJvcHMuc3ViTWVudUNsb3NlRGVsYXksXG4gICAgICBmb3JjZVN1Yk1lbnVSZW5kZXI6IHByb3BzLmZvcmNlU3ViTWVudVJlbmRlcixcbiAgICAgIG9uT3BlbkNoYW5nZTogX3RoaXMzLm9uT3BlbkNoYW5nZSxcbiAgICAgIG9uRGVzZWxlY3Q6IF90aGlzMy5vbkRlc2VsZWN0LFxuICAgICAgb25TZWxlY3Q6IF90aGlzMy5vblNlbGVjdCxcbiAgICAgIGJ1aWx0aW5QbGFjZW1lbnRzOiBwcm9wcy5idWlsdGluUGxhY2VtZW50cyxcbiAgICAgIGl0ZW1JY29uOiBjaGlsZFByb3BzLml0ZW1JY29uIHx8IF90aGlzMy5wcm9wcy5pdGVtSWNvbixcbiAgICAgIGV4cGFuZEljb246IGNoaWxkUHJvcHMuZXhwYW5kSWNvbiB8fCBfdGhpczMucHJvcHMuZXhwYW5kSWNvblxuICAgIH0sIGV4dHJhUHJvcHMpO1xuICAgIGlmIChwcm9wcy5tb2RlID09PSAnaW5saW5lJykge1xuICAgICAgbmV3Q2hpbGRQcm9wcy50cmlnZ2VyU3ViTWVudUFjdGlvbiA9ICdjbGljayc7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIG5ld0NoaWxkUHJvcHMpO1xuICB9O1xuXG4gIHRoaXMucmVuZGVyTWVudUl0ZW0gPSBmdW5jdGlvbiAoYywgaSwgc3ViTWVudUtleSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBzdGF0ZSA9IF90aGlzMy5wcm9wcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBleHRyYVByb3BzID0ge1xuICAgICAgb3BlbktleXM6IHN0YXRlLm9wZW5LZXlzLFxuICAgICAgc2VsZWN0ZWRLZXlzOiBzdGF0ZS5zZWxlY3RlZEtleXMsXG4gICAgICB0cmlnZ2VyU3ViTWVudUFjdGlvbjogX3RoaXMzLnByb3BzLnRyaWdnZXJTdWJNZW51QWN0aW9uLFxuICAgICAgc3ViTWVudUtleTogc3ViTWVudUtleVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzMy5yZW5kZXJDb21tb25NZW51SXRlbShjLCBpLCBleHRyYVByb3BzKTtcbiAgfTtcbn07XG5cbnZhciBjb25uZWN0ZWQgPSBjb25uZWN0KCkoU3ViUG9wdXBNZW51KTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdGVkOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBQcm92aWRlciwgY3JlYXRlIH0gZnJvbSAnbWluaS1zdG9yZSc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFN1YlBvcHVwTWVudSwgZ2V0QWN0aXZlS2V5IH0gZnJvbSAnLi9TdWJQb3B1cE1lbnUnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbCc7XG5cbnZhciBNZW51ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbnUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbnUocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVudSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICBfdGhpcy5pc1Jvb3RNZW51ID0gdHJ1ZTtcblxuICAgIHZhciBzZWxlY3RlZEtleXMgPSBwcm9wcy5kZWZhdWx0U2VsZWN0ZWRLZXlzO1xuICAgIHZhciBvcGVuS2V5cyA9IHByb3BzLmRlZmF1bHRPcGVuS2V5cztcbiAgICBpZiAoJ3NlbGVjdGVkS2V5cycgaW4gcHJvcHMpIHtcbiAgICAgIHNlbGVjdGVkS2V5cyA9IHByb3BzLnNlbGVjdGVkS2V5cyB8fCBbXTtcbiAgICB9XG4gICAgaWYgKCdvcGVuS2V5cycgaW4gcHJvcHMpIHtcbiAgICAgIG9wZW5LZXlzID0gcHJvcHMub3BlbktleXMgfHwgW107XG4gICAgfVxuXG4gICAgX3RoaXMuc3RvcmUgPSBjcmVhdGUoe1xuICAgICAgc2VsZWN0ZWRLZXlzOiBzZWxlY3RlZEtleXMsXG4gICAgICBvcGVuS2V5czogb3BlbktleXMsXG4gICAgICBhY3RpdmVLZXk6IHsgJzAtbWVudS0nOiBnZXRBY3RpdmVLZXkocHJvcHMsIHByb3BzLmFjdGl2ZUtleSkgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIE1lbnUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVNaW5pU3RvcmUoKTtcbiAgfTtcblxuICBNZW51LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy51cGRhdGVNaW5pU3RvcmUoKTtcbiAgfTtcblxuICAvLyBvbktleURvd24gbmVlZHMgdG8gYmUgZXhwb3NlZCBhcyBhIGluc3RhbmNlIG1ldGhvZFxuICAvLyBlLmcuLCBpbiByYy1zZWxlY3QsIHdlIG5lZWQgdG8gbmF2aWdhdGUgbWVudSBpdGVtIHdoaWxlXG4gIC8vIGN1cnJlbnQgYWN0aXZlIGl0ZW0gaXMgcmMtc2VsZWN0IGlucHV0IGJveCByYXRoZXIgdGhhbiB0aGUgbWVudSBpdHNlbGZcblxuXG4gIE1lbnUucHJvdG90eXBlLnVwZGF0ZU1pbmlTdG9yZSA9IGZ1bmN0aW9uIHVwZGF0ZU1pbmlTdG9yZSgpIHtcbiAgICBpZiAoJ3NlbGVjdGVkS2V5cycgaW4gdGhpcy5wcm9wcykge1xuICAgICAgdGhpcy5zdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGVkS2V5czogdGhpcy5wcm9wcy5zZWxlY3RlZEtleXMgfHwgW11cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoJ29wZW5LZXlzJyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICB0aGlzLnN0b3JlLnNldFN0YXRlKHtcbiAgICAgICAgb3BlbktleXM6IHRoaXMucHJvcHMub3BlbktleXMgfHwgW11cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBNZW51LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXModGhpcy5wcm9wcywgW10pO1xuXG4gICAgcHJvcHMuY2xhc3NOYW1lICs9ICcgJyArIHByb3BzLnByZWZpeENscyArICctcm9vdCc7XG4gICAgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIG9uQ2xpY2s6IHRoaXMub25DbGljayxcbiAgICAgIG9uT3BlbkNoYW5nZTogdGhpcy5vbk9wZW5DaGFuZ2UsXG4gICAgICBvbkRlc2VsZWN0OiB0aGlzLm9uRGVzZWxlY3QsXG4gICAgICBvblNlbGVjdDogdGhpcy5vblNlbGVjdCxcbiAgICAgIG9wZW5UcmFuc2l0aW9uTmFtZTogdGhpcy5nZXRPcGVuVHJhbnNpdGlvbk5hbWUoKSxcbiAgICAgIHBhcmVudE1lbnU6IHRoaXNcbiAgICB9KTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFByb3ZpZGVyLFxuICAgICAgeyBzdG9yZTogdGhpcy5zdG9yZSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgU3ViUG9wdXBNZW51LFxuICAgICAgICBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgcmVmOiBmdW5jdGlvbiByZWYoYykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5pbm5lck1lbnUgPSBjO1xuICAgICAgICAgIH0gfSksXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBNZW51O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW51LnByb3BUeXBlcyA9IHtcbiAgZGVmYXVsdFNlbGVjdGVkS2V5czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIGRlZmF1bHRBY3RpdmVGaXJzdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbGVjdGVkS2V5czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIGRlZmF1bHRPcGVuS2V5czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIG9wZW5LZXlzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgbW9kZTogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCcsICd2ZXJ0aWNhbC1sZWZ0JywgJ3ZlcnRpY2FsLXJpZ2h0JywgJ2lubGluZSddKSxcbiAgZ2V0UG9wdXBDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbkRlc2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25EZXN0cm95OiBQcm9wVHlwZXMuZnVuYyxcbiAgb3BlblRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvcGVuQW5pbWF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIHN1Yk1lbnVPcGVuRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIHN1Yk1lbnVDbG9zZURlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICBmb3JjZVN1Yk1lbnVSZW5kZXI6IFByb3BUeXBlcy5ib29sLFxuICB0cmlnZ2VyU3ViTWVudUFjdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgbGV2ZWw6IFByb3BUeXBlcy5udW1iZXIsXG4gIHNlbGVjdGFibGU6IFByb3BUeXBlcy5ib29sLFxuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgYnVpbHRpblBsYWNlbWVudHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIGl0ZW1JY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgZXhwYW5kSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIG92ZXJmbG93ZWRJbmRpY2F0b3I6IFByb3BUeXBlcy5ub2RlXG59O1xuTWVudS5kZWZhdWx0UHJvcHMgPSB7XG4gIHNlbGVjdGFibGU6IHRydWUsXG4gIG9uQ2xpY2s6IG5vb3AsXG4gIG9uU2VsZWN0OiBub29wLFxuICBvbk9wZW5DaGFuZ2U6IG5vb3AsXG4gIG9uRGVzZWxlY3Q6IG5vb3AsXG4gIGRlZmF1bHRTZWxlY3RlZEtleXM6IFtdLFxuICBkZWZhdWx0T3BlbktleXM6IFtdLFxuICBzdWJNZW51T3BlbkRlbGF5OiAwLjEsXG4gIHN1Yk1lbnVDbG9zZURlbGF5OiAwLjEsXG4gIHRyaWdnZXJTdWJNZW51QWN0aW9uOiAnaG92ZXInLFxuICBwcmVmaXhDbHM6ICdyYy1tZW51JyxcbiAgY2xhc3NOYW1lOiAnJyxcbiAgbW9kZTogJ3ZlcnRpY2FsJyxcbiAgc3R5bGU6IHt9LFxuICBidWlsdGluUGxhY2VtZW50czoge30sXG4gIG92ZXJmbG93ZWRJbmRpY2F0b3I6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ3NwYW4nLFxuICAgIG51bGwsXG4gICAgJ1xceEI3XFx4QjdcXHhCNydcbiAgKVxufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXMzID0gdGhpcztcblxuICB0aGlzLm9uU2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdEluZm8pIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczMucHJvcHM7XG4gICAgaWYgKHByb3BzLnNlbGVjdGFibGUpIHtcbiAgICAgIC8vIHJvb3QgbWVudVxuICAgICAgdmFyIHNlbGVjdGVkS2V5cyA9IF90aGlzMy5zdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdGVkS2V5cztcbiAgICAgIHZhciBzZWxlY3RlZEtleSA9IHNlbGVjdEluZm8ua2V5O1xuICAgICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgIHNlbGVjdGVkS2V5cyA9IHNlbGVjdGVkS2V5cy5jb25jYXQoW3NlbGVjdGVkS2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZEtleXMgPSBbc2VsZWN0ZWRLZXldO1xuICAgICAgfVxuICAgICAgaWYgKCEoJ3NlbGVjdGVkS2V5cycgaW4gcHJvcHMpKSB7XG4gICAgICAgIF90aGlzMy5zdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2VsZWN0ZWRLZXlzOiBzZWxlY3RlZEtleXNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBwcm9wcy5vblNlbGVjdChfZXh0ZW5kcyh7fSwgc2VsZWN0SW5mbywge1xuICAgICAgICBzZWxlY3RlZEtleXM6IHNlbGVjdGVkS2V5c1xuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzMy5wcm9wcy5vbkNsaWNrKGUpO1xuICB9O1xuXG4gIHRoaXMub25LZXlEb3duID0gZnVuY3Rpb24gKGUsIGNhbGxiYWNrKSB7XG4gICAgX3RoaXMzLmlubmVyTWVudS5nZXRXcmFwcGVkSW5zdGFuY2UoKS5vbktleURvd24oZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIHRoaXMub25PcGVuQ2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMzLnByb3BzO1xuICAgIHZhciBvcGVuS2V5cyA9IF90aGlzMy5zdG9yZS5nZXRTdGF0ZSgpLm9wZW5LZXlzLmNvbmNhdCgpO1xuICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIHByb2Nlc3NTaW5nbGUgPSBmdW5jdGlvbiBwcm9jZXNzU2luZ2xlKGUpIHtcbiAgICAgIHZhciBvbmVDaGFuZ2VkID0gZmFsc2U7XG4gICAgICBpZiAoZS5vcGVuKSB7XG4gICAgICAgIG9uZUNoYW5nZWQgPSBvcGVuS2V5cy5pbmRleE9mKGUua2V5KSA9PT0gLTE7XG4gICAgICAgIGlmIChvbmVDaGFuZ2VkKSB7XG4gICAgICAgICAgb3BlbktleXMucHVzaChlLmtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpbmRleCA9IG9wZW5LZXlzLmluZGV4T2YoZS5rZXkpO1xuICAgICAgICBvbmVDaGFuZ2VkID0gaW5kZXggIT09IC0xO1xuICAgICAgICBpZiAob25lQ2hhbmdlZCkge1xuICAgICAgICAgIG9wZW5LZXlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoYW5nZWQgPSBjaGFuZ2VkIHx8IG9uZUNoYW5nZWQ7XG4gICAgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIC8vIGJhdGNoIGNoYW5nZSBjYWxsXG4gICAgICBldmVudC5mb3JFYWNoKHByb2Nlc3NTaW5nbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzU2luZ2xlKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIGlmICghKCdvcGVuS2V5cycgaW4gX3RoaXMzLnByb3BzKSkge1xuICAgICAgICBfdGhpczMuc3RvcmUuc2V0U3RhdGUoeyBvcGVuS2V5czogb3BlbktleXMgfSk7XG4gICAgICB9XG4gICAgICBwcm9wcy5vbk9wZW5DaGFuZ2Uob3BlbktleXMpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uRGVzZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0SW5mbykge1xuICAgIHZhciBwcm9wcyA9IF90aGlzMy5wcm9wcztcbiAgICBpZiAocHJvcHMuc2VsZWN0YWJsZSkge1xuICAgICAgdmFyIHNlbGVjdGVkS2V5cyA9IF90aGlzMy5zdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdGVkS2V5cy5jb25jYXQoKTtcbiAgICAgIHZhciBzZWxlY3RlZEtleSA9IHNlbGVjdEluZm8ua2V5O1xuICAgICAgdmFyIGluZGV4ID0gc2VsZWN0ZWRLZXlzLmluZGV4T2Yoc2VsZWN0ZWRLZXkpO1xuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBzZWxlY3RlZEtleXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIGlmICghKCdzZWxlY3RlZEtleXMnIGluIHByb3BzKSkge1xuICAgICAgICBfdGhpczMuc3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgIHNlbGVjdGVkS2V5czogc2VsZWN0ZWRLZXlzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcHJvcHMub25EZXNlbGVjdChfZXh0ZW5kcyh7fSwgc2VsZWN0SW5mbywge1xuICAgICAgICBzZWxlY3RlZEtleXM6IHNlbGVjdGVkS2V5c1xuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldE9wZW5UcmFuc2l0aW9uTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczMucHJvcHM7XG4gICAgdmFyIHRyYW5zaXRpb25OYW1lID0gcHJvcHMub3BlblRyYW5zaXRpb25OYW1lO1xuICAgIHZhciBhbmltYXRpb25OYW1lID0gcHJvcHMub3BlbkFuaW1hdGlvbjtcbiAgICBpZiAoIXRyYW5zaXRpb25OYW1lICYmIHR5cGVvZiBhbmltYXRpb25OYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgdHJhbnNpdGlvbk5hbWUgPSBwcm9wcy5wcmVmaXhDbHMgKyAnLW9wZW4tJyArIGFuaW1hdGlvbk5hbWU7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2l0aW9uTmFtZTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lbnU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEtleUNvZGUgZnJvbSAncmMtdXRpbC9lcy9LZXlDb2RlJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHNjcm9sbEludG9WaWV3IGZyb20gJ2RvbS1zY3JvbGwtaW50by12aWV3JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdtaW5pLXN0b3JlJztcbmltcG9ydCB7IG5vb3AsIG1lbnVBbGxQcm9wcyB9IGZyb20gJy4vdXRpbCc7XG5cbi8qIGVzbGludCByZWFjdC9uby1pcy1tb3VudGVkOjAgKi9cblxuZXhwb3J0IHZhciBNZW51SXRlbSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW51SXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVudUl0ZW0ocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVudUl0ZW0pO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5vbktleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGU7XG4gICAgICBpZiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5FTlRFUikge1xuICAgICAgICBfdGhpcy5vbkNsaWNrKGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25Nb3VzZUxlYXZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGV2ZW50S2V5ID0gX3RoaXMkcHJvcHMuZXZlbnRLZXksXG4gICAgICAgICAgb25JdGVtSG92ZXIgPSBfdGhpcyRwcm9wcy5vbkl0ZW1Ib3ZlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmUgPSBfdGhpcyRwcm9wcy5vbk1vdXNlTGVhdmU7XG5cbiAgICAgIG9uSXRlbUhvdmVyKHtcbiAgICAgICAga2V5OiBldmVudEtleSxcbiAgICAgICAgaG92ZXI6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIG9uTW91c2VMZWF2ZSh7XG4gICAgICAgIGtleTogZXZlbnRLZXksXG4gICAgICAgIGRvbUV2ZW50OiBlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25Nb3VzZUVudGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBldmVudEtleSA9IF90aGlzJHByb3BzMi5ldmVudEtleSxcbiAgICAgICAgICBvbkl0ZW1Ib3ZlciA9IF90aGlzJHByb3BzMi5vbkl0ZW1Ib3ZlcixcbiAgICAgICAgICBvbk1vdXNlRW50ZXIgPSBfdGhpcyRwcm9wczIub25Nb3VzZUVudGVyO1xuXG4gICAgICBvbkl0ZW1Ib3Zlcih7XG4gICAgICAgIGtleTogZXZlbnRLZXksXG4gICAgICAgIGhvdmVyOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIG9uTW91c2VFbnRlcih7XG4gICAgICAgIGtleTogZXZlbnRLZXksXG4gICAgICAgIGRvbUV2ZW50OiBlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25DbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZXZlbnRLZXkgPSBfdGhpcyRwcm9wczMuZXZlbnRLZXksXG4gICAgICAgICAgbXVsdGlwbGUgPSBfdGhpcyRwcm9wczMubXVsdGlwbGUsXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzMy5vbkNsaWNrLFxuICAgICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMzLm9uU2VsZWN0LFxuICAgICAgICAgIG9uRGVzZWxlY3QgPSBfdGhpcyRwcm9wczMub25EZXNlbGVjdCxcbiAgICAgICAgICBpc1NlbGVjdGVkID0gX3RoaXMkcHJvcHMzLmlzU2VsZWN0ZWQ7XG5cbiAgICAgIHZhciBpbmZvID0ge1xuICAgICAgICBrZXk6IGV2ZW50S2V5LFxuICAgICAgICBrZXlQYXRoOiBbZXZlbnRLZXldLFxuICAgICAgICBpdGVtOiBfdGhpcyxcbiAgICAgICAgZG9tRXZlbnQ6IGVcbiAgICAgIH07XG4gICAgICBvbkNsaWNrKGluZm8pO1xuICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgb25EZXNlbGVjdChpbmZvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvblNlbGVjdChpbmZvKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNTZWxlY3RlZCkge1xuICAgICAgICBvblNlbGVjdChpbmZvKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTWVudUl0ZW0ucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gaW52b2tlIGN1c3RvbWl6ZWQgcmVmIHRvIGV4cG9zZSBjb21wb25lbnQgdG8gbWl4aW5cbiAgICB0aGlzLmNhbGxSZWYoKTtcbiAgfTtcblxuICBNZW51SXRlbS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmFjdGl2ZSkge1xuICAgICAgc2Nyb2xsSW50b1ZpZXcoUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMucHJvcHMucGFyZW50TWVudSksIHtcbiAgICAgICAgb25seVNjcm9sbElmTmVlZGVkOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5jYWxsUmVmKCk7XG4gIH07XG5cbiAgTWVudUl0ZW0ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICBpZiAocHJvcHMub25EZXN0cm95KSB7XG4gICAgICBwcm9wcy5vbkRlc3Ryb3kocHJvcHMuZXZlbnRLZXkpO1xuICAgIH1cbiAgfTtcblxuICBNZW51SXRlbS5wcm90b3R5cGUuZ2V0UHJlZml4Q2xzID0gZnVuY3Rpb24gZ2V0UHJlZml4Q2xzKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnJvb3RQcmVmaXhDbHMgKyAnLWl0ZW0nO1xuICB9O1xuXG4gIE1lbnVJdGVtLnByb3RvdHlwZS5nZXRBY3RpdmVDbGFzc05hbWUgPSBmdW5jdGlvbiBnZXRBY3RpdmVDbGFzc05hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJlZml4Q2xzKCkgKyAnLWFjdGl2ZSc7XG4gIH07XG5cbiAgTWVudUl0ZW0ucHJvdG90eXBlLmdldFNlbGVjdGVkQ2xhc3NOYW1lID0gZnVuY3Rpb24gZ2V0U2VsZWN0ZWRDbGFzc05hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJlZml4Q2xzKCkgKyAnLXNlbGVjdGVkJztcbiAgfTtcblxuICBNZW51SXRlbS5wcm90b3R5cGUuZ2V0RGlzYWJsZWRDbGFzc05hbWUgPSBmdW5jdGlvbiBnZXREaXNhYmxlZENsYXNzTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQcmVmaXhDbHMoKSArICctZGlzYWJsZWQnO1xuICB9O1xuXG4gIE1lbnVJdGVtLnByb3RvdHlwZS5jYWxsUmVmID0gZnVuY3Rpb24gY2FsbFJlZigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5tYW51YWxSZWYpIHtcbiAgICAgIHRoaXMucHJvcHMubWFudWFsUmVmKHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICBNZW51SXRlbS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gY2xhc3NOYW1lcyh0aGlzLmdldFByZWZpeENscygpLCBwcm9wcy5jbGFzc05hbWUsIChfY2xhc3NOYW1lcyA9IHt9LCBfY2xhc3NOYW1lc1t0aGlzLmdldEFjdGl2ZUNsYXNzTmFtZSgpXSA9ICFwcm9wcy5kaXNhYmxlZCAmJiBwcm9wcy5hY3RpdmUsIF9jbGFzc05hbWVzW3RoaXMuZ2V0U2VsZWN0ZWRDbGFzc05hbWUoKV0gPSBwcm9wcy5pc1NlbGVjdGVkLCBfY2xhc3NOYW1lc1t0aGlzLmdldERpc2FibGVkQ2xhc3NOYW1lKCldID0gcHJvcHMuZGlzYWJsZWQsIF9jbGFzc05hbWVzKSk7XG4gICAgdmFyIGF0dHJzID0gX2V4dGVuZHMoe30sIHByb3BzLmF0dHJpYnV0ZSwge1xuICAgICAgdGl0bGU6IHByb3BzLnRpdGxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAvLyBzZXQgdG8gbWVudWl0ZW0gYnkgZGVmYXVsdFxuICAgICAgcm9sZTogcHJvcHMucm9sZSB8fCAnbWVudWl0ZW0nLFxuICAgICAgJ2FyaWEtZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZFxuICAgIH0pO1xuXG4gICAgaWYgKHByb3BzLnJvbGUgPT09ICdvcHRpb24nKSB7XG4gICAgICAvLyBvdmVyd3JpdGUgdG8gb3B0aW9uXG4gICAgICBhdHRycyA9IF9leHRlbmRzKHt9LCBhdHRycywge1xuICAgICAgICByb2xlOiAnb3B0aW9uJyxcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBwcm9wcy5pc1NlbGVjdGVkXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLnJvbGUgPT09IG51bGwgfHwgcHJvcHMucm9sZSA9PT0gJ25vbmUnKSB7XG4gICAgICAvLyBzb21ldGltZXMgd2Ugd2FudCB0byBzcGVjaWZ5IHJvbGUgaW5zaWRlIDxsaS8+IGVsZW1lbnRcbiAgICAgIC8vIDxsaT48YSByb2xlPSdtZW51aXRlbSc+TGluazwvYT48L2xpPiB3b3VsZCBiZSBhIGdvb2QgZXhhbXBsZVxuICAgICAgLy8gaW4gdGhpcyBjYXNlIHRoZSByb2xlIG9uIDxsaS8+IHNob3VsZCBiZSBcIm5vbmVcIiB0b1xuICAgICAgLy8gcmVtb3ZlIHRoZSBpbXBsaWVkIGxpc3RpdGVtIHJvbGUuXG4gICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLTEuMS9leGFtcGxlcy9tZW51YmFyL21lbnViYXItMS9tZW51YmFyLTEuaHRtbFxuICAgICAgYXR0cnMucm9sZSA9ICdub25lJztcbiAgICB9XG4gICAgLy8gSW4gY2FzZSB0aGF0IG9uQ2xpY2svb25Nb3VzZUxlYXZlL29uTW91c2VFbnRlciBpcyBwYXNzZWQgZG93biBmcm9tIG93bmVyXG4gICAgdmFyIG1vdXNlRXZlbnQgPSB7XG4gICAgICBvbkNsaWNrOiBwcm9wcy5kaXNhYmxlZCA/IG51bGwgOiB0aGlzLm9uQ2xpY2ssXG4gICAgICBvbk1vdXNlTGVhdmU6IHByb3BzLmRpc2FibGVkID8gbnVsbCA6IHRoaXMub25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZUVudGVyOiBwcm9wcy5kaXNhYmxlZCA/IG51bGwgOiB0aGlzLm9uTW91c2VFbnRlclxuICAgIH07XG4gICAgdmFyIHN0eWxlID0gX2V4dGVuZHMoe30sIHByb3BzLnN0eWxlKTtcbiAgICBpZiAocHJvcHMubW9kZSA9PT0gJ2lubGluZScpIHtcbiAgICAgIHN0eWxlLnBhZGRpbmdMZWZ0ID0gcHJvcHMuaW5saW5lSW5kZW50ICogcHJvcHMubGV2ZWw7XG4gICAgfVxuICAgIG1lbnVBbGxQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBkZWxldGUgcHJvcHNba2V5XTtcbiAgICB9KTtcbiAgICB2YXIgaWNvbiA9IHRoaXMucHJvcHMuaXRlbUljb247XG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLml0ZW1JY29uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLml0ZW1JY29uLCB0aGlzLnByb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnbGknLFxuICAgICAgX2V4dGVuZHMoe30sIHByb3BzLCBhdHRycywgbW91c2VFdmVudCwge1xuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0pLFxuICAgICAgcHJvcHMuY2hpbGRyZW4sXG4gICAgICBpY29uXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gTWVudUl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbnVJdGVtLnByb3BUeXBlcyA9IHtcbiAgYXR0cmlidXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICByb290UHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBldmVudEtleTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIHNlbGVjdGVkS2V5czogUHJvcFR5cGVzLmFycmF5LFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkl0ZW1Ib3ZlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRGVzZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBwYXJlbnRNZW51OiBQcm9wVHlwZXMub2JqZWN0LFxuICBvbkRlc3Ryb3k6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGlzU2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuICBtYW51YWxSZWY6IFByb3BUeXBlcy5mdW5jLFxuICBpdGVtSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSlcbn07XG5NZW51SXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uU2VsZWN0OiBub29wLFxuICBvbk1vdXNlRW50ZXI6IG5vb3AsXG4gIG9uTW91c2VMZWF2ZTogbm9vcCxcbiAgbWFudWFsUmVmOiBub29wXG59O1xuTWVudUl0ZW0uaXNNZW51SXRlbSA9IHRydWU7XG5cbnZhciBjb25uZWN0ZWQgPSBjb25uZWN0KGZ1bmN0aW9uIChfcmVmLCBfcmVmMikge1xuICB2YXIgYWN0aXZlS2V5ID0gX3JlZi5hY3RpdmVLZXksXG4gICAgICBzZWxlY3RlZEtleXMgPSBfcmVmLnNlbGVjdGVkS2V5cztcbiAgdmFyIGV2ZW50S2V5ID0gX3JlZjIuZXZlbnRLZXksXG4gICAgICBzdWJNZW51S2V5ID0gX3JlZjIuc3ViTWVudUtleTtcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmU6IGFjdGl2ZUtleVtzdWJNZW51S2V5XSA9PT0gZXZlbnRLZXksXG4gICAgaXNTZWxlY3RlZDogc2VsZWN0ZWRLZXlzLmluZGV4T2YoZXZlbnRLZXkpICE9PSAtMVxuICB9O1xufSkoTWVudUl0ZW0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0ZWQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IG1lbnVBbGxQcm9wcyB9IGZyb20gJy4vdXRpbCc7XG5cbnZhciBNZW51SXRlbUdyb3VwID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbnVJdGVtR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbnVJdGVtR3JvdXAoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51SXRlbUdyb3VwKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5yZW5kZXJJbm5lck1lbnVJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHJlbmRlck1lbnVJdGVtID0gX3RoaXMkcHJvcHMucmVuZGVyTWVudUl0ZW0sXG4gICAgICAgICAgaW5kZXggPSBfdGhpcyRwcm9wcy5pbmRleDtcblxuICAgICAgcmV0dXJuIHJlbmRlck1lbnVJdGVtKGl0ZW0sIGluZGV4LCBfdGhpcy5wcm9wcy5zdWJNZW51S2V5KTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1lbnVJdGVtR3JvdXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXModGhpcy5wcm9wcywgW10pO1xuXG4gICAgdmFyIF9wcm9wcyRjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcyRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3Byb3BzJGNsYXNzTmFtZSxcbiAgICAgICAgcm9vdFByZWZpeENscyA9IHByb3BzLnJvb3RQcmVmaXhDbHM7XG5cbiAgICB2YXIgdGl0bGVDbGFzc05hbWUgPSByb290UHJlZml4Q2xzICsgJy1pdGVtLWdyb3VwLXRpdGxlJztcbiAgICB2YXIgbGlzdENsYXNzTmFtZSA9IHJvb3RQcmVmaXhDbHMgKyAnLWl0ZW0tZ3JvdXAtbGlzdCc7XG4gICAgdmFyIHRpdGxlID0gcHJvcHMudGl0bGUsXG4gICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG5cbiAgICBtZW51QWxsUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gZGVsZXRlIHByb3BzW2tleV07XG4gICAgfSk7XG5cbiAgICAvLyBTZXQgb25DbGljayB0byBudWxsLCB0byBpZ25vcmUgcHJvcGFnYXRlZCBvbkNsaWNrIGV2ZW50XG4gICAgZGVsZXRlIHByb3BzLm9uQ2xpY2s7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdsaScsXG4gICAgICBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWUgKyAnICcgKyByb290UHJlZml4Q2xzICsgJy1pdGVtLWdyb3VwJyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiB0aXRsZUNsYXNzTmFtZSxcbiAgICAgICAgICB0aXRsZTogdHlwZW9mIHRpdGxlID09PSAnc3RyaW5nJyA/IHRpdGxlIDogdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3VsJyxcbiAgICAgICAgeyBjbGFzc05hbWU6IGxpc3RDbGFzc05hbWUgfSxcbiAgICAgICAgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCB0aGlzLnJlbmRlcklubmVyTWVudUl0ZW0pXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gTWVudUl0ZW1Hcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVudUl0ZW1Hcm91cC5wcm9wVHlwZXMgPSB7XG4gIHJlbmRlck1lbnVJdGVtOiBQcm9wVHlwZXMuZnVuYyxcbiAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3ViTWVudUtleTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcm9vdFByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZ1xufTtcbk1lbnVJdGVtR3JvdXAuZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlZDogdHJ1ZVxufTtcblxuXG5NZW51SXRlbUdyb3VwLmlzTWVudUl0ZW1Hcm91cCA9IHRydWU7XG5cbmV4cG9ydCBkZWZhdWx0IE1lbnVJdGVtR3JvdXA7IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgRGl2aWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEaXZpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEaXZpZGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaXZpZGVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgRGl2aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICByb290UHJlZml4Q2xzID0gX3Byb3BzLnJvb3RQcmVmaXhDbHMsXG4gICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2xpJywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUgKyAnICcgKyByb290UHJlZml4Q2xzICsgJy1pdGVtLWRpdmlkZXInLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIERpdmlkZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRpdmlkZXIucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJvb3RQcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuRGl2aWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIC8vIFRvIGZpeCBrZXlib2FyZCBVWC5cbiAgZGlzYWJsZWQ6IHRydWUsXG4gIGNsYXNzTmFtZTogJycsXG4gIHN0eWxlOiB7fVxufTtcbmV4cG9ydCBkZWZhdWx0IERpdmlkZXI7IiwiaW1wb3J0IE1lbnUgZnJvbSAnLi9NZW51JztcbmltcG9ydCBTdWJNZW51IGZyb20gJy4vU3ViTWVudSc7XG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnLi9NZW51SXRlbSc7XG5pbXBvcnQgTWVudUl0ZW1Hcm91cCBmcm9tICcuL01lbnVJdGVtR3JvdXAnO1xuaW1wb3J0IERpdmlkZXIgZnJvbSAnLi9EaXZpZGVyJztcblxuZXhwb3J0IHsgU3ViTWVudSwgTWVudUl0ZW0gYXMgSXRlbSwgTWVudUl0ZW0sIE1lbnVJdGVtR3JvdXAsIE1lbnVJdGVtR3JvdXAgYXMgSXRlbUdyb3VwLCBEaXZpZGVyIH07XG5cbmV4cG9ydCBkZWZhdWx0IE1lbnU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGUgPSBleHBvcnRzLmNvbm5lY3QgPSBleHBvcnRzLlByb3ZpZGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX1Byb3ZpZGVyMiA9IHJlcXVpcmUoJy4vUHJvdmlkZXInKTtcblxudmFyIF9Qcm92aWRlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm92aWRlcjIpO1xuXG52YXIgX2Nvbm5lY3QyID0gcmVxdWlyZSgnLi9jb25uZWN0Jyk7XG5cbnZhciBfY29ubmVjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25uZWN0Mik7XG5cbnZhciBfY3JlYXRlMiA9IHJlcXVpcmUoJy4vY3JlYXRlJyk7XG5cbnZhciBfY3JlYXRlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZTIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLlByb3ZpZGVyID0gX1Byb3ZpZGVyMy5kZWZhdWx0O1xuZXhwb3J0cy5jb25uZWN0ID0gX2Nvbm5lY3QzLmRlZmF1bHQ7XG5leHBvcnRzLmNyZWF0ZSA9IF9jcmVhdGUzLmRlZmF1bHQ7IiwiLyoqXG4gKiBAaWdub3JlXG4gKiBzb21lIGtleS1jb2RlcyBkZWZpbml0aW9uIGFuZCB1dGlscyBmcm9tIGNsb3N1cmUtbGlicmFyeVxuICogQGF1dGhvciB5aW1pbmdoZUBnbWFpbC5jb21cbiAqL1xuXG52YXIgS2V5Q29kZSA9IHtcbiAgLyoqXG4gICAqIE1BQ19FTlRFUlxuICAgKi9cbiAgTUFDX0VOVEVSOiAzLFxuICAvKipcbiAgICogQkFDS1NQQUNFXG4gICAqL1xuICBCQUNLU1BBQ0U6IDgsXG4gIC8qKlxuICAgKiBUQUJcbiAgICovXG4gIFRBQjogOSxcbiAgLyoqXG4gICAqIE5VTUxPQ0sgb24gRkYvU2FmYXJpIE1hY1xuICAgKi9cbiAgTlVNX0NFTlRFUjogMTIsIC8vIE5VTUxPQ0sgb24gRkYvU2FmYXJpIE1hY1xuICAvKipcbiAgICogRU5URVJcbiAgICovXG4gIEVOVEVSOiAxMyxcbiAgLyoqXG4gICAqIFNISUZUXG4gICAqL1xuICBTSElGVDogMTYsXG4gIC8qKlxuICAgKiBDVFJMXG4gICAqL1xuICBDVFJMOiAxNyxcbiAgLyoqXG4gICAqIEFMVFxuICAgKi9cbiAgQUxUOiAxOCxcbiAgLyoqXG4gICAqIFBBVVNFXG4gICAqL1xuICBQQVVTRTogMTksXG4gIC8qKlxuICAgKiBDQVBTX0xPQ0tcbiAgICovXG4gIENBUFNfTE9DSzogMjAsXG4gIC8qKlxuICAgKiBFU0NcbiAgICovXG4gIEVTQzogMjcsXG4gIC8qKlxuICAgKiBTUEFDRVxuICAgKi9cbiAgU1BBQ0U6IDMyLFxuICAvKipcbiAgICogUEFHRV9VUFxuICAgKi9cbiAgUEFHRV9VUDogMzMsIC8vIGFsc28gTlVNX05PUlRIX0VBU1RcbiAgLyoqXG4gICAqIFBBR0VfRE9XTlxuICAgKi9cbiAgUEFHRV9ET1dOOiAzNCwgLy8gYWxzbyBOVU1fU09VVEhfRUFTVFxuICAvKipcbiAgICogRU5EXG4gICAqL1xuICBFTkQ6IDM1LCAvLyBhbHNvIE5VTV9TT1VUSF9XRVNUXG4gIC8qKlxuICAgKiBIT01FXG4gICAqL1xuICBIT01FOiAzNiwgLy8gYWxzbyBOVU1fTk9SVEhfV0VTVFxuICAvKipcbiAgICogTEVGVFxuICAgKi9cbiAgTEVGVDogMzcsIC8vIGFsc28gTlVNX1dFU1RcbiAgLyoqXG4gICAqIFVQXG4gICAqL1xuICBVUDogMzgsIC8vIGFsc28gTlVNX05PUlRIXG4gIC8qKlxuICAgKiBSSUdIVFxuICAgKi9cbiAgUklHSFQ6IDM5LCAvLyBhbHNvIE5VTV9FQVNUXG4gIC8qKlxuICAgKiBET1dOXG4gICAqL1xuICBET1dOOiA0MCwgLy8gYWxzbyBOVU1fU09VVEhcbiAgLyoqXG4gICAqIFBSSU5UX1NDUkVFTlxuICAgKi9cbiAgUFJJTlRfU0NSRUVOOiA0NCxcbiAgLyoqXG4gICAqIElOU0VSVFxuICAgKi9cbiAgSU5TRVJUOiA0NSwgLy8gYWxzbyBOVU1fSU5TRVJUXG4gIC8qKlxuICAgKiBERUxFVEVcbiAgICovXG4gIERFTEVURTogNDYsIC8vIGFsc28gTlVNX0RFTEVURVxuICAvKipcbiAgICogWkVST1xuICAgKi9cbiAgWkVSTzogNDgsXG4gIC8qKlxuICAgKiBPTkVcbiAgICovXG4gIE9ORTogNDksXG4gIC8qKlxuICAgKiBUV09cbiAgICovXG4gIFRXTzogNTAsXG4gIC8qKlxuICAgKiBUSFJFRVxuICAgKi9cbiAgVEhSRUU6IDUxLFxuICAvKipcbiAgICogRk9VUlxuICAgKi9cbiAgRk9VUjogNTIsXG4gIC8qKlxuICAgKiBGSVZFXG4gICAqL1xuICBGSVZFOiA1MyxcbiAgLyoqXG4gICAqIFNJWFxuICAgKi9cbiAgU0lYOiA1NCxcbiAgLyoqXG4gICAqIFNFVkVOXG4gICAqL1xuICBTRVZFTjogNTUsXG4gIC8qKlxuICAgKiBFSUdIVFxuICAgKi9cbiAgRUlHSFQ6IDU2LFxuICAvKipcbiAgICogTklORVxuICAgKi9cbiAgTklORTogNTcsXG4gIC8qKlxuICAgKiBRVUVTVElPTl9NQVJLXG4gICAqL1xuICBRVUVTVElPTl9NQVJLOiA2MywgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG4gIC8qKlxuICAgKiBBXG4gICAqL1xuICBBOiA2NSxcbiAgLyoqXG4gICAqIEJcbiAgICovXG4gIEI6IDY2LFxuICAvKipcbiAgICogQ1xuICAgKi9cbiAgQzogNjcsXG4gIC8qKlxuICAgKiBEXG4gICAqL1xuICBEOiA2OCxcbiAgLyoqXG4gICAqIEVcbiAgICovXG4gIEU6IDY5LFxuICAvKipcbiAgICogRlxuICAgKi9cbiAgRjogNzAsXG4gIC8qKlxuICAgKiBHXG4gICAqL1xuICBHOiA3MSxcbiAgLyoqXG4gICAqIEhcbiAgICovXG4gIEg6IDcyLFxuICAvKipcbiAgICogSVxuICAgKi9cbiAgSTogNzMsXG4gIC8qKlxuICAgKiBKXG4gICAqL1xuICBKOiA3NCxcbiAgLyoqXG4gICAqIEtcbiAgICovXG4gIEs6IDc1LFxuICAvKipcbiAgICogTFxuICAgKi9cbiAgTDogNzYsXG4gIC8qKlxuICAgKiBNXG4gICAqL1xuICBNOiA3NyxcbiAgLyoqXG4gICAqIE5cbiAgICovXG4gIE46IDc4LFxuICAvKipcbiAgICogT1xuICAgKi9cbiAgTzogNzksXG4gIC8qKlxuICAgKiBQXG4gICAqL1xuICBQOiA4MCxcbiAgLyoqXG4gICAqIFFcbiAgICovXG4gIFE6IDgxLFxuICAvKipcbiAgICogUlxuICAgKi9cbiAgUjogODIsXG4gIC8qKlxuICAgKiBTXG4gICAqL1xuICBTOiA4MyxcbiAgLyoqXG4gICAqIFRcbiAgICovXG4gIFQ6IDg0LFxuICAvKipcbiAgICogVVxuICAgKi9cbiAgVTogODUsXG4gIC8qKlxuICAgKiBWXG4gICAqL1xuICBWOiA4NixcbiAgLyoqXG4gICAqIFdcbiAgICovXG4gIFc6IDg3LFxuICAvKipcbiAgICogWFxuICAgKi9cbiAgWDogODgsXG4gIC8qKlxuICAgKiBZXG4gICAqL1xuICBZOiA4OSxcbiAgLyoqXG4gICAqIFpcbiAgICovXG4gIFo6IDkwLFxuICAvKipcbiAgICogTUVUQVxuICAgKi9cbiAgTUVUQTogOTEsIC8vIFdJTl9LRVlfTEVGVFxuICAvKipcbiAgICogV0lOX0tFWV9SSUdIVFxuICAgKi9cbiAgV0lOX0tFWV9SSUdIVDogOTIsXG4gIC8qKlxuICAgKiBDT05URVhUX01FTlVcbiAgICovXG4gIENPTlRFWFRfTUVOVTogOTMsXG4gIC8qKlxuICAgKiBOVU1fWkVST1xuICAgKi9cbiAgTlVNX1pFUk86IDk2LFxuICAvKipcbiAgICogTlVNX09ORVxuICAgKi9cbiAgTlVNX09ORTogOTcsXG4gIC8qKlxuICAgKiBOVU1fVFdPXG4gICAqL1xuICBOVU1fVFdPOiA5OCxcbiAgLyoqXG4gICAqIE5VTV9USFJFRVxuICAgKi9cbiAgTlVNX1RIUkVFOiA5OSxcbiAgLyoqXG4gICAqIE5VTV9GT1VSXG4gICAqL1xuICBOVU1fRk9VUjogMTAwLFxuICAvKipcbiAgICogTlVNX0ZJVkVcbiAgICovXG4gIE5VTV9GSVZFOiAxMDEsXG4gIC8qKlxuICAgKiBOVU1fU0lYXG4gICAqL1xuICBOVU1fU0lYOiAxMDIsXG4gIC8qKlxuICAgKiBOVU1fU0VWRU5cbiAgICovXG4gIE5VTV9TRVZFTjogMTAzLFxuICAvKipcbiAgICogTlVNX0VJR0hUXG4gICAqL1xuICBOVU1fRUlHSFQ6IDEwNCxcbiAgLyoqXG4gICAqIE5VTV9OSU5FXG4gICAqL1xuICBOVU1fTklORTogMTA1LFxuICAvKipcbiAgICogTlVNX01VTFRJUExZXG4gICAqL1xuICBOVU1fTVVMVElQTFk6IDEwNixcbiAgLyoqXG4gICAqIE5VTV9QTFVTXG4gICAqL1xuICBOVU1fUExVUzogMTA3LFxuICAvKipcbiAgICogTlVNX01JTlVTXG4gICAqL1xuICBOVU1fTUlOVVM6IDEwOSxcbiAgLyoqXG4gICAqIE5VTV9QRVJJT0RcbiAgICovXG4gIE5VTV9QRVJJT0Q6IDExMCxcbiAgLyoqXG4gICAqIE5VTV9ESVZJU0lPTlxuICAgKi9cbiAgTlVNX0RJVklTSU9OOiAxMTEsXG4gIC8qKlxuICAgKiBGMVxuICAgKi9cbiAgRjE6IDExMixcbiAgLyoqXG4gICAqIEYyXG4gICAqL1xuICBGMjogMTEzLFxuICAvKipcbiAgICogRjNcbiAgICovXG4gIEYzOiAxMTQsXG4gIC8qKlxuICAgKiBGNFxuICAgKi9cbiAgRjQ6IDExNSxcbiAgLyoqXG4gICAqIEY1XG4gICAqL1xuICBGNTogMTE2LFxuICAvKipcbiAgICogRjZcbiAgICovXG4gIEY2OiAxMTcsXG4gIC8qKlxuICAgKiBGN1xuICAgKi9cbiAgRjc6IDExOCxcbiAgLyoqXG4gICAqIEY4XG4gICAqL1xuICBGODogMTE5LFxuICAvKipcbiAgICogRjlcbiAgICovXG4gIEY5OiAxMjAsXG4gIC8qKlxuICAgKiBGMTBcbiAgICovXG4gIEYxMDogMTIxLFxuICAvKipcbiAgICogRjExXG4gICAqL1xuICBGMTE6IDEyMixcbiAgLyoqXG4gICAqIEYxMlxuICAgKi9cbiAgRjEyOiAxMjMsXG4gIC8qKlxuICAgKiBOVU1MT0NLXG4gICAqL1xuICBOVU1MT0NLOiAxNDQsXG4gIC8qKlxuICAgKiBTRU1JQ09MT05cbiAgICovXG4gIFNFTUlDT0xPTjogMTg2LCAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIERBU0hcbiAgICovXG4gIERBU0g6IDE4OSwgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG4gIC8qKlxuICAgKiBFUVVBTFNcbiAgICovXG4gIEVRVUFMUzogMTg3LCAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIENPTU1BXG4gICAqL1xuICBDT01NQTogMTg4LCAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIFBFUklPRFxuICAgKi9cbiAgUEVSSU9EOiAxOTAsIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogU0xBU0hcbiAgICovXG4gIFNMQVNIOiAxOTEsIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogQVBPU1RST1BIRVxuICAgKi9cbiAgQVBPU1RST1BIRTogMTkyLCAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIFNJTkdMRV9RVU9URVxuICAgKi9cbiAgU0lOR0xFX1FVT1RFOiAyMjIsIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogT1BFTl9TUVVBUkVfQlJBQ0tFVFxuICAgKi9cbiAgT1BFTl9TUVVBUkVfQlJBQ0tFVDogMjE5LCAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIEJBQ0tTTEFTSFxuICAgKi9cbiAgQkFDS1NMQVNIOiAyMjAsIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogQ0xPU0VfU1FVQVJFX0JSQUNLRVRcbiAgICovXG4gIENMT1NFX1NRVUFSRV9CUkFDS0VUOiAyMjEsIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogV0lOX0tFWVxuICAgKi9cbiAgV0lOX0tFWTogMjI0LFxuICAvKipcbiAgICogTUFDX0ZGX01FVEFcbiAgICovXG4gIE1BQ19GRl9NRVRBOiAyMjQsIC8vIEZpcmVmb3ggKEdlY2tvKSBmaXJlcyB0aGlzIGZvciB0aGUgbWV0YSBrZXkgaW5zdGVhZCBvZiA5MVxuICAvKipcbiAgICogV0lOX0lNRVxuICAgKi9cbiAgV0lOX0lNRTogMjI5XG59O1xuXG4vKlxuIHdoZXRoZXIgdGV4dCBhbmQgbW9kaWZpZWQga2V5IGlzIGVudGVyZWQgYXQgdGhlIHNhbWUgdGltZS5cbiAqL1xuS2V5Q29kZS5pc1RleHRNb2RpZnlpbmdLZXlFdmVudCA9IGZ1bmN0aW9uIGlzVGV4dE1vZGlmeWluZ0tleUV2ZW50KGUpIHtcbiAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGU7XG4gIGlmIChlLmFsdEtleSAmJiAhZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fFxuICAvLyBGdW5jdGlvbiBrZXlzIGRvbid0IGdlbmVyYXRlIHRleHRcbiAga2V5Q29kZSA+PSBLZXlDb2RlLkYxICYmIGtleUNvZGUgPD0gS2V5Q29kZS5GMTIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUaGUgZm9sbG93aW5nIGtleXMgYXJlIHF1aXRlIGhhcm1sZXNzLCBldmVuIGluIGNvbWJpbmF0aW9uIHdpdGhcbiAgLy8gQ1RSTCwgQUxUIG9yIFNISUZULlxuICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICBjYXNlIEtleUNvZGUuQUxUOlxuICAgIGNhc2UgS2V5Q29kZS5DQVBTX0xPQ0s6XG4gICAgY2FzZSBLZXlDb2RlLkNPTlRFWFRfTUVOVTpcbiAgICBjYXNlIEtleUNvZGUuQ1RSTDpcbiAgICBjYXNlIEtleUNvZGUuRE9XTjpcbiAgICBjYXNlIEtleUNvZGUuRU5EOlxuICAgIGNhc2UgS2V5Q29kZS5FU0M6XG4gICAgY2FzZSBLZXlDb2RlLkhPTUU6XG4gICAgY2FzZSBLZXlDb2RlLklOU0VSVDpcbiAgICBjYXNlIEtleUNvZGUuTEVGVDpcbiAgICBjYXNlIEtleUNvZGUuTUFDX0ZGX01FVEE6XG4gICAgY2FzZSBLZXlDb2RlLk1FVEE6XG4gICAgY2FzZSBLZXlDb2RlLk5VTUxPQ0s6XG4gICAgY2FzZSBLZXlDb2RlLk5VTV9DRU5URVI6XG4gICAgY2FzZSBLZXlDb2RlLlBBR0VfRE9XTjpcbiAgICBjYXNlIEtleUNvZGUuUEFHRV9VUDpcbiAgICBjYXNlIEtleUNvZGUuUEFVU0U6XG4gICAgY2FzZSBLZXlDb2RlLlBSSU5UX1NDUkVFTjpcbiAgICBjYXNlIEtleUNvZGUuUklHSFQ6XG4gICAgY2FzZSBLZXlDb2RlLlNISUZUOlxuICAgIGNhc2UgS2V5Q29kZS5VUDpcbiAgICBjYXNlIEtleUNvZGUuV0lOX0tFWTpcbiAgICBjYXNlIEtleUNvZGUuV0lOX0tFWV9SSUdIVDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8qXG4gd2hldGhlciBjaGFyYWN0ZXIgaXMgZW50ZXJlZC5cbiAqL1xuS2V5Q29kZS5pc0NoYXJhY3RlcktleSA9IGZ1bmN0aW9uIGlzQ2hhcmFjdGVyS2V5KGtleUNvZGUpIHtcbiAgaWYgKGtleUNvZGUgPj0gS2V5Q29kZS5aRVJPICYmIGtleUNvZGUgPD0gS2V5Q29kZS5OSU5FKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoa2V5Q29kZSA+PSBLZXlDb2RlLk5VTV9aRVJPICYmIGtleUNvZGUgPD0gS2V5Q29kZS5OVU1fTVVMVElQTFkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChrZXlDb2RlID49IEtleUNvZGUuQSAmJiBrZXlDb2RlIDw9IEtleUNvZGUuWikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gU2FmYXJpIHNlbmRzIHplcm8ga2V5IGNvZGUgZm9yIG5vbi1sYXRpbiBjaGFyYWN0ZXJzLlxuICBpZiAod2luZG93Lm5hdmlnYXRpb24udXNlckFnZW50LmluZGV4T2YoJ1dlYktpdCcpICE9PSAtMSAmJiBrZXlDb2RlID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICBjYXNlIEtleUNvZGUuU1BBQ0U6XG4gICAgY2FzZSBLZXlDb2RlLlFVRVNUSU9OX01BUks6XG4gICAgY2FzZSBLZXlDb2RlLk5VTV9QTFVTOlxuICAgIGNhc2UgS2V5Q29kZS5OVU1fTUlOVVM6XG4gICAgY2FzZSBLZXlDb2RlLk5VTV9QRVJJT0Q6XG4gICAgY2FzZSBLZXlDb2RlLk5VTV9ESVZJU0lPTjpcbiAgICBjYXNlIEtleUNvZGUuU0VNSUNPTE9OOlxuICAgIGNhc2UgS2V5Q29kZS5EQVNIOlxuICAgIGNhc2UgS2V5Q29kZS5FUVVBTFM6XG4gICAgY2FzZSBLZXlDb2RlLkNPTU1BOlxuICAgIGNhc2UgS2V5Q29kZS5QRVJJT0Q6XG4gICAgY2FzZSBLZXlDb2RlLlNMQVNIOlxuICAgIGNhc2UgS2V5Q29kZS5BUE9TVFJPUEhFOlxuICAgIGNhc2UgS2V5Q29kZS5TSU5HTEVfUVVPVEU6XG4gICAgY2FzZSBLZXlDb2RlLk9QRU5fU1FVQVJFX0JSQUNLRVQ6XG4gICAgY2FzZSBLZXlDb2RlLkJBQ0tTTEFTSDpcbiAgICBjYXNlIEtleUNvZGUuQ0xPU0VfU1FVQVJFX0JSQUNLRVQ6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBLZXlDb2RlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5mdW5jdGlvbiBpc1BvaW50c0VxKGExLCBhMiwgaXNBbGlnblBvaW50KSB7XG4gIGlmIChpc0FsaWduUG9pbnQpIHtcbiAgICByZXR1cm4gYTFbMF0gPT09IGEyWzBdO1xuICB9XG4gIHJldHVybiBhMVswXSA9PT0gYTJbMF0gJiYgYTFbMV0gPT09IGEyWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxpZ25Gcm9tUGxhY2VtZW50KGJ1aWx0aW5QbGFjZW1lbnRzLCBwbGFjZW1lbnRTdHIsIGFsaWduKSB7XG4gIHZhciBiYXNlQWxpZ24gPSBidWlsdGluUGxhY2VtZW50c1twbGFjZW1lbnRTdHJdIHx8IHt9O1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGJhc2VBbGlnbiwgYWxpZ24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxpZ25Qb3B1cENsYXNzTmFtZShidWlsdGluUGxhY2VtZW50cywgcHJlZml4Q2xzLCBhbGlnbiwgaXNBbGlnblBvaW50KSB7XG4gIHZhciBwb2ludHMgPSBhbGlnbi5wb2ludHM7XG4gIGZvciAodmFyIHBsYWNlbWVudCBpbiBidWlsdGluUGxhY2VtZW50cykge1xuICAgIGlmIChidWlsdGluUGxhY2VtZW50cy5oYXNPd25Qcm9wZXJ0eShwbGFjZW1lbnQpKSB7XG4gICAgICBpZiAoaXNQb2ludHNFcShidWlsdGluUGxhY2VtZW50c1twbGFjZW1lbnRdLnBvaW50cywgcG9pbnRzLCBpc0FsaWduUG9pbnQpKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXhDbHMgKyAnLXBsYWNlbWVudC0nICsgcGxhY2VtZW50O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlUmVmKG5hbWUsIGNvbXBvbmVudCkge1xuICB0aGlzW25hbWVdID0gY29tcG9uZW50O1xufSIsInZhciB2ZW5kb3JQcmVmaXggPSB2b2lkIDA7XG5cbnZhciBqc0Nzc01hcCA9IHtcbiAgV2Via2l0OiAnLXdlYmtpdC0nLFxuICBNb3o6ICctbW96LScsXG4gIC8vIElFIGRpZCBpdCB3cm9uZyBhZ2FpbiAuLi5cbiAgbXM6ICctbXMtJyxcbiAgTzogJy1vLSdcbn07XG5cbmZ1bmN0aW9uIGdldFZlbmRvclByZWZpeCgpIHtcbiAgaWYgKHZlbmRvclByZWZpeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHZlbmRvclByZWZpeDtcbiAgfVxuICB2ZW5kb3JQcmVmaXggPSAnJztcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlO1xuICB2YXIgdGVzdFByb3AgPSAnVHJhbnNmb3JtJztcbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICB2ZW5kb3JQcmVmaXggPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2ZW5kb3JQcmVmaXg7XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25OYW1lKCkge1xuICByZXR1cm4gZ2V0VmVuZG9yUHJlZml4KCkgPyBnZXRWZW5kb3JQcmVmaXgoKSArICdUcmFuc2l0aW9uUHJvcGVydHknIDogJ3RyYW5zaXRpb25Qcm9wZXJ0eSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1OYW1lKCkge1xuICByZXR1cm4gZ2V0VmVuZG9yUHJlZml4KCkgPyBnZXRWZW5kb3JQcmVmaXgoKSArICdUcmFuc2Zvcm0nIDogJ3RyYW5zZm9ybSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uUHJvcGVydHkobm9kZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWUgPSBnZXRUcmFuc2l0aW9uTmFtZSgpO1xuICBpZiAobmFtZSkge1xuICAgIG5vZGUuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICBpZiAobmFtZSAhPT0gJ3RyYW5zaXRpb25Qcm9wZXJ0eScpIHtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gdmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldFRyYW5zZm9ybShub2RlLCB2YWx1ZSkge1xuICB2YXIgbmFtZSA9IGdldFRyYW5zZm9ybU5hbWUoKTtcbiAgaWYgKG5hbWUpIHtcbiAgICBub2RlLnN0eWxlW25hbWVdID0gdmFsdWU7XG4gICAgaWYgKG5hbWUgIT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BlcnR5KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5IHx8IG5vZGUuc3R5bGVbZ2V0VHJhbnNpdGlvbk5hbWUoKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1YWShub2RlKSB7XG4gIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpO1xuICB2YXIgdHJhbnNmb3JtID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykgfHwgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShnZXRUcmFuc2Zvcm1OYW1lKCkpO1xuICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XG4gICAgdmFyIG1hdHJpeCA9IHRyYW5zZm9ybS5yZXBsYWNlKC9bXjAtOVxcLS4sXS9nLCAnJykuc3BsaXQoJywnKTtcbiAgICByZXR1cm4geyB4OiBwYXJzZUZsb2F0KG1hdHJpeFsxMl0gfHwgbWF0cml4WzRdLCAwKSwgeTogcGFyc2VGbG9hdChtYXRyaXhbMTNdIHx8IG1hdHJpeFs1XSwgMCkgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xufVxuXG52YXIgbWF0cml4MmQgPSAvbWF0cml4XFwoKC4qKVxcKS87XG52YXIgbWF0cml4M2QgPSAvbWF0cml4M2RcXCgoLiopXFwpLztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFRyYW5zZm9ybVhZKG5vZGUsIHh5KSB7XG4gIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpO1xuICB2YXIgdHJhbnNmb3JtID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykgfHwgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShnZXRUcmFuc2Zvcm1OYW1lKCkpO1xuICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XG4gICAgdmFyIGFyciA9IHZvaWQgMDtcbiAgICB2YXIgbWF0Y2gyZCA9IHRyYW5zZm9ybS5tYXRjaChtYXRyaXgyZCk7XG4gICAgaWYgKG1hdGNoMmQpIHtcbiAgICAgIG1hdGNoMmQgPSBtYXRjaDJkWzFdO1xuICAgICAgYXJyID0gbWF0Y2gyZC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChpdGVtLCAxMCk7XG4gICAgICB9KTtcbiAgICAgIGFycls0XSA9IHh5Lng7XG4gICAgICBhcnJbNV0gPSB4eS55O1xuICAgICAgc2V0VHJhbnNmb3JtKG5vZGUsICdtYXRyaXgoJyArIGFyci5qb2luKCcsJykgKyAnKScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWF0Y2gzZCA9IHRyYW5zZm9ybS5tYXRjaChtYXRyaXgzZClbMV07XG4gICAgICBhcnIgPSBtYXRjaDNkLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGl0ZW0sIDEwKTtcbiAgICAgIH0pO1xuICAgICAgYXJyWzEyXSA9IHh5Lng7XG4gICAgICBhcnJbMTNdID0geHkueTtcbiAgICAgIHNldFRyYW5zZm9ybShub2RlLCAnbWF0cml4M2QoJyArIGFyci5qb2luKCcsJykgKyAnKScpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzZXRUcmFuc2Zvcm0obm9kZSwgJ3RyYW5zbGF0ZVgoJyArIHh5LnggKyAncHgpIHRyYW5zbGF0ZVkoJyArIHh5LnkgKyAncHgpIHRyYW5zbGF0ZVooMCknKTtcbiAgfVxufSIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuaW1wb3J0IHsgc2V0VHJhbnNpdGlvblByb3BlcnR5LCBnZXRUcmFuc2l0aW9uUHJvcGVydHksIGdldFRyYW5zZm9ybVhZLCBzZXRUcmFuc2Zvcm1YWSwgZ2V0VHJhbnNmb3JtTmFtZSB9IGZyb20gJy4vcHJvcGVydHlVdGlscyc7XG5cbnZhciBSRV9OVU0gPSAvW1xcLStdPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdW1xcLStdP1xcZCt8KS8uc291cmNlO1xuXG52YXIgZ2V0Q29tcHV0ZWRTdHlsZVggPSB2b2lkIDA7XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNDg1NjU0LzMwNDA2MDVcbmZ1bmN0aW9uIGZvcmNlUmVsYXlvdXQoZWxlbSkge1xuICB2YXIgb3JpZ2luYWxTdHlsZSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcbiAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBlbGVtLm9mZnNldEhlaWdodDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBlbGVtLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbFN0eWxlO1xufVxuXG5mdW5jdGlvbiBjc3MoZWwsIG5hbWUsIHYpIHtcbiAgdmFyIHZhbHVlID0gdjtcbiAgaWYgKCh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobmFtZSkpID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGkgaW4gbmFtZSkge1xuICAgICAgaWYgKG5hbWUuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgY3NzKGVsLCBpLCBuYW1lW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlICsgJ3B4JztcbiAgICB9XG4gICAgZWwuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlWChlbCwgbmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFBvc2l0aW9uKGVsZW0pIHtcbiAgdmFyIGJveCA9IHZvaWQgMDtcbiAgdmFyIHggPSB2b2lkIDA7XG4gIHZhciB5ID0gdm9pZCAwO1xuICB2YXIgZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuICB2YXIgYm9keSA9IGRvYy5ib2R5O1xuICB2YXIgZG9jRWxlbSA9IGRvYyAmJiBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAvLyDmoLnmja4gR0JTIOacgOaWsOaVsOaNru+8jEEtR3JhZGUgQnJvd3NlcnMg6YO95bey5pSv5oyBIGdldEJvdW5kaW5nQ2xpZW50UmVjdCDmlrnms5XvvIzkuI3nlKjlho3ogIPomZHkvKDnu5/nmoTlrp7njrDmlrnlvI9cbiAgYm94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAvLyDms6jvvJpqUXVlcnkg6L+Y6ICD6JmR5YeP5Y67IGRvY0VsZW0uY2xpZW50TGVmdC9jbGllbnRUb3BcbiAgLy8g5L2G5rWL6K+V5Y+R546w77yM6L+Z5qC35Y+N6ICM5Lya5a+86Ie05b2TIGh0bWwg5ZKMIGJvZHkg5pyJ6L656LedL+i+ueahhuagt+W8j+aXtu+8jOiOt+WPlueahOWAvOS4jeato+ehrlxuICAvLyDmraTlpJbvvIxpZTYg5Lya5b+955WlIGh0bWwg55qEIG1hcmdpbiDlgLzvvIzlubjov5DlnLDmmK/msqHmnInosIHkvJrljrvorr7nva4gaHRtbCDnmoQgbWFyZ2luXG5cbiAgeCA9IGJveC5sZWZ0O1xuICB5ID0gYm94LnRvcDtcblxuICAvLyBJbiBJRSwgbW9zdCBvZiB0aGUgdGltZSwgMiBleHRyYSBwaXhlbHMgYXJlIGFkZGVkIHRvIHRoZSB0b3AgYW5kIGxlZnRcbiAgLy8gZHVlIHRvIHRoZSBpbXBsaWNpdCAyLXBpeGVsIGluc2V0IGJvcmRlci4gIEluIElFNi83IHF1aXJrcyBtb2RlIGFuZFxuICAvLyBJRTYgc3RhbmRhcmRzIG1vZGUsIHRoaXMgYm9yZGVyIGNhbiBiZSBvdmVycmlkZGVuIGJ5IHNldHRpbmcgdGhlXG4gIC8vIGRvY3VtZW50IGVsZW1lbnQncyBib3JkZXIgdG8gemVybyAtLSB0aHVzLCB3ZSBjYW5ub3QgcmVseSBvbiB0aGVcbiAgLy8gb2Zmc2V0IGFsd2F5cyBiZWluZyAyIHBpeGVscy5cblxuICAvLyBJbiBxdWlya3MgbW9kZSwgdGhlIG9mZnNldCBjYW4gYmUgZGV0ZXJtaW5lZCBieSBxdWVyeWluZyB0aGUgYm9keSdzXG4gIC8vIGNsaWVudExlZnQvY2xpZW50VG9wLCBidXQgaW4gc3RhbmRhcmRzIG1vZGUsIGl0IGlzIGZvdW5kIGJ5IHF1ZXJ5aW5nXG4gIC8vIHRoZSBkb2N1bWVudCBlbGVtZW50J3MgY2xpZW50TGVmdC9jbGllbnRUb3AuICBTaW5jZSB3ZSBhbHJlYWR5IGNhbGxlZFxuICAvLyBnZXRDbGllbnRCb3VuZGluZ1JlY3Qgd2UgaGF2ZSBhbHJlYWR5IGZvcmNlZCBhIHJlZmxvdywgc28gaXQgaXMgbm90XG4gIC8vIHRvbyBleHBlbnNpdmUganVzdCB0byBxdWVyeSB0aGVtIGFsbC5cblxuICAvLyBpZSDkuIvlupTor6Xlh4/ljrvnqpflj6PnmoTovrnmoYblkKfvvIzmr5Xnq5/pu5jorqQgYWJzb2x1dGUg6YO95piv55u45a+556qX5Y+j5a6a5L2N55qEXG4gIC8vIOeql+WPo+i+ueahhuagh+WHhuaYr+iuviBkb2N1bWVudEVsZW1lbnQgLHF1aXJrcyDml7borr7nva4gYm9keVxuICAvLyDmnIDlpb3npoHmraLlnKggYm9keSDlkowgaHRtbCDkuIrovrnmoYYg77yM5L2GIGllIDwgOSBodG1sIOm7mOiupOaciSAycHgg77yM5YeP5Y67XG4gIC8vIOS9huaYr+mdniBpZSDkuI3lj6/og73orr7nva7nqpflj6PovrnmoYbvvIxib2R5IGh0bWwg5Lmf5LiN5piv56qX5Y+jICxpZSDlj6/ku6XpgJrov4cgaHRtbCxib2R5IOiuvue9rlxuICAvLyDmoIflh4YgaWUg5LiLIGRvY0VsZW0uY2xpZW50VG9wIOWwseaYryBib3JkZXItdG9wXG4gIC8vIGllNyBodG1sIOWNs+eql+WPo+i+ueahhuaUueWPmOS4jeS6huOAguawuOi/nOS4uiAyXG4gIC8vIOS9huagh+WHhiBmaXJlZm94L2Nocm9tZS9pZTkg5LiLIGRvY0VsZW0uY2xpZW50VG9wIOaYr+eql+WPo+i+ueahhu+8jOWNs+S9v+iuvuS6hiBib3JkZXItdG9wIOS5n+S4uiAwXG5cbiAgeCAtPSBkb2NFbGVtLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIHkgLT0gZG9jRWxlbS5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IHgsXG4gICAgdG9wOiB5XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbCh3LCB0b3ApIHtcbiAgdmFyIHJldCA9IHdbJ3BhZ2UnICsgKHRvcCA/ICdZJyA6ICdYJykgKyAnT2Zmc2V0J107XG4gIHZhciBtZXRob2QgPSAnc2Nyb2xsJyArICh0b3AgPyAnVG9wJyA6ICdMZWZ0Jyk7XG4gIGlmICh0eXBlb2YgcmV0ICE9PSAnbnVtYmVyJykge1xuICAgIHZhciBkID0gdy5kb2N1bWVudDtcbiAgICAvLyBpZTYsNyw4IHN0YW5kYXJkIG1vZGVcbiAgICByZXQgPSBkLmRvY3VtZW50RWxlbWVudFttZXRob2RdO1xuICAgIGlmICh0eXBlb2YgcmV0ICE9PSAnbnVtYmVyJykge1xuICAgICAgLy8gcXVpcmtzIG1vZGVcbiAgICAgIHJldCA9IGQuYm9keVttZXRob2RdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxMZWZ0KHcpIHtcbiAgcmV0dXJuIGdldFNjcm9sbCh3KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsVG9wKHcpIHtcbiAgcmV0dXJuIGdldFNjcm9sbCh3LCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0KGVsKSB7XG4gIHZhciBwb3MgPSBnZXRDbGllbnRQb3NpdGlvbihlbCk7XG4gIHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuICB2YXIgdyA9IGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICBwb3MubGVmdCArPSBnZXRTY3JvbGxMZWZ0KHcpO1xuICBwb3MudG9wICs9IGdldFNjcm9sbFRvcCh3KTtcbiAgcmV0dXJuIHBvcztcbn1cblxuLyoqXG4gKiBBIGNydWRlIHdheSBvZiBkZXRlcm1pbmluZyBpZiBhbiBvYmplY3QgaXMgYSB3aW5kb3dcbiAqIEBtZW1iZXIgdXRpbFxuICovXG5mdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgLy8gbXVzdCB1c2UgPT0gZm9yIGllOFxuICAvKiBlc2xpbnQgZXFlcWVxOjAgKi9cbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiBvYmogIT09IHVuZGVmaW5lZCAmJiBvYmogPT0gb2JqLndpbmRvdztcbn1cblxuZnVuY3Rpb24gZ2V0RG9jdW1lbnQobm9kZSkge1xuICBpZiAoaXNXaW5kb3cobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZS5kb2N1bWVudDtcbiAgfVxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQ7XG59XG5cbmZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKGVsZW0sIG5hbWUsIGNzKSB7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gY3M7XG4gIHZhciB2YWwgPSAnJztcbiAgdmFyIGQgPSBnZXREb2N1bWVudChlbGVtKTtcbiAgY29tcHV0ZWRTdHlsZSA9IGNvbXB1dGVkU3R5bGUgfHwgZC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW0sIG51bGwpO1xuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9raXNzeXRlYW0va2lzc3kvaXNzdWVzLzYxXG4gIGlmIChjb21wdXRlZFN0eWxlKSB7XG4gICAgdmFsID0gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpIHx8IGNvbXB1dGVkU3R5bGVbbmFtZV07XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG52YXIgX1JFX05VTV9OT19QWCA9IG5ldyBSZWdFeHAoJ14oJyArIFJFX05VTSArICcpKD8hcHgpW2EteiVdKyQnLCAnaScpO1xudmFyIFJFX1BPUyA9IC9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLztcbnZhciBDVVJSRU5UX1NUWUxFID0gJ2N1cnJlbnRTdHlsZSc7XG52YXIgUlVOVElNRV9TVFlMRSA9ICdydW50aW1lU3R5bGUnO1xudmFyIExFRlQgPSAnbGVmdCc7XG52YXIgUFggPSAncHgnO1xuXG5mdW5jdGlvbiBfZ2V0Q29tcHV0ZWRTdHlsZUlFKGVsZW0sIG5hbWUpIHtcbiAgLy8gY3VycmVudFN0eWxlIG1heWJlIG51bGxcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM1MjMxLmFzcHhcbiAgdmFyIHJldCA9IGVsZW1bQ1VSUkVOVF9TVFlMRV0gJiYgZWxlbVtDVVJSRU5UX1NUWUxFXVtuYW1lXTtcblxuICAvLyDlvZMgd2lkdGgvaGVpZ2h0IOiuvue9ruS4uueZvuWIhuavlOaXtu+8jOmAmui/hyBwaXhlbExlZnQg5pa55byP6L2s5o2i55qEIHdpZHRoL2hlaWdodCDlgLxcbiAgLy8g5LiA5byA5aeL5bCx5aSE55CG5LqGISBDVVNUT01fU1RZTEUuaGVpZ2h0LENVU1RPTV9TVFlMRS53aWR0aCAsY3NzSG9vayDop6PlhrNAMjAxMS0wOC0xOVxuICAvLyDlnKggaWUg5LiL5LiN5a+577yM6ZyA6KaB55u05o6l55SoIG9mZnNldCDmlrnlvI9cbiAgLy8gYm9yZGVyV2lkdGgg562J5YC85Lmf5pyJ6Zeu6aKY77yM5L2G6ICD6JmR5YiwIGJvcmRlcldpZHRoIOiuvuS4uueZvuWIhuavlOeahOamgueOh+W+iOWwj++8jOi/memHjOWwseS4jeiAg+iZkeS6hlxuXG4gIC8vIEZyb20gdGhlIGF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcbiAgLy8gaHR0cDovL2VyaWsuZWFlLm5ldC9hcmNoaXZlcy8yMDA3LzA3LzI3LzE4LjU0LjE1LyNjb21tZW50LTEwMjI5MVxuICAvLyBJZiB3ZSdyZSBub3QgZGVhbGluZyB3aXRoIGEgcmVndWxhciBwaXhlbCBudW1iZXJcbiAgLy8gYnV0IGEgbnVtYmVyIHRoYXQgaGFzIGEgd2VpcmQgZW5kaW5nLCB3ZSBuZWVkIHRvIGNvbnZlcnQgaXQgdG8gcGl4ZWxzXG4gIC8vIGV4Y2x1ZGUgbGVmdCByaWdodCBmb3IgcmVsYXRpdml0eVxuICBpZiAoX1JFX05VTV9OT19QWC50ZXN0KHJldCkgJiYgIVJFX1BPUy50ZXN0KG5hbWUpKSB7XG4gICAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuICAgIHZhciBzdHlsZSA9IGVsZW0uc3R5bGU7XG4gICAgdmFyIGxlZnQgPSBzdHlsZVtMRUZUXTtcbiAgICB2YXIgcnNMZWZ0ID0gZWxlbVtSVU5USU1FX1NUWUxFXVtMRUZUXTtcblxuICAgIC8vIHByZXZlbnQgZmxhc2hpbmcgb2YgY29udGVudFxuICAgIGVsZW1bUlVOVElNRV9TVFlMRV1bTEVGVF0gPSBlbGVtW0NVUlJFTlRfU1RZTEVdW0xFRlRdO1xuXG4gICAgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuICAgIHN0eWxlW0xFRlRdID0gbmFtZSA9PT0gJ2ZvbnRTaXplJyA/ICcxZW0nIDogcmV0IHx8IDA7XG4gICAgcmV0ID0gc3R5bGUucGl4ZWxMZWZ0ICsgUFg7XG5cbiAgICAvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG4gICAgc3R5bGVbTEVGVF0gPSBsZWZ0O1xuXG4gICAgZWxlbVtSVU5USU1FX1NUWUxFXVtMRUZUXSA9IHJzTGVmdDtcbiAgfVxuICByZXR1cm4gcmV0ID09PSAnJyA/ICdhdXRvJyA6IHJldDtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIGdldENvbXB1dGVkU3R5bGVYID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgPyBfZ2V0Q29tcHV0ZWRTdHlsZSA6IF9nZXRDb21wdXRlZFN0eWxlSUU7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldERpcmVjdGlvbihkaXIsIG9wdGlvbikge1xuICBpZiAoZGlyID09PSAnbGVmdCcpIHtcbiAgICByZXR1cm4gb3B0aW9uLnVzZUNzc1JpZ2h0ID8gJ3JpZ2h0JyA6IGRpcjtcbiAgfVxuICByZXR1cm4gb3B0aW9uLnVzZUNzc0JvdHRvbSA/ICdib3R0b20nIDogZGlyO1xufVxuXG5mdW5jdGlvbiBvcHBvc2l0ZU9mZnNldERpcmVjdGlvbihkaXIpIHtcbiAgaWYgKGRpciA9PT0gJ2xlZnQnKSB7XG4gICAgcmV0dXJuICdyaWdodCc7XG4gIH0gZWxzZSBpZiAoZGlyID09PSAncmlnaHQnKSB7XG4gICAgcmV0dXJuICdsZWZ0JztcbiAgfSBlbHNlIGlmIChkaXIgPT09ICd0b3AnKSB7XG4gICAgcmV0dXJuICdib3R0b20nO1xuICB9IGVsc2UgaWYgKGRpciA9PT0gJ2JvdHRvbScpIHtcbiAgICByZXR1cm4gJ3RvcCc7XG4gIH1cbn1cblxuLy8g6K6+572uIGVsZW0g55u45a+5IGVsZW0ub3duZXJEb2N1bWVudCDnmoTlnZDmoIdcbmZ1bmN0aW9uIHNldExlZnRUb3AoZWxlbSwgb2Zmc2V0LCBvcHRpb24pIHtcbiAgLy8gc2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuICBpZiAoY3NzKGVsZW0sICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIGVsZW0uc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICB9XG4gIHZhciBwcmVzZXRIID0gLTk5OTtcbiAgdmFyIHByZXNldFYgPSAtOTk5O1xuICB2YXIgaG9yaXpvbnRhbFByb3BlcnR5ID0gZ2V0T2Zmc2V0RGlyZWN0aW9uKCdsZWZ0Jywgb3B0aW9uKTtcbiAgdmFyIHZlcnRpY2FsUHJvcGVydHkgPSBnZXRPZmZzZXREaXJlY3Rpb24oJ3RvcCcsIG9wdGlvbik7XG4gIHZhciBvcHBvc2l0ZUhvcml6b250YWxQcm9wZXJ0eSA9IG9wcG9zaXRlT2Zmc2V0RGlyZWN0aW9uKGhvcml6b250YWxQcm9wZXJ0eSk7XG4gIHZhciBvcHBvc2l0ZVZlcnRpY2FsUHJvcGVydHkgPSBvcHBvc2l0ZU9mZnNldERpcmVjdGlvbih2ZXJ0aWNhbFByb3BlcnR5KTtcblxuICBpZiAoaG9yaXpvbnRhbFByb3BlcnR5ICE9PSAnbGVmdCcpIHtcbiAgICBwcmVzZXRIID0gOTk5O1xuICB9XG5cbiAgaWYgKHZlcnRpY2FsUHJvcGVydHkgIT09ICd0b3AnKSB7XG4gICAgcHJlc2V0ViA9IDk5OTtcbiAgfVxuICB2YXIgb3JpZ2luYWxUcmFuc2l0aW9uID0gJyc7XG4gIHZhciBvcmlnaW5hbE9mZnNldCA9IGdldE9mZnNldChlbGVtKTtcbiAgaWYgKCdsZWZ0JyBpbiBvZmZzZXQgfHwgJ3RvcCcgaW4gb2Zmc2V0KSB7XG4gICAgb3JpZ2luYWxUcmFuc2l0aW9uID0gZ2V0VHJhbnNpdGlvblByb3BlcnR5KGVsZW0pIHx8ICcnO1xuICAgIHNldFRyYW5zaXRpb25Qcm9wZXJ0eShlbGVtLCAnbm9uZScpO1xuICB9XG4gIGlmICgnbGVmdCcgaW4gb2Zmc2V0KSB7XG4gICAgZWxlbS5zdHlsZVtvcHBvc2l0ZUhvcml6b250YWxQcm9wZXJ0eV0gPSAnJztcbiAgICBlbGVtLnN0eWxlW2hvcml6b250YWxQcm9wZXJ0eV0gPSBwcmVzZXRIICsgJ3B4JztcbiAgfVxuICBpZiAoJ3RvcCcgaW4gb2Zmc2V0KSB7XG4gICAgZWxlbS5zdHlsZVtvcHBvc2l0ZVZlcnRpY2FsUHJvcGVydHldID0gJyc7XG4gICAgZWxlbS5zdHlsZVt2ZXJ0aWNhbFByb3BlcnR5XSA9IHByZXNldFYgKyAncHgnO1xuICB9XG4gIC8vIGZvcmNlIHJlbGF5b3V0XG4gIGZvcmNlUmVsYXlvdXQoZWxlbSk7XG4gIHZhciBvbGQgPSBnZXRPZmZzZXQoZWxlbSk7XG4gIHZhciBvcmlnaW5hbFN0eWxlID0ge307XG4gIGZvciAodmFyIGtleSBpbiBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHZhciBkaXIgPSBnZXRPZmZzZXREaXJlY3Rpb24oa2V5LCBvcHRpb24pO1xuICAgICAgdmFyIHByZXNldCA9IGtleSA9PT0gJ2xlZnQnID8gcHJlc2V0SCA6IHByZXNldFY7XG4gICAgICB2YXIgb2ZmID0gb3JpZ2luYWxPZmZzZXRba2V5XSAtIG9sZFtrZXldO1xuICAgICAgaWYgKGRpciA9PT0ga2V5KSB7XG4gICAgICAgIG9yaWdpbmFsU3R5bGVbZGlyXSA9IHByZXNldCArIG9mZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yaWdpbmFsU3R5bGVbZGlyXSA9IHByZXNldCAtIG9mZjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY3NzKGVsZW0sIG9yaWdpbmFsU3R5bGUpO1xuICAvLyBmb3JjZSByZWxheW91dFxuICBmb3JjZVJlbGF5b3V0KGVsZW0pO1xuICBpZiAoJ2xlZnQnIGluIG9mZnNldCB8fCAndG9wJyBpbiBvZmZzZXQpIHtcbiAgICBzZXRUcmFuc2l0aW9uUHJvcGVydHkoZWxlbSwgb3JpZ2luYWxUcmFuc2l0aW9uKTtcbiAgfVxuICB2YXIgcmV0ID0ge307XG4gIGZvciAodmFyIF9rZXkgaW4gb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldC5oYXNPd25Qcm9wZXJ0eShfa2V5KSkge1xuICAgICAgdmFyIF9kaXIgPSBnZXRPZmZzZXREaXJlY3Rpb24oX2tleSwgb3B0aW9uKTtcbiAgICAgIHZhciBfb2ZmID0gb2Zmc2V0W19rZXldIC0gb3JpZ2luYWxPZmZzZXRbX2tleV07XG4gICAgICBpZiAoX2tleSA9PT0gX2Rpcikge1xuICAgICAgICByZXRbX2Rpcl0gPSBvcmlnaW5hbFN0eWxlW19kaXJdICsgX29mZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldFtfZGlyXSA9IG9yaWdpbmFsU3R5bGVbX2Rpcl0gLSBfb2ZmO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjc3MoZWxlbSwgcmV0KTtcbn1cblxuZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGVsZW0sIG9mZnNldCkge1xuICB2YXIgb3JpZ2luYWxPZmZzZXQgPSBnZXRPZmZzZXQoZWxlbSk7XG4gIHZhciBvcmlnaW5hbFhZID0gZ2V0VHJhbnNmb3JtWFkoZWxlbSk7XG4gIHZhciByZXN1bHRYWSA9IHsgeDogb3JpZ2luYWxYWS54LCB5OiBvcmlnaW5hbFhZLnkgfTtcbiAgaWYgKCdsZWZ0JyBpbiBvZmZzZXQpIHtcbiAgICByZXN1bHRYWS54ID0gb3JpZ2luYWxYWS54ICsgb2Zmc2V0LmxlZnQgLSBvcmlnaW5hbE9mZnNldC5sZWZ0O1xuICB9XG4gIGlmICgndG9wJyBpbiBvZmZzZXQpIHtcbiAgICByZXN1bHRYWS55ID0gb3JpZ2luYWxYWS55ICsgb2Zmc2V0LnRvcCAtIG9yaWdpbmFsT2Zmc2V0LnRvcDtcbiAgfVxuICBzZXRUcmFuc2Zvcm1YWShlbGVtLCByZXN1bHRYWSk7XG59XG5cbmZ1bmN0aW9uIHNldE9mZnNldChlbGVtLCBvZmZzZXQsIG9wdGlvbikge1xuICBpZiAob3B0aW9uLmlnbm9yZVNoYWtlKSB7XG4gICAgdmFyIG9yaU9mZnNldCA9IGdldE9mZnNldChlbGVtKTtcblxuICAgIHZhciBvTGVmdCA9IG9yaU9mZnNldC5sZWZ0LnRvRml4ZWQoMCk7XG4gICAgdmFyIG9Ub3AgPSBvcmlPZmZzZXQudG9wLnRvRml4ZWQoMCk7XG4gICAgdmFyIHRMZWZ0ID0gb2Zmc2V0LmxlZnQudG9GaXhlZCgwKTtcbiAgICB2YXIgdFRvcCA9IG9mZnNldC50b3AudG9GaXhlZCgwKTtcblxuICAgIGlmIChvTGVmdCA9PT0gdExlZnQgJiYgb1RvcCA9PT0gdFRvcCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb24udXNlQ3NzUmlnaHQgfHwgb3B0aW9uLnVzZUNzc0JvdHRvbSkge1xuICAgIHNldExlZnRUb3AoZWxlbSwgb2Zmc2V0LCBvcHRpb24pO1xuICB9IGVsc2UgaWYgKG9wdGlvbi51c2VDc3NUcmFuc2Zvcm0gJiYgZ2V0VHJhbnNmb3JtTmFtZSgpIGluIGRvY3VtZW50LmJvZHkuc3R5bGUpIHtcbiAgICBzZXRUcmFuc2Zvcm0oZWxlbSwgb2Zmc2V0LCBvcHRpb24pO1xuICB9IGVsc2Uge1xuICAgIHNldExlZnRUb3AoZWxlbSwgb2Zmc2V0LCBvcHRpb24pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVhY2goYXJyLCBmbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGZuKGFycltpXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNCb3JkZXJCb3hGbihlbGVtKSB7XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlWChlbGVtLCAnYm94U2l6aW5nJykgPT09ICdib3JkZXItYm94Jztcbn1cblxudmFyIEJPWF9NT0RFTFMgPSBbJ21hcmdpbicsICdib3JkZXInLCAncGFkZGluZyddO1xudmFyIENPTlRFTlRfSU5ERVggPSAtMTtcbnZhciBQQURESU5HX0lOREVYID0gMjtcbnZhciBCT1JERVJfSU5ERVggPSAxO1xudmFyIE1BUkdJTl9JTkRFWCA9IDA7XG5cbmZ1bmN0aW9uIHN3YXAoZWxlbSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIG9sZCA9IHt9O1xuICB2YXIgc3R5bGUgPSBlbGVtLnN0eWxlO1xuICB2YXIgbmFtZSA9IHZvaWQgMDtcblxuICAvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcbiAgZm9yIChuYW1lIGluIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgb2xkW25hbWVdID0gc3R5bGVbbmFtZV07XG4gICAgICBzdHlsZVtuYW1lXSA9IG9wdGlvbnNbbmFtZV07XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2suY2FsbChlbGVtKTtcblxuICAvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcbiAgZm9yIChuYW1lIGluIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgc3R5bGVbbmFtZV0gPSBvbGRbbmFtZV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBCTVdpZHRoKGVsZW0sIHByb3BzLCB3aGljaCkge1xuICB2YXIgdmFsdWUgPSAwO1xuICB2YXIgcHJvcCA9IHZvaWQgMDtcbiAgdmFyIGogPSB2b2lkIDA7XG4gIHZhciBpID0gdm9pZCAwO1xuICBmb3IgKGogPSAwOyBqIDwgcHJvcHMubGVuZ3RoOyBqKyspIHtcbiAgICBwcm9wID0gcHJvcHNbal07XG4gICAgaWYgKHByb3ApIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB3aGljaC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY3NzUHJvcCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKHByb3AgPT09ICdib3JkZXInKSB7XG4gICAgICAgICAgY3NzUHJvcCA9ICcnICsgcHJvcCArIHdoaWNoW2ldICsgJ1dpZHRoJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjc3NQcm9wID0gcHJvcCArIHdoaWNoW2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlICs9IHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZVgoZWxlbSwgY3NzUHJvcCkpIHx8IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIGRvbVV0aWxzID0ge307XG5cbmVhY2goWydXaWR0aCcsICdIZWlnaHQnXSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZG9tVXRpbHNbJ2RvYycgKyBuYW1lXSA9IGZ1bmN0aW9uIChyZWZXaW4pIHtcbiAgICB2YXIgZCA9IHJlZldpbi5kb2N1bWVudDtcbiAgICByZXR1cm4gTWF0aC5tYXgoXG4gICAgLy8gZmlyZWZveCBjaHJvbWUgZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodDwgYm9keS5zY3JvbGxIZWlnaHRcbiAgICAvLyBpZSBzdGFuZGFyZCBtb2RlIDogZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodD4gYm9keS5zY3JvbGxIZWlnaHRcbiAgICBkLmRvY3VtZW50RWxlbWVudFsnc2Nyb2xsJyArIG5hbWVdLFxuICAgIC8vIHF1aXJrcyA6IGRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQg5pyA5aSn562J5LqO5Y+v6KeG56qX5Y+j5aSa5LiA54K577yfXG4gICAgZC5ib2R5WydzY3JvbGwnICsgbmFtZV0sIGRvbVV0aWxzWyd2aWV3cG9ydCcgKyBuYW1lXShkKSk7XG4gIH07XG5cbiAgZG9tVXRpbHNbJ3ZpZXdwb3J0JyArIG5hbWVdID0gZnVuY3Rpb24gKHdpbikge1xuICAgIC8vIHBjIGJyb3dzZXIgaW5jbHVkZXMgc2Nyb2xsYmFyIGluIHdpbmRvdy5pbm5lcldpZHRoXG4gICAgdmFyIHByb3AgPSAnY2xpZW50JyArIG5hbWU7XG4gICAgdmFyIGRvYyA9IHdpbi5kb2N1bWVudDtcbiAgICB2YXIgYm9keSA9IGRvYy5ib2R5O1xuICAgIHZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBkb2N1bWVudEVsZW1lbnRQcm9wID0gZG9jdW1lbnRFbGVtZW50W3Byb3BdO1xuICAgIC8vIOagh+WHhuaooeW8j+WPliBkb2N1bWVudEVsZW1lbnRcbiAgICAvLyBiYWNrY29tcGF0IOWPliBib2R5XG4gICAgcmV0dXJuIGRvYy5jb21wYXRNb2RlID09PSAnQ1NTMUNvbXBhdCcgJiYgZG9jdW1lbnRFbGVtZW50UHJvcCB8fCBib2R5ICYmIGJvZHlbcHJvcF0gfHwgZG9jdW1lbnRFbGVtZW50UHJvcDtcbiAgfTtcbn0pO1xuXG4vKlxuIOW+l+WIsOWFg+e0oOeahOWkp+Wwj+S/oeaBr1xuIEBwYXJhbSBlbGVtXG4gQHBhcmFtIG5hbWVcbiBAcGFyYW0ge1N0cmluZ30gW2V4dHJhXSAgJ3BhZGRpbmcnIDogKGNzcyB3aWR0aCkgKyBwYWRkaW5nXG4gJ2JvcmRlcicgOiAoY3NzIHdpZHRoKSArIHBhZGRpbmcgKyBib3JkZXJcbiAnbWFyZ2luJyA6IChjc3Mgd2lkdGgpICsgcGFkZGluZyArIGJvcmRlciArIG1hcmdpblxuICovXG5mdW5jdGlvbiBnZXRXSChlbGVtLCBuYW1lLCBleCkge1xuICB2YXIgZXh0cmEgPSBleDtcbiAgaWYgKGlzV2luZG93KGVsZW0pKSB7XG4gICAgcmV0dXJuIG5hbWUgPT09ICd3aWR0aCcgPyBkb21VdGlscy52aWV3cG9ydFdpZHRoKGVsZW0pIDogZG9tVXRpbHMudmlld3BvcnRIZWlnaHQoZWxlbSk7XG4gIH0gZWxzZSBpZiAoZWxlbS5ub2RlVHlwZSA9PT0gOSkge1xuICAgIHJldHVybiBuYW1lID09PSAnd2lkdGgnID8gZG9tVXRpbHMuZG9jV2lkdGgoZWxlbSkgOiBkb21VdGlscy5kb2NIZWlnaHQoZWxlbSk7XG4gIH1cbiAgdmFyIHdoaWNoID0gbmFtZSA9PT0gJ3dpZHRoJyA/IFsnTGVmdCcsICdSaWdodCddIDogWydUb3AnLCAnQm90dG9tJ107XG4gIHZhciBib3JkZXJCb3hWYWx1ZSA9IG5hbWUgPT09ICd3aWR0aCcgPyBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIDogZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZVgoZWxlbSk7XG4gIHZhciBpc0JvcmRlckJveCA9IGlzQm9yZGVyQm94Rm4oZWxlbSwgY29tcHV0ZWRTdHlsZSk7XG4gIHZhciBjc3NCb3hWYWx1ZSA9IDA7XG4gIGlmIChib3JkZXJCb3hWYWx1ZSA9PT0gbnVsbCB8fCBib3JkZXJCb3hWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGJvcmRlckJveFZhbHVlIDw9IDApIHtcbiAgICBib3JkZXJCb3hWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1biBjb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG4gICAgY3NzQm94VmFsdWUgPSBnZXRDb21wdXRlZFN0eWxlWChlbGVtLCBuYW1lKTtcbiAgICBpZiAoY3NzQm94VmFsdWUgPT09IG51bGwgfHwgY3NzQm94VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBOdW1iZXIoY3NzQm94VmFsdWUpIDwgMCkge1xuICAgICAgY3NzQm94VmFsdWUgPSBlbGVtLnN0eWxlW25hbWVdIHx8IDA7XG4gICAgfVxuICAgIC8vIE5vcm1hbGl6ZSAnJywgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG4gICAgY3NzQm94VmFsdWUgPSBwYXJzZUZsb2F0KGNzc0JveFZhbHVlKSB8fCAwO1xuICB9XG4gIGlmIChleHRyYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXh0cmEgPSBpc0JvcmRlckJveCA/IEJPUkRFUl9JTkRFWCA6IENPTlRFTlRfSU5ERVg7XG4gIH1cbiAgdmFyIGJvcmRlckJveFZhbHVlT3JJc0JvcmRlckJveCA9IGJvcmRlckJveFZhbHVlICE9PSB1bmRlZmluZWQgfHwgaXNCb3JkZXJCb3g7XG4gIHZhciB2YWwgPSBib3JkZXJCb3hWYWx1ZSB8fCBjc3NCb3hWYWx1ZTtcbiAgaWYgKGV4dHJhID09PSBDT05URU5UX0lOREVYKSB7XG4gICAgaWYgKGJvcmRlckJveFZhbHVlT3JJc0JvcmRlckJveCkge1xuICAgICAgcmV0dXJuIHZhbCAtIGdldFBCTVdpZHRoKGVsZW0sIFsnYm9yZGVyJywgJ3BhZGRpbmcnXSwgd2hpY2gsIGNvbXB1dGVkU3R5bGUpO1xuICAgIH1cbiAgICByZXR1cm4gY3NzQm94VmFsdWU7XG4gIH0gZWxzZSBpZiAoYm9yZGVyQm94VmFsdWVPcklzQm9yZGVyQm94KSB7XG4gICAgaWYgKGV4dHJhID09PSBCT1JERVJfSU5ERVgpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIHJldHVybiB2YWwgKyAoZXh0cmEgPT09IFBBRERJTkdfSU5ERVggPyAtZ2V0UEJNV2lkdGgoZWxlbSwgWydib3JkZXInXSwgd2hpY2gsIGNvbXB1dGVkU3R5bGUpIDogZ2V0UEJNV2lkdGgoZWxlbSwgWydtYXJnaW4nXSwgd2hpY2gsIGNvbXB1dGVkU3R5bGUpKTtcbiAgfVxuICByZXR1cm4gY3NzQm94VmFsdWUgKyBnZXRQQk1XaWR0aChlbGVtLCBCT1hfTU9ERUxTLnNsaWNlKGV4dHJhKSwgd2hpY2gsIGNvbXB1dGVkU3R5bGUpO1xufVxuXG52YXIgY3NzU2hvdyA9IHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICBkaXNwbGF5OiAnYmxvY2snXG59O1xuXG4vLyBmaXggIzExOSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9raXNzeXRlYW0va2lzc3kvaXNzdWVzLzExOVxuZnVuY3Rpb24gZ2V0V0hJZ25vcmVEaXNwbGF5KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHZhciB2YWwgPSB2b2lkIDA7XG4gIHZhciBlbGVtID0gYXJnc1swXTtcbiAgLy8gaW4gY2FzZSBlbGVtIGlzIHdpbmRvd1xuICAvLyBlbGVtLm9mZnNldFdpZHRoID09PSB1bmRlZmluZWRcbiAgaWYgKGVsZW0ub2Zmc2V0V2lkdGggIT09IDApIHtcbiAgICB2YWwgPSBnZXRXSC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHN3YXAoZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFsID0gZ2V0V0guYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdmFsO1xufVxuXG5lYWNoKFsnd2lkdGgnLCAnaGVpZ2h0J10sIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBmaXJzdCA9IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICBkb21VdGlsc1snb3V0ZXInICsgZmlyc3RdID0gZnVuY3Rpb24gKGVsLCBpbmNsdWRlTWFyZ2luKSB7XG4gICAgcmV0dXJuIGVsICYmIGdldFdISWdub3JlRGlzcGxheShlbCwgbmFtZSwgaW5jbHVkZU1hcmdpbiA/IE1BUkdJTl9JTkRFWCA6IEJPUkRFUl9JTkRFWCk7XG4gIH07XG4gIHZhciB3aGljaCA9IG5hbWUgPT09ICd3aWR0aCcgPyBbJ0xlZnQnLCAnUmlnaHQnXSA6IFsnVG9wJywgJ0JvdHRvbSddO1xuXG4gIGRvbVV0aWxzW25hbWVdID0gZnVuY3Rpb24gKGVsZW0sIHYpIHtcbiAgICB2YXIgdmFsID0gdjtcbiAgICBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChlbGVtKSB7XG4gICAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZVgoZWxlbSk7XG4gICAgICAgIHZhciBpc0JvcmRlckJveCA9IGlzQm9yZGVyQm94Rm4oZWxlbSk7XG4gICAgICAgIGlmIChpc0JvcmRlckJveCkge1xuICAgICAgICAgIHZhbCArPSBnZXRQQk1XaWR0aChlbGVtLCBbJ3BhZGRpbmcnLCAnYm9yZGVyJ10sIHdoaWNoLCBjb21wdXRlZFN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3NzKGVsZW0sIG5hbWUsIHZhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbSAmJiBnZXRXSElnbm9yZURpc3BsYXkoZWxlbSwgbmFtZSwgQ09OVEVOVF9JTkRFWCk7XG4gIH07XG59KTtcblxuZnVuY3Rpb24gbWl4KHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGkgaW4gZnJvbSkge1xuICAgIGlmIChmcm9tLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICB0b1tpXSA9IGZyb21baV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cblxudmFyIHV0aWxzID0ge1xuICBnZXRXaW5kb3c6IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5kb2N1bWVudCAmJiBub2RlLnNldFRpbWVvdXQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICB2YXIgZG9jID0gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGU7XG4gICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICB9LFxuXG4gIGdldERvY3VtZW50OiBnZXREb2N1bWVudCxcbiAgb2Zmc2V0OiBmdW5jdGlvbiBvZmZzZXQoZWwsIHZhbHVlLCBvcHRpb24pIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgc2V0T2Zmc2V0KGVsLCB2YWx1ZSwgb3B0aW9uIHx8IHt9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldE9mZnNldChlbCk7XG4gICAgfVxuICB9LFxuXG4gIGlzV2luZG93OiBpc1dpbmRvdyxcbiAgZWFjaDogZWFjaCxcbiAgY3NzOiBjc3MsXG4gIGNsb25lOiBmdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgICB2YXIgaSA9IHZvaWQgMDtcbiAgICB2YXIgcmV0ID0ge307XG4gICAgZm9yIChpIGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICByZXRbaV0gPSBvYmpbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBvdmVyZmxvdyA9IG9iai5vdmVyZmxvdztcbiAgICBpZiAob3ZlcmZsb3cpIHtcbiAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIHJldC5vdmVyZmxvd1tpXSA9IG9iai5vdmVyZmxvd1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIG1peDogbWl4LFxuICBnZXRXaW5kb3dTY3JvbGxMZWZ0OiBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxMZWZ0KHcpIHtcbiAgICByZXR1cm4gZ2V0U2Nyb2xsTGVmdCh3KTtcbiAgfSxcbiAgZ2V0V2luZG93U2Nyb2xsVG9wOiBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxUb3Aodykge1xuICAgIHJldHVybiBnZXRTY3JvbGxUb3Aodyk7XG4gIH0sXG4gIG1lcmdlOiBmdW5jdGlvbiBtZXJnZSgpIHtcbiAgICB2YXIgcmV0ID0ge307XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMjsgX2tleTMrKykge1xuICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgdXRpbHMubWl4KHJldCwgYXJnc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgdmlld3BvcnRXaWR0aDogMCxcbiAgdmlld3BvcnRIZWlnaHQ6IDBcbn07XG5cbm1peCh1dGlscywgZG9tVXRpbHMpO1xuXG5leHBvcnQgZGVmYXVsdCB1dGlsczsiLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICog5b6X5Yiw5Lya5a+86Ie05YWD57Sg5pi+56S65LiN5YWo55qE56WW5YWI5YWD57SgXG4gKi9cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKHV0aWxzLmlzV2luZG93KGVsZW1lbnQpIHx8IGVsZW1lbnQubm9kZVR5cGUgPT09IDkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBpZSDov5nkuKrkuZ/kuI3mmK/lrozlhajlj6/ooYxcbiAgLypcbiAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNTBweDtoZWlnaHQ6IDEwMHB4O292ZXJmbG93OiBoaWRkZW5cIj5cbiAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNTBweDtoZWlnaHQ6IDEwMHB4O3Bvc2l0aW9uOiByZWxhdGl2ZTtcIiBpZD1cImQ2XCI+XG4gICDlhYPntKAgNiDpq5ggMTAwcHgg5a69IDUwcHg8YnIvPlxuICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgICovXG4gIC8vIGVsZW1lbnQub2Zmc2V0UGFyZW50IGRvZXMgdGhlIHJpZ2h0IHRoaW5nIGluIGllNyBhbmQgYmVsb3cuIFJldHVybiBwYXJlbnQgd2l0aCBsYXlvdXQhXG4gIC8vICBJbiBvdGhlciBicm93c2VycyBpdCBvbmx5IGluY2x1ZGVzIGVsZW1lbnRzIHdpdGggcG9zaXRpb24gYWJzb2x1dGUsIHJlbGF0aXZlIG9yXG4gIC8vIGZpeGVkLCBub3QgZWxlbWVudHMgd2l0aCBvdmVyZmxvdyBzZXQgdG8gYXV0byBvciBzY3JvbGwuXG4gIC8vICAgICAgICBpZiAoVUEuaWUgJiYgaWVNb2RlIDwgOCkge1xuICAvLyAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgLy8gICAgICAgIH1cbiAgLy8g57uf5LiA55qEIG9mZnNldFBhcmVudCDmlrnms5VcbiAgdmFyIGRvYyA9IHV0aWxzLmdldERvY3VtZW50KGVsZW1lbnQpO1xuICB2YXIgYm9keSA9IGRvYy5ib2R5O1xuICB2YXIgcGFyZW50ID0gdm9pZCAwO1xuICB2YXIgcG9zaXRpb25TdHlsZSA9IHV0aWxzLmNzcyhlbGVtZW50LCAncG9zaXRpb24nKTtcbiAgdmFyIHNraXBTdGF0aWMgPSBwb3NpdGlvblN0eWxlID09PSAnZml4ZWQnIHx8IHBvc2l0aW9uU3R5bGUgPT09ICdhYnNvbHV0ZSc7XG5cbiAgaWYgKCFza2lwU3RhdGljKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2h0bWwnID8gbnVsbCA6IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGZvciAocGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOyBwYXJlbnQgJiYgcGFyZW50ICE9PSBib2R5OyBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZSkge1xuICAgIHBvc2l0aW9uU3R5bGUgPSB1dGlscy5jc3MocGFyZW50LCAncG9zaXRpb24nKTtcbiAgICBpZiAocG9zaXRpb25TdHlsZSAhPT0gJ3N0YXRpYycpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRPZmZzZXRQYXJlbnQ7IiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgaXNBbmNlc3RvckZpeGVkIGZyb20gJy4vaXNBbmNlc3RvckZpeGVkJztcblxuLyoqXG4gKiDojrflvpflhYPntKDnmoTmmL7npLrpg6jliIbnmoTljLrln59cbiAqL1xuZnVuY3Rpb24gZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgdmFyIHZpc2libGVSZWN0ID0ge1xuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IEluZmluaXR5LFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IEluZmluaXR5XG4gIH07XG4gIHZhciBlbCA9IGdldE9mZnNldFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGRvYyA9IHV0aWxzLmdldERvY3VtZW50KGVsZW1lbnQpO1xuICB2YXIgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG4gIC8vIERldGVybWluZSB0aGUgc2l6ZSBvZiB0aGUgdmlzaWJsZSByZWN0IGJ5IGNsaW1iaW5nIHRoZSBkb20gYWNjb3VudGluZyBmb3JcbiAgLy8gYWxsIHNjcm9sbGFibGUgY29udGFpbmVycy5cbiAgd2hpbGUgKGVsKSB7XG4gICAgLy8gY2xpZW50V2lkdGggaXMgemVybyBmb3IgaW5saW5lIGJsb2NrIGVsZW1lbnRzIGluIGllLlxuICAgIGlmICgobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgPT09IC0xIHx8IGVsLmNsaWVudFdpZHRoICE9PSAwKSAmJlxuICAgIC8vIGJvZHkgbWF5IGhhdmUgb3ZlcmZsb3cgc2V0IG9uIGl0LCB5ZXQgd2Ugc3RpbGwgZ2V0IHRoZSBlbnRpcmVcbiAgICAvLyB2aWV3cG9ydC4gSW4gc29tZSBicm93c2VycywgZWwub2Zmc2V0UGFyZW50IG1heSBiZVxuICAgIC8vIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgc28gY2hlY2sgZm9yIHRoYXQgdG9vLlxuICAgIGVsICE9PSBib2R5ICYmIGVsICE9PSBkb2N1bWVudEVsZW1lbnQgJiYgdXRpbHMuY3NzKGVsLCAnb3ZlcmZsb3cnKSAhPT0gJ3Zpc2libGUnKSB7XG4gICAgICB2YXIgcG9zID0gdXRpbHMub2Zmc2V0KGVsKTtcbiAgICAgIC8vIGFkZCBib3JkZXJcbiAgICAgIHBvcy5sZWZ0ICs9IGVsLmNsaWVudExlZnQ7XG4gICAgICBwb3MudG9wICs9IGVsLmNsaWVudFRvcDtcbiAgICAgIHZpc2libGVSZWN0LnRvcCA9IE1hdGgubWF4KHZpc2libGVSZWN0LnRvcCwgcG9zLnRvcCk7XG4gICAgICB2aXNpYmxlUmVjdC5yaWdodCA9IE1hdGgubWluKHZpc2libGVSZWN0LnJpZ2h0LFxuICAgICAgLy8gY29uc2lkZXIgYXJlYSB3aXRob3V0IHNjcm9sbEJhclxuICAgICAgcG9zLmxlZnQgKyBlbC5jbGllbnRXaWR0aCk7XG4gICAgICB2aXNpYmxlUmVjdC5ib3R0b20gPSBNYXRoLm1pbih2aXNpYmxlUmVjdC5ib3R0b20sIHBvcy50b3AgKyBlbC5jbGllbnRIZWlnaHQpO1xuICAgICAgdmlzaWJsZVJlY3QubGVmdCA9IE1hdGgubWF4KHZpc2libGVSZWN0LmxlZnQsIHBvcy5sZWZ0KTtcbiAgICB9IGVsc2UgaWYgKGVsID09PSBib2R5IHx8IGVsID09PSBkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBlbCA9IGdldE9mZnNldFBhcmVudChlbCk7XG4gIH1cblxuICAvLyBTZXQgZWxlbWVudCBwb3NpdGlvbiB0byBmaXhlZFxuICAvLyBtYWtlIHN1cmUgYWJzb2x1dGUgZWxlbWVudCBpdHNlbGYgZG9uJ3QgYWZmZWN0IGl0J3MgdmlzaWJsZSBhcmVhXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzc2MDFcbiAgdmFyIG9yaWdpbmFsUG9zaXRpb24gPSBudWxsO1xuICBpZiAoIXV0aWxzLmlzV2luZG93KGVsZW1lbnQpICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDkpIHtcbiAgICBvcmlnaW5hbFBvc2l0aW9uID0gZWxlbWVudC5zdHlsZS5wb3NpdGlvbjtcbiAgICB2YXIgcG9zaXRpb24gPSB1dGlscy5jc3MoZWxlbWVudCwgJ3Bvc2l0aW9uJyk7XG4gICAgaWYgKHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICB9XG4gIH1cblxuICB2YXIgc2Nyb2xsWCA9IHV0aWxzLmdldFdpbmRvd1Njcm9sbExlZnQod2luKTtcbiAgdmFyIHNjcm9sbFkgPSB1dGlscy5nZXRXaW5kb3dTY3JvbGxUb3Aod2luKTtcbiAgdmFyIHZpZXdwb3J0V2lkdGggPSB1dGlscy52aWV3cG9ydFdpZHRoKHdpbik7XG4gIHZhciB2aWV3cG9ydEhlaWdodCA9IHV0aWxzLnZpZXdwb3J0SGVpZ2h0KHdpbik7XG4gIHZhciBkb2N1bWVudFdpZHRoID0gZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoO1xuICB2YXIgZG9jdW1lbnRIZWlnaHQgPSBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuXG4gIC8vIFJlc2V0IGVsZW1lbnQgcG9zaXRpb24gYWZ0ZXIgY2FsY3VsYXRlIHRoZSB2aXNpYmxlIGFyZWFcbiAgaWYgKGVsZW1lbnQuc3R5bGUpIHtcbiAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gb3JpZ2luYWxQb3NpdGlvbjtcbiAgfVxuXG4gIGlmIChpc0FuY2VzdG9yRml4ZWQoZWxlbWVudCkpIHtcbiAgICAvLyBDbGlwIGJ5IHZpZXdwb3J0J3Mgc2l6ZS5cbiAgICB2aXNpYmxlUmVjdC5sZWZ0ID0gTWF0aC5tYXgodmlzaWJsZVJlY3QubGVmdCwgc2Nyb2xsWCk7XG4gICAgdmlzaWJsZVJlY3QudG9wID0gTWF0aC5tYXgodmlzaWJsZVJlY3QudG9wLCBzY3JvbGxZKTtcbiAgICB2aXNpYmxlUmVjdC5yaWdodCA9IE1hdGgubWluKHZpc2libGVSZWN0LnJpZ2h0LCBzY3JvbGxYICsgdmlld3BvcnRXaWR0aCk7XG4gICAgdmlzaWJsZVJlY3QuYm90dG9tID0gTWF0aC5taW4odmlzaWJsZVJlY3QuYm90dG9tLCBzY3JvbGxZICsgdmlld3BvcnRIZWlnaHQpO1xuICB9IGVsc2Uge1xuICAgIC8vIENsaXAgYnkgZG9jdW1lbnQncyBzaXplLlxuICAgIHZhciBtYXhWaXNpYmxlV2lkdGggPSBNYXRoLm1heChkb2N1bWVudFdpZHRoLCBzY3JvbGxYICsgdmlld3BvcnRXaWR0aCk7XG4gICAgdmlzaWJsZVJlY3QucmlnaHQgPSBNYXRoLm1pbih2aXNpYmxlUmVjdC5yaWdodCwgbWF4VmlzaWJsZVdpZHRoKTtcblxuICAgIHZhciBtYXhWaXNpYmxlSGVpZ2h0ID0gTWF0aC5tYXgoZG9jdW1lbnRIZWlnaHQsIHNjcm9sbFkgKyB2aWV3cG9ydEhlaWdodCk7XG4gICAgdmlzaWJsZVJlY3QuYm90dG9tID0gTWF0aC5taW4odmlzaWJsZVJlY3QuYm90dG9tLCBtYXhWaXNpYmxlSGVpZ2h0KTtcbiAgfVxuXG4gIHJldHVybiB2aXNpYmxlUmVjdC50b3AgPj0gMCAmJiB2aXNpYmxlUmVjdC5sZWZ0ID49IDAgJiYgdmlzaWJsZVJlY3QuYm90dG9tID4gdmlzaWJsZVJlY3QudG9wICYmIHZpc2libGVSZWN0LnJpZ2h0ID4gdmlzaWJsZVJlY3QubGVmdCA/IHZpc2libGVSZWN0IDogbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50OyIsImltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBbmNlc3RvckZpeGVkKGVsZW1lbnQpIHtcbiAgaWYgKHV0aWxzLmlzV2luZG93KGVsZW1lbnQpIHx8IGVsZW1lbnQubm9kZVR5cGUgPT09IDkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZG9jID0gdXRpbHMuZ2V0RG9jdW1lbnQoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gIHZhciBwYXJlbnQgPSBudWxsO1xuICBmb3IgKHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsgcGFyZW50ICYmIHBhcmVudCAhPT0gYm9keTsgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUpIHtcbiAgICB2YXIgcG9zaXRpb25TdHlsZSA9IHV0aWxzLmNzcyhwYXJlbnQsICdwb3NpdGlvbicpO1xuICAgIGlmIChwb3NpdGlvblN0eWxlID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSIsImltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gYWRqdXN0Rm9yVmlld3BvcnQoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCwgb3ZlcmZsb3cpIHtcbiAgdmFyIHBvcyA9IHV0aWxzLmNsb25lKGVsRnV0dXJlUG9zKTtcbiAgdmFyIHNpemUgPSB7XG4gICAgd2lkdGg6IGVsUmVnaW9uLndpZHRoLFxuICAgIGhlaWdodDogZWxSZWdpb24uaGVpZ2h0XG4gIH07XG5cbiAgaWYgKG92ZXJmbG93LmFkanVzdFggJiYgcG9zLmxlZnQgPCB2aXNpYmxlUmVjdC5sZWZ0KSB7XG4gICAgcG9zLmxlZnQgPSB2aXNpYmxlUmVjdC5sZWZ0O1xuICB9XG5cbiAgLy8gTGVmdCBlZGdlIGluc2lkZSBhbmQgcmlnaHQgZWRnZSBvdXRzaWRlIHZpZXdwb3J0LCB0cnkgdG8gcmVzaXplIGl0LlxuICBpZiAob3ZlcmZsb3cucmVzaXplV2lkdGggJiYgcG9zLmxlZnQgPj0gdmlzaWJsZVJlY3QubGVmdCAmJiBwb3MubGVmdCArIHNpemUud2lkdGggPiB2aXNpYmxlUmVjdC5yaWdodCkge1xuICAgIHNpemUud2lkdGggLT0gcG9zLmxlZnQgKyBzaXplLndpZHRoIC0gdmlzaWJsZVJlY3QucmlnaHQ7XG4gIH1cblxuICAvLyBSaWdodCBlZGdlIG91dHNpZGUgdmlld3BvcnQsIHRyeSB0byBtb3ZlIGl0LlxuICBpZiAob3ZlcmZsb3cuYWRqdXN0WCAmJiBwb3MubGVmdCArIHNpemUud2lkdGggPiB2aXNpYmxlUmVjdC5yaWdodCkge1xuICAgIC8vIOS/neivgeW3pui+ueeVjOWSjOWPr+inhuWMuuWfn+W3pui+ueeVjOWvuem9kFxuICAgIHBvcy5sZWZ0ID0gTWF0aC5tYXgodmlzaWJsZVJlY3QucmlnaHQgLSBzaXplLndpZHRoLCB2aXNpYmxlUmVjdC5sZWZ0KTtcbiAgfVxuXG4gIC8vIFRvcCBlZGdlIG91dHNpZGUgdmlld3BvcnQsIHRyeSB0byBtb3ZlIGl0LlxuICBpZiAob3ZlcmZsb3cuYWRqdXN0WSAmJiBwb3MudG9wIDwgdmlzaWJsZVJlY3QudG9wKSB7XG4gICAgcG9zLnRvcCA9IHZpc2libGVSZWN0LnRvcDtcbiAgfVxuXG4gIC8vIFRvcCBlZGdlIGluc2lkZSBhbmQgYm90dG9tIGVkZ2Ugb3V0c2lkZSB2aWV3cG9ydCwgdHJ5IHRvIHJlc2l6ZSBpdC5cbiAgaWYgKG92ZXJmbG93LnJlc2l6ZUhlaWdodCAmJiBwb3MudG9wID49IHZpc2libGVSZWN0LnRvcCAmJiBwb3MudG9wICsgc2l6ZS5oZWlnaHQgPiB2aXNpYmxlUmVjdC5ib3R0b20pIHtcbiAgICBzaXplLmhlaWdodCAtPSBwb3MudG9wICsgc2l6ZS5oZWlnaHQgLSB2aXNpYmxlUmVjdC5ib3R0b207XG4gIH1cblxuICAvLyBCb3R0b20gZWRnZSBvdXRzaWRlIHZpZXdwb3J0LCB0cnkgdG8gbW92ZSBpdC5cbiAgaWYgKG92ZXJmbG93LmFkanVzdFkgJiYgcG9zLnRvcCArIHNpemUuaGVpZ2h0ID4gdmlzaWJsZVJlY3QuYm90dG9tKSB7XG4gICAgLy8g5L+d6K+B5LiK6L6555WM5ZKM5Y+v6KeG5Yy65Z+f5LiK6L6555WM5a+56b2QXG4gICAgcG9zLnRvcCA9IE1hdGgubWF4KHZpc2libGVSZWN0LmJvdHRvbSAtIHNpemUuaGVpZ2h0LCB2aXNpYmxlUmVjdC50b3ApO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLm1peChwb3MsIHNpemUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhZGp1c3RGb3JWaWV3cG9ydDsiLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbmZ1bmN0aW9uIGdldFJlZ2lvbihub2RlKSB7XG4gIHZhciBvZmZzZXQgPSB2b2lkIDA7XG4gIHZhciB3ID0gdm9pZCAwO1xuICB2YXIgaCA9IHZvaWQgMDtcbiAgaWYgKCF1dGlscy5pc1dpbmRvdyhub2RlKSAmJiBub2RlLm5vZGVUeXBlICE9PSA5KSB7XG4gICAgb2Zmc2V0ID0gdXRpbHMub2Zmc2V0KG5vZGUpO1xuICAgIHcgPSB1dGlscy5vdXRlcldpZHRoKG5vZGUpO1xuICAgIGggPSB1dGlscy5vdXRlckhlaWdodChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgd2luID0gdXRpbHMuZ2V0V2luZG93KG5vZGUpO1xuICAgIG9mZnNldCA9IHtcbiAgICAgIGxlZnQ6IHV0aWxzLmdldFdpbmRvd1Njcm9sbExlZnQod2luKSxcbiAgICAgIHRvcDogdXRpbHMuZ2V0V2luZG93U2Nyb2xsVG9wKHdpbilcbiAgICB9O1xuICAgIHcgPSB1dGlscy52aWV3cG9ydFdpZHRoKHdpbik7XG4gICAgaCA9IHV0aWxzLnZpZXdwb3J0SGVpZ2h0KHdpbik7XG4gIH1cbiAgb2Zmc2V0LndpZHRoID0gdztcbiAgb2Zmc2V0LmhlaWdodCA9IGg7XG4gIHJldHVybiBvZmZzZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJlZ2lvbjsiLCIvKipcbiAqIOiOt+WPliBub2RlIOS4iueahCBhbGlnbiDlr7npvZDngrkg55u45a+55LqO6aG16Z2i55qE5Z2Q5qCHXG4gKi9cblxuZnVuY3Rpb24gZ2V0QWxpZ25PZmZzZXQocmVnaW9uLCBhbGlnbikge1xuICB2YXIgViA9IGFsaWduLmNoYXJBdCgwKTtcbiAgdmFyIEggPSBhbGlnbi5jaGFyQXQoMSk7XG4gIHZhciB3ID0gcmVnaW9uLndpZHRoO1xuICB2YXIgaCA9IHJlZ2lvbi5oZWlnaHQ7XG5cbiAgdmFyIHggPSByZWdpb24ubGVmdDtcbiAgdmFyIHkgPSByZWdpb24udG9wO1xuXG4gIGlmIChWID09PSAnYycpIHtcbiAgICB5ICs9IGggLyAyO1xuICB9IGVsc2UgaWYgKFYgPT09ICdiJykge1xuICAgIHkgKz0gaDtcbiAgfVxuXG4gIGlmIChIID09PSAnYycpIHtcbiAgICB4ICs9IHcgLyAyO1xuICB9IGVsc2UgaWYgKEggPT09ICdyJykge1xuICAgIHggKz0gdztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGVmdDogeCxcbiAgICB0b3A6IHlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxpZ25PZmZzZXQ7IiwiaW1wb3J0IGdldEFsaWduT2Zmc2V0IGZyb20gJy4vZ2V0QWxpZ25PZmZzZXQnO1xuXG5mdW5jdGlvbiBnZXRFbEZ1dHVyZVBvcyhlbFJlZ2lvbiwgcmVmTm9kZVJlZ2lvbiwgcG9pbnRzLCBvZmZzZXQsIHRhcmdldE9mZnNldCkge1xuICB2YXIgcDEgPSBnZXRBbGlnbk9mZnNldChyZWZOb2RlUmVnaW9uLCBwb2ludHNbMV0pO1xuICB2YXIgcDIgPSBnZXRBbGlnbk9mZnNldChlbFJlZ2lvbiwgcG9pbnRzWzBdKTtcbiAgdmFyIGRpZmYgPSBbcDIubGVmdCAtIHAxLmxlZnQsIHAyLnRvcCAtIHAxLnRvcF07XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBlbFJlZ2lvbi5sZWZ0IC0gZGlmZlswXSArIG9mZnNldFswXSAtIHRhcmdldE9mZnNldFswXSxcbiAgICB0b3A6IGVsUmVnaW9uLnRvcCAtIGRpZmZbMV0gKyBvZmZzZXRbMV0gLSB0YXJnZXRPZmZzZXRbMV1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0RWxGdXR1cmVQb3M7IiwiLyoqXG4gKiBhbGlnbiBkb20gbm9kZSBmbGV4aWJseVxuICogQGF1dGhvciB5aW1pbmdoZUBnbWFpbC5jb21cbiAqL1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IGdldFZpc2libGVSZWN0Rm9yRWxlbWVudCBmcm9tICcuLi9nZXRWaXNpYmxlUmVjdEZvckVsZW1lbnQnO1xuaW1wb3J0IGFkanVzdEZvclZpZXdwb3J0IGZyb20gJy4uL2FkanVzdEZvclZpZXdwb3J0JztcbmltcG9ydCBnZXRSZWdpb24gZnJvbSAnLi4vZ2V0UmVnaW9uJztcbmltcG9ydCBnZXRFbEZ1dHVyZVBvcyBmcm9tICcuLi9nZXRFbEZ1dHVyZVBvcyc7XG5cbi8vIGh0dHA6Ly95aW1pbmdoZS5pdGV5ZS5jb20vYmxvZy8xMTI0NzIwXG5cbmZ1bmN0aW9uIGlzRmFpbFgoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCkge1xuICByZXR1cm4gZWxGdXR1cmVQb3MubGVmdCA8IHZpc2libGVSZWN0LmxlZnQgfHwgZWxGdXR1cmVQb3MubGVmdCArIGVsUmVnaW9uLndpZHRoID4gdmlzaWJsZVJlY3QucmlnaHQ7XG59XG5cbmZ1bmN0aW9uIGlzRmFpbFkoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCkge1xuICByZXR1cm4gZWxGdXR1cmVQb3MudG9wIDwgdmlzaWJsZVJlY3QudG9wIHx8IGVsRnV0dXJlUG9zLnRvcCArIGVsUmVnaW9uLmhlaWdodCA+IHZpc2libGVSZWN0LmJvdHRvbTtcbn1cblxuZnVuY3Rpb24gaXNDb21wbGV0ZUZhaWxYKGVsRnV0dXJlUG9zLCBlbFJlZ2lvbiwgdmlzaWJsZVJlY3QpIHtcbiAgcmV0dXJuIGVsRnV0dXJlUG9zLmxlZnQgPiB2aXNpYmxlUmVjdC5yaWdodCB8fCBlbEZ1dHVyZVBvcy5sZWZ0ICsgZWxSZWdpb24ud2lkdGggPCB2aXNpYmxlUmVjdC5sZWZ0O1xufVxuXG5mdW5jdGlvbiBpc0NvbXBsZXRlRmFpbFkoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCkge1xuICByZXR1cm4gZWxGdXR1cmVQb3MudG9wID4gdmlzaWJsZVJlY3QuYm90dG9tIHx8IGVsRnV0dXJlUG9zLnRvcCArIGVsUmVnaW9uLmhlaWdodCA8IHZpc2libGVSZWN0LnRvcDtcbn1cblxuZnVuY3Rpb24gZmxpcChwb2ludHMsIHJlZywgbWFwKSB7XG4gIHZhciByZXQgPSBbXTtcbiAgdXRpbHMuZWFjaChwb2ludHMsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0LnB1c2gocC5yZXBsYWNlKHJlZywgZnVuY3Rpb24gKG0pIHtcbiAgICAgIHJldHVybiBtYXBbbV07XG4gICAgfSkpO1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZmxpcE9mZnNldChvZmZzZXQsIGluZGV4KSB7XG4gIG9mZnNldFtpbmRleF0gPSAtb2Zmc2V0W2luZGV4XTtcbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gY29udmVydE9mZnNldChzdHIsIG9mZnNldExlbikge1xuICB2YXIgbiA9IHZvaWQgMDtcbiAgaWYgKC8lJC8udGVzdChzdHIpKSB7XG4gICAgbiA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpLCAxMCkgLyAxMDAgKiBvZmZzZXRMZW47XG4gIH0gZWxzZSB7XG4gICAgbiA9IHBhcnNlSW50KHN0ciwgMTApO1xuICB9XG4gIHJldHVybiBuIHx8IDA7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9mZnNldChvZmZzZXQsIGVsKSB7XG4gIG9mZnNldFswXSA9IGNvbnZlcnRPZmZzZXQob2Zmc2V0WzBdLCBlbC53aWR0aCk7XG4gIG9mZnNldFsxXSA9IGNvbnZlcnRPZmZzZXQob2Zmc2V0WzFdLCBlbC5oZWlnaHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSBlbFxuICogQHBhcmFtIHRndFJlZ2lvbiDlj4LnhafoioLngrnmiYDljaDnmoTljLrln586IHsgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0IH1cbiAqIEBwYXJhbSBhbGlnblxuICovXG5mdW5jdGlvbiBkb0FsaWduKGVsLCB0Z3RSZWdpb24sIGFsaWduLCBpc1RndFJlZ2lvblZpc2libGUpIHtcbiAgdmFyIHBvaW50cyA9IGFsaWduLnBvaW50cztcbiAgdmFyIG9mZnNldCA9IGFsaWduLm9mZnNldCB8fCBbMCwgMF07XG4gIHZhciB0YXJnZXRPZmZzZXQgPSBhbGlnbi50YXJnZXRPZmZzZXQgfHwgWzAsIDBdO1xuICB2YXIgb3ZlcmZsb3cgPSBhbGlnbi5vdmVyZmxvdztcbiAgdmFyIHNvdXJjZSA9IGFsaWduLnNvdXJjZSB8fCBlbDtcbiAgb2Zmc2V0ID0gW10uY29uY2F0KG9mZnNldCk7XG4gIHRhcmdldE9mZnNldCA9IFtdLmNvbmNhdCh0YXJnZXRPZmZzZXQpO1xuICBvdmVyZmxvdyA9IG92ZXJmbG93IHx8IHt9O1xuICB2YXIgbmV3T3ZlcmZsb3dDZmcgPSB7fTtcbiAgdmFyIGZhaWwgPSAwO1xuICAvLyDlvZPliY3oioLngrnlj6/ku6XooqvmlL7nva7nmoTmmL7npLrljLrln59cbiAgdmFyIHZpc2libGVSZWN0ID0gZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50KHNvdXJjZSk7XG4gIC8vIOW9k+WJjeiKgueCueaJgOWNoOeahOWMuuWfnywgbGVmdC90b3Avd2lkdGgvaGVpZ2h0XG4gIHZhciBlbFJlZ2lvbiA9IGdldFJlZ2lvbihzb3VyY2UpO1xuICAvLyDlsIYgb2Zmc2V0IOi9rOaNouaIkOaVsOWAvO+8jOaUr+aMgeeZvuWIhuavlFxuICBub3JtYWxpemVPZmZzZXQob2Zmc2V0LCBlbFJlZ2lvbik7XG4gIG5vcm1hbGl6ZU9mZnNldCh0YXJnZXRPZmZzZXQsIHRndFJlZ2lvbik7XG4gIC8vIOW9k+WJjeiKgueCueWwhuimgeiiq+aUvue9rueahOS9jee9rlxuICB2YXIgZWxGdXR1cmVQb3MgPSBnZXRFbEZ1dHVyZVBvcyhlbFJlZ2lvbiwgdGd0UmVnaW9uLCBwb2ludHMsIG9mZnNldCwgdGFyZ2V0T2Zmc2V0KTtcbiAgLy8g5b2T5YmN6IqC54K55bCG6KaB5omA5aSE55qE5Yy65Z+fXG4gIHZhciBuZXdFbFJlZ2lvbiA9IHV0aWxzLm1lcmdlKGVsUmVnaW9uLCBlbEZ1dHVyZVBvcyk7XG5cbiAgLy8g5aaC5p6c5Y+v6KeG5Yy65Z+f5LiN6IO95a6M5YWo5pS+572u5b2T5YmN6IqC54K55pe25YWB6K646LCD5pW0XG4gIGlmICh2aXNpYmxlUmVjdCAmJiAob3ZlcmZsb3cuYWRqdXN0WCB8fCBvdmVyZmxvdy5hZGp1c3RZKSAmJiBpc1RndFJlZ2lvblZpc2libGUpIHtcbiAgICBpZiAob3ZlcmZsb3cuYWRqdXN0WCkge1xuICAgICAgLy8g5aaC5p6c5qiq5ZCR5LiN6IO95pS+5LiLXG4gICAgICBpZiAoaXNGYWlsWChlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSkge1xuICAgICAgICAvLyDlr7npvZDkvY3nva7lj43kuItcbiAgICAgICAgdmFyIG5ld1BvaW50cyA9IGZsaXAocG9pbnRzLCAvW2xyXS9pZywge1xuICAgICAgICAgIGw6ICdyJyxcbiAgICAgICAgICByOiAnbCdcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIOWBj+enu+mHj+S5n+WPjeS4i1xuICAgICAgICB2YXIgbmV3T2Zmc2V0ID0gZmxpcE9mZnNldChvZmZzZXQsIDApO1xuICAgICAgICB2YXIgbmV3VGFyZ2V0T2Zmc2V0ID0gZmxpcE9mZnNldCh0YXJnZXRPZmZzZXQsIDApO1xuICAgICAgICB2YXIgbmV3RWxGdXR1cmVQb3MgPSBnZXRFbEZ1dHVyZVBvcyhlbFJlZ2lvbiwgdGd0UmVnaW9uLCBuZXdQb2ludHMsIG5ld09mZnNldCwgbmV3VGFyZ2V0T2Zmc2V0KTtcblxuICAgICAgICBpZiAoIWlzQ29tcGxldGVGYWlsWChuZXdFbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSkge1xuICAgICAgICAgIGZhaWwgPSAxO1xuICAgICAgICAgIHBvaW50cyA9IG5ld1BvaW50cztcbiAgICAgICAgICBvZmZzZXQgPSBuZXdPZmZzZXQ7XG4gICAgICAgICAgdGFyZ2V0T2Zmc2V0ID0gbmV3VGFyZ2V0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG92ZXJmbG93LmFkanVzdFkpIHtcbiAgICAgIC8vIOWmguaenOe6teWQkeS4jeiDveaUvuS4i1xuICAgICAgaWYgKGlzRmFpbFkoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCkpIHtcbiAgICAgICAgLy8g5a+56b2Q5L2N572u5Y+N5LiLXG4gICAgICAgIHZhciBfbmV3UG9pbnRzID0gZmxpcChwb2ludHMsIC9bdGJdL2lnLCB7XG4gICAgICAgICAgdDogJ2InLFxuICAgICAgICAgIGI6ICd0J1xuICAgICAgICB9KTtcbiAgICAgICAgLy8g5YGP56e76YeP5Lmf5Y+N5LiLXG4gICAgICAgIHZhciBfbmV3T2Zmc2V0ID0gZmxpcE9mZnNldChvZmZzZXQsIDEpO1xuICAgICAgICB2YXIgX25ld1RhcmdldE9mZnNldCA9IGZsaXBPZmZzZXQodGFyZ2V0T2Zmc2V0LCAxKTtcbiAgICAgICAgdmFyIF9uZXdFbEZ1dHVyZVBvcyA9IGdldEVsRnV0dXJlUG9zKGVsUmVnaW9uLCB0Z3RSZWdpb24sIF9uZXdQb2ludHMsIF9uZXdPZmZzZXQsIF9uZXdUYXJnZXRPZmZzZXQpO1xuXG4gICAgICAgIGlmICghaXNDb21wbGV0ZUZhaWxZKF9uZXdFbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSkge1xuICAgICAgICAgIGZhaWwgPSAxO1xuICAgICAgICAgIHBvaW50cyA9IF9uZXdQb2ludHM7XG4gICAgICAgICAgb2Zmc2V0ID0gX25ld09mZnNldDtcbiAgICAgICAgICB0YXJnZXRPZmZzZXQgPSBfbmV3VGFyZ2V0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g5aaC5p6c5aSx6LSl77yM6YeN5paw6K6h566X5b2T5YmN6IqC54K55bCG6KaB6KKr5pS+572u55qE5L2N572uXG4gICAgaWYgKGZhaWwpIHtcbiAgICAgIGVsRnV0dXJlUG9zID0gZ2V0RWxGdXR1cmVQb3MoZWxSZWdpb24sIHRndFJlZ2lvbiwgcG9pbnRzLCBvZmZzZXQsIHRhcmdldE9mZnNldCk7XG4gICAgICB1dGlscy5taXgobmV3RWxSZWdpb24sIGVsRnV0dXJlUG9zKTtcbiAgICB9XG4gICAgdmFyIGlzU3RpbGxGYWlsWCA9IGlzRmFpbFgoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCk7XG4gICAgdmFyIGlzU3RpbGxGYWlsWSA9IGlzRmFpbFkoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCk7XG4gICAgLy8g5qOA5p+l5Y+N5LiL5ZCO55qE5L2N572u5piv5ZCm5Y+v5Lul5pS+5LiL5LqG77yM5aaC5p6c5LuN54S25pS+5LiN5LiL77yaXG4gICAgLy8gMS4g5aSN5Y6f5L+u5pS56L+H55qE5a6a5L2N5Y+C5pWwXG4gICAgaWYgKGlzU3RpbGxGYWlsWCB8fCBpc1N0aWxsRmFpbFkpIHtcbiAgICAgIHBvaW50cyA9IGFsaWduLnBvaW50cztcbiAgICAgIG9mZnNldCA9IGFsaWduLm9mZnNldCB8fCBbMCwgMF07XG4gICAgICB0YXJnZXRPZmZzZXQgPSBhbGlnbi50YXJnZXRPZmZzZXQgfHwgWzAsIDBdO1xuICAgIH1cbiAgICAvLyAyLiDlj6rmnInmjIflrprkuoblj6/ku6XosIPmlbTlvZPliY3mlrnlkJHmiY3osIPmlbRcbiAgICBuZXdPdmVyZmxvd0NmZy5hZGp1c3RYID0gb3ZlcmZsb3cuYWRqdXN0WCAmJiBpc1N0aWxsRmFpbFg7XG4gICAgbmV3T3ZlcmZsb3dDZmcuYWRqdXN0WSA9IG92ZXJmbG93LmFkanVzdFkgJiYgaXNTdGlsbEZhaWxZO1xuXG4gICAgLy8g56Gu5a6e6KaB6LCD5pW077yM55Sa6Iez5Y+v6IO95Lya6LCD5pW06auY5bqm5a695bqmXG4gICAgaWYgKG5ld092ZXJmbG93Q2ZnLmFkanVzdFggfHwgbmV3T3ZlcmZsb3dDZmcuYWRqdXN0WSkge1xuICAgICAgbmV3RWxSZWdpb24gPSBhZGp1c3RGb3JWaWV3cG9ydChlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0LCBuZXdPdmVyZmxvd0NmZyk7XG4gICAgfVxuICB9XG5cbiAgLy8gbmVlZCBqdWRnZSB0byBpbiBjYXNlIHNldCBmaXhlZCB3aXRoIGluIGNzcyBvbiBoZWlnaHQgYXV0byBlbGVtZW50XG4gIGlmIChuZXdFbFJlZ2lvbi53aWR0aCAhPT0gZWxSZWdpb24ud2lkdGgpIHtcbiAgICB1dGlscy5jc3Moc291cmNlLCAnd2lkdGgnLCB1dGlscy53aWR0aChzb3VyY2UpICsgbmV3RWxSZWdpb24ud2lkdGggLSBlbFJlZ2lvbi53aWR0aCk7XG4gIH1cblxuICBpZiAobmV3RWxSZWdpb24uaGVpZ2h0ICE9PSBlbFJlZ2lvbi5oZWlnaHQpIHtcbiAgICB1dGlscy5jc3Moc291cmNlLCAnaGVpZ2h0JywgdXRpbHMuaGVpZ2h0KHNvdXJjZSkgKyBuZXdFbFJlZ2lvbi5oZWlnaHQgLSBlbFJlZ2lvbi5oZWlnaHQpO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2tpc3N5dGVhbS9raXNzeS9pc3N1ZXMvMTkwXG4gIC8vIOebuOWvueS6juWxj+W5leS9jee9ruayoeWPmO+8jOiAjCBsZWZ0L3RvcCDlj5jkuoZcbiAgLy8g5L6L5aaCIDxkaXYgJ3JlbGF0aXZlJz48ZWwgYWJzb2x1dGU+PC9kaXY+XG4gIHV0aWxzLm9mZnNldChzb3VyY2UsIHtcbiAgICBsZWZ0OiBuZXdFbFJlZ2lvbi5sZWZ0LFxuICAgIHRvcDogbmV3RWxSZWdpb24udG9wXG4gIH0sIHtcbiAgICB1c2VDc3NSaWdodDogYWxpZ24udXNlQ3NzUmlnaHQsXG4gICAgdXNlQ3NzQm90dG9tOiBhbGlnbi51c2VDc3NCb3R0b20sXG4gICAgdXNlQ3NzVHJhbnNmb3JtOiBhbGlnbi51c2VDc3NUcmFuc2Zvcm0sXG4gICAgaWdub3JlU2hha2U6IGFsaWduLmlnbm9yZVNoYWtlXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgcG9pbnRzOiBwb2ludHMsXG4gICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXQsXG4gICAgb3ZlcmZsb3c6IG5ld092ZXJmbG93Q2ZnXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRvQWxpZ247XG4vKipcbiAqICAyMDEyLTA0LTI2IHlpbWluZ2hlQGdtYWlsLmNvbVxuICogICAtIOS8mOWMluaZuuiDveWvuem9kOeul+azlVxuICogICAtIOaFjueUqCByZXNpemVYWFxuICpcbiAqICAyMDExLTA3LTEzIHlpbWluZ2hlQGdtYWlsLmNvbSBub3RlOlxuICogICAtIOWinuWKoOaZuuiDveWvuem9kO+8jOS7peWPiuWkp+Wwj+iwg+aVtOmAiemhuVxuICoqLyIsImltcG9ydCBkb0FsaWduIGZyb20gJy4vYWxpZ24nO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuLi9nZXRPZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldFZpc2libGVSZWN0Rm9yRWxlbWVudCBmcm9tICcuLi9nZXRWaXNpYmxlUmVjdEZvckVsZW1lbnQnO1xuaW1wb3J0IGdldFJlZ2lvbiBmcm9tICcuLi9nZXRSZWdpb24nO1xuXG5mdW5jdGlvbiBpc091dE9mVmlzaWJsZVJlY3QodGFyZ2V0KSB7XG4gIHZhciB2aXNpYmxlUmVjdCA9IGdldFZpc2libGVSZWN0Rm9yRWxlbWVudCh0YXJnZXQpO1xuICB2YXIgdGFyZ2V0UmVnaW9uID0gZ2V0UmVnaW9uKHRhcmdldCk7XG5cbiAgcmV0dXJuICF2aXNpYmxlUmVjdCB8fCB0YXJnZXRSZWdpb24ubGVmdCArIHRhcmdldFJlZ2lvbi53aWR0aCA8PSB2aXNpYmxlUmVjdC5sZWZ0IHx8IHRhcmdldFJlZ2lvbi50b3AgKyB0YXJnZXRSZWdpb24uaGVpZ2h0IDw9IHZpc2libGVSZWN0LnRvcCB8fCB0YXJnZXRSZWdpb24ubGVmdCA+PSB2aXNpYmxlUmVjdC5yaWdodCB8fCB0YXJnZXRSZWdpb24udG9wID49IHZpc2libGVSZWN0LmJvdHRvbTtcbn1cblxuZnVuY3Rpb24gYWxpZ25FbGVtZW50KGVsLCByZWZOb2RlLCBhbGlnbikge1xuICB2YXIgdGFyZ2V0ID0gYWxpZ24udGFyZ2V0IHx8IHJlZk5vZGU7XG4gIHZhciByZWZOb2RlUmVnaW9uID0gZ2V0UmVnaW9uKHRhcmdldCk7XG5cbiAgdmFyIGlzVGFyZ2V0Tm90T3V0T2ZWaXNpYmxlID0gIWlzT3V0T2ZWaXNpYmxlUmVjdCh0YXJnZXQpO1xuXG4gIHJldHVybiBkb0FsaWduKGVsLCByZWZOb2RlUmVnaW9uLCBhbGlnbiwgaXNUYXJnZXROb3RPdXRPZlZpc2libGUpO1xufVxuXG5hbGlnbkVsZW1lbnQuX19nZXRPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQ7XG5cbmFsaWduRWxlbWVudC5fX2dldFZpc2libGVSZWN0Rm9yRWxlbWVudCA9IGdldFZpc2libGVSZWN0Rm9yRWxlbWVudDtcblxuZXhwb3J0IGRlZmF1bHQgYWxpZ25FbGVtZW50OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgZG9BbGlnbiBmcm9tICcuL2FsaWduJztcblxuLyoqXG4gKiBgdGd0UG9pbnRgOiB7IHBhZ2VYLCBwYWdlWSB9IG9yIHsgY2xpZW50WCwgY2xpZW50WSB9LlxuICogSWYgY2xpZW50IHBvc2l0aW9uIHByb3ZpZGVkLCB3aWxsIGludGVybmFsIGNvbnZlcnQgdG8gcGFnZSBwb3NpdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBhbGlnblBvaW50KGVsLCB0Z3RQb2ludCwgYWxpZ24pIHtcbiAgdmFyIHBhZ2VYID0gdm9pZCAwO1xuICB2YXIgcGFnZVkgPSB2b2lkIDA7XG5cbiAgdmFyIGRvYyA9IHV0aWxzLmdldERvY3VtZW50KGVsKTtcbiAgdmFyIHdpbiA9IGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuXG4gIHZhciBzY3JvbGxYID0gdXRpbHMuZ2V0V2luZG93U2Nyb2xsTGVmdCh3aW4pO1xuICB2YXIgc2Nyb2xsWSA9IHV0aWxzLmdldFdpbmRvd1Njcm9sbFRvcCh3aW4pO1xuICB2YXIgdmlld3BvcnRXaWR0aCA9IHV0aWxzLnZpZXdwb3J0V2lkdGgod2luKTtcbiAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gdXRpbHMudmlld3BvcnRIZWlnaHQod2luKTtcblxuICBpZiAoJ3BhZ2VYJyBpbiB0Z3RQb2ludCkge1xuICAgIHBhZ2VYID0gdGd0UG9pbnQucGFnZVg7XG4gIH0gZWxzZSB7XG4gICAgcGFnZVggPSBzY3JvbGxYICsgdGd0UG9pbnQuY2xpZW50WDtcbiAgfVxuXG4gIGlmICgncGFnZVknIGluIHRndFBvaW50KSB7XG4gICAgcGFnZVkgPSB0Z3RQb2ludC5wYWdlWTtcbiAgfSBlbHNlIHtcbiAgICBwYWdlWSA9IHNjcm9sbFkgKyB0Z3RQb2ludC5jbGllbnRZO1xuICB9XG5cbiAgdmFyIHRndFJlZ2lvbiA9IHtcbiAgICBsZWZ0OiBwYWdlWCxcbiAgICB0b3A6IHBhZ2VZLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9O1xuXG4gIHZhciBwb2ludEluVmlldyA9IHBhZ2VYID49IDAgJiYgcGFnZVggPD0gc2Nyb2xsWCArIHZpZXdwb3J0V2lkdGggJiYgcGFnZVkgPj0gMCAmJiBwYWdlWSA8PSBzY3JvbGxZICsgdmlld3BvcnRIZWlnaHQ7XG5cbiAgLy8gUHJvdmlkZSBkZWZhdWx0IHRhcmdldCBwb2ludFxuICB2YXIgcG9pbnRzID0gW2FsaWduLnBvaW50c1swXSwgJ2NjJ107XG5cbiAgcmV0dXJuIGRvQWxpZ24oZWwsIHRndFJlZ2lvbiwgX2V4dGVuZHMoe30sIGFsaWduLCB7IHBvaW50czogcG9pbnRzIH0pLCBwb2ludEluVmlldyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFsaWduUG9pbnQ7IiwiZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcihmbiwgbXMpIHtcbiAgdmFyIHRpbWVyID0gdm9pZCAwO1xuXG4gIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGlmICh0aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBidWZmZXJGbigpIHtcbiAgICBjbGVhcigpO1xuICAgIHRpbWVyID0gc2V0VGltZW91dChmbiwgbXMpO1xuICB9XG5cbiAgYnVmZmVyRm4uY2xlYXIgPSBjbGVhcjtcblxuICByZXR1cm4gYnVmZmVyRm47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NhbWVQb2ludChwcmV2LCBuZXh0KSB7XG4gIGlmIChwcmV2ID09PSBuZXh0KSByZXR1cm4gdHJ1ZTtcbiAgaWYgKCFwcmV2IHx8ICFuZXh0KSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCdwYWdlWCcgaW4gbmV4dCAmJiAncGFnZVknIGluIG5leHQpIHtcbiAgICByZXR1cm4gcHJldi5wYWdlWCA9PT0gbmV4dC5wYWdlWCAmJiBwcmV2LnBhZ2VZID09PSBuZXh0LnBhZ2VZO1xuICB9XG5cbiAgaWYgKCdjbGllbnRYJyBpbiBuZXh0ICYmICdjbGllbnRZJyBpbiBuZXh0KSB7XG4gICAgcmV0dXJuIHByZXYuY2xpZW50WCA9PT0gbmV4dC5jbGllbnRYICYmIHByZXYuY2xpZW50WSA9PT0gbmV4dC5jbGllbnRZO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqLndpbmRvdyA9PT0gb2JqO1xufSIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgYWxpZ25FbGVtZW50LCBhbGlnblBvaW50IH0gZnJvbSAnZG9tLWFsaWduJztcbmltcG9ydCBhZGRFdmVudExpc3RlbmVyIGZyb20gJ3JjLXV0aWwvZXMvRG9tL2FkZEV2ZW50TGlzdGVuZXInO1xuXG5pbXBvcnQgeyBpc1dpbmRvdywgYnVmZmVyLCBpc1NhbWVQb2ludCB9IGZyb20gJy4vdXRpbCc7XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnQoZnVuYykge1xuICBpZiAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicgfHwgIWZ1bmMpIHJldHVybiBudWxsO1xuICByZXR1cm4gZnVuYygpO1xufVxuXG5mdW5jdGlvbiBnZXRQb2ludChwb2ludCkge1xuICBpZiAodHlwZW9mIHBvaW50ICE9PSAnb2JqZWN0JyB8fCAhcG9pbnQpIHJldHVybiBudWxsO1xuICByZXR1cm4gcG9pbnQ7XG59XG5cbnZhciBBbGlnbiA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhBbGlnbiwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQWxpZ24oKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbGlnbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbC5hcHBseShfQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuZm9yY2VBbGlnbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgdGFyZ2V0ID0gX3RoaXMkcHJvcHMudGFyZ2V0LFxuICAgICAgICAgIGFsaWduID0gX3RoaXMkcHJvcHMuYWxpZ24sXG4gICAgICAgICAgb25BbGlnbiA9IF90aGlzJHByb3BzLm9uQWxpZ247XG5cbiAgICAgIGlmICghZGlzYWJsZWQgJiYgdGFyZ2V0KSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBSZWFjdERPTS5maW5kRE9NTm9kZShfdGhpcyk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBnZXRFbGVtZW50KHRhcmdldCk7XG4gICAgICAgIHZhciBwb2ludCA9IGdldFBvaW50KHRhcmdldCk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXN1bHQgPSBhbGlnbkVsZW1lbnQoc291cmNlLCBlbGVtZW50LCBhbGlnbik7XG4gICAgICAgIH0gZWxzZSBpZiAocG9pbnQpIHtcbiAgICAgICAgICByZXN1bHQgPSBhbGlnblBvaW50KHNvdXJjZSwgcG9pbnQsIGFsaWduKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvbkFsaWduKSB7XG4gICAgICAgICAgb25BbGlnbihzb3VyY2UsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEFsaWduLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgLy8gaWYgcGFyZW50IHJlZiBub3QgYXR0YWNoZWQgLi4uLiB1c2UgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWRcbiAgICB0aGlzLmZvcmNlQWxpZ24oKTtcbiAgICBpZiAoIXByb3BzLmRpc2FibGVkICYmIHByb3BzLm1vbml0b3JXaW5kb3dSZXNpemUpIHtcbiAgICAgIHRoaXMuc3RhcnRNb25pdG9yV2luZG93UmVzaXplKCk7XG4gICAgfVxuICB9O1xuXG4gIEFsaWduLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHJlQWxpZ24gPSBmYWxzZTtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdmFyIHNvdXJjZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgdmFyIHNvdXJjZVJlY3QgPSBzb3VyY2UgPyBzb3VyY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBudWxsO1xuXG4gICAgICBpZiAocHJldlByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIHJlQWxpZ24gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGxhc3RFbGVtZW50ID0gZ2V0RWxlbWVudChwcmV2UHJvcHMudGFyZ2V0KTtcbiAgICAgICAgdmFyIGN1cnJlbnRFbGVtZW50ID0gZ2V0RWxlbWVudChwcm9wcy50YXJnZXQpO1xuICAgICAgICB2YXIgbGFzdFBvaW50ID0gZ2V0UG9pbnQocHJldlByb3BzLnRhcmdldCk7XG4gICAgICAgIHZhciBjdXJyZW50UG9pbnQgPSBnZXRQb2ludChwcm9wcy50YXJnZXQpO1xuXG4gICAgICAgIGlmIChpc1dpbmRvdyhsYXN0RWxlbWVudCkgJiYgaXNXaW5kb3coY3VycmVudEVsZW1lbnQpKSB7XG4gICAgICAgICAgLy8gU2tpcCBpZiBpcyB3aW5kb3dcbiAgICAgICAgICByZUFsaWduID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdEVsZW1lbnQgIT09IGN1cnJlbnRFbGVtZW50IHx8IC8vIEVsZW1lbnQgY2hhbmdlXG4gICAgICAgIGxhc3RFbGVtZW50ICYmICFjdXJyZW50RWxlbWVudCAmJiBjdXJyZW50UG9pbnQgfHwgLy8gQ2hhbmdlIGZyb20gZWxlbWVudCB0byBwb2ludFxuICAgICAgICBsYXN0UG9pbnQgJiYgY3VycmVudFBvaW50ICYmIGN1cnJlbnRFbGVtZW50IHx8IC8vIENoYW5nZSBmcm9tIHBvaW50IHRvIGVsZW1lbnRcbiAgICAgICAgY3VycmVudFBvaW50ICYmICFpc1NhbWVQb2ludChsYXN0UG9pbnQsIGN1cnJlbnRQb2ludCkpIHtcbiAgICAgICAgICByZUFsaWduID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHNvdXJjZSBlbGVtZW50IHNpemUgY2hhbmdlZFxuICAgICAgICB2YXIgcHJlUmVjdCA9IHRoaXMuc291cmNlUmVjdCB8fCB7fTtcbiAgICAgICAgaWYgKCFyZUFsaWduICYmIHNvdXJjZSAmJiAocHJlUmVjdC53aWR0aCAhPT0gc291cmNlUmVjdC53aWR0aCB8fCBwcmVSZWN0LmhlaWdodCAhPT0gc291cmNlUmVjdC5oZWlnaHQpKSB7XG4gICAgICAgICAgcmVBbGlnbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5zb3VyY2VSZWN0ID0gc291cmNlUmVjdDtcbiAgICB9XG5cbiAgICBpZiAocmVBbGlnbikge1xuICAgICAgdGhpcy5mb3JjZUFsaWduKCk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm1vbml0b3JXaW5kb3dSZXNpemUgJiYgIXByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnN0YXJ0TW9uaXRvcldpbmRvd1Jlc2l6ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0b3BNb25pdG9yV2luZG93UmVzaXplKCk7XG4gICAgfVxuICB9O1xuXG4gIEFsaWduLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuc3RvcE1vbml0b3JXaW5kb3dSZXNpemUoKTtcbiAgfTtcblxuICBBbGlnbi5wcm90b3R5cGUuc3RhcnRNb25pdG9yV2luZG93UmVzaXplID0gZnVuY3Rpb24gc3RhcnRNb25pdG9yV2luZG93UmVzaXplKCkge1xuICAgIGlmICghdGhpcy5yZXNpemVIYW5kbGVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlck1vbml0b3IgPSBidWZmZXIodGhpcy5mb3JjZUFsaWduLCB0aGlzLnByb3BzLm1vbml0b3JCdWZmZXJUaW1lKTtcbiAgICAgIHRoaXMucmVzaXplSGFuZGxlciA9IGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCAncmVzaXplJywgdGhpcy5idWZmZXJNb25pdG9yKTtcbiAgICB9XG4gIH07XG5cbiAgQWxpZ24ucHJvdG90eXBlLnN0b3BNb25pdG9yV2luZG93UmVzaXplID0gZnVuY3Rpb24gc3RvcE1vbml0b3JXaW5kb3dSZXNpemUoKSB7XG4gICAgaWYgKHRoaXMucmVzaXplSGFuZGxlcikge1xuICAgICAgdGhpcy5idWZmZXJNb25pdG9yLmNsZWFyKCk7XG4gICAgICB0aGlzLnJlc2l6ZUhhbmRsZXIucmVtb3ZlKCk7XG4gICAgICB0aGlzLnJlc2l6ZUhhbmRsZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBBbGlnbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuUHJvcHMgPSBfcHJvcHMuY2hpbGRyZW5Qcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGRyZW5Qcm9wcykge1xuICAgICAgdmFyIG5ld1Byb3BzID0ge307XG4gICAgICB2YXIgcHJvcExpc3QgPSBPYmplY3Qua2V5cyhjaGlsZHJlblByb3BzKTtcbiAgICAgIHByb3BMaXN0LmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgbmV3UHJvcHNbcHJvcF0gPSBfdGhpczIucHJvcHNbY2hpbGRyZW5Qcm9wc1twcm9wXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3UHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH07XG5cbiAgcmV0dXJuIEFsaWduO1xufShDb21wb25lbnQpO1xuXG5BbGlnbi5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIGFsaWduOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHRhcmdldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY2xpZW50WDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjbGllbnRZOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHBhZ2VYOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHBhZ2VZOiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG4gIG9uQWxpZ246IFByb3BUeXBlcy5mdW5jLFxuICBtb25pdG9yQnVmZmVyVGltZTogUHJvcFR5cGVzLm51bWJlcixcbiAgbW9uaXRvcldpbmRvd1Jlc2l6ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbn07XG5BbGlnbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhcmdldDogZnVuY3Rpb24gdGFyZ2V0KCkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH0sXG4gIG1vbml0b3JCdWZmZXJUaW1lOiA1MCxcbiAgbW9uaXRvcldpbmRvd1Jlc2l6ZTogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBBbGlnbjsiLCIvLyBleHBvcnQgdGhpcyBwYWNrYWdlJ3MgYXBpXG5pbXBvcnQgQWxpZ24gZnJvbSAnLi9BbGlnbic7XG5cbmV4cG9ydCBkZWZhdWx0IEFsaWduOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxudmFyIExhenlSZW5kZXJCb3ggPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGF6eVJlbmRlckJveCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGF6eVJlbmRlckJveCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGF6eVJlbmRlckJveCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIExhenlSZW5kZXJCb3gucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gbmV4dFByb3BzLmhpZGRlbkNsYXNzTmFtZSB8fCBuZXh0UHJvcHMudmlzaWJsZTtcbiAgfTtcblxuICBMYXp5UmVuZGVyQm94LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGhpZGRlbkNsYXNzTmFtZSA9IF9wcm9wcy5oaWRkZW5DbGFzc05hbWUsXG4gICAgICAgIHZpc2libGUgPSBfcHJvcHMudmlzaWJsZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2hpZGRlbkNsYXNzTmFtZScsICd2aXNpYmxlJ10pO1xuXG4gICAgaWYgKGhpZGRlbkNsYXNzTmFtZSB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChwcm9wcy5jaGlsZHJlbikgPiAxKSB7XG4gICAgICBpZiAoIXZpc2libGUgJiYgaGlkZGVuQ2xhc3NOYW1lKSB7XG4gICAgICAgIHByb3BzLmNsYXNzTmFtZSArPSAnICcgKyBoaWRkZW5DbGFzc05hbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgcHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KHByb3BzLmNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gTGF6eVJlbmRlckJveDtcbn0oQ29tcG9uZW50KTtcblxuTGF6eVJlbmRlckJveC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICBoaWRkZW5DbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGF6eVJlbmRlckJveDsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgTGF6eVJlbmRlckJveCBmcm9tICcuL0xhenlSZW5kZXJCb3gnO1xuXG52YXIgUG9wdXBJbm5lciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3B1cElubmVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3B1cElubmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3B1cElubmVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUG9wdXBJbm5lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZTtcbiAgICBpZiAoIXByb3BzLnZpc2libGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSAnICcgKyBwcm9wcy5oaWRkZW5DbGFzc05hbWU7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHByb3BzLm9uTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiBwcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICAgIG9uTW91c2VEb3duOiBwcm9wcy5vbk1vdXNlRG93bixcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiBwcm9wcy5vblRvdWNoU3RhcnQsXG4gICAgICAgIHN0eWxlOiBwcm9wcy5zdHlsZVxuICAgICAgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIExhenlSZW5kZXJCb3gsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBwcm9wcy5wcmVmaXhDbHMgKyAnLWNvbnRlbnQnLCB2aXNpYmxlOiBwcm9wcy52aXNpYmxlIH0sXG4gICAgICAgIHByb3BzLmNoaWxkcmVuXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gUG9wdXBJbm5lcjtcbn0oQ29tcG9uZW50KTtcblxuUG9wdXBJbm5lci5wcm9wVHlwZXMgPSB7XG4gIGhpZGRlbkNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Ub3VjaFN0YXJ0OiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUG9wdXBJbm5lcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgQWxpZ24gZnJvbSAncmMtYWxpZ24nO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAncmMtYW5pbWF0ZSc7XG5pbXBvcnQgUG9wdXBJbm5lciBmcm9tICcuL1BvcHVwSW5uZXInO1xuaW1wb3J0IExhenlSZW5kZXJCb3ggZnJvbSAnLi9MYXp5UmVuZGVyQm94JztcbmltcG9ydCB7IHNhdmVSZWYgfSBmcm9tICcuL3V0aWxzJztcblxudmFyIFBvcHVwID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcHVwLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3B1cChwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3B1cCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIC8vIFVzZWQgZm9yIHN0cmV0Y2hcbiAgICAgIHN0cmV0Y2hDaGVja2VkOiBmYWxzZSxcbiAgICAgIHRhcmdldFdpZHRoOiB1bmRlZmluZWQsXG4gICAgICB0YXJnZXRIZWlnaHQ6IHVuZGVmaW5lZFxuICAgIH07XG5cbiAgICBfdGhpcy5zYXZlUG9wdXBSZWYgPSBzYXZlUmVmLmJpbmQoX3RoaXMsICdwb3B1cEluc3RhbmNlJyk7XG4gICAgX3RoaXMuc2F2ZUFsaWduUmVmID0gc2F2ZVJlZi5iaW5kKF90aGlzLCAnYWxpZ25JbnN0YW5jZScpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFBvcHVwLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucm9vdE5vZGUgPSB0aGlzLmdldFBvcHVwRG9tTm9kZSgpO1xuICAgIHRoaXMuc2V0U3RyZXRjaFNpemUoKTtcbiAgfTtcblxuICBQb3B1cC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuc2V0U3RyZXRjaFNpemUoKTtcbiAgfTtcblxuICAvLyBSZWNvcmQgc2l6ZSBpZiBzdHJldGNoIG5lZWRlZFxuXG5cbiAgUG9wdXAucHJvdG90eXBlLmdldFBvcHVwRG9tTm9kZSA9IGZ1bmN0aW9uIGdldFBvcHVwRG9tTm9kZSgpIHtcbiAgICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUodGhpcy5wb3B1cEluc3RhbmNlKTtcbiAgfTtcblxuICAvLyBgdGFyZ2V0YCBvbiBgcmMtYWxpZ25gIGNhbiBhY2NlcHQgYXMgYSBmdW5jdGlvbiB0byBnZXQgdGhlIGJpbmQgZWxlbWVudCBvciBhIHBvaW50LlxuICAvLyByZWY6IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3JjLWFsaWduXG5cblxuICBQb3B1cC5wcm90b3R5cGUuZ2V0TWFza1RyYW5zaXRpb25OYW1lID0gZnVuY3Rpb24gZ2V0TWFza1RyYW5zaXRpb25OYW1lKCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHRyYW5zaXRpb25OYW1lID0gcHJvcHMubWFza1RyYW5zaXRpb25OYW1lO1xuICAgIHZhciBhbmltYXRpb24gPSBwcm9wcy5tYXNrQW5pbWF0aW9uO1xuICAgIGlmICghdHJhbnNpdGlvbk5hbWUgJiYgYW5pbWF0aW9uKSB7XG4gICAgICB0cmFuc2l0aW9uTmFtZSA9IHByb3BzLnByZWZpeENscyArICctJyArIGFuaW1hdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zaXRpb25OYW1lO1xuICB9O1xuXG4gIFBvcHVwLnByb3RvdHlwZS5nZXRUcmFuc2l0aW9uTmFtZSA9IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25OYW1lKCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHRyYW5zaXRpb25OYW1lID0gcHJvcHMudHJhbnNpdGlvbk5hbWU7XG4gICAgaWYgKCF0cmFuc2l0aW9uTmFtZSAmJiBwcm9wcy5hbmltYXRpb24pIHtcbiAgICAgIHRyYW5zaXRpb25OYW1lID0gcHJvcHMucHJlZml4Q2xzICsgJy0nICsgcHJvcHMuYW5pbWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWU7XG4gIH07XG5cbiAgUG9wdXAucHJvdG90eXBlLmdldENsYXNzTmFtZSA9IGZ1bmN0aW9uIGdldENsYXNzTmFtZShjdXJyZW50QWxpZ25DbGFzc05hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5wcmVmaXhDbHMgKyAnICcgKyB0aGlzLnByb3BzLmNsYXNzTmFtZSArICcgJyArIGN1cnJlbnRBbGlnbkNsYXNzTmFtZTtcbiAgfTtcblxuICBQb3B1cC5wcm90b3R5cGUuZ2V0UG9wdXBFbGVtZW50ID0gZnVuY3Rpb24gZ2V0UG9wdXBFbGVtZW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHNhdmVQb3B1cFJlZiA9IHRoaXMuc2F2ZVBvcHVwUmVmO1xuICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBzdHJldGNoQ2hlY2tlZCA9IF9zdGF0ZS5zdHJldGNoQ2hlY2tlZCxcbiAgICAgICAgdGFyZ2V0SGVpZ2h0ID0gX3N0YXRlLnRhcmdldEhlaWdodCxcbiAgICAgICAgdGFyZ2V0V2lkdGggPSBfc3RhdGUudGFyZ2V0V2lkdGg7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFsaWduID0gX3Byb3BzLmFsaWduLFxuICAgICAgICB2aXNpYmxlID0gX3Byb3BzLnZpc2libGUsXG4gICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICBnZXRDbGFzc05hbWVGcm9tQWxpZ24gPSBfcHJvcHMuZ2V0Q2xhc3NOYW1lRnJvbUFsaWduLFxuICAgICAgICBkZXN0cm95UG9wdXBPbkhpZGUgPSBfcHJvcHMuZGVzdHJveVBvcHVwT25IaWRlLFxuICAgICAgICBzdHJldGNoID0gX3Byb3BzLnN0cmV0Y2gsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBvbk1vdXNlRW50ZXIgPSBfcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlTGVhdmUgPSBfcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgICBvbk1vdXNlRG93biA9IF9wcm9wcy5vbk1vdXNlRG93bixcbiAgICAgICAgb25Ub3VjaFN0YXJ0ID0gX3Byb3BzLm9uVG91Y2hTdGFydDtcblxuICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLmdldENsYXNzTmFtZSh0aGlzLmN1cnJlbnRBbGlnbkNsYXNzTmFtZSB8fCBnZXRDbGFzc05hbWVGcm9tQWxpZ24oYWxpZ24pKTtcbiAgICB2YXIgaGlkZGVuQ2xhc3NOYW1lID0gcHJlZml4Q2xzICsgJy1oaWRkZW4nO1xuXG4gICAgaWYgKCF2aXNpYmxlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRBbGlnbkNsYXNzTmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNpemVTdHlsZSA9IHt9O1xuICAgIGlmIChzdHJldGNoKSB7XG4gICAgICAvLyBTdHJldGNoIHdpdGggdGFyZ2V0XG4gICAgICBpZiAoc3RyZXRjaC5pbmRleE9mKCdoZWlnaHQnKSAhPT0gLTEpIHtcbiAgICAgICAgc2l6ZVN0eWxlLmhlaWdodCA9IHRhcmdldEhlaWdodDtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZXRjaC5pbmRleE9mKCdtaW5IZWlnaHQnKSAhPT0gLTEpIHtcbiAgICAgICAgc2l6ZVN0eWxlLm1pbkhlaWdodCA9IHRhcmdldEhlaWdodDtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJldGNoLmluZGV4T2YoJ3dpZHRoJykgIT09IC0xKSB7XG4gICAgICAgIHNpemVTdHlsZS53aWR0aCA9IHRhcmdldFdpZHRoO1xuICAgICAgfSBlbHNlIGlmIChzdHJldGNoLmluZGV4T2YoJ21pbldpZHRoJykgIT09IC0xKSB7XG4gICAgICAgIHNpemVTdHlsZS5taW5XaWR0aCA9IHRhcmdldFdpZHRoO1xuICAgICAgfVxuXG4gICAgICAvLyBEZWxheSBmb3JjZSBhbGlnbiB0byBtYWtlcyB1aSBzbW9vdGhcbiAgICAgIGlmICghc3RyZXRjaENoZWNrZWQpIHtcbiAgICAgICAgc2l6ZVN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzMi5hbGlnbkluc3RhbmNlKSB7XG4gICAgICAgICAgICBfdGhpczIuYWxpZ25JbnN0YW5jZS5mb3JjZUFsaWduKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmV3U3R5bGUgPSBfZXh0ZW5kcyh7fSwgc2l6ZVN0eWxlLCBzdHlsZSwgdGhpcy5nZXRaSW5kZXhTdHlsZSgpKTtcblxuICAgIHZhciBwb3B1cElubmVyUHJvcHMgPSB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgcmVmOiBzYXZlUG9wdXBSZWYsXG4gICAgICBvbk1vdXNlRW50ZXI6IG9uTW91c2VFbnRlcixcbiAgICAgIG9uTW91c2VMZWF2ZTogb25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZURvd246IG9uTW91c2VEb3duLFxuICAgICAgb25Ub3VjaFN0YXJ0OiBvblRvdWNoU3RhcnQsXG4gICAgICBzdHlsZTogbmV3U3R5bGVcbiAgICB9O1xuICAgIGlmIChkZXN0cm95UG9wdXBPbkhpZGUpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBBbmltYXRlLFxuICAgICAgICB7XG4gICAgICAgICAgY29tcG9uZW50OiAnJyxcbiAgICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgdHJhbnNpdGlvbkFwcGVhcjogdHJ1ZSxcbiAgICAgICAgICB0cmFuc2l0aW9uTmFtZTogdGhpcy5nZXRUcmFuc2l0aW9uTmFtZSgpXG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEFsaWduLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5nZXRBbGlnblRhcmdldCgpLFxuICAgICAgICAgICAga2V5OiAncG9wdXAnLFxuICAgICAgICAgICAgcmVmOiB0aGlzLnNhdmVBbGlnblJlZixcbiAgICAgICAgICAgIG1vbml0b3JXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgICAgICBhbGlnbjogYWxpZ24sXG4gICAgICAgICAgICBvbkFsaWduOiB0aGlzLm9uQWxpZ25cbiAgICAgICAgICB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBQb3B1cElubmVyLFxuICAgICAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICAgICAgICB9LCBwb3B1cElubmVyUHJvcHMpLFxuICAgICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgICApXG4gICAgICAgICkgOiBudWxsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQW5pbWF0ZSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50OiAnJyxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICB0cmFuc2l0aW9uQXBwZWFyOiB0cnVlLFxuICAgICAgICB0cmFuc2l0aW9uTmFtZTogdGhpcy5nZXRUcmFuc2l0aW9uTmFtZSgpLFxuICAgICAgICBzaG93UHJvcDogJ3hWaXNpYmxlJ1xuICAgICAgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIEFsaWduLFxuICAgICAgICB7XG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLmdldEFsaWduVGFyZ2V0KCksXG4gICAgICAgICAga2V5OiAncG9wdXAnLFxuICAgICAgICAgIHJlZjogdGhpcy5zYXZlQWxpZ25SZWYsXG4gICAgICAgICAgbW9uaXRvcldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgICAgICAgICB4VmlzaWJsZTogdmlzaWJsZSxcbiAgICAgICAgICBjaGlsZHJlblByb3BzOiB7IHZpc2libGU6ICd4VmlzaWJsZScgfSxcbiAgICAgICAgICBkaXNhYmxlZDogIXZpc2libGUsXG4gICAgICAgICAgYWxpZ246IGFsaWduLFxuICAgICAgICAgIG9uQWxpZ246IHRoaXMub25BbGlnblxuICAgICAgICB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFBvcHVwSW5uZXIsXG4gICAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgICAgaGlkZGVuQ2xhc3NOYW1lOiBoaWRkZW5DbGFzc05hbWVcbiAgICAgICAgICB9LCBwb3B1cElubmVyUHJvcHMpLFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIFBvcHVwLnByb3RvdHlwZS5nZXRaSW5kZXhTdHlsZSA9IGZ1bmN0aW9uIGdldFpJbmRleFN0eWxlKCkge1xuICAgIHZhciBzdHlsZSA9IHt9O1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgaWYgKHByb3BzLnpJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZS56SW5kZXggPSBwcm9wcy56SW5kZXg7XG4gICAgfVxuICAgIHJldHVybiBzdHlsZTtcbiAgfTtcblxuICBQb3B1cC5wcm90b3R5cGUuZ2V0TWFza0VsZW1lbnQgPSBmdW5jdGlvbiBnZXRNYXNrRWxlbWVudCgpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBtYXNrRWxlbWVudCA9IHZvaWQgMDtcbiAgICBpZiAocHJvcHMubWFzaykge1xuICAgICAgdmFyIG1hc2tUcmFuc2l0aW9uID0gdGhpcy5nZXRNYXNrVHJhbnNpdGlvbk5hbWUoKTtcbiAgICAgIG1hc2tFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChMYXp5UmVuZGVyQm94LCB7XG4gICAgICAgIHN0eWxlOiB0aGlzLmdldFpJbmRleFN0eWxlKCksXG4gICAgICAgIGtleTogJ21hc2snLFxuICAgICAgICBjbGFzc05hbWU6IHByb3BzLnByZWZpeENscyArICctbWFzaycsXG4gICAgICAgIGhpZGRlbkNsYXNzTmFtZTogcHJvcHMucHJlZml4Q2xzICsgJy1tYXNrLWhpZGRlbicsXG4gICAgICAgIHZpc2libGU6IHByb3BzLnZpc2libGVcbiAgICAgIH0pO1xuICAgICAgaWYgKG1hc2tUcmFuc2l0aW9uKSB7XG4gICAgICAgIG1hc2tFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBBbmltYXRlLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGtleTogJ21hc2snLFxuICAgICAgICAgICAgc2hvd1Byb3A6ICd2aXNpYmxlJyxcbiAgICAgICAgICAgIHRyYW5zaXRpb25BcHBlYXI6IHRydWUsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICcnLFxuICAgICAgICAgICAgdHJhbnNpdGlvbk5hbWU6IG1hc2tUcmFuc2l0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtYXNrRWxlbWVudFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFza0VsZW1lbnQ7XG4gIH07XG5cbiAgUG9wdXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMuZ2V0TWFza0VsZW1lbnQoKSxcbiAgICAgIHRoaXMuZ2V0UG9wdXBFbGVtZW50KClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBQb3B1cDtcbn0oQ29tcG9uZW50KTtcblxuUG9wdXAucHJvcFR5cGVzID0ge1xuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGdldENsYXNzTmFtZUZyb21BbGlnbjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQWxpZ246IFByb3BUeXBlcy5mdW5jLFxuICBnZXRSb290RG9tTm9kZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGFsaWduOiBQcm9wVHlwZXMuYW55LFxuICBkZXN0cm95UG9wdXBPbkhpZGU6IFByb3BUeXBlcy5ib29sLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICBzdHJldGNoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIHBvaW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHBhZ2VYOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHBhZ2VZOiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXG59O1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gIHRoaXMub25BbGlnbiA9IGZ1bmN0aW9uIChwb3B1cERvbU5vZGUsIGFsaWduKSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMzLnByb3BzO1xuICAgIHZhciBjdXJyZW50QWxpZ25DbGFzc05hbWUgPSBwcm9wcy5nZXRDbGFzc05hbWVGcm9tQWxpZ24oYWxpZ24pO1xuICAgIC8vIEZJWDogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC90cmlnZ2VyL2lzc3Vlcy81NlxuICAgIC8vIEZJWDogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC90b29sdGlwL2lzc3Vlcy83OVxuICAgIGlmIChfdGhpczMuY3VycmVudEFsaWduQ2xhc3NOYW1lICE9PSBjdXJyZW50QWxpZ25DbGFzc05hbWUpIHtcbiAgICAgIF90aGlzMy5jdXJyZW50QWxpZ25DbGFzc05hbWUgPSBjdXJyZW50QWxpZ25DbGFzc05hbWU7XG4gICAgICBwb3B1cERvbU5vZGUuY2xhc3NOYW1lID0gX3RoaXMzLmdldENsYXNzTmFtZShjdXJyZW50QWxpZ25DbGFzc05hbWUpO1xuICAgIH1cbiAgICBwcm9wcy5vbkFsaWduKHBvcHVwRG9tTm9kZSwgYWxpZ24pO1xuICB9O1xuXG4gIHRoaXMuc2V0U3RyZXRjaFNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9wcm9wczIgPSBfdGhpczMucHJvcHMsXG4gICAgICAgIHN0cmV0Y2ggPSBfcHJvcHMyLnN0cmV0Y2gsXG4gICAgICAgIGdldFJvb3REb21Ob2RlID0gX3Byb3BzMi5nZXRSb290RG9tTm9kZSxcbiAgICAgICAgdmlzaWJsZSA9IF9wcm9wczIudmlzaWJsZTtcbiAgICB2YXIgX3N0YXRlMiA9IF90aGlzMy5zdGF0ZSxcbiAgICAgICAgc3RyZXRjaENoZWNrZWQgPSBfc3RhdGUyLnN0cmV0Y2hDaGVja2VkLFxuICAgICAgICB0YXJnZXRIZWlnaHQgPSBfc3RhdGUyLnRhcmdldEhlaWdodCxcbiAgICAgICAgdGFyZ2V0V2lkdGggPSBfc3RhdGUyLnRhcmdldFdpZHRoO1xuXG5cbiAgICBpZiAoIXN0cmV0Y2ggfHwgIXZpc2libGUpIHtcbiAgICAgIGlmIChzdHJldGNoQ2hlY2tlZCkge1xuICAgICAgICBfdGhpczMuc2V0U3RhdGUoeyBzdHJldGNoQ2hlY2tlZDogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyICRlbGUgPSBnZXRSb290RG9tTm9kZSgpO1xuICAgIGlmICghJGVsZSkgcmV0dXJuO1xuXG4gICAgdmFyIGhlaWdodCA9ICRlbGUub2Zmc2V0SGVpZ2h0O1xuICAgIHZhciB3aWR0aCA9ICRlbGUub2Zmc2V0V2lkdGg7XG5cbiAgICBpZiAodGFyZ2V0SGVpZ2h0ICE9PSBoZWlnaHQgfHwgdGFyZ2V0V2lkdGggIT09IHdpZHRoIHx8ICFzdHJldGNoQ2hlY2tlZCkge1xuICAgICAgX3RoaXMzLnNldFN0YXRlKHtcbiAgICAgICAgc3RyZXRjaENoZWNrZWQ6IHRydWUsXG4gICAgICAgIHRhcmdldEhlaWdodDogaGVpZ2h0LFxuICAgICAgICB0YXJnZXRXaWR0aDogd2lkdGhcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldFRhcmdldEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMy5wcm9wcy5nZXRSb290RG9tTm9kZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0QWxpZ25UYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvaW50ID0gX3RoaXMzLnByb3BzLnBvaW50O1xuXG4gICAgaWYgKHBvaW50KSB7XG4gICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuICAgIHJldHVybiBfdGhpczMuZ2V0VGFyZ2V0RWxlbWVudDtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHVwOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSwgY3JlYXRlUG9ydGFsIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjb250YWlucyBmcm9tICdyYy11dGlsL2VzL0RvbS9jb250YWlucyc7XG5pbXBvcnQgYWRkRXZlbnRMaXN0ZW5lciBmcm9tICdyYy11dGlsL2VzL0RvbS9hZGRFdmVudExpc3RlbmVyJztcbmltcG9ydCBDb250YWluZXJSZW5kZXIgZnJvbSAncmMtdXRpbC9lcy9Db250YWluZXJSZW5kZXInO1xuaW1wb3J0IFBvcnRhbCBmcm9tICdyYy11dGlsL2VzL1BvcnRhbCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHsgZ2V0QWxpZ25Gcm9tUGxhY2VtZW50LCBnZXRBbGlnblBvcHVwQ2xhc3NOYW1lIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cCc7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiByZXR1cm5FbXB0eVN0cmluZygpIHtcbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiByZXR1cm5Eb2N1bWVudCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudDtcbn1cblxudmFyIEFMTF9IQU5ETEVSUyA9IFsnb25DbGljaycsICdvbk1vdXNlRG93bicsICdvblRvdWNoU3RhcnQnLCAnb25Nb3VzZUVudGVyJywgJ29uTW91c2VMZWF2ZScsICdvbkZvY3VzJywgJ29uQmx1cicsICdvbkNvbnRleHRNZW51J107XG5cbnZhciBJU19SRUFDVF8xNiA9ICEhY3JlYXRlUG9ydGFsO1xuXG52YXIgY29udGV4dFR5cGVzID0ge1xuICByY1RyaWdnZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgb25Qb3B1cE1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmNcbiAgfSlcbn07XG5cbnZhciBUcmlnZ2VyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRyaWdnZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyaWdnZXIocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJpZ2dlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICB2YXIgcG9wdXBWaXNpYmxlID0gdm9pZCAwO1xuICAgIGlmICgncG9wdXBWaXNpYmxlJyBpbiBwcm9wcykge1xuICAgICAgcG9wdXBWaXNpYmxlID0gISFwcm9wcy5wb3B1cFZpc2libGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvcHVwVmlzaWJsZSA9ICEhcHJvcHMuZGVmYXVsdFBvcHVwVmlzaWJsZTtcbiAgICB9XG5cbiAgICBfdGhpcy5wcmV2UG9wdXBWaXNpYmxlID0gcG9wdXBWaXNpYmxlO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBwb3B1cFZpc2libGU6IHBvcHVwVmlzaWJsZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByY1RyaWdnZXI6IHtcbiAgICAgICAgb25Qb3B1cE1vdXNlRG93bjogdGhpcy5vblBvcHVwTW91c2VEb3duXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBBTExfSEFORExFUlMuZm9yRWFjaChmdW5jdGlvbiAoaCkge1xuICAgICAgX3RoaXMyWydmaXJlJyArIGhdID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgX3RoaXMyLmZpcmVFdmVudHMoaCwgZSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUoe30sIHtcbiAgICAgIHBvcHVwVmlzaWJsZTogdGhpcy5zdGF0ZS5wb3B1cFZpc2libGVcbiAgICB9KTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhfcmVmKSB7XG4gICAgdmFyIHBvcHVwVmlzaWJsZSA9IF9yZWYucG9wdXBWaXNpYmxlO1xuXG4gICAgaWYgKHBvcHVwVmlzaWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcG9wdXBWaXNpYmxlOiBwb3B1cFZpc2libGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoXywgcHJldlN0YXRlKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHZhciB0cmlnZ2VyQWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2UgPSBmdW5jdGlvbiB0cmlnZ2VyQWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2UoKSB7XG4gICAgICBpZiAocHJldlN0YXRlLnBvcHVwVmlzaWJsZSAhPT0gc3RhdGUucG9wdXBWaXNpYmxlKSB7XG4gICAgICAgIHByb3BzLmFmdGVyUG9wdXBWaXNpYmxlQ2hhbmdlKHN0YXRlLnBvcHVwVmlzaWJsZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoIUlTX1JFQUNUXzE2KSB7XG4gICAgICB0aGlzLnJlbmRlckNvbXBvbmVudChudWxsLCB0cmlnZ2VyQWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2UpO1xuICAgIH1cblxuICAgIHRoaXMucHJldlBvcHVwVmlzaWJsZSA9IHByZXZTdGF0ZS5wb3B1cFZpc2libGU7XG5cbiAgICAvLyBXZSBtdXN0IGxpc3RlbiB0byBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAsIGVkZ2UgY2FzZTpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy81ODA0XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC9jYWxlbmRhci9pc3N1ZXMvMjUwXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC90cmlnZ2VyL2lzc3Vlcy81MFxuICAgIGlmIChzdGF0ZS5wb3B1cFZpc2libGUpIHtcbiAgICAgIHZhciBjdXJyZW50RG9jdW1lbnQgPSB2b2lkIDA7XG4gICAgICBpZiAoIXRoaXMuY2xpY2tPdXRzaWRlSGFuZGxlciAmJiAodGhpcy5pc0NsaWNrVG9IaWRlKCkgfHwgdGhpcy5pc0NvbnRleHRNZW51VG9TaG93KCkpKSB7XG4gICAgICAgIGN1cnJlbnREb2N1bWVudCA9IHByb3BzLmdldERvY3VtZW50KCk7XG4gICAgICAgIHRoaXMuY2xpY2tPdXRzaWRlSGFuZGxlciA9IGFkZEV2ZW50TGlzdGVuZXIoY3VycmVudERvY3VtZW50LCAnbW91c2Vkb3duJywgdGhpcy5vbkRvY3VtZW50Q2xpY2spO1xuICAgICAgfVxuICAgICAgLy8gYWx3YXlzIGhpZGUgb24gbW9iaWxlXG4gICAgICBpZiAoIXRoaXMudG91Y2hPdXRzaWRlSGFuZGxlcikge1xuICAgICAgICBjdXJyZW50RG9jdW1lbnQgPSBjdXJyZW50RG9jdW1lbnQgfHwgcHJvcHMuZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgdGhpcy50b3VjaE91dHNpZGVIYW5kbGVyID0gYWRkRXZlbnRMaXN0ZW5lcihjdXJyZW50RG9jdW1lbnQsICd0b3VjaHN0YXJ0JywgdGhpcy5vbkRvY3VtZW50Q2xpY2spO1xuICAgICAgfVxuICAgICAgLy8gY2xvc2UgcG9wdXAgd2hlbiB0cmlnZ2VyIHR5cGUgY29udGFpbnMgJ29uQ29udGV4dE1lbnUnIGFuZCBkb2N1bWVudCBpcyBzY3JvbGxpbmcuXG4gICAgICBpZiAoIXRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjEgJiYgdGhpcy5pc0NvbnRleHRNZW51VG9TaG93KCkpIHtcbiAgICAgICAgY3VycmVudERvY3VtZW50ID0gY3VycmVudERvY3VtZW50IHx8IHByb3BzLmdldERvY3VtZW50KCk7XG4gICAgICAgIHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjEgPSBhZGRFdmVudExpc3RlbmVyKGN1cnJlbnREb2N1bWVudCwgJ3Njcm9sbCcsIHRoaXMub25Db250ZXh0TWVudUNsb3NlKTtcbiAgICAgIH1cbiAgICAgIC8vIGNsb3NlIHBvcHVwIHdoZW4gdHJpZ2dlciB0eXBlIGNvbnRhaW5zICdvbkNvbnRleHRNZW51JyBhbmQgd2luZG93IGlzIGJsdXIuXG4gICAgICBpZiAoIXRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIgJiYgdGhpcy5pc0NvbnRleHRNZW51VG9TaG93KCkpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMiA9IGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCAnYmx1cicsIHRoaXMub25Db250ZXh0TWVudUNsb3NlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyT3V0c2lkZUhhbmRsZXIoKTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgdGhpcy5jbGVhck91dHNpZGVIYW5kbGVyKCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubW91c2VEb3duVGltZW91dCk7XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuZ2V0UG9wdXBEb21Ob2RlID0gZnVuY3Rpb24gZ2V0UG9wdXBEb21Ob2RlKCkge1xuICAgIC8vIGZvciB0ZXN0XG4gICAgaWYgKHRoaXMuX2NvbXBvbmVudCAmJiB0aGlzLl9jb21wb25lbnQuZ2V0UG9wdXBEb21Ob2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50LmdldFBvcHVwRG9tTm9kZSgpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5nZXRQb3B1cEFsaWduID0gZnVuY3Rpb24gZ2V0UG9wdXBBbGlnbigpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBwb3B1cFBsYWNlbWVudCA9IHByb3BzLnBvcHVwUGxhY2VtZW50LFxuICAgICAgICBwb3B1cEFsaWduID0gcHJvcHMucG9wdXBBbGlnbixcbiAgICAgICAgYnVpbHRpblBsYWNlbWVudHMgPSBwcm9wcy5idWlsdGluUGxhY2VtZW50cztcblxuICAgIGlmIChwb3B1cFBsYWNlbWVudCAmJiBidWlsdGluUGxhY2VtZW50cykge1xuICAgICAgcmV0dXJuIGdldEFsaWduRnJvbVBsYWNlbWVudChidWlsdGluUGxhY2VtZW50cywgcG9wdXBQbGFjZW1lbnQsIHBvcHVwQWxpZ24pO1xuICAgIH1cbiAgICByZXR1cm4gcG9wdXBBbGlnbjtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHBvcHVwVmlzaWJsZSAgICBTaG93IG9yIG5vdCB0aGUgcG9wdXAgZWxlbWVudFxuICAgKiBAcGFyYW0gZXZlbnQgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50LCB1c2VkIGZvciBgcG9pbnRBbGlnbmBcbiAgICovXG4gIFRyaWdnZXIucHJvdG90eXBlLnNldFBvcHVwVmlzaWJsZSA9IGZ1bmN0aW9uIHNldFBvcHVwVmlzaWJsZShwb3B1cFZpc2libGUsIGV2ZW50KSB7XG4gICAgdmFyIGFsaWduUG9pbnQgPSB0aGlzLnByb3BzLmFsaWduUG9pbnQ7XG5cblxuICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5wb3B1cFZpc2libGUgIT09IHBvcHVwVmlzaWJsZSkge1xuICAgICAgaWYgKCEoJ3BvcHVwVmlzaWJsZScgaW4gdGhpcy5wcm9wcykpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBvcHVwVmlzaWJsZTogcG9wdXBWaXNpYmxlIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5wcm9wcy5vblBvcHVwVmlzaWJsZUNoYW5nZShwb3B1cFZpc2libGUpO1xuICAgIH1cblxuICAgIC8vIEFsd2F5cyByZWNvcmQgdGhlIHBvaW50IHBvc2l0aW9uIHNpbmNlIG1vdXNlRW50ZXJEZWxheSB3aWxsIGRlbGF5IHRoZSBzaG93XG4gICAgaWYgKGFsaWduUG9pbnQgJiYgZXZlbnQpIHtcbiAgICAgIHRoaXMuc2V0UG9pbnQoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5kZWxheVNldFBvcHVwVmlzaWJsZSA9IGZ1bmN0aW9uIGRlbGF5U2V0UG9wdXBWaXNpYmxlKHZpc2libGUsIGRlbGF5UywgZXZlbnQpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBkZWxheSA9IGRlbGF5UyAqIDEwMDA7XG4gICAgdGhpcy5jbGVhckRlbGF5VGltZXIoKTtcbiAgICBpZiAoZGVsYXkpIHtcbiAgICAgIHZhciBwb2ludCA9IGV2ZW50ID8geyBwYWdlWDogZXZlbnQucGFnZVgsIHBhZ2VZOiBldmVudC5wYWdlWSB9IDogbnVsbDtcbiAgICAgIHRoaXMuZGVsYXlUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2V0UG9wdXBWaXNpYmxlKHZpc2libGUsIHBvaW50KTtcbiAgICAgICAgX3RoaXMzLmNsZWFyRGVsYXlUaW1lcigpO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFBvcHVwVmlzaWJsZSh2aXNpYmxlLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmNsZWFyRGVsYXlUaW1lciA9IGZ1bmN0aW9uIGNsZWFyRGVsYXlUaW1lcigpIHtcbiAgICBpZiAodGhpcy5kZWxheVRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVRpbWVyKTtcbiAgICAgIHRoaXMuZGVsYXlUaW1lciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmNsZWFyT3V0c2lkZUhhbmRsZXIgPSBmdW5jdGlvbiBjbGVhck91dHNpZGVIYW5kbGVyKCkge1xuICAgIGlmICh0aGlzLmNsaWNrT3V0c2lkZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMuY2xpY2tPdXRzaWRlSGFuZGxlci5yZW1vdmUoKTtcbiAgICAgIHRoaXMuY2xpY2tPdXRzaWRlSGFuZGxlciA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjEpIHtcbiAgICAgIHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjEucmVtb3ZlKCk7XG4gICAgICB0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIxID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMikge1xuICAgICAgdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMi5yZW1vdmUoKTtcbiAgICAgIHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMudG91Y2hPdXRzaWRlSGFuZGxlci5yZW1vdmUoKTtcbiAgICAgIHRoaXMudG91Y2hPdXRzaWRlSGFuZGxlciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmNyZWF0ZVR3b0NoYWlucyA9IGZ1bmN0aW9uIGNyZWF0ZVR3b0NoYWlucyhldmVudCkge1xuICAgIHZhciBjaGlsZFByb3MgPSB0aGlzLnByb3BzLmNoaWxkcmVuLnByb3BzO1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGNoaWxkUHJvc1tldmVudF0gJiYgcHJvcHNbZXZlbnRdKSB7XG4gICAgICByZXR1cm4gdGhpc1snZmlyZScgKyBldmVudF07XG4gICAgfVxuICAgIHJldHVybiBjaGlsZFByb3NbZXZlbnRdIHx8IHByb3BzW2V2ZW50XTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5pc0NsaWNrVG9TaG93ID0gZnVuY3Rpb24gaXNDbGlja1RvU2hvdygpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWN0aW9uID0gX3Byb3BzLmFjdGlvbixcbiAgICAgICAgc2hvd0FjdGlvbiA9IF9wcm9wcy5zaG93QWN0aW9uO1xuXG4gICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdjbGljaycpICE9PSAtMSB8fCBzaG93QWN0aW9uLmluZGV4T2YoJ2NsaWNrJykgIT09IC0xO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmlzQ29udGV4dE1lbnVUb1Nob3cgPSBmdW5jdGlvbiBpc0NvbnRleHRNZW51VG9TaG93KCkge1xuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWN0aW9uID0gX3Byb3BzMi5hY3Rpb24sXG4gICAgICAgIHNob3dBY3Rpb24gPSBfcHJvcHMyLnNob3dBY3Rpb247XG5cbiAgICByZXR1cm4gYWN0aW9uLmluZGV4T2YoJ2NvbnRleHRNZW51JykgIT09IC0xIHx8IHNob3dBY3Rpb24uaW5kZXhPZignY29udGV4dE1lbnUnKSAhPT0gLTE7XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuaXNDbGlja1RvSGlkZSA9IGZ1bmN0aW9uIGlzQ2xpY2tUb0hpZGUoKSB7XG4gICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3Rpb24gPSBfcHJvcHMzLmFjdGlvbixcbiAgICAgICAgaGlkZUFjdGlvbiA9IF9wcm9wczMuaGlkZUFjdGlvbjtcblxuICAgIHJldHVybiBhY3Rpb24uaW5kZXhPZignY2xpY2snKSAhPT0gLTEgfHwgaGlkZUFjdGlvbi5pbmRleE9mKCdjbGljaycpICE9PSAtMTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5pc01vdXNlRW50ZXJUb1Nob3cgPSBmdW5jdGlvbiBpc01vdXNlRW50ZXJUb1Nob3coKSB7XG4gICAgdmFyIF9wcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3Rpb24gPSBfcHJvcHM0LmFjdGlvbixcbiAgICAgICAgc2hvd0FjdGlvbiA9IF9wcm9wczQuc2hvd0FjdGlvbjtcblxuICAgIHJldHVybiBhY3Rpb24uaW5kZXhPZignaG92ZXInKSAhPT0gLTEgfHwgc2hvd0FjdGlvbi5pbmRleE9mKCdtb3VzZUVudGVyJykgIT09IC0xO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmlzTW91c2VMZWF2ZVRvSGlkZSA9IGZ1bmN0aW9uIGlzTW91c2VMZWF2ZVRvSGlkZSgpIHtcbiAgICB2YXIgX3Byb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGlvbiA9IF9wcm9wczUuYWN0aW9uLFxuICAgICAgICBoaWRlQWN0aW9uID0gX3Byb3BzNS5oaWRlQWN0aW9uO1xuXG4gICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdob3ZlcicpICE9PSAtMSB8fCBoaWRlQWN0aW9uLmluZGV4T2YoJ21vdXNlTGVhdmUnKSAhPT0gLTE7XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuaXNGb2N1c1RvU2hvdyA9IGZ1bmN0aW9uIGlzRm9jdXNUb1Nob3coKSB7XG4gICAgdmFyIF9wcm9wczYgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3Rpb24gPSBfcHJvcHM2LmFjdGlvbixcbiAgICAgICAgc2hvd0FjdGlvbiA9IF9wcm9wczYuc2hvd0FjdGlvbjtcblxuICAgIHJldHVybiBhY3Rpb24uaW5kZXhPZignZm9jdXMnKSAhPT0gLTEgfHwgc2hvd0FjdGlvbi5pbmRleE9mKCdmb2N1cycpICE9PSAtMTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5pc0JsdXJUb0hpZGUgPSBmdW5jdGlvbiBpc0JsdXJUb0hpZGUoKSB7XG4gICAgdmFyIF9wcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3Rpb24gPSBfcHJvcHM3LmFjdGlvbixcbiAgICAgICAgaGlkZUFjdGlvbiA9IF9wcm9wczcuaGlkZUFjdGlvbjtcblxuICAgIHJldHVybiBhY3Rpb24uaW5kZXhPZignZm9jdXMnKSAhPT0gLTEgfHwgaGlkZUFjdGlvbi5pbmRleE9mKCdibHVyJykgIT09IC0xO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmZvcmNlUG9wdXBBbGlnbiA9IGZ1bmN0aW9uIGZvcmNlUG9wdXBBbGlnbigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5wb3B1cFZpc2libGUgJiYgdGhpcy5fY29tcG9uZW50ICYmIHRoaXMuX2NvbXBvbmVudC5hbGlnbkluc3RhbmNlKSB7XG4gICAgICB0aGlzLl9jb21wb25lbnQuYWxpZ25JbnN0YW5jZS5mb3JjZUFsaWduKCk7XG4gICAgfVxuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmZpcmVFdmVudHMgPSBmdW5jdGlvbiBmaXJlRXZlbnRzKHR5cGUsIGUpIHtcbiAgICB2YXIgY2hpbGRDYWxsYmFjayA9IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHNbdHlwZV07XG4gICAgaWYgKGNoaWxkQ2FsbGJhY2spIHtcbiAgICAgIGNoaWxkQ2FsbGJhY2soZSk7XG4gICAgfVxuICAgIHZhciBjYWxsYmFjayA9IHRoaXMucHJvcHNbdHlwZV07XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayhlKTtcbiAgICB9XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICB0aGlzLnNldFBvcHVwVmlzaWJsZShmYWxzZSk7XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIHBvcHVwVmlzaWJsZSA9IHRoaXMuc3RhdGUucG9wdXBWaXNpYmxlO1xuICAgIHZhciBfcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHM4LmNoaWxkcmVuLFxuICAgICAgICBmb3JjZVJlbmRlciA9IF9wcm9wczguZm9yY2VSZW5kZXIsXG4gICAgICAgIGFsaWduUG9pbnQgPSBfcHJvcHM4LmFsaWduUG9pbnQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczguY2xhc3NOYW1lO1xuXG4gICAgdmFyIGNoaWxkID0gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgdmFyIG5ld0NoaWxkUHJvcHMgPSB7IGtleTogJ3RyaWdnZXInIH07XG5cbiAgICBpZiAodGhpcy5pc0NvbnRleHRNZW51VG9TaG93KCkpIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Db250ZXh0TWVudSA9IHRoaXMub25Db250ZXh0TWVudTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbkNvbnRleHRNZW51ID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uQ29udGV4dE1lbnUnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0NsaWNrVG9IaWRlKCkgfHwgdGhpcy5pc0NsaWNrVG9TaG93KCkpIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25DbGljayA9IHRoaXMub25DbGljaztcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZURvd24gPSB0aGlzLm9uTW91c2VEb3duO1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vblRvdWNoU3RhcnQgPSB0aGlzLm9uVG91Y2hTdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbkNsaWNrID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uQ2xpY2snKTtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZURvd24gPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25Nb3VzZURvd24nKTtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Ub3VjaFN0YXJ0ID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uVG91Y2hTdGFydCcpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc01vdXNlRW50ZXJUb1Nob3coKSkge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlRW50ZXIgPSB0aGlzLm9uTW91c2VFbnRlcjtcbiAgICAgIGlmIChhbGlnblBvaW50KSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZU1vdmUgPSB0aGlzLm9uTW91c2VNb3ZlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uTW91c2VFbnRlciA9IHRoaXMuY3JlYXRlVHdvQ2hhaW5zKCdvbk1vdXNlRW50ZXInKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNNb3VzZUxlYXZlVG9IaWRlKCkpIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZUxlYXZlID0gdGhpcy5vbk1vdXNlTGVhdmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZUxlYXZlID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uTW91c2VMZWF2ZScpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc0ZvY3VzVG9TaG93KCkgfHwgdGhpcy5pc0JsdXJUb0hpZGUoKSkge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbkZvY3VzID0gdGhpcy5vbkZvY3VzO1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbkJsdXIgPSB0aGlzLm9uQmx1cjtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbkZvY3VzID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uRm9jdXMnKTtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25CbHVyID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uQmx1cicpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbkNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoY2hpbGQgJiYgY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpO1xuICAgIGlmIChjaGlsZHJlbkNsYXNzTmFtZSkge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5jbGFzc05hbWUgPSBjaGlsZHJlbkNsYXNzTmFtZTtcbiAgICB9XG4gICAgdmFyIHRyaWdnZXIgPSBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIG5ld0NoaWxkUHJvcHMpO1xuXG4gICAgaWYgKCFJU19SRUFDVF8xNikge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIENvbnRhaW5lclJlbmRlcixcbiAgICAgICAge1xuICAgICAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgICAgICB2aXNpYmxlOiBwb3B1cFZpc2libGUsXG4gICAgICAgICAgYXV0b01vdW50OiBmYWxzZSxcbiAgICAgICAgICBmb3JjZVJlbmRlcjogZm9yY2VSZW5kZXIsXG4gICAgICAgICAgZ2V0Q29tcG9uZW50OiB0aGlzLmdldENvbXBvbmVudCxcbiAgICAgICAgICBnZXRDb250YWluZXI6IHRoaXMuZ2V0Q29udGFpbmVyXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgIHZhciByZW5kZXJDb21wb25lbnQgPSBfcmVmMi5yZW5kZXJDb21wb25lbnQ7XG5cbiAgICAgICAgICBfdGhpczQucmVuZGVyQ29tcG9uZW50ID0gcmVuZGVyQ29tcG9uZW50O1xuICAgICAgICAgIHJldHVybiB0cmlnZ2VyO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBwb3J0YWwgPSB2b2lkIDA7XG4gICAgLy8gcHJldmVudCB1bm1vdW50aW5nIGFmdGVyIGl0J3MgcmVuZGVyZWRcbiAgICBpZiAocG9wdXBWaXNpYmxlIHx8IHRoaXMuX2NvbXBvbmVudCB8fCBmb3JjZVJlbmRlcikge1xuICAgICAgcG9ydGFsID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgUG9ydGFsLFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAncG9ydGFsJyxcbiAgICAgICAgICBnZXRDb250YWluZXI6IHRoaXMuZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIGRpZFVwZGF0ZTogdGhpcy5oYW5kbGVQb3J0YWxVcGRhdGVcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3RyaWdnZXIsIHBvcnRhbF07XG4gIH07XG5cbiAgcmV0dXJuIFRyaWdnZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyaWdnZXIucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgYWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICBzaG93QWN0aW9uOiBQcm9wVHlwZXMuYW55LFxuICBoaWRlQWN0aW9uOiBQcm9wVHlwZXMuYW55LFxuICBnZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbjogUHJvcFR5cGVzLmFueSxcbiAgb25Qb3B1cFZpc2libGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBhZnRlclBvcHVwVmlzaWJsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHBvcHVwOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkLFxuICBwb3B1cFN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHBvcHVwQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHBvcHVwUGxhY2VtZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBidWlsdGluUGxhY2VtZW50czogUHJvcFR5cGVzLm9iamVjdCxcbiAgcG9wdXBUcmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICBwb3B1cEFuaW1hdGlvbjogUHJvcFR5cGVzLmFueSxcbiAgbW91c2VFbnRlckRlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICBtb3VzZUxlYXZlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIHpJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgZm9jdXNEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgYmx1ckRlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRQb3B1cENvbnRhaW5lcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGdldERvY3VtZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgZm9yY2VSZW5kZXI6IFByb3BUeXBlcy5ib29sLFxuICBkZXN0cm95UG9wdXBPbkhpZGU6IFByb3BUeXBlcy5ib29sLFxuICBtYXNrOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWFza0Nsb3NhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25Qb3B1cEFsaWduOiBQcm9wVHlwZXMuZnVuYyxcbiAgcG9wdXBBbGlnbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgcG9wdXBWaXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGVmYXVsdFBvcHVwVmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIG1hc2tUcmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICBtYXNrQW5pbWF0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdHJldGNoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhbGlnblBvaW50OiBQcm9wVHlwZXMuYm9vbCAvLyBNYXliZSB3ZSBjYW4gc3VwcG9ydCB1c2VyIHBhc3MgcG9zaXRpb24gaW4gdGhlIGZ1dHVyZVxufTtcblRyaWdnZXIuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuVHJpZ2dlci5jaGlsZENvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblRyaWdnZXIuZGVmYXVsdFByb3BzID0ge1xuICBwcmVmaXhDbHM6ICdyYy10cmlnZ2VyLXBvcHVwJyxcbiAgZ2V0UG9wdXBDbGFzc05hbWVGcm9tQWxpZ246IHJldHVybkVtcHR5U3RyaW5nLFxuICBnZXREb2N1bWVudDogcmV0dXJuRG9jdW1lbnQsXG4gIG9uUG9wdXBWaXNpYmxlQ2hhbmdlOiBub29wLFxuICBhZnRlclBvcHVwVmlzaWJsZUNoYW5nZTogbm9vcCxcbiAgb25Qb3B1cEFsaWduOiBub29wLFxuICBwb3B1cENsYXNzTmFtZTogJycsXG4gIG1vdXNlRW50ZXJEZWxheTogMCxcbiAgbW91c2VMZWF2ZURlbGF5OiAwLjEsXG4gIGZvY3VzRGVsYXk6IDAsXG4gIGJsdXJEZWxheTogMC4xNSxcbiAgcG9wdXBTdHlsZToge30sXG4gIGRlc3Ryb3lQb3B1cE9uSGlkZTogZmFsc2UsXG4gIHBvcHVwQWxpZ246IHt9LFxuICBkZWZhdWx0UG9wdXBWaXNpYmxlOiBmYWxzZSxcbiAgbWFzazogZmFsc2UsXG4gIG1hc2tDbG9zYWJsZTogdHJ1ZSxcbiAgYWN0aW9uOiBbXSxcbiAgc2hvd0FjdGlvbjogW10sXG4gIGhpZGVBY3Rpb246IFtdXG59O1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gIHRoaXMub25Nb3VzZUVudGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgbW91c2VFbnRlckRlbGF5ID0gX3RoaXM1LnByb3BzLm1vdXNlRW50ZXJEZWxheTtcblxuICAgIF90aGlzNS5maXJlRXZlbnRzKCdvbk1vdXNlRW50ZXInLCBlKTtcbiAgICBfdGhpczUuZGVsYXlTZXRQb3B1cFZpc2libGUodHJ1ZSwgbW91c2VFbnRlckRlbGF5LCBtb3VzZUVudGVyRGVsYXkgPyBudWxsIDogZSk7XG4gIH07XG5cbiAgdGhpcy5vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgX3RoaXM1LmZpcmVFdmVudHMoJ29uTW91c2VNb3ZlJywgZSk7XG4gICAgX3RoaXM1LnNldFBvaW50KGUpO1xuICB9O1xuXG4gIHRoaXMub25Nb3VzZUxlYXZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBfdGhpczUuZmlyZUV2ZW50cygnb25Nb3VzZUxlYXZlJywgZSk7XG4gICAgX3RoaXM1LmRlbGF5U2V0UG9wdXBWaXNpYmxlKGZhbHNlLCBfdGhpczUucHJvcHMubW91c2VMZWF2ZURlbGF5KTtcbiAgfTtcblxuICB0aGlzLm9uUG9wdXBNb3VzZUVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzNS5jbGVhckRlbGF5VGltZXIoKTtcbiAgfTtcblxuICB0aGlzLm9uUG9wdXBNb3VzZUxlYXZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3RyaWdnZXIvcHVsbC8xM1xuICAgIC8vIHJlYWN0IGJ1Zz9cbiAgICBpZiAoZS5yZWxhdGVkVGFyZ2V0ICYmICFlLnJlbGF0ZWRUYXJnZXQuc2V0VGltZW91dCAmJiBfdGhpczUuX2NvbXBvbmVudCAmJiBfdGhpczUuX2NvbXBvbmVudC5nZXRQb3B1cERvbU5vZGUgJiYgY29udGFpbnMoX3RoaXM1Ll9jb21wb25lbnQuZ2V0UG9wdXBEb21Ob2RlKCksIGUucmVsYXRlZFRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3RoaXM1LmRlbGF5U2V0UG9wdXBWaXNpYmxlKGZhbHNlLCBfdGhpczUucHJvcHMubW91c2VMZWF2ZURlbGF5KTtcbiAgfTtcblxuICB0aGlzLm9uRm9jdXMgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzNS5maXJlRXZlbnRzKCdvbkZvY3VzJywgZSk7XG4gICAgLy8gaW5jYXNlIGZvY3VzaW4gYW5kIGZvY3Vzb3V0XG4gICAgX3RoaXM1LmNsZWFyRGVsYXlUaW1lcigpO1xuICAgIGlmIChfdGhpczUuaXNGb2N1c1RvU2hvdygpKSB7XG4gICAgICBfdGhpczUuZm9jdXNUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIF90aGlzNS5kZWxheVNldFBvcHVwVmlzaWJsZSh0cnVlLCBfdGhpczUucHJvcHMuZm9jdXNEZWxheSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzNS5maXJlRXZlbnRzKCdvbk1vdXNlRG93bicsIGUpO1xuICAgIF90aGlzNS5wcmVDbGlja1RpbWUgPSBEYXRlLm5vdygpO1xuICB9O1xuXG4gIHRoaXMub25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICBfdGhpczUuZmlyZUV2ZW50cygnb25Ub3VjaFN0YXJ0JywgZSk7XG4gICAgX3RoaXM1LnByZVRvdWNoVGltZSA9IERhdGUubm93KCk7XG4gIH07XG5cbiAgdGhpcy5vbkJsdXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzNS5maXJlRXZlbnRzKCdvbkJsdXInLCBlKTtcbiAgICBfdGhpczUuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgaWYgKF90aGlzNS5pc0JsdXJUb0hpZGUoKSkge1xuICAgICAgX3RoaXM1LmRlbGF5U2V0UG9wdXBWaXNpYmxlKGZhbHNlLCBfdGhpczUucHJvcHMuYmx1ckRlbGF5KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbkNvbnRleHRNZW51ID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgX3RoaXM1LmZpcmVFdmVudHMoJ29uQ29udGV4dE1lbnUnLCBlKTtcbiAgICBfdGhpczUuc2V0UG9wdXBWaXNpYmxlKHRydWUsIGUpO1xuICB9O1xuXG4gIHRoaXMub25Db250ZXh0TWVudUNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChfdGhpczUuaXNDb250ZXh0TWVudVRvU2hvdygpKSB7XG4gICAgICBfdGhpczUuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbkNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgX3RoaXM1LmZpcmVFdmVudHMoJ29uQ2xpY2snLCBldmVudCk7XG4gICAgLy8gZm9jdXMgd2lsbCB0cmlnZ2VyIGNsaWNrXG4gICAgaWYgKF90aGlzNS5mb2N1c1RpbWUpIHtcbiAgICAgIHZhciBwcmVUaW1lID0gdm9pZCAwO1xuICAgICAgaWYgKF90aGlzNS5wcmVDbGlja1RpbWUgJiYgX3RoaXM1LnByZVRvdWNoVGltZSkge1xuICAgICAgICBwcmVUaW1lID0gTWF0aC5taW4oX3RoaXM1LnByZUNsaWNrVGltZSwgX3RoaXM1LnByZVRvdWNoVGltZSk7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzNS5wcmVDbGlja1RpbWUpIHtcbiAgICAgICAgcHJlVGltZSA9IF90aGlzNS5wcmVDbGlja1RpbWU7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzNS5wcmVUb3VjaFRpbWUpIHtcbiAgICAgICAgcHJlVGltZSA9IF90aGlzNS5wcmVUb3VjaFRpbWU7XG4gICAgICB9XG4gICAgICBpZiAoTWF0aC5hYnMocHJlVGltZSAtIF90aGlzNS5mb2N1c1RpbWUpIDwgMjApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgX3RoaXM1LmZvY3VzVGltZSA9IDA7XG4gICAgfVxuICAgIF90aGlzNS5wcmVDbGlja1RpbWUgPSAwO1xuICAgIF90aGlzNS5wcmVUb3VjaFRpbWUgPSAwO1xuICAgIGlmIChldmVudCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdmFyIG5leHRWaXNpYmxlID0gIV90aGlzNS5zdGF0ZS5wb3B1cFZpc2libGU7XG4gICAgaWYgKF90aGlzNS5pc0NsaWNrVG9IaWRlKCkgJiYgIW5leHRWaXNpYmxlIHx8IG5leHRWaXNpYmxlICYmIF90aGlzNS5pc0NsaWNrVG9TaG93KCkpIHtcbiAgICAgIF90aGlzNS5zZXRQb3B1cFZpc2libGUoIV90aGlzNS5zdGF0ZS5wb3B1cFZpc2libGUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vblBvcHVwTW91c2VEb3duID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY29udGV4dCRyY1RyaWdnZXIgPSBfdGhpczUuY29udGV4dC5yY1RyaWdnZXIsXG4gICAgICAgIHJjVHJpZ2dlciA9IF9jb250ZXh0JHJjVHJpZ2dlciA9PT0gdW5kZWZpbmVkID8ge30gOiBfY29udGV4dCRyY1RyaWdnZXI7XG5cbiAgICBfdGhpczUuaGFzUG9wdXBNb3VzZURvd24gPSB0cnVlO1xuXG4gICAgY2xlYXJUaW1lb3V0KF90aGlzNS5tb3VzZURvd25UaW1lb3V0KTtcbiAgICBfdGhpczUubW91c2VEb3duVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM1Lmhhc1BvcHVwTW91c2VEb3duID0gZmFsc2U7XG4gICAgfSwgMCk7XG5cbiAgICBpZiAocmNUcmlnZ2VyLm9uUG9wdXBNb3VzZURvd24pIHtcbiAgICAgIHJjVHJpZ2dlci5vblBvcHVwTW91c2VEb3duLmFwcGx5KHJjVHJpZ2dlciwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbkRvY3VtZW50Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoX3RoaXM1LnByb3BzLm1hc2sgJiYgIV90aGlzNS5wcm9wcy5tYXNrQ2xvc2FibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIHZhciByb290ID0gZmluZERPTU5vZGUoX3RoaXM1KTtcbiAgICBpZiAoIWNvbnRhaW5zKHJvb3QsIHRhcmdldCkgJiYgIV90aGlzNS5oYXNQb3B1cE1vdXNlRG93bikge1xuICAgICAgX3RoaXM1LmNsb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZ2V0Um9vdERvbU5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZpbmRET01Ob2RlKF90aGlzNSk7XG4gIH07XG5cbiAgdGhpcy5nZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbiA9IGZ1bmN0aW9uIChhbGlnbikge1xuICAgIHZhciBjbGFzc05hbWUgPSBbXTtcbiAgICB2YXIgX3Byb3BzOSA9IF90aGlzNS5wcm9wcyxcbiAgICAgICAgcG9wdXBQbGFjZW1lbnQgPSBfcHJvcHM5LnBvcHVwUGxhY2VtZW50LFxuICAgICAgICBidWlsdGluUGxhY2VtZW50cyA9IF9wcm9wczkuYnVpbHRpblBsYWNlbWVudHMsXG4gICAgICAgIHByZWZpeENscyA9IF9wcm9wczkucHJlZml4Q2xzLFxuICAgICAgICBhbGlnblBvaW50ID0gX3Byb3BzOS5hbGlnblBvaW50LFxuICAgICAgICBnZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbiA9IF9wcm9wczkuZ2V0UG9wdXBDbGFzc05hbWVGcm9tQWxpZ247XG5cbiAgICBpZiAocG9wdXBQbGFjZW1lbnQgJiYgYnVpbHRpblBsYWNlbWVudHMpIHtcbiAgICAgIGNsYXNzTmFtZS5wdXNoKGdldEFsaWduUG9wdXBDbGFzc05hbWUoYnVpbHRpblBsYWNlbWVudHMsIHByZWZpeENscywgYWxpZ24sIGFsaWduUG9pbnQpKTtcbiAgICB9XG4gICAgaWYgKGdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduKSB7XG4gICAgICBjbGFzc05hbWUucHVzaChnZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbihhbGlnbikpO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NOYW1lLmpvaW4oJyAnKTtcbiAgfTtcblxuICB0aGlzLmdldENvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3BzMTAgPSBfdGhpczUucHJvcHMsXG4gICAgICAgIHByZWZpeENscyA9IF9wcm9wczEwLnByZWZpeENscyxcbiAgICAgICAgZGVzdHJveVBvcHVwT25IaWRlID0gX3Byb3BzMTAuZGVzdHJveVBvcHVwT25IaWRlLFxuICAgICAgICBwb3B1cENsYXNzTmFtZSA9IF9wcm9wczEwLnBvcHVwQ2xhc3NOYW1lLFxuICAgICAgICBhY3Rpb24gPSBfcHJvcHMxMC5hY3Rpb24sXG4gICAgICAgIG9uUG9wdXBBbGlnbiA9IF9wcm9wczEwLm9uUG9wdXBBbGlnbixcbiAgICAgICAgcG9wdXBBbmltYXRpb24gPSBfcHJvcHMxMC5wb3B1cEFuaW1hdGlvbixcbiAgICAgICAgcG9wdXBUcmFuc2l0aW9uTmFtZSA9IF9wcm9wczEwLnBvcHVwVHJhbnNpdGlvbk5hbWUsXG4gICAgICAgIHBvcHVwU3R5bGUgPSBfcHJvcHMxMC5wb3B1cFN0eWxlLFxuICAgICAgICBtYXNrID0gX3Byb3BzMTAubWFzayxcbiAgICAgICAgbWFza0FuaW1hdGlvbiA9IF9wcm9wczEwLm1hc2tBbmltYXRpb24sXG4gICAgICAgIG1hc2tUcmFuc2l0aW9uTmFtZSA9IF9wcm9wczEwLm1hc2tUcmFuc2l0aW9uTmFtZSxcbiAgICAgICAgekluZGV4ID0gX3Byb3BzMTAuekluZGV4LFxuICAgICAgICBwb3B1cCA9IF9wcm9wczEwLnBvcHVwLFxuICAgICAgICBzdHJldGNoID0gX3Byb3BzMTAuc3RyZXRjaCxcbiAgICAgICAgYWxpZ25Qb2ludCA9IF9wcm9wczEwLmFsaWduUG9pbnQ7XG4gICAgdmFyIF9zdGF0ZSA9IF90aGlzNS5zdGF0ZSxcbiAgICAgICAgcG9wdXBWaXNpYmxlID0gX3N0YXRlLnBvcHVwVmlzaWJsZSxcbiAgICAgICAgcG9pbnQgPSBfc3RhdGUucG9pbnQ7XG5cblxuICAgIHZhciBhbGlnbiA9IF90aGlzNS5nZXRQb3B1cEFsaWduKCk7XG5cbiAgICB2YXIgbW91c2VQcm9wcyA9IHt9O1xuICAgIGlmIChfdGhpczUuaXNNb3VzZUVudGVyVG9TaG93KCkpIHtcbiAgICAgIG1vdXNlUHJvcHMub25Nb3VzZUVudGVyID0gX3RoaXM1Lm9uUG9wdXBNb3VzZUVudGVyO1xuICAgIH1cbiAgICBpZiAoX3RoaXM1LmlzTW91c2VMZWF2ZVRvSGlkZSgpKSB7XG4gICAgICBtb3VzZVByb3BzLm9uTW91c2VMZWF2ZSA9IF90aGlzNS5vblBvcHVwTW91c2VMZWF2ZTtcbiAgICB9XG5cbiAgICBtb3VzZVByb3BzLm9uTW91c2VEb3duID0gX3RoaXM1Lm9uUG9wdXBNb3VzZURvd247XG4gICAgbW91c2VQcm9wcy5vblRvdWNoU3RhcnQgPSBfdGhpczUub25Qb3B1cE1vdXNlRG93bjtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgUG9wdXAsXG4gICAgICBfZXh0ZW5kcyh7XG4gICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICBkZXN0cm95UG9wdXBPbkhpZGU6IGRlc3Ryb3lQb3B1cE9uSGlkZSxcbiAgICAgICAgdmlzaWJsZTogcG9wdXBWaXNpYmxlLFxuICAgICAgICBwb2ludDogYWxpZ25Qb2ludCAmJiBwb2ludCxcbiAgICAgICAgY2xhc3NOYW1lOiBwb3B1cENsYXNzTmFtZSxcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGFsaWduOiBhbGlnbixcbiAgICAgICAgb25BbGlnbjogb25Qb3B1cEFsaWduLFxuICAgICAgICBhbmltYXRpb246IHBvcHVwQW5pbWF0aW9uLFxuICAgICAgICBnZXRDbGFzc05hbWVGcm9tQWxpZ246IF90aGlzNS5nZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnblxuICAgICAgfSwgbW91c2VQcm9wcywge1xuICAgICAgICBzdHJldGNoOiBzdHJldGNoLFxuICAgICAgICBnZXRSb290RG9tTm9kZTogX3RoaXM1LmdldFJvb3REb21Ob2RlLFxuICAgICAgICBzdHlsZTogcG9wdXBTdHlsZSxcbiAgICAgICAgbWFzazogbWFzayxcbiAgICAgICAgekluZGV4OiB6SW5kZXgsXG4gICAgICAgIHRyYW5zaXRpb25OYW1lOiBwb3B1cFRyYW5zaXRpb25OYW1lLFxuICAgICAgICBtYXNrQW5pbWF0aW9uOiBtYXNrQW5pbWF0aW9uLFxuICAgICAgICBtYXNrVHJhbnNpdGlvbk5hbWU6IG1hc2tUcmFuc2l0aW9uTmFtZSxcbiAgICAgICAgcmVmOiBfdGhpczUuc2F2ZVBvcHVwXG4gICAgICB9KSxcbiAgICAgIHR5cGVvZiBwb3B1cCA9PT0gJ2Z1bmN0aW9uJyA/IHBvcHVwKCkgOiBwb3B1cFxuICAgICk7XG4gIH07XG5cbiAgdGhpcy5nZXRDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXM1LnByb3BzO1xuXG4gICAgdmFyIHBvcHVwQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgLy8gTWFrZSBzdXJlIGRlZmF1bHQgcG9wdXAgY29udGFpbmVyIHdpbGwgbmV2ZXIgY2F1c2Ugc2Nyb2xsYmFyIGFwcGVhcmluZ1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdHJpZ2dlci9pc3N1ZXMvNDFcbiAgICBwb3B1cENvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgcG9wdXBDb250YWluZXIuc3R5bGUudG9wID0gJzAnO1xuICAgIHBvcHVwQ29udGFpbmVyLnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgcG9wdXBDb250YWluZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgdmFyIG1vdW50Tm9kZSA9IHByb3BzLmdldFBvcHVwQ29udGFpbmVyID8gcHJvcHMuZ2V0UG9wdXBDb250YWluZXIoZmluZERPTU5vZGUoX3RoaXM1KSkgOiBwcm9wcy5nZXREb2N1bWVudCgpLmJvZHk7XG4gICAgbW91bnROb2RlLmFwcGVuZENoaWxkKHBvcHVwQ29udGFpbmVyKTtcbiAgICByZXR1cm4gcG9wdXBDb250YWluZXI7XG4gIH07XG5cbiAgdGhpcy5zZXRQb2ludCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgIHZhciBhbGlnblBvaW50ID0gX3RoaXM1LnByb3BzLmFsaWduUG9pbnQ7XG5cbiAgICBpZiAoIWFsaWduUG9pbnQgfHwgIXBvaW50KSByZXR1cm47XG5cbiAgICBfdGhpczUuc2V0U3RhdGUoe1xuICAgICAgcG9pbnQ6IHtcbiAgICAgICAgcGFnZVg6IHBvaW50LnBhZ2VYLFxuICAgICAgICBwYWdlWTogcG9pbnQucGFnZVlcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmhhbmRsZVBvcnRhbFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX3RoaXM1LnByZXZQb3B1cFZpc2libGUgIT09IF90aGlzNS5zdGF0ZS5wb3B1cFZpc2libGUpIHtcbiAgICAgIF90aGlzNS5wcm9wcy5hZnRlclBvcHVwVmlzaWJsZUNoYW5nZShfdGhpczUuc3RhdGUucG9wdXBWaXNpYmxlKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5zYXZlUG9wdXAgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIF90aGlzNS5fY29tcG9uZW50ID0gbm9kZTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyaWdnZXI7Il0sInNvdXJjZVJvb3QiOiIifQ==