(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{120:function(t,e,n){!function(e,i){t.exports=i(n(0))}(0,function(t){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.i=function(t){return t},n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=520)}([function(t,e,n){var i=n(156),r=i.mix({},i,{assign:i.mix,merge:i.deepMix,cloneDeep:i.clone,isFinite:isFinite,isNaN:isNaN,snapEqual:i.isNumberEqual,remove:i.pull,inArray:i.contains,toAllPadding:function(t){var e=0,n=0,i=0,a=0;return r.isNumber(t)||r.isString(t)?e=n=i=a=t:r.isArray(t)?(e=t[0],i=r.isNil(t[1])?t[0]:t[1],a=r.isNil(t[2])?t[0]:t[2],n=r.isNil(t[3])?i:t[3]):r.isObject(t)&&(e=t.top||0,i=t.right||0,a=t.bottom||0,n=t.left||0),[e,i,a,n]}});r.Array={groupToMap:i.groupToMap,group:i.group,merge:i.merge,values:i.valuesOfKey,getRange:i.getRange,firstValue:i.firstValue,remove:i.pull},t.exports=r},function(t,e,n){var i=n(139),r={};i.merge(r,i,{mixin:function(t,e){var n=t.CFG?"CFG":"ATTRS";if(t&&e){t._mixins=e,t[n]=t[n]||{};var i={};r.each(e,function(e){r.augment(t,e);var a=e[n];a&&r.merge(i,a)}),t[n]=r.merge(i,t[n])}}}),t.exports=r},function(t,e,n){var i=n(36),r=n(4);t.exports=function(t,e){if(t)if(r(t))for(var n=0,a=t.length;n<a&&!1!==e(t[n],n);n++);else if(i(t))for(var o in t)if(t.hasOwnProperty(o)&&!1===e(t[o],o))break}},function(t,e,n){var i=n(33),r=n(156),a=r.mix({assign:r.mix,isFinite:isFinite,isNaN:isNaN,Group:i.Group,Event:i.Event},r);t.exports=a},function(t,e,n){var i=n(15),r=Array.isArray?Array.isArray:function(t){return i(t,"Array")};t.exports=r},function(t,e,n){var i=n(0),r=n(121),a={version:"3.3.3",renderer:"canvas",trackable:!0,trackingInfo:{},animate:!0,widthRatio:{column:.5,rose:.9999999,multiplePie:1/1.3},showSinglePoint:!1,connectNulls:!1,scales:{},registerTheme:function(t,e){r[t]=e},setTheme:function(t){var e={};e=i.isObject(t)?t:-1!==i.indexOf(Object.keys(r),t)?r[t]:r.default,i.deepMix(a,e)}};a.setTheme("default"),t.exports=a},function(t,e,n){var i=n(1),r=n(311),a=n(122),o=n(69),s=function t(e){t.superclass.constructor.call(this,e)};s.ATTRS={},i.extend(s,a);var u={matrix:"matrix",path:"path",points:"points",lineDash:"lineDash"};i.augment(s,r,{isShape:!0,drawInner:function(t){var e=this._attrs;this.createPath(t);var n=t.globalAlpha;if(this.hasFill()){var r=e.fillOpacity;i.isNil(r)||1===r?t.fill():(t.globalAlpha=r,t.fill(),t.globalAlpha=n)}if(this.hasStroke()&&this._attrs.lineWidth>0){var a=e.strokeOpacity;i.isNil(a)||1===a||(t.globalAlpha=a),t.stroke()}this.afterPath(t)},afterPath:function(){},isHitBox:function(){return!0},isHit:function(t,e){var n=[t,e,1];if(this.invert(n),this.isHitBox()){var i=this.getBBox();if(i&&!o.box(i.minX,i.maxX,i.minY,i.maxY,n[0],n[1]))return!1}var r=this._attrs.clip;return r?(r.invert(n,this.get("canvas")),!!r.isPointInPath(n[0],n[1])&&this.isPointInPath(n[0],n[1])):this.isPointInPath(n[0],n[1])},calculateBox:function(){return null},getHitLineWidth:function(){var t=this._attrs,e=t.lineAppendWidth||0;return(t.lineWidth||0)+e},clearTotalMatrix:function(){this._cfg.totalMatrix=null,this._cfg.region=null},clearBBox:function(){this._cfg.box=null,this._cfg.region=null},getBBox:function(){var t=this._cfg.box;return t||((t=this.calculateBox())&&(t.x=t.minX,t.y=t.minY,t.width=t.maxX-t.minX,t.height=t.maxY-t.minY),this._cfg.box=t),t},clone:function(){var t=null,e=this._attrs,n={};return i.each(e,function(t,r){u[r]&&i.isArray(e[r])?n[r]=function(t){for(var e=[],n=0;n<t.length;n++)i.isArray(t[n])?e.push([].concat(t[n])):e.push(t[n]);return e}(e[r]):n[r]=e[r]}),t=new this.constructor({attrs:n}),t._cfg.zIndex=this._cfg.zIndex,t}}),t.exports=s},function(t,e){t.exports=function(t){return null===t||void 0===t}},function(t,e,n){function i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var r=n(59),a=n(216),o=n(112),s=n(0),u=n(5),l=n(283),c=n(9),h=n(289),f=n(287),p=n(288),g=n(302),d=["color","shape","size"];function v(t){return(s.isString(t)||s.isPlainObject(t))&&(t=[t]),s.each(t,function(e,n){s.isObject(e)||(t[n]={type:e})}),t}var y=function(t){!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(n,t);var e=n.prototype;function n(e){var n;return(n=t.call(this,e)||this).viewTheme=n.get("viewTheme"),s.assign(i(i(n)),h,f,p),n.get("container")&&n._initContainer(),n._initOptions(),n}return e.getDefaultCfg=function(){return{_id:null,type:"base",coord:null,attrs:{},view:null,data:[],scales:{},container:null,labelContainer:null,shapeContainer:null,attrOptions:{},styleOptions:null,selectedOptions:null,activedOptions:null,hasDefaultAdjust:!1,adjusts:null,shapeType:null,generatePoints:!1,sortable:!1,labelCfg:null,shareTooltip:!0,tooltipCfg:null,animate:!0,animateCfg:null,visible:!0}},e._initOptions=function(){var t=this.get("adjusts");t&&(t=v(t),this.set("adjusts",t))},e._createScale=function(t,e){var n=this.get("scales"),i=n[t];return i||(i=this.get("view").createScale(t,e),n[t]=i),i},e._setAttrOptions=function(t,e){this.get("attrOptions")[t]=e},e._createAttrOption=function(t,e,n,i){var r={};r.field=e,n?s.isFunction(n)?r.callback=n:r.values=n:"color"!==t&&(r.values=i),this._setAttrOptions(t,r)},e.position=function(t){return this._setAttrOptions("position",{field:t}),this},e.color=function(t,e){var n=this.viewTheme||u;return this._createAttrOption("color",t,e,n.colors),this},e.size=function(t,e){var n=this.viewTheme||u;return this._createAttrOption("size",t,e,n.sizes),this},e.shape=function(t,e){var n=this.viewTheme||u,i=this.get("type"),r=n.shapes[i]||[];return this._createAttrOption("shape",t,e,r),this},e.opacity=function(t,e){var n=this.viewTheme||u;return this._createAttrOption("opacity",t,e,n.opacities),this},e.style=function(t,e){var n,i=this.get("styleOptions");return i||(i={},this.set("styleOptions",i)),s.isObject(t)&&(e=t,t=null),t&&(n=g(t)),i.fields=n,i.style=e,this},e.label=function(t,e,n){var i,r=this.get("labelCfg");return r||(r={},this.set("labelCfg",r)),t&&(i=g(t)),r.fields=i,s.isFunction(e)?(n||(n={}),r.callback=e):s.isObject(e)&&(n=e),r.globalCfg=n,this},e.tooltip=function(t,e){var n,i=this.get("tooltipCfg");(i||(i={}),!1===t)?this.set("tooltipCfg",!1):(t&&(n=g(t)),i.fields=n,i.cfg=e);return this.set("tooltipCfg",i),this},e.animate=function(t){return this.set("animateCfg",t),this},e.active=function(t,e){return!1===t?this.set("allowActive",!1):s.isObject(t)?(this.set("allowActive",!0),this.set("activedOptions",t)):(this.set("allowActive",!0),this.set("activedOptions",e)),this},e.adjust=function(t){return this.get("hasDefaultAdjust")||(t&&(t=v(t)),this.set("adjusts",t)),this},e.select=function(t,e){return!1===t?this.set("allowSelect",!1):s.isObject(t)?(this.set("allowSelect",!0),this.set("selectedOptions",t)):(this.set("allowSelect",!0),this.set("selectedOptions",e)),this},e.hasAdjust=function(t){var e=this.get("adjusts");if(!t)return!1;var n=!1;return s.each(e,function(e){if(e.type===t)return n=!0,!1}),n},e.hasStack=function(){var t=this.get("isStacked");return s.isNil(t)&&(t=this.hasAdjust("stack"),this.set("isStacked",t)),t},e.isInCircle=function(){var t=this.get("coord");return t&&t.isPolar},e._initContainer=function(){var t=this.get("shapeContainer");if(!t){var e=this.get("container"),n=this.get("view"),i=n&&n.get("_id");t=e.addGroup({viewId:i,visible:this.get("visible")}),this.set("shapeContainer",t)}},e.init=function(){var t=this;if(t._initContainer(),t._initAttrs(),t.get("tooltipCfg")&&t.get("tooltipCfg").fields){var e=t.get("tooltipCfg").fields;s.each(e,function(e){t._createScale(e)})}var n=t._processData();t.get("adjusts")&&t._adjust(n),t.set("dataArray",n)},e._initAttrs=function(){var t=this.get("attrs"),e=this.get("attrOptions"),n=this.get("coord"),i=this.viewTheme||u,a=!1;for(var o in e)if(e.hasOwnProperty(o)){var l=e[o],c=s.upperFirst(o),h=g(l.field);"position"===o&&(l.coord=n,1===h.length&&"theta"===n.type&&(h.unshift("1"),a=!0));for(var f=[],p=0;p<h.length;p++){var d=h[p],v=this._createScale(d);"color"===o&&s.isNil(l.values)&&(v.values.length<=8?l.values=a?i.colors_pie:i.colors:v.values.length<=16?l.values=a?i.colors_pie_16:i.colors_16:l.values=i.colors_24,s.isNil(l.values)&&(l.values=i.colors)),f.push(v)}if("theta"===n.type&&"position"===o&&f.length>1){var y=f[1];y.change({nice:!1,min:0,max:Math.max.apply(null,y.values)})}l.scales=f;var m=new r[c](l);t[o]=m}},e._processData=function(){for(var t=this.get("data"),e=[],n=this._groupData(t),i=0;i<n.length;i++){var r=n[i],a=this._saveOrigin(r);this._numberic(a),e.push(a)}return e},e._groupData=function(t){var e=this._getGroupScales().map(function(t){return t.field});return s.Array.group(t,e)},e._saveOrigin=function(t){for(var e=[],n=0;n<t.length;n++){var i=t[n],r={};for(var a in i)r[a]=i[a];r._origin=i,e.push(r)}return e},e._numberic=function(t){for(var e=this.getAttr("position").scales,n=0;n<t.length;n++)for(var i=t[n],r=0;r<Math.min(2,e.length);r++){var a=e[r];if(a.isCategory){var o=a.field;i[o]=a.translate(i[o])}}},e._getGroupScales=function(){var t=this.get("groupScales");if(!t){t=[];var e=this.get("attrs");s.each(e,function(e){if(-1!==d.indexOf(e.type)){var n=e.scales;s.each(n,function(e){e.isCategory&&-1===s.indexOf(t,e)&&t.push(e)})}}),this.set("groupScales",t)}return t},e._updateStackRange=function(t,e,n){for(var i=s.Array.merge(n),r=e.min,a=e.max,o=0;o<i.length;o++){var u=i[o],l=Math.min.apply(null,u[t]),c=Math.max.apply(null,u[t]);l<r&&(r=l),c>a&&(a=c)}(r<e.min||a>e.max)&&e.change({min:r,max:a})},e._adjust=function(t){var e=this,n=e.get("adjusts"),i=this.viewTheme||u,r=e.getYScale(),o=e.getXScale(),l=o.field,c=r?r.field:null;s.each(n,function(n){var u=s.mix({xField:l,yField:c},n),h=s.upperFirst(n.type);if("Dodge"===h){var f=[];if(o.isCategory||o.isIdentity)f.push("x");else{if(r)throw new Error("dodge is not support linear attribute, please use category attribute!");f.push("y")}u.adjustNames=f,u.dodgeRatio=i.widthRatio.column}else if("Stack"===h){var p=e.get("coord");if(!r){u.height=p.getHeight();var g=e.getDefaultValue("size")||3;u.size=g}!p.isTransposed&&s.isNil(u.reverseOrder)&&(u.reverseOrder=!0)}new a[h](u).processAdjust(t),"Stack"===h&&r&&e._updateStackRange(c,r,t)})},e.setCoord=function(t){this.set("coord",t);var e=this.getAttr("position");this.get("shapeContainer").setMatrix(t.matrix),e&&(e.coord=t)},e.paint=function(){var t=this.get("dataArray"),e=[],n=this.getShapeFactory();n.setCoord(this.get("coord"));var i=this.get("shapeContainer");this._beforeMapping(t);for(var r=0;r<t.length;r++){var a=t[r],o=r;a=this._mapping(a),e.push(a),this.draw(a,i,n,o)}this.get("labelCfg")&&this._addLabels(s.union.apply(null,e),i.get("children")),this.get("sortable")?this.set("dataArray",e):this._sort(e)},e._sort=function(t){var e=this.getXScale(),n=e.field;s.each(t,function(t){t.sort(function(t,i){return e.translate(t._origin[n])-e.translate(i._origin[n])})}),this.set("dataArray",t)},e._beforeMapping=function(t){var e=this;if(e.get("sortable")){var n=e.getXScale(),i=n.field;s.each(t,function(t){t.sort(function(t,e){return n.translate(t[i])-n.translate(e[i])})})}e.get("generatePoints")&&(s.each(t,function(t){e._generatePoints(t)}),s.each(t,function(e,n){var i=t[n+1];i&&(e[0].nextPoints=i[0].points)}))},e._addLabels=function(t,e){var n=this,i=n.get("type"),r=n.get("viewTheme")||u,a=n.get("coord"),o=l.getLabelsClass(a.type,i),c=n.get("container"),h=s.map(n.get("labelCfg").fields,function(t){return n._createScale(t)}),f=c.addGroup(o,{_id:this.get("_id"),labelCfg:s.mix({scales:h},n.get("labelCfg")),coord:a,geom:n,geomType:i,viewTheme:r,visible:n.get("visible")});f.showLabels(t,e),n.set("labelContainer",f)},e.getShapeFactory=function(){var t=this.get("shapeFactory");if(!t){var e=this.get("shapeType");t=c.getShapeFactory(e),this.set("shapeFactory",t)}return t},e._generatePoints=function(t){for(var e=this.getShapeFactory(),n=this.getAttr("shape"),i=0;i<t.length;i++){var r=t[i],a=this.createShapePointsCfg(r),o=n?this._getAttrValues(n,r):null,s=e.getShapePoints(o,a);r.points=s}},e.createShapePointsCfg=function(t){var e=this.getXScale(),n=this.getYScale();return{x:this._normalizeValues(t[e.field],e),y:n?this._normalizeValues(t[n.field],n):t.y?t.y:.1,y0:n?n.scale(this.getYMinValue()):void 0}},e.getYMinValue=function(){var t=this.getYScale(),e=t.min,n=t.max;return e>=0?e:n<=0?n:0},e._normalizeValues=function(t,e){var n=[];if(s.isArray(t))for(var i=0;i<t.length;i++){var r=t[i];n.push(e.scale(r))}else n=e.scale(t);return n},e._mapping=function(t){for(var e=this.get("attrs"),n=[],i=0;i<t.length;i++){var r=t[i],a={};for(var o in a._origin=r._origin,a.points=r.points,a.nextPoints=r.nextPoints,e)if(e.hasOwnProperty(o)){var u=e[o],l=u.names,c=this._getAttrValues(u,r);if(l.length>1)for(var h=0;h<c.length;h++){var f=c[h];a[l[h]]=s.isArray(f)&&1===f.length?f[0]:f}else a[l[0]]=1===c.length?c[0]:c}n.push(a)}return n},e._getAttrValues=function(t,e){for(var n=t.scales,i=[],r=0;r<n.length;r++){var a=n[r],o=a.field;"identity"===a.type?i.push(a.value):i.push(e[o])}return t.mapping.apply(t,i)},e.getAttrValue=function(t,e){var n=this.getAttr(t),i=null;n&&(i=this._getAttrValues(n,e)[0]);return i},e.getDefaultValue=function(t){var e=this.get(t),n=this.getAttr(t);if(n){var i=n.getScale(t);"identity"===i.type&&(e=i.value)}return e},e.draw=function(t,e,n,i){for(var r=0;r<t.length;r++){var a=t[r];this.drawPoint(a,e,n,i+r)}},e.getCallbackCfg=function(t,e,n){if(!t)return e;var i={},r=t.map(function(t){return n[t]});return s.each(e,function(t,e){s.isFunction(t)?i[e]=t.apply(null,r):i[e]=t}),i},e._getShapeId=function(t){var e=this.get("_id"),n=this.get("keyFields");if(n&&n.length>0)s.each(n,function(n){e+="-"+t[n]});else{var i,r=this.get("type"),a=this.getXScale(),o=this.getYScale(),u=a.field||"x",l=o.field||"y",c=t[l];i=a.isIdentity?a.value:t[u],e+="interval"===r||"schema"===r?"-"+i:"line"===r||"area"===r||"path"===r?"-"+r:"-"+i+"-"+c;var h=this._getGroupScales();s.isEmpty(h)||s.each(h,function(n){var i=n.field;"identity"!==n.type&&(e+="-"+t[i])})}return e},e.getDrawCfg=function(t){var e={origin:t,x:t.x,y:t.y,color:t.color,size:t.size,shape:t.shape,isInCircle:this.isInCircle(),opacity:t.opacity},n=this.get("styleOptions");return n&&n.style&&(e.style=this.getCallbackCfg(n.fields,n.style,t._origin)),this.get("generatePoints")&&(e.points=t.points,e.nextPoints=t.nextPoints),this.get("animate")&&(e._id=this._getShapeId(t._origin)),e},e.appendShapeInfo=function(t,e){t&&(t.setSilent("index",e),t.setSilent("coord",this.get("coord")),this.get("animate")&&this.get("animateCfg")&&t.setSilent("animateCfg",this.get("animateCfg")))},e.drawPoint=function(t,e,n,i){var r=t.shape,a=this.getDrawCfg(t),o=n.drawShape(r,a,e);this.appendShapeInfo(o,i)},e.getAttr=function(t){return this.get("attrs")[t]},e.getXScale=function(){return this.getAttr("position").scales[0]},e.getYScale=function(){return this.getAttr("position").scales[1]},e.getShapes=function(){var t=[],e=this.get("shapeContainer").get("children");return s.each(e,function(e){e.get("origin")&&t.push(e)}),t},e.getAttrsForLegend=function(){var t=this.get("attrs"),e=[];return s.each(t,function(t){-1!==d.indexOf(t.type)&&e.push(t)}),e},e.getFieldsForLegend=function(){var t=[],e=this.get("attrOptions");return s.each(d,function(n){var i=e[n];i&&i.field&&s.isString(i.field)&&(t=t.concat(i.field.split("*")))}),s.uniq(t)},e.changeVisible=function(t,e){this.set("visible",t);var n=this.get("shapeContainer");n&&n.set("visible",t);var i=this.get("labelContainer");(i&&i.set("visible",t),!e&&n)&&n.get("canvas").draw()},e.reset=function(){this.set("attrOptions",{}),this.clearInner()},e.clearInner=function(){this.clearActivedShapes(),this.clearSelected();var t=this.get("shapeContainer");t&&t.clear();var e=this.get("labelContainer");e&&e.remove(),this.set("attrs",{}),this.set("groupScales",null),this.set("labelContainer",null),this.set("xDistance",null),this.set("isStacked",null)},e.clear=function(){this.clearInner(),this.set("scales",{})},e.destroy=function(){this.clear();var e=this.get("shapeContainer");e&&e.remove(),this.offEvents(),t.prototype.destroy.call(this)},e.bindEvents=function(){this.get("view")&&(this._bindActiveAction(),this._bindSelectedAction())},e.offEvents=function(){this.get("view")&&(this._offActiveAction(),this._offSelectedAction())},n}(o);t.exports=y},function(t,e,n){var i=n(0),r=n(22),a=i.PathUtil,o={},s={_coord:null,draw:function(t,e){return this.drawShape?this.drawShape(t,e):null},setCoord:function(t){this._coord=t},parsePath:function(t,e){var n=this._coord;return t=a.parsePathString(t),t=n.isPolar&&!1!==e?r.convertPolarPath(n,t):r.convertNormalPath(n,t)},parsePoint:function(t){return this._coord.convertPoint(t)},parsePoints:function(t){var e=this._coord,n=[];return i.each(t,function(t){n.push(e.convertPoint(t))}),n}},u={defaultShapeType:null,setCoord:function(t){this._coord=t},getShape:function(t){i.isArray(t)&&(t=t[0]);var e=this[t]||this[this.defaultShapeType];return e._coord=this._coord,e},getShapePoints:function(t,e){var n=this.getShape(t);return(n.getPoints||n.getShapePoints||this.getDefaultPoints)(e)},getDefaultPoints:function(){return[]},getMarkerCfg:function(t,e){var n=this.getShape(t);if(!n.getMarkerCfg){var i=this.defaultShapeType;n=this.getShape(i)}return n.getMarkerCfg(e)},getSelectedCfg:function(){return{}},drawShape:function(t,e,n){var i=this.getShape(t).draw(e,n);return i&&(i.setSilent("origin",e.origin),i._id=e.yIndex?e._id+e.yIndex:e._id,i.name=this.name),i}};o.registerFactory=function(t,e){var n=i.upperFirst(t),r=i.assign({},u,e);return o[n]=r,r.name=t,r},o.registerShape=function(t,e,n){var r=i.upperFirst(t),a=o[r],u=i.assign({},s,n);return a[e]=u,u},o.getShapeFactory=function(t){return t=t||"point",this[i.upperFirst(t)]},t.exports=o},function(t,e){function n(t,e){for(var n in e)e.hasOwnProperty(n)&&"constructor"!==n&&void 0!==e[n]&&(t[n]=e[n])}t.exports=function(t,e,i,r){return e&&n(t,e),i&&n(t,i),r&&n(t,r),t}},function(t,e,n){var i=n(15);t.exports=function(t){return i(t,"Number")}},function(t,e,n){"use strict";var i=n(82);n.d(e,"f",function(){return i.h}),n.d(e,"e",function(){return i.g}),n.d(e,"d",function(){return i.f});var r=n(421);n.d(e,"c",function(){return r.b}),n.d(e,"b",function(){return r.a});var a=n(420);n.d(e,"a",function(){return a.a})},function(t,e,n){var i=n(15);t.exports=function(t){return i(t,"Function")}},function(t,e,n){var i=n(15);t.exports=function(t){return i(t,"String")}},function(t,e){var n={}.toString;t.exports=function(t,e){return n.call(t)==="[object "+e+"]"}},function(t,e,n){"use strict";n.d(e,"c",function(){return L}),e.b=D;var i=n(485),r=n(486),a=n(474),o=n(468),s=n(206),u=n(473),l=n(478),c=n(481),h=n(488),f=n(465),p=n(480),g=n(479),d=n(487),v=n(472),y=n(471),m=n(464),x=n(208),b=n(482),_=n(466),w=n(489),M=n(475),S=n(483),C=n(477),k=n(463),A=n(476),P=n(484),I=n(467),T=n(469),O=n(91),E=n(470),L=[null];function D(t,e){this._groups=t,this._parents=e}function F(){return new D([[document.documentElement]],L)}D.prototype=F.prototype={constructor:D,select:i.a,selectAll:r.a,filter:a.a,data:o.a,enter:s.a,exit:u.a,merge:l.a,order:c.a,sort:h.a,call:f.a,nodes:p.a,node:g.a,size:d.a,empty:v.a,each:y.a,attr:m.a,style:x.b,property:b.a,classed:_.a,text:w.a,html:M.a,raise:S.a,lower:C.a,append:k.a,insert:A.a,remove:P.a,clone:I.a,datum:T.a,on:O.c,dispatch:E.a},e.a=F},function(t,e,n){"use strict";n.d(e,"d",function(){return u}),n.d(e,"a",function(){return l}),n.d(e,"b",function(){return f}),n.d(e,"c",function(){return p}),e.g=function(t,e){var n=g(t,e);if(n.state>s)throw new Error("too late; already scheduled");return n},e.e=function(t,e){var n=g(t,e);if(n.state>l)throw new Error("too late; already started");return n},e.f=g;var i=n(423),r=n(95),a=n.i(i.a)("start","end","interrupt"),o=[],s=0,u=1,l=2,c=3,h=4,f=5,p=6;function g(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}e.h=function(t,e,i,g,d,v){var y=t.__transition;if(y){if(i in y)return}else t.__transition={};!function(t,e,i){var a,o=t.__transition;function s(f){var v,y,m,x;if(i.state!==u)return d();for(v in o)if((x=o[v]).name===i.name){if(x.state===c)return n.i(r.timeout)(s);x.state===h?(x.state=p,x.timer.stop(),x.on.call("interrupt",t,t.__data__,x.index,x.group),delete o[v]):+v<e&&(x.state=p,x.timer.stop(),delete o[v])}if(n.i(r.timeout)(function(){i.state===c&&(i.state=h,i.timer.restart(g,i.delay,i.time),g(f))}),i.state=l,i.on.call("start",t,t.__data__,i.index,i.group),i.state===l){for(i.state=c,a=new Array(m=i.tween.length),v=0,y=-1;v<m;++v)(x=i.tween[v].value.call(t,t.__data__,i.index,i.group))&&(a[++y]=x);a.length=y+1}}function g(e){for(var n=e<i.duration?i.ease.call(null,e/i.duration):(i.timer.restart(d),i.state=f,1),r=-1,o=a.length;++r<o;)a[r].call(null,n);i.state===f&&(i.on.call("end",t,t.__data__,i.index,i.group),d())}function d(){for(var n in i.state=p,i.timer.stop(),delete o[e],o)return;delete t.__transition}o[e]=i,i.timer=n.i(r.timer)(function(t){i.state=u,i.timer.restart(s,i.delay,i.time),i.delay<=t&&s(t-i.delay)},0,i.time)}(t,i,{name:e,index:g,group:d,on:a,tween:o,time:v.time,delay:v.delay,duration:v.duration,ease:v.ease,timer:null,state:s})}},function(t,e,n){var i=n(3),r=n(101),a=["min","max","median","start","end"],o=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{xScales:null,yScales:null,el:null})},n.render=function(){},n.clear=function(){var t=this.get("el");t&&t.remove()},n.changeVisible=function(t){this.set("visible",t);var e=this.get("el");e&&(e.set?e.set("visible",t):e.style.display=t?"":"none")},n.parsePoint=function(t,e){var n,a,o=this.get("xScales"),s=this.get("yScales");if(i.isFunction(e)&&(e=e(o,s)),i.isArray(e)&&i.isString(e[0])&&-1!==e[0].indexOf("%"))return this._parsePercentPoint(t,e);if(i.isArray(e))n=this._getNormalizedValue(e[0],r.getFirstScale(o)),a=this._getNormalizedValue(e[1],r.getFirstScale(s));else for(var u in e){var l=e[u];o[u]&&(n=this._getNormalizedValue(l,o[u])),s[u]&&(a=this._getNormalizedValue(l,s[u],"y"))}return i.isNil(n)||i.isNil(a)?void 0:t.convert({x:n,y:a})},n._getNormalizedValue=function(t,e){var n,r;-1!==i.indexOf(a,t)?"start"===t?n=0:"end"===t?n=1:"median"===t?(r=e.isCategory?(e.values.length-1)/2:(e.min+e.max)/2,n=e.scale(r)):(r=e.isCategory?"min"===t?0:e.values.length-1:e[t],n=e.scale(r)):n=e.scale(t);return n},n._parsePercentPoint=function(t,e){var n=parseFloat(e[0])/100,i=parseFloat(e[1])/100,r=t.start,a=t.end,o=Math.min(r.x,a.x),s=Math.min(r.y,a.y);return{x:t.width*n+o,y:t.height*i+s}},e}(n(32));t.exports=o},function(t,e){t.exports=function(t){return null!==t&&"function"!=typeof t&&isFinite(t.length)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(459);n.d(e,"create",function(){return i.a});var r=n(55);n.d(e,"creator",function(){return r.a});var a=n(460);n.d(e,"local",function(){return a.a});var o=n(204);n.d(e,"matcher",function(){return o.a});var s=n(461);n.d(e,"mouse",function(){return s.a});var u=n(89);n.d(e,"namespace",function(){return u.a});var l=n(90);n.d(e,"namespaces",function(){return l.a});var c=n(56);n.d(e,"clientPoint",function(){return c.a});var h=n(205);n.d(e,"select",function(){return h.a});var f=n(462);n.d(e,"selectAll",function(){return f.a});var p=n(16);n.d(e,"selection",function(){return p.a});var g=n(92);n.d(e,"selector",function(){return g.a});var d=n(209);n.d(e,"selectorAll",function(){return d.a});var v=n(208);n.d(e,"style",function(){return v.a});var y=n(490);n.d(e,"touch",function(){return y.a});var m=n(491);n.d(e,"touches",function(){return m.a});var x=n(94);n.d(e,"window",function(){return x.a});var b=n(91);n.d(e,"event",function(){return b.a}),n.d(e,"customEvent",function(){return b.b})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=n(40),a=s(r),o=s(n(25));function s(t){return t&&t.__esModule?t:{default:t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var h=function(t){function e(t,n){u(this,e);var i=l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return i.getParentInfo=function(){return{id:i.id,name:i.name}},i.name=n,i}return c(e,r.Component),i(e,[{key:"getChildContext",value:function(){return{addElement:this.context.addElement,updateElement:this.context.updateElement,deleteElement:this.context.deleteElement,createId:this.context.createId,getParentInfo:this.getParentInfo,getViewId:this.context.getViewId}}},{key:"componentWillMount",value:function(){var t=this.context;this.id=t.createId(),t.addElement(this.name,this.id,this.props,t.getParentInfo(),t.getViewId())}},{key:"componentWillReceiveProps",value:function(t){this.context.updateElement(this.name,this.id,t,this.context.getParentInfo(),this.context.getViewId())}},{key:"componentWillUnmount",value:function(){this.context.deleteElement(this.name,this.id)}},{key:"render",value:function(){var t=this.props.children;return t?t.length&&(t=a.default.createElement("div",null,t)):t=null,t}}]),e}();h.contextTypes={addElement:o.default.func,updateElement:o.default.func,deleteElement:o.default.func,createId:o.default.func,getParentInfo:o.default.func,getViewId:o.default.func},h.childContextTypes={addElement:o.default.func,updateElement:o.default.func,deleteElement:o.default.func,createId:o.default.func,getParentInfo:o.default.func,getViewId:o.default.func},h.generateBaseTypedComponent=function(t){var e=function(e){function n(e){return u(this,n),l(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e,t))}return c(n,h),i(n,[{key:"getChildContext",value:function(){return{addElement:this.context.addElement,updateElement:this.context.updateElement,deleteElement:this.context.deleteElement,createId:this.context.createId,getParentInfo:this.getParentInfo,getViewId:this.context.getViewId}}}]),n}();return e.contextTypes={addElement:o.default.func,updateElement:o.default.func,deleteElement:o.default.func,createId:o.default.func,getParentInfo:o.default.func,getViewId:o.default.func},e.childContextTypes={addElement:o.default.func,updateElement:o.default.func,deleteElement:o.default.func,createId:o.default.func,getParentInfo:o.default.func,getViewId:o.default.func},e},e.default=h},function(t,e,n){var i=n(0),r=n(303);function a(t,e){var n=t.getCenter();return Math.sqrt(Math.pow(e.x-n.x,2)+Math.pow(e.y-n.y,2))}function o(t,e){for(var n=t.length,i=[t[0]],r=1;r<n;r+=2){var a=e.convertPoint({x:t[r],y:t[r+1]});i.push(a.x,a.y)}return i}var s={getLinePath:function(t,e){return function(t,e){if(!t.length)return[];for(var n=[],i=0,r=t.length;i<r;i++){var a=t[i];0===i?n.push(["M",a.x,a.y]):n.push(["L",a.x,a.y])}return e&&n.push(["Z"]),n}(t,e)},getSplinePath:function(t,e,n){var a=[],o=t[0],u=null;if(t.length<=2)return s.getLinePath(t,e);i.each(t,function(t){u&&u.x===t.x&&u.y===t.y||(a.push(t.x),a.push(t.y),u=t)}),n=n||[[0,0],[1,1]];var l=r.catmullRom2bezier(a,e,n);return l.unshift(["M",o.x,o.y]),l},getPointRadius:function(t,e){return a(t,e)},getPointAngle:function(t,e){var n=t.getCenter();return Math.atan2(e.y-n.y,e.x-n.x)},convertNormalPath:function(t,e){var n=[];return i.each(e,function(e){switch(e[0].toLowerCase()){case"m":case"l":case"c":n.push(o(e,t));break;case"z":default:n.push(e)}}),n},convertPolarPath:function(t,e){var n,r,s,u=[];return i.each(e,function(i,l){switch(i[0].toLowerCase()){case"m":case"c":case"q":u.push(o(i,t));break;case"l":n=e[l-1],r=i,s=t.isTransposed,(s?n[n.length-2]===r[1]:n[n.length-1]===r[2])?u=u.concat(function(t,e,n){var i=n.isTransposed,r=n.startAngle,o=n.endAngle,s={x:t[1],y:t[2]},u={x:e[1],y:e[2]},l=[],c=i?"y":"x",h=Math.abs(u[c]-s[c])*(o-r),f=u[c]>=s[c]?1:0,p=h>Math.PI?1:0,g=n.convertPoint(u),d=a(n,g);if(d>=.5)if(h===2*Math.PI){var v={x:(u.x+s.x)/2,y:(u.y+s.y)/2},y=n.convertPoint(v);l.push(["A",d,d,0,p,f,y.x,y.y]),l.push(["A",d,d,0,p,f,g.x,g.y])}else l.push(["A",d,d,0,p,f,g.x,g.y]);return l}(n,r,t)):u.push(o(i,t));break;case"z":default:u.push(i)}}),function(t){i.each(t,function(e,n){if("a"===e[0].toLowerCase()){var i=t[n-1],r=t[n+1];r&&"a"===r[0].toLowerCase()?i&&"l"===i[0].toLowerCase()&&(i[0]="M"):i&&"a"===i[0].toLowerCase()&&r&&"l"===r[0].toLowerCase()&&(r[0]="M")}})}(u),u}};t.exports=s},function(t,e,n){var i=n(10),r=n(2),a=n(36),o=n(7),s=function(){var t=e.prototype;function e(t){this._initDefaultCfg(),i(this,t),this.init()}return t._initDefaultCfg=function(){this.type="base",this.formatter=null,this.range=[0,1],this.ticks=null,this.values=[]},t.init=function(){},t.getTicks=function(){var t=this,e=t.ticks,n=[];return r(e,function(e){var i;i=a(e)?e:{text:t.getText(e),tickValue:e,value:t.scale(e)},n.push(i)}),n},t.getText=function(t,e){var n=this.formatter;return t=n?n(t,e):t,!o(t)&&t.toString||(t=""),t.toString()},t.rangeMin=function(){return this.range[0]},t.rangeMax=function(){var t=this.range;return t[t.length-1]},t.invert=function(t){return t},t.translate=function(t){return t},t.scale=function(t){return t},t.clone=function(){var t=this,e=t.constructor,n={};return r(t,function(e,i){n[i]=t[i]}),new e(n)},t.change=function(t){return this.ticks=null,i(this,t),this.init(),this},e}();t.exports=s},function(t,e,n){"use strict";e.b=w,e.a=M,e.c=function(){return++_};var i=n(20),r=n(499),a=n(500),o=n(501),s=n(502),u=n(503),l=n(504),c=n(505),h=n(506),f=n(507),p=n(508),g=n(509),d=n(510),v=n(511),y=n(512),m=n(513),x=n(514),b=n(57),_=0;function w(t,e,n,i){this._groups=t,this._parents=e,this._name=n,this._id=i}function M(t){return n.i(i.selection)().transition(t)}var S=i.selection.prototype;w.prototype=M.prototype={constructor:w,select:p.a,selectAll:g.a,filter:l.a,merge:c.a,selection:d.a,transition:x.a,call:S.call,nodes:S.nodes,node:S.node,size:S.size,empty:S.empty,each:S.each,on:h.a,attr:r.a,attrTween:a.a,style:v.a,styleTween:y.a,text:m.a,remove:f.a,tween:b.a,delay:o.a,duration:s.a,ease:u.a}},function(t,e,n){var i="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;t.exports=n(518)(function(t){return"object"==typeof t&&null!==t&&t.$$typeof===i},!0)},function(t,e,n){var i=n(33);t.exports=i},function(t,e,n){t.exports={Axis:n(229),Component:n(60),Guide:n(237),Label:n(241),Legend:n(247),Tooltip:n(252)}},function(t,e,n){"use strict";e.b=function(t,e){var a=e-t;return a?r(t,a>180||a<-180?a-360*Math.round(a/360):a):n.i(i.a)(isNaN(t)?e:t)},e.c=function(t){return 1==(t=+t)?a:function(e,r){return r-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}}(e,r,t):n.i(i.a)(isNaN(e)?r:e)}},e.a=a;var i=n(199);function r(t,e){return function(n){return t+n*e}}function a(t,e){var a=e-t;return a?r(t,a):n.i(i.a)(isNaN(t)?e:t)}},function(t,e,n){var i=n(10),r=function(){var t=e.prototype;function e(t){this._initDefaultCfg(),i(this,t)}return t._initDefaultCfg=function(){this.adjustNames=["x","y"]},t.processAdjust=function(){},e}();t.exports=r},function(t,e,n){var i=n(14),r=n(4),a=n(10),o=n(2);function s(t,e){return i(e)?e:t.invert(t.scale(e))}var u=function(){function t(t){this.type="base",this.name=null,this.method=null,this.values=[],this.scales=[],this.linear=null,a(this,t)}var e=t.prototype;return e._getAttrValue=function(t,e){var n=this.values;if(t.isCategory&&!this.linear)return n[t.translate(e)%n.length];var i=t.scale(e);return this.getLinearValue(i)},e.getLinearValue=function(t){var e=this.values,n=e.length-1,i=Math.floor(n*t),r=n*t-i,a=e[i];return a+((i===n?a:e[i+1])-a)*r},e.callback=function(t){var e=this.scales[0];return"identity"===e.type?e.value:this._getAttrValue(e,t)},e.getNames=function(){for(var t=this.scales,e=this.names,n=Math.min(t.length,e.length),i=[],r=0;r<n;r++)i.push(e[r]);return i},e.getFields=function(){var t=this.scales,e=[];return o(t,function(t){e.push(t.field)}),e},e.getScale=function(t){return this.scales[this.names.indexOf(t)]},e.mapping=function(){for(var t=this.scales,e=this.callback,n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];var a=i;if(e){for(var o=0,s=i.length;o<s;o++)i[o]=this._toOriginParam(i[o],t[o]);a=e.apply(this,i)}return a=[].concat(a)},e._toOriginParam=function(t,e){var n=t;if(!e.isLinear)if(r(t)){n=[];for(var i=0,a=t.length;i<a;i++)n.push(s(e,t[i]))}else n=s(e,t);return n},t}();t.exports=u},function(t,e,n){var i=n(32),r=n(3),a=n(100),o=n(102),s=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return r.mix({},e,{_id:null,zIndex:4,ticks:null,line:null,tickLine:null,subTickCount:0,subTickLine:null,grid:null,label:{textStyle:{},autoRotate:!0,formatter:null},labelItems:[],title:{autoRotate:!0,textStyle:{}},autoPaint:!0})},n.beforeRender=function(){var t=this.get("title"),e=this.get("label"),n=this.get("grid"),i=this.get("viewTheme")||{};t&&this.set("title",r.deepMix({autoRotate:!0,textStyle:{fontSize:12,fill:"#ccc",textBaseline:"middle",fontFamily:i.fontFamily,textAlign:"center"},offset:48},t)),e&&this.set("label",r.deepMix({autoRotate:!0,textStyle:{fontSize:12,fill:"#ccc",textBaseline:"middle",fontFamily:i.fontFamily},offset:10},e)),n&&this.set("grid",r.deepMix({lineStyle:{lineWidth:1,stroke:"#C0D0E0"}},n))},n.render=function(){this.beforeRender(),this.get("label")&&this.renderLabels(),this.get("autoPaint")&&this.paint(),r.isNil(this.get("title"))||this.renderTitle(),this.get("group").sort()},n.renderLabels=function(){var t=this.get("group"),e=this.get("label"),n=new o;this.set("labelRenderer",n),n.set("labelCfg",e);r.each(["formatter","htmlTemplate","labelLine","textStyle","useHtml"],function(t){e[t]&&n.set(t,e[t])}),n.set("coord",this.get("coord")),n.set("group",t.addGroup()),n.set("canvas",this.get("canvas"))},n._parseTicks=function(t){for(var e=(t=t||[]).length,n=0;n<e;n++){var i=t[n];r.isObject(i)||(t[n]=this.parseTick(i,n,e))}return this.set("ticks",t),t},n._parseCatTicks=function(t){for(var e=(t=t||[]).length,n=0;n<e;n++){var i=t[n];r.isObject(i)||(t[n]=this.parseTick(i,n,e))}return this.set("ticks",t),t},n._addTickItem=function(t,e,n,i){void 0===i&&(i="");var r=this.get("tickItems"),a=this.get("subTickItems"),o=this.getTickEnd(e,n,t),s={x1:e.x,y1:e.y,x2:o.x,y2:o.y};r||(r=[]),a||(a=[]),"sub"===i?a.push(s):r.push(s),this.set("tickItems",r),this.set("subTickItems",a)},n._renderLine=function(){var t,e=this.get("line");if(e){t=this.getLinePath(),e=r.mix({path:t},e);var n=this.get("group").addShape("path",{attrs:e});n.name="axis-line",this.get("appendInfo")&&n.setSilent("appendInfo",this.get("appendInfo")),this.set("lineShape",n)}},n._processCatTicks=function(){var t=this.get("label"),e=this.get("tickLine"),n=this.get("ticks");n=this._parseTicks(n);for(var i=this._getNormalizedTicks(n),r=0;r<i.length;r+=3){var a=this.getTickPoint(i[r]),o=this.getTickPoint(i[r+1]),s=this.getTickPoint(i[r+2]),u=Math.floor(r/3),l=n[u];e&&(0===u&&this._addTickItem(u,o,e.length),this._addTickItem(u,s,e.length)),t&&this.addLabel(l,a,u)}},n._getNormalizedTicks=function(t){var e=0;t.length>1&&(e=(t[1].value-t[0].value)/2);for(var n=[],i=0;i<t.length;i++){var a=t[i],o=a.value,s=a.value-e,u=a.value+e;n.push(o,s,u)}var l=r.arrayUtil.getRange(n);return n.map(function(t){return(t-l.min)/(l.max-l.min)})},n.addLabel=function(t,e,n){var i=this.get("labelItems"),a=this.get("labelRenderer"),o=r.mix({},this.get("label"));if(a){var s=this.get("_labelOffset");r.isNil(this.get("label").offset)||(s=this.get("label").offset);var u=this.getSideVector(s,e,n);e={x:e.x+u[0],y:e.y+u[1]},o.text=t.text,o.x=e.x,o.y=e.y,o.point=e,o.textAlign=this.getTextAnchor(u),e.rotate&&(o.rotate=e.rotate),i.push(o)}},n._processTicks=function(){var t=this,e=t.get("label"),n=t.get("subTickCount"),i=t.get("tickLine"),a=t.get("ticks");if(a=t._parseTicks(a),r.each(a,function(n,r){var a=t.getTickPoint(n.value,r);i&&t._addTickItem(r,a,i.length),e&&t.addLabel(n,a,r)}),n){var o=t.get("subTickLine");r.each(a,function(e,r){if(r>0){var s=e.value-a[r-1].value;s/=t.get("subTickCount")+1;for(var u=1;u<=n;u++){var l={text:"",value:r?a[r-1].value+u*s:u*s},c=t.getTickPoint(l.value),h=void 0;h=o&&o.length?o.length:parseInt(.6*i.length,10),t._addTickItem(u-1,c,h,"sub")}}})}},n._addTickLine=function(t,e){var n=r.mix({},e),i=[];r.each(t,function(t){i.push(["M",t.x1,t.y1]),i.push(["L",t.x2,t.y2])}),delete n.length,n.path=i;var a=this.get("group").addShape("path",{attrs:n});a.name="axis-ticks",a._id=this.get("_id")+"-ticks",a.set("coord",this.get("coord")),this.get("appendInfo")&&a.setSilent("appendInfo",this.get("appendInfo"))},n._renderTicks=function(){var t=this.get("tickItems"),e=this.get("subTickItems");if(!r.isEmpty(t)){var n=this.get("tickLine");this._addTickLine(t,n)}if(!r.isEmpty(e)){var i=this.get("subTickLine")||this.get("tickLine");this._addTickLine(e,i)}},n._renderGrid=function(){var t=this.get("grid");if(t){t.coord=this.get("coord"),t.appendInfo=this.get("appendInfo");var e=this.get("group");this.set("gridGroup",e.addGroup(a,t))}},n._renderLabels=function(){var t=this.get("labelRenderer"),e=this.get("labelItems");t&&(t.set("items",e),t._dryDraw())},n.paint=function(){var t=this.get("tickLine"),e=!0;t&&t.hasOwnProperty("alignWithLabel")&&(e=t.alignWithLabel),this._renderLine();var n=this.get("type");("cat"===n||"timeCat"===n)&&!1===e?this._processCatTicks():this._processTicks(),this._renderTicks(),this._renderGrid(),this._renderLabels();var i=this.get("label");i&&i.autoRotate&&this.autoRotateLabels()},n.parseTick=function(t,e,n){return{text:t,value:e/(n-1)}},n.getTextAnchor=function(t){return Math.abs(t[1]/t[0])>=1?"center":t[0]>0?"start":"end"},n.getMaxLabelWidth=function(t){var e=t.get("group").get("children"),n=0;return r.each(e,function(t){var e=t.getBBox().width;n<e&&(n=e)}),n},n.destroy=function(){if(!this.destroyed){t.prototype.destroy.call(this);var e=this.get("gridGroup");e&&e.remove();var n=this.get("labelRenderer");n&&n.destroy(),this.get("group").destroy(),this.destroyed=!0}},n.clear=function(){var t=this.get("group");if(!t.get("destroyed")&&t.get("children").length){var e=this.get("gridGroup");e&&e.clear();var n=this.get("labelRenderer");n&&n.clear(),this.get("group").clear()}},n.autoRotateLabels=function(){},n.renderTitle=function(){},n.getLinePath=function(){},n.getTickPoint=function(){},n.getTickEnd=function(){},n.getSideVector=function(){},e}(i);t.exports=s},function(t,e,n){var i=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){return{_id:null,canvas:null,container:null,group:null,capture:!1,coord:null,offset:[0,0],plotRange:null,position:[0,0],visible:!0,zIndex:1}},n._init=function(){},n.clear=function(){},n.destroy=function(){},n.beforeRender=function(){},n.render=function(){},n.afterRender=function(){},n.beforeDraw=function(){},n.draw=function(){},n.afterDraw=function(){},n.show=function(){},n.hide=function(){},n.setOffset=function(){},n.setPosition=function(){},n.setVisible=function(){},n.setZIndex=function(){},e}(n(60));t.exports=i},function(t,e,n){t.exports={Canvas:n(308),Group:n(123),Shape:n(6),Arc:n(125),Circle:n(126),Dom:n(127),Ellipse:n(128),Fan:n(129),Image:n(130),Line:n(131),Marker:n(67),Path:n(134),Polygon:n(135),Polyline:n(136),Rect:n(137),Text:n(138),PathSegment:n(46),PathUtil:n(70),Event:n(124),version:"3.3.4"}},function(t,e,n){var i=n(1),r=/[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/gi,a=/[^\s\,]+/gi,o={};t.exports={parseRadius:function(t){var e=0,n=0,r=0,a=0;return i.isArray(t)?1===t.length?e=n=r=a=t[0]:2===t.length?(e=r=t[0],n=a=t[1]):3===t.length?(e=t[0],n=a=t[1],r=t[2]):(e=t[0],n=t[1],r=t[2],a=t[3]):e=n=r=a=t,{r1:e,r2:n,r3:r,r4:a}},parsePath:function(t){return t=t||[],i.isArray(t)?t:i.isString(t)?(t=t.match(r),i.each(t,function(e,n){if((e=e.match(a))[0].length>1){var r=e[0].charAt(0);e.splice(1,0,e[0].substr(1)),e[0]=r}i.each(e,function(t,n){isNaN(t)||(e[n]=+t)}),t[n]=e}),t):void 0},numberToColor:function(t){var e=o[t];if(!e){for(var n=t.toString(16),i=n.length;i<6;i++)n="0"+n;e="#"+n,o[t]=e}return e}}},function(t,e,n){var i=n(7);t.exports=function(t){return i(t)?"":t.toString()}},function(t,e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t){var e=void 0===t?"undefined":n(t);return null!==t&&"object"===e||"function"===e}},function(t,e,n){var i=n(79),r=n(15);t.exports=function(t){if(!i(t)||!r(t,"Object"))return!1;if(null===Object.getPrototypeOf(t))return!0;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r=n(63);function a(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function o(t){return r.Util.isArray(t)?t.length:r.Util.isObject(t)?Object.keys(t).length:0}e.default=r.Util.mix({},r.Util,{shallowEqual:function(t,e){if(a(t,e))return!0;if("object"!==(void 0===t?"undefined":i(t))||null===t||"object"!==(void 0===e?"undefined":i(e))||null===e)return!1;if(r.Util.isArray(t)!==r.Util.isArray(e))return!1;if(o(t)!==o(e))return!1;var n=!0;return r.Util.each(t,function(t,i){return!!a(t,e[i])||(n=!1)}),n},without:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n={};return r.Util.each(t,function(t,i){-1===r.Util.indexOf(e,i)&&(n[i]=t)}),n},length:o})},function(t,e,n){"use strict";e.b=function(t,e){var a=e-t;return a?r(t,a>180||a<-180?a-360*Math.round(a/360):a):n.i(i.a)(isNaN(t)?e:t)},e.c=function(t){return 1==(t=+t)?a:function(e,r){return r-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}}(e,r,t):n.i(i.a)(isNaN(e)?r:e)}},e.a=a;var i=n(192);function r(t,e){return function(n){return t+n*e}}function a(t,e){var a=e-t;return a?r(t,a):n.i(i.a)(isNaN(t)?e:t)}},function(e,n){e.exports=t},function(t,e,n){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function r(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}var a=n(51),o=n(10),s=a.mat3,u=a.vec3,l=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n=this.getDefaultCfg();o(this,n,e),this.init()}return r(t,[{key:"getDefaultCfg",value:function(){return{isTransposed:!1,matrix:[1,0,0,0,1,0,0,0,1]}}}]),r(t,[{key:"init",value:function(){var t=this.start,e=this.end,n={x:(t.x+e.x)/2,y:(t.y+e.y)/2};this.center=n,this.width=Math.abs(e.x-t.x),this.height=Math.abs(e.y-t.y)}},{key:"_swapDim",value:function(t){var e=this[t];if(e){var n=e.start;e.start=e.end,e.end=n}}},{key:"getCenter",value:function(){return this.center}},{key:"getWidth",value:function(){return this.width}},{key:"getHeight",value:function(){return this.height}},{key:"convertDim",value:function(t,e){var n=this[e],i=n.start;return i+t*(n.end-i)}},{key:"invertDim",value:function(t,e){var n=this[e],i=n.start;return(t-i)/(n.end-i)}},{key:"convertPoint",value:function(t){return t}},{key:"invertPoint",value:function(t){return t}},{key:"applyMatrix",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=this.matrix,r=[t,e,n];return u.transformMat3(r,r,i),r}},{key:"invertMatrix",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=this.matrix,r=s.invert([],i),a=[t,e,n];return u.transformMat3(a,a,r),a}},{key:"convert",value:function(t){var e=this.convertPoint(t),n=e.x,i=e.y,r=this.applyMatrix(n,i,1);return{x:r[0],y:r[1]}}},{key:"invert",value:function(t){var e=this.invertMatrix(t.x,t.y,1);return this.invertPoint({x:e[0],y:e[1]})}},{key:"rotate",value:function(t){var e=this.matrix,n=this.center;return s.translate(e,e,[-n.x,-n.y]),s.rotate(e,e,t),s.translate(e,e,[n.x,n.y]),this}},{key:"reflect",value:function(t){switch(t){case"x":this._swapDim("x");break;case"y":this._swapDim("y");break;default:this._swapDim("y")}return this}},{key:"scale",value:function(t,e){var n=this.matrix,i=this.center;return s.translate(n,n,[-i.x,-i.y]),s.scale(n,n,[t,e]),s.translate(n,n,[i.x,i.y]),this}},{key:"translate",value:function(t,e){var n=this.matrix;return s.translate(n,n,[t,e]),this}},{key:"transpose",value:function(){return this.isTransposed=!this.isTransposed,this}}]),t}();t.exports=l},function(t,e,n){var i=n(5),r=n(0),a=r.assign,o=r.isNil,s=r.isArray,u=r.cloneDeep,l=r.wrapBehavior,c=r.getWrapBehavior,h=function(){var t=e.prototype;function e(t){var e=this.getDefaultCfg();a(this,e,t),this.init()}return t.getDefaultCfg=function(){return{chart:null,group:null,showTitle:!0,autoSetAxis:!0,padding:10,eachView:null,fields:[],colTitle:{offsetY:-15,style:{fontSize:14,textAlign:"center",fill:"#666",fontFamily:i.fontFamily}},rowTitle:{offsetX:15,style:{fontSize:14,textAlign:"center",rotate:90,fill:"#666",fontFamily:i.fontFamily}}}},t.init=function(){if(!this.chart)throw new Error("Facets Error: please specify the chart!");this._bindEvent(),this.initContainer(),this.chart.get("data")&&this.initViews()},t.initContainer=function(){var t=this.chart.get("frontPlot").addGroup();this.group=t},t.initViews=function(){for(var t=this.chart,e=t.get("data"),n=this.eachView,i=this.generateFacets(e),r=0;r<i.length;r++){var a=i[r],o=a.region,s=t.view({start:o.start,end:o.end,padding:this.padding});s.source(a.data),this.beforeProcessView(s,a),n&&n(s,a),this.afterProcessView(s,a),a.view=s}this.facets=i},t.beforeProcessView=function(){},t.afterProcessView=function(t,e){this.autoSetAxis&&this.processAxis(t,e)},t.processAxis=function(t,e){var n=t.get("options"),i=t.get("geoms");if((!n.coord.type||"rect"===n.coord.type)&&i.length){var r=i[0].get("attrOptions").position.field,a=s(r)?r:r.split("*").map(function(t){return t.trim()}),u=a[0],l=a[1];o(n.axes)&&(n.axes={});var c=n.axes;!1!==c&&(u&&!1!==c[u]&&(c[u]=c[u]||{},this.setXAxis(u,c,e)),l&&!1!==c[l]&&(c[l]=c[l]||{},this.setYAxis(l,c,e)))}},t.setXAxis=function(){},t.setYAxis=function(){},t.renderTitle=function(t,e){this.drawColTitle(t,e)},t.getScaleText=function(t,e,n){var i;if(t){var r=n.get("scales")[t];r||(r=n.createScale(t)),i=r.getText(e)}else i=e;return i},t.drawColTitle=function(t,e){var n=this.getScaleText(e.colField,e.colValue,t),i=a({position:["50%","0%"],content:n},this.colTitle);t.guide().text(i)},t.drawRowTitle=function(t,e){var n=this.getScaleText(e.rowField,e.rowValue,t),i=a({position:["100%","50%"],content:n},u(this.rowTitle));t.guide().text(i)},t.getFilter=function(t){return function(e){var n=!0;return t.forEach(function(t){var i=t.field,r=t.value,a=!0;!o(r)&&i&&(a=e[i]===r),n=n&&a}),n}},t.getFieldValues=function(t,e){for(var n=[],i={},r=0;r<e.length;r++){var a=e[r][t];o(a)||i[a]||(n.push(a),i[a]=!0)}return n},t.getRegion=function(t,e,n,i){var r=1/e,a=1/t,o={x:r*n,y:a*i};return{start:o,end:{x:o.x+r,y:o.y+a}}},t.generateFacets=function(){return[]},t._bindEvent=function(){var t=this.chart;t.on("afterchangedata",l(this,"onDataChange")),t.on("beforeclear",l(this,"onClear")),t.on("beforedestroy",l(this,"destroy")),t.on("beforepaint",l(this,"onPaint")),t.on("setdata",l(this,"onDataChange"))},t._clearEvent=function(){var t=this.chart;t&&(t.off("afterchangedata",c(this,"onDataChange")),t.off("beforeclear",c(this,"onClear")),t.off("beforedestroy",c(this,"destroy")),t.off("beforepaint",c(this,"onPaint")),t.off("setdata",c(this,"onDataChange")))},t._clearFacets=function(){var t=this.facets,e=this.chart;if(t)for(var n=0;n<t.length;n++){var i=t[n];e.removeView(i.view)}this.facets=null},t.onClear=function(){this.onRemove()},t.onPaint=function(){if(this.showTitle)for(var t=this.facets,e=0;e<t.length;e++){var n=t[e],i=n.view;this.renderTitle(i,n)}},t.onDataChange=function(){this._clearFacets(),this.initViews()},t.onRemove=function(){this._clearFacets(),this._clearEvent(),this.group&&this.group.remove(),this.chart=null,this.facets=null,this.group=null},t.destroy=function(){this.onRemove(),this.destroyed=!0},e}();t.exports=h},function(t,e,n){var i=n(1);function r(t,e,n,i){return{x:Math.cos(i)*n+t,y:Math.sin(i)*n+e}}function a(t,e,n,i){var r,a;return i?t<e?(r=e-t,a=2*Math.PI-n+t):t>n&&(r=2*Math.PI-t+e,a=t-n):(r=t-e,a=n-t),r>a?n:e}function o(t,e,n,r){var o=0;return n-e>=2*Math.PI&&(o=2*Math.PI),e=i.mod(e,2*Math.PI),n=i.mod(n,2*Math.PI)+o,t=i.mod(t,2*Math.PI),r?e>=n?t>n&&t<e?t:a(t,n,e,!0):t<e||t>n?t:a(t,e,n):e<=n?e<t&&t<n?t:a(t,e,n,!0):t>e||t<n?t:a(t,n,e)}function s(t,e,n,r,a,s,u,l,c){var h=[u,l],f=[t,e],p=i.vec2.subtract([],h,f),g=i.vec2.angleTo([1,0],p);g=o(g,r,a,s);var d=[n*Math.cos(g)+t,n*Math.sin(g)+e];return c&&(c.x=d[0],c.y=d[1]),i.vec2.distance(d,h)}t.exports={nearAngle:o,projectPoint:function(t,e,n,i,r,a,o,u){var l={};return s(t,e,n,i,r,a,o,u,l),l},pointDistance:s,box:function(t,e,n,a,s,u){var l=Math.PI/2,c=Math.PI,h=3*Math.PI/2,f=[],p=o(0,a,s,u);0===p&&f.push(r(t,e,n,0)),(p=o(l,a,s,u))===l&&f.push(r(t,e,n,l)),(p=o(c,a,s,u))===c&&f.push(r(t,e,n,c)),(p=o(h,a,s,u))===h&&f.push(r(t,e,n,h)),f.push(r(t,e,n,a)),f.push(r(t,e,n,s));var g=1/0,d=-1/0,v=1/0,y=-1/0;return i.each(f,function(t){g>t.x&&(g=t.x),d<t.x&&(d=t.x),v>t.y&&(v=t.y),y<t.y&&(y=t.y)}),{minX:g,minY:v,maxX:d,maxY:y}}}},function(t,e,n){var i=n(1).vec2;t.exports={at:function(t,e,n){return(e-t)*n+t},pointDistance:function(t,e,n,r,a,o){var s=[n-t,r-e];if(i.exactEquals(s,[0,0]))return NaN;var u=[-s[1],s[0]];i.normalize(u,u);var l=[a-t,o-e];return Math.abs(i.dot(l,u))},box:function(t,e,n,i,r){var a=r/2,o=Math.min(t,n),s=Math.max(t,n);return{minX:o-a,minY:Math.min(e,i)-a,maxX:s+a,maxY:Math.max(e,i)+a}},len:function(t,e,n,i){return Math.sqrt((n-t)*(n-t)+(i-e)*(i-e))}}},function(t,e,n){var i=n(34),r=n(46),a=Math.PI,o=Math.sin,s=Math.cos,u=Math.atan2,l=10,c=a/3;function h(t,e,n,i,r,h,f){var p,g,d,v,y,m,x;if(!e.fill){var b=e.arrowLength||l,_=e.arrowAngle?e.arrowAngle*a/180:c;x=u(i-h,n-r),y=Math.abs(e.lineWidth*s(x))/2,m=Math.abs(e.lineWidth*o(x))/2,f&&(y=-y,m=-m),p=r+b*s(x+_/2),g=h+b*o(x+_/2),d=r+b*s(x-_/2),v=h+b*o(x-_/2),t.beginPath(),t.moveTo(p-y,g-m),t.lineTo(r-y,h-m),t.lineTo(d-y,v-m),t.moveTo(r-y,h-m),t.lineTo(r+y,h+m),t.moveTo(r,h),t.stroke()}}function f(t,e,n,a,o,s,u){var l=u?e.startArrow:e.endArrow,c=l.d,h=0,f=o-n,p=s-a,g=Math.atan(f/p);0===p&&f<0?h=Math.PI:f>0&&p>0?h=Math.PI/2-g:f<0&&p<0?h=-Math.PI/2-g:f>=0&&p<0?h=-g-Math.PI/2:f<=0&&p>0&&(h=Math.PI/2-g);var d=function(t){var e,n=[],a=i.parsePath(t.path);if(!Array.isArray(a)||0===a.length||"M"!==a[0][0]&&"m"!==a[0][0])return!1;for(var o=a.length,s=0;s<a.length;s++){var u=a[s];e=new r(u,e,s===o-1),n.push(e)}return n}(l);if(d){c&&(u?(o+=Math.sin(Math.abs(g))*c,s=s+Math.cos(Math.abs(g))*c-.5*t.lineWidth):(o-=Math.sin(Math.abs(g))*c,s=s-Math.cos(Math.abs(g))*c+.5*t.lineWidth)),t.save(),t.beginPath(),t.translate(o,s),t.rotate(h);for(var v=0;v<d.length;v++)d[v].draw(t);t.setTransform(1,0,0,1,0,0),t.fillStyle=t.strokeStyle,t.fill(),t.restore()}}t.exports={addStartArrow:function(t,e,n,i,r,a){"object"==typeof e.startArrow?f(t,e,n,i,r,a,!0):e.startArrow&&h(t,e,n,i,r,a,!0)},addEndArrow:function(t,e,n,i,r,a){"object"==typeof e.endArrow?f(t,e,n,i,r,a,!1):e.endArrow&&h(t,e,n,i,r,a,!1)}}},function(t,e,n){var i=n(1),r=n(69),a=n(68),o=n(133),s=n(132),u=i.vec3,l=i.mat3,c=["m","l","c","a","q","h","v","t","s","z"];function h(t,e,n){return{x:n.x+t,y:n.y+e}}function f(t,e){return{x:e.x+(e.x-t.x),y:e.y+(e.y-t.y)}}function p(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])}function g(t,e){return(t[0]*e[0]+t[1]*e[1])/(p(t)*p(e))}function d(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(g(t,e))}var v=function(t,e,n){this.preSegment=e,this.isLast=n,this.init(t,e)};i.augment(v,{init:function(t,e){var n=t[0];e=e||{endPoint:{x:0,y:0}};var r,a,o,s,u=c.indexOf(n)>=0,l=u?n.toUpperCase():n,p=t,v=e.endPoint,y=p[1],m=p[2];switch(l){default:break;case"M":s=u?h(y,m,v):{x:y,y:m},this.command="M",this.params=[v,s],this.subStart=s,this.endPoint=s;break;case"L":s=u?h(y,m,v):{x:y,y:m},this.command="L",this.params=[v,s],this.subStart=e.subStart,this.endPoint=s,this.endTangent=function(){return[s.x-v.x,s.y-v.y]},this.startTangent=function(){return[v.x-s.x,v.y-s.y]};break;case"H":s=u?h(y,0,v):{x:y,y:v.y},this.command="L",this.params=[v,s],this.subStart=e.subStart,this.endPoint=s,this.endTangent=function(){return[s.x-v.x,s.y-v.y]},this.startTangent=function(){return[v.x-s.x,v.y-s.y]};break;case"V":s=u?h(0,y,v):{x:v.x,y:y},this.command="L",this.params=[v,s],this.subStart=e.subStart,this.endPoint=s,this.endTangent=function(){return[s.x-v.x,s.y-v.y]},this.startTangent=function(){return[v.x-s.x,v.y-s.y]};break;case"Q":u?(r=h(y,m,v),a=h(p[3],p[4],v)):(r={x:y,y:m},a={x:p[3],y:p[4]}),this.command="Q",this.params=[v,r,a],this.subStart=e.subStart,this.endPoint=a,this.endTangent=function(){return[a.x-r.x,a.y-r.y]},this.startTangent=function(){return[v.x-r.x,v.y-r.y]};break;case"T":a=u?h(y,m,v):{x:y,y:m},"Q"===e.command?(r=f(e.params[1],v),this.command="Q",this.params=[v,r,a],this.subStart=e.subStart,this.endPoint=a,this.endTangent=function(){return[a.x-r.x,a.y-r.y]},this.startTangent=function(){return[v.x-r.x,v.y-r.y]}):(this.command="TL",this.params=[v,a],this.subStart=e.subStart,this.endPoint=a,this.endTangent=function(){return[a.x-v.x,a.y-v.y]},this.startTangent=function(){return[v.x-a.x,v.y-a.y]});break;case"C":u?(r=h(y,m,v),a=h(p[3],p[4],v),o=h(p[5],p[6],v)):(r={x:y,y:m},a={x:p[3],y:p[4]},o={x:p[5],y:p[6]}),this.command="C",this.params=[v,r,a,o],this.subStart=e.subStart,this.endPoint=o,this.endTangent=function(){return[o.x-a.x,o.y-a.y]},this.startTangent=function(){return[v.x-r.x,v.y-r.y]};break;case"S":u?(a=h(y,m,v),o=h(p[3],p[4],v)):(a={x:y,y:m},o={x:p[3],y:p[4]}),"C"===e.command?(r=f(e.params[2],v),this.command="C",this.params=[v,r,a,o],this.subStart=e.subStart,this.endPoint=o,this.endTangent=function(){return[o.x-a.x,o.y-a.y]},this.startTangent=function(){return[v.x-r.x,v.y-r.y]}):(this.command="SQ",this.params=[v,a,o],this.subStart=e.subStart,this.endPoint=o,this.endTangent=function(){return[o.x-a.x,o.y-a.y]},this.startTangent=function(){return[v.x-a.x,v.y-a.y]});break;case"A":var x=y,b=m,_=p[3],w=p[4],M=p[5];s=u?h(p[6],p[7],v):{x:p[6],y:p[7]},this.command="A";var S=function(t,e,n,r,a,o,s){var u=i.mod(i.toRadian(s),2*Math.PI),l=t.x,c=t.y,h=e.x,f=e.y,p=Math.cos(u)*(l-h)/2+Math.sin(u)*(c-f)/2,v=-1*Math.sin(u)*(l-h)/2+Math.cos(u)*(c-f)/2,y=p*p/(a*a)+v*v/(o*o);y>1&&(a*=Math.sqrt(y),o*=Math.sqrt(y));var m=a*a*(v*v)+o*o*(p*p),x=Math.sqrt((a*a*(o*o)-m)/m);n===r&&(x*=-1),isNaN(x)&&(x=0);var b=x*a*v/o,_=x*-o*p/a,w=(l+h)/2+Math.cos(u)*b-Math.sin(u)*_,M=(c+f)/2+Math.sin(u)*b+Math.cos(u)*_,S=d([1,0],[(p-b)/a,(v-_)/o]),C=[(p-b)/a,(v-_)/o],k=[(-1*p-b)/a,(-1*v-_)/o],A=d(C,k);return g(C,k)<=-1&&(A=Math.PI),g(C,k)>=1&&(A=0),0===r&&A>0&&(A-=2*Math.PI),1===r&&A<0&&(A+=2*Math.PI),[t,w,M,a,o,S,A,u,r]}(v,s,w,M,x,b,_);this.params=S;var C=e.subStart;this.subStart=C,this.endPoint=s;var k=S[5]%(2*Math.PI);i.isNumberEqual(k,2*Math.PI)&&(k=0);var A=S[6]%(2*Math.PI);i.isNumberEqual(A,2*Math.PI)&&(A=0);var P=.001;this.startTangent=function(){0===M&&(P*=-1);var t=S[3]*Math.cos(k-P)+S[1],e=S[4]*Math.sin(k-P)+S[2];return[t-C.x,e-C.y]},this.endTangent=function(){var t=S[6];t-2*Math.PI<1e-4&&(t=0);var e=S[3]*Math.cos(k+t+P)+S[1],n=S[4]*Math.sin(k+t-P)+S[2];return[v.x-e,v.y-n]};break;case"Z":this.command="Z",this.params=[v,e.subStart],this.subStart=e.subStart,this.endPoint=e.subStart}},isInside:function(t,e,n){var i=this.command,a=this.params,o=this.box;if(o&&!r.box(o.minX,o.maxX,o.minY,o.maxY,t,e))return!1;switch(i){default:break;case"M":return!1;case"TL":case"L":case"Z":return r.line(a[0].x,a[0].y,a[1].x,a[1].y,n,t,e);case"SQ":case"Q":return r.quadraticline(a[0].x,a[0].y,a[1].x,a[1].y,a[2].x,a[2].y,n,t,e);case"C":return r.cubicline(a[0].x,a[0].y,a[1].x,a[1].y,a[2].x,a[2].y,a[3].x,a[3].y,n,t,e);case"A":var s=a,c=s[1],h=s[2],f=s[3],p=s[4],g=s[5],d=s[6],v=s[7],y=s[8],m=f>p?f:p,x=f>p?1:f/p,b=f>p?p/f:1;s=[t,e,1];var _=[1,0,0,0,1,0,0,0,1];return l.translate(_,_,[-c,-h]),l.rotate(_,_,-v),l.scale(_,_,[1/x,1/b]),u.transformMat3(s,s,_),r.arcline(0,0,m,g,g+d,1-y,n,s[0],s[1])}return!1},draw:function(t){var e,n,i,r=this.command,a=this.params;switch(r){default:break;case"M":t.moveTo(a[1].x,a[1].y);break;case"TL":case"L":t.lineTo(a[1].x,a[1].y);break;case"SQ":case"Q":e=a[1],n=a[2],t.quadraticCurveTo(e.x,e.y,n.x,n.y);break;case"C":e=a[1],n=a[2],i=a[3],t.bezierCurveTo(e.x,e.y,n.x,n.y,i.x,i.y);break;case"A":var o=a,s=o[1],u=o[2],l=o[3],c=o[4],h=o[5],f=o[6],p=o[7],g=o[8],d=l>c?l:c,v=l>c?1:l/c,y=l>c?c/l:1;t.translate(s,u),t.rotate(p),t.scale(v,y),t.arc(0,0,d,h,h+f,1-g),t.scale(1/v,1/y),t.rotate(-p),t.translate(-s,-u);break;case"Z":t.closePath()}},getBBox:function(t){var e,n,i,r,u=t/2,l=this.params;switch(this.command){default:case"M":case"Z":break;case"TL":case"L":this.box={minX:Math.min(l[0].x,l[1].x)-u,maxX:Math.max(l[0].x,l[1].x)+u,minY:Math.min(l[0].y,l[1].y)-u,maxY:Math.max(l[0].y,l[1].y)+u};break;case"SQ":case"Q":for(i=0,r=(n=o.extrema(l[0].x,l[1].x,l[2].x)).length;i<r;i++)n[i]=o.at(l[0].x,l[1].x,l[2].x,n[i]);for(n.push(l[0].x,l[2].x),i=0,r=(e=o.extrema(l[0].y,l[1].y,l[2].y)).length;i<r;i++)e[i]=o.at(l[0].y,l[1].y,l[2].y,e);e.push(l[0].y,l[2].y),this.box={minX:Math.min.apply(Math,n)-u,maxX:Math.max.apply(Math,n)+u,minY:Math.min.apply(Math,e)-u,maxY:Math.max.apply(Math,e)+u};break;case"C":for(i=0,r=(n=a.extrema(l[0].x,l[1].x,l[2].x,l[3].x)).length;i<r;i++)n[i]=a.at(l[0].x,l[1].x,l[2].x,l[3].x,n[i]);for(i=0,r=(e=a.extrema(l[0].y,l[1].y,l[2].y,l[3].y)).length;i<r;i++)e[i]=a.at(l[0].y,l[1].y,l[2].y,l[3].y,e[i]);n.push(l[0].x,l[3].x),e.push(l[0].y,l[3].y),this.box={minX:Math.min.apply(Math,n)-u,maxX:Math.max.apply(Math,n)+u,minY:Math.min.apply(Math,e)-u,maxY:Math.max.apply(Math,e)+u};break;case"A":var c=l,h=c[1],f=c[2],p=c[3],g=c[4],d=c[5],v=c[6],y=c[7],m=c[8],x=d,b=d+v,_=s.xExtrema(y,p,g),w=1/0,M=-1/0,S=[x,b];for(i=2*-Math.PI;i<=2*Math.PI;i+=Math.PI){var C=_+i;1===m?x<C&&C<b&&S.push(C):b<C&&C<x&&S.push(C)}for(i=0,r=S.length;i<r;i++){var k=s.xAt(y,p,g,h,S[i]);k<w&&(w=k),k>M&&(M=k)}var A=s.yExtrema(y,p,g),P=1/0,I=-1/0,T=[x,b];for(i=2*-Math.PI;i<=2*Math.PI;i+=Math.PI){var O=A+i;1===m?x<O&&O<b&&T.push(O):b<O&&O<x&&T.push(O)}for(i=0,r=T.length;i<r;i++){var E=s.yAt(y,p,g,f,T[i]);E<P&&(P=E),E>I&&(I=E)}this.box={minX:w-u,maxX:M+u,minY:P-u,maxY:I+u}}}}),t.exports=v},function(t,e,n){var i=n(7),r=n(2),a=n(23),o=n(331),s=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){t.prototype._initDefaultCfg.call(this);this.type="linear",this.isLinear=!0,this.nice=!1,this.min=null,this.minLimit=null,this.max=null,this.maxLimit=null,this.tickCount=null,this.tickInterval=null,this.minTickInterval=null,this.snapArray=null},n.init=function(){if(this.ticks){var t=this.ticks,e=this.translate(t[0]),n=this.translate(t[t.length-1]);(i(this.min)||this.min>e)&&(this.min=e),(i(this.max)||this.max<n)&&(this.max=n)}else this.min=this.translate(this.min),this.max=this.translate(this.max),this.initTicks()},n.calculateTicks=function(){var t=this.min,e=this.max,n=this.minLimit,i=this.maxLimit,r=this.tickCount,a=this.tickInterval,s=this.minTickInterval,u=this.snapArray;if(1===r)throw new Error("linear scale'tickCount should not be 1");if(e<t)throw new Error("max: "+e+" should not be less than min: "+t);return o({min:t,max:e,minLimit:n,maxLimit:i,minCount:r,maxCount:r,interval:a,minTickInterval:s,snapArray:u}).ticks},n.initTicks=function(){var t=this,e=t.calculateTicks();if(t.nice)t.ticks=e,t.min=e[0],t.max=e[e.length-1];else{var n=[];r(e,function(e){e>=t.min&&e<=t.max&&n.push(e)}),n.length||(n.push(t.min),n.push(t.max)),t.ticks=n}},n.scale=function(t){if(i(t))return NaN;var e=this.max,n=this.min;if(e===n)return 0;var r=(t-n)/(e-n),a=this.rangeMin();return a+r*(this.rangeMax()-a)},n.invert=function(t){var e=(t-this.rangeMin())/(this.rangeMax()-this.rangeMin());return this.min+e*(this.max-this.min)},e}(a);a.Linear=s,t.exports=s},function(t,e,n){var i=n(19),r=Array.prototype.indexOf;t.exports=function(t,e){return!!i(t)&&r.call(t,e)>-1}},function(t,e){t.exports=function(t){for(var e=[],n=0;n<t.length;n++)e=e.concat(t[n]);return e}},function(t,e){t.exports=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e-5;return Math.abs(t-e)<n}},function(t,e,n){t.exports={mat3:n(78),vec2:n(164),vec3:n(165),transform:n(163)}},function(t,e,n){var i=n(19);t.exports=function(t){return i(t)?Array.prototype.slice.call(t):[]}},function(t,e,n){"use strict";e.a=function(t,e){return e-=t=+t,function(n){return t+e*n}}},function(t,e,n){"use strict";e.a=function(t,e){return e-=t=+t,function(n){return t+e*n}}},function(t,e,n){"use strict";var i=n(89),r=n(90);e.a=function(t){var e=n.i(i.a)(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===r.b&&e.documentElement.namespaceURI===r.b?e.createElement(t):e.createElementNS(n,t)}})(e)}},function(t,e,n){"use strict";e.a=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var i=n.createSVGPoint();return i.x=e.clientX,i.y=e.clientY,[(i=i.matrixTransform(t.getScreenCTM().inverse())).x,i.y]}var r=t.getBoundingClientRect();return[e.clientX-r.left-t.clientLeft,e.clientY-r.top-t.clientTop]}},function(t,e,n){"use strict";e.b=function(t,e,r){var a=t._id;return t.each(function(){var t=n.i(i.e)(this,a);(t.value||(t.value={}))[e]=r.apply(this,arguments)}),function(t){return n.i(i.f)(t,a).value[e]}};var i=n(17);e.a=function(t,e){var r=this._id;if(t+="",arguments.length<2){for(var a,o=n.i(i.f)(this.node(),r).tween,s=0,u=o.length;s<u;++s)if((a=o[s]).name===t)return a.value;return null}return this.each((null==e?function(t,e){var r,a;return function(){var o=n.i(i.e)(this,t),s=o.tween;if(s!==r)for(var u=0,l=(a=r=s).length;u<l;++u)if(a[u].name===e){(a=a.slice()).splice(u,1);break}o.tween=a}}:function(t,e,r){var a,o;if("function"!=typeof r)throw new Error;return function(){var s=n.i(i.e)(this,t),u=s.tween;if(u!==a){o=(a=u).slice();for(var l={name:e,value:r},c=0,h=o.length;c<h;++c)if(o[c].name===e){o[c]=l;break}c===h&&o.push(l)}s.tween=o}})(r,t,e))}},function(t,e,n){"use strict";var i=n(63),r=u(i),a=u(n(38)),o=u(n(419)),s=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(413));function u(t){return t&&t.__esModule?t:{default:t}}r.default.Global.trackingInfo={bizcharts:"3.2.5-beta.3"};var l=a.default.mix(s,{G2:r.default,Util:a.default,Shape:i.Shape,Animate:i.Animate,PathUtil:i.PathUtil,track:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];r.default.track(t)},setTheme:function(t){var e=t;"string"==typeof t&&o.default[t]&&(e=o.default[t]),r.default.Global.setTheme(e)}});e.default=l,t.exports=l},function(t,e,n){t.exports={Position:n(224),Color:n(222),Shape:n(225),Size:n(226),Opacity:n(223),ColorUtil:n(99)}},function(t,e,n){function i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var r=n(97),a=n(3),o=function(t){!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(n,t);var e=n.prototype;function n(e){var n,r=i(i(n=t.call(this)||this)),o={visible:!0},s=r.getDefaultCfg();return r._attrs=o,a.deepMix(o,s,e),n}return e.getDefaultCfg=function(){return{}},e.get=function(t){return this._attrs[t]},e.set=function(t,e){this._attrs[t]=e},e.changeVisible=function(){},e.destroy=function(){this._attrs={},this.removeAllListeners(),this.destroyed=!0},n}(r);t.exports=o},function(t,e,n){var i=n(3),r=n(104),a=i.Event,o=i.Group,s=n(250),u=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"continuous-legend",items:null,layout:"vertical",width:20,height:156,textStyle:{fill:"#333",textAlign:"center",textBaseline:"middle",stroke:"#fff",lineWidth:5,fontFamily:'"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"'},hoverTextStyle:{fill:"rgba(0,0,0,0.25)"},slidable:!0,triggerAttr:{fill:"#fff",shadowBlur:10,shadowColor:"rgba(0,0,0,0.65)",radius:2},_range:[0,100],middleBackgroundStyle:{fill:"#D9D9D9"},textOffset:4,lineStyle:{lineWidth:1,stroke:"#fff"},pointerStyle:{fill:"rgb(230, 230, 230)"}})},n._calStartPoint=function(){var t={x:10,y:this.get("titleGap")-8},e=this.get("titleShape");if(e){var n=e.getBBox();t.y+=n.height}return t},n.beforeRender=function(){var e=this.get("items");i.isArray(e)&&!i.isEmpty(e)&&(t.prototype.beforeRender.call(this),this.set("firstItem",e[0]),this.set("lastItem",e[e.length-1]))},n._formatItemValue=function(t){var e=this.get("formatter")||this.get("itemFormatter");return e&&(t=e.call(this,t)),t},n.render=function(){t.prototype.render.call(this),this.get("slidable")?this._renderSlider():this._renderUnslidable()},n._renderSlider=function(){var t=new o,e=new o,n=new o,i=this._calStartPoint(),r=this.get("group").addGroup(s,{minHandleElement:t,maxHandleElement:e,backgroundElement:n,layout:this.get("layout"),range:this.get("_range"),width:this.get("width"),height:this.get("height")});r.translate(i.x,i.y),this.set("slider",r),this._renderSliderShape().attr("clip",r.get("middleHandleElement")),this._renderTrigger()},n._addMiddleBar=function(t,e,n){return t.addShape(e,{attrs:i.mix({},n,this.get("middleBackgroundStyle"))}),t.addShape(e,{attrs:n})},n._renderTrigger=function(){var t=this.get("firstItem"),e=this.get("lastItem"),n=this.get("layout"),r=this.get("textStyle"),a=this.get("triggerAttr"),o=i.mix({},a),s=i.mix({},a),u=i.mix({text:this._formatItemValue(t.value)+""},r),l=i.mix({text:this._formatItemValue(e.value)+""},r);"vertical"===n?(this._addVerticalTrigger("min",o,u),this._addVerticalTrigger("max",s,l)):(this._addHorizontalTrigger("min",o,u),this._addHorizontalTrigger("max",s,l))},n._addVerticalTrigger=function(t,e,n){var r=this.get("slider").get(t+"HandleElement"),a=this.get("width"),o=r.addShape("rect",{attrs:i.mix({x:a/2-8-2,y:"min"===t?0:-8,width:18,height:8},e)}),s=r.addShape("text",{attrs:i.mix(n,{x:a+this.get("textOffset"),y:"max"===t?-4:4,textAlign:"start",lineHeight:1,textBaseline:"middle"})}),u="vertical"===this.get("layout")?"ns-resize":"ew-resize";o.attr("cursor",u),s.attr("cursor",u),this.set(t+"ButtonElement",o),this.set(t+"TextElement",s)},n._addHorizontalTrigger=function(t,e,n){var r=this.get("slider").get(t+"HandleElement"),a=r.addShape("rect",{attrs:i.mix({x:"min"===t?-8:0,y:-8-this.get("height")/2,width:8,height:16},e)}),o=r.addShape("text",{attrs:i.mix(n,{x:"min"===t?-12:12,y:4+this.get("textOffset")+10,textAlign:"min"===t?"end":"start",textBaseline:"middle"})}),s="vertical"===this.get("layout")?"ns-resize":"ew-resize";a.attr("cursor",s),o.attr("cursor",s),this.set(t+"ButtonElement",a),this.set(t+"TextElement",o)},n._bindEvents=function(){var t=this;this.get("slidable")&&this.get("slider").on("sliderchange",function(e){var n=e.range,i=t.get("firstItem").value,r=t.get("lastItem").value,o=i+n[0]/100*(r-i),s=i+n[1]/100*(r-i);t._updateElement(o,s);var u=new a("itemfilter",e,!0,!0);u.range=[o,s],t.emit("itemfilter",u)});this.get("hoverable")&&(this.get("group").on("mousemove",i.wrapBehavior(this,"_onMouseMove")),this.get("group").on("mouseleave",i.wrapBehavior(this,"_onMouseLeave")))},n._updateElement=function(t,e){var n=this.get("minTextElement"),i=this.get("maxTextElement");e>1&&(t=parseInt(t,10),e=parseInt(e,10)),n.attr("text",this._formatItemValue(t)+""),i.attr("text",this._formatItemValue(e)+"")},n._onMouseLeave=function(){var t=this.get("group").findById("hoverPointer");t&&t.destroy();var e=this.get("group").findById("hoverText");e&&e.destroy(),this.get("canvas").draw()},n._onMouseMove=function(t){var e,n=this.get("height"),i=this.get("width"),r=this.get("items"),a=this.get("canvas").get("el").getBoundingClientRect(),o=this.get("group").getBBox();if("vertical"===this.get("layout")){var s=5;"color-legend"===this.get("type")&&(s=30);var u=this.get("titleGap"),l=this.get("titleShape");l&&(u+=l.getBBox().maxY-l.getBBox().minY);var c=t.clientY||t.event.clientY;c=c-a.y-this.get("group").attr("matrix")[7]+o.y-s+u,e=r[0].value+(1-c/n)*(r[r.length-1].value-r[0].value)}else{var h=t.clientX||t.event.clientX;h=h-a.x-this.get("group").attr("matrix")[6],e=r[0].value+h/i*(r[r.length-1].value-r[0].value)}e=e.toFixed(2),this.activate(e),this.emit("mousehover",{value:e})},n.activate=function(t){if(t){var e=this.get("group").findById("hoverPointer"),n=this.get("group").findById("hoverText"),r=this.get("items");if(!(t<r[0].value||t>r[r.length-1].value)){var a,o=this.get("height"),s=this.get("width"),u=this.get("titleShape"),l=this.get("titleGap"),c=[],h=(t-r[0].value)/(r[r.length-1].value-r[0].value);if("vertical"===this.get("layout")){var f=0,p=0;"color-legend"===this.get("type")&&(f=l,u&&(f+=u.getBBox().height)),this.get("slidable")&&("color-legend"===this.get("type")?f-=13:(f=l-15,u&&(f+=u.getBBox().height)),p+=10),c=[[p,(h=(1-h)*o)+f],[p-10,h+f-5],[p-10,h+f+5]],a=i.mix({},{x:s+this.get("textOffset")/2+p,y:h+f,text:this._formatItemValue(t)+""},this.get("textStyle"),{textAlign:"start"})}else{var g=0,d=0;"color-legend"===this.get("type")&&(g=l,u&&(g+=u.getBBox().height)),this.get("slidable")&&("color-legend"===this.get("type")?g-=7:(g=l,u||(g-=7)),d+=10),c=[[(h*=s)+d,g],[h+d-5,g-10],[h+d+5,g-10]],a=i.mix({},{x:h-5,y:o+this.get("textOffset")+g,text:this._formatItemValue(t)+""},this.get("textStyle"))}var v=i.mix(a,this.get("hoverTextStyle"));n?n.attr(v):(n=this.get("group").addShape("text",{attrs:v})).set("id","hoverText"),e?e.attr(i.mix({points:c},this.get("pointerStyle"))):(e=this.get("group").addShape("Polygon",{attrs:i.mix({points:c},this.get("pointerStyle"))})).set("id","hoverPointer"),this.get("canvas").draw()}}},n.unactivate=function(){var t=this.get("group").findById("hoverPointer");t&&t.destroy();var e=this.get("group").findById("hoverText");e&&e.destroy(),this.get("canvas").draw()},e}(r);t.exports=u},function(t,e,n){var i=n(60),r=n(3),a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return r.mix({},e,{x:0,y:0,items:null,titleContent:null,showTitle:!0,plotRange:null,offset:10,timeStamp:0,inPlot:!0,crosshairs:null})},n.isContentChange=function(t,e){var n=this.get("titleContent"),i=this.get("items"),a=!(t===n&&i.length===e.length);return a||r.each(e,function(t,e){var n=i[e];for(var o in t)if(t.hasOwnProperty(o)&&!r.isObject(t[o])&&t[o]!==n[o]){a=!0;break}if(a)return!1}),a},n.setContent=function(t,e){var n=(new Date).valueOf();return this.set("items",e),this.set("titleContent",t),this.set("timeStamp",n),this.render(),this},n.setPosition=function(t,e){this.set("x",t),this.set("y",e)},n.render=function(){},n.clear=function(){},n.show=function(){this.set("visible",!0)},n.hide=function(){this.set("visible",!1)},n.destroy=function(){},e}(i);t.exports=a},function(t,e,n){var i=n(143),r=n(26),a=n(111),o=n(113),s=n(5),u=n(9),l=n(0),c={version:s.version,Animate:a,Chart:o,Global:s,Scale:i,Shape:u,Util:l,G:r,DomUtil:l.DomUtil,MatrixUtil:l.MatrixUtil,PathUtil:l.PathUtil,track:function(t){s.trackable=t}};n(307),"undefined"!=typeof window&&(window.G2?console.warn("There are multiple versions of G2. Version "+c.version+"'s reference is 'window.G2_3'"):window.G2=c),t.exports=c},function(t,e,n){var i=n(26).Group,r=n(27).Label,a=n(5),o=n(0),s=["line","point","path"];var u=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){return{label:a.label,labelCfg:null,coord:null,geomType:null,zIndex:6}},n._renderUI=function(){t.prototype._renderUI.call(this),this.initLabelsCfg();var e=this.addGroup(),n=this.addGroup({elCls:"x-line-group"}),i=this.get("labelRenderer");this.set("labelsGroup",e),this.set("lineGroup",n),this.get("labelRenderer").set("group",e),i.set("group",e),i.set("lineGroup",n)},n.initLabelsCfg=function(){var t=new r,e=this.getDefaultLabelCfg(),n=this.get("labelCfg");o.deepMix(e,n.globalCfg||n.cfg),t.set("labelCfg",e),e.labelLine&&t.set("labelLine",e.labelLine),t.set("coord",this.get("coord")),this.set("labelRenderer",t),this.set("label",e)},n.getDefaultLabelCfg=function(){var t=this.get("labelCfg").cfg,e=this.get("geomType"),n=this.get("viewTheme")||a;return"polygon"===e||t&&t.offset<0&&-1===o.indexOf(s,e)?o.deepMix({},this.get("label"),n.innerLabels):o.deepMix({},n.label,this.get("label"))},n.getLabelsItems=function(t,e){var n=this,i=[],r=n.get("geom"),a=n.get("coord");n._getLabelCfgs(t,e);var s=n.get("labelItemCfgs");return o.each(t,function(t,e){var u=t._origin,l=s[e];if(l){o.isArray(l.text)||(l.text=[l.text]);var c=l.length;o.each(l.text,function(e,s){if(o.isNil(e)||""===e)i.push(null);else{var h=n.getLabelPoint(l,t,s);(h=o.mix({},l,h)).textAlign||(h.textAlign=n.getLabelAlign(h,s,c)),r&&(h._id=r._getShapeId(u)+"-glabel-"+s+"-"+h.text),h.coord=a,i.push(h)}})}else i.push(null)}),i},n.adjustItems=function(t){return t},n.drawLines=function(t){var e=this;o.each(t,function(t){t&&(t._offset[0]>0||t._offset[1]>0)&&e.lineToLabel(t)})},n.lineToLabel=function(){},n.getLabelPoint=function(t,e,n){var i=this.get("coord"),r=t.text.length;function a(e,n){return o.isArray(e)&&(e=1===t.text.length?e.length<=2?e[e.length-1]:function(t){var e=0;return o.each(t,function(t){e+=t}),e/t.length}(e):e[n]),e}var s={text:t.text[n]};if(e&&"polygon"===this.get("geomType")){var u=function(t,e){for(var n,i,r=-1,a=0,o=0,s=t.length-1,u=0;++r<t.length;)n=s,s=r,u+=i=t[n]*e[s]-t[s]*e[n],a+=(t[n]+t[s])*i,o+=(e[n]+e[s])*i;return[a/(u*=3),o/u]}(e.x,e.y);s.x=u[0],s.y=u[1]}else s.x=a(e.x,n),s.y=a(e.y,n);if(e&&e.nextPoints&&("funnel"===e.shape||"pyramid"===e.shape)){var l=-1/0;e.nextPoints.forEach(function(t){(t=i.convert(t)).x>l&&(l=t.x)}),s.x=(s.x+l)/2}"pyramid"===e.shape&&!e.nextPoints&&e.points&&e.points.forEach(function(t){t=i.convert(t),(o.isArray(t.x)&&-1===e.x.indexOf(t.x)||o.isNumber(t.x)&&e.x!==t.x)&&(s.x=(s.x+t.x)/2)}),t.position&&this.setLabelPosition(s,e,n,t.position);var c=this.getLabelOffset(t,n,r);return this.transLabelPoint(s),s.x+=c[0],s.y+=c[1],s.color=e.color,s._offset={x:c[0],y:c[1]},s},n.setLabelPosition=function(){},n.transLabelPoint=function(t){var e=this.get("coord").applyMatrix(t.x,t.y,1);t.x=e[0],t.y=e[1]},n.getDefaultOffset=function(t){var e,n=t.offset||[0,0],i=this.get("coord");return[(e=i.isTransposed?i.applyMatrix(n[1],n[0]):i.applyMatrix(n[0],n[1]))[0],e[1]]},n.getLabelOffset=function(t,e,n){var i=this.getDefaultOffset(t),r=this.get("coord").isTransposed?1:-1,a={x:0,y:0};return e<=0&&1!==n&&(r*=-1),a.x=i[0]*r,a.y=i[1]*r,[a.x,a.y]},n.getLabelAlign=function(t,e,n){var i="center";if(this.get("coord").isTransposed){var r=t._offset;i=r[0]<0?"right":0===r[0]?"center":"left",n>1&&0===e&&("right"===i?i="left":"left"===i&&(i="right"))}return i},n._getLabelValue=function(t,e){o.isArray(e)||(e=[e]);var n=[];return o.each(e,function(e){var i=t[e.field];if(o.isArray(i)){var r=[];o.each(i,function(t){r.push(e.getText(t))}),i=r}else i=e.getText(i);(o.isNil(i)||""===i)&&n.push(null),n.push(i)}),n},n._getLabelCfgs=function(t){var e=this,n=this.get("labelCfg"),i=n.scales,r=this.get("label"),a=[];n.globalCfg&&n.globalCfg.type&&e.set("type",n.globalCfg.type),o.each(t,function(t,s){var u={},l=t._origin,c=e._getLabelValue(l,i);if(n.callback){var h=i.map(function(t){return l[t.field]});u=n.callback.apply(null,h)}if(u||0===u){if(o.isString(u)||o.isNumber(u)?u={text:u}:u.text=c[0],u=o.mix({},r,n.globalCfg||{},u),t.point=l,u.htmlTemplate&&(u.text=u.htmlTemplate.call(null,u.text,t,s),delete u.htmlTemplate),u.formatter&&(u.text=u.formatter.call(null,u.text,t,s),delete u.formatter),u.label){var f=u.label;delete u.label,u=o.mix(u,f)}if(u.textStyle){delete u.textStyle.offset;var p=u.textStyle;o.isFunction(p)&&(u.textStyle=p.call(null,c,l,s))}var g=u.offset||[0,0];o.isArray(g)||(g=[0,g]),u.labelLine&&(u.labelLine=o.mix({},r.labelLine,u.labelLine)),u.textStyle=o.mix({},r.textStyle,u.textStyle),u.offset=g,delete u.items,a.push(u)}else a.push(null)}),this.set("labelItemCfgs",a)},n.showLabels=function(t,e){var n=this.get("labelRenderer"),i=this.getLabelsItems(t,e);e=[].concat(e);var r=this.get("type");i=this.adjustItems(i,e),this.drawLines(i),n.set("items",i.filter(function(t,n){return!!t||(e.splice(n,1),!1)})),r&&(n.set("shapes",e),n.set("type",r),n.set("points",t)),n.set("canvas",this.get("canvas")),n.draw()},n.destroy=function(){this.get("labelRenderer").destroy(),t.prototype.destroy.call(this)},e}(i);t.exports=u},function(t,e,n){var i=n(5),r=n(0);var a={getDefaultSize:function(){var t=this.get("defaultSize"),e=this.get("viewTheme")||i;if(!t){var n,a=this.get("coord"),o=this.getXScale(),s=o.values,u=this.get("dataArray");if(o.isLinear&&s.length>1){s.sort();var l=function(t,e){var n=t.length;r.isString(t[0])&&(t=t.map(function(t){return e.translate(t)}));for(var i=t[1]-t[0],a=2;a<n;a++){var o=t[a]-t[a-1];i>o&&(i=o)}return i}(s,o);n=(o.max-o.min)/l,s.length>n&&(n=s.length)}else n=s.length;var c=o.range,h=1/n,f=1;if(this.isInCircle()?f=a.isTransposed&&n>1?e.widthRatio.multiplePie:e.widthRatio.rose:(o.isLinear&&(h*=c[1]-c[0]),f=e.widthRatio.column),h*=f,this.hasAdjust("dodge"))h/=this._getDodgeCount(u);t=h,this.set("defaultSize",t)}return t},_getDodgeCount:function(t){var e,n=this.get("adjusts"),i=t.length;if(r.each(n,function(t){"dodge"===t.type&&(e=t.dodgeBy)}),e){var a=r.Array.merge(t);i=r.Array.values(a,e).length}return i},getDimWidth:function(t){var e=this.get("coord"),n=e.convertPoint({x:0,y:0}),i=e.convertPoint({x:"x"===t?1:0,y:"x"===t?0:1}),r=0;return n&&i&&(r=Math.sqrt(Math.pow(i.x-n.x,2)+Math.pow(i.y-n.y,2))),r},_getWidth:function(){var t=this.get("coord");return this.isInCircle()&&!t.isTransposed?(t.endAngle-t.startAngle)*t.radius:this.getDimWidth("x")},_toNormalizedSize:function(t){return t/this._getWidth()},_toCoordSize:function(t){return this._getWidth()*t},getNormalizedSize:function(t){var e=this.getAttrValue("size",t);return e=r.isNil(e)?this.getDefaultSize():this._toNormalizedSize(e)},getSize:function(t){var e=this.getAttrValue("size",t);if(r.isNil(e)){var n=this.getDefaultSize();e=this._toCoordSize(n)}return e}};t.exports=a},function(t,e,n){var i=n(0),r={splitPoints:function(t){var e=[],n=t.x,r=t.y;return r=i.isArray(r)?r:[r],i.each(r,function(t,r){var a={x:i.isArray(n)?n[r]:n,y:t};e.push(a)}),e}};t.exports=r},function(t,e,n){var i=n(1),r=n(6),a=n(34),o=n(46),s=function t(e){t.superclass.constructor.call(this,e)};s.Symbols={circle:function(t,e,n){return[["M",t,e],["m",-n,0],["a",n,n,0,1,0,2*n,0],["a",n,n,0,1,0,2*-n,0]]},square:function(t,e,n){return[["M",t-n,e-n],["L",t+n,e-n],["L",t+n,e+n],["L",t-n,e+n],["Z"]]},diamond:function(t,e,n){return[["M",t-n,e],["L",t,e-n],["L",t+n,e],["L",t,e+n],["Z"]]},triangle:function(t,e,n){var i=n*Math.sin(1/3*Math.PI);return[["M",t-n,e+i],["L",t,e-i],["L",t+n,e+i],["z"]]},"triangle-down":function(t,e,n){var i=n*Math.sin(1/3*Math.PI);return[["M",t-n,e-i],["L",t+n,e-i],["L",t,e+i],["Z"]]}},s.ATTRS={path:null,lineWidth:1},i.extend(s,r),i.augment(s,{type:"marker",canFill:!0,canStroke:!0,getDefaultAttrs:function(){return{x:0,y:0,lineWidth:1}},calculateBox:function(){var t=this._attrs,e=t.x,n=t.y,i=t.radius,r=this.getHitLineWidth()/2+i;return{minX:e-r,minY:n-r,maxX:e+r,maxY:n+r}},_getPath:function(){var t=this._attrs,e=t.x,n=t.y,r=t.radius||t.r,a=t.symbol||"circle";return(i.isFunction(a)?a:s.Symbols[a])(e,n,r)},createPath:function(t){var e=this._cfg.segments;if(!e||this._cfg.hasUpdate){var n,i=a.parsePath(this._getPath());t.beginPath(),e=[];for(var r=0;r<i.length;r++){var s=i[r];n=new o(s,n,r===i.length-1),e.push(n),n.draw(t)}this._cfg.segments=e,this._cfg.hasUpdate=!1}else{t.beginPath();for(var u=0;u<e.length;u++)e[u].draw(t)}}}),t.exports=s},function(t,e,n){var i=n(1),r=i.vec2;function a(t,e,n,i,r){var a=1-r;return a*a*(a*i+3*r*n)+r*r*(r*t+3*a*e)}function o(t,e,n,i,o,s,u,l,c,h,f){var p,g,d,v,y,m,x,b,_=.005,w=1/0,M=[c,h];for(g=0;g<1;g+=.05)d=[a(t,n,o,u,g),a(e,i,s,l,g)],(v=r.squaredDistance(M,d))<w&&(p=g,w=v);w=1/0;for(var S=0;S<32&&!(_<1e-4);S++)b=p+_,d=[a(t,n,o,u,x=p-_),a(e,i,s,l,x)],v=r.squaredDistance(M,d),x>=0&&v<w?(p=x,w=v):(m=[a(t,n,o,u,b),a(e,i,s,l,b)],y=r.squaredDistance(M,m),b<=1&&y<w?(p=b,w=y):_*=.5);return f&&(f.x=a(t,n,o,u,p),f.y=a(e,i,s,l,p)),Math.sqrt(w)}function s(t,e,n,i,r){return t*(t*(-3*e+9*n-9*i+3*r)+6*e-12*n+6*i)-3*e+3*n}t.exports={at:a,derivativeAt:function(t,e,n,i,r){var a=1-r;return 3*(((e-t)*a+2*(n-e)*r)*a+(i-n)*r*r)},projectPoint:function(t,e,n,i,r,a,s,u,l,c){var h={};return o(t,e,n,i,r,a,s,u,l,c,h),h},pointDistance:o,extrema:function(t,e,n,r){var a,o,s,u=3*t-9*e+9*n-3*r,l=6*e-12*n+6*r,c=3*n-3*r,h=[];if(i.isNumberEqual(u,0))i.isNumberEqual(l,0)||(a=-c/l)>=0&&a<=1&&h.push(a);else{var f=l*l-4*u*c;i.isNumberEqual(f,0)?h.push(-l/(2*u)):f>0&&(o=(-l-(s=Math.sqrt(f)))/(2*u),(a=(-l+s)/(2*u))>=0&&a<=1&&h.push(a),o>=0&&o<=1&&h.push(o))}return h},len:function(t,e,n,r,a,o,u,l,c){i.isNil(c)&&(c=1);for(var h=(c=c>1?1:c<0?0:c)/2,f=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],p=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],g=0,d=0;d<12;d++){var v=h*f[d]+h,y=s(v,t,n,a,u),m=s(v,e,r,o,l),x=y*y+m*m;g+=p[d]*Math.sqrt(x)}return h*g}}},function(t,e,n){var i=n(44),r=n(133),a=n(68),o=n(43);t.exports={line:function(t,e,n,r,a,o,s){var u=i.box(t,e,n,r,a);if(!this.box(u.minX,u.maxX,u.minY,u.maxY,o,s))return!1;var l=i.pointDistance(t,e,n,r,o,s);return!isNaN(l)&&l<=a/2},polyline:function(t,e,n,i){var r=t.length-1;if(r<1)return!1;for(var a=0;a<r;a++){var o=t[a][0],s=t[a][1],u=t[a+1][0],l=t[a+1][1];if(this.line(o,s,u,l,e,n,i))return!0}return!1},cubicline:function(t,e,n,i,r,o,s,u,l,c,h){return a.pointDistance(t,e,n,i,r,o,s,u,c,h)<=l/2},quadraticline:function(t,e,n,i,a,o,s,u,l){return r.pointDistance(t,e,n,i,a,o,u,l)<=s/2},arcline:function(t,e,n,i,r,a,s,u,l){return o.pointDistance(t,e,n,i,r,a,u,l)<=s/2},rect:function(t,e,n,i,r,a){return t<=r&&r<=t+n&&e<=a&&a<=e+i},circle:function(t,e,n,i,r){return Math.pow(i-t,2)+Math.pow(r-e,2)<=Math.pow(n,2)},box:function(t,e,n,i,r,a){return t<=r&&r<=e&&n<=a&&a<=i}}},function(t,e,n){var i=n(139),r="\t\n\v\f\r   ᠎             　\u2028\u2029",a=new RegExp("([a-z])["+r+",]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?["+r+"]*,?["+r+"]*)+)","ig"),o=new RegExp("(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)["+r+"]*,?["+r+"]*","ig"),s=function(t){if(!t)return null;if(typeof t==typeof[])return t;var e={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},n=[];return String(t).replace(a,function(t,i,r){var a=[],s=i.toLowerCase();if(r.replace(o,function(t,e){e&&a.push(+e)}),"m"===s&&a.length>2&&(n.push([i].concat(a.splice(0,2))),s="l",i="m"===i?"l":"L"),"o"===s&&1===a.length&&n.push([i,a[0]]),"r"===s)n.push([i].concat(a));else for(;a.length>=e[s]&&(n.push([i].concat(a.splice(0,e[s]))),e[s]););}),n},u=function(t,e){for(var n=[],i=0,r=t.length;r-2*!e>i;i+=2){var a=[{x:+t[i-2],y:+t[i-1]},{x:+t[i],y:+t[i+1]},{x:+t[i+2],y:+t[i+3]},{x:+t[i+4],y:+t[i+5]}];e?i?r-4===i?a[3]={x:+t[0],y:+t[1]}:r-2===i&&(a[2]={x:+t[0],y:+t[1]},a[3]={x:+t[2],y:+t[3]}):a[0]={x:+t[r-2],y:+t[r-1]}:r-4===i?a[3]=a[2]:i||(a[0]={x:+t[i],y:+t[i+1]}),n.push(["C",(-a[0].x+6*a[1].x+a[2].x)/6,(-a[0].y+6*a[1].y+a[2].y)/6,(a[1].x+6*a[2].x-a[3].x)/6,(a[1].y+6*a[2].y-a[3].y)/6,a[2].x,a[2].y])}return n},l=function(t,e,n,i,r){var a=[];if(null===r&&null===i&&(i=n),t=+t,e=+e,n=+n,i=+i,null!==r){var o=Math.PI/180,s=t+n*Math.cos(-i*o),u=t+n*Math.cos(-r*o);a=[["M",s,e+n*Math.sin(-i*o)],["A",n,n,0,+(r-i>180),0,u,e+n*Math.sin(-r*o)]]}else a=[["M",t,e],["m",0,-i],["a",n,i,0,1,1,0,2*i],["a",n,i,0,1,1,0,-2*i],["z"]];return a},c=function(t){if(!(t=s(t))||!t.length)return[["M",0,0]];var e,n,i=[],r=0,a=0,o=0,c=0,h=0;"M"===t[0][0]&&(o=r=+t[0][1],c=a=+t[0][2],h++,i[0]=["M",r,a]);for(var f,p,g=3===t.length&&"M"===t[0][0]&&"R"===t[1][0].toUpperCase()&&"Z"===t[2][0].toUpperCase(),d=h,v=t.length;d<v;d++){if(i.push(f=[]),(e=(p=t[d])[0])!==e.toUpperCase())switch(f[0]=e.toUpperCase(),f[0]){case"A":f[1]=p[1],f[2]=p[2],f[3]=p[3],f[4]=p[4],f[5]=p[5],f[6]=+p[6]+r,f[7]=+p[7]+a;break;case"V":f[1]=+p[1]+a;break;case"H":f[1]=+p[1]+r;break;case"R":for(var y=2,m=(n=[r,a].concat(p.slice(1))).length;y<m;y++)n[y]=+n[y]+r,n[++y]=+n[y]+a;i.pop(),i=i.concat(u(n,g));break;case"O":i.pop(),(n=l(r,a,p[1],p[2])).push(n[0]),i=i.concat(n);break;case"U":i.pop(),i=i.concat(l(r,a,p[1],p[2],p[3])),f=["U"].concat(i[i.length-1].slice(-2));break;case"M":o=+p[1]+r,c=+p[2]+a;break;default:for(var x=1,b=p.length;x<b;x++)f[x]=+p[x]+(x%2?r:a)}else if("R"===e)n=[r,a].concat(p.slice(1)),i.pop(),i=i.concat(u(n,g)),f=["R"].concat(p.slice(-2));else if("O"===e)i.pop(),(n=l(r,a,p[1],p[2])).push(n[0]),i=i.concat(n);else if("U"===e)i.pop(),i=i.concat(l(r,a,p[1],p[2],p[3])),f=["U"].concat(i[i.length-1].slice(-2));else for(var _=0,w=p.length;_<w;_++)f[_]=p[_];if("O"!==(e=e.toUpperCase()))switch(f[0]){case"Z":r=+o,a=+c;break;case"H":r=f[1];break;case"V":a=f[1];break;case"M":o=f[f.length-2],c=f[f.length-1];break;default:r=f[f.length-2],a=f[f.length-1]}}return i},h=function(t,e,n,i){return[t,e,n,i,n,i]},f=function(t,e,n,i,r,a){return[1/3*t+2/3*n,1/3*e+2/3*i,1/3*r+2/3*n,1/3*a+2/3*i,r,a]},p=function(t,e){var n,i=c(t),r=e&&c(e),a={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},o={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},s=[],u=[],l="",p="",g=function(t,e,n){var i,r;if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(!(t[0]in{T:1,Q:1})&&(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"].concat(function t(e,n,i,r,a,o,s,u,l,c){i===r&&(i+=1);var h,f,p,g,d,v=120*Math.PI/180,y=Math.PI/180*(+a||0),m=[],x=function(t,e,n){return{x:t*Math.cos(n)-e*Math.sin(n),y:t*Math.sin(n)+e*Math.cos(n)}};if(c)f=c[0],p=c[1],g=c[2],d=c[3];else{e=(h=x(e,n,-y)).x,n=h.y,u=(h=x(u,l,-y)).x,l=h.y,e===u&&n===l&&(u+=1,l+=1);var b=(e-u)/2,_=(n-l)/2,w=b*b/(i*i)+_*_/(r*r);w>1&&(i*=w=Math.sqrt(w),r*=w);var M=i*i,S=r*r,C=(o===s?-1:1)*Math.sqrt(Math.abs((M*S-M*_*_-S*b*b)/(M*_*_+S*b*b)));g=C*i*_/r+(e+u)/2,d=C*-r*b/i+(n+l)/2,f=Math.asin(((n-d)/r).toFixed(9)),p=Math.asin(((l-d)/r).toFixed(9)),f=e<g?Math.PI-f:f,p=u<g?Math.PI-p:p,f<0&&(f=2*Math.PI+f),p<0&&(p=2*Math.PI+p),s&&f>p&&(f-=2*Math.PI),!s&&p>f&&(p-=2*Math.PI)}var k=p-f;if(Math.abs(k)>v){var A=p,P=u,I=l;p=f+v*(s&&p>f?1:-1),m=t(u=g+i*Math.cos(p),l=d+r*Math.sin(p),i,r,a,0,s,P,I,[p,A,g,d])}k=p-f;var T=Math.cos(f),O=Math.sin(f),E=Math.cos(p),L=Math.sin(p),D=Math.tan(k/4),F=4/3*i*D,B=4/3*r*D,R=[e,n],j=[e+F*O,n-B*T],N=[u+F*L,l-B*E],z=[u,l];if(j[0]=2*R[0]-j[0],j[1]=2*R[1]-j[1],c)return[j,N,z].concat(m);for(var G=[],V=0,Y=(m=[j,N,z].concat(m).join().split(",")).length;V<Y;V++)G[V]=V%2?x(m[V-1],m[V],y).y:x(m[V],m[V+1],y).x;return G}.apply(0,[e.x,e.y].concat(t.slice(1))));break;case"S":"C"===n||"S"===n?(i=2*e.x-e.bx,r=2*e.y-e.by):(i=e.x,r=e.y),t=["C",i,r].concat(t.slice(1));break;case"T":"Q"===n||"T"===n?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"].concat(f(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"].concat(f(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"].concat(h(e.x,e.y,t[1],t[2]));break;case"H":t=["C"].concat(h(e.x,e.y,t[1],e.y));break;case"V":t=["C"].concat(h(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"].concat(h(e.x,e.y,e.X,e.Y))}return t},d=function(t,e){if(t[e].length>7){t[e].shift();for(var a=t[e];a.length;)s[e]="A",r&&(u[e]="A"),t.splice(e++,0,["C"].concat(a.splice(0,6)));t.splice(e,1),n=Math.max(i.length,r&&r.length||0)}},v=function(t,e,a,o,s){t&&e&&"M"===t[s][0]&&"M"!==e[s][0]&&(e.splice(s,0,["M",o.x,o.y]),a.bx=0,a.by=0,a.x=t[s][1],a.y=t[s][2],n=Math.max(i.length,r&&r.length||0))};n=Math.max(i.length,r&&r.length||0);for(var y=0;y<n;y++){i[y]&&(l=i[y][0]),"C"!==l&&(s[y]=l,y&&(p=s[y-1])),i[y]=g(i[y],a,p),"A"!==s[y]&&"C"===l&&(s[y]="C"),d(i,y),r&&(r[y]&&(l=r[y][0]),"C"!==l&&(u[y]=l,y&&(p=u[y-1])),r[y]=g(r[y],o,p),"A"!==u[y]&&"C"===l&&(u[y]="C"),d(r,y)),v(i,r,a,o,y),v(r,i,o,a,y);var m=i[y],x=r&&r[y],b=m.length,_=r&&x.length;a.x=m[b-2],a.y=m[b-1],a.bx=parseFloat(m[b-4])||a.x,a.by=parseFloat(m[b-3])||a.y,o.bx=r&&(parseFloat(x[_-4])||o.x),o.by=r&&(parseFloat(x[_-3])||o.y),o.x=r&&x[_-2],o.y=r&&x[_-1]}return r?[i,r]:i},g=/,?([a-z]),?/gi,d=function(t){return t.join(",").replace(g,"$1")},v=function(t,e,n,i,r){return t*(t*(-3*e+9*n-9*i+3*r)+6*e-12*n+6*i)-3*e+3*n},y=function(t,e,n,i,r,a,o,s,u){null===u&&(u=1);for(var l=(u=u>1?1:u<0?0:u)/2,c=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],h=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],f=0,p=0;p<12;p++){var g=l*c[p]+l,d=v(g,t,n,r,o),y=v(g,e,i,a,s),m=d*d+y*y;f+=h[p]*Math.sqrt(m)}return l*f},m=function(t,e,n,i,r,a,o,s){if(!(Math.max(t,n)<Math.min(r,o)||Math.min(t,n)>Math.max(r,o)||Math.max(e,i)<Math.min(a,s)||Math.min(e,i)>Math.max(a,s))){var u=(t-n)*(a-s)-(e-i)*(r-o);if(u){var l=((t*i-e*n)*(r-o)-(t-n)*(r*s-a*o))/u,c=((t*i-e*n)*(a-s)-(e-i)*(r*s-a*o))/u,h=+l.toFixed(2),f=+c.toFixed(2);if(!(h<+Math.min(t,n).toFixed(2)||h>+Math.max(t,n).toFixed(2)||h<+Math.min(r,o).toFixed(2)||h>+Math.max(r,o).toFixed(2)||f<+Math.min(e,i).toFixed(2)||f>+Math.max(e,i).toFixed(2)||f<+Math.min(a,s).toFixed(2)||f>+Math.max(a,s).toFixed(2)))return{x:l,y:c}}}},x=function(t,e,n){return e>=t.x&&e<=t.x+t.width&&n>=t.y&&n<=t.y+t.height},b=function(t,e,n,i,r){if(r)return[["M",+t+ +r,e],["l",n-2*r,0],["a",r,r,0,0,1,r,r],["l",0,i-2*r],["a",r,r,0,0,1,-r,r],["l",2*r-n,0],["a",r,r,0,0,1,-r,-r],["l",0,2*r-i],["a",r,r,0,0,1,r,-r],["z"]];var a=[["M",t,e],["l",n,0],["l",0,i],["l",-n,0],["z"]];return a.parsePathArray=d,a},_=function(t,e,n,i){return null===t&&(t=e=n=i=0),null===e&&(e=t.y,n=t.width,i=t.height,t=t.x),{x:t,y:e,width:n,w:n,height:i,h:i,x2:t+n,y2:e+i,cx:t+n/2,cy:e+i/2,r1:Math.min(n,i)/2,r2:Math.max(n,i)/2,r0:Math.sqrt(n*n+i*i)/2,path:b(t,e,n,i),vb:[t,e,n,i].join(" ")}},w=function(t,e,n,r,a,o,s,u){i.isArray(t)||(t=[t,e,n,r,a,o,s,u]);var l=function(t,e,n,i,r,a,o,s){for(var u,l,c,h,f=[],p=[[],[]],g=0;g<2;++g)if(0===g?(l=6*t-12*n+6*r,u=-3*t+9*n-9*r+3*o,c=3*n-3*t):(l=6*e-12*i+6*a,u=-3*e+9*i-9*a+3*s,c=3*i-3*e),Math.abs(u)<1e-12){if(Math.abs(l)<1e-12)continue;(h=-c/l)>0&&h<1&&f.push(h)}else{var d=l*l-4*c*u,v=Math.sqrt(d);if(!(d<0)){var y=(-l+v)/(2*u);y>0&&y<1&&f.push(y);var m=(-l-v)/(2*u);m>0&&m<1&&f.push(m)}}for(var x,b=f.length,_=b;b--;)x=1-(h=f[b]),p[0][b]=x*x*x*t+3*x*x*h*n+3*x*h*h*r+h*h*h*o,p[1][b]=x*x*x*e+3*x*x*h*i+3*x*h*h*a+h*h*h*s;return p[0][_]=t,p[1][_]=e,p[0][_+1]=o,p[1][_+1]=s,p[0].length=p[1].length=_+2,{min:{x:Math.min.apply(0,p[0]),y:Math.min.apply(0,p[1])},max:{x:Math.max.apply(0,p[0]),y:Math.max.apply(0,p[1])}}}.apply(null,t);return _(l.min.x,l.min.y,l.max.x-l.min.x,l.max.y-l.min.y)},M=function(t,e,n,i,r,a,o,s,u){var l=1-u,c=Math.pow(l,3),h=Math.pow(l,2),f=u*u,p=f*u,g=t+2*u*(n-t)+f*(r-2*n+t),d=e+2*u*(i-e)+f*(a-2*i+e),v=n+2*u*(r-n)+f*(o-2*r+n),y=i+2*u*(a-i)+f*(s-2*a+i);return{x:c*t+3*h*u*n+3*l*u*u*r+p*o,y:c*e+3*h*u*i+3*l*u*u*a+p*s,m:{x:g,y:d},n:{x:v,y:y},start:{x:l*t+u*n,y:l*e+u*i},end:{x:l*r+u*o,y:l*a+u*s},alpha:90-180*Math.atan2(g-v,d-y)/Math.PI}},S=function(t,e,n){if(!function(t,e){return t=_(t),e=_(e),x(e,t.x,t.y)||x(e,t.x2,t.y)||x(e,t.x,t.y2)||x(e,t.x2,t.y2)||x(t,e.x,e.y)||x(t,e.x2,e.y)||x(t,e.x,e.y2)||x(t,e.x2,e.y2)||(t.x<e.x2&&t.x>e.x||e.x<t.x2&&e.x>t.x)&&(t.y<e.y2&&t.y>e.y||e.y<t.y2&&e.y>t.y)}(w(t),w(e)))return n?0:[];for(var i=~~(y.apply(0,t)/8),r=~~(y.apply(0,e)/8),a=[],o=[],s={},u=n?0:[],l=0;l<i+1;l++){var c=M.apply(0,t.concat(l/i));a.push({x:c.x,y:c.y,t:l/i})}for(var h=0;h<r+1;h++){var f=M.apply(0,e.concat(h/r));o.push({x:f.x,y:f.y,t:h/r})}for(var p=0;p<i;p++)for(var g=0;g<r;g++){var d=a[p],v=a[p+1],b=o[g],S=o[g+1],C=Math.abs(v.x-d.x)<.001?"y":"x",k=Math.abs(S.x-b.x)<.001?"y":"x",A=m(d.x,d.y,v.x,v.y,b.x,b.y,S.x,S.y);if(A){if(s[A.x.toFixed(4)]===A.y.toFixed(4))continue;s[A.x.toFixed(4)]=A.y.toFixed(4);var P=d.t+Math.abs((A[C]-d[C])/(v[C]-d[C]))*(v.t-d.t),I=b.t+Math.abs((A[k]-b[k])/(S[k]-b[k]))*(S.t-b.t);P>=0&&P<=1&&I>=0&&I<=1&&(n?u++:u.push({x:A.x,y:A.y,t1:P,t2:I}))}}return u};function C(t,e){var n=[],i=[];return t.length&&function t(e,r){if(1===e.length)n.push(e[0]),i.push(e[0]);else{for(var a=[],o=0;o<e.length-1;o++)0===o&&n.push(e[0]),o===e.length-2&&i.push(e[o+1]),a[o]=[(1-r)*e[o][0]+r*e[o+1][0],(1-r)*e[o][1]+r*e[o+1][1]];t(a,r)}}(t,e),{left:n,right:i.reverse()}}var k=function(t,e,n){if(1===n)return[[].concat(t)];var i=[];if("L"===e[0]||"C"===e[0]||"Q"===e[0])i=i.concat(function(t,e,n){var i=[[t[1],t[2]]];n=n||2;var r=[];"A"===e[0]?(i.push(e[6]),i.push(e[7])):"C"===e[0]?(i.push([e[1],e[2]]),i.push([e[3],e[4]]),i.push([e[5],e[6]])):"S"===e[0]||"Q"===e[0]?(i.push([e[1],e[2]]),i.push([e[3],e[4]])):i.push([e[1],e[2]]);for(var a=i,o=1/n,s=0;s<n-1;s++){var u=C(a,o/(1-o*s));r.push(u.left),a=u.right}return r.push(a),r.map(function(t){var e=[];return 4===t.length&&(e.push("C"),e=e.concat(t[2])),t.length>=3&&(3===t.length&&e.push("Q"),e=e.concat(t[1])),2===t.length&&e.push("L"),e=e.concat(t[t.length-1])})}(t,e,n));else{var r=[].concat(t);"M"===r[0]&&(r[0]="L");for(var a=0;a<=n-1;a++)i.push(r)}return i},A=function(t,e){if(t.length!==e.length)return!1;var n=!0;return i.each(t,function(t,i){if(t!==e[i])return n=!1,!1}),n};function P(t,e,n){var i=null,r=n;return e<r&&(r=e,i="add"),t<r&&(r=t,i="del"),{type:i,min:r}}function I(t,e,n){for(var i,r=[].concat(t),a=1/(n+1),o=T(e)[0],s=1;s<=n;s++)a*=s,0===(i=Math.floor(t.length*a))?r.unshift([o[0]*a+t[i][0]*(1-a),o[1]*a+t[i][1]*(1-a)]):r.splice(i,0,[o[0]*a+t[i][0]*(1-a),o[1]*a+t[i][1]*(1-a)]);return r}function T(t){var e=[];switch(t[0]){case"M":case"L":e.push([t[1],t[2]]);break;case"A":e.push([t[6],t[7]]);break;case"Q":e.push([t[3],t[4]]),e.push([t[1],t[2]]);break;case"T":e.push([t[1],t[2]]);break;case"C":e.push([t[5],t[6]]),e.push([t[1],t[2]]),e.push([t[3],t[4]]);break;case"S":e.push([t[3],t[4]]),e.push([t[1],t[2]]);break;case"H":case"V":e.push([t[1],t[1]])}return e}t.exports={parsePathString:s,parsePathArray:d,pathTocurve:p,pathToAbsolute:c,catmullRomToBezier:u,rectPath:b,fillPath:function(t,e){if(1===t.length)return t;var n=t.length-1,i=e.length-1,r=n/i,a=[];if(1===t.length&&"M"===t[0][0]){for(var o=0;o<i-n;o++)t.push(t[0]);return t}for(var s=0;s<i;s++){var u=Math.floor(r*s);a[u]=(a[u]||0)+1}var l=a.reduce(function(e,i,r){return r===n?e.concat(t[n]):e.concat(k(t[r],t[r+1],i))},[]);return l.unshift(t[0]),"Z"!==e[i]&&"z"!==e[i]||l.push("Z"),l},fillPathByDiff:function(t,e){var n=function(t,e){var n,i,r=t.length,a=e.length,o=0;if(0===r||0===a)return null;for(var s=[],u=0;u<=r;u++)s[u]=[],s[u][0]={min:u};for(var l=0;l<=a;l++)s[0][l]={min:l};for(var c=1;c<=r;c++){n=t[c-1];for(var h=1;h<=a;h++){i=e[h-1],o=A(n,i)?0:1;var f=s[c-1][h].min+1,p=s[c][h-1].min+1,g=s[c-1][h-1].min+o;s[c][h]=P(f,p,g)}}return s}(t,e),i=t.length,r=e.length,a=[],o=1,s=1;if(n[i][r]!==i){for(var u=1;u<=i;u++){var l=n[u][u].min;s=u;for(var c=o;c<=r;c++)n[u][c].min<l&&(l=n[u][c].min,s=c);o=s,n[u][o].type&&a.push({index:u-1,type:n[u][o].type})}for(var h=a.length-1;h>=0;h--)o=a[h].index,"add"===a[h].type?t.splice(o,0,[].concat(t[o])):t.splice(o,1)}var f=r-(i=t.length);if(i<r)for(var p=0;p<f;p++)"z"===t[i-1][0]||"Z"===t[i-1][0]?t.splice(i-2,0,t[i-2]):t.push(t[i-1]),i+=1;return t},formatPath:function(t,e){if(t.length<=1)return t;for(var n,i=0;i<e.length;i++)if(t[i][0]!==e[i][0])switch(n=T(t[i]),e[i][0]){case"M":t[i]=["M"].concat(n[0]);break;case"L":t[i]=["L"].concat(n[0]);break;case"A":t[i]=[].concat(e[i]),t[i][6]=n[0][0],t[i][7]=n[0][1];break;case"Q":if(n.length<2){if(!(i>0)){t[i]=e[i];break}n=I(n,t[i-1],1)}t[i]=["Q"].concat(n.reduce(function(t,e){return t.concat(e)},[]));break;case"T":t[i]=["T"].concat(n[0]);break;case"C":if(n.length<3){if(!(i>0)){t[i]=e[i];break}n=I(n,t[i-1],2)}t[i]=["C"].concat(n.reduce(function(t,e){return t.concat(e)},[]));break;case"S":if(n.length<2){if(!(i>0)){t[i]=e[i];break}n=I(n,t[i-1],1)}t[i]=["S"].concat(n.reduce(function(t,e){return t.concat(e)},[]));break;default:t[i]=e[i]}return t},intersection:function(t,e){return function(t,e,n){var i,r,a,o,s,u,l,c,h,f;t=p(t),e=p(e);for(var g=n?0:[],d=0,v=t.length;d<v;d++){var y=t[d];if("M"===y[0])i=s=y[1],r=u=y[2];else{"C"===y[0]?(i=(h=[i,r].concat(y.slice(1)))[6],r=h[7]):(h=[i,r,i,r,s,u,s,u],i=s,r=u);for(var m=0,x=e.length;m<x;m++){var b=e[m];if("M"===b[0])a=l=b[1],o=c=b[2];else{"C"===b[0]?(a=(f=[a,o].concat(b.slice(1)))[6],o=f[7]):(f=[a,o,a,o,l,c,l,c],a=l,o=c);var _=S(h,f,n);if(n)g+=_;else{for(var w=0,M=_.length;w<M;w++)_[w].segment1=d,_[w].segment2=m,_[w].bez1=h,_[w].bez2=f;g=g.concat(_)}}}}}return g}(t,e)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setMatrixArrayType=function(t){e.ARRAY_TYPE=t},e.toRadian=function(t){return t*r},e.equals=function(t,e){return Math.abs(t-e)<=i*Math.max(1,Math.abs(t),Math.abs(e))};var i=e.EPSILON=1e-6;e.ARRAY_TYPE="undefined"!=typeof Float32Array?Float32Array:Array,e.RANDOM=Math.random;var r=Math.PI/180},function(t,e,n){var i=n(7),r=n(4),a=n(2);t.exports=function(t,e){for(var n=[],o={},s=0;s<t.length;s++){var u=t[s][e];i(u)||(r(u)||(u=[u]),a(u,function(t){o[t]||(n.push(t),o[t]=!0)}))}return n}},function(t,e,n){var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r=n(4);t.exports=function t(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return e;var n=void 0;if(r(e)){n=[];for(var a=0,o=e.length;a<o;a++)"object"===i(e[a])&&null!=e[a]?n[a]=t(e[a]):n[a]=e[a]}else for(var s in n={},e)"object"===i(e[s])&&null!=e[s]?n[s]=t(e[s]):n[s]=e[s];return n}},function(t,e,n){var i=n(37),r=n(4),a=5;function o(t,e,n,s){for(var u in n=n||0,s=s||a,e)if(e.hasOwnProperty(u)){var l=e[u];null!==l&&i(l)?(i(t[u])||(t[u]={}),n<s?o(t[u],l,n+1,s):t[u]=e[u]):r(l)?(t[u]=[],t[u]=t[u].concat(l)):void 0!==l&&(t[u]=l)}}t.exports=function(){for(var t=new Array(arguments.length),e=t.length,n=0;n<e;n++)t[n]=arguments[n];for(var i=t[0],r=1;r<e;r++)o(i,t[r]);return i}},function(t,e,n){var i=n(2),r=n(19);t.exports=function(t,e){if(!r(t))return t;var n=[];return i(t,function(t,i){e(t,i)&&n.push(t)}),n}},function(t,e,n){var i=n(79),r=n(19),a=n(14);t.exports=function t(e,n){if(e===n)return!0;if(!e||!n)return!1;if(a(e)||a(n))return!1;if(r(e)||r(n)){if(e.length!==n.length)return!1;for(var o=!0,s=0;s<e.length&&(o=t(e[s],n[s]));s++);return o}if(i(e)||i(n)){var u=Object.keys(e),l=Object.keys(n);if(u.length!==l.length)return!1;for(var c=!0,h=0;h<u.length&&(c=t(e[u[h]],n[u[h]]));h++);return c}return!1}},function(t,e){t.exports=function(t,e,n){return t<e?e:t>n?n:t}},function(t,e,n){var i=n(328);i.translate=function(t,e,n){var r=new Array(9);return i.fromTranslation(r,n),i.multiply(t,r,e)},i.rotate=function(t,e,n){var r=new Array(9);return i.fromRotation(r,n),i.multiply(t,r,e)},i.scale=function(t,e,n){var r=new Array(9);return i.fromScaling(r,n),i.multiply(t,r,e)},t.exports=i},function(t,e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t){return"object"===(void 0===t?"undefined":n(t))&&null!==t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i={Chart:"deleteChart",Coord:"deleteCoord",Geom:"deleteGeom",Axis:"deleteAxis",Tooltip:"deleteTooltip",Legend:"deleteLegend",Label:"deleteLabel",View:"deleteView",Guide:"deleteGuide",GuideLine:"deleteTypedGuide",GuideImage:"deleteTypedGuide",GuideText:"deleteTypedGuide",GuideRegion:"deleteTypedGuide",GuideHtml:"deleteTypedGuide",GuideArc:"deleteTypedGuide",GuideRegionFilter:"deleteTypedGuide",GuideDataMarker:"deleteTypedGuide",GuideDataRegion:"deleteTypedGuide",Facet:"deleteFacet"},r={merge:function(t,e,n,i){this.mergeDelete(t,e,n),this.mergeUpdate(t,i)},mergeDelete:function(t,e,n){var r=this;Object.keys(e).forEach(function(e){var a=i[n[e].name],o=t;n[e].viewId&&(o=t.views[n[e].viewId]),r[a]&&r[a](o,e,n[e].parentInfo.id)})},deleteAxis:function(t,e){t&&delete t.axises[e]},deleteTooltip:function(t){t&&delete t.tooltip},deleteCoord:function(t){t&&delete t.coord},deleteLegend:function(t,e){t&&delete t.legends[e]},deleteGuide:function(t){t&&delete t.guide},deleteGeom:function(t,e){t&&t.geoms&&delete t.geoms[e]},deleteLabel:function(t,e,n){t&&t.geoms&&t.geoms[n]&&delete t.geoms[n].label},deleteFacet:function(t){t&&delete t.facet},deleteTypedGuide:function(t,e){t&&t.guide&&delete t.guide.elements[e]},deleteView:function(t,e){t&&delete t.views[e]},mergeUpdate:function(t,e){this.mergeChart(t,e),this.mergeAxises(t,e),this.mergeCoord(t,e),this.mergeGeoms(t.geoms,e),this.mergeLegends(t.legends,e),this.mergeTooltip(t,e),this.mergeViews(t.views,e),this.mergeGuide(t.guide,e)},mergeChart:function(t,e){t.chart&&t.chart.updateProps&&(t.chart.props=t.chart.updateProps),e&&delete t.chart.g2Instance},mergeAxises:function(t,e){var n=t.axises;if(null!=!n)for(var i in n)n[i]&&n[i].updateProps&&(n[i].props=n[i].updateProps),e&&delete n[i].g2Instance},mergeTooltip:function(t,e){t.tooltip&&(e&&delete t.tooltip.g2Instance,t.tooltip.updateProps&&(t.tooltip.props=t.tooltip.updateProps))},mergeCoord:function(t,e){t.coord&&(e&&delete t.coord.g2Instance,t.coord.updateProps&&(t.coord.props=t.coord.updateProps))},mergeLegends:function(t,e){if(t)for(var n in t)if(t[n]){var i=t[n];e&&delete i.g2Instance,i.updateProps&&(i.props=i.updateProps)}},mergeGeoms:function(t,e){if(null!=t)for(var n in t)t[n]&&(e&&(delete t[n].g2Instance,t[n].label&&t[n].label.g2Instance&&(t[n].label.updateProps&&(t[n].label.props=t[n].label.updateProps),delete t[n].label.g2Instance)),t[n].updateProps&&(t[n].props=t[n].updateProps))},mergeGuide:function(t,e){if(null!=t){var n=t.elements;for(var i in n)n[i]&&(e&&delete n[i].g2Instance,n[i].updateProps&&(n[i].props=n[i].updateProps))}},mergeView:function(t,e){t&&(e&&t.g2Instance&&delete t.g2Instance,t.updateProps&&(t.props=t.updateProps),this.mergeCoord(t,e),this.mergeAxises(t,e),this.mergeGeoms(t.geoms,e),this.mergeGuide(t.guide,e))},mergeViews:function(t,e){if(null!=t)for(var n in t)t[n]&&this.mergeView(t[n],e)}};e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Prop=e.Util=void 0;var i=a(n(38)),r=a(n(418));function a(t){return t&&t.__esModule?t:{default:t}}e.Util=i.default,e.Prop=r.default},function(t,e,n){"use strict";e.c=r,n.d(e,"e",function(){return a}),n.d(e,"d",function(){return o}),e.h=x,e.b=w,e.g=M,e.a=S,e.f=A;var i=n(83);function r(){}var a=.7,o=1/a,s="\\s*([+-]?\\d+)\\s*",u="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",l="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",c=/^#([0-9a-f]{3})$/,h=/^#([0-9a-f]{6})$/,f=new RegExp("^rgb\\("+[s,s,s]+"\\)$"),p=new RegExp("^rgb\\("+[l,l,l]+"\\)$"),g=new RegExp("^rgba\\("+[s,s,s,u]+"\\)$"),d=new RegExp("^rgba\\("+[l,l,l,u]+"\\)$"),v=new RegExp("^hsl\\("+[u,l,l]+"\\)$"),y=new RegExp("^hsla\\("+[u,l,l,u]+"\\)$"),m={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function x(t){var e;return t=(t+"").trim().toLowerCase(),(e=c.exec(t))?new S((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=h.exec(t))?b(parseInt(e[1],16)):(e=f.exec(t))?new S(e[1],e[2],e[3],1):(e=p.exec(t))?new S(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=g.exec(t))?_(e[1],e[2],e[3],e[4]):(e=d.exec(t))?_(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=v.exec(t))?k(e[1],e[2]/100,e[3]/100,1):(e=y.exec(t))?k(e[1],e[2]/100,e[3]/100,e[4]):m.hasOwnProperty(t)?b(m[t]):"transparent"===t?new S(NaN,NaN,NaN,0):null}function b(t){return new S(t>>16&255,t>>8&255,255&t,1)}function _(t,e,n,i){return i<=0&&(t=e=n=NaN),new S(t,e,n,i)}function w(t){return t instanceof r||(t=x(t)),t?new S((t=t.rgb()).r,t.g,t.b,t.opacity):new S}function M(t,e,n,i){return 1===arguments.length?w(t):new S(t,e,n,null==i?1:i)}function S(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function C(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function k(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new P(t,e,n,i)}function A(t,e,n,i){return 1===arguments.length?function(t){if(t instanceof P)return new P(t.h,t.s,t.l,t.opacity);if(t instanceof r||(t=x(t)),!t)return new P;if(t instanceof P)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,a=Math.min(e,n,i),o=Math.max(e,n,i),s=NaN,u=o-a,l=(o+a)/2;return u?(s=e===o?(n-i)/u+6*(n<i):n===o?(i-e)/u+2:(e-n)/u+4,u/=l<.5?o+a:2-o-a,s*=60):u=l>0&&l<1?0:s,new P(s,u,l,t.opacity)}(t):new P(t,e,n,null==i?1:i)}function P(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function I(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}n.i(i.a)(r,x,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),n.i(i.a)(S,M,n.i(i.b)(r,{brighter:function(t){return t=null==t?o:Math.pow(o,t),new S(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?a:Math.pow(a,t),new S(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+C(this.r)+C(this.g)+C(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),n.i(i.a)(P,A,n.i(i.b)(r,{brighter:function(t){return t=null==t?o:Math.pow(o,t),new P(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?a:Math.pow(a,t),new P(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new S(I(t>=240?t-240:t+120,r,i),I(t,r,i),I(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}))},function(t,e,n){"use strict";e.b=function(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n},e.a=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t}},function(t,e,n){"use strict";function i(t,e,n,i,r){var a=t*t,o=a*t;return((1-3*t+3*a-o)*e+(4-6*a+3*o)*n+(1+3*t+3*a-3*o)*i+o*r)/6}e.b=i,e.a=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],o=t[r+1],s=r>0?t[r-1]:2*a-o,u=r<e-1?t[r+2]:2*o-a;return i((n-r/e)*e,s,a,o,u)}}},function(t,e,n){"use strict";var i=n(12),r=n(195),a=n(190),o=n(193),s=n(53),u=n(194),l=n(196),c=n(192);e.a=function(t,e){var h,f=typeof e;return null==e||"boolean"===f?n.i(c.a)(e):("number"===f?s.a:"string"===f?(h=n.i(i.f)(e))?(e=h,r.a):l.a:e instanceof i.f?r.a:e instanceof Date?o.a:Array.isArray(e)?a.a:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?u.a:s.a)(t,e)}},function(t,e,n){"use strict";function i(t,e,n,i,r){var a=t*t,o=a*t;return((1-3*t+3*a-o)*e+(4-6*a+3*o)*n+(1+3*t+3*a-3*o)*i+o*r)/6}e.b=i,e.a=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],o=t[r+1],s=r>0?t[r-1]:2*a-o,u=r<e-1?t[r+2]:2*o-a;return i((n-r/e)*e,s,a,o,u)}}},function(t,e,n){"use strict";n(88),n(197),n(86),n(198),n(200),n(446),n(449);var i=n(54);n.d(e,"b",function(){return i.a});n(201),n(453);var r=n(203);n.d(e,"d",function(){return r.a});var a=n(455);n.d(e,"a",function(){return a.a}),n.d(e,"e",function(){return a.b});n(457);var o=n(202);n.d(e,"c",function(){return o.a});n(448),n(450),n(447),n(445),n(451),n(452)},function(t,e,n){"use strict";var i=n(12),r=n(202),a=n(197),o=n(200),s=n(54),u=n(201),l=n(203),c=n(199);e.a=function(t,e){var h,f=typeof e;return null==e||"boolean"===f?n.i(c.a)(e):("number"===f?s.a:"string"===f?(h=n.i(i.f)(e))?(e=h,r.a):l.a:e instanceof i.f?r.a:e instanceof Date?o.a:Array.isArray(e)?a.a:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?u.a:s.a)(t,e)}},function(t,e,n){"use strict";var i=n(90);e.a=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),i.a.hasOwnProperty(e)?{space:i.a[e],local:t}:t}},function(t,e,n){"use strict";n.d(e,"b",function(){return i});var i="http://www.w3.org/1999/xhtml";e.a={svg:"http://www.w3.org/2000/svg",xhtml:i,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"}},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),e.b=function(t,e,n,i){var a=r;t.sourceEvent=r,r=t;try{return e.apply(n,i)}finally{r=a}};var i={},r=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(i={mouseenter:"mouseover",mouseleave:"mouseout"}));function a(t,e,n){return t=o(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function o(t,e,n){return function(i){var a=r;r=i;try{t.call(this,this.__data__,e,n)}finally{r=a}}}function s(t){return function(){var e=this.__on;if(e){for(var n,i=0,r=-1,a=e.length;i<a;++i)n=e[i],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function u(t,e,n){var r=i.hasOwnProperty(t.type)?a:o;return function(i,a,o){var s,u=this.__on,l=r(e,a,o);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=n),void(s.value=e);this.addEventListener(t.type,l,n),s={type:t.type,name:t.name,value:e,listener:l,capture:n},u?u.push(s):this.__on=[s]}}e.c=function(t,e,n){var i,r,a=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=a.length;if(!(arguments.length<2)){for(l=e?u:s,null==n&&(n=!1),i=0;i<o;++i)this.each(l(a[i],e,n));return this}var l=this.node().__on;if(l)for(var c,h=0,f=l.length;h<f;++h)for(i=0,c=l[h];i<o;++i)if((r=a[i]).type===c.type&&r.name===c.name)return c.value}},function(t,e,n){"use strict";function i(){}e.a=function(t){return null==t?i:function(){return this.querySelector(t)}}},function(t,e,n){"use strict";var i=n(91);e.a=function(){for(var t,e=i.a;t=e.sourceEvent;)e=t;return e}},function(t,e,n){"use strict";e.a=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(96);n.d(e,"now",function(){return i.a}),n.d(e,"timer",function(){return i.b}),n.d(e,"timerFlush",function(){return i.c});var r=n(493);n.d(e,"timeout",function(){return r.a});var a=n(492);n.d(e,"interval",function(){return a.a})},function(t,e,n){"use strict";e.a=g,e.d=v,e.b=y,e.c=m;var i,r,a=0,o=0,s=0,u=1e3,l=0,c=0,h=0,f="object"==typeof performance&&performance.now?performance:Date,p="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function g(){return c||(p(d),c=f.now()+h)}function d(){c=0}function v(){this._call=this._time=this._next=null}function y(t,e,n){var i=new v;return i.restart(t,e,n),i}function m(){g(),++a;for(var t,e=i;e;)(t=c-e._time)>=0&&e._call.call(null,t),e=e._next;--a}function x(){c=(l=f.now())+h,a=o=0;try{m()}finally{a=0,function(){var t,e,n=i,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:i=e);r=t,_(a)}(),c=0}}function b(){var t=f.now(),e=t-l;e>u&&(h-=e,l=t)}function _(t){a||(o&&(o=clearTimeout(o)),t-c>24?(t<1/0&&(o=setTimeout(x,t-f.now()-h)),s&&(s=clearInterval(s))):(s||(l=f.now(),s=setInterval(b,u)),a=1,p(x)))}v.prototype=y.prototype={constructor:v,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?g():+n)+(null==e?0:+e),this._next||r===this||(r?r._next=this:i=this,r=this),this._call=t,this._time=n,_()},stop:function(){this._call&&(this._call=null,this._time=1/0,_())}}},function(t,e,n){var i;
/*!
 * EventEmitter v5.1.0 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */!function(e){"use strict";function r(){}var a=r.prototype,o=e.EventEmitter;function s(t,e){for(var n=t.length;n--;)if(t[n].listener===e)return n;return-1}function u(t){return function(){return this[t].apply(this,arguments)}}a.getListeners=function(t){var e,n,i=this._getEvents();if(t instanceof RegExp)for(n in e={},i)i.hasOwnProperty(n)&&t.test(n)&&(e[n]=i[n]);else e=i[t]||(i[t]=[]);return e},a.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},a.getListenersAsObject=function(t){var e,n=this.getListeners(t);return n instanceof Array&&((e={})[t]=n),e||n},a.addListener=function(t,e){if(!function t(e){return"function"==typeof e||e instanceof RegExp||!(!e||"object"!=typeof e)&&t(e.listener)}(e))throw new TypeError("listener must be a function");var n,i=this.getListenersAsObject(t),r="object"==typeof e;for(n in i)i.hasOwnProperty(n)&&-1===s(i[n],e)&&i[n].push(r?e:{listener:e,once:!1});return this},a.on=u("addListener"),a.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},a.once=u("addOnceListener"),a.defineEvent=function(t){return this.getListeners(t),this},a.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},a.removeListener=function(t,e){var n,i,r=this.getListenersAsObject(t);for(i in r)r.hasOwnProperty(i)&&-1!==(n=s(r[i],e))&&r[i].splice(n,1);return this},a.off=u("removeListener"),a.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},a.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},a.manipulateListeners=function(t,e,n){var i,r,a=t?this.removeListener:this.addListener,o=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(i=n.length;i--;)a.call(this,e,n[i]);else for(i in e)e.hasOwnProperty(i)&&(r=e[i])&&("function"==typeof r?a.call(this,i,r):o.call(this,i,r));return this},a.removeEvent=function(t){var e,n=typeof t,i=this._getEvents();if("string"===n)delete i[t];else if(t instanceof RegExp)for(e in i)i.hasOwnProperty(e)&&t.test(e)&&delete i[e];else delete this._events;return this},a.removeAllListeners=u("removeEvent"),a.emitEvent=function(t,e){var n,i,r,a,o=this.getListenersAsObject(t);for(a in o)if(o.hasOwnProperty(a))for(n=o[a].slice(0),r=0;r<n.length;r++)!0===(i=n[r]).once&&this.removeListener(t,i.listener),i.listener.apply(this,e||[])===this._getOnceReturnValue()&&this.removeListener(t,i.listener);return this},a.trigger=u("emitEvent"),a.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},a.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},a._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},a._getEvents=function(){return this._events||(this._events={})},r.noConflict=function(){return e.EventEmitter=o,r},void 0===(i=function(){return r}.call(e,n,e,t))||(t.exports=i)}(this||{})},function(t,e,n){var i=n(2),r={values:n(72)};t.exports={isAdjust:function(t){return this.adjustNames.indexOf(t)>=0},_getDimValues:function(t){var e={},n=[];if(this.xField&&this.isAdjust("x")&&n.push(this.xField),this.yField&&this.isAdjust("y")&&n.push(this.yField),i(n,function(n){var i=r.values(t,n);i.sort(function(t,e){return t-e}),e[n]=i}),!this.yField&&this.isAdjust("y")){var a=[0,1];e.y=a}return e},adjustData:function(t,e){var n=this,r=n._getDimValues(e);i(t,function(e,a){i(r,function(i,r){n.adjustDim(r,i,e,t.length,a)})})},getAdjustRange:function(t,e,n){var i,r,a=n.indexOf(e),o=n.length;return!this.yField&&this.isAdjust("y")?(i=0,r=1):o>1?(i=0===a?n[0]:n[a-1],r=a===o-1?n[o-1]:n[a+1],0!==a?i+=(e-i)/2:i-=(r-e)/2,a!==o-1?r-=(r-e)/2:r+=(e-n[o-2])/2):(i=0===e?0:e-.5,r=0===e?1:e+.5),{pre:i,next:r}},groupData:function(t,e){var n={};return i(t,function(t){var i=t[e];void 0===i&&(i=t[e]=0),n[i]||(n[i]=[]),n[i].push(t)}),n}}},function(t,e,n){var i=n(11),r=n(14),a=n(2),o=/rgba?\(([\s.,0-9]+)\)/;function s(t,e,n,i){return t[i]+(e[i]-t[i])*n}function u(t){return"#"+l(t[0])+l(t[1])+l(t[2])}function l(t){return 1===(t=(t=Math.round(t)).toString(16)).length&&(t="0"+t),t}function c(t){var e=[];return e.push(parseInt(t.substr(1,2),16)),e.push(parseInt(t.substr(3,2),16)),e.push(parseInt(t.substr(5,2),16)),e}var h={},f=null,p={toRGB:function(t){if("#"===t[0]&&7===t.length)return t;var e;(f||(f=function(){var t=document.createElement("i");return t.title="Web Colour Picker",t.style.display="none",document.body.appendChild(t),t}()),h[t])?e=h[t]:(f.style.color=t,e=document.defaultView.getComputedStyle(f,"").getPropertyValue("color"),e=u(o.exec(e)[1].split(/\s*,\s*/)),h[t]=e);return e},rgb2arr:c,gradient:function(t){var e=[];return r(t)&&(t=t.split("-")),a(t,function(t){-1===t.indexOf("#")&&(t=p.toRGB(t)),e.push(c(t))}),function(t){return function(t,e){!isNaN(e)&&i(e)||(e=0);var n=t.length-1,r=Math.floor(n*e),a=n*e-r,o=t[r],l=r===n?o:t[r+1];return u([s(o,l,a,0),s(o,l,a,1),s(o,l,a,2)])}(e,t)}}};t.exports=p},function(t,e,n){var i=n(33).Group,r=n(3),a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){return{zIndex:1,type:"line",lineStyle:null,items:null,alternateColor:null,matrix:null,hideFirstLine:!1,hideLastLine:!1,hightLightZero:!1,zeroLineStyle:{stroke:"#595959",lineDash:[0,0]}}},n._renderUI=function(){t.prototype._renderUI.call(this),this._drawLines()},n._drawLines=function(){var t=this.get("lineStyle"),e=this.get("items");e&&e.length&&(this._precessItems(e),this._drawGridLines(e,t))},n._precessItems=function(t){var e,n=this;r.each(t,function(t,i){e&&n.get("alternateColor")&&n._drawAlternativeBg(t,e,i),e=t})},n._drawGridLines=function(t,e){var n,i,a,o,s=this,u=this.get("type"),l=t.length;"line"===u||"polygon"===u?r.each(t,function(t,c){s.get("hideFirstLine")&&0===c||s.get("hideLastLine")&&c===l-1||(o=t.points,i=[],"line"===u?(i.push(["M",o[0].x,o[0].y]),i.push(["L",o[o.length-1].x,o[o.length-1].y])):r.each(o,function(t,e){0===e?i.push(["M",t.x,t.y]):i.push(["L",t.x,t.y])}),a=s._drawZeroLine(u,c)?r.mix({},s.get("zeroLineStyle"),{path:i}):r.mix({},e,{path:i}),(n=s.addShape("path",{attrs:a})).name="axis-grid",n._id=t._id,n.set("coord",s.get("coord")),s.get("appendInfo")&&n.setSilent("appendInfo",s.get("appendInfo")))}):r.each(t,function(t,u){s.get("hideFirstLine")&&0===u||s.get("hideLastLine")&&u===l-1||(o=t.points,i=[],r.each(o,function(t,e){var n=t.radius;0===e?i.push(["M",t.x,t.y]):i.push(["A",n,n,0,0,t.flag,t.x,t.y])}),a=r.mix({},e,{path:i}),(n=s.addShape("path",{attrs:a})).name="axis-grid",n._id=t._id,n.set("coord",s.get("coord")),s.get("appendInfo")&&n.setSilent("appendInfo",s.get("appendInfo")))})},n._drawZeroLine=function(t,e){var n=this.get("tickValues");return!("line"!==t||!n||0!==n[e]||!this.get("hightLightZero"))},n._drawAlternativeBg=function(t,e,n){var i,a,o,s=this.get("alternateColor");r.isString(s)?a=s:r.isArray(s)&&(a=s[0],o=s[1]),n%2==0?o&&(i=this._getBackItem(e.points,t.points,o)):a&&(i=this._getBackItem(e.points,t.points,a));var u=this.addShape("Path",{attrs:i});u.name="axis-grid-rect",u._id=t._id&&t._id.replace("grid","grid-rect"),u.set("coord",this.get("coord")),this.get("appendInfo")&&u.setSilent("appendInfo",this.get("appendInfo"))},n._getBackItem=function(t,e,n){var i=[],a=this.get("type");if("line"===a)i.push(["M",t[0].x,t[0].y]),i.push(["L",t[t.length-1].x,t[t.length-1].y]),i.push(["L",e[e.length-1].x,e[e.length-1].y]),i.push(["L",e[0].x,e[0].y]),i.push(["Z"]);else if("polygon"===a){r.each(t,function(t,e){0===e?i.push(["M",t.x,t.y]):i.push(["L",t.x,t.y])});for(var o=e.length-1;o>=0;o--)i.push(["L",e[o].x,e[o].y]);i.push(["Z"])}else{var s=t[0].flag;r.each(t,function(t,e){var n=t.radius;0===e?i.push(["M",t.x,t.y]):i.push(["A",n,n,0,0,t.flag,t.x,t.y])});for(var u=e.length-1;u>=0;u--){var l=e[u],c=l.radius;u===e.length-1?i.push(["M",l.x,l.y]):i.push(["A",c,c,0,0,1===s?0:1,l.x,l.y])}}return{fill:n,path:i}},e}(i);t.exports=a},function(t,e,n){var i=n(3);t.exports={getFirstScale:function(t){var e;return i.each(t,function(t){if(t)return e=t,!1}),e}}},function(t,e,n){var i=n(3),r=i.DomUtil,a=n(32),o={scatter:n(243),map:n(244),treemap:n(242)},s=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{name:"label",type:"default",textStyle:null,formatter:null,items:null,useHtml:!1,containerTpl:'<div class="g-labels" style="position:absolute;top:0;left:0;"></div>',itemTpl:'<div class="g-label" style="position:absolute;">{text}</div>',labelLine:!1,lineGroup:null,shapes:null})},n.clear=function(){var e=this.get("group"),n=this.get("container");e&&!e.get("destroyed")&&e.clear(),n&&(n.innerHTML=""),t.prototype.clear.call(this)},n.destroy=function(){var t=this.get("group"),e=this.get("container");t.destroy||t.destroy(),e&&(e.innerHTML="")},n.render=function(){this.clear(),this._init(),this.beforeDraw(),this.draw(),this.afterDraw()},n._dryDraw=function(){var t=this,e=t.get("items"),n=t.getLabels(),r=n.length;i.each(e,function(e,i){if(i<r){var a=n[i];t.changeLabel(a,e)}else{var o=t._addLabel(e,i);o&&(o._id=e._id,o.set("coord",e.coord))}});for(var a=r-1;a>=e.length;a--)n[a].remove();t._adjustLabels(),(t.get("labelLine")||e&&e.length&&e[0].labelLine)&&t.drawLines()},n.draw=function(){this._dryDraw(),this.get("canvas").draw()},n.changeLabel=function(t,e){if(t)if(this.get("useHtml")){var n=this._createDom(e);t.innerHTML=n.innerHTML,this._setCustomPosition(e,t)}else if(t._id=e._id,t.attr("text",e.text),t.attr("x")!==e.x||t.attr("y")!==e.y){var i=t.get("attrs").rotate;i?(t.rotateAtStart(-i),t.attr(e),t.rotateAtStart(i)):t.attr(e)}},n.show=function(){var t=this.get("group"),e=this.get("container");t&&t.show(),e&&(e.style.opacity=1)},n.hide=function(){var t=this.get("group"),e=this.get("container");t&&t.hide(),e&&(e.style.opacity=0)},n.drawLines=function(){var t=this;"boolean"==typeof t.get("labelLine")&&t.set("labelLine",{});var e=t.get("lineGroup");!e||e.get("destroyed")?(e=t.get("group").addGroup({elCls:"x-line-group"}),t.set("lineGroup",e)):e.clear(),i.each(t.get("items"),function(n){t.lineToLabel(n,e)})},n.lineToLabel=function(t,e){var n=t.labelLine||this.get("labelLine"),r=n.path;if(r&&i.isFunction(n.path)&&(r=n.path(t)),!r){var a={x:t.x-t._offset.x,y:t.y-t._offset.y};r=[["M",a.x,a.y],["L",t.x,t.y]]}var o=e.addShape("path",{attrs:i.mix({path:r,fill:null,stroke:t.color||"#000"},n)});o.name="labelLine",o._id=t._id&&t._id.replace("glabel","glabelline"),o.set("coord",this.get("coord"))},n._adjustLabels=function(){var t=this.get("type"),e=this.getLabels(),n=this.get("shapes"),i=o[t];"default"!==t&&i&&i(e,n)},n.getLabels=function(){var t=this.get("container");return t?i.toArray(t.childNodes):this.get("group").get("children")},n._addLabel=function(t,e){var n=this._getLabelCfg(t,e);return this._createText(n)},n._getLabelCfg=function(t,e){var n=this.get("textStyle")||{},r=this.get("formatter"),a=this.get("htmlTemplate");if(t._offset&&t.textStyle)return t.textStyle=i.mix({},n,t.textStyle),t;if(!i.isObject(t)){var o=t;(t={}).text=o}return i.isFunction(n)&&(n=n(t.text,t,e)),r&&(t.text=r(t.text,t,e)),i.isFunction(a)&&(t.text=a(t.text,t,e)),i.isNil(t.text)&&(t.text=""),t.text=t.text+"",i.mix({},t,n,{x:t.x||0,y:t.y||0})},n._init=function(){if(!this.get("group")){var t=this.get("canvas").addGroup({id:"label-group"});this.set("group",t)}},n.initHtmlContainer=function(){var t=this.get("container");if(t)i.isString(t)&&(t=document.getElementById(t))&&this.set("container",t);else{var e=this.get("containerTpl"),n=this.get("canvas").get("el").parentNode;t=r.createDom(e),n.style.position="relative",n.appendChild(t),this.set("container",t)}return t},n._createText=function(t){var e,n=this.get("container");if(!t.useHtml){var r=t.point,a=this.get("group");delete t.point;var o=t.rotate;return t.textStyle&&(t=i.mix({x:t.x,y:t.y,textAlign:t.textAlign,text:t.text},t.textStyle)),e=a.addShape("text",{attrs:t}),o&&e.transform([["t",-t.x,-t.y],["r",o],["t",t.x,t.y]]),e.setSilent("origin",r||t),e.name="label",this.get("appendInfo")&&e.setSilent("appendInfo",this.get("appendInfo")),e}n||(n=this.initHtmlContainer());var s=this._createDom(t);n.appendChild(s),this._setCustomPosition(t,s)},n._createDom=function(t){var e=this.get("itemTpl"),n=i.substitute(e,{text:t.text});return r.createDom(n)},n._setCustomPosition=function(t,e){var n=t.textAlign||"left",i=t.y,a=t.x,o=r.getOuterWidth(e);i-=r.getOuterHeight(e)/2,"center"===n?a-=o/2:"right"===n&&(a-=o),e.style.top=parseInt(i,10)+"px",e.style.left=parseInt(a,10)+"px"},e}(a);t.exports=s},function(t,e){var n=function(){function t(){this.bitmap=[]}var e=t.prototype;return e.hasGap=function(t){for(var e=!0,n=this.bitmap,i=Math.floor(t.minX),r=Math.ceil(t.maxX),a=Math.floor(t.minY),o=Math.ceil(t.maxY)-1,s=i;s<r;s++)if(n[s]){if(s===i||s===r-1){for(var u=a;u<=o;u++)if(n[s][u]){e=!1;break}}else if(n[s][a]||n[s][o]){e=!1;break}}else n[s]=[];return e},e.fillGap=function(t){for(var e=this.bitmap,n=Math.floor(t.minX),i=Math.ceil(t.maxX)-1,r=Math.floor(t.minY),a=Math.ceil(t.maxY)-1,o=n;o<=i;o++){for(var s=r;s<a;s+=8)e[o]||(e[o]=[]),e[o][s]=!0;e[o][a]=!0}for(var u=r;u<=a;u++)e[n][u]=!0,e[i][u]=!0},t}();t.exports=n},function(t,e,n){var i=n(3),r=function(t){!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(n,t);var e=n.prototype;function n(e){var n;return(n=t.call(this,e)||this)._init(),n.beforeRender(),n.render(),n._adjustPositionOffset(),n._bindEvents(),n}return e.getDefaultCfg=function(){return{container:null,title:null,formatter:null,hoverable:!0,titleGap:15,position:[0,0],offset:[0,0],offsetX:null,offsetY:null}},e._init=function(){var t=this.get("group"),e=this.get("container");this.set("canvas",e.get("canvas"));var n=this.get("position");t||(t=e.addGroup({x:0-n[0],y:0-n[1]})),this.set("group",t)},e._adjustPositionOffset=function(){var t=this.get("position"),e=this.get("offset"),n=this.get("offsetX"),r=this.get("offsetY");i.isArray(e)||(e="vertical"===this.get("layout")?[e,0]:[0,e]);n&&(e[0]=n),r&&(e[1]=r);var a=this.get("group").getBBox();this.move(-a.minX+t[0]+e[0],-a.minY+t[1]+e[1])},e.beforeRender=function(){var t=this.get("group").addGroup();this.set("itemsGroup",t)},e.render=function(){this._renderTitle()},e._renderTitle=function(){var t=this.get("title"),e=this.get("titleGap");if(e=e||0,t&&t.text){var n=this.get("group").addShape("text",{attrs:i.mix({x:0,y:0-e,fill:"#333",textBaseline:"middle",fontFamily:'"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"'},t)});n.name="legend-title",this.get("appendInfo")&&n.setSilent("appendInfo",this.get("appendInfo")),this.set("titleShape",n)}},e.getCheckedCount=function(){var t=this.get("itemsGroup").get("children");return i.filter(t,function(t){return t.get("checked")}).length},e.setItems=function(t){this.set("items",t),this.clear(),this.render()},e.addItem=function(t){this.get("items").push(t),this.clear(),this.render()},e.clear=function(){this.get("itemsGroup").clear(),this.get("group").clear(),this.beforeRender()},e.destroy=function(){this.get("group").destroy(),this._attrs={},this.removeAllListeners(),this.destroyed=!0},e.getWidth=function(){return this.get("group").getBBox().width},e.getHeight=function(){return this.get("group").getBBox().height},e.move=function(t,e){this.get("group").move(t,e)},e.draw=function(){this.get("canvas").draw()},n}(n(32));t.exports=r},function(t,e,n){var i=n(3),r=n(106),a=i.DomUtil,o=i.Group,s="g2-legend",u="g2-legend-list",l="g2-legend-list-item",c="g2-legend-marker";function h(t,e){return t.getElementsByClassName(e)[0]}function f(t,e){var n=t.className;return i.isNil(n)?t:(n=n.split(" ")).indexOf(e)>-1?t:t.parentNode?t.parentNode.className===s?t.parentNode:f(t.parentNode,e):null}function p(t,e){var n=null,r=e instanceof o?e.get("value"):e;return i.each(t,function(t){if(t.value===r)return n=t,!1}),n}var g=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"category-legend",container:null,containerTpl:'<div class="'+s+'"><h4 class="g2-legend-title"></h4><ul class="'+u+'"></ul></div>',itemTpl:'<li class="'+l+' item-{index} {checked}" data-color="{originColor}" data-value="{originValue}"><i class="'+c+'" style="background-color:{color};"></i><span class="g2-legend-text">{value}</span></li>',legendStyle:{},textStyle:{fill:"#333",fontSize:12,textAlign:"middle",textBaseline:"top",fontFamily:'"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"'},abridgeText:!1,tipTpl:'<div class="textTip"></div>',tipStyle:{display:"none",fontSize:"12px",backgroundColor:"#fff",position:"absolute",width:"auto",height:"auto",padding:"3px",boxShadow:"2px 2px 5px #888"},autoPosition:!0})},n._init=function(){},n.beforeRender=function(){},n.render=function(){this._renderHTML()},n._bindEvents=function(){var t=this,e=h(this.get("legendWrapper"),u);this.get("hoverable")&&(e.onmousemove=function(e){return t._onMousemove(e)},e.onmouseout=function(e){return t._onMouseleave(e)}),this.get("clickable")&&(e.onclick=function(e){return t._onClick(e)})},n._onMousemove=function(t){var e=this.get("items"),n=t.target,i=n.className;if(!((i=i.split(" ")).indexOf(s)>-1||i.indexOf(u)>-1)){var r=f(n,l),a=p(e,r.getAttribute("data-value"));a?(this.unactivate(),this.activate(r.getAttribute("data-value")),this.emit("itemhover",{item:a,currentTarget:r,checked:a.checked})):a||(this.unactivate(),this.emit("itemunhover",t))}},n._onMouseleave=function(t){this.unactivate(),this.emit("itemunhover",t)},n._onClick=function(t){var e=this,n=h(this.get("legendWrapper"),u),r=this.get("unCheckColor"),a=this.get("items"),o=this.get("selectedMode"),g=n.childNodes,d=t.target,v=d.className;if(!((v=v.split(" ")).indexOf(s)>-1||v.indexOf(u)>-1)){var y=f(d,l),m=h(y,"g2-legend-text"),x=h(y,c),b=p(a,y.getAttribute("data-value"));if(b){var _=y.className,w=y.getAttribute("data-color");if("single"===o)b.checked=!0,i.each(g,function(t){t!==y?(h(t,c).style.backgroundColor=r,t.className=t.className.replace("checked","unChecked"),t.style.color=r,p(a,t.getAttribute("data-value")).checked=!1):(m&&(m.style.color=e.get("textStyle").fill),x&&(x.style.backgroundColor=w),y.className=_.replace("unChecked","checked"))});else{var M=-1!==_.indexOf("checked"),S=0;if(i.each(g,function(t){-1!==t.className.indexOf("checked")&&S++}),!this.get("allowAllCanceled")&&M&&1===S)return void this.emit("clicklastitem",{item:b,currentTarget:y,checked:"single"===o||b.checked});b.checked=!b.checked,M?(x&&(x.style.backgroundColor=r),y.className=_.replace("checked","unChecked"),y.style.color=r):(x&&(x.style.backgroundColor=w),y.className=_.replace("unChecked","checked"),y.style.color=this.get("textStyle").fill)}this.emit("itemclick",{item:b,currentTarget:y,checked:"single"===o||b.checked})}}},n.activate=function(t){var e=this,n=this.get("items"),i=p(n,t);h(this.get("legendWrapper"),u).childNodes.forEach(function(t){var r=h(t,c),a=p(n,t.getAttribute("data-value"));if(e.get("highlight")){if(a===i&&a.checked)return void(r.style.border="1px solid #333")}else a===i?r.style.opacity=1:a.checked&&(r.style.opacity=.5)})},n.unactivate=function(){var t=this;h(this.get("legendWrapper"),u).childNodes.forEach(function(e){var n=h(e,c);t.get("highlight")?n.style.border="1px solid #fff":n.style.opacity=1})},n._renderHTML=function(){var t=this,e=this.get("container"),n=this.get("title"),r=this.get("containerTpl"),o=a.createDom(r),f=h(o,"g2-legend-title"),p=h(o,u),g=this.get("unCheckColor"),d=i.deepMix({},{CONTAINER_CLASS:{height:"auto",width:"auto",position:"absolute",overflowY:"auto",fontSize:"12px",fontFamily:this.fontFamily,lineHeight:"20px",color:"#8C8C8C"},TITLE_CLASS:{marginBottom:this.get("titleGap")+"px",fontSize:"12px",color:"#333",textBaseline:"middle",fontFamily:this.fontFamily},LIST_CLASS:{listStyleType:"none",margin:0,padding:0,textAlign:"center"},LIST_ITEM_CLASS:{cursor:"pointer",marginBottom:"5px",marginRight:"24px"},MARKER_CLASS:{width:"9px",height:"9px",borderRadius:"50%",display:"inline-block",marginRight:"4px",verticalAlign:"middle"}},this.get("legendStyle"));if(/^\#/.test(e)||"string"==typeof e&&e.constructor===String){var v=e.replace("#","");(e=document.getElementById(v)).appendChild(o)}else{var y=this.get("position"),m={};m="left"===y||"right"===y?{maxHeight:(this.get("maxLength")||e.offsetHeight)+"px"}:{maxWidth:(this.get("maxLength")||e.offsetWidth)+"px"},a.modifyCSS(o,i.mix({},d.CONTAINER_CLASS,m,this.get(s))),e.appendChild(o)}a.modifyCSS(p,i.mix({},d.LIST_CLASS,this.get(u))),f&&(n&&n.text?(f.innerHTML=n.text,a.modifyCSS(f,i.mix({},d.TITLE_CLASS,this.get("g2-legend-title"),n))):o.removeChild(f));var x=this.get("items"),b=this.get("itemTpl"),_=this.get("position"),w=this.get("layout"),M="right"===_||"left"===_||"vertical"===w?"block":"inline-block",S=i.mix({},d.LIST_ITEM_CLASS,{display:M},this.get(l)),C=i.mix({},d.MARKER_CLASS,this.get(c));if(i.each(x,function(e,n){var r,s=e.checked,u=t._formatItemValue(e.value),l=e.marker.fill||e.marker.stroke,f=s?l:g;r=i.isFunction(b)?b(u,f,s,n):b;var d=i.substitute(r,i.mix({},e,{index:n,checked:s?"checked":"unChecked",value:u,color:f,originColor:l,originValue:e.value.replace(/\"/g,"&quot;")})),v=a.createDom(d);v.style.color=t.get("textStyle").fill;var y=h(v,c),m=h(v,"g2-legend-text");if(a.modifyCSS(v,S),y&&a.modifyCSS(y,C),s||(v.style.color=g,y&&(y.style.backgroundColor=g)),p.appendChild(v),t.get("abridgeText")){var x=u,_=v.offsetWidth,w=t.get("textStyle").fontSize;isNaN(w)&&(-1!==w.indexOf("pt")?w=1*parseFloat(w.substr(0,w.length-2))/72*96:-1!==w.indexOf("px")&&(w=parseFloat(w.substr(0,w.length-2))));var M=w*x.length,k=Math.floor(_/w);_<2*w?x="":_<M&&k>1&&(x=x.substr(0,k-1)+"..."),m.innerText=x,v.addEventListener("mouseover",function(){var t=h(o.parentNode,"textTip");t.style.display="block",t.style.left=v.offsetLeft+v.offsetWidth+"px",t.style.top=v.offsetTop+15+"px",t.innerText=u}),v.addEventListener("mouseout",function(){h(o.parentNode,"textTip").style.display="none"})}}),this.get("abridgeText")){var k=this.get("tipTpl"),A=a.createDom(k),P=this.get("tipStyle");a.modifyCSS(A,P),o.parentNode.appendChild(A),A.addEventListener("mouseover",function(){A.style.display="none"})}this.set("legendWrapper",o)},n._adjustPositionOffset=function(){var t=this.get("position"),e=this.get("offset"),n=this.get("offsetX"),i=this.get("offsetY");n&&(e[0]=n),i&&(e[1]=i);var r=this.get("legendWrapper");r.style.left=t[0]+"px",r.style.top=t[1]+"px",r.style.marginLeft=e[0]+"px",r.style.marginTop=e[1]+"px"},n.getWidth=function(){return a.getOuterWidth(this.get("legendWrapper"))},n.getHeight=function(){return a.getOuterHeight(this.get("legendWrapper"))},n.move=function(e,n){/^\#/.test(this.get("container"))?t.prototype.move.call(this,e,n):(a.modifyCSS(this.get("legendWrapper"),{left:e+"px",top:n+"px"}),this.set("x",e),this.set("y",n))},n.destroy=function(){var t=this.get("legendWrapper");t&&t.parentNode&&t.parentNode.removeChild(t)},e}(r);t.exports=g},function(t,e,n){var i=n(3),r=n(104),a=i.Event,o=i.Group;function s(t,e){var n=null,r=e instanceof o||"legendGroup"===e.name?e.get("value"):e;return i.each(t,function(t){if(t.value===r)return n=t,!1}),n}function u(t,e){return t.findBy(function(t){return t.name===e})}var l=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"category-legend",items:null,itemGap:5,itemMarginBottom:8,itemsGroup:null,layout:"horizontal",allowAllCanceled:!1,backPadding:[0,0,0,0],unCheckColor:"#ccc",background:{fill:"#fff",fillOpacity:0},itemWidth:null,textStyle:{fill:"#333",fontSize:12,textAlign:"start",textBaseline:"middle",fontFamily:'"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"'},_wordSpaceing:8,clickable:!0,selectedMode:"multiple",reversed:!1,autoWrap:!0,highlight:!1})},n.render=function(){t.prototype.render.call(this),this._renderItems(),this.get("autoWrap")&&this._adjustItems()},n._bindEvents=function(){this.get("hoverable")&&(this.get("group").on("mousemove",i.wrapBehavior(this,"_onMousemove")),this.get("group").on("mouseleave",i.wrapBehavior(this,"_onMouseleave"))),this.get("clickable")&&this.get("group").on("click",i.wrapBehavior(this,"_onClick"))},n._getLegendItem=function(t){var e=t.get("parent");return e&&"legendGroup"===e.name?e:null},n.activate=function(t){var e=this,n=void 0;this.get("itemsGroup").get("children").forEach(function(i){if(n=u(i,"legend-marker")){var r=i.get("checked");e.get("highlight")?i.get("value")===t&&r?n.attr("stroke","#333"):n.attr("stroke",null):i.get("value")===t?n.attr("fillOpacity",.5):n.attr("fillOpacity",1)}}),this.get("canvas").draw()},n.unactivate=function(){var t=this,e=this.get("itemsGroup").get("children"),n=void 0,i=this.get("unCheckColor");e.forEach(function(e){if(n=u(e,"legend-marker"))if(t.get("highlight")){var r=n.get("oriStroke"),a=e.get("checked");r=r&&!a?i:"",n.attr("stroke",r)}else n.attr("fillOpacity",1)}),this.get("canvas").draw()},n._onMousemove=function(t){var e=this._getLegendItem(t.currentTarget);if(e&&e.get("checked")){var n=this.get("items"),i=new a("itemhover",t,!0,!0);i.item=s(n,e),i.checked=e.get("checked"),i.currentTarget=t.currentTarget,this.unactivate(),this.activate(e.get("value")),this.emit("itemhover",i)}else this.unactivate(),this.emit("itemunhover",t);this.get("canvas").draw()},n._onMouseleave=function(t){this.unactivate(),this.get("canvas").draw(),this.emit("itemunhover",t)},n._onClick=function(t){var e=this._getLegendItem(t.currentTarget),n=this.get("items");if(e&&!e.get("destroyed")){var r=e.get("checked"),o=this.get("selectedMode"),l=s(n,e),c=new a("itemclick",t,!0,!0);if(c.item=l,c.currentTarget=e,c.appendInfo=t.currentTarget.get("appendInfo"),c.checked="single"===o||!r,!this.get("allowAllCanceled")&&r&&1===this.getCheckedCount())return void this.emit("clicklastitem",c);var h=this.get("unCheckColor"),f=this.get("textStyle").fill,p=void 0,g=void 0,d=void 0;if("single"===o){var v=this.get("itemsGroup").get("children");i.each(v,function(t){p=u(t,"legend-marker"),g=u(t,"legend-text"),d=u(t,"legend-item"),t!==e?(p.attr("fill")&&p.attr("fill",h),p.attr("stroke")&&p.attr("stroke",h),g.attr("fill",h),p.setSilent("checked",!1),g.setSilent("checked",!1),d.setSilent("checked",!1),t.setSilent("checked",!1)):(p.attr("fill")&&l&&l.marker&&p.attr("fill",l.marker.fill),p.attr("stroke")&&l&&l.marker&&p.attr("stroke",l.marker.stroke),g.attr("fill",f),p.setSilent("checked",!0),g.setSilent("checked",!0),d.setSilent("checked",!0),t.setSilent("checked",!0))})}else p=u(e,"legend-marker"),g=u(e,"legend-text"),d=u(e,"legend-item"),p.attr("fill")&&l&&l.marker&&p.attr("fill",r?h:l.marker.fill),p.attr("stroke")&&l&&l.marker&&p.attr("stroke",r?h:l.marker.stroke),g.attr("fill",r?h:f),e.setSilent("checked",!r),p.setSilent("checked",!r),g.setSilent("checked",!r),d.setSilent("checked",!r);this.emit("itemclick",c)}this.get("canvas").draw()},n._renderItems=function(){var t=this,e=this.get("items");if(this.get("reversed")&&e.reverse(),i.each(e,function(e,n){t._addItem(e,n)}),this.get("highlight")){var n=void 0;this.get("itemsGroup").get("children").forEach(function(t){(n=u(t,"legend-marker")).get("oriStroke")||(n.attr("stroke")?n.set("oriStroke",n.attr("stroke")):n.set("oriStroke",""))})}},n._formatItemValue=function(t){var e=this.get("formatter")||this.get("itemFormatter");return e&&(t=e.call(this,t)),t},n._getNextX=function(){var t=this.get("layout"),e=this.get("itemGap"),n=this.get("itemsGroup"),r=this.get("itemWidth"),a=n.get("children"),o=0;return"horizontal"===t&&i.each(a,function(t){o+=(r||t.getBBox().width)+e}),o},n._getNextY=function(){var t=this.get("itemMarginBottom"),e=this.get("titleShape")?this.get("titleGap"):0,n=this.get("layout"),r=this.get("itemsGroup"),a=this.get("titleShape"),o=r.get("children"),s=e;return a&&(s+=a.getBBox().height),"vertical"===n&&i.each(o,function(e){s+=e.getBBox().height+t}),s},n._addItem=function(t){var e=this.get("itemsGroup"),n=this._getNextX(),r=this._getNextY(),a=this.get("unCheckColor"),o=e.addGroup({x:n,y:r,value:t.value,checked:t.checked});o.set("viewId",this.get("viewId"));var s=this.get("textStyle"),u=this.get("_wordSpaceing"),l=0;if(t.marker){var c=i.mix({},t.marker,{x:t.marker.radius+n,y:r});t.checked||(c.fill&&(c.fill=a),c.stroke&&(c.stroke=a));var h=o.addShape("marker",{type:"marker",attrs:c});h.attr("cursor","pointer"),h.name="legend-marker",l+=h.getBBox().width+u}var f=i.mix({},{fill:"#333",fontSize:12,textAlign:"start",textBaseline:"middle",fontFamily:'"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"'},s,{x:l+n,y:r,text:this._formatItemValue(t.value)});t.checked||i.mix(f,{fill:a});var p=o.addShape("text",{attrs:f});p.attr("cursor","pointer"),p.name="legend-text",this.get("appendInfo")&&p.setSilent("appendInfo",this.get("appendInfo"));var g=o.getBBox(),d=this.get("itemWidth"),v=o.addShape("rect",{attrs:{x:n,y:r-g.height/2,fill:"#fff",fillOpacity:0,width:d||g.width,height:g.height}});return v.attr("cursor","pointer"),v.setSilent("origin",t),v.name="legend-item",this.get("appendInfo")&&v.setSilent("appendInfo",this.get("appendInfo")),o.name="legendGroup",o},n._adjustHorizontal=function(){var t=this.get("itemsGroup"),e=t.get("children"),n=this.get("maxLength"),r=this.get("itemGap"),a=this.get("itemMarginBottom"),o=this.get("titleShape")?this.get("titleGap"):0,s=0,u=0,l=void 0,c=void 0,h=void 0,f=this.get("itemWidth");t.getBBox().width>n&&i.each(e,function(t){h=t.getBBox(),l=f||h.width,c=h.height+a,n-u<l&&(s++,u=0),t.move(u,s*c+o),u+=l+r})},n._adjustVertical=function(){var t=this.get("itemsGroup"),e=this.get("titleShape"),n=t.get("children"),r=this.get("maxLength"),a=this.get("itemGap"),o=this.get("itemMarginBottom"),s=this.get("titleGap"),u=e?e.getBBox().height+s:0,l=this.get("itemWidth"),c=u,h=void 0,f=void 0,p=void 0,g=0,d=0;t.getBBox().height>r&&i.each(n,function(t){p=t.getBBox(),h=p.width,f=p.height,l?g=l+a:h>g&&(g=h+a),r-c<f?(c=u,d+=g,t.move(d,u)):t.move(d,c),c+=f+o})},n._adjustItems=function(){"horizontal"===this.get("layout")?this._adjustHorizontal():this._adjustVertical()},n.getWidth=function(){return t.prototype.getWidth.call(this)},n.getHeight=function(){return t.prototype.getHeight.call(this)},n.move=function(e,n){t.prototype.move.call(this,e,n)},e}(r);t.exports=l},function(t,e,n){function i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var r=n(33),a=n(108),o=n(109),s=n(110),u=n(62),l=n(3),c=l.DomUtil,h=l.MatrixUtil,f=function(t){!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(n,t);var e=n.prototype;function n(e){var n;n=t.call(this,e)||this,l.assign(i(i(n)),s),l.assign(i(i(n)),o);var r=n.get("crosshairs");if(r){var u="rect"===r.type?n.get("backPlot"):n.get("frontPlot"),c=new a(l.mix({plot:u,plotRange:n.get("plotRange"),canvas:n.get("canvas")},n.get("crosshairs")));c.hide(),n.set("crosshairGroup",c)}return n._init_(),n.get("items")&&n.render(),n}return e.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return l.mix({},e,{boardStyle:{x:0,y:0,width:100,height:100,fill:"rgba(255, 255, 255, 0.9)",radius:4,stroke:"#e2e2e2",lineWidth:1},titleStyle:{fontFamily:"PingFang SC",text:"",textBaseline:"top",fontSize:12,fill:"rgb(87, 87, 87)",lineHeight:20,padding:20},markerStyle:{radius:4},nameStyle:{fontFamily:"PingFang SC",fontSize:12,fill:"rgb(87, 87, 87)",textBaseline:"middle",textAlign:"start",padding:8},valueStyle:{fontFamily:"PingFang SC",fontSize:12,fill:"rgb(87, 87, 87)",textBaseline:"middle",textAlign:"start",padding:30},padding:{top:20,right:20,bottom:20,left:20},itemGap:10,animationDuration:200})},e._init_=function(){var t=this.get("padding"),e=this.get("frontPlot"),n=e.addGroup({capture:!1});this.set("markerGroup",n);var i=e.addGroup();i.hide(),this.set("container",i);var r=i.addShape("rect",{attrs:l.mix({},this.get("boardStyle"))});this.set("board",r);var a=this.get("titleStyle");if(this.get("showTitle")){var o=i.addShape("text",{attrs:l.mix({x:t.left,y:t.top},a)});this.set("titleShape",o),o.name="tooltip-title"}var s=i.addGroup();s.move(t.left,t.top+a.lineHeight+a.padding),this.set("itemsGroup",s)},e.render=function(){var t=this;t.clear();var e=t.get("container"),n=t.get("board"),i=t.get("showTitle"),r=t.get("titleContent"),a=this.get("titleShape"),o=this.get("itemsGroup"),s=t.get("items"),u=t.get("padding");if(a&&i&&a.attr("text",r),o){var c=t.get("itemGap"),h=0;l.each(s,function(e){var n=t._addItem(e);n.move(0,h),o.add(n);var i=n.getBBox().height;h+=i+c})}var f=e.getBBox(),p=f.width+u.right,g=f.height+u.bottom;n.attr("width",p),n.attr("height",g),t._alignToRight(p)},e.clear=function(){var t=this.get("titleShape"),e=this.get("itemsGroup"),n=this.get("board");t.text="",e.clear(),n.attr("width",0),n.attr("height",0)},e.show=function(){this.get("container").show();var e=this.get("crosshairGroup");e&&e.show();var n=this.get("markerGroup");n&&n.show(),t.prototype.show.call(this),this.get("canvas").draw()},e.hide=function(){this.get("container").hide();var e=this.get("crosshairGroup");e&&e.hide();var n=this.get("markerGroup");n&&n.hide(),t.prototype.hide.call(this),this.get("canvas").draw()},e.destroy=function(){var e=this.get("container"),n=this.get("crosshairGroup");n&&n.destroy();var i=this.get("markerGroup");i&&i.remove(),t.prototype.destroy.call(this),e.remove()},e.setPosition=function(e,n,i){var r,a=this.get("container"),o=this.get("canvas").get("el"),s=c.getWidth(o),u=c.getHeight(o),f=a.getBBox(),p=f.width,g=f.height,d=e,v=n;if(this.get("position")){var y=f.width,m=f.height;e=(r=this._calcTooltipPosition(e,n,this.get("position"),y,m,i))[0],n=r[1]}else e=(r=this._constraintPositionInBoundary(e,n,p,g,s,u))[0],n=r[1];if(this.get("inPlot")){var x=this.get("plotRange");e=(r=this._constraintPositionInPlot(e,n,p,g,x,this.get("enterable")))[0],n=r[1]}var b=this.get("markerItems");l.isEmpty(b)||(d=b[0].x,v=b[0].y);var _=h.transform([1,0,0,0,1,0,0,0,1],[["t",e,n]]);a.stopAnimate(),a.animate({matrix:_},this.get("animationDuration"));var w=this.get("crosshairGroup");if(w){var M=this.get("items");w.setPosition(d,v,M)}t.prototype.setPosition.call(this,e,n)},e._addItem=function(t){var e=new r.Group,n=this.get("markerStyle").radius;if(t.marker){var i=l.mix({},t.marker,{x:t.marker.radius/2,y:0});e.addShape("marker",{attrs:i}),n=t.marker.radius}var a=this.get("nameStyle");e.addShape("text",{attrs:l.mix({x:n+a.padding,y:0,text:t.name},a)});var o=this.get("valueStyle");return e.addShape("text",{attrs:l.mix({x:e.getBBox().width+o.padding,y:0,text:t.value},o)}),e},e._alignToRight=function(t){var e=this,n=this.get("itemsGroup").get("children");l.each(n,function(n){var i=n.get("children")[2],r=i.getBBox().width,a=t-r-2*e.get("padding").right;i.attr("x",a)})},n}(u);t.exports=f},function(t,e,n){var i=n(32),r=n(3),a=function(t){!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(n,t);var e=n.prototype;function n(e){var n;return(n=t.call(this,e)||this)._init_(),n.render(),n}return e.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return r.mix({},e,{type:null,plot:null,plotRange:null,rectStyle:{fill:"#CCD6EC",opacity:.3},lineStyle:{stroke:"rgba(0, 0, 0, 0.25)",lineWidth:1},isTransposed:!1})},e._init_=function(){var t,e=this.get("plot");t="rect"===this.type?e.addGroup({zIndex:0}):e.addGroup(),this.set("container",t)},e._addLineShape=function(t,e){var n=this.get("container").addShape("line",{capture:!1,attrs:t});return this.set("crossLineShape"+e,n),n},e._renderHorizontalLine=function(t,e){var n=this.get("lineStyle"),i=r.mix({x1:e?e.bl.x:t.get("width"),y1:0,x2:e?e.br.x:0,y2:0},n);this._addLineShape(i,"X")},e._renderVerticalLine=function(t,e){var n=this.get("lineStyle"),i=r.mix({x1:0,y1:e?e.bl.y:t.get("height"),x2:0,y2:e?e.tl.y:0},n);this._addLineShape(i,"Y")},e._renderBackground=function(t,e){var n=this.get("rectStyle"),i=this.get("container"),a=r.mix({x:e?e.tl.x:0,y:e?e.tl.y:t.get("height"),width:e?e.br.x-e.bl.x:t.get("width"),height:e?Math.abs(e.tl.y-e.bl.y):t.get("height")},n),o=i.addShape("rect",{attrs:a,capture:!1});return this.set("crosshairsRectShape",o),o},e._updateRectShape=function(t){var e,n=this.get("crosshairsRectShape"),i=this.get("isTransposed"),a=t[0],o=t[t.length-1],s=i?"y":"x",u=i?"height":"width",l=a[s];if(t.length>1&&a[s]>o[s]&&(l=o[s]),this.get("width"))n.attr(s,l-this.get("crosshairs").width/2),n.attr(u,this.get("width"));else if(r.isArray(a.point[s])&&!a.size){var c=a.point[s][1]-a.point[s][0];n.attr(s,a.point[s][0]),n.attr(u,c)}else e=3*a.size/4,n.attr(s,l-e),1===t.length?n.attr(u,3*a.size/2):n.attr(u,Math.abs(o[s]-a[s])+2*e)},e.render=function(){var t=this.get("canvas"),e=this.get("plotRange"),n=this.get("isTransposed");switch(this.clear(),this.get("type")){case"x":this._renderHorizontalLine(t,e);break;case"y":this._renderVerticalLine(t,e);break;case"cross":this._renderHorizontalLine(t,e),this._renderVerticalLine(t,e);break;case"rect":this._renderBackground(t,e);break;default:n?this._renderHorizontalLine(t,e):this._renderVerticalLine(t,e)}},e.show=function(){var e=this.get("container");t.prototype.show.call(this),e.show()},e.hide=function(){var e=this.get("container");t.prototype.hide.call(this),e.hide()},e.clear=function(){var e=this.get("container");this.set("crossLineShapeX",null),this.set("crossLineShapeY",null),this.set("crosshairsRectShape",null),t.prototype.clear.call(this),e.clear()},e.destroy=function(){var e=this.get("container");t.prototype.destroy.call(this),e.remove()},e.setPosition=function(t,e,n){var i=this.get("crossLineShapeX"),r=this.get("crossLineShapeY"),a=this.get("crosshairsRectShape");r&&r.move(t,0),i&&i.move(0,e),a&&this._updateRectShape(n)},n}(i);t.exports=a},function(t,e,n){var i=n(3),r={setMarkers:function(t,e){var n=this.get("markerGroup"),r=this.get("frontPlot");n?n.clear():(n=r.addGroup({zIndex:1,capture:!1}),this.set("markerGroup",n)),i.each(t,function(t){n.addShape("marker",{color:t.color,attrs:i.mix({fill:t.color,symbol:"circle",shadowColor:t.color},e,{x:t.x,y:t.y})})}),this.set("markerItems",t)},clearMarkers:function(){var t=this.get("markerGroup");t&&t.clear()}};t.exports=r},function(t,e){var n={_calcTooltipPosition:function(t,e,n,i,r,a){var o=0,s=0,u=20;if(a){var l=a.getBBox();o=l.width,s=l.height,t=l.x,e=l.y,u=5}switch(n){case"inside":t=t+o/2-i/2,e=e+s/2-r/2;break;case"top":t=t+o/2-i/2,e=e-r-u;break;case"left":t=t-i-u,e=e+s/2-r/2;break;case"right":t=t+o+u,e=e+s/2-r/2;break;case"bottom":default:t=t+o/2-i/2,e=e+s+u}return[t,e]},_constraintPositionInBoundary:function(t,e,n,i,r,a){return t+n+20>r?t=(t-=n+20)<0?0:t:t+20<0?t=20:t+=20,e+i+20>a?e=(e-=i+20)<0?0:e:e+20<0?e=20:e+=20,[t,e]},_constraintPositionInPlot:function(t,e,n,i,r,a){return t+n>r.tr.x&&(t-=n+40),t<r.tl.x&&(t=r.tl.x),a||(e+i>r.bl.y&&(e-=i+40),e<r.tl.y&&(e=r.tl.y)),[t,e]}};t.exports=n},function(t,e,n){var i=n(0),r=n(259),a={appear:{duration:450,easing:"easeQuadOut"},update:{duration:450,easing:"easeQuadInOut"},enter:{duration:400,easing:"easeQuadInOut",delay:100},leave:{duration:350,easing:"easeQuadIn"}},o={line:{appear:function(){return r.appear.clipIn},enter:function(){return r.enter.clipIn},leave:function(){return r.leave.lineWidthOut}},path:{appear:function(){return r.appear.clipIn},enter:function(){return r.enter.clipIn},leave:function(){return r.leave.lineWidthOut}},area:{appear:function(){return r.appear.clipIn},enter:function(){return r.enter.fadeIn},leave:function(){return r.leave.fadeOut},cfg:{appear:{duration:500,easing:"easeQuadOut"},update:{duration:450,easing:"easeQuadInOut"},enter:{duration:600,delay:150,easing:"easeQuadInOut"},leave:{easing:"easeQuadOut",duration:350}}},polygon:{appear:function(){return r.appear.zoomIn},enter:function(){return r.enter.zoomIn},leave:function(){return r.leave.zoomOut}},edge:{appear:function(){return r.appear.pathIn},enter:function(){return r.enter.pathIn},leave:function(){return r.leave.pathOut}},interval:{appear:function(t){var e;return t.isPolar?(e=r.appear.zoomIn,(t.isTransposed||"theta"===t.type)&&(e=r.appear.fanIn)):e=t.isRect?t.isTransposed?r.appear.scaleInX:r.appear.scaleInY:r.appear.zoomIn,e},enter:function(t){return t.isRect||t.isTransposed||"theta"===t.type?r.enter.fadeIn:r.enter.zoomIn},leave:function(){return r.leave.fadeOut},update:function(t){if("theta"===t.type)return r.update.fanIn}},point:{appear:function(){return r.appear.zoomIn},enter:function(){return r.enter.zoomIn},leave:function(){return r.leave.zoomOut}},schema:{appear:function(){return r.appear.clipIn},enter:function(){return r.enter.clipIn},leave:function(){return r.leave.lineWidthOut}},contour:null,heatmap:null,label:{appear:function(){return r.appear.fadeIn},enter:function(){return r.enter.fadeIn},leave:function(){return r.leave.fadeOut},cfg:{appear:{duration:900}}},"axis-label":{enter:function(){return r.appear.fadeIn},leave:function(){return r.leave.fadeOut},update:function(t){if(t.isPolar)return r.appear.fadeIn}},"axis-ticks":{enter:function(){return r.appear.fadeIn},leave:function(){return r.leave.fadeOut},update:function(t){if(t.isPolar)return r.appear.fadeIn}},"axis-grid":{enter:function(){return r.appear.fadeIn},leave:function(){return r.leave.fadeOut},update:function(t){if(t.isPolar)return r.appear.fadeIn}},"axis-grid-rect":{enter:function(){return r.appear.fadeIn},leave:function(){return r.leave.fadeOut},update:function(){return r.leave.fadeIn}},labelLine:{appear:function(){return r.appear.pathIn},enter:function(){return r.enter.pathIn},leave:function(){return r.leave.pathOut}}};o.Action=r,o.defaultCfg=a,o.getAnimation=function(t,e,n){var r=this[t];if(r){var a=r[n];if(i.isFunction(a))return a(e)}return!1},o.getAnimateCfg=function(t,e){var n=a[e];return this[t]&&this[t].cfg&&this[t].cfg[e]?i.deepMix({},n,this[t].cfg[e]):n},o.registerAnimation=function(t,e,n){this.Action[t]||(this.Action[t]={}),this.Action[t][e]=n},t.exports=o},function(t,e,n){var i=n(97),r=n(0),a=function(t){!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(n,t);var e=n.prototype;function n(e){var n,i={visible:!0},a=(n=t.call(this)||this).getDefaultCfg();return n._attrs=i,r.assign(i,a,e),n}return e.getDefaultCfg=function(){return{}},e.get=function(t){return this._attrs[t]},e.set=function(t,e){this._attrs[t]=e},e.show=function(){this.get("visible")||(this.set("visible",!0),this.changeVisible(!0))},e.hide=function(){this.get("visible")&&(this.set("visible",!1),this.changeVisible(!1))},e.changeVisible=function(){},e.destroy=function(){this._attrs={},this.removeAllListeners(),this.destroyed=!0},n}(i);t.exports=a},function(t,e,n){var i=n(0),r=n(268),a=n(26).Canvas,o=i.DomUtil,s=n(5),u=n(272),l=n(114);function c(t,e){return i.isEqualWith(t,e,function(t,e){return t===e})}var h=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix(e,{id:null,forceFit:!1,container:null,wrapperEl:null,canvas:null,width:500,height:500,pixelRatio:null,backPlot:null,frontPlot:null,plotBackground:null,padding:s.plotCfg.padding,background:null,autoPaddingAppend:5,renderer:s.renderer,views:[]})},n.init=function(){var e=this.get("viewTheme");this._initCanvas(),this._initPlot(),this._initEvents(),t.prototype.init.call(this);var n=new l.Tooltip({chart:this,viewTheme:e,options:{}});this.set("tooltipController",n);var i=new l.Legend({chart:this,viewTheme:e});this.set("legendController",i),this.set("_id","chart"),this.emit("afterinit")},n._isAutoPadding=function(){var t=this.get("padding");return i.isArray(t)?-1!==t.indexOf("auto"):"auto"===t},n._getAutoPadding=function(){for(var t=this.get("padding"),e=function(t,e){return{minX:Math.min(t.minX,e.minX),minY:Math.min(t.minY,e.minY),maxX:Math.max(t.maxX,e.maxX),maxY:Math.max(t.maxY,e.maxY)}}(this.get("frontPlot").getBBox(),this.get("backPlot").getBBox()),n=[0-e.minY,e.maxX-this.get("width"),e.maxY-this.get("height"),0-e.minX],r=i.toAllPadding(t),a=0;a<r.length;a++)if("auto"===r[a]){var o=Math.max(0,n[a]);r[a]=o+this.get("autoPaddingAppend")}return r},n._initCanvas=function(){var t=this.get("container"),e=this.get("id");!t&&e&&(t=e,this.set("container",e));var n=this.get("width"),r=this.get("height");if(i.isString(t)){if(!(t=document.getElementById(t)))throw new Error("Please specify the container for the chart!");this.set("container",t)}var s=o.createDom('<div style="position:relative;"></div>');t.appendChild(s),this.set("wrapperEl",s),this.get("forceFit")&&(n=o.getWidth(t,n),this.set("width",n));var u=new a({containerDOM:s,width:n,height:r,pixelRatio:this.get("pixelRatio"),renderer:this.get("renderer")});this.set("canvas",u)},n._initPlot=function(){this._initPlotBack();var t=this.get("canvas"),e=t.addGroup({zIndex:1}),n=t.addGroup({zIndex:2}),i=t.addGroup({zIndex:3});this.set("backPlot",e),this.set("middlePlot",n),this.set("frontPlot",i)},n._initPlotBack=function(){var t=this.get("canvas"),e=this.get("viewTheme"),n=t.addGroup(u,{padding:this.get("padding"),plotBackground:i.mix({},e.plotBackground,this.get("plotBackground")),background:i.mix({},e.background,this.get("background"))});this.set("plot",n),this.set("plotRange",n.get("plotRange"))},n._initEvents=function(){this.get("forceFit")&&window.addEventListener("resize",i.wrapBehavior(this,"_initForceFitEvent"))},n._initForceFitEvent=function(){var t=setTimeout(i.wrapBehavior(this,"forceFit"),200);clearTimeout(this.get("resizeTimer")),this.set("resizeTimer",t)},n._renderLegends=function(){var t=this.get("options").legends;if(i.isNil(t)||!1!==t){var e=this.get("legendController");if(e.options=t||{},e.plotRange=this.get("plotRange"),t&&t.custom)e.addCustomLegend();else{var n=this.getAllGeoms(),r=[];i.each(n,function(t){var n=t.get("view"),a=t.getAttrsForLegend();i.each(a,function(a){var o=a.type,s=a.getScale(o);if(s.field&&"identity"!==s.type&&!function(t,e){var n=!1;return i.each(t,function(t){var i=[].concat(t.values),r=[].concat(e.values);t.type!==e.type||t.field!==e.field||i.sort().toString()!==r.sort().toString()||(n=!0)}),n}(r,s)){r.push(s);var u=n.getFilteredOutValues(s.field);e.addLegend(s,a,t,u)}})});var a=this.getYScales();0===r.length&&a.length>1&&e.addMixedLegend(a,n)}e.alignLegends()}},n._renderTooltips=function(){var t=this.get("options");if(i.isNil(t.tooltip)||!1!==t.tooltip){var e=this.get("tooltipController");e.options=t.tooltip||{},e.renderTooltip()}},n.getAllGeoms=function(){var t=[];t=t.concat(this.get("geoms"));var e=this.get("views");return i.each(e,function(e){t=t.concat(e.get("geoms"))}),t},n.forceFit=function(){if(this&&!this.destroyed){var t=this.get("container"),e=this.get("width"),n=o.getWidth(t,e);if(0!==n&&n!==e){var i=this.get("height");this.changeSize(n,i)}return this}},n.resetPlot=function(){var t=this.get("plot"),e=this.get("padding");c(e,t.get("padding"))||(t.set("padding",e),t.repaint())},n.changeSize=function(t,e){this.get("canvas").changeSize(t,e);var n=this.get("plot");return this.set("width",t),this.set("height",e),n.repaint(),this.set("keepPadding",!0),this.repaint(),this.set("keepPadding",!1),this.emit("afterchangesize"),this},n.changeWidth=function(t){return this.changeSize(t,this.get("height"))},n.changeHeight=function(t){return this.changeSize(this.get("width"),t)},n.view=function(t){(t=t||{}).theme=this.get("theme"),t.parent=this,t.backPlot=this.get("backPlot"),t.middlePlot=this.get("middlePlot"),t.frontPlot=this.get("frontPlot"),t.canvas=this.get("canvas"),i.isNil(t.animate)&&(t.animate=this.get("animate")),t.options=i.mix({},this._getSharedOptions(),t.options);var e=new r(t);return e.set("_id","view"+this.get("views").length),this.get("views").push(e),this.emit("addview",{view:e}),e},n.removeView=function(t){var e=this.get("views");i.Array.remove(e,t),t.destroy()},n._getSharedOptions=function(){var t=this.get("options"),e={};return i.each(["scales","coord","axes"],function(n){e[n]=i.cloneDeep(t[n])}),e},n.getViewRegion=function(){var t=this.get("plotRange");return{start:t.bl,end:t.tr}},n.legend=function(t,e){var n=this.get("options");n.legends||(n.legends={});var r={};return!1===t?n.legends=!1:i.isObject(t)?r=t:i.isString(t)?r[t]=e:r=e,i.mix(n.legends,r),this},n.tooltip=function(t,e){var n=this.get("options");return n.tooltip||(n.tooltip={}),!1===t?n.tooltip=!1:i.isObject(t)?i.mix(n.tooltip,t):i.mix(n.tooltip,e),this},n.clear=function(){this.emit("beforeclear");for(var e=this.get("views");e.length>0;){e.shift().destroy()}t.prototype.clear.call(this);var n=this.get("canvas");return this.resetPlot(),n.draw(),this.emit("afterclear"),this},n.clearInner=function(){var e=this.get("views");i.each(e,function(t){t.clearInner()});var n=this.get("tooltipController");if(n&&n.clear(),!this.get("keepLegend")){var r=this.get("legendController");r&&r.clear()}t.prototype.clearInner.call(this)},n.drawComponents=function(){t.prototype.drawComponents.call(this),this.get("keepLegend")||this._renderLegends()},n.render=function(){if(!this.get("keepPadding")&&this._isAutoPadding()){this.beforeRender(),this.drawComponents();var e=this._getAutoPadding(),n=this.get("plot");c(n.get("padding"),e)||(n.set("padding",e),n.repaint())}t.prototype.render.call(this),this._renderTooltips()},n.repaint=function(){this.get("keepPadding")||this.resetPlot(),t.prototype.repaint.call(this)},n.changeVisible=function(t){var e=this.get("wrapperEl"),n=t?"":"none";e.style.display=n},n.toDataURL=function(){var t=this.get("canvas"),e=this.get("renderer"),n=t.get("el"),i="";if("svg"===e){var r=n.cloneNode(!0),a=document.implementation.createDocumentType("svg","-//W3C//DTD SVG 1.1//EN","http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"),o=document.implementation.createDocument("http://www.w3.org/2000/svg","svg",a);o.replaceChild(r,o.documentElement);var s=(new XMLSerializer).serializeToString(o);i="data:image/svg+xml;charset=utf8,"+encodeURIComponent(s)}else"canvas"===e&&(i=n.toDataURL("image/png"));return i},n.downloadImage=function(t){var e=this,n=document.createElement("a"),i=e.get("renderer"),r=(t||"chart")+("svg"===i?".svg":".png");e.get("canvas").get("timeline").stopAllAnimations(),setTimeout(function(){var t=e.toDataURL();if(window.Blob&&window.URL&&"svg"!==i){for(var a=t.split(","),o=a[0].match(/:(.*?);/)[1],s=atob(a[1]),u=s.length,l=new Uint8Array(u);u--;)l[u]=s.charCodeAt(u);var c=new Blob([l],{type:o});window.navigator.msSaveBlob?window.navigator.msSaveBlob(c,r):n.addEventListener("click",function(){n.download=r,n.href=window.URL.createObjectURL(c)})}else n.addEventListener("click",function(){n.download=r,n.href=t});var h=document.createEvent("MouseEvents");h.initEvent("click",!1,!1),n.dispatchEvent(h)},16)},n.showTooltip=function(t){var e=this.getViewsByPoint(t);e.length&&this.get("tooltipController").showTooltip(t,e);return this},n.hideTooltip=function(){return this.get("tooltipController").hideTooltip(),this},n.getTooltipItems=function(t){var e=this.getViewsByPoint(t),n=[];return i.each(e,function(e){var r=e.get("geoms");i.each(r,function(e){var r=e.get("dataArray"),a=[];i.each(r,function(n){var i=e.findPoint(t,n);if(i){var r=e.getTipItems(i);a=a.concat(r)}}),n=n.concat(a)})}),n},n.destroy=function(){this.emit("beforedestroy"),clearTimeout(this.get("resizeTimer"));var e=this.get("canvas"),n=this.get("wrapperEl");n.parentNode.removeChild(n),t.prototype.destroy.call(this),e.destroy(),window.removeEventListener("resize",i.getWrapBehavior(this,"_initForceFitEvent")),this.emit("afterdestroy")},e}(r);t.exports=h},function(t,e,n){t.exports={Scale:n(266),Coord:n(262),Axis:n(261),Guide:n(264),Legend:n(265),Tooltip:n(267),Event:n(263)}},function(t,e,n){var i=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="list",e.cols=null,e},n.generateFacets=function(t){var e=this,n=e.fields[0];if(!n)throw"Please specify for the field for facet!";var i=e.getFieldValues(n,t),r=i.length,a=e.cols||r,o=parseInt((r+a-1)/a),s=[];return i.forEach(function(u,l){var c=parseInt(l/a),h=l%a,f=[{field:n,value:u,values:i}],p=e.getFilter(f),g=t.filter(p),d={type:e.type,count:r,colValue:u,colField:n,rowField:null,rowValue:u,colIndex:h,rowIndex:c,cols:a,rows:o,data:g,region:e.getRegion(o,a,h,c)};s.push(d)}),s},n.setXAxis=function(t,e,n){n.rowIndex!==n.rows-1&&n.cols*n.rowIndex+n.colIndex+1+n.cols<=n.count&&(e[t].label=null,e[t].title=null)},n.setYAxis=function(t,e,n){0!==n.colIndex&&(e[t].title=null,e[t].label=null)},e}(n(42));t.exports=i},function(t,e,n){var i=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="rect",e},n.generateFacets=function(t){var e=this,n=e.fields,i=[],r=1,a=1,o=n[0],s=n[1],u=[""],l=[""];return o&&(u=e.getFieldValues(o,t),a=u.length),s&&(l=e.getFieldValues(s,t),r=l.length),u.forEach(function(n,c){l.forEach(function(h,f){var p=[{field:o,value:n,values:u},{field:s,value:h,values:l}],g=e.getFilter(p),d=t.filter(g),v={type:e.type,colValue:n,rowValue:h,colField:o,rowField:s,colIndex:c,rowIndex:f,cols:a,rows:r,data:d,region:e.getRegion(r,a,c,f)};i.push(v)})}),i},n.setXAxis=function(t,e,n){n.rowIndex!==n.rows-1?(e[t].title=null,e[t].label=null):n.colIndex!==parseInt((n.cols-1)/2)&&(e[t].title=null)},n.setYAxis=function(t,e,n){0!==n.colIndex?(e[t].title=null,e[t].label=null):n.rowIndex!==parseInt((n.rows-1)/2)&&(e[t].title=null)},n.renderTitle=function(t,e){0===e.rowIndex&&this.drawColTitle(t,e),e.colIndex===e.cols-1&&this.drawRowTitle(t,e)},e}(n(42));t.exports=i},function(t,e,n){var i=n(64),r=n(22),a=n(0),o=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getPointRauis=function(t,e){return r.getPointRadius(t,e)},n.getCirclePoint=function(t,e,n){var i=this.get("coord"),r=i.getCenter(),a=this._isEmitLabels(),o=this.getPointRauis(i,n);if(0===o)return null;if(i.isTransposed){if(o>e[0]&&!a){var s=Math.asin(e[1]/(2*o));o+=e[0],t+=2*s}}else t+=2*Math.asin(e[0]/(2*o)),o+=e[1];return{x:r.x+o*Math.cos(t),y:r.y+o*Math.sin(t),angle:t,r:o}},n.getArcPoint=function(t,e){var n;return e=e||0,n=a.isArray(t.x)||a.isArray(t.y)?{x:a.isArray(t.x)?t.x[e]:t.x,y:a.isArray(t.y)?t.y[e]:t.y}:t,this.transLabelPoint(n),n},n.getPointAngle=function(t){var e=this.get("coord");return r.getPointAngle(e,t)},n.getMiddlePoint=function(t){var e=this.get("coord"),n=t.length,i={x:0,y:0};return a.each(t,function(t){i.x+=t.x,i.y+=t.y}),i.x/=n,i.y/=n,i=e.convert(i)},n._isToMiddle=function(t){return t.x.length>2},n.getLabelPoint=function(t,e,n){var i,r=t.text[n],a=1;this._isToMiddle(e)?i=this.getMiddlePoint(e.points):(1===t.text.length&&0===n?n=1:0===n&&(a=-1),i=this.getArcPoint(e,n));var o=t.offset;o=[o[0]*a,o[1]*a],t._offset=o;var s=this.getPointAngle(i),u=this.getCirclePoint(s,o,i);return u?(u.text=r,u.angle=s,u.color=e.color):u={text:""},u.rotate=this.getLabelRotate(s,o,e),u},n._isEmitLabels=function(){return this.get("label").labelEmit},n.getLabelRotate=function(t){var e;return e=180*t/Math.PI,e+=90,this._isEmitLabels()&&(e-=90),e&&(e>90?e-=180:e<-90&&(e+=180)),e/180*Math.PI},n.getLabelAlign=function(t){var e,n=this.get("coord");if(this._isEmitLabels())e=t.angle<=Math.PI/2&&t.angle>-Math.PI/2?"left":"right";else if(n.isTransposed){var i=n.getCenter(),r=this.getDefaultOffset(t);e=Math.abs(t.x-i.x)<1?"center":t.angle>Math.PI||t.angle<=0?r>0?"left":"right":r>0?"right":"left"}else e="center";return e},e}(i);t.exports=o},function(t,e,n){var i=n(0),r=n(5);t.exports={splitData:function(t){var e=this.get("viewTheme")||r;if(!t.length)return[];var n,a=[],o=[],s=this.getYScale().field;return i.each(t,function(t){n=t._origin?t._origin[s]:t[s],e.connectNulls?i.isNil(n)||o.push(t):i.isArray(n)&&i.isNil(n[0])||i.isNil(n)?o.length&&(a.push(o),o=[]):o.push(t)}),o.length&&a.push(o),a}}},function(t,e,n){function i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var r=n(8),a=n(118),o=n(0),s=function(t){!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(n,t);var e=n.prototype;function n(e){var n;return n=t.call(this,e)||this,o.assign(i(i(n)),a),n}return e.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="path",e.shapeType="line",e},e.getDrawCfg=function(e){var n=t.prototype.getDrawCfg.call(this,e);return n.isStack=this.hasStack(),n},e.draw=function(t,e,n,i){var r=this,a=this.splitData(t),s=this.getDrawCfg(t[0]);s.origin=t,o.each(a,function(t,a){if(!o.isEmpty(t)){s.splitedIndex=a,s.points=t;var u=n.drawShape(s.shape,s,e);r.appendShapeInfo(u,i+a)}})},n}(r);r.Path=s,t.exports=s},function(t,e){var n,i,r='"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"',a={defaultColor:"#1890FF",plotCfg:{padding:[20,20,95,80]},fontFamily:r,defaultLegendPosition:"bottom",colors:["#1890FF","#2FC25B","#FACC14","#223273","#8543E0","#13C2C2","#3436C7","#F04864"],colors_16:["#1890FF","#41D9C7","#2FC25B","#FACC14","#E6965C","#223273","#7564CC","#8543E0","#5C8EE6","#13C2C2","#5CA3E6","#3436C7","#B381E6","#F04864","#D598D9"],colors_24:["#1890FF","#66B5FF","#41D9C7","#2FC25B","#6EDB8F","#9AE65C","#FACC14","#E6965C","#57AD71","#223273","#738AE6","#7564CC","#8543E0","#A877ED","#5C8EE6","#13C2C2","#70E0E0","#5CA3E6","#3436C7","#8082FF","#DD81E6","#F04864","#FA7D92","#D598D9"],colors_pie:["#1890FF","#13C2C2","#2FC25B","#FACC14","#F04864","#8543E0","#3436C7","#223273"],colors_pie_16:["#1890FF","#73C9E6","#13C2C2","#6CD9B3","#2FC25B","#9DD96C","#FACC14","#E6965C","#F04864","#D66BCA","#8543E0","#8E77ED","#3436C7","#737EE6","#223273","#7EA2E6"],shapes:{point:["hollowCircle","hollowSquare","hollowDiamond","hollowBowtie","hollowTriangle","hollowHexagon","cross","tick","plus","hyphen","line"],line:["line","dash","dot"],area:["area"]},sizes:[1,10],opacities:[.1,.9],axis:{top:{position:"top",title:null,label:{offset:16,textStyle:{fill:"#545454",fontSize:12,lineHeight:16,textBaseline:"middle",fontFamily:r},autoRotate:!0},line:{lineWidth:1,stroke:"#BFBFBF"},tickLine:{lineWidth:1,stroke:"#BFBFBF",length:4,alignWithLabel:!0}},bottom:{position:"bottom",title:null,label:{offset:16,autoRotate:!0,textStyle:{fill:"#545454",fontSize:12,lineHeight:16,textBaseline:"middle",fontFamily:r}},line:{lineWidth:1,stroke:"#BFBFBF"},tickLine:{lineWidth:1,stroke:"#BFBFBF",length:4,alignWithLabel:!0}},left:{position:"left",title:null,label:{offset:8,autoRotate:!0,textStyle:{fill:"#545454",fontSize:12,lineHeight:16,textBaseline:"middle",fontFamily:r}},line:null,tickLine:null,grid:{zIndex:-1,lineStyle:{stroke:"#E9E9E9",lineWidth:1,lineDash:[3,3]},hideFirstLine:!0}},right:{position:"right",title:null,label:{offset:8,autoRotate:!0,textStyle:{fill:"#545454",fontSize:12,lineHeight:16,textBaseline:"middle",fontFamily:r}},line:null,tickLine:null,grid:{lineStyle:{stroke:"#E9E9E9",lineWidth:1,lineDash:[3,3]},hideFirstLine:!0}},circle:{zIndex:1,title:null,label:{offset:8,textStyle:{fill:"#545454",fontSize:12,lineHeight:16,fontFamily:r}},line:{lineWidth:1,stroke:"#BFBFBF"},tickLine:{lineWidth:1,stroke:"#BFBFBF",length:4,alignWithLabel:!0},grid:{lineStyle:{stroke:"#E9E9E9",lineWidth:1,lineDash:[3,3]},hideFirstLine:!0}},radius:{zIndex:0,label:{offset:12,textStyle:{fill:"#545454",fontSize:12,textBaseline:"middle",lineHeight:16,fontFamily:r}},line:{lineWidth:1,stroke:"#BFBFBF"},tickLine:{lineWidth:1,stroke:"#BFBFBF",length:4,alignWithLabel:!0},grid:{lineStyle:{stroke:"#E9E9E9",lineWidth:1,lineDash:[3,3]},type:"circle"}},helix:{grid:null,label:null,title:null,line:{lineWidth:1,stroke:"#BFBFBF"},tickLine:{lineWidth:1,length:4,stroke:"#BFBFBF",alignWithLabel:!0}}},label:{offset:20,textStyle:{fill:"#545454",fontSize:12,textBaseline:"middle",fontFamily:r}},treemapLabels:{offset:10,textStyle:{fill:"#fff",fontSize:12,textBaseline:"top",fontStyle:"bold",fontFamily:r}},innerLabels:{textStyle:{fill:"#fff",fontSize:12,textBaseline:"middle",fontFamily:r}},thetaLabels:{labelLine:{lineWidth:1},labelHeight:14,offset:30},legend:{right:{position:"right",layout:"vertical",itemMarginBottom:8,width:16,height:156,title:null,legendStyle:{LIST_CLASS:{textAlign:"left"}},textStyle:{fill:"#8C8C8C",fontSize:12,textAlign:"start",textBaseline:"middle",lineHeight:0,fontFamily:r},unCheckColor:"#bfbfbf"},left:{position:"left",layout:"vertical",itemMarginBottom:8,width:16,height:156,title:null,textStyle:{fill:"#8C8C8C",fontSize:12,textAlign:"start",textBaseline:"middle",lineHeight:20,fontFamily:r},unCheckColor:"#bfbfbf"},top:{position:"top",offset:[0,6],layout:"horizontal",title:null,itemGap:10,width:156,height:16,textStyle:{fill:"#8C8C8C",fontSize:12,textAlign:"start",textBaseline:"middle",lineHeight:20,fontFamily:r},unCheckColor:"#bfbfbf"},bottom:{position:"bottom",offset:[0,6],layout:"horizontal",title:null,itemGap:10,width:156,height:16,textStyle:{fill:"#8C8C8C",fontSize:12,textAlign:"start",textBaseline:"middle",lineHeight:20,fontFamily:r},unCheckColor:"#bfbfbf"},html:(n={},n["g2-legend"]={height:"auto",width:"auto",position:"absolute",overflow:"auto",fontSize:"12px",fontFamily:r,lineHeight:"20px",color:"#8C8C8C"},n["g2-legend-title"]={marginBottom:"4px"},n["g2-legend-list"]={listStyleType:"none",margin:0,padding:0},n["g2-legend-list-item"]={cursor:"pointer",marginBottom:"5px",marginRight:"24px"},n["g2-legend-marker"]={width:"9px",height:"9px",borderRadius:"50%",display:"inline-block",marginRight:"8px",verticalAlign:"middle"},n),gradient:{textStyle:{fill:"#8C8C8C",fontSize:12,textAlign:"center",textBaseline:"middle",lineHeight:20,fontFamily:r},lineStyle:{lineWidth:1,stroke:"#fff"},unCheckColor:"#bfbfbf"},margin:[0,20,24,5],legendMargin:24},tooltip:(i={useHtml:!0,crosshairs:!1,offset:15},i["g2-tooltip"]={position:"absolute",visibility:"hidden",zIndex:8,transition:"visibility 0.2s cubic-bezier(0.23, 1, 0.32, 1), left 0.4s cubic-bezier(0.23, 1, 0.32, 1), top 0.4s cubic-bezier(0.23, 1, 0.32, 1)",backgroundColor:"rgba(255, 255, 255, 0.9)",boxShadow:"0px 0px 10px #aeaeae",borderRadius:"3px",color:"rgb(87, 87, 87)",fontSize:"12px",fontFamily:r,lineHeight:"20px",padding:"10px 10px 6px 10px"},i["g2-tooltip-title"]={marginBottom:"4px"},i["g2-tooltip-list"]={margin:0,listStyleType:"none",padding:0},i["g2-tooltip-list-item"]={marginBottom:"4px"},i["g2-tooltip-marker"]={width:"5px",height:"5px",borderRadius:"50%",display:"inline-block",marginRight:"8px"},i["g2-tooltip-value"]={display:"inline-block",float:"right",marginLeft:"30px"},i),tooltipMarker:{symbol:function(t,e,n){return[["M",t,e],["m",-n,0],["a",n,n,0,1,0,2*n,0],["a",n,n,0,1,0,2*-n,0]]},stroke:"#fff",shadowBlur:10,shadowOffsetX:0,shadowOffSetY:0,shadowColor:"rgba(0,0,0,0.09)",lineWidth:2,radius:4},tooltipCrosshairsRect:{type:"rect",style:{fill:"#CCD6EC",opacity:.3}},tooltipCrosshairsLine:{style:{stroke:"rgba(0, 0, 0, 0.25)",lineWidth:1}},shape:{point:{lineWidth:1,fill:"#1890FF",radius:4},hollowPoint:{fill:"#fff",lineWidth:1,stroke:"#1890FF",radius:3},interval:{lineWidth:0,fill:"#1890FF",fillOpacity:.85},hollowInterval:{fill:"#fff",stroke:"#1890FF",fillOpacity:0,lineWidth:2},area:{lineWidth:0,fill:"#1890FF",fillOpacity:.6},polygon:{lineWidth:0,fill:"#1890FF",fillOpacity:1},hollowPolygon:{fill:"#fff",stroke:"#1890FF",fillOpacity:0,lineWidth:2},hollowArea:{fill:"#fff",stroke:"#1890FF",fillOpacity:0,lineWidth:2},line:{stroke:"#1890FF",lineWidth:2,fill:null},edge:{stroke:"#1890FF",lineWidth:1,fill:null},schema:{stroke:"#1890FF",lineWidth:1,fill:null}},guide:{line:{lineStyle:{stroke:"rgba(0, 0, 0, .65)",lineDash:[2,2],lineWidth:1},text:{position:"start",autoRotate:!0,style:{fill:"rgba(0, 0, 0, .45)",fontSize:12,textAlign:"start",fontFamily:r,textBaseline:"bottom"}}},text:{style:{fill:"rgba(0,0,0,.5)",fontSize:12,textBaseline:"middle",textAlign:"start",fontFamily:r}},region:{style:{lineWidth:0,fill:"#000",fillOpacity:.04}},html:{alignX:"middle",alignY:"middle"},dataRegion:{style:{region:{lineWidth:0,fill:"#000000",opacity:.04},text:{textAlign:"center",textBaseline:"bottom",fontSize:12,fill:"rgba(0, 0, 0, .65)"}}},dataMarker:{top:!0,style:{point:{r:3,fill:"#FFFFFF",stroke:"#1890FF",lineWidth:2},line:{stroke:"#A3B1BF",lineWidth:1},text:{fill:"rgba(0, 0, 0, .65)",opacity:1,fontSize:12,textAlign:"start"}},display:{point:!0,line:!0,text:!0},lineLength:20,direction:"upward",autoAdjust:!0}},pixelRatio:null};t.exports=a},function(t,e,n){var i={default:n(120),dark:n(306)};t.exports=i},function(t,e,n){var i=n(1),r=n(310),a=n(313),o=n(309),s=n(97),u=function(t){this._cfg={zIndex:0,capture:!0,visible:!0,destroyed:!1},i.assign(this._cfg,this.getDefaultCfg(),t),this.initAttrs(this._cfg.attrs),this._cfg.attrs={},this.initTransform(),this.init()};u.CFG={id:null,zIndex:0,canvas:null,parent:null,capture:!0,context:null,visible:!0,destroyed:!1},i.augment(u,r,a,s,o,{init:function(){this.setSilent("animable",!0),this.setSilent("animating",!1)},getParent:function(){return this._cfg.parent},getDefaultCfg:function(){return{}},set:function(t,e){return"zIndex"===t&&this._beforeSetZIndex&&this._beforeSetZIndex(e),"loading"===t&&this._beforeSetLoading&&this._beforeSetLoading(e),this._cfg[t]=e,this},setSilent:function(t,e){this._cfg[t]=e},get:function(t){return this._cfg[t]},show:function(){return this._cfg.visible=!0,this},hide:function(){return this._cfg.visible=!1,this},remove:function(t,e){var n=this._cfg,r=n.parent,a=n.el;return r&&i.remove(r.get("children"),this),a&&(e?r&&r._cfg.tobeRemoved.push(a):a.parentNode.removeChild(a)),(t||void 0===t)&&this.destroy(),this},destroy:function(){this.get("destroyed")||(this._attrs=null,this.removeEvent(),this._cfg={destroyed:!0})},toFront:function(){var t=this._cfg,e=t.parent;if(e){var n=e._cfg.children,i=t.el,r=n.indexOf(this);n.splice(r,1),n.push(this),i&&(i.parentNode.removeChild(i),t.el=null)}},toBack:function(){var t=this._cfg,e=t.parent;if(e){var n=e._cfg.children,i=t.el,r=n.indexOf(this);if(n.splice(r,1),n.unshift(this),i){var a=i.parentNode;a.removeChild(i),a.insertBefore(i,a.firstChild)}}},_beforeSetZIndex:function(t){var e=this._cfg.parent;this._cfg.zIndex=t,i.isNil(e)||e.sort();var n=this._cfg.el;if(n){var r=e._cfg.children,a=r.indexOf(this),o=n.parentNode;o.removeChild(n),a===r.length-1?o.appendChild(n):o.insertBefore(n,o.childNodes[a])}return t},_setAttrs:function(t){return this.attr(t),t},setZIndex:function(t){return this._cfg.zIndex=t,this._beforeSetZIndex(t)},clone:function(){return i.clone(this)},getBBox:function(){}}),t.exports=u},function(t,e,n){var i=n(1),r=n(122),a=n(327),o={},s="_INDEX";function u(t,e,n){for(var i,r=t.length-1;r>=0;r--){var a=t[r];if(a._cfg.visible&&a._cfg.capture&&(a.isGroup?i=a.getShape(e,n):a.isHit(e,n)&&(i=a)),i)break}return i}var l=function t(e){t.superclass.constructor.call(this,e),this.set("children",[]),this.set("tobeRemoved",[]),this._beforeRenderUI(),this._renderUI(),this._bindUI()};i.extend(l,r),i.augment(l,{isGroup:!0,type:"group",canFill:!0,canStroke:!0,getDefaultCfg:function(){return function t(e){if(!e._cfg&&e!==l){var n=e.superclass.constructor;n&&!n._cfg&&t(n),e._cfg={},i.merge(e._cfg,n._cfg),i.merge(e._cfg,e.CFG)}}(this.constructor),i.merge({},this.constructor._cfg)},_beforeRenderUI:function(){},_renderUI:function(){},_bindUI:function(){},addShape:function(t,e){var n=this.get("canvas");e=e||{};var r=o[t];if(r||(r=i.upperFirst(t),o[t]=r),e.attrs&&n){var s=e.attrs;if("text"===t){var u=n.get("fontFamily");u&&(s.fontFamily=s.fontFamily?s.fontFamily:u)}}e.canvas=n,e.type=t;var l=new a[r](e);return this.add(l),l},addGroup:function(t,e){var n,r=this.get("canvas");if(e=i.merge({},e),i.isFunction(t))e?(e.canvas=r,e.parent=this,n=new t(e)):n=new t({canvas:r,parent:this}),this.add(n);else if(i.isObject(t))t.canvas=r,n=new l(t),this.add(n);else{if(void 0!==t)return!1;n=new l,this.add(n)}return n},renderBack:function(t,e){var n=this.get("backShape"),r=this.getBBox();return i.merge(e,{x:r.minX-t[3],y:r.minY-t[0],width:r.width+t[1]+t[3],height:r.height+t[0]+t[2]}),n?n.attr(e):n=this.addShape("rect",{zIndex:-1,attrs:e}),this.set("backShape",n),this.sort(),n},removeChild:function(t,e){if(arguments.length>=2)this.contain(t)&&t.remove(e);else{if(1===arguments.length){if(!i.isBoolean(t))return this.contain(t)&&t.remove(!0),this;e=t}0===arguments.length&&(e=!0),l.superclass.remove.call(this,e)}return this},add:function(t){var e=this,n=e.get("children");if(i.isArray(t))i.each(t,function(t){var n=t.get("parent");n&&n.removeChild(t,!1),e._setCfgProperty(t)}),e._cfg.children=n.concat(t);else{var r=t,a=r.get("parent");a&&a.removeChild(r,!1),e._setCfgProperty(r),n.push(r)}return e},_setCfgProperty:function(t){var e=this._cfg;t.set("parent",this),t.set("canvas",e.canvas),e.timeline&&t.set("timeline",e.timeline)},contain:function(t){return this.get("children").indexOf(t)>-1},getChildByIndex:function(t){return this.get("children")[t]},getFirst:function(){return this.getChildByIndex(0)},getLast:function(){var t=this.get("children").length-1;return this.getChildByIndex(t)},getBBox:function(){var t=1/0,e=-1/0,n=1/0,r=-1/0,a=this.get("children");a.length>0?i.each(a,function(i){if(i.get("visible")){if(i.isGroup&&0===i.get("children").length)return;var a=i.getBBox();if(!a)return!0;var o=[a.minX,a.minY,1],s=[a.minX,a.maxY,1],u=[a.maxX,a.minY,1],l=[a.maxX,a.maxY,1];i.apply(o),i.apply(s),i.apply(u),i.apply(l);var c=Math.min(o[0],s[0],u[0],l[0]),h=Math.max(o[0],s[0],u[0],l[0]),f=Math.min(o[1],s[1],u[1],l[1]),p=Math.max(o[1],s[1],u[1],l[1]);c<t&&(t=c),h>e&&(e=h),f<n&&(n=f),p>r&&(r=p)}}):(t=0,e=0,n=0,r=0);var o={minX:t,minY:n,maxX:e,maxY:r};return o.x=o.minX,o.y=o.minY,o.width=o.maxX-o.minX,o.height=o.maxY-o.minY,o},getCount:function(){return this.get("children").length},sort:function(){var t=this.get("children");return i.each(t,function(t,e){return t[s]=e,t}),t.sort(function(t){return function(e,n){var i=t(e,n);return 0===i?e[s]-n[s]:i}}(function(t,e){return t.get("zIndex")-e.get("zIndex")})),this},findById:function(t){return this.find(function(e){return e.get("id")===t})},find:function(t){if(i.isString(t))return this.findById(t);var e=this.get("children"),n=null;return i.each(e,function(e){if(t(e)?n=e:e.find&&(n=e.find(t)),n)return!1}),n},findAll:function(t){var e=this.get("children"),n=[],r=[];return i.each(e,function(e){t(e)&&n.push(e),e.findAllBy&&(r=e.findAllBy(t),n=n.concat(r))}),n},findBy:function(t){var e=this.get("children"),n=null;return i.each(e,function(e){if(t(e)?n=e:e.findBy&&(n=e.findBy(t)),n)return!1}),n},findAllBy:function(t){var e=this.get("children"),n=[],r=[];return i.each(e,function(e){t(e)&&n.push(e),e.findAllBy&&(r=e.findAllBy(t),n=n.concat(r))}),n},getShape:function(t,e){var n,i=this._attrs.clip,r=this._cfg.children;if(i){var a=[t,e,1];i.invert(a,this.get("canvas")),i.isPointInPath(a[0],a[1])&&(n=u(r,t,e))}else n=u(r,t,e);return n},clearTotalMatrix:function(){if(this.get("totalMatrix")){this.setSilent("totalMatrix",null);for(var t=this._cfg.children,e=0;e<t.length;e++){t[e].clearTotalMatrix()}}},clear:function(t){for(var e=this._cfg.children,n=e.length-1;n>=0;n--)e[n].remove(!0,t);return this._cfg.children=[],this},destroy:function(){this.get("destroyed")||(this.clear(),l.superclass.destroy.call(this))},clone:function(){var t=this._cfg.children,e=new l;return i.each(t,function(t){e.add(t.clone())}),e}}),t.exports=l},function(t,e,n){var i=n(1),r=function(t,e,n,i){this.type=t,this.target=null,this.currentTarget=null,this.bubbles=n,this.cancelable=i,this.timeStamp=(new Date).getTime(),this.defaultPrevented=!1,this.propagationStopped=!1,this.removed=!1,this.event=e};i.augment(r,{preventDefault:function(){this.defaultPrevented=this.cancelable&&!0},stopPropagation:function(){this.propagationStopped=!0},remove:function(){this.remove=!0},clone:function(){return i.clone(this)},toString:function(){return"[Event (type="+this.type+")]"}}),t.exports=r},function(t,e,n){var i=n(1),r=n(6),a=n(43),o=n(45);function s(t,e,n){return t+e*Math.cos(n)}function u(t,e,n){return t+e*Math.sin(n)}var l=function t(e){t.superclass.constructor.call(this,e)};l.ATTRS={x:0,y:0,r:0,startAngle:0,endAngle:0,clockwise:!1,lineWidth:1,startArrow:!1,endArrow:!1},i.extend(l,r),i.augment(l,{canStroke:!0,type:"arc",getDefaultAttrs:function(){return{x:0,y:0,r:0,startAngle:0,endAngle:0,clockwise:!1,lineWidth:1,startArrow:!1,endArrow:!1}},calculateBox:function(){var t=this._attrs,e=t.x,n=t.y,i=t.r,r=t.startAngle,o=t.endAngle,s=t.clockwise,u=this.getHitLineWidth()/2,l=a.box(e,n,i,r,o,s);return l.minX-=u,l.minY-=u,l.maxX+=u,l.maxY+=u,l},getStartTangent:function(){var t=this._attrs,e=t.x,n=t.y,i=t.startAngle,r=t.r,a=t.clockwise,o=Math.PI/180;a&&(o*=-1);var l=[],c=s(e,r,i+o),h=u(n,r,i+o),f=s(e,r,i),p=u(n,r,i);return l.push([c,h]),l.push([f,p]),l},getEndTangent:function(){var t=this._attrs,e=t.x,n=t.y,i=t.endAngle,r=t.r,a=t.clockwise,o=Math.PI/180,l=[];a&&(o*=-1);var c=s(e,r,i+o),h=u(n,r,i+o),f=s(e,r,i),p=u(n,r,i);return l.push([f,p]),l.push([c,h]),l},createPath:function(t){var e=this._attrs,n=e.x,i=e.y,r=e.r,a=e.startAngle,o=e.endAngle,s=e.clockwise;(t=t||self.get("context")).beginPath(),t.arc(n,i,r,a,o,s)},afterPath:function(t){var e=this._attrs;if(t=t||this.get("context"),e.startArrow){var n=this.getStartTangent();o.addStartArrow(t,e,n[0][0],n[0][1],n[1][0],n[1][1])}if(e.endArrow){var i=this.getEndTangent();o.addEndArrow(t,e,i[0][0],i[0][1],i[1][0],i[1][1])}}}),t.exports=l},function(t,e,n){var i=n(1),r=n(6),a=function t(e){t.superclass.constructor.call(this,e)};a.ATTRS={x:0,y:0,r:0,lineWidth:1},i.extend(a,r),i.augment(a,{canFill:!0,canStroke:!0,type:"circle",getDefaultAttrs:function(){return{lineWidth:1}},calculateBox:function(){var t=this._attrs,e=t.x,n=t.y,i=t.r,r=this.getHitLineWidth()/2+i;return{minX:e-r,minY:n-r,maxX:e+r,maxY:n+r}},createPath:function(t){var e=this._attrs,n=e.x,i=e.y,r=e.r;t.beginPath(),t.arc(n,i,r,0,2*Math.PI,!1),t.closePath()}}),t.exports=a},function(t,e,n){var i=n(1),r=n(6),a=function t(e){t.superclass.constructor.call(this,e)};i.extend(a,r),i.augment(a,{canFill:!0,canStroke:!0,type:"dom",calculateBox:function(){var t=this._attrs,e=t.x,n=t.y,i=t.width,r=t.height,a=this.getHitLineWidth()/2;return{minX:e-a,minY:n-a,maxX:e+i+a,maxY:n+r+a}}}),t.exports=a},function(t,e,n){var i=n(1),r=n(6),a=function t(e){t.superclass.constructor.call(this,e)};a.ATTRS={x:0,y:0,rx:1,ry:1,lineWidth:1},i.extend(a,r),i.augment(a,{canFill:!0,canStroke:!0,type:"ellipse",getDefaultAttrs:function(){return{lineWidth:1}},calculateBox:function(){var t=this._attrs,e=t.x,n=t.y,i=t.rx,r=t.ry,a=this.getHitLineWidth(),o=i+a/2,s=r+a/2;return{minX:e-o,minY:n-s,maxX:e+o,maxY:n+s}},createPath:function(t){var e=this._attrs,n=e.x,r=e.y,a=e.rx,o=e.ry;t=t||self.get("context");var s=a>o?a:o,u=a>o?1:a/o,l=a>o?o/a:1,c=[1,0,0,0,1,0,0,0,1];i.mat3.scale(c,c,[u,l]),i.mat3.translate(c,c,[n,r]),t.beginPath(),t.save(),t.transform(c[0],c[1],c[3],c[4],c[6],c[7]),t.arc(0,0,s,0,2*Math.PI),t.restore(),t.closePath()}}),t.exports=a},function(t,e,n){var i=n(1),r=n(6),a=n(43),o=function t(e){t.superclass.constructor.call(this,e)};o.ATTRS={x:0,y:0,rs:0,re:0,startAngle:0,endAngle:0,clockwise:!1,lineWidth:1},i.extend(o,r),i.augment(o,{canFill:!0,canStroke:!0,type:"fan",getDefaultAttrs:function(){return{clockwise:!1,lineWidth:1,rs:0,re:0}},calculateBox:function(){var t=this._attrs,e=t.x,n=t.y,i=t.rs,r=t.re,o=t.startAngle,s=t.endAngle,u=t.clockwise,l=this.getHitLineWidth(),c=a.box(e,n,i,o,s,u),h=a.box(e,n,r,o,s,u),f=l/2;return{minX:Math.min(c.minX,h.minX)-f,minY:Math.min(c.minY,h.minY)-f,maxX:Math.max(c.maxX,h.maxX)+f,maxY:Math.max(c.maxY,h.maxY)+f}},createPath:function(t){var e=this._attrs,n=e.x,i=e.y,r=e.rs,a=e.re,o=e.startAngle,s=e.endAngle,u=e.clockwise,l={x:Math.cos(o)*r+n,y:Math.sin(o)*r+i},c={x:Math.cos(o)*a+n,y:Math.sin(o)*a+i},h={x:Math.cos(s)*r+n,y:Math.sin(s)*r+i};(t=t||self.get("context")).beginPath(),t.moveTo(l.x,l.y),t.lineTo(c.x,c.y),t.arc(n,i,a,o,s,u),t.lineTo(h.x,h.y),t.arc(n,i,r,s,o,!u),t.closePath()}}),t.exports=o},function(t,e,n){var i=n(1),r=n(6),a=function t(e){t.superclass.constructor.call(this,e)};a.ATTRS={x:0,y:0,img:void 0,width:0,height:0,sx:null,sy:null,swidth:null,sheight:null},i.extend(a,r),i.augment(a,{type:"image",isHitBox:function(){return!1},calculateBox:function(){var t=this._attrs;this._cfg.attrs&&this._cfg.attrs.img===t.img||this._setAttrImg();var e=t.x,n=t.y;return{minX:e,minY:n,maxX:e+t.width,maxY:n+t.height}},_beforeSetLoading:function(t){var e=this.get("canvas");return!1===t&&!0===this.get("toDraw")&&(this._cfg.loading=!1,e.draw()),t},_setAttrImg:function(){var t=this,e=t._attrs,n=e.img;if(!i.isString(n))return n instanceof Image?(e.width||t.attr("width",n.width),e.height||t.attr("height",n.height),n):n instanceof HTMLElement&&i.isString(n.nodeName)&&"CANVAS"===n.nodeName.toUpperCase()?(e.width||t.attr("width",Number(n.getAttribute("width"))),e.height||t.attr("height",Number(n.getAttribute("height"))),n):n instanceof ImageData?(e.width||t.attr("width",n.width),e.height||t.attr("height",n.height),n):null;var r=new Image;r.onload=function(){if(t.get("destroyed"))return!1;t.attr("imgSrc",n),t.attr("img",r);var e=t.get("callback");e&&e.call(t),t.set("loading",!1)},r.src=n,r.crossOrigin="Anonymous",t.set("loading",!0)},drawInner:function(t){this._cfg.hasUpdate&&this._setAttrImg(),this.get("loading")?this.set("toDraw",!0):(this._drawImage(t),this._cfg.hasUpdate=!1)},_drawImage:function(t){var e=this._attrs,n=e.x,r=e.y,a=e.img,o=e.width,s=e.height,u=e.sx,l=e.sy,c=e.swidth,h=e.sheight;this.set("toDraw",!1);var f=a;if(f instanceof ImageData&&((f=new Image).src=a),f instanceof Image||f instanceof HTMLElement&&i.isString(f.nodeName)&&"CANVAS"===f.nodeName.toUpperCase()){if(i.isNil(u)||i.isNil(l)||i.isNil(c)||i.isNil(h))return void t.drawImage(f,n,r,o,s);if(!(i.isNil(u)||i.isNil(l)||i.isNil(c)||i.isNil(h)))return void t.drawImage(f,u,l,c,h,n,r,o,s)}}}),t.exports=a},function(t,e,n){var i=n(1),r=n(6),a=n(45),o=n(44),s=function t(e){t.superclass.constructor.call(this,e)};s.ATTRS={x1:0,y1:0,x2:0,y2:0,lineWidth:1,startArrow:!1,endArrow:!1},i.extend(s,r),i.augment(s,{canStroke:!0,type:"line",getDefaultAttrs:function(){return{lineWidth:1,startArrow:!1,endArrow:!1}},calculateBox:function(){var t=this._attrs,e=t.x1,n=t.y1,i=t.x2,r=t.y2,a=this.getHitLineWidth();return o.box(e,n,i,r,a)},createPath:function(t){var e=this._attrs,n=e.x1,i=e.y1,r=e.x2,a=e.y2;(t=t||self.get("context")).beginPath(),t.moveTo(n,i),t.lineTo(r,a)},afterPath:function(t){var e=this._attrs,n=e.x1,i=e.y1,r=e.x2,o=e.y2;t=t||this.get("context"),e.startArrow&&a.addStartArrow(t,e,r,o,n,i),e.endArrow&&a.addEndArrow(t,e,n,i,r,o)},getPoint:function(t){var e=this._attrs;return{x:o.at(e.x1,e.x2,t),y:o.at(e.y1,e.y2,t)}}}),t.exports=s},function(t,e){t.exports={xAt:function(t,e,n,i,r){return e*Math.cos(t)*Math.cos(r)-n*Math.sin(t)*Math.sin(r)+i},yAt:function(t,e,n,i,r){return e*Math.sin(t)*Math.cos(r)+n*Math.cos(t)*Math.sin(r)+i},xExtrema:function(t,e,n){return Math.atan(-n/e*Math.tan(t))},yExtrema:function(t,e,n){return Math.atan(n/(e*Math.tan(t)))}}},function(t,e,n){var i=n(1),r=i.vec2;function a(t,e,n,i){var r=1-i;return r*(r*t+2*i*e)+i*i*n}function o(t,e,n,i,o,s,u,l,c){var h,f,p,g,d,v,y,m=.005,x=1/0,b=[u,l];for(d=0;d<1;d+=.05)p=[a(t,n,o,d),a(e,i,s,d)],(f=r.squaredDistance(b,p))<x&&(h=d,x=f);for(x=1/0,y=0;y<32&&!(m<1e-4);y++){var _=h-m,w=h+m;p=[a(t,n,o,_),a(e,i,s,_)],f=r.squaredDistance(b,p),_>=0&&f<x?(h=_,x=f):(g=[a(t,n,o,w),a(e,i,s,w)],v=r.squaredDistance(b,g),w<=1&&v<x?(h=w,x=v):m*=.5)}return c&&(c.x=a(t,n,o,h),c.y=a(e,i,s,h)),Math.sqrt(x)}t.exports={at:a,projectPoint:function(t,e,n,i,r,a,s,u){var l={};return o(t,e,n,i,r,a,s,u,l),l},pointDistance:o,extrema:function(t,e,n){var r=t+n-2*e;if(i.isNumberEqual(r,0))return[.5];var a=(t-e)/r;return a<=1&&a>=0?[a]:[]}}},function(t,e,n){var i=n(1),r=n(6),a=n(46),o=n(34),s=n(45),u=n(70),l=n(68),c=function t(e){t.superclass.constructor.call(this,e)};c.ATTRS={path:null,lineWidth:1,startArrow:!1,endArrow:!1},i.extend(c,r),i.augment(c,{canFill:!0,canStroke:!0,type:"path",getDefaultAttrs:function(){return{lineWidth:1,startArrow:!1,endArrow:!1}},_afterSetAttrPath:function(t){if(i.isNil(t))return this.setSilent("segments",null),void this.setSilent("box",void 0);var e,n=o.parsePath(t),r=[];if(i.isArray(n)&&0!==n.length&&("M"===n[0][0]||"m"===n[0][0])){for(var s=n.length,u=0;u<n.length;u++){var l=n[u];e=new a(l,e,u===s-1),r.push(e)}this.setSilent("segments",r),this.setSilent("tCache",null),this.setSilent("box",null)}},calculateBox:function(){var t=this.get("segments");if(!t)return null;var e=this.getHitLineWidth(),n=1/0,r=-1/0,a=1/0,o=-1/0;return i.each(t,function(t){t.getBBox(e);var i=t.box;i&&(i.minX<n&&(n=i.minX),i.maxX>r&&(r=i.maxX),i.minY<a&&(a=i.minY),i.maxY>o&&(o=i.maxY))}),n===1/0||a===1/0?{minX:0,minY:0,maxX:0,maxY:0}:{minX:n,minY:a,maxX:r,maxY:o}},_setTcache:function(){var t,e,n,r,a=0,o=0,s=[],u=this._cfg.curve;u&&(i.each(u,function(t,e){n=u[e+1],r=t.length,n&&(a+=l.len(t[r-2],t[r-1],n[1],n[2],n[3],n[4],n[5],n[6]))}),i.each(u,function(i,c){n=u[c+1],r=i.length,n&&((t=[])[0]=o/a,e=l.len(i[r-2],i[r-1],n[1],n[2],n[3],n[4],n[5],n[6]),o+=e,t[1]=o/a,s.push(t))}),this._cfg.tCache=s)},_calculateCurve:function(){var t=this._attrs.path;this._cfg.curve=u.pathTocurve(t)},getStartTangent:function(){var t,e,n,r,a=this.get("segments");if(a.length>1)if(t=a[0].endPoint,e=a[1].endPoint,n=a[1].startTangent,r=[],i.isFunction(n)){var o=n();r.push([t.x-o[0],t.y-o[1]]),r.push([t.x,t.y])}else r.push([e.x,e.y]),r.push([t.x,t.y]);return r},getEndTangent:function(){var t,e,n,r,a=this.get("segments"),o=a.length;if(o>1)if(t=a[o-2].endPoint,e=a[o-1].endPoint,n=a[o-1].endTangent,r=[],i.isFunction(n)){var s=n();r.push([e.x-s[0],e.y-s[1]]),r.push([e.x,e.y])}else r.push([t.x,t.y]),r.push([e.x,e.y]);return r},getPoint:function(t){var e,n,r=this._cfg.tCache;r||(this._calculateCurve(),this._setTcache(),r=this._cfg.tCache);var a=this._cfg.curve;if(!r)return a?{x:a[0][1],y:a[0][2]}:null;i.each(r,function(i,r){t>=i[0]&&t<=i[1]&&(e=(t-i[0])/(i[1]-i[0]),n=r)});var o=a[n];if(i.isNil(o)||i.isNil(n))return null;var s=o.length,u=a[n+1];return{x:l.at(o[s-2],u[1],u[3],u[5],1-e),y:l.at(o[s-1],u[2],u[4],u[6],1-e)}},createPath:function(t){var e=this.get("segments");if(i.isArray(e)){(t=t||this.get("context")).beginPath();for(var n=e.length,r=0;r<n;r++)e[r].draw(t)}},afterPath:function(t){var e=this._attrs,n=this.get("segments"),r=e.path;if(t=t||this.get("context"),i.isArray(n)&&1!==n.length&&(e.startArrow||e.endArrow)&&"z"!==r[r.length-1]&&"Z"!==r[r.length-1]&&!e.fill){var a=this.getStartTangent();s.addStartArrow(t,e,a[0][0],a[0][1],a[1][0],a[1][1]);var o=this.getEndTangent();s.addEndArrow(t,e,o[0][0],o[0][1],o[1][0],o[1][1])}}}),t.exports=c},function(t,e,n){var i=n(1),r=n(6),a=function t(e){t.superclass.constructor.call(this,e)};a.ATTRS={points:null,lineWidth:1},i.extend(a,r),i.augment(a,{canFill:!0,canStroke:!0,type:"polygon",getDefaultAttrs:function(){return{lineWidth:1}},calculateBox:function(){var t=this._attrs.points,e=this.getHitLineWidth();if(!t||0===t.length)return null;var n=1/0,r=1/0,a=-1/0,o=-1/0;i.each(t,function(t){var e=t[0],i=t[1];e<n&&(n=e),e>a&&(a=e),i<r&&(r=i),i>o&&(o=i)});var s=e/2;return{minX:n-s,minY:r-s,maxX:a+s,maxY:o+s}},createPath:function(t){var e=this._attrs.points;e.length<2||((t=t||this.get("context")).beginPath(),i.each(e,function(e,n){0===n?t.moveTo(e[0],e[1]):t.lineTo(e[0],e[1])}),t.closePath())}}),t.exports=a},function(t,e,n){var i=n(1),r=n(6),a=n(45),o=n(44),s=function t(e){t.superclass.constructor.call(this,e)};s.ATTRS={points:null,lineWidth:1,startArrow:!1,endArrow:!1,tCache:null},i.extend(s,r),i.augment(s,{canStroke:!0,type:"polyline",tCache:null,getDefaultAttrs:function(){return{lineWidth:1,startArrow:!1,endArrow:!1}},calculateBox:function(){var t=this._attrs,e=this.getHitLineWidth(),n=t.points;if(!n||0===n.length)return null;var r=1/0,a=1/0,o=-1/0,s=-1/0;i.each(n,function(t){var e=t[0],n=t[1];e<r&&(r=e),e>o&&(o=e),n<a&&(a=n),n>s&&(s=n)});var u=e/2;return{minX:r-u,minY:a-u,maxX:o+u,maxY:s+u}},_setTcache:function(){var t,e,n=this._attrs.points,r=0,a=0,s=[];n&&0!==n.length&&(i.each(n,function(t,e){n[e+1]&&(r+=o.len(t[0],t[1],n[e+1][0],n[e+1][1]))}),r<=0||(i.each(n,function(i,u){n[u+1]&&((t=[])[0]=a/r,e=o.len(i[0],i[1],n[u+1][0],n[u+1][1]),a+=e,t[1]=a/r,s.push(t))}),this.tCache=s))},createPath:function(t){var e,n,i=this._attrs.points;if(!(i.length<2)){for((t=t||this.get("context")).beginPath(),t.moveTo(i[0][0],i[0][1]),n=1,e=i.length-1;n<e;n++)t.lineTo(i[n][0],i[n][1]);t.lineTo(i[e][0],i[e][1])}},getStartTangent:function(){var t=this.__attrs.points,e=[];return e.push([t[1][0],t[1][1]]),e.push([t[0][0],t[0][1]]),e},getEndTangent:function(){var t=this.__attrs.points,e=t.length-1,n=[];return n.push([t[e-1][0],t[e-1][1]]),n.push([t[e][0],t[e][1]]),n},afterPath:function(t){var e=this._attrs,n=e.points,i=n.length-1;t=t||this.get("context"),e.startArrow&&a.addStartArrow(t,e,n[1][0],n[1][1],n[0][0],n[0][1]),e.endArrow&&a.addEndArrow(t,e,n[i-1][0],n[i-1][1],n[i][0],n[i][1])},getPoint:function(t){var e,n,r=this._attrs.points,a=this.tCache;return a||(this._setTcache(),a=this.tCache),i.each(a,function(i,r){t>=i[0]&&t<=i[1]&&(e=(t-i[0])/(i[1]-i[0]),n=r)}),{x:o.at(r[n][0],r[n+1][0],e),y:o.at(r[n][1],r[n+1][1],e)}}}),t.exports=s},function(t,e,n){var i=n(1),r=n(34).parseRadius,a=n(6),o=function t(e){t.superclass.constructor.call(this,e)};o.ATTRS={x:0,y:0,width:0,height:0,radius:0,lineWidth:1},i.extend(o,a),i.augment(o,{canFill:!0,canStroke:!0,type:"rect",getDefaultAttrs:function(){return{lineWidth:1,radius:0}},calculateBox:function(){var t=this._attrs,e=t.x,n=t.y,i=t.width,r=t.height,a=this.getHitLineWidth()/2;return{minX:e-a,minY:n-a,maxX:e+i+a,maxY:n+r+a}},createPath:function(t){var e=this._attrs,n=e.x,i=e.y,a=e.width,o=e.height,s=e.radius;if((t=t||this.get("context")).beginPath(),0===s)t.rect(n,i,a,o);else{var u=r(s);t.moveTo(n+u.r1,i),t.lineTo(n+a-u.r2,i),0!==u.r2&&t.arc(n+a-u.r2,i+u.r2,u.r2,-Math.PI/2,0),t.lineTo(n+a,i+o-u.r3),0!==u.r3&&t.arc(n+a-u.r3,i+o-u.r3,u.r3,0,Math.PI/2),t.lineTo(n+u.r4,i+o),0!==u.r4&&t.arc(n+u.r4,i+o-u.r4,u.r4,Math.PI/2,Math.PI),t.lineTo(n,i+u.r1),0!==u.r1&&t.arc(n+u.r1,i+u.r1,u.r1,Math.PI,1.5*Math.PI),t.closePath()}}}),t.exports=o},function(t,e,n){var i=n(1),r=n(6),a=function t(e){t.superclass.constructor.call(this,e)};a.ATTRS={x:0,y:0,text:null,fontSize:12,fontFamily:"sans-serif",fontStyle:"normal",fontWeight:"normal",fontVariant:"normal",textAlign:"start",textBaseline:"bottom",lineHeight:null,textArr:null},i.extend(a,r),i.augment(a,{canFill:!0,canStroke:!0,type:"text",getDefaultAttrs:function(){return{lineWidth:1,lineCount:1,fontSize:12,fontFamily:"sans-serif",fontStyle:"normal",fontWeight:"normal",fontVariant:"normal",textAlign:"start",textBaseline:"bottom"}},initTransform:function(){var t=this._attrs.fontSize;t&&+t<12&&this.transform([["t",-1*this._attrs.x,-1*this._attrs.y],["s",+t/12,+t/12],["t",this._attrs.x,this._attrs.y]])},_assembleFont:function(){var t=this._attrs,e=t.fontSize,n=t.fontFamily,i=t.fontWeight,r=t.fontStyle,a=t.fontVariant;t.font=[r,a,i,e+"px",n].join(" ")},_setAttrText:function(){var t=this._attrs,e=t.text,n=null;if(i.isString(e)&&-1!==e.indexOf("\n")){var r=(n=e.split("\n")).length;t.lineCount=r}t.textArr=n},_getTextHeight:function(){var t=this._attrs,e=t.lineCount,n=1*t.fontSize;return e>1?n*e+this._getSpaceingY()*(e-1):n},isHitBox:function(){return!1},calculateBox:function(){var t=this._attrs,e=this._cfg;e.attrs&&!e.hasUpdate||(this._assembleFont(),this._setAttrText()),t.textArr||this._setAttrText();var n=t.x,i=t.y,r=this.measureText();if(!r)return{minX:n,minY:i,maxX:n,maxY:i};var a=this._getTextHeight(),o=t.textAlign,s=t.textBaseline,u=this.getHitLineWidth(),l={x:n,y:i-a};o&&("end"===o||"right"===o?l.x-=r:"center"===o&&(l.x-=r/2)),s&&("top"===s?l.y+=a:"middle"===s&&(l.y+=a/2)),this.set("startPoint",l);var c=u/2;return{minX:l.x-c,minY:l.y-c,maxX:l.x+r+c,maxY:l.y+a+c}},_getSpaceingY:function(){var t=this._attrs,e=t.lineHeight,n=1*t.fontSize;return e?e-n:.14*n},drawInner:function(t){var e=this._attrs,n=this._cfg;n.attrs&&!n.hasUpdate||(this._assembleFont(),this._setAttrText()),t.font=e.font;var r=e.text;if(r){var a=e.textArr,o=e.x,s=e.y;if(t.beginPath(),this.hasStroke()){var u=e.strokeOpacity;i.isNil(u)||1===u||(t.globalAlpha=u),a?this._drawTextArr(t,!1):t.strokeText(r,o,s),t.globalAlpha=1}if(this.hasFill()){var l=e.fillOpacity;i.isNil(l)||1===l||(t.globalAlpha=l),a?this._drawTextArr(t,!0):t.fillText(r,o,s)}n.hasUpdate=!1}},_drawTextArr:function(t,e){var n,r=this._attrs.textArr,a=this._attrs.textBaseline,o=1*this._attrs.fontSize,s=this._getSpaceingY(),u=this._attrs.x,l=this._attrs.y,c=this.getBBox(),h=c.maxY-c.minY;i.each(r,function(i,r){n=l+r*(s+o)-h+o,"middle"===a&&(n+=h-o-(h-o)/2),"top"===a&&(n+=h-o),e?t.fillText(i,u,n):t.strokeText(i,u,n)})},measureText:function(){var t,e=this._attrs,n=e.text,r=e.font,a=e.textArr,o=0;if(!i.isNil(n)){var s=document.createElement("canvas").getContext("2d");return s.save(),s.font=r,a?i.each(a,function(e){t=s.measureText(e).width,o<t&&(o=t),s.restore()}):(o=s.measureText(n).width,s.restore()),o}}}),t.exports=a},function(t,e,n){t.exports={isFunction:n(13),isObject:n(36),isBoolean:n(181),isNil:n(7),isString:n(14),isArray:n(4),isNumber:n(11),isEmpty:n(157),uniqueId:n(184),clone:n(73),deepMix:n(74),assign:n(10),merge:n(74),upperFirst:n(179),each:n(2),isEqual:n(76),toArray:n(52),extend:n(152),augment:n(148),remove:n(146),isNumberEqual:n(50),toRadian:n(162),toDegree:n(160),mod:n(159),clamp:n(77),createDom:n(149),modifyCSS:n(150),requestAnimationFrame:n(151),getRatio:function(){return window.devicePixelRatio?window.devicePixelRatio:2},mat3:n(78),vec2:n(164),vec3:n(165),transform:n(163)}},function(t,e,n){var i=n(2);t.exports=function(t){var e,n={},r=[],a=t.isRounding,o=function(t){var e=[];return i(t,function(t){e=e.concat(t)}),e}(t.data),s=o.length,u=t.maxCount||8;if(a?2===(e=function(t,e){var n;for(n=e;n>0&&t%n!=0;n--);if(1===n)for(n=e;n>0&&(t-1)%n!=0;n--);return n}(s-1,u-1)+1)?e=u:e<u-4&&(e=u-4):e=u,!a&&s<=e+e/2)r=[].concat(o);else{for(var l=parseInt(s/(e-1),10),c=o.map(function(t,e){return e%l==0?o.slice(e,e+l):null}).filter(function(t){return t}),h=1,f=c.length;h<f&&(a?h*l<s-l:h<e-1);h++)r.push(c[h][0]);if(o.length){r.unshift(o[0]);var p=o[s-1];-1===r.indexOf(p)&&r.push(p)}}return n.categories=o,n.ticks=r,n}},function(t,e){var n=12;function i(t,e){var n=t.length;if(0===n)return NaN;var i=t[0];if(e<t[0])return NaN;if(e>=t[n-1])return t[n-1];for(var r=1;r<t.length&&!(e<t[r]);r++)i=t[r];return i}function r(t,e){var n,i=t.length;if(0===i)return NaN;if(e>t[i-1])return NaN;if(e<t[0])return t[0];for(var r=1;r<t.length;r++)if(e<=t[r]){n=t[r];break}return n}var a={snapFactorTo:function(t,e,i){if(isNaN(t))return NaN;var r=1;if(0!==t){t<0&&(r=-1);var o=function(t){var e=1;if(t===1/0||t===-1/0)throw new Error("Not support Infinity!");if(t<1){for(var i=0;t<1;)e/=10,t*=10,i++;e.toString().length>n&&(e=parseFloat(e.toFixed(i)))}else for(;t>10;)e*=10,t/=10;return e}(t*=r);r*=o,t/=o}var s=(t="floor"===i?a.snapFloor(e,t):"ceil"===i?a.snapCeiling(e,t):a.snapTo(e,t))*r;Math.abs(r)<1&&s.toString().length>n&&(s=t/parseInt(1/r)*(r>0?1:-1));return s},snapMultiple:function(t,e,n){return("ceil"===n?Math.ceil(t/e):"floor"===n?Math.floor(t/e):Math.round(t/e))*e},snapTo:function(t,e){var n=i(t,e),a=r(t,e);if(isNaN(n)||isNaN(a)){if(t[0]>=e)return t[0];var o=t[t.length-1];if(o<=e)return o}return Math.abs(e-n)<Math.abs(a-e)?n:a},snapFloor:function(t,e){return i(t,e)},snapCeiling:function(t,e){return r(t,e)},fixedBase:function(t,e){var n=e.toString(),i=n.indexOf(".");if(-1===i)return Math.round(t);var r=n.substr(i+1).length;return r>20&&(r=20),parseFloat(t.toFixed(r))}};t.exports=a},function(t,e,n){var i=n(23),r=n(140),a=n(2),o=n(11),s=n(14),u=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){t.prototype._initDefaultCfg.call(this),this.type="cat",this.isCategory=!0,this.isRounding=!0},n.init=function(){var t=this.values,e=this.tickCount;if(a(t,function(e,n){t[n]=e.toString()}),!this.ticks){var n=t;if(e)n=r({maxCount:e,data:t,isRounding:this.isRounding}).ticks;this.ticks=n}},n.getText=function(e){return-1===this.values.indexOf(e)&&o(e)&&(e=this.values[Math.round(e)]),t.prototype.getText.call(this,e)},n.translate=function(t){var e=this.values.indexOf(t);return-1===e&&o(t)?e=t:-1===e&&(e=NaN),e},n.scale=function(t){var e=this.rangeMin(),n=this.rangeMax();return(s(t)||-1!==this.values.indexOf(t))&&(t=this.translate(t)),e+(this.values.length>1?t/(this.values.length-1):t)*(n-e)},n.invert=function(t){if(s(t))return t;var e=this.rangeMin(),n=this.rangeMax();t<e&&(t=e),t>n&&(t=n);var i=(t-e)/(n-e),r=Math.round(i*(this.values.length-1))%this.values.length;return r=r||0,this.values[r]},e}(i);i.Cat=u,t.exports=u},function(t,e,n){var i=n(177),r=n(23);r.Linear=n(47),r.Identity=n(333),r.Cat=n(142),r.Time=n(337),r.TimeCat=n(336),r.Log=n(334),r.Pow=n(335);var a=function(t){if(r.hasOwnProperty(t)){var e=i(t);r[e]=function(e){return new r[t](e)}}};for(var o in r)a(o);var s=["cat","timeCat"];r.isCategory=function(t){return s.indexOf(t)>=0},t.exports=r},function(t,e,n){var i=n(14),r=n(182);t.exports={toTimeStamp:function(t){return i(t)&&(t=t.indexOf("T")>0?new Date(t).getTime():new Date(t.replace(/-/gi,"/")).getTime()),r(t)&&(t=t.getTime()),t}}},function(t,e,n){var i=n(19),r=Array.prototype.splice;t.exports=function(t,e){if(!i(t))return[];for(var n=t?e.length:0,a=n-1;n--;){var o=void 0,s=e[n];n!==a&&s===o||(o=s,r.call(t,s,1))}return t}},function(t,e){var n=Array.prototype,i=n.splice,r=n.indexOf,a=n.slice;t.exports=function(t){for(var e=a.call(arguments,1),n=0;n<e.length;n++)for(var o=e[n],s=-1;(s=r.call(t,o))>-1;)i.call(t,s,1);return t}},function(t,e,n){var i=n(2),r=n(48);t.exports=function(t){var e=[];return i(t,function(t){r(e,t)||e.push(t)}),e}},function(t,e,n){var i=n(13),r=n(52),a=n(10);t.exports=function(t){for(var e=r(arguments),n=1;n<e.length;n++){var o=e[n];i(o)&&(o=o.prototype),a(t.prototype,o)}}},function(t,e){var n=document.createElement("table"),i=document.createElement("tr"),r=/^\s*<(\w+|!)[^>]*>/,a={tr:document.createElement("tbody"),tbody:n,thead:n,tfoot:n,td:i,th:i,"*":document.createElement("div")};t.exports=function(t){var e=r.test(t)&&RegExp.$1;e in a||(e="*");var n=a[e];t=t.replace(/(^\s*)|(\s*$)/g,""),n.innerHTML=""+t;var i=n.childNodes[0];return n.removeChild(i),i}},function(t,e){t.exports=function(t,e){if(t)for(var n in e)e.hasOwnProperty(n)&&(t.style[n]=e[n]);return t}},function(t,e){t.exports=function(t){return(window.requestAnimationFrame||window.webkitRequestAnimationFrame||function(t){return setTimeout(t,16)})(t)}},function(t,e,n){var i=n(13),r=n(10);t.exports=function(t,e,n,a){i(e)||(n=e,e=t,t=function(){});var o=Object.create?function(t,e){return Object.create(t,{constructor:{value:e}})}:function(t,e){function n(){}n.prototype=t;var i=new n;return i.constructor=e,i},s=o(e.prototype,t);return t.prototype=r(s,t.prototype),t.superclass=o(e.prototype,e),r(s,n),r(t,a),t}},function(t,e,n){var i=n(2),r=n(4),a=Object.prototype.hasOwnProperty;t.exports=function(t,e){if(!e||!r(t))return t;var n={},o=null;return i(t,function(t){o=e(t),a.call(n,o)?n[o].push(t):n[o]=[t]}),n}},function(t,e,n){var i=n(13),r=n(4),a=n(153);t.exports=function(t,e){if(!e)return{0:t};if(!i(e)){var n=r(e)?e:e.replace(/\s+/g,"").split("*");e=function(t){for(var e="_",i=0,r=n.length;i<r;i++)e+=t[n[i]]&&t[n[i]].toString();return e}}return a(t,e)}},function(t,e,n){var i=n(154);t.exports=function(t,e){if(!e)return[t];var n=i(t,e),r=[];for(var a in n)r.push(n[a]);return r}},function(t,e,n){var i=n(2),r=n(10),a=n(358),o=n(344),s=n(360),u=n(362),l=n(370),c=n(51),h=n(381),f=n(385),p=n(389),g=n(394),d={DOMUtil:a,DomUtil:a,MatrixUtil:c,PathUtil:f,arrayUtil:o,domUtil:a,eventUtil:s,formatUtil:u,mathUtil:l,matrixUtil:c,objectUtil:h,stringUtil:p,pathUtil:f,typeUtil:g,augment:n(148),clone:n(73),debounce:n(349),deepMix:n(74),each:i,extend:n(152),filter:n(75),group:n(155),groupBy:n(153),groupToMap:n(154),indexOf:n(366),isEmpty:n(157),isEqual:n(76),isEqualWith:n(367),map:n(368),mix:r,pick:n(388),throttle:n(393),toArray:n(52),toString:n(35),uniqueId:n(184)};i([a,o,s,u,l,c,h,f,p,g],function(t){r(d,t)}),t.exports=d},function(t,e,n){var i=n(7),r=n(19),a=n(180),o=n(183),s=Object.prototype.hasOwnProperty;t.exports=function(t){if(i(t))return!0;if(r(t))return!t.length;var e=a(t);if("Map"===e||"Set"===e)return!t.size;if(o(t))return!Object.keys(t).length;for(var n in t)if(s.call(t,n))return!1;return!0}},function(t,e,n){var i=n(4),r=n(13),a=n(2);t.exports=function(t,e){if(i(t)){var n=t[0],o=void 0;o=r(e)?e(t[0]):t[0][e];var s=void 0;return a(t,function(t){(s=r(e)?e(t):t[e])>o&&(n=t,o=s)}),n}}},function(t,e){t.exports=function(t,e){return(t%e+e)%e}},function(t,e){var n=180/Math.PI;t.exports=function(t){return n*t}},function(t,e){t.exports=parseInt},function(t,e){var n=Math.PI/180;t.exports=function(t){return n*t}},function(t,e,n){var i=n(73),r=n(2),a=n(78);t.exports=function(t,e){return t=i(t),r(e,function(e){switch(e[0]){case"t":a.translate(t,t,[e[1],e[2]]);break;case"s":a.scale(t,t,[e[1],e[2]]);break;case"r":a.rotate(t,t,e[1]);break;case"m":a.multiply(t,t,e[1]);break;default:return!1}}),t}},function(t,e,n){var i=n(329),r=n(77);i.angle=function(t,e){var n=i.dot(t,e)/(i.length(t)*i.length(e));return Math.acos(r(n,-1,1))},i.direction=function(t,e){return t[0]*e[1]-e[0]*t[1]},i.angleTo=function(t,e,n){var r=i.angle(t,e),a=i.direction(t,e)>=0;return n?a?2*Math.PI-r:r:a?r:2*Math.PI-r},i.vertical=function(t,e,n){return n?(t[0]=e[1],t[1]=-1*e[0]):(t[0]=-1*e[1],t[1]=e[0]),t},t.exports=i},function(t,e,n){var i=n(330);t.exports=i},function(t,e){t.exports=function(t,e){return t.hasOwnProperty(e)}},function(t,e,n){var i=n(168),r=n(7);t.exports=function(t,e){var n=i(e),a=n.length;if(r(t))return!a;for(var o=0;o<a;o+=1){var s=n[o];if(e[s]!==t[s]||!(s in t))return!1}return!0}},function(t,e,n){var i=n(2),r=n(13),a=Object.keys?function(t){return Object.keys(t)}:function(t){var e=[];return i(t,function(n,i){r(t)&&"prototype"===i||e.push(i)}),e};t.exports=a},function(t,e,n){var i=n(2),r=n(13),a=Object.values?function(t){return Object.values(t)}:function(t){var e=[];return i(t,function(n,i){r(t)&&"prototype"===i||e.push(n)}),e};t.exports=a},function(t,e){t.exports=function(t,e){for(var n=[],i=0,r=t.length;r-2*!e>i;i+=2){var a=[{x:+t[i-2],y:+t[i-1]},{x:+t[i],y:+t[i+1]},{x:+t[i+2],y:+t[i+3]},{x:+t[i+4],y:+t[i+5]}];e?i?r-4===i?a[3]={x:+t[0],y:+t[1]}:r-2===i&&(a[2]={x:+t[0],y:+t[1]},a[3]={x:+t[2],y:+t[3]}):a[0]={x:+t[r-2],y:+t[r-1]}:r-4===i?a[3]=a[2]:i||(a[0]={x:+t[i],y:+t[i+1]}),n.push(["C",(-a[0].x+6*a[1].x+a[2].x)/6,(-a[0].y+6*a[1].y+a[2].y)/6,(a[1].x+6*a[2].x-a[3].x)/6,(a[1].y+6*a[2].y-a[3].y)/6,a[2].x,a[2].y])}return n}},function(t,e){var n=/,?([a-z]),?/gi;t.exports=function(t){return t.join(",").replace(n,"$1")}},function(t,e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i="\t\n\v\f\r   ᠎             　\u2028\u2029",r=new RegExp("([a-z])["+i+",]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?["+i+"]*,?["+i+"]*)+)","ig"),a=new RegExp("(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)["+i+"]*,?["+i+"]*","ig");t.exports=function(t){if(!t)return null;if((void 0===t?"undefined":n(t))===n([]))return t;var e={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},i=[];return String(t).replace(r,function(t,n,r){var o=[],s=n.toLowerCase();if(r.replace(a,function(t,e){e&&o.push(+e)}),"m"===s&&o.length>2&&(i.push([n].concat(o.splice(0,2))),s="l",n="m"===n?"l":"L"),"o"===s&&1===o.length&&i.push([n,o[0]]),"r"===s)i.push([n].concat(o));else for(;o.length>=e[s]&&(i.push([n].concat(o.splice(0,e[s]))),e[s]););}),i}},function(t,e,n){var i=n(172),r=n(170);function a(t,e,n,i,r){var a=[];if(null===r&&null===i&&(i=n),t=+t,e=+e,n=+n,i=+i,null!==r){var o=Math.PI/180,s=t+n*Math.cos(-i*o),u=t+n*Math.cos(-r*o);a=[["M",s,e+n*Math.sin(-i*o)],["A",n,n,0,+(r-i>180),0,u,e+n*Math.sin(-r*o)]]}else a=[["M",t,e],["m",0,-i],["a",n,i,0,1,1,0,2*i],["a",n,i,0,1,1,0,-2*i],["z"]];return a}t.exports=function(t){if(!(t=i(t))||!t.length)return[["M",0,0]];var e=[],n=0,o=0,s=0,u=0,l=0,c=void 0,h=void 0;"M"===t[0][0]&&(s=n=+t[0][1],u=o=+t[0][2],l++,e[0]=["M",n,o]);for(var f,p,g=3===t.length&&"M"===t[0][0]&&"R"===t[1][0].toUpperCase()&&"Z"===t[2][0].toUpperCase(),d=l,v=t.length;d<v;d++){if(e.push(f=[]),(c=(p=t[d])[0])!==c.toUpperCase())switch(f[0]=c.toUpperCase(),f[0]){case"A":f[1]=p[1],f[2]=p[2],f[3]=p[3],f[4]=p[4],f[5]=p[5],f[6]=+p[6]+n,f[7]=+p[7]+o;break;case"V":f[1]=+p[1]+o;break;case"H":f[1]=+p[1]+n;break;case"R":for(var y=2,m=(h=[n,o].concat(p.slice(1))).length;y<m;y++)h[y]=+h[y]+n,h[++y]=+h[y]+o;e.pop(),e=e.concat(r(h,g));break;case"O":e.pop(),(h=a(n,o,p[1],p[2])).push(h[0]),e=e.concat(h);break;case"U":e.pop(),e=e.concat(a(n,o,p[1],p[2],p[3])),f=["U"].concat(e[e.length-1].slice(-2));break;case"M":s=+p[1]+n,u=+p[2]+o;break;default:for(var x=1,b=p.length;x<b;x++)f[x]=+p[x]+(x%2?n:o)}else if("R"===c)h=[n,o].concat(p.slice(1)),e.pop(),e=e.concat(r(h,g)),f=["R"].concat(p.slice(-2));else if("O"===c)e.pop(),(h=a(n,o,p[1],p[2])).push(h[0]),e=e.concat(h);else if("U"===c)e.pop(),e=e.concat(a(n,o,p[1],p[2],p[3])),f=["U"].concat(e[e.length-1].slice(-2));else for(var _=0,w=p.length;_<w;_++)f[_]=p[_];if("O"!==(c=c.toUpperCase()))switch(f[0]){case"Z":n=+s,o=+u;break;case"H":n=f[1];break;case"V":o=f[1];break;case"M":s=f[f.length-2],u=f[f.length-1];break;default:n=f[f.length-2],o=f[f.length-1]}}return e}},function(t,e,n){var i=n(173),r=function(t,e,n,i){return[t,e,n,i,n,i]},a=function(t,e,n,i,r,a){return[1/3*t+2/3*n,1/3*e+2/3*i,1/3*r+2/3*n,1/3*a+2/3*i,r,a]};t.exports=function(t,e){var n=i(t),o=e&&i(e),s={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},u={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},l=[],c=[],h="",f="",p=void 0,g=function(t,e,n){var i=void 0,o=void 0;if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(!(t[0]in{T:1,Q:1})&&(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"].concat(function t(e,n,i,r,a,o,s,u,l,c){i===r&&(i+=1);var h=120*Math.PI/180,f=Math.PI/180*(+a||0),p=[],g=void 0,d=void 0,v=void 0,y=void 0,m=void 0,x=function(t,e,n){return{x:t*Math.cos(n)-e*Math.sin(n),y:t*Math.sin(n)+e*Math.cos(n)}};if(c)d=c[0],v=c[1],y=c[2],m=c[3];else{e=(g=x(e,n,-f)).x,n=g.y,u=(g=x(u,l,-f)).x,l=g.y,e===u&&n===l&&(u+=1,l+=1);var b=(e-u)/2,_=(n-l)/2,w=b*b/(i*i)+_*_/(r*r);w>1&&(i*=w=Math.sqrt(w),r*=w);var M=i*i,S=r*r,C=(o===s?-1:1)*Math.sqrt(Math.abs((M*S-M*_*_-S*b*b)/(M*_*_+S*b*b)));y=C*i*_/r+(e+u)/2,m=C*-r*b/i+(n+l)/2,d=Math.asin(((n-m)/r).toFixed(9)),v=Math.asin(((l-m)/r).toFixed(9)),d=e<y?Math.PI-d:d,v=u<y?Math.PI-v:v,d<0&&(d=2*Math.PI+d),v<0&&(v=2*Math.PI+v),s&&d>v&&(d-=2*Math.PI),!s&&v>d&&(v-=2*Math.PI)}var k=v-d;if(Math.abs(k)>h){var A=v,P=u,I=l;v=d+h*(s&&v>d?1:-1),p=t(u=y+i*Math.cos(v),l=m+r*Math.sin(v),i,r,a,0,s,P,I,[v,A,y,m])}k=v-d;var T=Math.cos(d),O=Math.sin(d),E=Math.cos(v),L=Math.sin(v),D=Math.tan(k/4),F=4/3*i*D,B=4/3*r*D,R=[e,n],j=[e+F*O,n-B*T],N=[u+F*L,l-B*E],z=[u,l];if(j[0]=2*R[0]-j[0],j[1]=2*R[1]-j[1],c)return[j,N,z].concat(p);for(var G=[],V=0,Y=(p=[j,N,z].concat(p).join().split(",")).length;V<Y;V++)G[V]=V%2?x(p[V-1],p[V],f).y:x(p[V],p[V+1],f).x;return G}.apply(0,[e.x,e.y].concat(t.slice(1))));break;case"S":"C"===n||"S"===n?(i=2*e.x-e.bx,o=2*e.y-e.by):(i=e.x,o=e.y),t=["C",i,o].concat(t.slice(1));break;case"T":"Q"===n||"T"===n?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"].concat(a(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"].concat(a(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"].concat(r(e.x,e.y,t[1],t[2]));break;case"H":t=["C"].concat(r(e.x,e.y,t[1],e.y));break;case"V":t=["C"].concat(r(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"].concat(r(e.x,e.y,e.X,e.Y))}return t},d=function(t,e){if(t[e].length>7){t[e].shift();for(var i=t[e];i.length;)l[e]="A",o&&(c[e]="A"),t.splice(e++,0,["C"].concat(i.splice(0,6)));t.splice(e,1),p=Math.max(n.length,o&&o.length||0)}},v=function(t,e,i,r,a){t&&e&&"M"===t[a][0]&&"M"!==e[a][0]&&(e.splice(a,0,["M",r.x,r.y]),i.bx=0,i.by=0,i.x=t[a][1],i.y=t[a][2],p=Math.max(n.length,o&&o.length||0))};p=Math.max(n.length,o&&o.length||0);for(var y=0;y<p;y++){n[y]&&(h=n[y][0]),"C"!==h&&(l[y]=h,y&&(f=l[y-1])),n[y]=g(n[y],s,f),"A"!==l[y]&&"C"===h&&(l[y]="C"),d(n,y),o&&(o[y]&&(h=o[y][0]),"C"!==h&&(c[y]=h,y&&(f=c[y-1])),o[y]=g(o[y],u,f),"A"!==c[y]&&"C"===h&&(c[y]="C"),d(o,y)),v(n,o,s,u,y),v(o,n,u,s,y);var m=n[y],x=o&&o[y],b=m.length,_=o&&x.length;s.x=m[b-2],s.y=m[b-1],s.bx=parseFloat(m[b-4])||s.x,s.by=parseFloat(m[b-3])||s.y,u.bx=o&&(parseFloat(x[_-4])||u.x),u.by=o&&(parseFloat(x[_-3])||u.y),u.x=o&&x[_-2],u.y=o&&x[_-1]}return o?[n,o]:n}},function(t,e,n){var i=n(171);t.exports=function(t,e,n,r,a){if(a)return[["M",+t+ +a,e],["l",n-2*a,0],["a",a,a,0,0,1,a,a],["l",0,r-2*a],["a",a,a,0,0,1,-a,a],["l",2*a-n,0],["a",a,a,0,0,1,-a,-a],["l",0,2*a-r],["a",a,a,0,0,1,a,-a],["z"]];var o=[["M",t,e],["l",n,0],["l",0,r],["l",-n,0],["z"]];return o.parsePathArray=i,o}},function(t,e,n){var i=n(35);t.exports=function(t){return i(t).toLowerCase()}},function(t,e,n){var i=n(35);t.exports=function(t){var e=i(t);return e.charAt(0).toLowerCase()+e.substring(1)}},function(t,e,n){var i=n(35);t.exports=function(t){return i(t).toUpperCase()}},function(t,e,n){var i=n(35);t.exports=function(t){var e=i(t);return e.charAt(0).toUpperCase()+e.substring(1)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).replace(/^\[object /,"").replace(/\]$/,"")}},function(t,e,n){var i=n(15);t.exports=function(t){return i(t,"Boolean")}},function(t,e,n){var i=n(15);t.exports=function(t){return i(t,"Date")}},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e){var n=function(){var t={};return function(e){return t[e=e||"g"]?t[e]+=1:t[e]=1,e+t[e]}}();t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={COORD_FUNC_PROPS:["rotate","scale","reflect","transpose"],GEOM_FUNC_PROPS:["position","color","size","shape","opacity","tooltip","style","animate","active","select"]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=a(n(25)),r=a(n(38));function a(t){return t&&t.__esModule?t:{default:t}}for(var o=["mouseenter","mousemove","mouseleave","click","dblclick","mousedown","mouseup","touchstart","touchmove","touchend"],s=["Mouseenter","Mousemove","Mouseleave","Click","Dblclick","Mousedown","Mouseup","Touchstart","Touchmove","Touchend"],u=["point","area","line","path","interval","schema","polygon","edge","axis-title","axis-label","axis-ticks","axis-line","axis-grid","legend-title","legend-item","legend-marker","legend-text","guide-text","guide-region","guide-line","guide-image","label"],l=["onPoint","onArea","onLine","onPath","onInterval","onSchema","onPolygon","onEdge","onAxisTitle","onAxisLabel","onAxisTicks","onAxisLine","onAxisGrid","onLegendTitle","onLegendItem","onLegendMarker","onLegendText","onGuideText","onGuideRegion","onGuideLine","onGuideImage","onLabel"],c=[],h=0;h<u.length;h+=1)for(var f=0;f<o.length;f+=1)c.push({prop:""+l[h]+s[f],event:u[h]+":"+o[f]});var p=[{prop:"onPlotMove",event:"plotmove"},{prop:"onPlotEnter",event:"plotenter"},{prop:"onPlotLeave",event:"plotleave"},{prop:"onPlotClick",event:"plotclick"},{prop:"onPlotDblClick",event:"plotdblclick"},{prop:"onItemSelected",event:"itemselected"},{prop:"onItemUnselected",event:"itemunselected"},{prop:"onItemSelectedChange",event:"itemselectedchange"},{prop:"onTooltipChange",event:"tooltip:change"},{prop:"onTooltipShow",event:"tooltip:show"},{prop:"onTooltipHide",event:"tooltip:hide"}].concat(c);function g(){return[{prop:"onMouseEnter",event:"mouseenter"},{prop:"onMouseMove",event:"mousemove"},{prop:"onMouseLeave",event:"mouseleave"},{prop:"onClick",event:"click"},{prop:"onDblClick",event:"dblclick"},{prop:"onMouseDown",event:"mousedown"},{prop:"onMouseUp",event:"mouseup"},{prop:"onTouchStart",event:"touchstart"},{prop:"onTouchMove",event:"touchmove"},{prop:"onTouchEnd",event:"touchend"}]}var d=[{prop:"onMouseEnter",event:"mouseenter"},{prop:"onMouseMove",event:"mousemove"},{prop:"onMouseLeave",event:"mouseleave"},{prop:"onClick",event:"click"},{prop:"onDblClick",event:"dblclick"},{prop:"onMouseDown",event:"mousedown"},{prop:"onMouseUp",event:"mouseup"},{prop:"onTouchStart",event:"touchstart"},{prop:"onTouchMove",event:"touchmove"},{prop:"onTouchEnd",event:"touchend"}],v={onMouseEnter:i.default.object,onMouseMove:i.default.object,onMouseLeave:i.default.object,onClick:i.default.oneOfType([i.default.object,i.default.func]),onDblClick:i.default.object,onMouseDown:i.default.object,onMouseUp:i.default.object,onTouchStart:i.default.object,onTouchMove:i.default.object,onTouchEnd:i.default.object},y={onMouseEnter:i.default.func,onMouseMove:i.default.func,onMouseLeave:i.default.func,onClick:i.default.func,onDblClick:i.default.func,onMouseDown:i.default.func,onMouseUp:i.default.func,onTouchStart:i.default.func,onTouchMove:i.default.func,onTouchEnd:i.default.func};function m(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];r.default.each(e,function(e){var i=e.prop,a=e.event,o=n[i];if(r.default.isFunction(o))t.on(a,o);else if(r.default.isObject(o))for(var s in o)void 0!==o[s]&&t.on(s+":"+a,o[s])})}function x(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2],i=arguments[3];r.default.each(e,function(e){var a=e.prop,o=e.event,s=n[a],u=i[a],l=void 0;if(!r.default.shallowEqual(s,u))if(r.default.isFunction(s)&&r.default.isFunction(u))t.off(o,s),t.on(o,u);else if(r.default.isObject(s)&&r.default.isObject(u)){for(l in s)Object.prototype.hasOwnProperty.call(s,l)&&t.off(l+":"+o,s[l]);for(l in u)Object.prototype.hasOwnProperty.call(u,l)&&t.on(l+":"+o,u[l])}})}function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];r.default.each(e,function(e){var i=e.prop,a=e.event,o=n[i];if(r.default.isFunction(o))t.off(a,o);else if(r.default.isObject(o))for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&t.off(s+":"+a,o[s])})}e.default={baseEventObjectTypes:v,baseEventFuncTypes:y,genBaseEvents:g,genItemBaseEvents:function(t){var e=[{prop:"onMouseEnter",event:"mouseenter"},{prop:"onMouseMove",event:"mousemove"},{prop:"onMouseLeave",event:"mouseleave"},{prop:"onClick",event:"click"},{prop:"onDblClick",event:"dblclick"},{prop:"onMouseDown",event:"mousedown"},{prop:"onMouseUp",event:"mouseup"},{prop:"onTouchStart",event:"touchstart"},{prop:"onTouchMove",event:"touchmove"},{prop:"onTouchEnd",event:"touchend"}];return r.default.map(e,function(e){var n=e.event;return e.event=t+":"+n,e}),e},bindEvents:m,bindBaseEvents:function(t,e){m(t,d,e)},updateEvents:x,updateBaseEvents:function(t,e,n){x(t,d,e,n)},unbindEvents:b,unbindBaseEvents:function(t,e){b(t,d,e)},chartEvents:p}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(63)),a=n(81),o=l(n(185)),s=l(n(186)),u=l(n(80));function l(t){return t&&t.__esModule?t:{default:t}}function c(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function h(t,e){var n={};for(var i in t)e.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(t,i)&&(n[i]=t[i]);return n}var f=o.default.COORD_FUNC_PROPS,p=o.default.GEOM_FUNC_PROPS;e.default={createChart:function(t){var e=t.chart,n=new r.Chart(e.props);return e.g2Instance=n,n},executeChartConfig:function(t,e){var n=e.chart.props;t.coord("rect",{}),t.source(n.data,n.scale),(e.facet||n.axis)&&e.facet&&!1!==n.axis||t.axis(!1),t.legend(!1),t.tooltip(!1),n.filter&&n.filter.forEach(function(e){t.filter(e[0],e[1])}),s.default.bindEvents(t,s.default.chartEvents,n),s.default.bindBaseEvents(t,n)},coord:function(t,e){var n=e.coord;if(n&&!n.g2Instance){var i=n.props,r=i.type,o=h(i,["type"]),s=t.coord(r||"rect",a.Util.without(o,f));a.Prop.init(f,o,function(t,e){s[e].apply(s,c(t))}),n.g2Instance=s}},createLabel:function(t,e){if(e&&!e.g2Instance){var n=e.props,i=n.content,r=h(n,["content"]);i&&(a.Util.isArray(i)?e.g2Instance=t.label(i[0],i[1],r):e.g2Instance=t.label(i,r))}},createGeom:function(t,e){if(e.g2Instance)e.label&&this.createLabel(e.g2Instance,e.label);else{var n=e.props,i=t[n.type||"interval"]();n.adjust&&i.adjust(n.adjust),a.Prop.init(p,n,function(t,e){i[e].apply(i,c(t))}),e.g2Instance=i,this.createLabel(i,e.label)}},geoms:function(t,e){var n=e.geoms;if(n)for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&this.createGeom(t,n[i])},legends:function(t,e){var n=e.legends;for(var i in n)if(n[i]){var r=n[i];if(r.g2Instance)return;var a=r.props,o=a.name,s=a.visible,u=h(a,["name","visible"]),l=s;Object.prototype.hasOwnProperty.call(r.props,"visible")||(l=!0);var f=l?u:l;r.g2Instance=t.legend.apply(t,c(o?[o,f]:[f]))}},tooltip:function(t,e){var n=e.tooltip;n&&!n.g2Instance&&(n.g2Instance=t.tooltip(i({},n.props)))},createAxis:function(t,e){if(!e.g2Instance){var n=e.props,i=n.name,r=n.visible,a=h(n,["name","visible"]);r||!Object.prototype.hasOwnProperty.call(e.props,"visible")?e.g2Instance=t.axis(i,a):e.g2Instance=t.axis(i,!1)}},axises:function(t,e){var n=e.axises;for(var i in n)n[i]&&this.createAxis(t,n[i])},views:function(t,e){var n=e.views;for(var i in n)n[i]&&this.createView(t,n[i])},createView:function(t,e){if("Facet"!==e.parentInfo.name){if(e.g2Instance)return e.filter&&e.filter.forEach(function(t){e.g2Instance.filter(t[0],t[1])}),this.coord(e.g2Instance,e),this.axises(e.g2Instance,e),this.geoms(e.g2Instance,e),void this.guide(e.g2Instance,e.guide);var n=e.props,r=n.scale,a=n.data,o=n.instance,s=n.axis,u=n.filter,l=(n.geoms,h(n,["scale","data","instance","axis","filter","geoms"])),c=void 0;c=o||t.view(i({},l)),a&&c.source(a,r),r&&c.scale(r),u&&u.forEach(function(t){c.filter(t[0],t[1])}),!0===s||o||c.axis(!1),e.g2Instance=c,this.coord(c,e),this.axises(c,e),this.geoms(c,e),this.guide(c,e.guide)}},facetView:function(t,e){var n=e.props,i=n.scale,r=n.data,a=n.axis;n.geoms,h(n,["scale","data","axis","geoms"]);r&&t.source(r,i),i&&t.scale(i),!1===a&&t.axis(!1),this.coord(t,e),this.axises(t,e),this.geoms(t,e),this.guide(t,e.guide),u.default.mergeView(e,!0)},guide:function(t,e){if(e){var n=e.elements;for(var i in n)if(n[i]){var r=n[i];if(!r.g2Instance){var a=r.props,o=(a.type,h(a,["type"]));r.g2Instance=t.guide()[r.type](o)}}}},facet:function(t,e){var n=this,i=e.facet;if(i&&!i.g2Instance){var r=i.props,a=r.children,o=r.type,s=h(r,["children","type"]);if(a){var l=e.views,c=null;for(var f in l)if(l[f]&&"Facet"===l[f].parentInfo.name&&l[f].parentInfo.id===i.id){c=l[f];break}c&&(u.default.mergeView(c,!0),s.eachView=function(t){n.facetView(t,c)},t.facet(o,s))}else t.facet(o,s)}},synchronizeG2Add:function(t,e){this.coord(t,e),this.axises(t,e),this.legends(t,e),this.tooltip(t,e),this.geoms(t,e),this.facet(t,e),this.views(t,e),this.guide(t,e.guide)},synchronizeG2Views:function(t,e){var n=e.views;for(var i in n)n[i]&&this.synchronizeG2View(n[i].g2Instance,n[i])},synchronizeG2View:function(t,e){t.clear(),this.clearViewG2Instance(e);var n=e.props,i=n.scale,r=n.data,a=n.instance,o=n.axis;n.geoms,h(n,["scale","data","instance","axis","geoms"]);r&&t.source(r,i),i&&t.scale(i),!0===o||a||t.axis(!1),this.coord(t,e),this.axises(t,e),this.geoms(t,e),this.guide(t,e.guide)},clearViewG2Instance:function(t){t.coord&&delete t.coord.g2Instance,t.axises&&Object.keys(t.axises).forEach(function(e){delete t.axises[e].g2Instance}),t.geoms&&Object.keys(t.geoms).forEach(function(e){delete t.geoms[e].g2Instance,t.geoms[e].label&&delete t.geoms[e].label.g2Instance}),t.guide&&t.guide.elements&&Object.keys(t.guide.elements).forEach(function(e){delete t.guide.elements[e].g2Instance})}}},function(t,e,n){"use strict";n.d(e,"b",function(){return i}),n.d(e,"a",function(){return r});var i=Math.PI/180,r=180/Math.PI},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(430);n.d(e,"easeLinear",function(){return i.a});var r=n(432);n.d(e,"easeQuad",function(){return r.a}),n.d(e,"easeQuadIn",function(){return r.b}),n.d(e,"easeQuadOut",function(){return r.c}),n.d(e,"easeQuadInOut",function(){return r.a});var a=n(427);n.d(e,"easeCubic",function(){return a.a}),n.d(e,"easeCubicIn",function(){return a.b}),n.d(e,"easeCubicOut",function(){return a.c}),n.d(e,"easeCubicInOut",function(){return a.a});var o=n(431);n.d(e,"easePoly",function(){return o.a}),n.d(e,"easePolyIn",function(){return o.b}),n.d(e,"easePolyOut",function(){return o.c}),n.d(e,"easePolyInOut",function(){return o.a});var s=n(433);n.d(e,"easeSin",function(){return s.a}),n.d(e,"easeSinIn",function(){return s.b}),n.d(e,"easeSinOut",function(){return s.c}),n.d(e,"easeSinInOut",function(){return s.a});var u=n(429);n.d(e,"easeExp",function(){return u.a}),n.d(e,"easeExpIn",function(){return u.b}),n.d(e,"easeExpOut",function(){return u.c}),n.d(e,"easeExpInOut",function(){return u.a});var l=n(426);n.d(e,"easeCircle",function(){return l.a}),n.d(e,"easeCircleIn",function(){return l.b}),n.d(e,"easeCircleOut",function(){return l.c}),n.d(e,"easeCircleInOut",function(){return l.a});var c=n(425);n.d(e,"easeBounce",function(){return c.a}),n.d(e,"easeBounceIn",function(){return c.b}),n.d(e,"easeBounceOut",function(){return c.a}),n.d(e,"easeBounceInOut",function(){return c.c});var h=n(424);n.d(e,"easeBack",function(){return h.a}),n.d(e,"easeBackIn",function(){return h.b}),n.d(e,"easeBackOut",function(){return h.c}),n.d(e,"easeBackInOut",function(){return h.a});var f=n(428);n.d(e,"easeElastic",function(){return f.a}),n.d(e,"easeElasticIn",function(){return f.b}),n.d(e,"easeElasticOut",function(){return f.a}),n.d(e,"easeElasticInOut",function(){return f.c})},function(t,e,n){"use strict";var i=n(85);e.a=function(t,e){var r,a=e?e.length:0,o=t?Math.min(a,t.length):0,s=new Array(o),u=new Array(a);for(r=0;r<o;++r)s[r]=n.i(i.a)(t[r],e[r]);for(;r<a;++r)u[r]=e[r];return function(t){for(r=0;r<o;++r)u[r]=s[r](t);return u}}},function(t,e,n){"use strict";var i=n(84);e.a=function(t){var e=t.length;return function(r){var a=Math.floor(((r%=1)<0?++r:r)*e),o=t[(a+e-1)%e],s=t[a%e],u=t[(a+1)%e],l=t[(a+2)%e];return n.i(i.b)((r-a/e)*e,o,s,u,l)}}},function(t,e,n){"use strict";e.a=function(t){return function(){return t}}},function(t,e,n){"use strict";e.a=function(t,e){var n=new Date;return e-=t=+t,function(i){return n.setTime(t+e*i),n}}},function(t,e,n){"use strict";var i=n(85);e.a=function(t,e){var r,a={},o={};for(r in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)r in t?a[r]=n.i(i.a)(t[r],e[r]):o[r]=e[r];return function(t){for(r in a)o[r]=a[r](t);return o}}},function(t,e,n){"use strict";n.d(e,"b",function(){return u}),n.d(e,"c",function(){return l});var i=n(12),r=n(84),a=n(191),o=n(39);function s(t){return function(e){var r,a,o=e.length,s=new Array(o),u=new Array(o),l=new Array(o);for(r=0;r<o;++r)a=n.i(i.e)(e[r]),s[r]=a.r||0,u[r]=a.g||0,l[r]=a.b||0;return s=t(s),u=t(u),l=t(l),a.opacity=1,function(t){return a.r=s(t),a.g=u(t),a.b=l(t),a+""}}}e.a=function t(e){var r=n.i(o.c)(e);function a(t,e){var a=r((t=n.i(i.e)(t)).r,(e=n.i(i.e)(e)).r),s=r(t.g,e.g),u=r(t.b,e.b),l=n.i(o.a)(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=s(e),t.b=u(e),t.opacity=l(e),t+""}}return a.gamma=t,a}(1);var u=s(r.a),l=s(a.a)},function(t,e,n){"use strict";var i=n(53),r=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,a=new RegExp(r.source,"g");e.a=function(t,e){var o,s,u,l=r.lastIndex=a.lastIndex=0,c=-1,h=[],f=[];for(t+="",e+="";(o=r.exec(t))&&(s=a.exec(e));)(u=s.index)>l&&(u=e.slice(l,u),h[c]?h[c]+=u:h[++c]=u),(o=o[0])===(s=s[0])?h[c]?h[c]+=s:h[++c]=s:(h[++c]=null,f.push({i:c,x:n.i(i.a)(o,s)})),l=a.lastIndex;return l<e.length&&(u=e.slice(l),h[c]?h[c]+=u:h[++c]=u),h.length<2?f[0]?function(t){return function(e){return t(e)+""}}(f[0].x):function(t){return function(){return t}}(e):(e=f.length,function(t){for(var n,i=0;i<e;++i)h[(n=f[i]).i]=n.x(t);return h.join("")})}},function(t,e,n){"use strict";var i=n(88);e.a=function(t,e){var r,a=e?e.length:0,o=t?Math.min(a,t.length):0,s=new Array(o),u=new Array(a);for(r=0;r<o;++r)s[r]=n.i(i.a)(t[r],e[r]);for(;r<a;++r)u[r]=e[r];return function(t){for(r=0;r<o;++r)u[r]=s[r](t);return u}}},function(t,e,n){"use strict";var i=n(86);e.a=function(t){var e=t.length;return function(r){var a=Math.floor(((r%=1)<0?++r:r)*e),o=t[(a+e-1)%e],s=t[a%e],u=t[(a+1)%e],l=t[(a+2)%e];return n.i(i.b)((r-a/e)*e,o,s,u,l)}}},function(t,e,n){"use strict";e.a=function(t){return function(){return t}}},function(t,e,n){"use strict";e.a=function(t,e){var n=new Date;return e-=t=+t,function(i){return n.setTime(t+e*i),n}}},function(t,e,n){"use strict";var i=n(88);e.a=function(t,e){var r,a={},o={};for(r in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)r in t?a[r]=n.i(i.a)(t[r],e[r]):o[r]=e[r];return function(t){for(r in a)o[r]=a[r](t);return o}}},function(t,e,n){"use strict";var i=n(12),r=n(86),a=n(198),o=n(28);function s(t){return function(e){var r,a,o=e.length,s=new Array(o),u=new Array(o),l=new Array(o);for(r=0;r<o;++r)a=n.i(i.e)(e[r]),s[r]=a.r||0,u[r]=a.g||0,l[r]=a.b||0;return s=t(s),u=t(u),l=t(l),a.opacity=1,function(t){return a.r=s(t),a.g=u(t),a.b=l(t),a+""}}}e.a=function t(e){var r=n.i(o.c)(e);function a(t,e){var a=r((t=n.i(i.e)(t)).r,(e=n.i(i.e)(e)).r),s=r(t.g,e.g),u=r(t.b,e.b),l=n.i(o.a)(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=s(e),t.b=u(e),t.opacity=l(e),t+""}}return a.gamma=t,a}(1);s(r.a),s(a.a)},function(t,e,n){"use strict";var i=n(54),r=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,a=new RegExp(r.source,"g");e.a=function(t,e){var o,s,u,l=r.lastIndex=a.lastIndex=0,c=-1,h=[],f=[];for(t+="",e+="";(o=r.exec(t))&&(s=a.exec(e));)(u=s.index)>l&&(u=e.slice(l,u),h[c]?h[c]+=u:h[++c]=u),(o=o[0])===(s=s[0])?h[c]?h[c]+=s:h[++c]=s:(h[++c]=null,f.push({i:c,x:n.i(i.a)(o,s)})),l=a.lastIndex;return l<e.length&&(u=e.slice(l),h[c]?h[c]+=u:h[++c]=u),h.length<2?f[0]?function(t){return function(e){return t(e)+""}}(f[0].x):function(t){return function(){return t}}(e):(e=f.length,function(t){for(var n,i=0;i<e;++i)h[(n=f[i]).i]=n.x(t);return h.join("")})}},function(t,e,n){"use strict";var i=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var r=document.documentElement;if(!r.matches){var a=r.webkitMatchesSelector||r.msMatchesSelector||r.mozMatchesSelector||r.oMatchesSelector;i=function(t){return function(){return a.call(this,t)}}}}e.a=i},function(t,e,n){"use strict";var i=n(16);e.a=function(t){return"string"==typeof t?new i.b([[document.querySelector(t)]],[document.documentElement]):new i.b([[t]],i.c)}},function(t,e,n){"use strict";e.b=a;var i=n(207),r=n(16);function a(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}e.a=function(){return new r.b(this._enter||this._groups.map(i.a),this._parents)},a.prototype={constructor:a,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}}},function(t,e,n){"use strict";e.a=function(t){return new Array(t.length)}},function(t,e,n){"use strict";e.a=r;var i=n(94);function r(t,e){return t.style.getPropertyValue(e)||n.i(i.a)(t).getComputedStyle(t,null).getPropertyValue(e)}e.b=function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var i=e.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):r(this.node(),t)}},function(t,e,n){"use strict";function i(){return[]}e.a=function(t){return null==t?i:function(){return this.querySelectorAll(t)}}},function(t,e,n){"use strict";var i=n(17);e.a=function(t,e){var n,r,a,o=t.__transition,s=!0;if(o){for(a in e=null==e?null:e+"",o)(n=o[a]).name===e?(r=n.state>i.a&&n.state<i.b,n.state=i.c,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete o[a]):s=!1;s&&delete t.__transition}}},function(t,e,n){"use strict";var i=n(12),r=n(87);e.a=function(t,e){var a;return("number"==typeof e?r.b:e instanceof i.f?r.c:(a=n.i(i.f)(e))?(e=a,r.c):r.d)(t,e)}},function(t,e,n){var i;!function(r){"use strict";var a={},o=/d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g,s=/\d\d?/,u=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,l=/\[([^]*?)\]/gm,c=function(){};function h(t,e){for(var n=[],i=0,r=t.length;i<r;i++)n.push(t[i].substr(0,e));return n}function f(t){return function(e,n,i){var r=i[t].indexOf(n.charAt(0).toUpperCase()+n.substr(1).toLowerCase());~r&&(e.month=r)}}function p(t,e){for(t=String(t),e=e||2;t.length<e;)t="0"+t;return t}var g=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],d=["January","February","March","April","May","June","July","August","September","October","November","December"],v=h(d,3),y=h(g,3);a.i18n={dayNamesShort:y,dayNames:g,monthNamesShort:v,monthNames:d,amPm:["am","pm"],DoFn:function(t){return t+["th","st","nd","rd"][t%10>3?0:(t-t%10!=10)*t%10]}};var m={D:function(t){return t.getDate()},DD:function(t){return p(t.getDate())},Do:function(t,e){return e.DoFn(t.getDate())},d:function(t){return t.getDay()},dd:function(t){return p(t.getDay())},ddd:function(t,e){return e.dayNamesShort[t.getDay()]},dddd:function(t,e){return e.dayNames[t.getDay()]},M:function(t){return t.getMonth()+1},MM:function(t){return p(t.getMonth()+1)},MMM:function(t,e){return e.monthNamesShort[t.getMonth()]},MMMM:function(t,e){return e.monthNames[t.getMonth()]},YY:function(t){return String(t.getFullYear()).substr(2)},YYYY:function(t){return p(t.getFullYear(),4)},h:function(t){return t.getHours()%12||12},hh:function(t){return p(t.getHours()%12||12)},H:function(t){return t.getHours()},HH:function(t){return p(t.getHours())},m:function(t){return t.getMinutes()},mm:function(t){return p(t.getMinutes())},s:function(t){return t.getSeconds()},ss:function(t){return p(t.getSeconds())},S:function(t){return Math.round(t.getMilliseconds()/100)},SS:function(t){return p(Math.round(t.getMilliseconds()/10),2)},SSS:function(t){return p(t.getMilliseconds(),3)},a:function(t,e){return t.getHours()<12?e.amPm[0]:e.amPm[1]},A:function(t,e){return t.getHours()<12?e.amPm[0].toUpperCase():e.amPm[1].toUpperCase()},ZZ:function(t){var e=t.getTimezoneOffset();return(e>0?"-":"+")+p(100*Math.floor(Math.abs(e)/60)+Math.abs(e)%60,4)}},x={D:[s,function(t,e){t.day=e}],Do:[new RegExp(s.source+u.source),function(t,e){t.day=parseInt(e,10)}],M:[s,function(t,e){t.month=e-1}],YY:[s,function(t,e){var n=+(""+(new Date).getFullYear()).substr(0,2);t.year=""+(e>68?n-1:n)+e}],h:[s,function(t,e){t.hour=e}],m:[s,function(t,e){t.minute=e}],s:[s,function(t,e){t.second=e}],YYYY:[/\d{4}/,function(t,e){t.year=e}],S:[/\d/,function(t,e){t.millisecond=100*e}],SS:[/\d{2}/,function(t,e){t.millisecond=10*e}],SSS:[/\d{3}/,function(t,e){t.millisecond=e}],d:[s,c],ddd:[u,c],MMM:[u,f("monthNamesShort")],MMMM:[u,f("monthNames")],a:[u,function(t,e,n){var i=e.toLowerCase();i===n.amPm[0]?t.isPm=!1:i===n.amPm[1]&&(t.isPm=!0)}],ZZ:[/([\+\-]\d\d:?\d\d|Z)/,function(t,e){"Z"===e&&(e="+00:00");var n,i=(e+"").match(/([\+\-]|\d\d)/gi);i&&(n=60*i[1]+parseInt(i[2],10),t.timezoneOffset="+"===i[0]?n:-n)}]};x.dd=x.d,x.dddd=x.ddd,x.DD=x.D,x.mm=x.m,x.hh=x.H=x.HH=x.h,x.MM=x.M,x.ss=x.s,x.A=x.a,a.masks={default:"ddd MMM DD YYYY HH:mm:ss",shortDate:"M/D/YY",mediumDate:"MMM D, YYYY",longDate:"MMMM D, YYYY",fullDate:"dddd, MMMM D, YYYY",shortTime:"HH:mm",mediumTime:"HH:mm:ss",longTime:"HH:mm:ss.SSS"},a.format=function(t,e,n){var i=n||a.i18n;if("number"==typeof t&&(t=new Date(t)),"[object Date]"!==Object.prototype.toString.call(t)||isNaN(t.getTime()))throw new Error("Invalid Date in fecha.format");var r=[];return(e=(e=(e=a.masks[e]||e||a.masks.default).replace(l,function(t,e){return r.push(e),"??"})).replace(o,function(e){return e in m?m[e](t,i):e.slice(1,e.length-1)})).replace(/\?\?/g,function(){return r.shift()})},a.parse=function(t,e,n){var i=n||a.i18n;if("string"!=typeof e)throw new Error("Invalid format in fecha.parse");if(e=a.masks[e]||e,t.length>1e3)return!1;var r=!0,s={};if(e.replace(o,function(e){if(x[e]){var n=x[e],a=t.search(n[0]);~a?t.replace(n[0],function(e){return n[1](s,e,i),t=t.substr(a+e.length),e}):r=!1}return x[e]?"":e.slice(1,e.length-1)}),!r)return!1;var u,l=new Date;return!0===s.isPm&&null!=s.hour&&12!=+s.hour?s.hour=+s.hour+12:!1===s.isPm&&12==+s.hour&&(s.hour=0),null!=s.timezoneOffset?(s.minute=+(s.minute||0)-+s.timezoneOffset,u=new Date(Date.UTC(s.year||l.getFullYear(),s.month||0,s.day||1,s.hour||0,s.minute||0,s.second||0,s.millisecond||0))):u=new Date(s.year||l.getFullYear(),s.month||0,s.day||1,s.hour||0,s.minute||0,s.second||0,s.millisecond||0),u},void 0!==t&&t.exports?t.exports=a:void 0===(i=function(){return a}.call(e,n,e,t))||(t.exports=i)}()},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";var i=function(){};i=function(t,e,n){var i=arguments.length;n=new Array(i>2?i-2:0);for(var r=2;r<i;r++)n[r-2]=arguments[r];if(void 0===e)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(e.length<10||/^[s\W]*$/.test(e))throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: "+e);if(!t){var a=0,o="Warning: "+e.replace(/%s/g,function(){return n[a++]});"undefined"!=typeof console&&console.error(o);try{throw new Error(o)}catch(t){}}},t.exports=i},function(t,e,n){var i=n(29),r=n(2),a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){this.marginRatio=.5,this.dodgeRatio=.5,this.adjustNames=["x","y"]},n.getDodgeOffset=function(t,e,n){var i=t.pre,r=t.next,a=r-i,o=a*this.dodgeRatio/n,s=this.marginRatio*o;return(i+r)/2+(.5*(a-n*o-(n-1)*s)+((e+1)*o+e*s)-.5*o-.5*a)},n.processAdjust=function(t){var e=this,n=t.length,i=e.xField;r(t,function(t,r){for(var a=0,o=t.length;a<o;a++){var s=t[a],u=s[i],l={pre:u-.5,next:u+.5},c=e.getDodgeOffset(l,r,n);s[i]=c}})},e}(i);i.Dodge=a,t.exports=a},function(t,e,n){var i=n(10),r=n(29),a=n(215),o=n(220),s=n(98),u=n(218),l=n(219);i(r.prototype,s),i(a.prototype,s,u),i(o.prototype,l),r.Jitter=n(217),r.Symmetric=n(221),r.Dodge=a,r.Stack=o,t.exports=r},function(t,e,n){var i=n(2),r=n(10),a={merge:n(49)},o=n(29),s=n(98),u=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){this.xField=null,this.yField=null,this.adjustNames=["x","y"],this.groupFields=null},n.processAdjust=function(t){var e=a.merge(t);this.adjDataArray=t,this.mergeData=e,this.adjustData(t,e),this.adjFrames=null,this.mergeData=null},n.getAdjustOffset=function(t,e){var n=e-t;return t+.05*n+.9*n*Math.random()},n._adjustGroup=function(t,e,n,r){var a=this,o=a.getAdjustRange(e,n,r);i(t,function(t){t[e]=a.getAdjustOffset(o.pre,o.next)})},n.adjustDim=function(t,e,n){var r=this,a=r.groupData(n,t);i(a,function(n,i){i=parseFloat(i),r._adjustGroup(n,t,i,e)})},e}(o);r(u.prototype,s),o.Jitter=u,t.exports=u},function(t,e,n){var i={merge:n(49),values:n(72)},r=n(155),a=n(2);t.exports={processAdjust:function(t){var e=i.merge(t),n=this.dodgeBy,a=t;n&&(a=r(e,n)),this.cacheMap={},this.adjDataArray=a,this.mergeData=e,this.adjustData(a,e),this.adjDataArray=null,this.mergeData=null},getDistribution:function(t){var e=this.adjDataArray,n=this.cacheMap,r=n[t];return r||(r={},a(e,function(e,n){var o=i.values(e,t);o.length||o.push(0),a(o,function(t){r[t]||(r[t]=[]),r[t].push(n)})}),n[t]=r),r},adjustDim:function(t,e,n,i,r){var o=this,s=o.getDistribution(t),u=o.groupData(n,t);a(u,function(n,i){var u;i=parseFloat(i),u=1===e.length?{pre:e[0]-1,next:e[0]+1}:o.getAdjustRange(t,i,e),a(n,function(e){var n=e[t],i=s[n],a=i.indexOf(r);e[t]=o.getDodgeOffset(u,a,i.length)})})}}},function(t,e){t.exports={_initDefaultCfg:function(){this.xField=null,this.yField=null,this.height=null,this.size=10,this.reverseOrder=!1,this.adjustNames=["y"]},processOneDimStack:function(t){var e=this.xField,n=this.yField||"y",i=this.height,r={};this.reverseOrder&&(t=t.slice(0).reverse());for(var a=0,o=t.length;a<o;a++)for(var s=t[a],u=0,l=s.length;u<l;u++){var c=s[u],h=2*(c.size||this.size)/i,f=c[e];r[f]||(r[f]=h/2),c[n]=r[f],r[f]+=h}},processAdjust:function(t){this.yField?this.processStack(t):this.processOneDimStack(t)}}},function(t,e,n){var i=n(4),r=n(7),a=n(29),o=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){this.xField=null,this.yField=null},n.processAdjust=function(t){this.processStack(t)},n.processStack=function(t){var e=this.xField,n=this.yField,a=t.length,o={positive:{},negative:{}};this.reverseOrder&&(t=t.slice(0).reverse());for(var s=0;s<a;s++)for(var u=t[s],l=0,c=u.length;l<c;l++){var h=u[l],f=h[e]||0,p=h[n],g=f.toString();if(p=i(p)?p[1]:p,!r(p)){var d=p>=0?"positive":"negative";o[d][g]||(o[d][g]=0),h[n]=[o[d][g],p+o[d][g]],o[d][g]+=p}}},e}(a);a.Stack=o,t.exports=o},function(t,e,n){var i=n(2),r=n(158),a=n(4),o={merge:n(49)},s=n(29),u=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){this.xField=null,this.yField=null,this.cacheMax=null,this.adjustNames=["y"],this.groupFields=null},n._getMax=function(t){var e=this.mergeData,n=r(e,function(e){var n=e[t];return a(n)?Math.max.apply(null,n):n})[t];return a(n)?Math.max.apply(null,n):n},n._getXValuesMax=function(){var t=this.yField,e=this.xField,n={},r=this.mergeData;return i(r,function(i){var r=i[e],o=i[t],s=a(o)?Math.max.apply(null,o):o;n[r]=n[r]||0,n[r]<s&&(n[r]=s)}),n},n.processAdjust=function(t){var e=o.merge(t);this.mergeData=e,this._processSymmetric(t),this.mergeData=null},n._processSymmetric=function(t){var e,n=this.xField,r=this.yField,o=this._getMax(r),s=t[0][0];s&&a(s[r])&&(e=this._getXValuesMax()),i(t,function(t){i(t,function(t){var s,u=t[r];if(a(u)){var l=t[n],c=e[l];s=(o-c)/2;var h=[];i(u,function(t){h.push(s+t)}),t[r]=h}else s=(o-u)/2,t[r]=[s,u+s]})})},e}(s);s.Symmetric=u,t.exports=u},function(t,e,n){var i=n(14),r=n(99),a=function(t){function e(e){var n;return(n=t.call(this,e)||this).names=["color"],n.type="color",n.gradient=null,i(n.values)&&(n.linear=!0),n}return function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t),e.prototype.getLinearValue=function(t){var e=this.gradient;if(!e){var n=this.values;e=r.gradient(n),this.gradient=e}return e(t)},e}(n(30));t.exports=a},function(t,e,n){var i=function(t){function e(e){var n;return(n=t.call(this,e)||this).names=["opacity"],n.type="opacity",n.gradient=null,n}return function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t),e}(n(30));t.exports=i},function(t,e,n){var i=n(7),r=n(4),a=n(2),o=function(t){function e(e){var n;return(n=t.call(this,e)||this).names=["x","y"],n.type="position",n}return function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t),e.prototype.mapping=function(t,e){var n,o,s,u=this.scales,l=this.coord,c=u[0],h=u[1];if(i(t)||i(e))return[];if(r(e)&&r(t)){n=[],o=[];for(var f=0,p=0,g=t.length,d=e.length;f<g&&p<d;f++,p++)s=l.convertPoint({x:c.scale(t[f]),y:h.scale(e[p])}),n.push(s.x),o.push(s.y)}else if(r(e))t=c.scale(t),o=[],a(e,function(e){e=h.scale(e),s=l.convertPoint({x:t,y:e}),n&&n!==s.x?(r(n)||(n=[n]),n.push(s.x)):n=s.x,o.push(s.y)});else if(r(t))e=h.scale(e),n=[],a(t,function(t){t=c.scale(t),s=l.convertPoint({x:t,y:e}),o&&o!==s.y?(r(o)||(o=[o]),o.push(s.y)):o=s.y,n.push(s.x)});else{t=c.scale(t),e=h.scale(e);var v=l.convertPoint({x:t,y:e});n=v.x,o=v.y}return[n,o]},e}(n(30));t.exports=o},function(t,e,n){var i=function(t){function e(e){var n;return(n=t.call(this,e)||this).names=["shape"],n.type="shape",n.gradient=null,n}return function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t),e.prototype.getLinearValue=function(t){var e=this.values;return e[Math.round((e.length-1)*t)]},e}(n(30));t.exports=i},function(t,e,n){var i=function(t){function e(e){var n;return(n=t.call(this,e)||this).names=["size"],n.type="size",n.gradient=null,n}return function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t),e}(n(30));t.exports=i},function(t,e,n){var i=n(3),r=n(31),a=i.MatrixUtil.vec2,o=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"circle",tickInterval:null,startAngle:-Math.PI/2,endAngle:3*Math.PI/2,line:{lineWidth:1,stroke:"#C0D0E0"},tickLine:{lineWidth:1,stroke:"#C0D0E0",length:5},_labelOffset:5})},n.parseTick=function(t,e,n){return{text:t,value:e/n}},n._getCirclePoint=function(t,e){var n=this.get("center");return e=e||this.get("radius"),{x:n.x+Math.cos(t)*e,y:n.y+Math.sin(t)*e}},n.getTickPoint=function(t){var e=this.get("startAngle"),n=e+(this.get("endAngle")-e)*t;return this._getCirclePoint(n)},n.getSideVector=function(t,e){var n=this.get("center"),r=[e.x-n.x,e.y-n.y];if(!i.isNil(t)){var o=a.length(r);a.scale(r,r,t/o)}return r},n.getSidePoint=function(t,e){var n=this.getSideVector(e,t);return{x:t.x+n[0],y:t.y+n[1]}},n.getTickEnd=function(t,e){var n=this.get("tickLine");return e=e||n.length,this.getSidePoint(t,e)},n.getTextAnchor=function(t){var e;return i.snapEqual(t[0],0)?e="center":t[0]>0?e="left":t[0]<0&&(e="right"),e},n.getLinePath=function(){var t=this.get("center"),e=t.x,n=t.y,i=this.get("radius"),r=i,a=this.get("startAngle"),o=this.get("endAngle"),s=this.get("inner"),u=[];if(Math.abs(o-a)===2*Math.PI)u=[["M",e,n],["m",0,-r],["a",i,r,0,1,1,0,2*r],["a",i,r,0,1,1,0,-2*r],["z"]];else{var l=this._getCirclePoint(a),c=this._getCirclePoint(o),h=Math.abs(o-a)>Math.PI?1:0,f=a>o?0:1;if(s){var p=this.getSideVector(s*i,l),g=this.getSideVector(s*i,c),d={x:p[0]+e,y:p[1]+n},v={x:g[0]+e,y:g[1]+n};u=[["M",d.x,d.y],["L",l.x,l.y],["A",i,r,0,h,f,c.x,c.y],["L",v.x,v.y],["A",i*s,r*s,0,h,Math.abs(f-1),d.x,d.y]]}else u=[["M",e,n],["L",l.x,l.y],["A",i,r,0,h,f,c.x,c.y],["L",e,n]]}return u},n.addLabel=function(e,n,i){var r=this.get("label").offset||this.get("_labelOffset")||.001;n=this.getSidePoint(n,r),t.prototype.addLabel.call(this,e,n,i)},n.autoRotateLabels=function(){var t=this.get("ticks"),e=this.get("labelRenderer");if(e&&t.length>12){var n=this.get("radius"),r=this.get("startAngle"),a=this.get("endAngle")-r,o=a/(t.length-1),s=Math.sin(o/2)*n*2,u=this.getMaxLabelWidth(e);i.each(e.get("group").get("children"),function(e,n){var i=t[n].value*a+r,o=i%(2*Math.PI);u<s?(o<=0&&(i+=Math.PI),o>Math.PI&&(i-=Math.PI),i-=Math.PI/2,e.attr("textAlign","center")):o>Math.PI/2?i-=Math.PI:o<Math.PI/2*-1&&(i+=Math.PI),e.rotateAtStart(i)})}},e}(r);t.exports=o},function(t,e,n){var i=n(3),r=n(31),a=i.MatrixUtil,o=i.PathUtil,s=a.vec2,u=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{inner:0,type:"helix",line:{lineWidth:1,stroke:"#C0D0E0"},tickLine:{lineWidth:1,stroke:"#C0D0E0",length:5},startAngle:1.25*Math.PI,endAngle:7.25*Math.PI,a:0,center:null,axisStart:null,crp:[]})},n.getLinePath=function(){var t=this.get("crp"),e=this.get("axisStart"),n=o.catmullRomToBezier(t);return n.unshift(["M",e.x,e.y]),n},n.getTickPoint=function(t){var e=this.get("startAngle"),n=e+(this.get("endAngle")-e)*t;return this._getHelixPoint(n)},n._getHelixPoint=function(t){var e=this.get("center"),n=this.get("a")*t+this.get("inner");return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},n.getSideVector=function(t,e){var n=this.get("center"),i=[e.x-n.x,e.y-n.y];if(t){var r=s.length(i);s.scale(i,i,t/r)}return i},n.getSidePoint=function(t,e){var n=this.getSideVector(e,t);return{x:t.x+n[0],y:t.y+n[1]}},n.getTickEnd=function(t,e){var n=this.get("tickLine");return e=e||n.length,this.getSidePoint(t,e)},e}(r);t.exports=u},function(t,e,n){var i=n(31);i.Base=i,i.Circle=n(227),i.Grid=n(100),i.Helix=n(228),i.Line=n(230),i.Polyline=n(231),t.exports=i},function(t,e,n){var i=n(31),r=n(3),a=r.MatrixUtil.vec2,o=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return r.mix({},e,{x:null,y:null,line:{lineWidth:1,stroke:"#C0D0E0"},tickLine:{lineWidth:1,stroke:"#C0D0E0",length:5},isVertical:!1,start:null,end:null})},n._getAvgLabelLength=function(t){var e=t.get("group").get("children");return e[1].attr("x")-e[0].attr("x")},n.getSideVector=function(t){var e=this.get("isVertical"),n=this.get("factor");if(r.isArray(t))return t.map(function(t){return t*n});var i=this.get("start"),o=this.get("end"),s=this.getAxisVector(),u=a.normalize([],s),l=!1;(e&&i.y<o.y||!e&&i.x>o.x)&&(l=!0);var c=a.vertical([],u,l);return a.scale([],c,t*n)},n.getAxisVector=function(){var t=this.get("start"),e=this.get("end");return[e.x-t.x,e.y-t.y]},n.getLinePath=function(){var t=this.get("start"),e=this.get("end"),n=[];return n.push(["M",t.x,t.y]),n.push(["L",e.x,e.y]),n},n.getTickEnd=function(t,e){var n=this.getSideVector(e);return{x:t.x+n[0],y:t.y+n[1]}},n.getTickPoint=function(t){var e=this.get("start"),n=this.get("end"),i=n.x-e.x,r=n.y-e.y;return{x:e.x+i*t,y:e.y+r*t}},n.renderTitle=function(){var t=this.get("title"),e=this.getTickPoint(.5),n=t.offset;if(r.isNil(n)){n=20;var i=this.get("labelsGroup");if(i)n+=this.getMaxLabelWidth(i)+(this.get("label").offset||this.get("_labelOffset"))}var o=t.textStyle,s=r.mix({},o);if(t.text){var u=this.getAxisVector();if(t.autoRotate&&r.isNil(o.rotate)){var l=0;if(!r.snapEqual(u[1],0)){var c=[u[0],u[1]];l=a.angleTo(c,[1,0],!0)}s.rotate=l*(180/Math.PI)}else r.isNil(o.rotate)||(s.rotate=o.rotate/180*Math.PI);var h,f=this.getSideVector(n),p=t.position;h="start"===p?{x:this.get("start").x+f[0],y:this.get("start").y+f[1]}:"end"===p?{x:this.get("end").x+f[0],y:this.get("end").y+f[1]}:{x:e.x+f[0],y:e.y+f[1]},s.x=h.x,s.y=h.y,s.text=t.text;var g=this.get("group").addShape("Text",{zIndex:2,attrs:s});g.name="axis-title",this.get("appendInfo")&&g.setSilent("appendInfo",this.get("appendInfo"))}},n.autoRotateLabels=function(){var t=this.get("labelRenderer"),e=this.get("title");if(t){var n=t.get("group").get("children"),i=this.get("label").offset,a=e?e.offset:48;if(a<0)return;var o,s,u=this.getAxisVector();if(r.snapEqual(u[0],0)&&e&&e.text)(s=this.getMaxLabelWidth(t))>a-i-12&&(o=-1*Math.acos((a-i-12)/s));else if(r.snapEqual(u[1],0)&&n.length>1){var l=Math.abs(this._getAvgLabelLength(t));(s=this.getMaxLabelWidth(t))>l&&(o=Math.asin(1.25*(a-i-12)/s))}if(o){var c=this.get("factor");r.each(n,function(t){t.rotateAtStart(o),r.snapEqual(u[1],0)&&(c>0?t.attr("textAlign","left"):t.attr("textAlign","right"))})}}},e}(i);t.exports=o},function(t,e,n){var i=n(3),r=n(31),a=i.MatrixUtil,o=i.PathUtil,s=a.vec2,u=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"polyline"})},n.getLinePath=function(){var t=this.get("tickPoints"),e=this.get("start"),n=this.get("end"),r=[];r.push(e.x),r.push(e.y),i.each(t,function(t){r.push(t.x),r.push(t.y)}),r.push(n.x),r.push(n.y);var a=o.catmullRomToBezier(r);return a.unshift(["M",e.x,e.y]),a},n.getTickPoint=function(t,e){return this.get("tickPoints")[e]},n.getTickEnd=function(t,e,n){var i=this.get("tickLine"),r=e||i.length,a=this.getSideVector(r,t,n);return{x:t.x+a[0],y:t.y+a[1]}},n.getSideVector=function(t,e,n){var i;if(0===n){if((i=this.get("start")).x===e.x&&i.y===e.y)return[0,0]}else i=this.get("tickPoints")[n-1];var r=[e.x-i.x,e.y-i.y],a=s.normalize([],r),o=s.vertical([],a,!1);return s.scale([],o,t)},e}(r);t.exports=u},function(t,e,n){var i=n(3),r=n(18),a=Math.PI,o=Math.atan;function s(t,e){var n,i=t.x-e.x,r=t.y-e.y;return 0===r?n=i<0?a/2:270*a/180:i>=0&&r>0?n=2*a-o(i/r):i<=0&&r<0?n=a-o(i/r):i>0&&r<0?n=a+o(-i/r):i<0&&r>0&&(n=o(i/-r)),n}var u=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{name:"arc",start:null,end:null,style:{stroke:"#999",lineWidth:1}})},n.render=function(t,e){var n,r=this.parsePoint(t,this.get("start")),o=this.parsePoint(t,this.get("end")),u=t.getCenter(),l=Math.sqrt((r.x-u.x)*(r.x-u.x)+(r.y-u.y)*(r.y-u.y)),c=s(r,u),h=s(o,u);if(h<c&&(h+=2*a),i.isNumberEqual(r.x,o.x)&&i.isNumberEqual(r.y,o.y)&&(this.get("start")[0]!==this.get("end")[0]||this.get("start")[1]!==this.get("end")[1]))n=[["M",r.x,r.y],["A",l,l,0,1,1,2*u.x-r.x,2*u.y-r.y],["A",l,l,0,1,1,r.x,r.y]];else{var f=(h-c)%(2*a)>a?1:0;n=[["M",r.x,r.y],["A",l,l,0,f,1,o.x,o.y]]}var p=e.addShape("path",{zIndex:this.get("zIndex"),attrs:i.mix({path:n},this.get("style"))});p.name="guide-arc",this.get("appendInfo")&&p.setSilent("appendInfo",this.get("appendInfo")),this.set("el",p)},e}(r);t.exports=u},function(t,e,n){var i=n(3),r=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{name:"dataMarker",zIndex:1,top:!0,position:null,style:{point:{r:3,fill:"#FFFFFF",stroke:"#1890FF",lineWidth:2},line:{stroke:"#A3B1BF",lineWidth:1},text:{fill:"#000000",opacity:.65,fontSize:12,textAlign:"start"}},display:{point:!0,line:!0,text:!0},lineLength:20,direction:"upward",autoAdjust:!0})},n.render=function(t,e){var n=this.parsePoint(t,this.get("position")),i=e.addGroup();i.name="guide-data-marker";var r,a,o=this._getElementPosition(n),s=this.get("display");if(s.line){var u=o.line;r=this._drawLine(u,i)}if(s.text&&this.get("content")){var l=o.text;a=this._drawText(l,i)}if(s.point){var c=o.point;this._drawPoint(c,i)}if(this.get("autoAdjust")){var h=i.getBBox(),f=h.minX,p=h.minY,g=h.maxX,d=h.maxY,v=t.start,y=t.end;if(a){f<=v.x&&a.attr("textAlign","start"),g>=y.x&&a.attr("textAlign","end");var m=this.get("direction");if("upward"===m&&p<=y.y||"upward"!==m&&d>=v.y){var x,b;"upward"===m&&p<=y.y?(x="top",b=1):(x="bottom",b=-1),a.attr("textBaseline",x);var _=0;if(this.get("display").line){_=this.get("lineLength");var w=[["M",n.x,n.y],["L",n.x,n.y+_*b]];r.attr("path",w)}var M=n.y+(_+2)*b;a.attr("y",M)}}}this.get("appendInfo")&&i.setSilent("appendInfo",this.get("appendInfo")),this.set("el",i)},n._getElementPosition=function(t){var e=t.x,n=t.y,i=this.get("display").line?this.get("lineLength"):0,r=this.get("direction");this.get("style").text.textBaseline="upward"===r?"bottom":"top";var a="upward"===r?-1:1;return{point:{x:e,y:n},line:[{x:e,y:n},{x:e,y:i*a+n}],text:{x:e,y:(i+2)*a+n}}},n._drawLine=function(t,e){var n=this.get("style").line,r=[["M",t[0].x,t[0].y],["L",t[1].x,t[1].y]];return e.addShape("path",{attrs:i.mix({path:r},n)})},n._drawText=function(t,e){var n=this.get("style").text;return e.addShape("text",{attrs:i.mix({text:this.get("content")},n,t)})},n._drawPoint=function(t,e){var n=this.get("style").point;return e.addShape("circle",{attrs:i.mix({},n,t)})},e}(n(18));t.exports=r},function(t,e,n){var i=n(3),r=n(101),a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{name:"dataRegion",start:null,end:null,content:"",style:{region:{lineWidth:0,fill:"#000000",opacity:.04},text:{textAlign:"center",textBaseline:"bottom",fontSize:12,fill:"rgba(0, 0, 0, .65)"}}})},n.render=function(t,e,n){var r=this.get("lineLength")||0,a=this._getRegionData(t,n);if(a.length){var o=this._getBBox(a),s=[];s.push(["M",a[0].x,o.yMin-r]);for(var u=0,l=a.length;u<l;u++){var c=["L",a[u].x,a[u].y];s.push(c)}s.push(["L",a[a.length-1].x,o.yMin-r]);var h=this.get("style"),f=h.region,p=h.text,g=e.addGroup();g.name="guide-data-region",g.addShape("path",{attrs:i.mix({path:s},f)});var d=this.get("content");d&&g.addShape("Text",{attrs:i.mix({x:(o.xMin+o.xMax)/2,y:o.yMin-r,text:d},p)}),this.get("appendInfo")&&g.setSilent("appendInfo",this.get("appendInfo")),this.set("el",g)}},n._getRegionData=function(t,e){for(var n,a=this.get("start"),o=this.get("end"),s=r.getFirstScale(this.get("xScales")).field,u=r.getFirstScale(this.get("yScales")).field,l=i.isArray(a)?a[0]:a[s],c=i.isArray(o)?o[0]:o[s],h=[],f=0,p=e.length;f<p;f++){var g=e[f];if(g[s]===l&&(n=f),f>=n&&h.push(this.parsePoint(t,[g[s],g[u]])),g[s]===c)break}return h},n._getBBox=function(t){for(var e=[],n=[],r=0;r<t.length;r++)e.push(t[r].x),n.push(t[r].y);var a=i.arrayUtil.getRange(e),o=i.arrayUtil.getRange(n);return{xMin:a.min,xMax:a.max,yMin:o.min,yMax:o.max}},e}(n(18));t.exports=a},function(t,e,n){var i=n(3),r=i.DomUtil,a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{name:"html",zIndex:7,position:null,alignX:"middle",alignY:"middle",offsetX:null,offsetY:null,html:null})},n.render=function(t,e){var n=this.parsePoint(t,this.get("position")),a=e.get("canvas").get("el").parentNode,o=r.createDom('<div class="g-guide"></div>');a.appendChild(o);var s=this.get("htmlContent")||this.get("html");i.isFunction(s)&&(s=s(this.get("xScales"),this.get("yScales")));var u=r.createDom(s);o.appendChild(u),this._setDomPosition(o,u,n),this.set("el",o)},n._setDomPosition=function(t,e,n){var i=this.get("alignX"),a=this.get("alignY"),o=r.getOuterWidth(e),s=r.getOuterHeight(e),u={x:n.x,y:n.y};"middle"===i&&"top"===a?u.x-=Math.round(o/2):"middle"===i&&"bottom"===a?(u.x-=Math.round(o/2),u.y-=Math.round(s)):"left"===i&&"bottom"===a?u.y-=Math.round(s):"left"===i&&"middle"===a?u.y-=Math.round(s/2):"left"===i&&"top"===a?(u.x=n.x,u.y=n.y):"right"===i&&"bottom"===a?(u.x-=Math.round(o),u.y-=Math.round(s)):"right"===i&&"middle"===a?(u.x-=Math.round(o),u.y-=Math.round(s/2)):"right"===i&&"top"===a?u.x-=Math.round(o):(u.x-=Math.round(o/2),u.y-=Math.round(s/2));var l=this.get("offsetX");l&&(u.x+=l);var c=this.get("offsetY");c&&(u.y+=c),r.modifyCSS(t,{position:"absolute",top:Math.round(u.y)+"px",left:Math.round(u.x)+"px",visibility:"visible",zIndex:this.get("zIndex")})},n.clear=function(){var t=this.get("el");t&&t.parentNode&&t.parentNode.removeChild(t)},e}(n(18));t.exports=a},function(t,e,n){var i=n(3),r=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"image",start:null,end:null,src:null,offsetX:null,offsetY:null})},n.render=function(t,e){var n=this.parsePoint(t,this.get("start")),i={x:n.x,y:n.y};if(i.img=this.get("src"),this.get("end")){var r=this.parsePoint(t,this.get("end"));i.width=r.x-n.x,i.height=r.y-n.y}else i.width=this.get("width")||32,i.height=this.get("height")||32;this.get("offsetX")&&(i.x+=this.get("offsetX")),this.get("offsetY")&&(i.y+=this.get("offsetY"));var a=e.addShape("Image",{zIndex:1,attrs:i});a.name="guide-image",this.get("appendInfo")&&a.setSilent("appendInfo",this.get("appendInfo")),this.set("el",a)},e}(n(18));t.exports=r},function(t,e,n){t.exports={Guide:n(18),Arc:n(232),DataMarker:n(233),DataRegion:n(234),Html:n(235),Image:n(236),Line:n(238),Region:n(239),Text:n(240)}},function(t,e,n){var i=n(3),r=n(18),a=i.MatrixUtil.vec2,o=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{name:"line",start:null,end:null,lineStyle:{stroke:"#000",lineWidth:1},text:{position:"end",autoRotate:!0,style:{fill:"#999",fontSize:12,fontWeight:500,fontFamily:"sans-serif"},content:null}})},n.render=function(t,e){var n=this.parsePoint(t,this.get("start")),i=this.parsePoint(t,this.get("end")),r=e.addGroup({viewId:e.get("viewId")});this._drawLines(n,i,r);var a=this.get("text");a&&a.content&&this._drawText(n,i,r),this.set("el",r)},n._drawLines=function(t,e,n){var r=[["M",t.x,t.y],["L",e.x,e.y]],a=n.addShape("Path",{attrs:i.mix({path:r},this.get("lineStyle"))});a.name="guide-line",this.get("appendInfo")&&a.setSilent("appendInfo",this.get("appendInfo"))},n._drawText=function(t,e,n){var r,o=this.get("text"),s=o.position,u=o.style||{};((r="start"===s?0:"center"===s?.5:i.isString(s)&&-1!==s.indexOf("%")?parseInt(s,10)/100:i.isNumber(s)?s:1)>1||r<0)&&(r=1);var l={x:t.x+(e.x-t.x)*r,y:t.y+(e.y-t.y)*r};if(o.offsetX&&(l.x+=o.offsetX),o.offsetY&&(l.y+=o.offsetY),l.text=o.content,l=i.mix({},l,u),o.autoRotate&&i.isNil(u.rotate)){var c=a.angleTo([e.x-t.x,e.y-t.y],[1,0],1);l.rotate=c}else i.isNil(u.rotate)||(l.rotate=u.rotate*Math.PI/180);var h=n.addShape("Text",{attrs:l});h.name="guide-line-text",this.get("appendInfo")&&h.setSilent("appendInfo",this.get("appendInfo"))},e}(r);t.exports=o},function(t,e,n){var i=n(3),r=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{name:"region",zIndex:1,start:null,end:null,style:{lineWidth:0,fill:"#CCD7EB",opacity:.4}})},n.render=function(t,e){var n=this.get("style"),r=this._getPath(t),a=e.addShape("path",{zIndex:this.get("zIndex"),attrs:i.mix({path:r},n)});a.name="guide-region",this.get("appendInfo")&&a.setSilent("appendInfo",this.get("appendInfo")),this.set("el",a)},n._getPath=function(t){var e=this.parsePoint(t,this.get("start")),n=this.parsePoint(t,this.get("end"));return[["M",e.x,e.y],["L",n.x,e.y],["L",n.x,n.y],["L",e.x,n.y],["z"]]},e}(n(18));t.exports=r},function(t,e,n){var i=n(3),r=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{name:"text",position:null,content:null,style:{fill:"#999",fontSize:12,fontWeight:500,textAlign:"center"},offsetX:null,offsetY:null,top:!0})},n.render=function(t,e){var n=this.parsePoint(t,this.get("position")),r=i.mix({},this.get("style")),a=this.get("offsetX"),o=this.get("offsetY");a&&(n.x+=a),o&&(n.y+=o),r.rotate&&(r.rotate=r.rotate*Math.PI/180);var s=e.addShape("Text",{zIndex:this.get("zIndex"),attrs:i.mix({text:this.get("content")},r,n)});s.name="guide-text",this.get("appendInfo")&&s.setSilent("appendInfo",this.get("appendInfo")),this.set("el",s)},e}(n(18));t.exports=r},function(t,e,n){var i=n(102);t.exports=i},function(t,e){t.exports=function(t,e){for(var n,i,r=[],a=0;a<t.length;a++)n=t[a].getBBox(),i=e[a].getBBox(),n.width>i.width||n.height>i.height?r.push(t[a]):n.width*n.height>i.width*i.height&&r.push(t[a]);for(var o=0;o<r.length;o++)r[o].remove()}},function(t,e,n){var i=n(103);function r(t,e,n,i){var r=t.getBBox(),a=r.width,o=r.height,s={x:e,y:n,textAlign:"center"};switch(i){case 0:s.y-=o/2,s.textAlign="left";break;case 1:s.y-=o/2,s.textAlign="right";break;case 2:s.y+=o/2,s.textAlign="right";break;case 3:s.y+=o/2,s.textAlign="left";break;case 5:s.y-=o/2;break;case 6:s.y+=o/2;break;case 7:s.x+=a/2,s.textAlign="left";break;case 8:s.x-=a/2,s.textAlign="right"}return t.attr(s),t.getBBox()}t.exports=function(t){for(var e,n,a,o,s,u=new i,l=[],c=0;c<t.length;c++){a=(n=t[c]).attr("x"),o=n.attr("y"),s=!1;for(var h=0;h<8;h++)if(e=r(n,a,o,h),u.hasGap(e)){u.fillGap(e),s=!0;break}s||l.push(n)}for(var f=0;f<l.length;f++)l[f].remove();return s}},function(t,e,n){var i=n(103),r=20;function a(t,e){var n,i=t.attr("x"),a=t.attr("y"),o=t.getBBox(),s=Math.sqrt(o.width*o.width+o.height*o.height),u=1,l=0,c=0,h=function(t){return[(t*=.1)*Math.cos(t),t*Math.sin(t)]};if(e.hasGap(o))return e.fillGap(o),!0;for(var f=!1,p=0;Math.min(Math.abs(l),Math.abs(c))<s&&p<r;)if(l=~~(n=h(u+=-1))[0],c=~~n[1],t.attr({x:i+l,y:a+c}),p++,e.hasGap(t.getBBox())){e.fillGap(o),f=!0;break}return f}t.exports=function(t){for(var e,n=new i,r=[],o=0;o<t.length;o++)a(e=t[o],n)||r.push(e);for(var s=0;s<r.length;s++)r[s].remove()}},function(t,e,n){var i=n(3),r=n(105),a=i.DomUtil;function o(t,e){return t.getElementsByClassName(e)[0]}var s=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"category-page-legend",container:null,caretStyle:{fill:"rgba(0,0,0,0.65)"},pageNumStyle:{display:"inline-block",fontSize:"12px",fontFamily:this.fontFamily,cursor:"default"},slipDomStyle:{width:"auto",height:"auto",position:"absolute"},slipTpl:'<div class="g2-slip" ><svg viewBox="64 64 896 896" class="g2-caret-up" data-icon="left" width="1em" height="1em" aria-hidden="true"><path d="M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 0 0 0 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"></path></svg><p class="cur-pagenum" style = "display:inline-block;">1</p><p class="next-pagenum" style = "display:inline-block;">/2</p><svg viewBox="64 64 896 896" class="g2-caret-down" data-icon="right" width="1em" height="1em" aria-hidden="true"><path d="M765.7 486.8L314.9 134.7A7.97 7.97 0 0 0 302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 0 0 0-50.4z"></path></svg></div>',slipWidth:65,legendOverflow:"unset"})},n.render=function(){t.prototype._renderHTML.call(this),this._renderFlipPage()},n._renderFlipPage=function(){var t=document.getElementsByClassName("g2-legend")[0],e=o(t,"g2-legend-list"),n=this.get("position"),r=this.get("layout"),s="right"===n||"left"===n||"vertical"===r?"block":"inline-block";if(t.scrollHeight>t.offsetHeight){var u=this.get("slipTpl"),l=a.createDom(u),c=o(l,"g2-caret-up"),h=o(l,"g2-caret-down");a.modifyCSS(c,this.get("caretStyle")),a.modifyCSS(c,{fill:"rgba(0,0,0,0.25)"}),a.modifyCSS(h,this.get("caretStyle"));var f=o(l,"cur-pagenum"),p=o(l,"next-pagenum"),g=this.get("pageNumStyle");a.modifyCSS(f,i.mix({},g,{paddingLeft:"10px"})),a.modifyCSS(p,i.mix({},g,{opacity:.3,paddingRight:"10px"})),a.modifyCSS(l,i.mix({},this.get("slipDomStyle"),{top:t.offsetHeight+"px"})),t.style.overflow=this.get("legendOverflow"),t.appendChild(l);for(var d=e.childNodes,v=0,y=1,m=[],x=0;x<d.length;x++)d[x].style.display=s,(v=d[x].offsetTop+d[x].offsetHeight)>=t.offsetHeight&&(y++,m.forEach(function(t){t.style.display="none"}),m=[]),m.push(d[x]);p.innerText="/"+y,d.forEach(function(e){e.style.display=s,(v=e.offsetTop+e.offsetHeight)>t.offsetHeight&&(e.style.display="none")}),c.addEventListener("click",function(){if(d[0].style.display!==s){var e=-1;d.forEach(function(t,n){t.style.display===s&&(e=-1===e?n:e,t.style.display="none")});for(var n=e-1;n>=0&&(d[n].style.display=s,v=d[e-1].offsetTop+d[e-1].offsetHeight,d[n].style.display="none",v<t.offsetHeight);n--)d[n].style.display=s;var i=Number.parseInt(f.innerText,10)-1;c.style.fill=1===i?"rgba(0,0,0,0.25)":"rgba(0,0,0,0.65)",h.style.fill="rgba(0,0,0,0.65)",f.innerText=i}}),h.addEventListener("click",function(){if(d[d.length-1].style.display!==s){var e=-1;d.forEach(function(t,n){t.style.display===s&&(e=n,t.style.display="none")});for(var n=e+1;n<d.length&&(d[n].style.display=s,v=d[n].offsetTop+d[n].offsetHeight,d[n].style.display="none",v<t.offsetHeight);n++)d[n].style.display=s;var i=Number.parseInt(f.innerText,10)+1;h.style.fill=i===s?"rgba(0,0,0,0.25)":"rgba(0,0,0,0.65)",c.style.fill="rgba(0,0,0,0.65)",f.innerText=i}}),this.set("slipDom",l)}},n.destroy=function(){t.prototype.destroy.call(this);var e=this.get("slipDom");e&&e.parentNode&&e.parentNode.removeChild(e)},e}(r);t.exports=s},function(t,e,n){var i=n(59).ColorUtil,r=n(3),a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return r.mix({},e,{type:"color-legend",layout:"vertical",triggerAttr:{fill:"#fff",shadowOffsetX:-2,shadowOffsetY:2,shadowBlur:10,shadowColor:"#ccc",radius:3},isSegment:!1})},n._setPercentage=function(){var t=this.get("items");if(!t[0].percentage){var e=t[0].value,n=t[t.length-1].value;r.each(t,function(t){t.percentage=(t.value-e)/(n-e)})}},n._renderSliderShape=function(){this._setPercentage();var t,e=this.get("slider").get("backgroundElement"),n=this.get("width"),a=this.get("height"),o=this.get("layout"),s=this.get("items"),u="";return"vertical"===o?(u+="l (90) ",r.each(s,function(e){t=i.toRGB(e.color),u+=1-e.percentage+":"+t+" "})):(u+="l (0) ",r.each(s,function(e){t=i.toRGB(e.color),u+=e.percentage+":"+t+" "})),this._addMiddleBar(e,"Rect",{x:0,y:0,width:n,height:a,fill:u,strokeOpacity:0})},n._renderUnslidable=function(){this._setPercentage();var t=this.get("titleShape"),e=this.get("titleGap");e=t?t.getBBox().height+e:e;var n,a=this.get("width"),o=this.get("height"),s=this.get("layout"),u=this.get("items"),l="",c=[],h=this.get("group").addGroup(),f=u.length;if("vertical"===s){l+="l (90) ";for(var p=0;p<f;p+=1){if(0!==p&&p!==f-1&&(c.push(["M",0,o-u[p].percentage*o]),c.push(["L",a,o-u[p].percentage*o])),n=i.toRGB(u[p].color),l+=1-u[p].percentage+":"+n+" ",this.get("isSegment")&&p>0){var g=i.toRGB(u[p-1].color);l+=1-u[p].percentage+":"+g+" "}h.addShape("text",{attrs:r.mix({},{x:a+this.get("textOffset")/2,y:o-u[p].percentage*o,text:this._formatItemValue(u[p].value)+""},this.get("textStyle"),{textAlign:"start"})})}}else{l+="l (0) ";for(var d=0;d<f;d+=1){if(0!==d&&d!==f-1&&(c.push(["M",u[d].percentage*a,0]),c.push(["L",u[d].percentage*a,o])),n=i.toRGB(u[d].color),this.get("isSegment")&&d>0){var v=i.toRGB(u[d-1].color);l+=u[d].percentage+":"+v+" "}l+=u[d].percentage+":"+n+" ",h.addShape("text",{attrs:r.mix({},{x:u[d].percentage*a,y:o+5+this.get("textOffset"),text:this._formatItemValue(u[d].value)+""},this.get("textStyle"))})}}h.addShape("rect",{attrs:{x:0,y:0,width:a,height:o,fill:l,strokeOpacity:0}}),h.addShape("path",{attrs:r.mix({path:c},this.get("lineStyle"))}),h.move(0,e)},e}(n(61));t.exports=a},function(t,e,n){t.exports={Category:n(106),CatHtml:n(105),CatPageHtml:n(245),Color:n(246),Size:n(249),CircleSize:n(248)}},function(t,e,n){var i=n(3),r=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"size-circle-legend",width:100,height:200,_unslidableCircleStyle:{stroke:"rgb(99, 161, 248)",fill:"rgb(99, 161, 248)",fillOpacity:.3,lineWidth:1.5},triggerAttr:{fill:"white",shadowOffsetX:-2,shadowOffsetY:2,shadowBlur:10,shadowColor:"#ccc"},frontMiddleBarStyle:{fill:"rgb(64, 141, 251)"}})},n._renderSliderShape=function(){var t=this.get("slider").get("backgroundElement"),e=this.get("layout"),n="vertical"===e?2:this.get("width"),r="vertical"===e?this.get("height"):2,a=this.get("height")/2,o=this.get("frontMiddleBarStyle"),s="vertical"===e?[[0,0],[n,0],[n,r],[0,r]]:[[0,a+r],[0,a-r],[5+n-4,a-r],[5+n-4,a+r]];return this._addMiddleBar(t,"Polygon",i.mix({points:s},o))},n._addHorizontalTrigger=function(t,e,n,r){var a=this.get("slider").get(t+"HandleElement"),o=-this.get("height")/2,s=a.addShape("circle",{attrs:i.mix({x:0,y:o,r:r},e)}),u=a.addShape("text",{attrs:i.mix(n,{x:0,y:o+r+10,textAlign:"center",textBaseline:"middle"})}),l="vertical"===this.get("layout")?"ns-resize":"ew-resize";s.attr("cursor",l),u.attr("cursor",l),this.set(t+"ButtonElement",s),this.set(t+"TextElement",u)},n._addVerticalTrigger=function(t,e,n,r){var a=this.get("slider").get(t+"HandleElement"),o=a.addShape("circle",{attrs:i.mix({x:0,y:0,r:r},e)}),s=a.addShape("text",{attrs:i.mix(n,{x:r+10,y:0,textAlign:"start",textBaseline:"middle"})}),u="vertical"===this.get("layout")?"ns-resize":"ew-resize";o.attr("cursor",u),s.attr("cursor",u),this.set(t+"ButtonElement",o),this.set(t+"TextElement",s)},n._renderTrigger=function(){var t=this.get("firstItem"),e=this.get("lastItem"),n=this.get("layout"),r=this.get("textStyle"),a=this.get("triggerAttr"),o=i.mix({},a),s=i.mix({},a),u=i.mix({text:this._formatItemValue(t.value)+""},r),l=i.mix({text:this._formatItemValue(e.value)+""},r);"vertical"===n?(this._addVerticalTrigger("min",o,u,5),this._addVerticalTrigger("max",s,l,16)):(this._addHorizontalTrigger("min",o,u,5),this._addHorizontalTrigger("max",s,l,16))},n._bindEvents=function(){var t=this;this.get("slidable")&&this.get("slider").on("sliderchange",function(e){var n=e.range,i=t.get("firstItem").value,r=t.get("lastItem").value,a=i+n[0]/100*(r-i),o=i+n[1]/100*(r-i),s=5+n[0]/100*11,u=5+n[1]/100*11;t._updateElement(a,o,s,u);var l=new Event("itemfilter",e,!0,!0);l.range=[a,o],t.emit("itemfilter",l)})},n._updateElement=function(e,n,i,r){t.prototype._updateElement.call(this,e,n);var a=this.get("minTextElement"),o=this.get("maxTextElement"),s=this.get("minButtonElement"),u=this.get("maxButtonElement");if(s.attr("r",i),u.attr("r",r),"vertical"===this.get("layout"))a.attr("x",i+10),o.attr("x",r+10);else{var l=-this.get("height")/2;a.attr("y",l+i+10),o.attr("y",l+r+10)}},n._addCircle=function(t,e,n,r,a){var o=this.get("group").addGroup(),s=this.get("_unslidableCircleStyle"),u=this.get("textStyle"),l=this.get("titleShape"),c=this.get("titleGap");l&&(c+=l.getBBox().height),o.addShape("circle",{attrs:i.mix({x:t,y:e+c,r:0===n?1:n},s)}),"vertical"===this.get("layout")?o.addShape("text",{attrs:i.mix({x:a+20+this.get("textOffset"),y:e+c,text:0===r?"0":r},u)}):o.addShape("text",{attrs:i.mix({x:t,y:e+c+a+13+this.get("textOffset"),text:0===r?"0":r},u)})},n._renderUnslidable=function(){var t=this.get("firstItem").value,e=this.get("lastItem").value;if(t>e){var n=e;e=t,t=n}var i=this._formatItemValue(t),r=this._formatItemValue(e),a=t<5?5:t,o=e>16?16:e;a>o&&(a=5,o=16),"vertical"===this.get("layout")?(this._addCircle(o,o,a,i,2*o),this._addCircle(o,2*o+16+a,o,r,2*o)):(this._addCircle(o,o,a,i,2*o),this._addCircle(2*o+16+a,o,o,r,2*o))},n.activate=function(e){this.get("slidable")&&t.prototype.activate.call(this,e)},e}(n(61));t.exports=r},function(t,e,n){var i=n(3),r=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"size-legend",width:100,height:200,_unslidableElementStyle:{fill:"#4E7CCC",fillOpacity:1},frontMiddleBarStyle:{fill:"rgb(64, 141, 251)"}})},n._renderSliderShape=function(){var t=this.get("slider").get("backgroundElement"),e=this.get("layout"),n=this.get("width"),r=this.get("height"),a=this.get("height")/2,o=this.get("frontMiddleBarStyle"),s="vertical"===e?[[0,0],[n,0],[n,r],[n-4,r]]:[[0,a+r/2],[0,a+r/2-4],[n,a-r/2],[n,a+r/2]];return this._addMiddleBar(t,"Polygon",i.mix({points:s},o))},n._renderUnslidable=function(){var t=this.get("layout"),e=this.get("width"),n=this.get("height"),r=this.get("frontMiddleBarStyle"),a="vertical"===t?[[0,0],[e,0],[e,n],[e-4,n]]:[[0,n],[0,n-4],[e,0],[e,n]];this.get("group").addGroup().addShape("Polygon",{attrs:i.mix({points:a},r)});var o=this._formatItemValue(this.get("firstItem").value),s=this._formatItemValue(this.get("lastItem").value);"vertical"===this.get("layout")?(this._addText(e+10,n-3,o),this._addText(e+10,3,s)):(this._addText(0,n,o),this._addText(e,n,s))},n._addText=function(t,e,n){var r=this.get("group").addGroup(),a=this.get("textStyle"),o=this.get("titleShape"),s=this.get("titleGap");o&&(s+=o.getBBox().height),"vertical"===this.get("layout")?r.addShape("text",{attrs:i.mix({x:t+this.get("textOffset"),y:e,text:0===n?"0":n},a)}):(e+=s+this.get("textOffset")-20,o||(e+=10),r.addShape("text",{attrs:i.mix({x:t,y:e,text:0===n?"0":n},a)}))},e}(n(61));t.exports=r},function(t,e,n){var i=n(3),r=i.DomUtil,a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){return{range:null,middleAttr:{fill:"#fff",fillOpacity:0},backgroundElement:null,minHandleElement:null,maxHandleElement:null,middleHandleElement:null,currentTarget:null,layout:"vertical",width:null,height:null,pageX:null,pageY:null}},n._beforeRenderUI=function(){var t=this.get("layout"),e=this.get("backgroundElement"),n=this.get("minHandleElement"),i=this.get("maxHandleElement"),r=this.addShape("rect",{attrs:this.get("middleAttr")}),a="vertical"===t?"ns-resize":"ew-resize";this.add([e,n,i]),this.set("middleHandleElement",r),e.set("zIndex",0),r.set("zIndex",1),n.set("zIndex",2),i.set("zIndex",2),r.attr("cursor","move"),n.attr("cursor",a),i.attr("cursor",a),this.sort()},n._renderUI=function(){"horizontal"===this.get("layout")?this._renderHorizontal():this._renderVertical()},n._transform=function(t){var e=this.get("range"),n=e[0]/100,i=e[1]/100,r=this.get("width"),a=this.get("height"),o=this.get("minHandleElement"),s=this.get("maxHandleElement"),u=this.get("middleHandleElement");o.resetMatrix(),s.resetMatrix(),"horizontal"===t?(u.attr({x:r*n,y:0,width:(i-n)*r,height:a}),o.translate(n*r,a),s.translate(i*r,a)):(u.attr({x:0,y:a*(1-i),width:r,height:(i-n)*a}),o.translate(1,(1-n)*a),s.translate(1,(1-i)*a))},n._renderHorizontal=function(){this._transform("horizontal")},n._renderVertical=function(){this._transform("vertical")},n._bindUI=function(){this.on("mousedown",i.wrapBehavior(this,"_onMouseDown"))},n._isElement=function(t,e){var n=this.get(e);return t===n||!!n.isGroup&&n.get("children").indexOf(t)>-1},n._getRange=function(t,e){var n=t+e;return n=(n=n>100?100:n)<0?0:n},n._updateStatus=function(t,e){var n="x"===t?this.get("width"):this.get("height");t=i.upperFirst(t);var r,a=this.get("range"),o=this.get("page"+t),s=this.get("currentTarget"),u=this.get("rangeStash"),l="vertical"===this.get("layout")?-1:1,c=e["page"+t],h=(c-o)/n*100*l;a[1]<=a[0]?(this._isElement(s,"minHandleElement")||this._isElement(s,"maxHandleElement"))&&(a[0]=this._getRange(h,a[0]),a[1]=this._getRange(h,a[0])):(this._isElement(s,"minHandleElement")&&(a[0]=this._getRange(h,a[0])),this._isElement(s,"maxHandleElement")&&(a[1]=this._getRange(h,a[1]))),this._isElement(s,"middleHandleElement")&&(r=u[1]-u[0],a[0]=this._getRange(h,a[0]),a[1]=a[0]+r,a[1]>100&&(a[1]=100,a[0]=a[1]-r)),this.emit("sliderchange",{range:a}),this.set("page"+t,c),this._renderUI(),this.get("canvas").draw()},n._onMouseDown=function(t){var e=t.currentTarget,n=t.event,i=this.get("range");n.stopPropagation(),n.preventDefault(),this.set("pageX",n.pageX),this.set("pageY",n.pageY),this.set("currentTarget",e),this.set("rangeStash",[i[0],i[1]]),this._bindCanvasEvents()},n._bindCanvasEvents=function(){var t=this.get("canvas").get("containerDOM");this.onMouseMoveListener=r.addEventListener(t,"mousemove",i.wrapBehavior(this,"_onCanvasMouseMove")),this.onMouseUpListener=r.addEventListener(t,"mouseup",i.wrapBehavior(this,"_onCanvasMouseUp")),this.onMouseLeaveListener=r.addEventListener(t,"mouseleave",i.wrapBehavior(this,"_onCanvasMouseUp"))},n._onCanvasMouseMove=function(t){this._mouseOutArea(t)||("horizontal"===this.get("layout")?this._updateStatus("x",t):this._updateStatus("y",t))},n._onCanvasMouseUp=function(){this._removeDocumentEvents()},n._removeDocumentEvents=function(){this.onMouseMoveListener.remove(),this.onMouseUpListener.remove()},n._mouseOutArea=function(t){var e=this.get("canvas").get("el").getBoundingClientRect(),n=this.get("parent"),i=n.getBBox(),r=n.attr("matrix")[6],a=n.attr("matrix")[7],o=r+i.width,s=a+i.height,u=t.clientX-e.x,l=t.clientY-e.y;return u<r||u>o||l<a||l>s},e}(i.Group);t.exports=a},function(t,e,n){function i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var r=n(62),a=n(3),o=a.DomUtil,s=n(254),u=n(108),l=n(110),c=n(109);function h(t,e){return t.getElementsByClassName(e)[0]}var f=function(t){!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(n,t);var e=n.prototype;function n(e){var n;n=t.call(this,e)||this,a.assign(i(i(n)),l),a.assign(i(i(n)),c);var r=n.get("viewTheme")||s;n.style=function(t,e){return Object.keys(t).forEach(function(n){e[n]&&(t[n]=a.mix(t[n],e[n]))}),t}(r,e),n._init_(),n.get("items")&&n.render();var o=n.get("crosshairs");if(o){var h="rect"===o.type?n.get("backPlot"):n.get("frontPlot"),f=new u(a.mix({plot:h,plotRange:n.get("plotRange"),canvas:n.get("canvas")},n.get("crosshairs")));f.hide(),n.set("crosshairGroup",f)}return n}return e.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return a.mix({},e,{containerTpl:' <div class="g2-tooltip"> <div class="g2-tooltip-title"></div><ul class="g2-tooltip-list"></ul></div>',itemTpl:'<li data-index={index}><span style="background-color:{color};" class=g2-tooltip-marker></span>{name}<span class=g2-tooltip-value>{value}</span></li>',htmlContent:null,follow:!0,enterable:!1})},e._init_=function(){var t,e=this.get("containerTpl"),n=this.get("canvas").get("el").parentNode;if(!this.get("htmlContent")){if(/^\#/.test(e)){var i=e.replace("#","");t=document.getElementById(i)}else t=o.createDom(e),o.modifyCSS(t,this.style["g2-tooltip"]),n.appendChild(t),n.style.position="relative";this.set("container",t)}},e.render=function(){if(this.clear(),this.get("htmlContent")){var t=this.get("canvas").get("el").parentNode,e=this._getHtmlContent();t.appendChild(e),this.set("container",e)}else this._renderTpl()},e._renderTpl=function(){var t=this,e=t.get("showTitle"),n=t.get("titleContent"),i=t.get("container"),r=h(i,"g2-tooltip-title"),s=h(i,"g2-tooltip-list"),u=t.get("items");r&&e&&(o.modifyCSS(r,t.style["g2-tooltip-title"]),r.innerHTML=n),s&&(o.modifyCSS(s,t.style["g2-tooltip-list"]),a.each(u,function(e,n){s.appendChild(t._addItem(e,n))}))},e.clear=function(){var t=this.get("container");if(this.get("htmlContent"))t&&t.remove();else{var e=h(t,"g2-tooltip-title"),n=h(t,"g2-tooltip-list");e&&(e.innerHTML=""),n&&(n.innerHTML="")}},e.show=function(){this.get("container").style.visibility="visible";var e=this.get("crosshairGroup");e&&e.show();var n=this.get("markerGroup");n&&n.show(),t.prototype.show.call(this),this.get("canvas").draw()},e.hide=function(){this.get("container").style.visibility="hidden";var e=this.get("crosshairGroup");e&&e.hide();var n=this.get("markerGroup");n&&n.hide(),t.prototype.hide.call(this),this.get("canvas").draw()},e.destroy=function(){var e=this.get("container"),n=this.get("containerTpl");e&&!/^\#/.test(n)&&e.parentNode.removeChild(e);var i=this.get("crosshairGroup");i&&i.destroy();var r=this.get("markerGroup");r&&r.remove(),t.prototype.destroy.call(this)},e._addItem=function(t,e){var n=this.get("itemTpl"),i=a.substitute(n,a.mix({index:e},t)),r=o.createDom(i);o.modifyCSS(r,this.style["g2-tooltip-list-item"]);var s=h(r,"g2-tooltip-marker");s&&o.modifyCSS(s,this.style["g2-tooltip-marker"]);var u=h(r,"g2-tooltip-value");return u&&o.modifyCSS(u,this.style["g2-tooltip-value"]),r},e._getHtmlContent=function(){var t=this.get("htmlContent")(this.get("titleContent"),this.get("items"));return o.createDom(t)},e.setPosition=function(e,n,i){var r,s=this.get("container"),u=this.get("canvas").get("el"),l=o.getWidth(u),c=o.getHeight(u),h=s.clientWidth,f=s.clientHeight,p=e,g=n,d=this.get("prePosition")||{x:0,y:0};if(this.get("enterable"))r=[e,n-=s.clientHeight/2],d&&e-d.x>0?e-=s.clientWidth+1:e+=1;else if(this.get("position")){var v=s.clientWidth,y=s.clientHeight;e=(r=this._calcTooltipPosition(e,n,this.get("position"),v,y,i))[0],n=r[1]}else e=(r=this._constraintPositionInBoundary(e,n,h,f,l,c))[0],n=r[1];if(this.get("inPlot")){var m=this.get("plotRange");e=(r=this._constraintPositionInPlot(e,n,h,f,m,this.get("enterable")))[0],n=r[1]}var x=this.get("markerItems");a.isEmpty(x)||(p=x[0].x,g=x[0].y),this.set("prePosition",r);var b=this.get("follow");s.style.left=b?e+"px":0,s.style.top=b?n+"px":0;var _=this.get("crosshairGroup");if(_){var w=this.get("items");_.setPosition(p,g,w)}t.prototype.setPosition.call(this,e,n)},n}(r);t.exports=f},function(t,e,n){var i=n(62);i.Html=n(251),i.Canvas=n(107),i.Mini=n(253),t.exports=i},function(t,e,n){var i=n(3),r=i.DomUtil,a=n(107),o=i.MatrixUtil,s=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{boardStyle:{x:0,y:0,width:0,height:0,radius:3},valueStyle:{x:0,y:0,text:"",fontFamily:"PingFang SC",fontSize:12,stroke:"#fff",lineWidth:2,fill:"black",textBaseline:"top",textAlign:"start"},padding:{top:5,right:5,bottom:0,left:5},triangleWidth:10,triangleHeight:4})},n._init_=function(){var t=this.get("padding"),e=this.get("frontPlot").addGroup();this.set("container",e);var n=e.addShape("rect",{attrs:i.mix({},this.get("boardStyle"))});this.set("board",n);var r=e.addShape("path",{attrs:{fill:this.get("boardStyle").fill}});this.set("triangleShape",r);var a=e.addGroup();a.move(t.left,t.top);var o=a.addShape("text",{attrs:i.mix({},this.get("valueStyle"))});this.set("valueShape",o)},n.render=function(){this.clear();var t=this.get("board"),e=this.get("valueShape"),n=this.get("padding"),i=this.get("items")[0];e&&e.attr("text",i.value);var r=e?e.getBBox():{width:80,height:30},a=n.left+r.width+n.right,o=n.top+r.height+n.bottom;t.attr("width",a),t.attr("height",o),this._centerTriangleShape()},n.clear=function(){this.get("valueShape").attr("text","")},n.setPosition=function(t,e,n){var i=this.get("container"),a=this.get("plotRange"),s=i.getBBox(),u=s.width,l=s.height;(t-=u/2,!n||"point"!==n.name&&"interval"!==n.name)||(e=n.getBBox().y);if(e-=l,this.get("inPlot"))t<a.tl.x?(t=a.tl.x,this._leftTriangleShape()):t+u/2>a.tr.x?(t=a.tr.x-u,this._rightTriangleShape()):this._centerTriangleShape(),e<a.tl.y?e=a.tl.y:e+l>a.bl.y&&(e=a.bl.y-l);else{var c=this.get("canvas").get("el"),h=r.getWidth(c),f=r.getHeight(c);t<0?(t=0,this._leftTriangleShape()):t+u/2>h?(t=h-u,this._rightTriangleShape()):this._centerTriangleShape(),e<0?e=0:e+l>f&&(e=f-l)}var p=o.transform([1,0,0,0,1,0,0,0,1],[["t",t,e]]);i.stopAnimate(),i.animate({matrix:p},this.get("animationDuration"))},n._centerTriangleShape=function(){var t=this.get("triangleShape"),e=this.get("triangleWidth"),n=this.get("triangleHeight"),i=this.get("board").getBBox(),r=i.width,a=i.height,o=[["M",0,0],["L",e,0],["L",e/2,n],["L",0,0],["Z"]];t.attr("path",o),t.move(r/2-e/2,a-1)},n._leftTriangleShape=function(){var t=this.get("triangleShape"),e=this.get("triangleWidth"),n=this.get("triangleHeight"),i=this.get("board").getBBox().height,r=[["M",0,0],["L",e,0],["L",0,n+3],["L",0,0],["Z"]];t.attr("path",r),t.move(0,i-3)},n._rightTriangleShape=function(){var t=this.get("triangleShape"),e=this.get("triangleWidth"),n=this.get("triangleHeight"),i=this.get("board").getBBox(),r=i.width,a=i.height,o=[["M",0,0],["L",e,0],["L",e,n+4],["L",0,0],["Z"]];t.attr("path",o),t.move(r-e-1,a-4)},e}(a);t.exports=s},function(t,e){var n,i=((n={crosshairs:!1,offset:15})["g2-tooltip"]={position:"absolute",visibility:"hidden",zIndex:8,transition:"visibility 0.2s cubic-bezier(0.23, 1, 0.32, 1), left 0.4s cubic-bezier(0.23, 1, 0.32, 1), top 0.4s cubic-bezier(0.23, 1, 0.32, 1)",backgroundColor:"rgba(255, 255, 255, 0.9)",boxShadow:"0px 0px 10px #aeaeae",borderRadius:"3px",color:"rgb(87, 87, 87)",fontSize:"12px",fontFamily:'"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"',lineHeight:"20px",padding:"10px 10px 6px 10px"},n["g2-tooltip-title"]={marginBottom:"4px"},n["g2-tooltip-list"]={margin:0,listStyleType:"none",padding:0},n["g2-tooltip-list-item"]={marginBottom:"4px"},n["g2-tooltip-marker"]={width:"5px",height:"5px",borderRadius:"50%",display:"inline-block",marginRight:"8px"},n["g2-tooltip-value"]={display:"inline-block",float:"right",marginLeft:"30px"},n);t.exports=i},function(t,e,n){"use strict";function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t,e,n){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var i=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(i){var r=Object.getOwnPropertyDescriptor(i,e);return r.get?r.get.call(n):r.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var c=n(10),h=n(41),f=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=r(this,l(e).call(this,t)))._init(),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,h),o(e,[{key:"getDefaultCfg",value:function(){var t=u(l(e.prototype),"getDefaultCfg",this).call(this);return c({},t,{start:{x:0,y:0},end:{x:0,y:0},type:"cartesian",isRect:!0})}}]),o(e,[{key:"_init",value:function(){var t=this.start,e=this.end,n={start:t.x,end:e.x},i={start:t.y,end:e.y};this.x=n,this.y=i}},{key:"convertPoint",value:function(t){var e,n;return this.isTransposed?(e=t.y,n=t.x):(e=t.x,n=t.y),{x:this.convertDim(e,"x"),y:this.convertDim(n,"y")}}},{key:"invertPoint",value:function(t){var e=this.invertDim(t.x,"x"),n=this.invertDim(t.y,"y");return this.isTransposed?{x:n,y:e}:{x:e,y:n}}}]),e}();t.exports=f},function(t,e,n){"use strict";function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t,e,n){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var i=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(i){var r=Object.getOwnPropertyDescriptor(i,e);return r.get?r.get.call(n):r.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var c=n(51),h=n(50),f=n(10),p=n(41),g=c.vec2,d=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=r(this,l(e).call(this,t)))._init(),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,p),o(e,[{key:"getDefaultCfg",value:function(){var t=u(l(e.prototype),"getDefaultCfg",this).call(this);return f({},t,{startAngle:1.25*Math.PI,endAngle:7.25*Math.PI,innerRadius:0,type:"helix",isHelix:!0})}}]),o(e,[{key:"_init",value:function(){var t=this.width,e=this.height,n=this.radius,i=this.innerRadius,r=this.startAngle,a=this.endAngle,o=(a-r)/(2*Math.PI)+1,s=Math.min(t,e)/2;n&&n>=0&&n<=1&&(s*=n);var u=Math.floor(s*(1-i)/o),l=u/(2*Math.PI),c={start:r,end:a},h={start:i*s,end:i*s+.99*u};this.a=l,this.d=u,this.x=c,this.y=h}},{key:"getCenter",value:function(){return this.center}},{key:"convertPoint",value:function(t){var e,n,i=this.a,r=this.center;this.isTransposed?(e=t.y,n=t.x):(e=t.x,n=t.y);var a=this.convertDim(e,"x"),o=i*a,s=this.convertDim(n,"y");return{x:r.x+Math.cos(a)*(o+s),y:r.y+Math.sin(a)*(o+s)}}},{key:"invertPoint",value:function(t){var e=this.center,n=this.a,i=this.d+this.y.start,r=g.subtract([],[t.x,t.y],[e.x,e.y]),a=g.angleTo(r,[1,0],!0),o=a*n;g.length(r)<o&&(o=g.length(r));var s=n*(a=2*Math.floor((g.length(r)-o)/i)*Math.PI+a),u=g.length(r)-s;u=h(u,0)?0:u;var l=this.invertDim(a,"x"),c=this.invertDim(u,"y");l=h(l,0)?0:l,c=h(c,0)?0:c;var f={};return f.x=this.isTransposed?c:l,f.y=this.isTransposed?l:c,f}}]),e}();t.exports=d},function(t,e,n){"use strict";var i=n(41);i.Cartesian=n(255),i.Rect=i.Cartesian,i.Polar=n(258),i.Helix=n(256),t.exports=i},function(t,e,n){"use strict";function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t,e,n){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var i=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(i){var r=Object.getOwnPropertyDescriptor(i,e);return r.get?r.get.call(n):r.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var c=n(51),h=n(50),f=n(10),p=n(41),g=c.mat3,d=c.vec2,v=c.vec3,y=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=r(this,l(e).call(this,t)))._init(),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,p),o(e,[{key:"getDefaultCfg",value:function(){var t=u(l(e.prototype),"getDefaultCfg",this).call(this);return f({},t,{startAngle:-Math.PI/2,endAngle:3*Math.PI/2,innerRadius:0,type:"polar",isPolar:!0})}}]),o(e,[{key:"_init",value:function(){for(var t=this.radius,e=this.innerRadius,n=this.center,i=this.startAngle,r=this.endAngle;r<i;)r+=2*Math.PI;this.endAngle=r;var a,o,s=this.getOneBox(),u=s.maxX-s.minX,l=s.maxY-s.minY,c=Math.abs(s.minX)/u,h=Math.abs(s.minY)/l,f=this.width,p=this.height;p/l>f/u?(a=f/u,o={x:n.x-(.5-c)*f,y:n.y-(.5-h)*a*l}):(a=p/l,o={x:n.x-(.5-c)*a*u,y:n.y-(.5-h)*p}),t?t>0&&t<=1?t*=a:(t<=0||t>a)&&(t=a):t=a;var g={start:i,end:r},d={start:e*t,end:t};this.x=g,this.y=d,this.radius=t,this.circleCentre=o,this.center=o}},{key:"getCenter",value:function(){return this.circleCentre}},{key:"getOneBox",value:function(){var t=this.startAngle,e=this.endAngle;if(Math.abs(e-t)>=2*Math.PI)return{minX:-1,maxX:1,minY:-1,maxY:1};for(var n=[0,Math.cos(t),Math.cos(e)],i=[0,Math.sin(t),Math.sin(e)],r=Math.min(t,e);r<Math.max(t,e);r+=Math.PI/18)n.push(Math.cos(r)),i.push(Math.sin(r));return{minX:Math.min.apply(Math,n),maxX:Math.max.apply(Math,n),minY:Math.min.apply(Math,i),maxY:Math.max.apply(Math,i)}}},{key:"getRadius",value:function(){return this.radius}},{key:"convertPoint",value:function(t){var e=this.getCenter(),n=this.isTransposed?t.y:t.x,i=this.isTransposed?t.x:t.y;return n=this.convertDim(n,"x"),i=this.convertDim(i,"y"),{x:e.x+Math.cos(n)*i,y:e.y+Math.sin(n)*i}}},{key:"invertPoint",value:function(t){var e=this.getCenter(),n=[t.x-e.x,t.y-e.y],i=this.x,r=[1,0,0,0,1,0,0,0,1];g.rotate(r,r,i.start);var a=[1,0,0];v.transformMat3(a,a,r),a=[a[0],a[1]];var o=d.angleTo(a,n,i.end<i.start);h(o,2*Math.PI)&&(o=0);var s=d.length(n),u=o/(i.end-i.start);u=i.end-i.start>0?u:-u;var l=this.invertDim(s,"y"),c={};return c.x=this.isTransposed?l:u,c.y=this.isTransposed?u:l,c}}]),e}();t.exports=y},function(t,e,n){var i=n(0),r=n(26),a=i.PathUtil;function o(t,e){var n,r,a=function(t){if(i.isEmpty(t))return null;var e=t[0].x,n=t[0].x,r=t[0].y,a=t[0].y;return i.each(t,function(t){e=e>t.x?t.x:e,n=n<t.x?t.x:n,r=r>t.y?t.y:r,a=a<t.y?t.y:a}),{minX:e,maxX:n,minY:r,maxY:a,centerX:(e+n)/2,centerY:(r+a)/2}}(t.points||t.get("origin").points),o=e.startAngle,s=e.endAngle-o;return e.isTransposed?(n=a.maxY*s,r=a.minY*s):(n=a.maxX*s,r=a.minX*s),{startAngle:r+=o,endAngle:n+=o}}function s(t,e,n){var r={};return t.delay&&(r.delay=i.isFunction(t.delay)?t.delay(e,n):t.delay),r.easing=i.isFunction(t.easing)?t.easing(e,n):t.easing,r.duration=i.isFunction(t.duration)?t.duration(e,n):t.duration,r.callback=t.callback,r}function u(t,e){var n,i=t._id,r=t.get("index"),a=t.getBBox(),o=t.get("origin").points,u=(a.minX+a.maxX)/2,l=[u,n=o[0].y-o[1].y<=0?a.maxY:a.minY,1];t.apply(l),t.attr("transform",[["t",-u,-n],["s",1,.01],["t",u,n]]);var c={transform:[["t",-u,-n],["s",1,100],["t",u,n]]},h=s(e,r,i);t.animate(c,h.duration,h.easing,h.callback,h.delay)}function l(t,e){var n,i=t._id,r=t.get("index"),a=t.getBBox(),o=t.get("origin").points,u=(a.minY+a.maxY)/2,l=[n=o[0].y-o[1].y>0?a.maxX:a.minX,u,1];t.apply(l),t.attr({transform:[["t",-n,-u],["s",.01,1],["t",n,u]]});var c={transform:[["t",-n,-u],["s",100,1],["t",n,u]]},h=s(e,r,i);t.animate(c,h.duration,h.easing,h.callback,h.delay)}function c(t,e,n){var i,r,a=t._id,o=t.get("index");if(n.isPolar&&"point"!==t.name)i=n.getCenter().x,r=n.getCenter().y;else{var u=t.getBBox();i=(u.minX+u.maxX)/2,r=(u.minY+u.maxY)/2}var l=[i,r,1];t.apply(l),t.attr({transform:[["t",-i,-r],["s",.01,.01],["t",i,r]]});var c={transform:[["t",-i,-r],["s",100,100],["t",i,r]]},h=s(e,o,a);t.animate(c,h.duration,h.easing,h.callback,h.delay)}function h(t,e){if("path"===t.get("type")){var n=t._id,i=t.get("index"),r=a.pathToAbsolute(t.attr("path"));t.attr("path",[r[0]]);var o={path:r},u=s(e,i,n);t.animate(o,u.duration,u.easing,u.callback,u.delay)}}function f(t,e,n,i,a){var o,u=function(t){var e,n,i,a,o,s=t.start,u=t.end,l=t.getWidth(),c=t.getHeight();return t.isPolar?(a=t.getRadius(),i=t.getCenter(),e=t.startAngle,n=t.endAngle,(o=new r.Fan({attrs:{x:i.x,y:i.y,rs:0,re:a+200,startAngle:e,endAngle:e}})).endState={endAngle:n}):(o=new r.Rect({attrs:{x:s.x-200,y:u.y-200,width:t.isTransposed?l+400:0,height:t.isTransposed?0:c+400}}),t.isTransposed?o.endState={height:c+400}:o.endState={width:l+400}),o.isClip=!0,o}(n),l=t.get("canvas"),c=t._id,h=t.get("index");i?(u.attr("startAngle",i),u.attr("endAngle",i),o={endAngle:a}):o=u.endState,u.set("canvas",l),t.attr("clip",u),t.setSilent("animating",!0);var f=s(e,h,c);u.animate(o,f.duration,f.easing,function(){t&&!t.get("destroyed")&&(t.attr("clip",null),t.setSilent("cacheShape",null),t.setSilent("animating",!1),u.remove())},f.delay)}function p(t,e){var n=t._id,r=t.get("index"),a=i.isNil(t.attr("fillOpacity"))?1:t.attr("fillOpacity"),o=i.isNil(t.attr("strokeOpacity"))?1:t.attr("strokeOpacity");t.attr("fillOpacity",0),t.attr("strokeOpacity",0);var u={fillOpacity:a,strokeOpacity:o},l=s(e,r,n);t.animate(u,l.duration,l.easing,l.callback,l.delay)}function g(t,e,n){var i=o(t,n),r=i.endAngle;f(t,e,n,i.startAngle,r)}t.exports={enter:{clipIn:f,zoomIn:c,pathIn:h,scaleInY:u,scaleInX:l,fanIn:g,fadeIn:p},leave:{lineWidthOut:function(t,e){var n={lineWidth:0,opacity:0},i=t._id,r=s(e,t.get("index"),i);t.animate(n,r.duration,r.easing,function(){t.remove()},r.delay)},zoomOut:function(t,e,n){var i,r,a=t._id,o=t.get("index");if(n.isPolar&&"point"!==t.name)i=n.getCenter().x,r=n.getCenter().y;else{var u=t.getBBox();i=(u.minX+u.maxX)/2,r=(u.minY+u.maxY)/2}var l=[i,r,1];t.apply(l);var c={transform:[["t",-i,-r],["s",.01,.01],["t",i,r]]},h=s(e,o,a);t.animate(c,h.duration,h.easing,function(){t.remove()},h.delay)},pathOut:function(t,e){if("path"===t.get("type")){var n=t._id,i=t.get("index"),r={path:[a.pathToAbsolute(t.attr("path"))[0]]},o=s(e,i,n);t.animate(r,o.duration,o.easing,function(){t.remove()},o.delay)}},fadeOut:function(t,e){var n=t._id,i={fillOpacity:0,strokeOpacity:0},r=s(e,t.get("index"),n);t.animate(i,r.duration,r.easing,function(){t.remove()},r.delay)}},appear:{clipIn:f,zoomIn:c,pathIn:h,scaleInY:u,scaleInX:l,fanIn:g,fadeIn:p},update:{fadeIn:p,fanIn:g}}},function(t,e,n){var i=n(0),r=n(111),a=i.MatrixUtil.mat3;function o(t,e){var n=[];if(!1===t.get("animate"))return[];var r=t.get("children");return i.each(r,function(t){if(t.isGroup)n=n.concat(o(t,e));else if(t.isShape&&t._id){var i=t._id;(i=i.split("-")[0])===e&&n.push(t)}}),n}function s(t,e,n,i){return i?r.Action[n][i]:r.getAnimation(t,e,n)}function u(t,e,n){var a=r.getAnimateCfg(t,e);return n&&n[e]?i.deepMix({},a,n[e]):a}function l(t,e,n,r){var o,l,c=!1;if(r){var h=[],f=[];i.each(e,function(e){var n=t[e._id];n?(e.setSilent("cacheShape",n),h.push(e),delete t[e._id]):f.push(e)}),i.each(t,function(t){var e=t.name,r=t.coord,h=t._id,f=t.attrs,p=t.index,g=t.type;if(l=u(e,"leave",t.animateCfg),o=s(e,r,"leave",l.animation),i.isFunction(o)){var d=n.addShape(g,{attrs:f,index:p});if(d._id=h,d.name=e,r&&"label"!==e){var v=d.getMatrix(),y=a.multiply([],v,r.matrix);d.setMatrix(y)}c=!0,o(d,l,r)}}),i.each(h,function(t){var e=t.name,n=t.get("coord"),r=t.get("cacheShape").attrs;if(!i.isEqual(r,t.attr())){if(l=u(e,"update",t.get("animateCfg")),o=s(e,n,"update",l.animation),i.isFunction(o))o(t,l,n);else{var a=i.cloneDeep(t.attr());t.attr(r),t.animate(a,l.duration,l.easing,function(){t.setSilent("cacheShape",null)})}c=!0}}),i.each(f,function(t){var e=t.name,n=t.get("coord");l=u(e,"enter",t.get("animateCfg")),o=s(e,n,"enter",l.animation),i.isFunction(o)&&(o(t,l,n),c=!0)})}else i.each(e,function(t){var e=t.name,n=t.get("coord");l=u(e,"appear",t.get("animateCfg")),o=s(e,n,"appear",l.animation),i.isFunction(o)&&(o(t,l,n),c=!0)});return c}t.exports={execAnimation:function(t,e){var n=t.get("middlePlot"),r=t.get("backPlot"),a=t.get("_id"),s=t.get("canvas"),u=s.get(a+"caches")||[];0===u.length&&(e=!1);var c=o(n,a),h=o(r,a),f=c.concat(h);s.setSilent(a+"caches",function(t){var e={};return i.each(t,function(t){if(t._id&&!t.isClip){var n=t._id;e[n]={_id:n,type:t.get("type"),attrs:i.cloneDeep(t.attr()),name:t.name,index:t.get("index"),animateCfg:t.get("animateCfg"),coord:t.get("coord")}}}),e}(f)),l(u,e?f:c,s,e)||s.draw()}}},function(t,e,n){var i=n(0),r=n(27).Axis,a=i.MatrixUtil.vec2;var o=function(){function t(t){this.visible=!0,this.canvas=null,this.container=null,this.coord=null,this.options=null,this.axes=[],i.mix(this,t)}var e=t.prototype;return e._isHide=function(t){var e=this.options;return!(!e||!1!==e[t])},e._getMiddleValue=function(t,e,n,i){if(0===t&&!i)return 0;if(1===t)return 1;var r=e[n+1].value;return i||1!==r?(t+r)/2:1},e._getLineRange=function(t,e,n,i){var r,a,o,s=e.field,u=this.options,l="";return u[s]&&u[s].position&&(l=u[s].position),"x"===n?(r={x:0,y:"top"===l?1:0},a={x:1,y:"top"===l?1:0},o=!1):(i?(r={x:"left"===l?0:1,y:0},a={x:"left"===l?0:1,y:1}):(r={x:"right"===l?1:0,y:0},a={x:"right"===l?1:0,y:1}),o=!0),{start:r=t.convert(r),end:a=t.convert(a),isVertical:o}},e._getLineCfg=function(t,e,n,i){var r=this._getLineRange(t,e,n,i),a=r.isVertical,o=r.start,s=r.end,u=t.center;return t.isTransposed&&(a=!a),{isVertical:a,factor:a&&o.x>u.x||!a&&o.y>u.y?1:-1,start:o,end:s}},e._getCircleCfg=function(t){var e,n={},i=t.x,r=t.y,o=r.start>r.end;e=t.isTransposed?{x:o?0:1,y:0}:{x:0,y:o?0:1},e=t.convert(e);var s,u=t.circleCentre,l=[e.x-u.x,e.y-u.y],c=[1,0],h=(s=e.y>u.y?a.angle(l,c):-1*a.angle(l,c))+(i.end-i.start);return n.startAngle=s,n.endAngle=h,n.center=u,n.radius=Math.sqrt(Math.pow(e.x-u.x,2)+Math.pow(e.y-u.y,2)),n.inner=t.innerRadius||0,n},e._getRadiusCfg=function(t){var e,n,i=t.x.start<0?-1:1;return t.isTransposed?(e={x:0,y:0},n={x:1,y:0}):(e={x:0,y:0},n={x:0,y:1}),{factor:i,start:t.convert(e),end:t.convert(n)}},e._getAxisPosition=function(t,e,n,i){var r="",a=this.options;if(a[i]&&a[i].position)r=a[i].position;else{var o=t.type;t.isRect?"x"===e?r="bottom":"y"===e&&(r=n?"right":"left"):r="helix"===o?"helix":"x"===e?t.isTransposed?"radius":"circle":t.isTransposed?"circle":"radius"}return r},e._getAxisDefaultCfg=function(t,e,n,r){var a=this.viewTheme,o={},s=this.options,u=e.field;if((o=i.deepMix({},a.axis[r],o,s[u])).viewTheme=a,o.title){var l=i.isPlainObject(o.title)?o.title:{};l.text=l.text||e.alias||u,i.deepMix(o,{title:l})}return o.ticks=e.getTicks(),t.isPolar&&!e.isCategory&&"x"===n&&Math.abs(t.endAngle-t.startAngle)===2*Math.PI&&o.ticks.pop(),o.coord=t,o.label&&i.isNil(o.label.autoRotate)&&(o.label.autoRotate=!0),s.hasOwnProperty("xField")&&s.xField.hasOwnProperty("grid")&&"left"===o.position&&i.deepMix(o,s.xField),o},e._getAxisCfg=function(t,e,n,r,a,o){void 0===a&&(a="");var s=this,u=s._getAxisPosition(t,r,a,e.field),l=s._getAxisDefaultCfg(t,e,r,u);if(!i.isEmpty(l.grid)&&n){var c=[],h=[],f=function(t){var e=[];if(t.length>0){var n=(e=t.slice(0))[0],i=e[e.length-1];0!==n.value&&e.unshift({value:0}),1!==i.value&&e.push({value:1})}return e}(n.getTicks());if(f.length){var p=function(t,e,n){var i=[];return t.length<1?i:(t.length>=2&&e&&n&&i.push({text:"",tickValue:"",value:0}),0!==t[0].value&&i.push({text:"",tickValue:"",value:0}),1!==(i=i.concat(t))[i.length-1].value&&i.push({text:"",tickValue:"",value:1}),i)}(l.ticks,e.isLinear,"center"===l.grid.align);i.each(p,function(n,u){h.push(n.tickValue);var g=[],d=n.value;if("center"===l.grid.align&&(d=s._getMiddleValue(d,p,u,e.isLinear)),!i.isNil(d)){var v=t.x,y=t.y;i.each(f,function(e){var n="x"===r?d:e.value,i="x"===r?e.value:d,a=t.convert({x:n,y:i});if(t.isPolar){var o=t.circleCentre;y.start>y.end&&(i=1-i),a.flag=v.start>v.end?0:1,a.radius=Math.sqrt(Math.pow(a.x-o.x,2)+Math.pow(a.y-o.y,2))}g.push(a)}),c.push({_id:o+"-"+r+a+"-grid-"+n.tickValue,points:g})}})}l.grid.items=c,l.grid.tickValues=h}return l.type=e.type,l},e._getHelixCfg=function(t){for(var e={},n=t.a,i=t.startAngle,r=t.endAngle,a=[],o=0;o<=100;o++){var s=t.convert({x:o/100,y:0});a.push(s.x),a.push(s.y)}var u=t.convert({x:0,y:0});return e.a=n,e.startAngle=i,e.endAngle=r,e.crp=a,e.axisStart=u,e.center=t.center,e.inner=t.y.start,e},e._drawAxis=function(t,e,n,a,o,s,u){var l,c,h=this.container,f=this.canvas;"cartesian"===t.type?(l=r.Line,c=this._getLineCfg(t,e,a,u)):"helix"===t.type&&"x"===a?(l=r.Helix,c=this._getHelixCfg(t)):"x"===a?(l=r.Circle,c=this._getCircleCfg(t)):(l=r.Line,c=this._getRadiusCfg(t));var p=this._getAxisCfg(t,e,n,a,u,o);p=i.mix({},p,c),"y"===a&&s&&"circle"===s.get("type")&&(p.circle=s),p._id=o+"-"+a,i.isNil(u)||(p._id=o+"-"+a+u),i.mix(p,{canvas:f,group:h});var g=new l(p);return g.render(),this.axes.push(g),g},e.createAxis=function(t,e,n){var r,a=this,o=this.coord,s=o.type;"theta"===s||"polar"===s&&o.isTransposed||(t&&!a._isHide(t.field)&&(r=a._drawAxis(o,t,e[0],"x",n)),i.isEmpty(e)||"helix"===s||i.each(e,function(e,i){a._isHide(e.field)||a._drawAxis(o,e,t,"y",n,r,i)}))},e.changeVisible=function(t){var e=this.axes;i.each(e,function(e){e.set("visible",t)})},e.clear=function(){var t=this.axes;i.each(t,function(t){t.clear()}),this.axes=[]},t}();t.exports=o},function(t,e,n){var i=n(0),r=n(257),a=function(){function t(t){this.type="rect",this.actions=[],this.cfg={},i.mix(this,t),this.option=t||{}}var e=t.prototype;return e.reset=function(t){return this.actions=t.actions||[],this.type=t.type,this.cfg=t.cfg,this.option.actions=this.actions,this.option.type=this.type,this.option.cfg=this.cfg,this},e._execActions=function(t){var e=this.actions;i.each(e,function(e){var n=e[0];t[n](e[1],e[2])})},e.hasAction=function(t){var e=this.actions,n=!1;return i.each(e,function(e){if(t===e[0])return n=!0,!1}),n},e.createCoord=function(t,e){var n,a,o=this.type,s=this.cfg,u=i.mix({start:t,end:e},s);return"theta"===o?(n=r.Polar,this.hasAction("transpose")||this.transpose(),(a=new n(u)).type=o):a=new(n=r[i.upperFirst(o||"")]||r.Rect)(u),this._execActions(a),a},e.rotate=function(t){return t=t*Math.PI/180,this.actions.push(["rotate",t]),this},e.reflect=function(t){return this.actions.push(["reflect",t]),this},e.scale=function(t,e){return this.actions.push(["scale",t,e]),this},e.transpose=function(){return this.actions.push(["transpose"]),this},t}();t.exports=a},function(t,e,n){var i=n(0);function r(t,e){if(i.isNil(t)||i.isNil(e))return!1;var n=t.get("origin"),r=e.get("origin");return i.isNil(n)&&i.isNil(r)?i.isEqual(t,e):i.isEqual(n,r)}function a(t){t.shape&&t.shape.get("origin")&&(t.data=t.shape.get("origin"))}var o=function(){function t(t){this.view=null,this.canvas=null,i.assign(this,t),this._init()}var e=t.prototype;return e._init=function(){this.pixelRatio=this.canvas.get("pixelRatio")},e._getShapeEventObj=function(t){return{x:t.x/this.pixelRatio,y:t.y/this.pixelRatio,target:t.target,toElement:t.event.toElement||t.event.relatedTarget}},e._getShape=function(t,e){return this.view.get("canvas").getShape(t,e)},e._getPointInfo=function(t){var e=this.view,n={x:t.x/this.pixelRatio,y:t.y/this.pixelRatio},i=e.getViewsByPoint(n);return n.views=i,n},e._getEventObj=function(t,e,n){return{x:e.x,y:e.y,target:t.target,toElement:t.event.toElement||t.event.relatedTarget,views:n}},e.bindEvents=function(){var t=this.canvas;t.on("mousedown",i.wrapBehavior(this,"onDown")),t.on("mousemove",i.wrapBehavior(this,"onMove")),t.on("mouseleave",i.wrapBehavior(this,"onOut")),t.on("mouseup",i.wrapBehavior(this,"onUp")),t.on("click",i.wrapBehavior(this,"onClick")),t.on("dblclick",i.wrapBehavior(this,"onClick")),t.on("touchstart",i.wrapBehavior(this,"onTouchstart")),t.on("touchmove",i.wrapBehavior(this,"onTouchmove")),t.on("touchend",i.wrapBehavior(this,"onTouchend"))},e._triggerShapeEvent=function(t,e,n){if(t&&t.name&&!t.get("destroyed")){var i=this.view;if(i.isShapeInView(t)){var r=t.name+":"+e;n.view=i,n.appendInfo=t.get("appendInfo"),i.emit(r,n);var a=i.get("parent");a&&a.emit(r,n)}}},e.onDown=function(t){var e=this.view,n=this._getShapeEventObj(t);n.shape=this.currentShape,a(n),e.emit("mousedown",n),this._triggerShapeEvent(this.currentShape,"mousedown",n)},e.onMove=function(t){var e=this.view,n=this.currentShape;n&&n.get("destroyed")&&(n=null,this.currentShape=null);var i=this._getShape(t.x,t.y)||t.currentTarget,o=this._getShapeEventObj(t);if(o.shape=i,a(o),e.emit("mousemove",o),this._triggerShapeEvent(i,"mousemove",o),n&&!r(n,i)){var s=this._getShapeEventObj(t);s.shape=n,s.toShape=i,a(s),this._triggerShapeEvent(n,"mouseleave",s)}if(i&&!r(n,i)){var u=this._getShapeEventObj(t);u.shape=i,u.fromShape=n,a(u),this._triggerShapeEvent(i,"mouseenter",u)}this.currentShape=i;var l=this._getPointInfo(t),c=this.curViews||[];0===c.length&&l.views.length&&e.emit("plotenter",this._getEventObj(t,l,l.views)),c.length&&0===l.views.length&&e.emit("plotleave",this._getEventObj(t,l,c)),l.views.length&&((o=this._getEventObj(t,l,l.views)).shape=i,a(o),e.emit("plotmove",o)),this.curViews=l.views},e.onOut=function(t){var e=this.view,n=this._getPointInfo(t),i=this.curViews||[],r=this._getEventObj(t,n,i);!this.curViews||0===this.curViews.length||r.toElement&&"CANVAS"===r.toElement.tagName||(e.emit("plotleave",r),this.curViews=[])},e.onUp=function(t){var e=this.view,n=this._getShapeEventObj(t);n.shape=this.currentShape,e.emit("mouseup",n),this._triggerShapeEvent(this.currentShape,"mouseup",n)},e.onClick=function(t){var e=this.view,n=this._getShape(t.x,t.y)||t.currentTarget,r=this._getShapeEventObj(t);r.shape=n,a(r),e.emit("click",r),this._triggerShapeEvent(n,t.type,r),this.currentShape=n;var o=this._getPointInfo(t),s=o.views;if(!i.isEmpty(s)){var u=this._getEventObj(t,o,s);if(this.currentShape){var l=this.currentShape;u.shape=l,a(u)}e.emit("plotclick",u),"dblclick"===t.type&&(e.emit("plotdblclick",u),e.emit("dblclick",r))}},e.onTouchstart=function(t){var e=this.view,n=this._getShape(t.x,t.y)||t.currentTarget,i=this._getShapeEventObj(t);i.shape=n,a(i),e.emit("touchstart",i),this._triggerShapeEvent(n,"touchstart",i),this.currentShape=n},e.onTouchmove=function(t){var e=this.view,n=this._getShape(t.x,t.y)||t.currentTarget,i=this._getShapeEventObj(t);i.shape=n,a(i),e.emit("touchmove",i),this._triggerShapeEvent(n,"touchmove",i),this.currentShape=n},e.onTouchend=function(t){var e=this.view,n=this._getShapeEventObj(t);n.shape=this.currentShape,a(n),e.emit("touchend",n),this._triggerShapeEvent(this.currentShape,"touchend",n)},e.clearEvents=function(){var t=this.canvas;t.off("mousemove",i.getWrapBehavior(this,"onMove")),t.off("mouseleave",i.getWrapBehavior(this,"onOut")),t.off("mousedown",i.getWrapBehavior(this,"onDown")),t.off("mouseup",i.getWrapBehavior(this,"onUp")),t.off("click",i.getWrapBehavior(this,"onClick")),t.off("dblclick",i.getWrapBehavior(this,"onClick")),t.off("touchstart",i.getWrapBehavior(this,"onTouchstart")),t.off("touchmove",i.getWrapBehavior(this,"onTouchmove")),t.off("touchend",i.getWrapBehavior(this,"onTouchend"))},t}();t.exports=o},function(t,e,n){var i=n(0),r=n(269),a=function(){function t(t){this.guides=[],this.options=[],this.xScales=null,this.yScales=null,this.view=null,this.viewTheme=null,this.frontGroup=null,this.backGroup=null,i.mix(this,t)}var e=t.prototype;return e._creatGuides=function(){var t=this,e=this.options,n=this.xScales,a=this.yScales,o=this.view,s=this.viewTheme;return this.backContainer&&o&&(this.backGroup=this.backContainer.addGroup({viewId:o.get("_id")})),this.frontContainer&&o&&(this.frontGroup=this.frontContainer.addGroup({viewId:o.get("_id")})),e.forEach(function(e){var o=e.type,u=i.deepMix({xScales:n,yScales:a,viewTheme:s},s?s.guide[o]:{},e);o=i.upperFirst(o);var l=new r[o](u);t.guides.push(l)}),t.guides},e.line=function(t){return void 0===t&&(t={}),this.options.push(i.mix({type:"line"},t)),this},e.arc=function(t){return void 0===t&&(t={}),this.options.push(i.mix({type:"arc"},t)),this},e.text=function(t){return void 0===t&&(t={}),this.options.push(i.mix({type:"text"},t)),this},e.image=function(t){return void 0===t&&(t={}),this.options.push(i.mix({type:"image"},t)),this},e.region=function(t){return void 0===t&&(t={}),this.options.push(i.mix({type:"region"},t)),this},e.regionFilter=function(t){return void 0===t&&(t={}),this.options.push(i.mix({type:"regionFilter"},t)),this},e.dataMarker=function(t){return void 0===t&&(t={}),this.options.push(i.mix({type:"dataMarker"},t)),this},e.dataRegion=function(t){return void 0===t&&(t={}),this.options.push(i.mix({type:"dataRegion"},t)),this},e.html=function(t){return void 0===t&&(t={}),this.options.push(i.mix({type:"html"},t)),this},e.render=function(t){var e=this,n=e.view,r=n&&n.get("data"),a=e._creatGuides();i.each(a,function(i){var a;a=i.get("top")?e.frontGroup||e.frontContainer:e.backGroup||e.backContainer,i.render(t,a,r,n)})},e.clear=function(){this.options=[],this.reset()},e.changeVisible=function(t){var e=this.guides;i.each(e,function(e){e.changeVisible(t)})},e.reset=function(){var t=this.guides;i.each(t,function(t){t.clear()}),this.guides=[],this.backGroup&&this.backGroup.remove(),this.frontGroup&&this.frontGroup.remove()},t}();t.exports=a},function(t,e,n){var i=n(0),r=n(27).Legend,a=n(271),o=n(9),s=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var u=function(){function t(t){this.options={},i.mix(this,t),this.clear();var e=this.chart;this.container=e.get("frontPlot"),this.plotRange=e.get("plotRange")}var e=t.prototype;return e.clear=function(){var t=this.legends;this.backRange=null,i.each(t,function(t){i.each(t,function(t){t.destroy()})}),this.legends={}},e.getBackRange=function(){var t=this.backRange;if(!t){t=this.chart.get("backPlot").getBBox();var e=this.plotRange;t.maxX-t.minX<e.br.x-e.tl.x&&t.maxY-t.minY<e.br.y-e.tl.y&&(t={minX:e.tl.x,minY:e.tl.y,maxX:e.br.x,maxY:e.br.y}),this.backRange=t}return t},e._isFieldInView=function(t,e,n){var r=!1,a=n.get("scales")[t];return a&&a.values&&(r=i.inArray(a.values,e)),r},e._bindClickEvent=function(t,e,n){var r=this,a=r.chart,o=a.get("views"),s=e.field,u=r.options;t.on("itemclick",function(e){if(u.onClick)u.onClick(e);else{var l=e.item,c=e.checked,h="single"===t.get("selectedMode"),f=l.dataValue;c?(i.Array.remove(n,f),r._isFieldInView(s,f,a)&&a.filter(s,function(t){return h?t===f:!i.inArray(n,t)}),i.each(o,function(t){r._isFieldInView(s,f,t)&&t.filter(s,function(t){return h?t===f:!i.inArray(n,t)})})):h||(n.push(f),r._isFieldInView(s,f,a)&&a.filter(s,function(t){return!i.inArray(n,t)}),i.each(o,function(t){r._isFieldInView(s,f,t)&&t.filter(s,function(t){return!i.inArray(n,t)})})),a.set("keepLegend",!0),a.set("keepPadding",!0),a.repaint(),a.set("keepPadding",!1),a.set("keepLegend",!1)}})},e._bindClickEventForMix=function(t){var e=this.chart.getAllGeoms();t.on("itemclick",function(t){var n=t.item.value;t.checked?i.each(e,function(t){t.getYScale().field===n&&t.show()}):i.each(e,function(t){t.getYScale().field===n&&t.hide()})})},e._filterLabels=function(t,e,n){if(t.get("gLabel"))t.get("gLabel").set("visible",n);else{var r=e.get("labelCfg");if(r&&r.fields&&r.fields.length>0){var a=e.getXScale(),o=e.getYScale(),s=a.field,u=o.field,l=t.get("origin")._origin,c=e.get("labelContainer").get("labelsGroup").get("children");i.each(c,function(e){var i=e.get("origin")||[];i[s]===l[s]&&i[u]===l[u]&&(e.set("visible",n),t.set("gLabel",e))})}}},e._bindFilterEvent=function(t,e){var n=this,i=this.chart,r=e.field;t.on("itemfilter",function(t){var e=t.range;i.filterShape(function(t,i,a){if(t[r]){var o=t[r]>=e[0]&&t[r]<=e[1];return n._filterLabels(i,a,o),o}return!0});for(var a=i.getAllGeoms()||[],o=function(t){var n=a[t];"heatmap"===n.get("type")&&s(function(){n.drawWithRange(e)})},u=0;u<a.length;u++)o(u)})},e._getShapeData=function(t){var e=t.get("origin");return i.isArray(e)&&(e=e[0]),e._origin},e._bindHoverEvent=function(t,e){var n=this,r=n.chart,a=r.getAllGeoms(),o=n.options,s=r.get("canvas");t.on("itemhover",function(t){var r=t.item.value,u=n.pre;if(u){if(u===r)return}else i.each(a,function(a){var u=a.get("shapeContainer"),l=a.getShapes(),c=[];if(e){var h=a.get("scales")[e];i.each(l,function(t){var a=n._getShapeData(t);a&&function(t,e,n){return!i.isNil(n)&&(t=n.translate(t),e=n.translate(e),n.isCategory?t===e:Math.abs(t-e)<=1)}(a[e],r,h)&&c.push(t)})}else a.getYScale().field===r&&(c=l);i.isEmpty(c)||(t.shapes=c,t.geom=a,o.onHover?(o.onHover(t),u.sort(),s.draw()):a.setShapesActived(c))}),n.pre=r}),t.on("itemunhover",function(){n.pre=null,i.each(a,function(t){t.get("activeShapes")&&(t.clearActivedShapes(),s.draw())})})},e._isFiltered=function(t,e,n){if(!t.isCategory)return!0;var r=!0;return n=t.invert(n),i.each(e,function(e){if(t.getText(e)===t.getText(n))return r=!1,!1}),r},e._alignLegend=function(t,e,n,i){var r=this.viewTheme,a=this.container.get("canvas"),o=a.get("width"),s=a.get("height"),u=this.totalRegion,l=this.plotRange,c=this.getBackRange(),h=t.get("offset")[0]||0,f=t.get("offset")[1]||0,p=t.getHeight(),g=t.getWidth(),d=r.legend.margin,v=r.legend.legendMargin,y=this.legends[i].length,m=i.split("-"),x=0,b=0,_=y>1?u:n;if("left"===m[0]||"right"===m[0])s=l.br.y,x=this._getXAlign(m[0],o,n,c,g,d),b=e?e.get("group").get("y")+e.getHeight()+v:this._getYAlignVertical(m[1],s,_,c,0,d,a.get("height"));else if("top"===m[0]||"bottom"===m[0])if(b=this._getYAlignHorizontal(m[0],s,n,c,p,d),e){var w=e.getWidth();x=e.get("group").get("x")+w+v}else x=this._getXAlign(m[1],o,_,c,0,d),"right"===m[1]&&(x=l.br.x-_.totalWidth);t.move(x+h,b+f)},e._getXAlign=function(t,e,n,i,r,a){var o="left"===t?i.minX-r-a[3]:i.maxX+a[1];return"center"===t&&(o=(e-n.totalWidth)/2),o},e._getYAlignHorizontal=function(t,e,n,i,r,a){return"top"===t?i.minY-r-a[0]:i.maxY+a[2]},e._getYAlignVertical=function(t,e,n,i,r,a,o){var s="top"===t?i.minY-r-a[0]:e-n.totalHeight;return"center"===t&&(s=(o-n.totalHeight)/2),s},e._getSubRegion=function(t){var e=0,n=0,r=0,a=0;return i.each(t,function(t){var i=t.getWidth(),o=t.getHeight();e<i&&(e=i),r+=i,n<o&&(n=o),a+=o}),{maxWidth:e,totalWidth:r,maxHeight:n,totalHeight:a}},e._getRegion=function(){var t=this,e=t.viewTheme,n=t.legends,r=e.legend.legendMargin,a=[],o=0,s=0;return i.each(n,function(e){var n=t._getSubRegion(e);a.push(n),o+=n.totalWidth+r,s+=n.totalHeight+r}),{totalWidth:o,totalHeight:s,subs:a}},e._addCategoryLegend=function(t,e,n,s,u){var l=this,c=t.field,h=l.options,f=h[c];f&&(h=f);var p=l.legends;p[u]=p[u]||[];var g=l.container,d=[],v=t.getTicks(),y=!0,m=n.get("shapeType")||"point",x=n.getDefaultValue("shape")||"circle";h[c]&&h[c].marker?(x=h[c].marker,m="point",y=!1):h.marker&&(x=h.marker,m="point",y=!1);var b=l.chart,_=l.viewTheme,w=b.get("canvas"),M=l.plotRange,S=u.split("-"),C="right"===S[0]||"left"===S[0]?M.bl.y-M.tr.y:w.get("width");i.each(v,function(e){var r=e.text,a=e.value,u=t.invert(a),c={isInCircle:n.isInCircle()},h=!s||l._isFiltered(t,s,a),f=n.getAttr("color"),p=n.getAttr("shape");if(f)if(f.callback&&f.callback.length>1){var g=Array(f.callback.length-1).fill("");c.color=f.mapping.apply(f,[u].concat(g)).join("")||_.defaultColor}else c.color=f.mapping(u).join("")||_.defaultColor;if(y&&p)if(p.callback&&p.callback.length>1){var v=Array(p.callback.length-1).fill("");x=p.mapping.apply(p,[u].concat(v)).join("")}else x=p.mapping(u).join("");var b=o.getShapeFactory(m).getMarkerCfg(x,c);i.isFunction(x)&&(b.symbol=x),d.push({value:r,dataValue:u,checked:h,marker:b})});var k,A=i.deepMix({},_.legend[S[0]],h[c]||h,{viewId:b.get("_id"),maxLength:C,items:d,container:g,position:[0,0]});if(A.title&&i.deepMix(A,{title:{text:t.alias||t.field}}),l._isTailLegend(h,n))A.chart=l.chart,A.geom=n,k=new a(A);else if(h.useHtml){var P=g.get("canvas").get("el");if(g=h.container,i.isString(g)&&/^\#/.test(g)){var I=g.replace("#","");g=document.getElementById(I)}g||(g=P.parentNode),A.container=g,void 0===A.legendStyle&&(A.legendStyle={}),A.legendStyle.CONTAINER_CLASS={height:"right"===S[0]||"left"===S[0]?C+"px":"auto",width:"right"!==S[0]&&"left"!==S[0]?C+"px":"auto",position:"absolute",overflow:"auto","z-index":""===P.style.zIndex?1:parseInt(P.style.zIndex,10)+1},k=h.flipPage?new r.CatPageHtml(A):new r.CatHtml(A)}else k=new r.Category(A);return l._bindClickEvent(k,t,s),p[u].push(k),k},e._bindChartMove=function(t){var e=this.chart,n=this.legends;e.on("plotmove",function(e){var r=!1;if(e.target){var a=e.target.get("origin");if(a){var o=a._origin||a[0]._origin,s=t.field;if(o){var u=o[s];i.each(n,function(t){i.each(t,function(t){r=!0,!t.destroyed&&t.activate(u)})})}}}r||i.each(n,function(t){i.each(t,function(t){!t.destroyed&&t.unactivate()})})})},e._addContinuousLegend=function(t,e,n){var a=this.legends;a[n]=a[n]||[];var o,s,u,l=this.container,c=t.field,h=t.getTicks(),f=[],p=this.viewTheme;i.each(h,function(n){var i=n.value,r=t.invert(i),a=e.mapping(r).join("");f.push({value:n.tickValue,attrValue:a,color:a,scaleValue:i}),0===i&&(s=!0),1===i&&(u=!0)}),s||f.push({value:t.min,attrValue:e.mapping(0).join(""),color:e.mapping(0).join(""),scaleValue:0}),u||f.push({value:t.max,attrValue:e.mapping(1).join(""),color:e.mapping(1).join(""),scaleValue:1});var g=this.options,d=n.split("-"),v=p.legend[d[0]];(g&&!1===g.slidable||g[c]&&!1===g[c].slidable)&&(v=i.mix({},v,p.legend.gradient));var y=i.deepMix({},v,g[c]||g,{items:f,attr:e,formatter:t.formatter,container:l,position:[0,0]});return y.title&&i.deepMix(y,{title:{text:t.alias||t.field}}),"color"===e.type?o=new r.Color(y):"size"===e.type&&(o=g&&"circle"===g.sizeType?new r.CircleSize(y):new r.Size(y)),this._bindFilterEvent(o,t),a[n].push(o),o},e._isTailLegend=function(t,e){if(t.hasOwnProperty("attachLast")&&t.attachLast){var n=e.get("type");if("line"===n||"lineStack"===n||"area"===n||"areaStack"===n)return!0}return!1},e._adjustPosition=function(t,e){var n;if(e)n="right-top";else if(i.isArray(t))n=String(t[0])+"-"+String(t[1]);else{var r=t.split("-");1===r.length?("left"===r[0]&&(n="left-bottom"),"right"===r[0]&&(n="right-bottom"),"top"===r[0]&&(n="top-center"),"bottom"===r[0]&&(n="bottom-center")):n=t}return n},e.addLegend=function(t,e,n,i){var r=this.options,a=t.field,o=r[a],s=this.viewTheme;if(!1===o)return null;if(o&&o.custom)this.addCustomLegend(a);else{var u,l=r.position||s.defaultLegendPosition;l=this._adjustPosition(l,this._isTailLegend(r,n)),o&&o.position&&(l=this._adjustPosition(o.position,this._isTailLegend(o,n))),u=t.isLinear?this._addContinuousLegend(t,e,l):this._addCategoryLegend(t,e,n,i,l),this._bindHoverEvent(u,a),r.reactive&&this._bindChartMove(t)}},e.addCustomLegend=function(t){var e=this.chart,n=this.viewTheme,a=this.container,o=this.options;t&&(o=o[t]);var s=o.position||n.defaultLegendPosition;s=this._adjustPosition(s);var u=this.legends;u[s]=u[s]||[];var l=o.items;if(l){var c=e.getAllGeoms();i.each(l,function(t){var e=function(t,e){var n;return i.each(t,function(t){t.get("visible")&&t.getYScale().field===e&&(n=t)}),n}(c,t.value);i.isObject(t.marker)?t.marker.radius=t.marker.radius||4.5:t.marker={symbol:t.marker?t.marker:"circle",fill:t.fill,radius:4.5},t.checked=!!i.isNil(t.checked)||t.checked,t.geom=e});var h,f=e.get("canvas"),p=this.plotRange,g=s.split("-"),d="right"===g[0]||"left"===g[0]?p.bl.y-p.tr.y:f.get("width"),v=i.deepMix({},n.legend[g[0]],o,{maxLength:d,items:l,container:a,position:[0,0]});if(o.useHtml){var y=o.container;if(/^\#/.test(a)){var m=y.replace("#","");y=document.getElementById(m)}else y||(y=a.get("canvas").get("el").parentNode);v.container=y,void 0===v.legendStyle&&(v.legendStyle={}),v.legendStyle.CONTAINER_CLASS||(v.legendStyle.CONTAINER_CLASS={height:"right"===g[0]||"left"===g[0]?d+"px":"auto",width:"right"!==g[0]&&"left"!==g[0]?d+"px":"auto",position:"absolute",overflow:"auto"}),h=o.flipPage?new r.CatPageHtml(v):new r.CatHtml(v)}else h=new r.Category(v);return u[s].push(h),h.on("itemclick",function(t){o.onClick&&o.onClick(t)}),this._bindHoverEvent(h),h}},e.addMixedLegend=function(t,e){var n=[];i.each(t,function(t){var r=t.field;i.each(e,function(e){if(e.getYScale()===t&&t.values&&t.values.length>0){var i=e.get("shapeType")||"point",a=e.getDefaultValue("shape")||"circle",s=o.getShapeFactory(i),u={color:e.getDefaultValue("color")},l=s.getMarkerCfg(a,u),c={value:r,marker:l};n.push(c)}})});var r={custom:!0,items:n};this.options=i.deepMix({},r,this.options);var a=this.addCustomLegend();this._bindClickEventForMix(a)},e.alignLegends=function(){var t=this,e=t.legends,n=t._getRegion(e);t.totalRegion=n;var r=0;return i.each(e,function(e,a){var o=n.subs[r];i.each(e,function(n,i){var r=e[i-1];n.get("useHtml")&&!n.get("autoPosition")||t._alignLegend(n,r,o,a)}),r++}),this},t}();t.exports=u},function(t,e,n){var i=n(143),r=n(0),a=/^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/,o="linear",s="cat",u="time",l=function(){function t(t){this.defs={},this.viewTheme={scales:{}},r.assign(this,t)}var e=t.prototype;return e._getDef=function(t){var e=this.defs,n=this.viewTheme,i=null;return(n.scales[t]||e[t])&&(i=r.mix({},n.scales[t]),r.each(e[t],function(t,e){r.isNil(t)?delete i[e]:i[e]=t})),i},e._getDefaultType=function(t,e){var n=o,i=r.Array.firstValue(e,t);return r.isArray(i)&&(i=i[0]),a.test(i)?n=u:r.isString(i)&&(n=s),n},e._getScaleCfg=function(t,e,n){var a={field:e},o=r.Array.values(n,e);if(a.values=o,!i.isCategory(t)&&"time"!==t){var s=r.Array.getRange(o);a.min=s.min,a.max=s.max,a.nice=!0}return"time"===t&&(a.nice=!1),a},e.createScale=function(t,e){var n,a=this._getDef(t);if(!e||!e.length)return n=a&&a.type?i[a.type](a):i.identity({value:t,field:t.toString(),values:[t]});var o=r.Array.firstValue(e,t);if(r.isNumber(t)||r.isNil(o)&&!a)n=i.identity({value:t,field:t.toString(),values:[t]});else{var s;a&&(s=a.type),s=s||this._getDefaultType(t,e);var u=this._getScaleCfg(s,t,e);a&&r.mix(u,a),n=i[s](u)}return n},t}();t.exports=l},function(t,e,n){var i=n(0),r=n(9),a=n(27).Tooltip,o=i.MatrixUtil.vec2,s=["line","area","path","areaStack"],u=["line","area"],l=["marker","showMarker"];function c(t,e){if(!t)return!1;return!!t.className&&-1!==(i.isNil(t.className.baseVal)?t.className:t.className.baseVal).indexOf(e)}function h(t){var e=[];return i.each(t,function(t){var n=function(t,e){var n=-1;return i.each(t,function(t,r){var a=!0;for(var o in e)if(e.hasOwnProperty(o)&&-1===l.indexOf(o)&&!i.isObject(e[o])&&e[o]!==t[o]){a=!1;break}if(a)return n=r,!1}),n}(e,t);-1===n?e.push(t):e[n]=t}),e}var f=function(){function t(t){i.assign(this,t),this.timeStamp=0}var e=t.prototype;return e._normalizeEvent=function(t){var e=this.chart,n=this._getCanvas(),i=n.getPointByClient(t.clientX,t.clientY),r=n.get("pixelRatio");i.x=i.x/r,i.y=i.y/r;var a=e.getViewsByPoint(i);return i.views=a,i},e._getCanvas=function(){return this.chart.get("canvas")},e._getTriggerEvent=function(){var t,e=this.options.triggerOn;return e&&"mousemove"!==e?"click"===e?t="plotclick":"none"===e&&(t=null):t="plotmove",t},e._getDefaultTooltipCfg=function(){var t=this.chart,e=this.viewTheme,n=this.options,r=i.mix({},e.tooltip),a=t.getAllGeoms().filter(function(t){return t.get("visible")}),o=[];i.each(a,function(t){var e=t.get("type"),n=t.get("adjusts"),r=!1;n&&i.each(n,function(t){if("symmetric"===t.type||"Symmetric"===t.type)return r=!0,!1}),-1!==i.indexOf(o,e)||r||o.push(e)});var s,l=!(!a.length||!a[0].get("coord"))&&a[0].get("coord").isTransposed;if(a.length&&a[0].get("coord")&&"cartesian"===a[0].get("coord").type&&1===o.length)if("interval"===o[0]&&!1!==n.shared){var c=i.mix({},e.tooltipCrosshairsRect);c.isTransposed=l,s={zIndex:0,crosshairs:c}}else if(i.indexOf(u,o[0])>-1){var h=i.mix({},e.tooltipCrosshairsLine);h.isTransposed=l,s={crosshairs:h}}return i.mix(r,s,{})},e._bindEvent=function(){var t=this.chart,e=this._getTriggerEvent();e&&(t.on(e,i.wrapBehavior(this,"onMouseMove")),t.on("plotleave",i.wrapBehavior(this,"onMouseOut")))},e._offEvent=function(){var t=this.chart,e=this._getTriggerEvent();e&&(t.off(e,i.getWrapBehavior(this,"onMouseMove")),t.off("plotleave",i.getWrapBehavior(this,"onMouseOut")))},e._setTooltip=function(t,e,n,r){var a=this.tooltip,o=this.prePoint;if(!o||o.x!==t.x||o.y!==t.y){e=h(e),this.prePoint=t;var s=this.chart,u=this.viewTheme,l=i.isArray(t.x)?t.x[t.x.length-1]:t.x,c=i.isArray(t.y)?t.y[t.y.length-1]:t.y;a.get("visible")||s.emit("tooltip:show",{x:l,y:c,tooltip:a});var f=e[0],p=f.title||f.name;a.isContentChange(p,e)&&(s.emit("tooltip:change",{tooltip:a,x:l,y:c,items:e}),p=e[0].title||e[0].name,a.setContent(p,e),i.isEmpty(n)?a.clearMarkers():!0===this.options.hideMarkers?a.set("markerItems",n):a.setMarkers(n,u.tooltipMarker)),r===this._getCanvas()&&"mini"===a.get("type")?a.hide():(a.setPosition(l,c,r),a.show())}},e.hideTooltip=function(){var t=this.tooltip,e=this.chart,n=this._getCanvas();this.prePoint=null,t.hide(),e.emit("tooltip:hide",{tooltip:t}),n.draw()},e.onMouseMove=function(t){if(!i.isEmpty(t.views)){var e=this.timeStamp,n=+new Date,r={x:t.x,y:t.y};n-e>16&&!this.chart.get("stopTooltip")&&(this.showTooltip(r,t.views,t.shape),this.timeStamp=n)}},e.onMouseOut=function(t){var e=this.tooltip;e.get("visible")&&e.get("follow")&&(t&&t.toElement&&(c(t.toElement,"g2-tooltip")||function(t,e){for(var n=t.parentNode,i=!1;n&&n!==document.body;){if(c(n,e)){i=!0;break}n=n.parentNode}return i}(t.toElement,"g2-tooltip"))||this.hideTooltip())},e.renderTooltip=function(){var t=this;if(!t.tooltip){var e,n=t.chart,r=t.viewTheme,o=t._getCanvas(),s=t._getDefaultTooltipCfg(),u=t.options;(u=i.deepMix({plotRange:n.get("plotRange"),capture:!1,canvas:o,frontPlot:n.get("frontPlot"),viewTheme:r.tooltip,backPlot:n.get("backPlot")},s,u)).crosshairs&&"rect"===u.crosshairs.type&&(u.zIndex=0),u.visible=!1,"mini"===u.type?(u.crosshairs=!1,u.position="top",e=new a.Mini(u)):e=u.useHtml?new a.Html(u):new a.Canvas(u),t.tooltip=e;var l=t._getTriggerEvent();if(!e.get("enterable")&&"plotmove"===l){var c=e.get("container");c&&(c.onmousemove=function(e){var i=t._normalizeEvent(e);n.emit(l,i)})}t._bindEvent()}},e.showTooltip=function(t,e,n){var r=this;if(!i.isEmpty(e)&&t){this.tooltip||this.renderTooltip();var a=r.options,u=[],l=[];if(i.each(e,function(e){if(!e.get("tooltipEnable"))return!0;var o=e.get("geoms"),c=e.get("coord");i.each(o,function(e){var o=e.get("type");if(e.get("visible")&&!1!==e.get("tooltipCfg")){var h=e.get("dataArray");if(e.isShareTooltip()||!1===a.shared&&i.inArray(["area","line","path"],o))i.each(h,function(n){var h=e.findPoint(t,n);if(h){var f=e.getTipItems(h,a.title);i.each(f,function(t){var n=t.point;if(n&&n.x&&n.y){var a=i.isArray(n.x)?n.x[n.x.length-1]:n.x,l=i.isArray(n.y)?n.y[n.y.length-1]:n.y;n=c.applyMatrix(a,l,1),t.x=n[0],t.y=n[1],t.showMarker=!0;var h=r._getItemMarker(e,t.color);t.marker=h,-1!==i.indexOf(s,o)&&u.push(t)}}),l=l.concat(f)}});else{var f=e.get("shapeContainer");n&&n.get("visible")&&n.get("origin")&&n.get("parent")===f&&(l=e.getTipItems(n.get("origin"),a.title))}}}),i.each(l,function(t){var e=t.point,n=i.isArray(e.x)?e.x[e.x.length-1]:e.x,r=i.isArray(e.y)?e.y[e.y.length-1]:e.y;e=c.applyMatrix(n,r,1),t.x=e[0],t.y=e[1]})}),l.length){var c=l[0];if(!l.every(function(t){return t.title===c.title})){var h=c,f=1/0;l.forEach(function(e){var n=o.distance([t.x,t.y],[e.x,e.y]);n<f&&(f=n,h=e)}),l=l.filter(function(t){return t.title===h.title}),u=u.filter(function(t){return t.title===h.title})}if(!1===a.shared&&l.length>1){var p=l[0],g=Math.abs(t.y-p.y);i.each(l,function(e){Math.abs(t.y-e.y)<=g&&(p=e,g=Math.abs(t.y-e.y))}),p&&p.x&&p.y&&(u=[p]),l=[p]}r._setTooltip(t,l,u,n)}else r.hideTooltip()}},e.clear=function(){var t=this.tooltip;t&&t.destroy(),this.tooltip=null,this.prePoint=null,this._offEvent()},e._getItemMarker=function(t,e){var n=t.get("shapeType")||"point",i=t.getDefaultValue("shape")||"circle",a={color:e};return r.getShapeFactory(n).getMarkerCfg(i,a)},t}();t.exports=f},function(t,e,n){function i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var r=n(112),a=n(8),o=n(0),s=n(114),u=n(5),l=n(121),c=n(260);function h(t,e,n){var i=(t-e)/(n-e);return i>=0&&i<=1}function f(t,e){var n=!1;if(t)if("theta"===t.type){var i=t.start,r=t.end;n=h(e.x,i.x,r.x)&&h(e.y,i.y,r.y)}else{var a=t.invert(e);n=a.x>=0&&a.y>=0&&a.x<=1&&a.y<=1}return n}var p={};o.each(a,function(t,e){var n=o.lowerFirst(e);p[n]=function(e){var n=new t(e);return this.addGeom(n),n}});var g=function(t){!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(n,t);var e=n.prototype;function n(e){var n,r=i(i(n=t.call(this,e)||this));return r._setTheme(),o.each(a,function(t,e){var n=o.lowerFirst(e);r[n]=function(e){void 0===e&&(e={}),e.viewTheme=r.get("viewTheme");var n=new t(e);return r.addGeom(n),n}}),r.init(),n}return e.getDefaultCfg=function(){return{viewContainer:null,coord:null,start:{x:0,y:0},end:{x:1,y:1},geoms:[],scales:{},options:{},scaleController:null,padding:0,theme:null,parent:null,tooltipEnable:!0,animate:u.animate,visible:!0}},e._setTheme=function(){var t=this.get("theme"),e={},n={};o.isObject(t)?n=t:-1!==o.indexOf(Object.keys(l),t)&&(n=l[t]),o.deepMix(e,u,n),this.set("viewTheme",e)},e.init=function(){this._initViewPlot(),this.get("data")&&this._initData(this.get("data")),this._initOptions(),this._initControllers(),this._bindEvents()},e._initOptions=function(){var t=this,e=o.mix({},t.get("options"));e.scales||(e.scales={}),e.coord||(e.coord={}),!1===e.animate&&this.set("animate",!1),(!1===e.tooltip||o.isNull(e.tooltip))&&this.set("tooltipEnable",!1),e.geoms&&e.geoms.length&&o.each(e.geoms,function(e){t._createGeom(e)});var n=t.get("scaleController");n&&(n.defs=e.scales);var i=t.get("coordController");i&&i.reset(e.coord),this.set("options",e)},e._createGeom=function(t){var e,n=t.type;this[n]&&(e=this[n](),o.each(t,function(t,n){var i;e[n]&&(o.isObject(t)&&t.field?"label"===t?e[n](t.field,t.callback,t.cfg):(o.each(t,function(t,e){"field"!==e&&(i=t)}),e[n](t.field,i)):e[n](t))}))},e._initControllers=function(){var t=this.get("options"),e=this.get("viewTheme"),n=this.get("canvas"),i=new s.Scale({viewTheme:e,defs:t.scales}),r=new s.Coord(t.coord);this.set("scaleController",i),this.set("coordController",r);var a=new s.Axis({canvas:n,viewTheme:e});this.set("axisController",a);var o=new s.Guide({viewTheme:e,options:t.guides||[]});this.set("guideController",o)},e._initViewPlot=function(){this.get("viewContainer")||this.set("viewContainer",this.get("middlePlot"))},e._initGeoms=function(){for(var t=this.get("geoms"),e=this.get("filteredData"),n=this.get("coord"),i=this.get("_id"),r=0;r<t.length;r++){var a=t[r];a.set("data",e),a.set("coord",n),a.set("_id",i+"-geom"+r),a.set("keyFields",this.get("keyFields")),a.init()}},e._clearGeoms=function(){for(var t=this.get("geoms"),e=0;e<t.length;e++){t[e].clear()}},e._removeGeoms=function(){for(var t=this.get("geoms");t.length>0;){t.shift().destroy()}},e._drawGeoms=function(){for(var t=this.get("geoms"),e=this.get("coord"),n=0;n<t.length;n++){var i=t[n];i.setCoord(e),i.paint()}},e.isShapeInView=function(t){var e=this.get("_id"),n=t._id;return n?n.split("-")[0]===e:t.get("parent").get("viewId")===e},e.getViewRegion=function(){var t,e,n=this.get("parent");if(n){var i=n.getViewRegion(),r=this._getViewRegion(i.start,i.end);t=r.start,e=r.end}else t=this.get("start"),e=this.get("end");return{start:t,end:e}},e._getViewRegion=function(t,e){var n=this.get("start"),i=this.get("end"),r=n.x,a=1-i.y,s=i.x,u=1-n.y,l=this.get("padding"),c=o.toAllPadding(l),h=c[0],f=c[1],p=c[2],g=c[3];return{start:{x:r*(e.x-t.x)+t.x+g,y:a*(e.y-t.y)+t.y-p},end:{x:s*(e.x-t.x)+t.x-f,y:u*(e.y-t.y)+t.y+h}}},e._createCoord=function(){var t=this.get("coordController"),e=this.getViewRegion(),n=t.createCoord(e.start,e.end);this.set("coord",n)},e._renderAxes=function(){var t=this.get("options").axes;if(!1!==t){var e=this.get("axisController");e.container=this.get("backPlot"),e.coord=this.get("coord"),e.options=t||{};var n=this.getXScale(),i=this.getYScales(),r=this.get("_id");e.createAxis(n,i,r)}},e._renderGuides=function(){var t=this.get("guideController");if(!o.isEmpty(t.options)){var e=this.get("coord");t.view=this,t.backContainer=this.get("backPlot"),t.frontContainer=this.get("frontPlot"),t.xScales=this._getScales("x"),t.yScales=this._getScales("y"),t.render(e)}},e._bindEvents=function(){var t=new s.Event({view:this,canvas:this.get("canvas")});t.bindEvents(),this.set("eventController",t)},e._clearEvents=function(){var t=this.get("eventController");t&&t.clearEvents()},e._getScales=function(t){for(var e=this.get("geoms"),n={},i=0;i<e.length;i++){var r=e[i],a="x"===t?r.getXScale():r.getYScale();a&&!n[a.field]&&(n[a.field]=a)}return n},e._adjustScale=function(){this._setCatScalesRange();for(var t=this.get("geoms"),e=this.get("scaleController").defs,n=0;n<t.length;n++){var i=t[n];if("interval"===i.get("type")){var r=i.getYScale(),a=r.field,o=r.min,s=r.max,u=r.type;e[a]&&e[a].min||"time"===u||(o>0?r.change({min:0}):s<=0&&r.change({max:0}))}}},e._setCatScalesRange=function(){var t=this.get("coord"),e=this.get("viewTheme"),n=this.getXScale(),i=this.getYScales(),r=[];n&&r.push(n),r=r.concat(i);var a=t.isPolar&&function(t){var e=t.startAngle,n=t.endAngle;return!(!o.isNil(e)&&!o.isNil(n)&&n-e<2*Math.PI)}(t),s=this.get("scaleController").defs;o.each(r,function(n){if((n.isCategory||n.isIdentity)&&n.values&&(!s[n.field]||!s[n.field].range)){var i,r=n.values.length;if(1===r)i=[.5,1];else{var o=0;i=a?t.isTransposed?[(o=1/r*e.widthRatio.multiplePie)/2,1-o/2]:[0,1-1/r]:[o=1/r*1/2,1-o]}n.range=i}})},e.getXScale=function(){var t=this.get("geoms"),e=null;return o.isEmpty(t)||(e=t[0].getXScale()),e},e.getYScales=function(){for(var t=this.get("geoms"),e=[],n=0;n<t.length;n++){var i=t[n].getYScale();i&&-1===o.indexOf(e,i)&&e.push(i)}return e},e.getXY=function(t){var e,n,i=this.get("coord"),r=this._getScales("x"),a=this._getScales("y");for(var s in t)r[s]&&(e=r[s].scale(t[s])),a[s]&&(n=a[s].scale(t[s]));return o.isNil(e)||o.isNil(n)?null:i.convert({x:e,y:n})},e.getSnapRecords=function(t){var e=this.get("geoms"),n=[];return o.each(e,function(e){var i,r=e.get("dataArray");o.each(r,function(r){(i=e.findPoint(t,r))&&n.push(i)})}),n},e.addGeom=function(t){this.get("geoms").push(t),t.set("view",this);var e=this.get("viewContainer");t.set("container",e),t.set("animate",this.get("animate")),t.bindEvents()},e.removeGeom=function(t){var e=this.get("geoms");o.Array.remove(e,t),t.destroy()},e.createScale=function(t,e){var n=this.get("scales"),i=this.get("parent"),r=n[t];if(!e){var a=this.get("filteredData"),o=this._getFieldsForLegend();e=a.length&&-1===o.indexOf(t)?a:this.get("data")}var s=this.get("scaleController");if(r){if(r.sync){var u=s.createScale(t,e);this._syncScale(r,u)}}else{if((r=s.createScale(t,e)).sync&&i){var l=i.createScale(t,e);r=this._getSyncScale(l,r)}n[t]=r}return r},e._getFieldsForLegend=function(){var t=[],e=this.get("geoms");return o.each(e,function(e){var n=e.getFieldsForLegend();t=t.concat(n)}),o.uniq(t)},e._getSyncScale=function(t,e){return t.type!==e.type?e:(this._syncScale(t,e),t)},e._syncScale=function(t,e){var n=o.union(t.values,e.values);if(e.isLinear){var i=Math.max(t.max,e.max),r=Math.min(t.min,e.min);t.max===i&&t.min===r||t.change({min:r,max:i,values:n})}n.length!==t.values.length&&t.change({values:n})},e.getFilteredValues=function(t){var e=this.get("scales")[t].values,n=this._getFilters();return n&&n[t]?e.filter(n[t]):e.slice(0)},e.getFilteredOutValues=function(t){var e=this.get("scales")[t].values,n=this._getFilters();return n&&n[t]?e.filter(function(e){return!n[t](e)}):[]},e.filter=function(t,e){var n=this.get("options");n.filters||(n.filters={}),n.filters[t]=e},e._getFilters=function(){return this.get("options").filters},e.execFilter=function(t){var e=this._getFilters();return e&&(t=t.filter(function(t){var n=!0;return o.each(e,function(e,i){if(e&&!(n=e(t[i],t)))return!1}),n})),t},e.axis=function(t,e){var n=this.get("options");!1===t?n.axes=!1:(n.axes||(n.axes={}),n.axes[t]=e);return this},e.guide=function(){return this.get("guideController")},e._getKeyFields=function(t){var e=[];o.each(t,function(t,n){t.key&&e.push(n)}),this.set("keyFields",e)},e.scale=function(t,e){var n=this.get("options").scales;return o.isObject(t)?o.mix(n,t):n[t]=e,this._getKeyFields(n),this},e.tooltip=function(t){return this.set("tooltipEnable",t),this},e.animate=function(t){return this.get("options").animate=t,this.set("animate",t),this},e.changeOptions=function(t){return this.set("options",t),this._initOptions(t),this},e.getViewsByPoint=function(t){var e=[],n=this.get("views");return f(this.get("coord"),t)&&e.push(this),o.each(n,function(n){n.get("visible")&&f(n.get("coord"),t)&&e.push(n)}),e},e.eachShape=function(t){var e=this,n=e.get("views"),i=e.get("canvas");o.each(n,function(e){e.eachShape(t)});var r=this.get("geoms");return o.each(r,function(n){var i=n.getShapes();o.each(i,function(i){var r=i.get("origin");if(o.isArray(r)){var a=r.map(function(t){return t._origin});t(a,i,n,e)}else{var s=r._origin;t(s,i,n,e)}})}),i.draw(),this},e.filterShape=function(t){return this.eachShape(function(e,n,i,r){t(e,n,i,r)?n.show():n.hide()}),this},e.clearInner=function(){this.set("scales",{}),this.get("options").geoms=null,this._clearGeoms(),this.get("guideController")&&this.get("guideController").reset(),this.get("axisController")&&this.get("axisController").clear()},e.clear=function(){return this.get("options").filters=null,this._removeGeoms(),this.clearInner(),this.get("guideController")&&this.get("guideController").clear(),this.set("isUpdate",!1),this.set("keyFields",[]),this},e.coord=function(t,e){var n=this.get("coordController");return n.reset({type:t,cfg:e}),n},e.resetCoord=function(){this._createCoord()},e.source=function(t,e){return this._initData(t),e&&this.scale(e),this.emit("setdata"),this},e.changeData=function(t){return this.emit("beforechangedata"),this._initData(t),this.emit("afterchangedata"),this.repaint(),this},e._initData=function(t){var e=this.get("dataView");e&&(e.off("change",o.getWrapBehavior(this,"_onViewChange")),this.set("dataView",null)),t&&t.isDataView&&(t.on("change",o.wrapBehavior(this,"_onViewChange")),this.set("dataView",t),t=t.rows),this.set("data",t)},e._onViewChange=function(){this.emit("beforechangedata");var t=this.get("dataView").rows;this.set("data",t),this.emit("afterchangedata"),this.repaint()},e.beforeRender=function(){var t=this.get("views");o.each(t,function(t){t.beforeRender()}),this.initView()},e.drawComponents=function(){var t=this.get("views");o.each(t,function(t){t.drawComponents()}),this._renderAxes(),this._renderGuides()},e.drawCanvas=function(t){if(!t){var e=this.get("views");this.get("backPlot").sort();var n=this.get("canvas");if(this.get("animate")){var i=this.get("isUpdate");o.each(e,function(t){c.execAnimation(t,i)}),c.execAnimation(this,i)}else n.draw()}},e.render=function(t){return this.clearInner(),this.emit("beforerender"),this.beforeRender(),this.emit("beforepaint"),this.drawComponents(),this.paint(),this.emit("afterpaint"),this.drawCanvas(t),this.emit("afterrender"),this.set("rendered",!0),this},e.initView=function(){var t=this.get("data")||[],e=this.execFilter(t);this.set("filteredData",e),this._createCoord(),this._initGeoms(),this._adjustScale()},e.paint=function(){var t=this.get("views");o.each(t,function(t){t.paint()});var e=this.get("data");o.isEmpty(e)||this._drawGeoms(),this.get("visible")||this.changeVisible(!1,!0)},e.changeVisible=function(t,e){var n=this.get("geoms");(o.each(n,function(e){e.changeVisible(t,!0)}),this.get("axisController")&&this.get("axisController").changeVisible(t),this.get("guideController")&&this.get("guideController").changeVisible(t),e)||this.get("canvas").draw()},e.repaint=function(){this.set("isUpdate",!0),this.clearInner(),this.render()},e.destroy=function(){this._clearEvents();var e=this.get("dataView");e&&e.off("change",o.getWrapBehavior(this,"_onViewChange")),this.clear(),t.prototype.destroy.call(this)},n}(r);t.exports=g},function(t,e,n){var i=n(27).Guide,r=n(270);i.RegionFilter=r,t.exports=i},function(t,e,n){var i=n(0),r=n(18),a=n(33).Path,o=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{name:"regionFilter",zIndex:1,top:!0,start:null,end:null,color:null,apply:null,style:{opacity:1}})},n.render=function(t,e,n,i){var r=this,a=e.addGroup();a.name="guide-region-filter",i.once("afterpaint",function(){if(!a.get("destroyed")){r._drawShapes(i,a);var e=r._drawClip(t);a.attr({clip:e}),r.set("clip",e),r.get("appendInfo")&&a.setSilent("appendInfo",r.get("appendInfo")),r.set("el",a)}})},n._drawShapes=function(t,e){var n=this,r=[];return t.getAllGeoms().map(function(t){var a=t.getShapes(),o=t.get("type");return n._geomFilter(o)&&a.map(function(t){var a=t.type,o=i.cloneDeep(t.attr());n._adjustDisplay(o);var s=e.addShape(a,{attrs:o});return r.push(s),t}),t}),r},n._drawClip=function(t){var e=this.parsePoint(t,this.get("start")),n=this.parsePoint(t,this.get("end")),i=[["M",e.x,e.y],["L",n.x,e.y],["L",n.x,n.y],["L",e.x,n.y],["z"]];return new a({attrs:{path:i,opacity:1}})},n._adjustDisplay=function(t){var e=this.get("color");t.fill&&(t.fill=t.fillStyle=e),t.stroke=t.strokeStyle=e},n._geomFilter=function(t){var e=this.get("apply");return!e||i.contains(e,t)},n.clear=function(){t.prototype.clear.call(this);var e=this.get("clip");e&&e.remove()},e}(r);t.exports=o},function(t,e,n){var i=n(0),r=n(27),a=n(5),o=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return i.mix({},e,{type:"tail-legend",layout:"vertical",autoLayout:!0})},n._addItem=function(t){var e=this.get("itemsGroup"),n=this._getNextX(),r=this.get("unCheckColor"),a=e.addGroup({x:0,y:0,value:t.value,scaleValue:t.scaleValue,checked:t.checked});a.translate(n,0),a.set("viewId",e.get("viewId"));var o=this.get("textStyle"),s=this.get("_wordSpaceing"),u=0;if(t.marker){var l=i.mix({},t.marker,{x:t.marker.radius,y:0});t.checked||(l.fill&&(l.fill=r),l.stroke&&(l.stroke=r));var c=a.addShape("marker",{type:"marker",attrs:l});c.attr("cursor","pointer"),c.name="legend-marker",u+=c.getBBox().width+s}var h=i.mix({},o,{x:u,y:0,text:this._formatItemValue(t.value)});t.checked||i.mix(h,{fill:r});var f=a.addShape("text",{attrs:h});f.attr("cursor","pointer"),f.name="legend-text",this.get("appendInfo")&&f.setSilent("appendInfo",this.get("appendInfo"));var p=a.getBBox(),g=this.get("itemWidth"),d=a.addShape("rect",{attrs:{x:n,y:0-p.height/2,fill:"#fff",fillOpacity:0,width:g||p.width,height:p.height}});return d.attr("cursor","pointer"),d.setSilent("origin",t),d.name="legend-item",this.get("appendInfo")&&d.setSilent("appendInfo",this.get("appendInfo")),a.name="legendGroup",a},n._adjust=function(){if(this.get("geom")){var t=this.get("geom").get("dataArray"),e=this.get("itemsGroup").get("children"),n=0;i.each(e,function(e){var r=t[n],a=r[r.length-1].y;i.isArray(a)&&(a=a[1]);var o=e.getBBox().height,s=e.get("x"),u=a-o/2;e.translate(s,u),n++}),this.get("autoLayout")&&this._antiCollision(e)}},n.render=function(){var e=this;t.prototype.render.call(this),this.get("chart").once("afterpaint",function(){e._adjust()})},n._getPreviousY=function(t){return t.attr("matrix")[7]+t.getBBox().height},n._adjustDenote=function(t,e,n){var i=2*-a.legend.legendMargin;t.addShape("path",{attrs:{path:"M-2,"+e+"L"+i+","+(n+3),lineWidth:1,lineDash:[2,2],stroke:"#999999"}})},n._antiCollision=function(t){var e=this;t.sort(function(t,e){return t.attr("matrix")[7]-e.attr("matrix")[7]});var n=!0,i=e.get("chart").get("plotRange"),r=i.tl.y,a=Math.abs(r-i.bl.y),o=t[0].getBBox().height,s=Number.MIN_VALUE,u=0,l=t.map(function(t){var e=t.attr("matrix")[7];return e>u&&(u=e),e<s&&(s=e),{size:t.getBBox().height,targets:[e-r]}});s-=r;for(var c=0;n;){for(var h=0;h<l.length;h++){var f=l[h],p=(Math.min.apply(s,f.targets)+Math.max.apply(s,f.targets))/2;f.pos=Math.min(Math.max(s,p-f.size/2),a-f.size)}for(n=!1,c=l.length;c--;)if(c>0){var g=l[c-1],d=l[c];g.pos+g.size>d.pos&&(g.size+=d.size,g.targets=g.targets.concat(d.targets),l.splice(c,1),n=!0)}}c=0;var v=this.get("itemsGroup").addGroup();l.forEach(function(n){var i=r+o;n.targets.forEach(function(){var r=t[c].attr("matrix")[7],a=n.pos+i-o/2;Math.abs(r-a)>o/2&&e._adjustDenote(v,a,r-e.get("group").attr("matrix")[7]/2),t[c].translate(0,-r),t[c].translate(0,a),i+=o,c++})})},e}(r.Legend.Category);t.exports=o},function(t,e,n){var i=n(0),r=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){return{type:"plotBack",padding:null,background:null,plotRange:null,plotBackground:null}},n._beforeRenderUI=function(){this._calculateRange()},n._renderUI=function(){this._renderBackground(),this._renderPlotBackground()},n._renderBackground=function(){var t=this.get("background");if(t){var e=this.get("canvas"),n={x:0,y:0,width:this.get("width")||e.get("width"),height:this.get("height")||e.get("height")},r=this.get("backgroundShape");r?r.attr(n):(r=this.addShape("rect",{attrs:i.mix(n,t)}),this.set("backgroundShape",r))}},n._renderPlotBackground=function(){var t=this.get("plotBackground");if(t){var e=this.get("plotRange"),n=e.br.x-e.bl.x,r=e.br.y-e.tr.y,a=e.tl,o={x:a.x,y:a.y,width:n,height:r},s=this.get("plotBackShape");s?s.attr(o):(t.image?(o.img=t.image,s=this.addShape("image",{attrs:o})):(i.mix(o,t),s=this.addShape("rect",{attrs:o})),this.set("plotBackShape",s))}},n._convert=function(t,e){if(i.isString(t))if("auto"===t)t=0;else if(-1!==t.indexOf("%")){var n=this.get("canvas"),r=this.get("width")||n.get("width"),a=this.get("height")||n.get("height");t=parseInt(t,10)/100,t=e?t*r:t*a}return t},n._calculateRange=function(){var t=this.get("plotRange");i.isNil(t)&&(t={});var e=this.get("padding"),n=this.get("canvas"),r=this.get("width")||n.get("width"),a=this.get("height")||n.get("height"),o=i.toAllPadding(e),s=this._convert(o[0],!1),u=this._convert(o[1],!0),l=this._convert(o[2],!1),c=this._convert(o[3],!0),h=Math.min(c,r-u),f=Math.max(c,r-u),p=Math.min(a-l,s),g=Math.max(a-l,s);t.tl={x:h,y:p},t.tr={x:f,y:p},t.bl={x:h,y:g},t.br={x:f,y:g},t.cc={x:(f+h)/2,y:(g+p)/2},this.set("plotRange",t)},n.repaint=function(){return this._calculateRange(),this._renderBackground(),this._renderPlotBackground(),this},e}(n(26).Group);t.exports=r},function(t,e,n){function i(t,e,n){return{x:t.x+e*Math.cos(n),y:t.y+e*Math.sin(n)}}var r=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="circle",e},n.getRegion=function(t,e){var n=2*Math.PI/t,r=-1*Math.PI/2+n*e,a=.5/(1+1/Math.sin(n/2)),o=i({x:.5,y:.5},.5-a,r),s=5*Math.PI/4,u=1*Math.PI/4;return{start:i(o,a,s),end:i(o,a,u)}},n.generateFacets=function(t){var e=this,n=e.fields[0];if(!n)throw"Please specify for the field for facet!";var i=e.getFieldValues(n,t),r=i.length,a=[];return i.forEach(function(o,s){var u=[{field:n,value:o,values:i}],l=e.getFilter(u),c=t.filter(l),h={type:e.type,colValue:o,colField:n,colIndex:s,cols:r,rows:1,rowIndex:0,data:c,region:e.getRegion(r,s)};a.push(h)}),a},e}(n(42));t.exports=r},function(t,e,n){var i=n(0),r=n(113),a={};a.Rect=n(116),a.List=n(115),a.Circle=n(273),a.Tree=n(277),a.Mirror=n(276),a.Matrix=n(275),r.prototype.facet=function(t,e){var n=a[i.upperFirst(t)];if(!n)throw new Error("Not support such type of facets as: "+t);var r=this.get("facets");r&&r.destroy(),e.chart=this;var o=new n(e);this.set("facets",o)},t.exports=a},function(t,e,n){var i=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="matrix",e.showTitle=!1,e},n.generateFacets=function(t){for(var e=this.fields,n=e.length,i=n,r=[],a=0;a<i;a++)for(var o=e[a],s=0;s<n;s++){var u=e[s],l={type:this.type,colValue:o,rowValue:u,colField:o,rowField:u,colIndex:a,rowIndex:s,cols:i,rows:n,data:t,region:this.getRegion(n,i,a,s)};r.push(l)}return r},n.setXAxis=function(t,e,n){n.rowIndex!==n.rows-1&&(e[t].title=null,e[t].label=null)},n.setYAxis=function(t,e,n){0!==n.colIndex&&(e[t].title=null,e[t].label=null)},e}(n(116));t.exports=i},function(t,e,n){var i=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="mirror",this.transpose=!1,e},n.init=function(){this.transpose?(this.cols=2,this.rows=1):(this.cols=1,this.rows=2),t.prototype.init.call(this)},n.beforeProcessView=function(t,e){this.transpose?e.colIndex%2==0?t.coord().transpose().scale(-1,1):t.coord().transpose():e.rowIndex%2!=0&&t.coord().scale(1,-1)},n.renderTitle=function(t,e){this.transpose?this.drawColTitle(t,e):this.drawRowTitle(t,e)},n.setXAxis=function(t,e,n){1!==n.colIndex&&1!==n.rowIndex||(e[t].label=null,e[t].title=null)},n.setYAxis=function(){},e}(n(115));t.exports=i},function(t,e,n){var i=n(42),r=n(0).assign,a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="tree",e.line={lineWidth:1,stroke:"#ddd"},e.lineSmooth=!1,e},n.generateFacets=function(t){if(!this.fields.length)throw"Please specify for the fields for facet!";var e=[],n=this.getRootFacet(t);return e.push(n),n.children=this.getChildFacets(t,1,e),this.setRegion(e),e},n.getRootFacet=function(t){return{type:this.type,rows:this.getRows(),rowIndex:0,colIndex:0,colValue:this.rootTitle,data:t}},n.getRows=function(){return this.fields.length+1},n.getChildFacets=function(t,e,n){var i=this,r=i.fields;if(!(r.length<e)){var a=[],o=r[e-1],s=i.getFieldValues(o,t);return s.forEach(function(r,u){var l=[{field:o,value:r,values:s}],c=i.getFilter(l),h=t.filter(c);if(h.length){var f={type:i.type,colValue:r,colField:o,colIndex:u,rows:i.getRows(),rowIndex:e,data:h,children:i.getChildFacets(h,e+1,n)};a.push(f),n.push(f)}}),a}},n.setRegion=function(t){var e=this;e.forceColIndex(t),t.forEach(function(t){t.region=e.getRegion(t.rows,t.cols,t.colIndex,t.rowIndex)})},n.forceColIndex=function(t){var e=this,n=[],i=0;t.forEach(function(t){e.isLeaf(t)&&(n.push(t),t.colIndex=i,i++)}),n.forEach(function(t){t.cols=n.length});for(var r=e.fields.length-1;r>=0;r--)for(var a=e.getFacetsByLevel(t,r),o=0;o<a.length;o++){var s=a[o];e.isLeaf(s)||(s.originColIndex=s.colIndex,s.colIndex=e.getRegionIndex(s.children),s.cols=n.length)}},n.getFacetsByLevel=function(t,e){var n=[];return t.forEach(function(t){t.rowIndex===e&&n.push(t)}),n},n.getRegion=function(t,e,n,i){var r=1/e,a=1/t,o={x:r*n,y:a*i};return{start:o,end:{x:o.x+r,y:o.y+2*a/3}}},n.getRegionIndex=function(t){var e=t[0];return(t[t.length-1].colIndex-e.colIndex)/2+e.colIndex},n.isLeaf=function(t){return!t.children||!t.children.length},n.setXAxis=function(t,e,n){n.rowIndex!==n.rows-1&&(e[t].label=null,e[t].title=null)},n.setYAxis=function(t,e,n){0!==n.originColIndex&&0!==n.colIndex&&(e[t].title=null,e[t].label=null)},n.onPaint=function(){t.prototype.onPaint.call(this),this.group.clear(),this.facets&&this.line&&this.drawLines(this.facets,this.group)},n.drawLines=function(t,e){var n=this,i=e.addGroup();t.forEach(function(t){if(!n.isLeaf(t)){var e=t.children;n._addFacetLines(t,e,i)}})},n._addFacetLines=function(t,e,n){var i=this,r=t.view.getViewRegion(),a={x:r.start.x+(r.end.x-r.start.x)/2,y:r.start.y};e.forEach(function(t){var e=t.view.getViewRegion(),r={x:e.start.x+(e.end.x-e.start.x)/2,y:e.end.y},o={x:a.x,y:a.y+(r.y-a.y)/2},s={x:r.x,y:o.y};i._drawLine([a,o,s,r],n)})},n._getPath=function(t){var e=[];return this.lineSmooth?(e.push(["M",t[0].x,t[0].y]),e.push(["C",t[1].x,t[1].y,t[2].x,t[2].y,t[3].x,t[3].y])):t.forEach(function(t,n){0===n?e.push(["M",t.x,t.y]):e.push(["L",t.x,t.y])}),e},n._drawLine=function(t,e){var n=this._getPath(t),i=this.line;e.addShape("path",{attrs:r({path:n},i)})},e}(i);t.exports=a},function(t,e,n){function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var a=n(8),o=n(118),s=n(0);n(293);var u=function(t){i(n,t);var e=n.prototype;function n(e){var n;return n=t.call(this,e)||this,s.assign(r(r(n)),o),n}return e.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="area",e.shapeType="area",e.generatePoints=!0,e.sortable=!0,e},e.draw=function(t,e,n,i){var r=this,a=this.getDrawCfg(t[0]),o=this.splitData(t);a.origin=t,s.each(o,function(t,o){a.splitedIndex=o;var s=t.map(function(t){return t.points});a.points=s;var u=n.drawShape(a.shape,a,e);r.appendShapeInfo(u,i+o)})},n}(a),l=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.hasDefaultAdjust=!0,e.adjusts=[{type:"stack"}],e},e}(u);u.Stack=l,a.Area=u,a.AreaStack=l,t.exports=u},function(t,e,n){var i=n(8);n(294);var r=function(t){function e(){return t.apply(this,arguments)||this}return function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="edge",e.shapeType="edge",e.generatePoints=!0,e},e}(i);i.Edge=r,t.exports=r},function(t,e,n){var i=n(59).ColorUtil,r=n(8),a=n(0),o={},s=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="heatmap",e},n._prepareRange=function(){var t=this.get("mappedData"),e=this.getAttr("color").field,n=1/0,i=-1/0;t.forEach(function(t){var r=t._origin[e];r>i&&(i=r),r<n&&(n=r)}),n===i&&(n=i-1);var r=[n,i];this.set("valueRange",r)},n._prepareSize=function(){var t=this.getDefaultValue("size");a.isNumber(t)||(t=this._getDefaultSize());var e=this.get("styleOptions"),n=e&&a.isObject(e.style)?e.style.blur:null;a.isFinite(n)&&null!==n||(n=t/2),this.set("heatmapSize",{blur:n,radius:t})},n._getDefaultSize=function(){var t=this.getAttr("position"),e=this.get("coord");return Math.min(e.width/(4*t.scales[0].ticks.length),e.height/(4*t.scales[1].ticks.length))},n._colorize=function(t){for(var e=this.getAttr("color"),n=t.data,r=3;r<n.length;r+=4){var a=n[r];if(a){var s=void 0;o[a]?s=o[a]:(s=i.rgb2arr(e.gradient(a/256)),o[a]=s),n[r-3]=s[0],n[r-2]=s[1],n[r-1]=s[2],n[r]=a}}},n._prepareGreyScaleBlurredCircle=function(t,e){var n=this.get("grayScaleBlurredCanvas");n||(n=document.createElement("canvas"),this.set("grayScaleBlurredCanvas",n));var i=t+e,r=n.getContext("2d");n.width=n.height=2*i,r.clearRect(0,0,n.width,n.height),r.shadowOffsetX=r.shadowOffsetY=2*i,r.shadowBlur=e,r.shadowColor="black",r.beginPath(),r.arc(-i,-i,t,0,2*Math.PI,!0),r.closePath(),r.fill()},n._drawGrayScaleBlurredCircle=function(t,e,n,i,r){var a=this.get("grayScaleBlurredCanvas");r.globalAlpha=i,r.drawImage(a,t-n,e-n)},n._getShadowCanvasCtx=function(){var t=this.get("shadowCanvas");t||(t=document.createElement("canvas"),this.set("shadowCanvas",t));var e=this.get("coord"),n=e.width,i=e.height;return t.width=n,t.height=i,t.getContext("2d")},n._clearShadowCanvasCtx=function(){var t=this._getShadowCanvasCtx();t.clearRect(0,0,t.canvas.width,t.canvas.height)},n._getImageShape=function(){var t=this.get("imageShape");return t||(t=this.get("container").addShape("Image",{}),this.set("imageShape",t),t)},n.drawWithRange=function(t){var e=this.get("coord"),n=e.start,i=e.end,r=e.width,a=e.height,o=this.getAttr("color").field,s=this.get("heatmapSize");this._clearShadowCanvasCtx();var u=this._getShadowCanvasCtx(),l=this.get("mappedData");t&&(l=l.filter(function(e){return e._origin[o]<=t[1]&&e._origin[o]>=t[0]}));for(var c=this._getScale(o),h=0;h<l.length;h++){var f=l[h],p=this.getDrawCfg(f),g=c.scale(f._origin[o]);this._drawGrayScaleBlurredCircle(p.x-n.x,p.y-i.y,s.radius+s.blur,g,u)}var d=u.getImageData(0,0,r,a);this._clearShadowCanvasCtx(),this._colorize(d),u.putImageData(d,0,0);var v=this._getImageShape();v.attr("x",n.x),v.attr("y",i.y),v.attr("width",r),v.attr("height",a),v.attr("img",u.canvas)},n.draw=function(t){this.set("mappedData",t),this._prepareRange(),this._prepareSize();var e=this.get("heatmapSize");this._prepareGreyScaleBlurredCircle(e.radius,e.blur);var n=this.get("valueRange");this.drawWithRange(n)},e}(r);r.Heatmap=s,t.exports=s},function(t,e,n){var i=n(8);i.Point=n(290),i.PointJitter=i.Point.Jitter,i.PointStack=i.Point.Stack,i.Path=n(119),i.Line=n(286),i.LineStack=i.Line.Stack,i.Interval=n(282),i.IntervalStack=i.Interval.Stack,i.IntervalDodge=i.Interval.Dodge,i.IntervalSymmetric=i.Interval.Symmetric,i.Area=n(278),i.AreaStack=i.Area.Stack,i.Polygon=n(291),i.Schema=n(292),i.SchemaDodge=i.Schema.Dodge,i.Edge=n(279),i.Heatmap=n(280),i.Venn=n(304),i.Violin=n(305),t.exports=i},function(t,e,n){function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var a=n(8),o=n(0),s=n(65);n(295);var u=function(t){i(n,t);var e=n.prototype;function n(e){var n;return n=t.call(this,e)||this,o.assign(r(r(n)),s),n}return e.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="interval",e.shapeType="interval",e.generatePoints=!0,e},e.createShapePointsCfg=function(e){var n=t.prototype.createShapePointsCfg.call(this,e);return n.size=this.getNormalizedSize(e),n},e.clearInner=function(){t.prototype.clearInner.call(this),this.set("defaultSize",null)},n}(a),l=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.hasDefaultAdjust=!0,e.adjusts=[{type:"stack"}],e},e}(u),c=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.hasDefaultAdjust=!0,e.adjusts=[{type:"dodge"}],e},e}(u),h=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.hasDefaultAdjust=!0,e.adjusts=[{type:"symmetric"}],e},e}(u);u.Stack=l,u.Dodge=c,u.Symmetric=h,a.Interval=u,a.IntervalStack=l,a.IntervalDodge=c,a.IntervalSymmetric=h,t.exports=u},function(t,e,n){var i=n(64),r=n(117),a=n(285),o=n(284),s={getLabelsClass:function(t,e){var n=i;return"polar"===t?n=r:"theta"===t?n=a:"interval"!==e&&"polygon"!==e||(n=o),n}};t.exports=s},function(t,e,n){var i=n(0),r=function(t){function e(){return t.apply(this,arguments)||this}return function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t),e.prototype.setLabelPosition=function(t,e,n,r){i.isFunction(r)&&(r=r(t.text,e._origin,n));var a=this.get("coord"),o=a.isTransposed,s=a.convertPoint(e.points[0]),u=a.convertPoint(e.points[2]),l=(s.x-u.x)/2*(o?-1:1),c=(s.y-u.y)/2*(o?-1:1);switch(r){case"right":o?(t.x-=l,t.y+=c,t.textAlign=t.textAlign||"center"):(t.x-=l,t.y+=c,t.textAlign=t.textAlign||"left");break;case"left":o?(t.x-=l,t.y-=c,t.textAlign=t.textAlign||"center"):(t.x+=l,t.y+=c,t.textAlign=t.textAlign||"right");break;case"bottom":o?(t.x-=2*l,t.textAlign=t.textAlign||"left"):(t.y+=2*c,t.textAlign=t.textAlign||"center");break;case"middle":o?t.x-=l:t.y+=c,t.textAlign=t.textAlign||"center";break;case"top":t.textAlign=o?t.textAlign||"left":t.textAlign||"center"}},e}(n(64));t.exports=r},function(t,e,n){var i=n(0),r=n(117),a=n(22),o=n(5);function s(t,e,n){return{x:t.x+n*Math.cos(e),y:t.y+n*Math.sin(e)}}var u=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){return{label:o.thetaLabels}},n.getDefaultOffset=function(t){var e=t.offset||[0,0];return i.isArray(e)||(e=[0,e]),e},n.adjustItems=function(t){var e=t[0].offset[1];return e>0&&(t=this._distribute(t,e)),t},n._distribute=function(t,e){var n=this.get("coord"),i=n.getRadius(),r=this.get("label").labelHeight,a=n.getCenter(),o=2*(i+e)+2*r,s={start:n.start,end:n.end},u=this.get("geom");if(u){var l=u.get("view");s=l.getViewRegion()}var c=[[],[]];return t.forEach(function(t){t&&("right"===t.textAlign?c[0].push(t):c[1].push(t))}),c.forEach(function(t,e){var n=parseInt(o/r,10);t.length>n&&(t.sort(function(t,e){return e["..percent"]-t["..percent"]}),t.splice(n,t.length-n)),t.sort(function(t,e){return t.y-e.y}),function(t,e,n,i,r){var a,o=!0,s=n.start,u=n.end,l=Math.min(s.y,u.y),c=Math.abs(s.y-u.y),h=0,f=Number.MIN_VALUE,p=t.map(function(t){return t.y>h&&(h=t.y),t.y<f&&(f=t.y),{size:e,targets:[t.y-l]}});for(f-=l,h-l>c&&(c=h-l);o;)for(p.forEach(function(t){var e=(Math.min.apply(f,t.targets)+Math.max.apply(f,t.targets))/2;t.pos=Math.min(Math.max(f,e-t.size/2),c-t.size)}),o=!1,a=p.length;a--;)if(a>0){var g=p[a-1],d=p[a];g.pos+g.size>d.pos&&(g.size+=d.size,g.targets=g.targets.concat(d.targets),g.pos+g.size>c&&(g.pos=c-g.size),p.splice(a,1),o=!0)}a=0,p.forEach(function(n){var i=l+e/2;n.targets.forEach(function(){t[a].y=n.pos+i,i+=e,a++})}),t.forEach(function(t){var e=t.r*t.r,n=Math.pow(Math.abs(t.y-i.y),2);if(e<n)t.x=i.x;else{var a=Math.sqrt(e-n);t.x=r?i.x+a:i.x-a}})}(t,r,s,a,e)}),c[0].concat(c[1])},n.lineToLabel=function(t){var e=this.get("coord"),n=e.getRadius()+t.offset[0],i=t.offset[1],r=t.orignAngle||t.angle,a=e.getCenter(),o=s(a,r,n+2.5),u=s(a,r,n+i/2);t.labelLine||(t.labelLine=this.get("labels").labelLine||{}),t.labelLine.path=["M"+o.x,o.y+" Q"+u.x,u.y+" "+t.x,t.y].join(",")},n.getLabelRotate=function(t,e){var n;return e[1]<0&&((n=180*t/Math.PI)>90&&(n-=180),n<-90&&(n+=180)),n/180*Math.PI},n.getLabelAlign=function(t){var e,n=this.get("coord").getCenter();return e=t.angle<=Math.PI/2&&t.x>=n.x?"left":"right",t.offset[1]<=0&&(e="right"===e?"left":"right"),e},n.getArcPoint=function(t){return t},n.getPointAngle=function(t){var e=this.get("coord"),n={x:i.isArray(t.x)?t.x[0]:t.x,y:t.y[0]};this.transLabelPoint(n);var r,o={x:i.isArray(t.x)?t.x[1]:t.x,y:t.y[1]};this.transLabelPoint(o);var s=a.getPointAngle(e,n);if(t.points&&t.points[0].y===t.points[1].y)r=s;else{var u=a.getPointAngle(e,o);s>=u&&(u+=2*Math.PI),r=s+(u-s)/2}return r},n.getCirclePoint=function(t,e){var n=this.get("coord"),i=n.getCenter(),r=n.getRadius()+e[1],a=s(i,t,r);return t+=2*Math.asin(e[0]/(2*r)),a.angle=t,a.r=r,a},e}(r);t.exports=u},function(t,e,n){function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var r=n(8),a=n(119);n(296);var o=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="line",e.sortable=!0,e},e}(a),s=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.hasDefaultAdjust=!0,e.adjusts=[{type:"stack"}],e},e}(o);o.Stack=s,r.Line=o,r.LineStack=s,t.exports=o},function(t,e,n){var i=n(0);function r(t,e){if(!t)return!0;if(t.length!==e.length)return!0;var n=!1;return i.each(e,function(e,r){if(!function(t,e){if(i.isNil(t)||i.isNil(e))return!1;var n=t.get("origin"),r=e.get("origin");return i.isEqual(n,r)}(e,t[r]))return n=!0,!1}),n}function a(t,e){var n={};return i.each(t,function(t,r){var a=e.attr(r);i.isArray(a)&&(a=i.cloneDeep(a)),n[r]=a}),n}var o={_isAllowActive:function(){var t=this.get("allowActive");if(!i.isNil(t))return t;var e=this.get("view"),n=this.isShareTooltip();return!1===e.get("options").tooltip||!n},_onMouseenter:function(t){var e=t.shape,n=this.get("shapeContainer");e&&n.contain(e)&&this._isAllowActive()&&this.setShapesActived(e)},_onMouseleave:function(){var t=this.get("view").get("canvas");this.get("activeShapes")&&(this.clearActivedShapes(),t.draw())},_bindActiveAction:function(){var t=this.get("view"),e=this.get("type");t.on(e+":mouseenter",i.wrapBehavior(this,"_onMouseenter")),t.on(e+":mouseleave",i.wrapBehavior(this,"_onMouseleave"))},_offActiveAction:function(){var t=this.get("view"),e=this.get("type");t.off(e+":mouseenter",i.getWrapBehavior(this,"_onMouseenter")),t.off(e+":mouseleave",i.getWrapBehavior(this,"_onMouseleave"))},_setActiveShape:function(t){var e=this.get("activedOptions")||{},n=t.get("origin"),r=n.shape||this.getDefaultValue("shape");i.isArray(r)&&(r=r[0]);var o=this.get("shapeFactory"),s=i.mix({},t.attr(),{origin:n}),u=o.getActiveCfg(r,s);e.style&&i.mix(u,e.style);var l=a(u,t);t.setSilent("_originAttrs",l),e.animate?t.animate(u,300):t.attr(u),t.set("zIndex",1)},setShapesActived:function(t){var e=this;i.isArray(t)||(t=[t]);var n=e.get("activeShapes");if(r(n,t)){var a=e.get("view").get("canvas"),o=e.get("shapeContainer"),s=e.get("activedOptions");s&&s.highlight?(i.each(t,function(t){t.get("animating")&&t.stopAnimate()}),e.highlightShapes(t)):(n&&e.clearActivedShapes(),i.each(t,function(t){t.get("animating")&&t.stopAnimate(),t.get("visible")&&!t.get("selected")&&e._setActiveShape(t)})),e.set("activeShapes",t),o.sort(),a.draw()}},clearActivedShapes:function(){var t=this.get("shapeContainer"),e=this.get("activedOptions"),n=e&&e.animate;if(t&&!t.get("destroyed")){var r=this.get("activeShapes");if(i.each(r,function(t){if(!t.get("selected")){var e=t.get("_originAttrs");n?(t.stopAnimate(),t.animate(e,300)):t.attr(e),t.setZIndex(0),t.set("_originAttrs",null)}}),this.get("preHighlightShapes")){var a=t.get("children");i.each(a,function(t){if(!t.get("selected")){var e=t.get("_originAttrs");e&&(n?(t.stopAnimate(),t.animate(e,300)):t.attr(e),t.setZIndex(0),t.set("_originAttrs",null))}})}t.get("children").sort(function(t,e){return t._INDEX-e._INDEX}),this.set("activeShapes",null),this.set("preHighlightShapes",null)}},getGroupShapesByPoint:function(t){var e=[];if(this.get("shapeContainer")){var n=this.getXScale().field,r=this.getShapes(),a=this._getOriginByPoint(t);i.each(r,function(t){var i=t.get("origin");t.get("visible")&&i&&(i._origin[n]===a[n]&&e.push(t))})}return e},getSingleShapeByPoint:function(t){var e,n=this.get("shapeContainer"),i=n.get("canvas").get("pixelRatio");if(n&&(e=n.getShape(t.x*i,t.y*i)),e&&e.get("origin"))return e},highlightShapes:function(t,e){i.isArray(t)||(t=[t]);var n=this.get("activeShapes");if(r(n,t)){n&&this.clearActivedShapes();var o=this.getShapes(),s=this.get("activedOptions"),u=s&&s.animate,l=s&&s.style;i.each(o,function(n){var r={};n.stopAnimate(),-1!==i.indexOf(t,n)?(i.mix(r,l,e),n.setZIndex(1)):(i.mix(r,{fillOpacity:.3,opacity:.3}),n.setZIndex(0));var o=a(r,n);n.setSilent("_originAttrs",o),u?n.animate(r,300):n.attr(r)}),this.set("preHighlightShapes",t),this.set("activeShapes",t)}}};t.exports=o},function(t,e,n){var i=n(0);function r(t,e){if(i.isNil(t)||i.isNil(e))return!1;var n=t.get("origin"),r=e.get("origin");return i.isEqual(n,r)}var a={_isAllowSelect:function(){var t=this.get("allowSelect");if(!i.isNil(t))return t;var e=this.get("type"),n=this.get("coord"),r=n&&n.type;return"interval"===e&&"theta"===r},_onClick:function(t){if(this._isAllowSelect()){this.clearActivedShapes();var e=t.shape,n=this.get("shapeContainer");e&&!e.get("animating")&&n.contain(e)&&this.setShapeSelected(e)}},_bindSelectedAction:function(){var t=this.get("view"),e=this.get("type");t.on(e+":click",i.wrapBehavior(this,"_onClick"))},_offSelectedAction:function(){var t=this.get("view"),e=this.get("type");t.off(e+":click",i.getWrapBehavior(this,"_onClick"))},_setShapeStatus:function(t,e){var n=this.get("view"),r=this.get("selectedOptions")||{},a=!1!==r.animate,o=n.get("canvas");t.set("selected",e);var s=t.get("origin");if(e){var u=s.shape||this.getDefaultValue("shape");i.isArray(u)&&(u=u[0]);var l=this.get("shapeFactory"),c=i.mix({geom:this,point:s},r),h=l.getSelectedCfg(u,c);i.mix(h,c.style),t.get("_originAttrs")||(t.get("animating")&&t.stopAnimate(),t.set("_originAttrs",function(t,e){var n={};return i.each(t,function(t,r){"transform"===r&&(r="matrix");var a=e.attr(r);i.isArray(a)&&(a=i.cloneDeep(a)),n[r]=a}),n}(h,t))),a?t.animate(h,300):(t.attr(h),o.draw())}else{var f=t.get("_originAttrs");t.set("_originAttrs",null),a?t.animate(f,300):(t.attr(f),o.draw())}},setShapeSelected:function(t){var e=this._getSelectedShapes(),n=this.get("selectedOptions")||{},a=!1!==n.cancelable;if("multiple"===n.mode)-1===i.indexOf(e,t)?(e.push(t),this._setShapeStatus(t,!0)):a&&(i.Array.remove(e,t),this._setShapeStatus(t,!1));else{var o=e[0];a&&(t=r(o,t)?null:t),r(o,t)||(o&&this._setShapeStatus(o,!1),t&&this._setShapeStatus(t,!0))}},clearSelected:function(){var t=this,e=t.get("shapeContainer");if(e&&!e.get("destroyed")){var n=t._getSelectedShapes();i.each(n,function(e){t._setShapeStatus(e,!1),e.set("_originAttrs",null)})}},setSelected:function(t){var e=this,n=e.getShapes();return i.each(n,function(n){var i=n.get("origin");i&&i._origin===t&&e.setShapeSelected(n)}),this},_getSelectedShapes:function(){var t=this.getShapes(),e=[];return i.each(t,function(t){t.get("selected")&&e.push(t)}),this.set("selectedShapes",e),e}};t.exports=a},function(t,e,n){var i=n(0),r=n(5).defaultColor;function a(t){return t.alias||t.field}var o={_getIntervalSize:function(t){var e=null,n=this.get("type"),r=this.get("coord");if(r.isRect&&("interval"===n||"schema"===n)){e=this.getSize(t._origin);var a=r.isTransposed?"y":"x";if(i.isArray(t[a]))e=e<Math.abs(t[a][1]-t[a][0])?null:e}return e},_snapEqual:function(t,e,n){return t=n.translate(t),e=n.translate(e),n.isCategory?t===e:i.snapEqual(t,e)},_getScaleValueByPoint:function(t){var e=0,n=this.get("coord"),i=this.getXScale(),r=n.invert(t).x;return this.isInCircle()&&r>(1+i.rangeMax())/2&&(r=i.rangeMin()),e=i.invert(r),i.isCategory&&(e=i.translate(e)),e},_getOriginByPoint:function(t){var e=this.getXScale(),n=this.getYScale(),i=e.field,r=n.field,a=this.get("coord").invert(t),o=e.invert(a.x),s=n.invert(a.y),u={};return u[i]=o,u[r]=s,u},_getScale:function(t){var e=this.get("scales"),n=null;return i.each(e,function(e){if(e.field===t)return n=e,!1}),n},_getTipValueScale:function(){var t,e=this.getAttrsForLegend();i.each(e,function(e){var n=e.getScale(e.type);if(n.isLinear)return t=n,!1});var n=this.getXScale(),r=this.getYScale();return!t&&r&&"..y"===r.field?n:t||r||n},_getTipTitleScale:function(t){if(t)return this._getScale(t);var e,n=this.getAttr("position").getFields();return i.each(n,function(t){if(-1===t.indexOf(".."))return e=t,!1}),this._getScale(e)},_filterValue:function(t,e){var n=this.get("coord"),r=this.getYScale(),a=r.field,o=n.invert(e).y;o=r.invert(o);var s=t[t.length-1];return i.each(t,function(t){var e=t._origin;if(e[a][0]<=o&&e[a][1]>=o)return s=t,!1}),s},getXDistance:function(){var t=this.get("xDistance");if(!t){var e=this.getXScale();if(e.isCategory)t=1;else{var n=e.values,r=e.translate(n[0]),a=r;i.each(n,function(t){(t=e.translate(t))<r&&(r=t),t>a&&(a=t)});var o=n.length;t=(a-r)/(o-1)}this.set("xDistance",t)}return t},findPoint:function(t,e){var n=this,r=n.get("type"),a=n.getXScale(),o=n.getYScale(),s=a.field,u=o.field,l=null;if(i.indexOf(["heatmap","point"],r)>-1){var c=n.get("coord").invert(t),h=a.invert(c.x),f=o.invert(c.y),p=1/0;return i.each(e,function(t){var e=Math.pow(t._origin[s]-h,2)+Math.pow(t._origin[u]-f,2);e<p&&(p=e,l=t)}),l}var g=e[0],d=e[e.length-1];if(!g)return l;var v=n._getScaleValueByPoint(t),y=g._origin[s],m=g._origin[u],x=d._origin[s],b=o.isLinear&&i.isArray(m);if(i.isArray(y))i.each(e,function(t){var e=t._origin;if(a.translate(e[s][0])<=v&&a.translate(e[s][1])>=v){if(!b)return l=t,!1;i.isArray(l)||(l=[]),l.push(t)}}),i.isArray(l)&&(l=this._filterValue(l,t));else{var _;if(a.isLinear||"timeCat"===a.type){if((v>a.translate(x)||v<a.translate(y))&&(v>a.max||v<a.min))return null;for(var w,M=0,S=e.length-1;M<=S;){w=Math.floor((M+S)/2);var C=e[w]._origin[s];if(n._snapEqual(C,v,a))return e[w];a.translate(C)<=a.translate(v)?(M=w+1,d=e[w],_=e[w+1]):(0===S&&(d=e[0]),S=w-1)}}else i.each(e,function(t,r){var o=t._origin;if(n._snapEqual(o[s],v,a)){if(!b)return l=t,!1;i.isArray(l)||(l=[]),l.push(t)}else a.translate(o[s])<=v&&(d=t,_=e[r+1])}),i.isArray(l)&&(l=this._filterValue(l,t));d&&_&&Math.abs(a.translate(d._origin[s])-v)>Math.abs(a.translate(_._origin[s])-v)&&(d=_)}var k=n.getXDistance();return!l&&Math.abs(a.translate(d._origin[s])-v)<=k/2&&(l=d),l},getTipTitle:function(t,e){var n="",i=this._getTipTitleScale(e);if(i){var r=t[i.field];n=i.getText(r)}else if("heatmap"===this.get("type")){var a=this.getXScale(),o=this.getYScale();n="( "+a.getText(t[a.field])+", "+o.getText(t[o.field])+" )"}return n},getTipValue:function(t,e){var n,r=e.field,a=t.key;if(n=t[r],i.isArray(n)){var o=[];i.each(n,function(t){o.push(e.getText(t))}),n=o.join("-")}else n=e.getText(n,a);return n},getTipName:function(t){var e,n,r=this._getGroupScales();if(r.length&&i.each(r,function(t){return n=t,!1}),n){var o=n.field;e=n.getText(t[o])}else{e=a(this._getTipValueScale())}return e},getTipItems:function(t,e){var n,o,s=this,u=t._origin,l=s.getTipTitle(u,e),c=s.get("tooltipCfg"),h=[];function f(e,n,a){if(!i.isNil(n)&&""!==n){var o={title:l,point:t,name:e||l,value:n,color:t.color||r,marker:!0};o.size=s._getIntervalSize(t),h.push(i.mix({},o,a))}}if(c){var p=c.fields,g=c.cfg,d=[];if(i.each(p,function(t){d.push(u[t])}),g){i.isFunction(g)&&(g=g.apply(null,d));var v=i.mix({},{point:t,title:l,color:t.color||r,marker:!0},g);v.size=s._getIntervalSize(t),h.push(v)}else i.each(p,function(t){if(!i.isNil(u[t])){var e=s._getScale(t);n=a(e),o=e.getText(u[t]),f(n,o)}})}else{var y=s._getTipValueScale();i.isNil(u[y.field])||(o=s.getTipValue(u,y),f(n=s.getTipName(u),o))}return h},isShareTooltip:function(){var t,e=this.get("shareTooltip"),n=this.get("type"),r=this.get("view");if(t=r.get("parent")?r.get("parent").get("options"):r.get("options"),"interval"===n){var a=this.get("coord"),o=a.type;("theta"===o||"polar"===o&&a.isTransposed)&&(e=!1)}else this.getYScale()&&!i.inArray(["contour","point","polygon","edge"],n)||(e=!1);return t.tooltip&&i.isBoolean(t.tooltip.shared)&&(e=t.tooltip.shared),e}};t.exports=o},function(t,e,n){function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var r=n(8),a=n(0);n(297);var o=function(t){function e(){return t.apply(this,arguments)||this}i(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="point",e.shapeType="point",e.generatePoints=!0,e},n.drawPoint=function(t,e,n,i){var r,o=this,s=t.shape,u=o.getDrawCfg(t);if(a.isArray(t.y)){var l=o.hasStack();a.each(t.y,function(t,a){u.y=t,u.yIndex=a,l&&0===a||(r=n.drawShape(s,u,e),o.appendShapeInfo(r,i+a))})}else a.isNil(t.y)||(r=n.drawShape(s,u,e),o.appendShapeInfo(r,i))},e}(r),s=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.hasDefaultAdjust=!0,e.adjusts=[{type:"jitter"}],e},e}(o),u=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.hasDefaultAdjust=!0,e.adjusts=[{type:"stack"}],e},e}(o);o.Jitter=s,o.Stack=u,r.Point=o,r.PointJitter=s,r.PointStack=u,t.exports=o},function(t,e,n){var i=n(8),r=n(0);n(298);var a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="polygon",e.shapeType="polygon",e.generatePoints=!0,e},n.createShapePointsCfg=function(e){var n,i=t.prototype.createShapePointsCfg.call(this,e),a=i.x,o=i.y;if(!r.isArray(a)||!r.isArray(o)){var s=this.getXScale(),u=this.getYScale(),l=.5/(s.values?s.values.length:s.ticks.length),c=.5/(u.values?u.values.length:u.ticks.length);s.isCategory&&u.isCategory?(a=[a-l,a-l,a+l,a+l],o=[o-c,o+c,o+c,o-c]):r.isArray(a)?(a=[(n=a)[0],n[0],n[1],n[1]],o=[o-c/2,o+c/2,o+c/2,o-c/2]):r.isArray(o)&&(o=[(n=o)[0],n[1],n[1],n[0]],a=[a-l/2,a-l/2,a+l/2,a+l/2]),i.x=a,i.y=o}return i},e}(i);i.Polygon=a,t.exports=a},function(t,e,n){function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var a=n(8),o=n(0),s=n(65);n(299);var u=function(t){i(n,t);var e=n.prototype;function n(e){var n;return n=t.call(this,e)||this,o.assign(r(r(n)),s),n}return e.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="schema",e.shapeType="schema",e.generatePoints=!0,e},e.createShapePointsCfg=function(e){var n=t.prototype.createShapePointsCfg.call(this,e);return n.size=this.getNormalizedSize(e),n},n}(a),l=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.hasDefaultAdjust=!0,e.adjusts=[{type:"dodge"}],e},e}(u);u.Dodge=l,a.Schema=u,a.SchemaDodge=l,t.exports=u},function(t,e,n){var i=n(0),r=n(9),a=n(22),o=n(5);function s(t){var e=o.shape.hollowArea;return i.mix({},e,{stroke:t.color,lineWidth:t.size,strokeOpacity:t.opacity},t.style)}function u(t){var e=o.shape.area;return i.mix({},e,{fill:t.color,stroke:t.color,lineWidth:t.size,fillOpacity:t.opacity},t.style)}function l(t,e,n){var r=[],o=[],s=[],u=[],l=t.isInCircle;return i.each(t.points,function(t){s.push(t[1]),u.push(t[0])}),u=u.reverse(),o.push(s,u),i.each(o,function(i,o){var s=[],u=(i=n.parsePoints(i))[0];l&&i.push({x:u.x,y:u.y}),s=e?a.getSplinePath(i,!1,t.constraint):a.getLinePath(i,!1),o>0&&(s[0][0]="L"),r=r.concat(s)}),r.push(["Z"]),r}function c(t){return{symbol:function(t,e){return[["M",t-5.5,e-4],["L",t+5.5,e-4],["L",t+5.5,e+4],["L",t-5.5,e+4],["Z"]]},radius:5,fill:t.color,fillOpacity:.6}}var h=r.registerFactory("area",{defaultShapeType:"area",getDefaultPoints:function(t){var e=[],n=t.x,r=t.y,a=t.y0;return r=i.isArray(r)?r:[a,r],i.each(r,function(t){e.push({x:n,y:t})}),e},getActiveCfg:function(t,e){return function(t,e){if("line"===t||"smoothLine"===t)return{lineWidth:(e.lineWidth||0)+1};var n=e.fillOpacity||e.opacity||1;return{fillOpacity:n-.15,strokeOpacity:n-.15}}(t,e)},drawShape:function(t,e,n){var r,a=this.getShape(t);return(r=1===e.points.length&&o.showSinglePoint?function(t,e,n){var r=t._coord.convertPoint(e.points[0][1]);return n.addShape("circle",{attrs:i.mix({x:r.x,y:r.y,r:2,fill:e.color},e.style)})}(this,e,n):a.draw(e,n))&&(r.set("origin",e.origin),r._id=e.splitedIndex?e._id+e.splitedIndex:e._id,r.name=this.name),r},getSelectedCfg:function(t,e){return e&&e.style?e.style:this.getActiveCfg(t,e)}});r.registerShape("area","area",{draw:function(t,e){var n=u(t),r=l(t,!1,this);return e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return c(t)}}),r.registerShape("area","smooth",{draw:function(t,e){var n=u(t),r=this._coord;t.constraint=[[r.start.x,r.end.y],[r.end.x,r.start.y]];var a=l(t,!0,this);return e.addShape("path",{attrs:i.mix(n,{path:a})})},getMarkerCfg:function(t){return c(t)}}),r.registerShape("area","line",{draw:function(t,e){var n=s(t),r=l(t,!1,this);return e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return c(t)}}),r.registerShape("area","smoothLine",{draw:function(t,e){var n=s(t),r=l(t,!0,this);return e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return c(t)}}),h.spline=h.smooth,t.exports=h},function(t,e,n){var i=n(0),r=n(9),a=n(66),o=n(5),s=n(22),u=1/3;function l(t){var e=o.shape.edge;return i.mix({},e,{stroke:t.color,lineWidth:t.size,strokeOpacity:t.opacity,opacity:t.opacity},t.style)}var c=r.registerFactory("edge",{defaultShapeType:"line",getDefaultPoints:function(t){return a.splitPoints(t)},getActiveCfg:function(t,e){return{lineWidth:(e.lineWidth||0)+1}}});function h(t,e){var n=[];n.push({x:t.x,y:.5*t.y+1*e.y/2}),n.push({y:.5*t.y+1*e.y/2,x:e.x}),n.push(e);var r=["C"];return i.each(n,function(t){r.push(t.x,t.y)}),r}function f(t,e){var n=[];n.push({x:e.x,y:e.y}),n.push(t);var r=["Q"];return i.each(n,function(t){r.push(t.x,t.y)}),r}r.registerShape("edge","line",{draw:function(t,e){var n=this.parsePoints(t.points),r=l(t),a=s.getLinePath(n);return e.addShape("path",{attrs:i.mix(r,{path:a})})},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4.5},l(t))}}),r.registerShape("edge","vhv",{draw:function(t,e){var n=t.points,r=l(t),a=function(t,e){var n=[];n.push({y:t.y*(1-u)+e.y*u,x:t.x}),n.push({y:t.y*(1-u)+e.y*u,x:e.x}),n.push(e);var r=[["M",t.x,t.y]];return i.each(n,function(t){r.push(["L",t.x,t.y])}),r}(n[0],n[1]);return a=this.parsePath(a),e.addShape("path",{attrs:i.mix(r,{path:a})})},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4.5},l(t))}}),r.registerShape("edge","smooth",{draw:function(t,e){var n=t.points,r=l(t),a=function(t,e){var n=h(t,e),i=[["M",t.x,t.y]];return i.push(n),i}(n[0],n[1]);return a=this.parsePath(a),e.addShape("path",{attrs:i.mix(r,{path:a})})},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4.5},l(t))}}),r.registerShape("edge","arc",{draw:function(t,e){var n,r,a=t.points,o=a.length>2?"weight":"normal",s=l(t);if(t.isInCircle){var u={x:0,y:1};"normal"===o?r=function(t,e,n){var i=f(e,n),r=[["M",t.x,t.y]];return r.push(i),r}(a[0],a[1],u):(s.fill=s.stroke,r=function(t,e){var n=f(t[1],e),i=f(t[3],e),r=[["M",t[0].x,t[0].y]];return r.push(i),r.push(["L",t[3].x,t[3].y]),r.push(["L",t[2].x,t[2].y]),r.push(n),r.push(["L",t[1].x,t[1].y]),r.push(["L",t[0].x,t[0].y]),r.push(["Z"]),r}(a,u)),r=this.parsePath(r),n=e.addShape("path",{attrs:i.mix(s,{path:r})})}else if("normal"===o)a=this.parsePoints(a),n=e.addShape("arc",{attrs:i.mix(s,{x:(a[1].x+a[0].x)/2,y:a[0].y,r:Math.abs(a[1].x-a[0].x)/2,startAngle:Math.PI,endAngle:2*Math.PI})});else{r=[["M",a[0].x,a[0].y],["L",a[1].x,a[1].y]];var c=h(a[1],a[3]),p=h(a[2],a[0]);r.push(c),r.push(["L",a[3].x,a[3].y]),r.push(["L",a[2].x,a[2].y]),r.push(p),r.push(["Z"]),r=this.parsePath(r),s.fill=s.stroke,n=e.addShape("path",{attrs:i.mix(s,{path:r})})}return n},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4.5},l(t))}}),t.exports=c},function(t,e,n){var i=n(0),r=n(9),a=n(22),o=i.PathUtil,s=n(5),u=n(26);function l(t,e){var n,r,a=t.x,o=t.y,s=t.y0,u=t.size,l=s,c=o;i.isArray(o)&&(c=o[1],l=o[0]),i.isArray(a)?(n=a[0],r=a[1]):(n=a-u/2,r=a+u/2);var h=[];return h.push({x:n,y:l},{x:n,y:c}),e?h.push({x:r,y:(c+l)/2}):h.push({x:r,y:c},{x:r,y:l}),h}function c(t){for(var e=[],n=0;n<t.length;n++){var i=t[n];if(i){var r=0===n?"M":"L";e.push([r,i.x,i.y])}}var a=t[0];return e.push(["L",a.x,a.y]),e.push(["z"]),e}function h(t){var e=s.shape.interval;return i.mix({},e,{fill:t.color,stroke:t.color,fillOpacity:t.opacity},t.style)}function f(t){var e=s.shape.hollowInterval;return i.mix({},e,{stroke:t.color,strokeOpacity:t.opacity},t.style)}function p(t,e){var n=[],r=t.points,a=t.nextPoints;return i.isNil(a)?e?n.push(["M",r[0].x,r[0].y],["L",r[1].x,r[1].y],["L",r[2].x,r[2].y],["L",r[3].x,r[3].y],["Z"]):n.push(["M",r[0].x,r[0].y],["L",r[1].x,r[1].y],["L",r[2].x,r[2].y],["L",r[2].x,r[2].y],["Z"]):n.push(["M",r[0].x,r[0].y],["L",r[1].x,r[1].y],["L",a[1].x,a[1].y],["L",a[0].x,a[0].y],["Z"]),n}function g(t,e){var n,r=e.geom.get("coord"),o=e.point;if(r&&"theta"===r.type){var s=function(t,e){var n,r,o,s,u=e.getRadius(),l=u*e.innerRadius;return!i.isArray(t.x)&&i.isArray(t.y)&&(t.x=[t.x,t.x]),i.isArray(t.x)?(o={x:t.x[0],y:t.y[0]},s={x:t.x[1],y:t.y[1]},n=a.getPointAngle(e,o),(r=a.getPointAngle(e,s))<=n&&(r+=2*Math.PI)):(s=t,n=e.startAngle,r=a.getPointAngle(e,s)),{r:u,ir:l,startAngle:n,endAngle:r}}(o,r),u=(s.endAngle-s.startAngle)/2+s.startAngle;n={transform:[["t",7.5*Math.cos(u),7.5*Math.sin(u)]]}}return i.mix({},n)}var d=r.registerFactory("interval",{defaultShapeType:"rect",getActiveCfg:function(t,e){return!t||i.inArray(["rect","funnel","pyramid"],t)?{fillOpacity:(e.fillOpacity||e.opacity||1)-.15}:{lineWidth:(e.lineWidth||0)+1}},getDefaultPoints:function(t){return l(t)},getSelectedCfg:function(t,e){return g(0,e)}});function v(t,e,n,i){return 0===e?[[t+.5*n/Math.PI/2,i/2],[t+.5*n/Math.PI,i],[t+n/4,i]]:1===e?[[t+.5*n/Math.PI/2*(Math.PI-2),i],[t+.5*n/Math.PI/2*(Math.PI-1),i/2],[t+n/4,0]]:2===e?[[t+.5*n/Math.PI/2,-i/2],[t+.5*n/Math.PI,-i],[t+n/4,-i]]:[[t+.5*n/Math.PI/2*(Math.PI-2),-i],[t+.5*n/Math.PI/2*(Math.PI-1),-i/2],[t+n/4,0]]}function y(t,e,n,i,r,a,o){for(var s=2*Math.ceil(2*t/n*4),u=[];i<2*-Math.PI;)i+=2*Math.PI;for(;i>0;)i-=2*Math.PI;var l=a-t+(i=i/Math.PI/2*n)-2*t;u.push(["M",l,e]);for(var c=0,h=0;h<s;++h){var f=v(h*n/4,h%4,n,r);u.push(["C",f[0][0]+l,-f[0][1]+e,f[1][0]+l,-f[1][1]+e,f[2][0]+l,-f[2][1]+e]),h===s-1&&(c=f[2][0])}return u.push(["L",c+l,o+t]),u.push(["L",l,o+t]),u.push(["L",l,e]),u}function m(t,e,n,i,r,a,o,u){for(var l=o.getBBox(),c=l.maxX-l.minX,h=l.maxY-l.minY,f=0;f<i;f++){var p=a.addShape("path",{attrs:{path:y(u,l.minY+h*n,c/4,0,c/64,t,e),fill:r[f],clip:o}});"canvas"===s.renderer&&p.animate({transform:[["t",c/2,0]],repeat:!0},5e3-300*f)}}r.registerShape("interval","rect",{draw:function(t,e){var n=h(t),r=c(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){var e=h(t),n=t.isInCircle;return i.mix({symbol:n?"circle":"square",radius:n?4.5:4},e)}}),r.registerShape("interval","hollowRect",{draw:function(t,e){var n=f(t),r=c(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){var e=f(t),n=t.isInCircle;return i.mix({symbol:n?"circle":"square",radius:n?4.5:4},e)}}),r.registerShape("interval","line",{getPoints:function(t){return function(t){var e=t.x,n=t.y,r=t.y0,a=[];return i.isArray(n)?i.each(n,function(t,n){a.push({x:i.isArray(e)?e[n]:e,y:t})}):a.push({x:e,y:n},{x:e,y:r}),a}(t)},draw:function(t,e){var n=f(t);n.lineWidth=t.size||1;var r=c(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){var e=f(t);return i.mix({symbol:"line",radius:5},e)}}),r.registerShape("interval","tick",{getPoints:function(t){return function(t){var e=t.x,n=i.isArray(t.y)?t.y[1]:t.y,r=i.isArray(t.y)?t.y[0]:t.y0,a=t.size,o=[];return o.push({x:e-a/2,y:n},{x:e+a/2,y:n},{x:e,y:n},{x:e,y:r},{x:e-a/2,y:r},{x:e+a/2,y:r}),o}(t)},draw:function(t,e){var n=f(t),r=function(t){var e=[];return e.push(["M",t[0].x,t[0].y],["L",t[1].x,t[1].y],["M",t[2].x,t[2].y],["L",t[3].x,t[3].y],["M",t[4].x,t[4].y],["L",t[5].x,t[5].y]),e}(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){var e=f(t);return i.mix({symbol:"tick",radius:5},e)}}),r.registerShape("interval","funnel",{getPoints:function(t){return t.size=2*t.size,l(t)},draw:function(t,e){var n=h(t),r=p(t,!0);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){var e=h(t);return i.mix({symbol:"square",radius:4},e)}}),r.registerShape("interval","pyramid",{getPoints:function(t){return t.size=2*t.size,l(t,!0)},draw:function(t,e){var n=h(t),r=p(t,!1);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){var e=h(t);return i.mix({symbol:"square",radius:4},e)}}),r.registerShape("interval","liquid-fill-gauge",{draw:function(t,e){var n=0,r=1/0;i.each(t.points,function(t){t.x<r&&(r=t.x),n+=t.x});var a=n/t.points.length,o=this.parsePoint({x:a,y:.5}),s=this.parsePoint({x:r,y:.5}),l=o.x-s.x,c=Math.min(l,s.y),p=h(t),g=new u.Circle({attrs:{x:o.x,y:o.y,r:c}});return m(o.x,o.y,t.y/(2*o.y),1,[p.fill],e,g,4*c),e.addShape("circle",{attrs:i.mix(f(t),{x:o.x,y:o.y,r:c+c/8})})}});var x={};r.registerShape("interval","liquid-fill-path",{draw:function(t,e){var n=i.mix({},h(t)),r=t.shape[1],a=0,s=1/0;i.each(t.points,function(t){t.x<s&&(s=t.x),a+=t.x});var u,l=a/t.points.length,c=this.parsePoint({x:l,y:.5}),p=this.parsePoint({x:s,y:.5}),g=c.x-p.x,d=Math.min(g,p.y);if(x[r])u=x[r];else{var v=o.parsePathString(r);x[r]=u={segments:v}}var y=[];n.rotate&&(y.push(["r",n.rotate/180*Math.PI]),delete n.rotate);var b=e.addShape("path",{attrs:i.mix(n,{fillOpacity:0,path:u.segments})}),_=i.cloneDeep(b.getBBox()),w=_.maxX-_.minX,M=_.maxY-_.minY,S=2*d/Math.max(w,M);b.transform(y.concat([["s",S,S]]));var C=S*w/2,k=S*M/2;b.transform([["t",c.x-C,c.y-k]]),m(c.x,c.y,t.y/(2*c.y),1,[n.fill],e,b,4*p.y);var A=e.addShape("path",{attrs:i.mix(f(t),{path:u.segments})});return A.transform(y.concat([["s",S,S],["t",c.x-C,c.y-k]])),A}}),r.registerShape("interval","top-line",{draw:function(t,e){var n=h(t),r=t.style||{},a=[["M",t.points[1].x,t.points[1].y],["L",t.points[2].x,t.points[2].y]],o={stroke:r.stroke||"white",lineWidth:r.lineWidth||1,path:this.parsePath(a)},s=c(t.points);s=this.parsePath(s),delete n.stroke;var u=e.addShape("path",{attrs:i.mix(n,{zIndex:0,path:s})});return e.addShape("path",{zIndex:1,attrs:o}),u},getMarkerCfg:function(t){var e=h(t),n=t.isInCircle;return i.mix({symbol:n?"circle":"square",radius:n?4.5:4},e)}}),t.exports=d},function(t,e,n){var i=n(0),r=n(22),a=n(66),o=n(9),s=n(5),u=[1,1],l=[5.5,1];function c(t){var e=s.shape.line;return i.mix({},e,{stroke:t.color,lineWidth:t.size,strokeOpacity:t.opacity,opacity:t.opacity},t.style)}function h(t){var e=s.shape.line;return i.mix({},e,{stroke:t.color,lineWidth:2,strokeOpacity:t.opacity,opacity:t.opacity,radius:6},t.style)}function f(t,e,n,i){var a;if(e){var o=i.constraint;n&&t.length&&t.push({x:t[0].x,y:t[0].y}),a=r.getSplinePath(t,!1,o)}else a=r.getLinePath(t,!1),n&&a.push(["Z"]);return a}function p(t,e){var n=t.points,r=t.isInCircle,o=n[0];return i.isArray(o.y)?function(t,e,n,i){for(var r=[],o=i.isStack,s=[],u=0;u<t.length;u++){var l=t[u],c=a.splitPoints(l);s.push(c[0]),r.push(c[1])}var h=f(r,e,n,i),p=f(s,e,n,i);return o?h:h.concat(p)}(n,e,r,t):f(n,e,r,t)}function g(t,e){return function(t){var e=[];return i.each(t,function(t,n){var i=0===n?["M",t.x,t.y]:["L",t.x,t.y];e.push(i)}),e}(function(t,e){var n=[];return i.each(t,function(i,r){var a=t[r+1];n.push(i),a&&(n=n.concat(e(i,a)))}),n}(t.points,e))}function d(t,e,n){return[["M",t-n,e],["L",t+n,e]]}function v(t,e,n){return[["M",t-n,e],["A",n/2,n/2,0,1,1,t,e],["A",n/2,n/2,0,1,0,t+n,e]]}function y(t,e){return i.mix({symbol:e?v:d},h(t))}function m(t,e){return i.mix({symbol:e},h(t))}var x=o.registerFactory("line",{defaultShapeType:"line",getActiveCfg:function(t,e){return{lineWidth:(e.lineWidth||0)+1}},getDefaultPoints:function(t){return a.splitPoints(t)},drawShape:function(t,e,n){var r,a=this.getShape(t);return(r=1===e.points.length&&s.showSinglePoint?function(t,e,n){var r=e.points[0];return n.addShape("circle",{attrs:i.mix({x:r.x,y:r.y,r:2,fill:e.color},e.style)})}(0,e,n):a.draw(e,n))&&(r.set("origin",e.origin),r._id=e.splitedIndex?e._id+e.splitedIndex:e._id,r.name=this.name),r}});o.registerShape("line","line",{draw:function(t,e){var n=c(t),r=p(t,!1);return e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return y(t)}}),o.registerShape("line","dot",{draw:function(t,e){var n=c(t),r=p(t,!1);return e.addShape("path",{attrs:i.mix(n,{path:r,lineDash:u})})},getMarkerCfg:function(t){var e=y(t,!1);return e.lineDash=u,e}}),o.registerShape("line","dash",{draw:function(t,e){var n=c(t),r=p(t,!1);return e.addShape("path",{attrs:i.mix({path:r,lineDash:l},n)})},getMarkerCfg:function(t){var e=y(t,!1);return e.lineDash=e.lineDash||l,e}}),o.registerShape("line","smooth",{draw:function(t,e){var n=c(t),r=this._coord;t.constraint=[[r.start.x,r.end.y],[r.end.x,r.start.y]];var a=p(t,!0);return e.addShape("path",{attrs:i.mix(n,{path:a})})},getMarkerCfg:function(t){return y(t,!0)}}),o.registerShape("line","hv",{draw:function(t,e){var n=c(t),r=g(t,function(t,e){var n=[];return n.push({x:e.x,y:t.y}),n});return e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return m(t,function(t,e,n){return[["M",t-n-1,e-2.5],["L",t,e-2.5],["L",t,e+2.5],["L",t+n+1,e+2.5]]})}}),o.registerShape("line","vh",{draw:function(t,e){var n=c(t),r=g(t,function(t,e){var n=[];return n.push({x:t.x,y:e.y}),n});return e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return m(t,function(t,e,n){return[["M",t-n-1,e+2.5],["L",t,e+2.5],["L",t,e-2.5],["L",t+n+1,e-2.5]]})}}),o.registerShape("line","hvh",{draw:function(t,e){var n=c(t),r=g(t,function(t,e){var n=[],i=(e.x-t.x)/2+t.x;return n.push({x:i,y:t.y}),n.push({x:i,y:e.y}),n});return e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return m(t,function(t,e,n){return[["M",t-(n+1),e+2.5],["L",t-n/2,e+2.5],["L",t-n/2,e-2.5],["L",t+n/2,e-2.5],["L",t+n/2,e+2.5],["L",t+n+1,e+2.5]]})}}),o.registerShape("line","vhv",{draw:function(t,e){var n=c(t),r=g(t,function(t,e){var n=[],i=(e.y-t.y)/2+t.y;return n.push({x:t.x,y:i}),n.push({x:e.x,y:i}),n});return e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return m(t,function(t,e){return[["M",t-5,e+2.5],["L",t-5,e],["L",t,e],["L",t,e-3],["L",t,e+3],["L",t+6.5,e+3]]})}}),x.spline=x.smooth,t.exports=x},function(t,e,n){var i=n(0),r=i.PathUtil,a=n(66),o=n(5),s=n(9),u=n(26).Marker,l=["cross","tick","plus","hyphen","line","pointerLine","pointerArrow"],c=Math.sqrt(3);function h(t){var e=o.shape.point;return i.mix({},e,{fill:t.color,fillOpacity:t.opacity,radius:t.size},t.style)}function f(t){var e=o.shape.hollowPoint;return i.mix({},e,{stroke:t.color,strokeOpacity:t.opacity,radius:t.size},t.style)}i.mix(u.Symbols,{hexagon:function(t,e,n){var i=n/2*c;return[["M",t,e-n],["L",t+i,e-n/2],["L",t+i,e+n/2],["L",t,e+n],["L",t-i,e+n/2],["L",t-i,e-n/2],["Z"]]},bowtie:function(t,e,n){var i=n-1.5;return[["M",t-n,e-i],["L",t+n,e+i],["L",t+n,e-i],["L",t-n,e+i],["Z"]]},cross:function(t,e,n){return[["M",t-n,e-n],["L",t+n,e+n],["M",t+n,e-n],["L",t-n,e+n]]},tick:function(t,e,n){return[["M",t-n/2,e-n],["L",t+n/2,e-n],["M",t,e-n],["L",t,e+n],["M",t-n/2,e+n],["L",t+n/2,e+n]]},plus:function(t,e,n){return[["M",t-n,e],["L",t+n,e],["M",t,e-n],["L",t,e+n]]},hyphen:function(t,e,n){return[["M",t-n,e],["L",t+n,e]]},line:function(t,e,n){return[["M",t,e-n],["L",t,e+n]]}});var p=s.registerFactory("point",{defaultShapeType:"hollowCircle",getActiveCfg:function(t,e){var n,r=e.radius;return{radius:r+1,shadowBlur:r,shadowColor:n=t&&(0===t.indexOf("hollow")||-1!==i.indexOf(l,t))||!t?e.stroke||e.strokeStyle:e.fill||e.fillStyle,stroke:n,strokeOpacity:1,lineWidth:1}},getDefaultPoints:function(t){return a.splitPoints(t)}});s.registerShape("point","rect",{draw:function(t,e){var n=h(t),r=function(t){var e=t.points[0].x,n=t.points[0].y,i=t.size[0],r=t.size[1];return[["M",e-.5*i,n-.5*r],["L",e+.5*i,n-.5*r],["L",e+.5*i,n+.5*r],["L",e-.5*i,n+.5*r],["z"]]}(t);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){var e=h(t);return e.symbol="rect",e.radius=4.5,e}}),i.each(["circle","square","bowtie","diamond","hexagon","triangle","triangle-down"],function(t){s.registerShape("point",t,{draw:function(e,n){var r=h(e);return n.addShape("Marker",{attrs:i.mix(r,{symbol:t,x:e.x,y:e.y})})},getMarkerCfg:function(e){var n=h(e);return n.symbol=t,n.radius=4.5,n}}),s.registerShape("point","hollow"+i.upperFirst(t),{draw:function(e,n){var r=f(e);return n.addShape("Marker",{attrs:i.mix(r,{symbol:t,x:e.x,y:e.y})})},getMarkerCfg:function(e){var n=f(e);return n.symbol=t,n.radius=4.5,n}})}),i.each(l,function(t){s.registerShape("point",t,{draw:function(e,n){var r=f(e);return n.addShape("Marker",{attrs:i.mix(r,{symbol:t,x:e.x,y:e.y})})},getMarkerCfg:function(e){var n=f(e);return n.symbol=t,n.radius=4.5,n}})}),s.registerShape("point","image",{draw:function(t,e){return t.points=this.parsePoints(t.points),e.addShape("image",{attrs:{x:t.points[0].x-t.size/2,y:t.points[0].y-t.size,width:t.size,height:t.size,img:t.shape[1]}})}});var g={};s.registerShape("point","path",{draw:function(t,e){var n,a=i.mix({},f(t),h(t)),o=t.shape[1],s=t.size||10;if(g[o])n=g[o];else{var u=r.parsePathString(o),l=i.flatten(u).filter(function(t){return i.isNumber(t)});g[o]=n={range:Math.max.apply(null,l)-Math.min.apply(null,l),segments:u}}var c=s/n.range,p=[];a.rotate&&(p.push(["r",a.rotate/180*Math.PI]),delete a.rotate);var d=e.addShape("path",{attrs:i.mix(a,{path:n.segments})});return p.push(["s",c,c],["t",t.x,t.y]),d.transform(p),d}}),t.exports=p},function(t,e,n){var i=n(0),r=n(9),a=n(5);function o(t){var e=a.shape.polygon;return i.mix({},e,{stroke:t.color,fill:t.color,fillOpacity:t.opacity},t.style)}function s(t){for(var e=t[0],n=1,r=[["M",e.x,e.y]];n<t.length;){var a=t[n];a.x===t[n-1].x&&a.y===t[n-1].y||(r.push(["L",a.x,a.y]),a.x===e.x&&a.y===e.y&&n<t.length-1&&(e=t[n+1],r.push(["Z"]),r.push(["M",e.x,e.y]),n++)),n++}return i.isEqual(r[r.length-1],e)||r.push(["L",e.x,e.y]),r.push(["Z"]),r}var u=r.registerFactory("polygon",{defaultShapeType:"polygon",getDefaultPoints:function(t){var e=[];return i.each(t.x,function(n,i){var r=t.y[i];e.push({x:n,y:r})}),e},getActiveCfg:function(t,e){var n=e.lineWidth||1;return"hollow"===t?{lineWidth:n+1}:{fillOpacity:(e.fillOpacity||e.opacity||1)-.08}},getSelectedCfg:function(t,e){return e&&e.style?e.style:this.getActiveCfg(t,e)}});r.registerShape("polygon","polygon",{draw:function(t,e){if(!i.isEmpty(t.points)){var n=o(t),r=s(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})}},getMarkerCfg:function(t){return i.mix({symbol:"square",radius:4},o(t))}}),r.registerShape("polygon","hollow",{draw:function(t,e){if(!i.isEmpty(t.points)){var n=function(t){var e=a.shape.hollowPolygon;return i.mix({},e,{stroke:t.color,strokeOpacity:t.opacity},t.style)}(t),r=s(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})}},getMarkerCfg:function(t){return i.mix({symbol:"square",radius:4},o(t))}}),t.exports=u},function(t,e,n){var i=n(0),r=n(9),a=n(5);function o(t){i.isArray(t)||(t=[t]);var e=t[0],n=t[t.length-1],r=t.length>1?t[1]:e;return{min:e,max:n,min1:r,max1:t.length>3?t[3]:n,median:t.length>2?t[2]:r}}function s(t,e,n){var r,a,s=[];return i.isArray(e)?r=[[t-n/2,(a=o(e)).max],[t+n/2,a.max],[t,a.max],[t,a.max1],[t-n/2,a.min1],[t-n/2,a.max1],[t+n/2,a.max1],[t+n/2,a.min1],[t,a.min1],[t,a.min],[t-n/2,a.min],[t+n/2,a.min],[t-n/2,a.median],[t+n/2,a.median]]:(e=e||.5,r=[[(a=o(t)).min,e-n/2],[a.min,e+n/2],[a.min,e],[a.min1,e],[a.min1,e-n/2],[a.min1,e+n/2],[a.max1,e+n/2],[a.max1,e-n/2],[a.max1,e],[a.max,e],[a.max,e-n/2],[a.max,e+n/2],[a.median,e-n/2],[a.median,e+n/2]]),function(t,e){i.each(t,function(t){e.push({x:t[0],y:t[1]})})}(r,s),s}function u(t,e,n){var r=function(t){i.isArray(t)||(t=[t]);var e=t.sort(function(t,e){return t<e?1:-1}),n=e.length;if(n<4)for(var r=e[n-1],a=0;a<4-n;a++)e.push(r);return e}(e);return[{x:t,y:r[0]},{x:t,y:r[1]},{x:t-n/2,y:r[2]},{x:t-n/2,y:r[1]},{x:t+n/2,y:r[1]},{x:t+n/2,y:r[2]},{x:t,y:r[2]},{x:t,y:r[3]}]}var l=r.registerFactory("schema",{defaultShapeType:"",getActiveCfg:function(t,e){if("box"===t)return{lineWidth:(e.lineWidth||1)+1};var n=e.fillOpacity||e.opacity||1;return{fillOpacity:n-.15,strokeOpacity:n-.15}},getSelectedCfg:function(t,e){return e&&e.style?e.style:this.getActiveCfg(t,e)}});r.registerShape("schema","box",{getPoints:function(t){return s(t.x,t.y,t.size)},draw:function(t,e){var n=function(t){var e=a.shape.schema;return i.mix({},e,{stroke:t.color,strokeOpacity:t.opacity},t.style)}(t),r=function(t){return[["M",t[0].x,t[0].y],["L",t[1].x,t[1].y],["M",t[2].x,t[2].y],["L",t[3].x,t[3].y],["M",t[4].x,t[4].y],["L",t[5].x,t[5].y],["L",t[6].x,t[6].y],["L",t[7].x,t[7].y],["L",t[4].x,t[4].y],["Z"],["M",t[8].x,t[8].y],["L",t[9].x,t[9].y],["M",t[10].x,t[10].y],["L",t[11].x,t[11].y],["M",t[12].x,t[12].y],["L",t[13].x,t[13].y]]}(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return{symbol:function(t,e,n){var i=s(t,[e-6,e-3,e,e+3,e+6],n);return[["M",i[0].x+1,i[0].y],["L",i[1].x-1,i[1].y],["M",i[2].x,i[2].y],["L",i[3].x,i[3].y],["M",i[4].x,i[4].y],["L",i[5].x,i[5].y],["L",i[6].x,i[6].y],["L",i[7].x,i[7].y],["L",i[4].x,i[4].y],["Z"],["M",i[8].x,i[8].y],["L",i[9].x,i[9].y],["M",i[10].x+1,i[10].y],["L",i[11].x-1,i[11].y],["M",i[12].x,i[12].y],["L",i[13].x,i[13].y]]},radius:6,lineWidth:1,stroke:t.color}}}),r.registerShape("schema","candle",{getPoints:function(t){return u(t.x,t.y,t.size)},draw:function(t,e){var n=function(t){var e=a.shape.schema;return i.mix({},e,{fill:t.color,stroke:t.color,fillOpacity:t.opacity},t.style)}(t),r=function(t){return[["M",t[0].x,t[0].y],["L",t[1].x,t[1].y],["M",t[2].x,t[2].y],["L",t[3].x,t[3].y],["L",t[4].x,t[4].y],["L",t[5].x,t[5].y],["Z"],["M",t[6].x,t[6].y],["L",t[7].x,t[7].y]]}(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return{symbol:function(t,e,n){var i=u(t,e=[e+7.5,e+3,e-3,e-7.5],n);return[["M",i[0].x,i[0].y],["L",i[1].x,i[1].y],["M",i[2].x,i[2].y],["L",i[3].x,i[3].y],["L",i[4].x,i[4].y],["L",i[5].x,i[5].y],["Z"],["M",i[6].x,i[6].y],["L",i[7].x,i[7].y]]},lineWidth:1,stroke:t.color,fill:t.color,radius:6}}}),t.exports=l},function(t,e,n){var i=n(0),r=n(9),a=n(5),o=i.PathUtil;function s(t){var e=a.shape.venn;return i.mix({},e,{stroke:t.color,fill:t.color,fillOpacity:t.opacity},t.style)}var u=r.registerFactory("venn",{defaultShapeType:"venn",getDefaultPoints:function(t){var e=[];return i.each(t.x,function(n,i){var r=t.y[i];e.push({x:n,y:r})}),e},getActiveCfg:function(t,e){var n=e.lineWidth||1;return"hollow"===t?{lineWidth:n+1}:{fillOpacity:(e.fillOpacity||e.opacity||1)-.08}},getSelectedCfg:function(t,e){return e&&e.style?e.style:this.getActiveCfg(t,e)}});r.registerShape("venn","venn",{draw:function(t,e){var n=t.origin._origin.path,r=s(t),a=o.parsePathString(n);return e.addShape("path",{attrs:i.mix(r,{path:a})})},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4},s(t))}}),r.registerShape("venn","hollow",{draw:function(t,e){var n=t.origin._origin.path,r=function(t){var e=a.shape.hollowVenn;return i.mix({},e,{stroke:t.color,strokeOpacity:t.opacity},t.style)}(t),s=o.parsePathString(n);return e.addShape("path",{attrs:i.mix(r,{path:s})})},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4},s(t))}}),t.exports=u},function(t,e,n){var i=n(0),r=n(9),a=n(5),o=n(22);function s(t){var e=a.shape.venn;return i.mix({},e,{stroke:t.color,fill:t.color,fillOpacity:t.opacity},t.style)}function u(t){var e=a.shape.hollowVenn;return i.mix({},e,{stroke:t.color,strokeOpacity:t.opacity},t.style)}function l(t){for(var e=[],n=0;n<t.length;n++){var i=t[n];if(i){var r=0===n?"M":"L";e.push([r,i.x,i.y])}}var a=t[0];return e.push(["L",a.x,a.y]),e.push(["z"]),e}function c(t){for(var e=t.length/2,n=[],i=[],r=0;r<t.length;r++)r<e?n.push(t[r]):i.push(t[r]);var a=o.getSplinePath(n,!1),s=o.getSplinePath(i,!1);a.push(["L",i[0].x,i[0].y]),s.shift();var u=a.concat(s);return u.push(["L",n[0].x,n[0].y]),u.push(["z"]),u}var h=r.registerFactory("violin",{defaultShapeType:"violin",getDefaultPoints:function(t){var e=t.size/2,n=[],r=function(t){var e=Math.max.apply(null,t);return t.map(function(t){return t/e})}(t._size);return i.each(t.y,function(i,a){var o=r[a]*e,s=0===a,u=a===t.y.length-1;n.push({isMin:s,isMax:u,x:t.x-o,y:i}),n.unshift({isMin:s,isMax:u,x:t.x+o,y:i})}),n},getActiveCfg:function(t,e){var n=e.lineWidth||1;return"hollow"===t?{lineWidth:n+1}:{fillOpacity:(e.fillOpacity||e.opacity||1)-.08}},getSelectedCfg:function(t,e){return e&&e.style?e.style:this.getActiveCfg(t,e)}});r.registerShape("violin","violin",{draw:function(t,e){var n=s(t),r=l(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4},s(t))}}),r.registerShape("violin","smooth",{draw:function(t,e){var n=s(t),r=c(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4},s(t))}}),r.registerShape("violin","hollow",{draw:function(t,e){var n=u(t),r=l(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4},u(t))}}),r.registerShape("violin","smoothHollow",{draw:function(t,e){var n=u(t),r=c(t.points);return r=this.parsePath(r),e.addShape("path",{attrs:i.mix(n,{path:r})})},getMarkerCfg:function(t){return i.mix({symbol:"circle",radius:4},u(t))}}),t.exports=h},function(t,e,n){var i=n(0);t.exports=function(t){return i.isArray(t)?t:i.isString(t)?t.split("*"):[t]}},function(t,e,n){var i=n(0).MatrixUtil.vec2;t.exports={catmullRom2bezier:function(t,e,n){for(var r=!!e,a=[],o=0,s=t.length;o<s;o+=2)a.push([t[o],t[o+1]]);for(var u,l,c,h=function(t,e,n,r){var a,o,s,u,l=[],c=!!r;if(c){s=[1/0,1/0],u=[-1/0,-1/0];for(var h=0,f=t.length;h<f;h++){var p=t[h];s=i.min([],s,p),u=i.max([],u,p)}s=i.min([],s,r[0]),u=i.max([],u,r[1])}for(var g=0,d=t.length;g<d;g++){var v=t[g];if(n)a=t[g?g-1:d-1],o=t[(g+1)%d];else{if(0===g||g===d-1){l.push(v);continue}a=t[g-1],o=t[g+1]}var y=[];y=i.sub(y,o,a),y=i.scale(y,y,e);var m=i.distance(v,a),x=i.distance(v,o),b=m+x;0!==b&&(m/=b,x/=b);var _=i.scale([],y,-m),w=i.scale([],y,x),M=i.add([],v,_),S=i.add([],v,w);c&&(M=i.max([],M,s),M=i.min([],M,u),S=i.max([],S,s),S=i.min([],S,u)),l.push(M),l.push(S)}return n&&l.push(l.shift()),l}(a,.4,r,n),f=a.length,p=[],g=0;g<f-1;g++)u=h[2*g],l=h[2*g+1],c=a[g+1],p.push(["C",u[0],u[1],l[0],l[1],c[0],c[1]]);return r&&(u=h[f],l=h[f+1],c=a[0],p.push(["C",u[0],u[1],l[0],l[1],c[0],c[1]])),p}}},function(t,e,n){var i=n(8),r=n(0),a=n(519),o=a.venn,s=a.scaleSolution,u=a.circlePath,l=a.intersectionAreaPath,c=a.computeTextCentres;n(300);var h=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="venn",e.shapeType="venn",e.generatePoints=!0,e},n._initAttrs=function(){var e=this.get("attrOptions"),n=this.get("labelCfg"),i=this.get("data"),a=e.size?e.size.field:"size",h=n?n.fields[0]:"sets";this.set("labelCfg",null),i.forEach(function(t){t.sets=t[h],t.size=t[a]});var f=o(i),p=this.get("coord"),g=[Math.min(p.x.end,p.x.start),Math.max(p.x.end,p.x.start)],d=[Math.min(p.y.end,p.y.start),Math.max(p.y.end,p.y.start)],v=g[1]-g[0],y=d[1]-d[0],m=this.get("styleOptions"),x=m&&r.isObject(m.style)?m.style.padding:0;r.isFinite(x)||(x=0);var b=s(f,v,y,x),_=c(b,i);i.forEach(function(t){var e=t.sets,n=e.join(",");if(t.id=n,1===e.length){var i=b[n];t.path=u(i.x,i.y,i.radius),r.assign(t,i)}else{var a=e.map(function(t){return b[t]}),o=l(a);/[zZ]$/.test(o)||(o+="Z"),t.path=o;var s=_[n]||{x:0,y:0};r.assign(t,s)}}),this.position("x*y"),t.prototype._initAttrs.call(this)},n.paint=function(){t.prototype.paint.call(this);var e=this,n=e.get("dataArray"),i=e.get("shapeContainer");n.forEach(function(t){var n=e.getDrawCfg(t[0]),a=n.origin._origin;i.addShape("text",{attrs:r.mix({},{x:a.x,y:a.y,text:a.label||"",fontSize:18,fill:"hollow"===n.shape?n.color:"#666",textAlign:"center",textBaseline:"middle"},n.style?n.style.textStyle:{})})})},e}(i);i.Venn=h,t.exports=h},function(t,e,n){function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var a=n(8),o=n(0),s=n(65);n(301);var u=function(t){i(n,t);var e=n.prototype;function n(e){var n;return n=t.call(this,e)||this,o.assign(r(r(n)),s),n}return e.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.type="violin",e.shapeType="violin",e.generatePoints=!0,e},e.createShapePointsCfg=function(e){var n=t.prototype.createShapePointsCfg.call(this,e);n.size=this.getNormalizedSize(e);var i=this.get("_sizeField");return n._size=e._origin[i],n},e.clearInner=function(){t.prototype.clearInner.call(this),this.set("defaultSize",null)},e._initAttrs=function(){var e=this.get("attrOptions"),n=e.size?e.size.field:this.get("_sizeField")?this.get("_sizeField"):"size";this.set("_sizeField",n),delete e.size,t.prototype._initAttrs.call(this)},n}(a),l=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e.prototype.getDefaultCfg=function(){var e=t.prototype.getDefaultCfg.call(this);return e.hasDefaultAdjust=!0,e.adjusts=[{type:"dodge"}],e},e}(u);u.Dodge=l,a.Violin=u,a.ViolinDodge=l,t.exports=u},function(t,e,n){var i,r,a=n(0),o=n(120),s=a.deepMix({},o,{background:{fill:"#1F1F1F",radius:2},plotBackground:{fill:"#1F1F1F"},axis:{top:{label:{textStyle:{fill:"#A6A6A6"}},line:{stroke:"#737373"},tickLine:{stroke:"#737373"}},bottom:{label:{textStyle:{fill:"#A6A6A6"}},line:{stroke:"#737373"},tickLine:{stroke:"#737373"}},left:{label:{textStyle:{fill:"#A6A6A6"}},grid:{lineStyle:{stroke:"#404040"}}},right:{label:{textStyle:{fill:"#A6A6A6"}},grid:{lineStyle:{stroke:"#404040"}}},circle:{label:{textStyle:{fill:"#A6A6A6"}},line:{stroke:"#737373"},tickLine:{stroke:"#737373"},grid:{lineStyle:{stroke:"#404040"}}},radius:{label:{textStyle:{fill:"#A6A6A6"}},line:{stroke:"#737373"},tickLine:{stroke:"#737373"},grid:{lineStyle:{stroke:"#404040"}}},helix:{line:{stroke:"#737373"},tickLine:{stroke:"#737373"}}},label:{textStyle:{fill:"#A6A6A6"}},legend:{right:{textStyle:{fill:"#737373"},unCheckColor:"#bfbfbf"},left:{textStyle:{fill:"#737373"},unCheckColor:"#bfbfbf"},top:{textStyle:{fill:"#737373"},unCheckColor:"#bfbfbf"},bottom:{textStyle:{fill:"#737373"},unCheckColor:"#bfbfbf"},html:(i={},i["g2-legend"]={color:"#D9D9D9"},i),gradient:{textStyle:{fill:"#D9D9D9"},lineStyle:{stroke:"#404040"}}},tooltip:(r={},r["g2-tooltip"]={color:"#D9D9D9"},r),tooltipCrosshairsRect:{type:"rect",style:{fill:"#fff",opacity:.1}},tooltipCrosshairsLine:{style:{stroke:"rgba(255, 255, 255, 0.45)"}},guide:{line:{text:{style:{fill:"#A6A6A6"}}},text:{style:{fill:"#A6A6A6"}},region:{style:{lineWidth:0,fill:"#000",fillOpacity:.04}}}});t.exports=s},function(t,e,n){var i=n(0),r=n(5);setTimeout(function(){if(r.trackable){var t=new Image,e=i.mix({},r.trackingInfo,{pg:document.URL,r:(new Date).getTime(),g2:!0,version:r.version,page_type:"syslog"}),n=encodeURIComponent(JSON.stringify([e]));t.src="https://kcart.alipay.com/web/bi.do?BIProfile=merge&d="+n}},3e3)},function(t,e,n){var i=n(1),r=n(124),a=n(123),o=n(312),s=n(317),u=function t(e){t.superclass.constructor.call(this,e)};u.CFG={eventEnable:!0,width:null,height:null,widthCanvas:null,heightCanvas:null,widthStyle:null,heightStyle:null,containerDOM:null,canvasDOM:null,pixelRatio:null,renderer:"canvas"},i.extend(u,a),i.augment(u,{init:function(){u.superclass.init.call(this),this._setGlobalParam(),this._setContainer(),this._initPainter(),this._scale(),this.get("eventEnable")&&this._registEvents()},getEmitter:function(t,e){if(t){if(!i.isEmpty(t._getEvents()))return t;var n=t.get("parent");if(n&&!e.propagationStopped)return this.getEmitter(n,e)}},_getEventObj:function(t,e,n,i){var a=new r(t,e,!0,!0);return a.x=n.x,a.y=n.y,a.clientX=e.clientX,a.clientY=e.clientY,a.currentTarget=i,a.target=i,a},_triggerEvent:function(t,e){var n,i=this.getPointByClient(e.clientX,e.clientY),r=this.getShape(i.x,i.y,e),a=this.get("el");if("mousemove"===t){var o=this.get("preShape");if(o&&o!==r){var s=this._getEventObj("mouseleave",e,i,o);(n=this.getEmitter(o,e))&&n.emit("mouseleave",s),a.style.cursor="default"}if(r){var u=this._getEventObj("mousemove",e,i,r);if((n=this.getEmitter(r,e))&&n.emit("mousemove",u),o!==r){var l=this._getEventObj("mouseenter",e,i,r);n&&n.emit("mouseenter",l,e)}}else{var c=this._getEventObj("mousemove",e,i,this);this.emit("mousemove",c)}this.set("preShape",r)}else{var h=this._getEventObj(t,e,i,r||this);(n=this.getEmitter(r,e))&&n!==this&&n.emit(t,h),this.emit(t,h)}r&&!r.get("destroyed")&&(a.style.cursor=r.attr("cursor")||"default")},_registEvents:function(){var t=this,e=t.get("el");i.each(["mouseout","mouseover","mousemove","mousedown","mouseleave","mouseup","click","dblclick"],function(n){e.addEventListener(n,function(e){t._triggerEvent(n,e)},!1)}),e.addEventListener("touchstart",function(e){i.isEmpty(e.touches)||t._triggerEvent("touchstart",e.touches[0])},!1),e.addEventListener("touchmove",function(e){i.isEmpty(e.touches)||t._triggerEvent("touchmove",e.touches[0])},!1),e.addEventListener("touchend",function(e){i.isEmpty(e.changedTouches)||t._triggerEvent("touchend",e.changedTouches[0])},!1)},_scale:function(){var t=this.get("pixelRatio");this.scale(t,t)},_setGlobalParam:function(){this.get("pixelRatio")||this.set("pixelRatio",i.getRatio());var t=s[this.get("renderer")||"canvas"];this._cfg.renderer=t,this._cfg.canvas=this;var e=new o(this);this._cfg.timeline=e},_setContainer:function(){var t=this.get("containerId"),e=this.get("containerDOM");e||(e=document.getElementById(t),this.set("containerDOM",e)),i.modifyCSS(e,{position:"relative"})},_initPainter:function(){var t=this.get("containerDOM"),e=new this._cfg.renderer.painter(t);this._cfg.painter=e,this._cfg.canvasDOM=this._cfg.el=e.canvas,this.changeSize(this.get("width"),this.get("height"))},_resize:function(){var t=this.get("canvasDOM"),e=this.get("widthCanvas"),n=this.get("heightCanvas"),i=this.get("widthStyle"),r=this.get("heightStyle");t.style.width=i,t.style.height=r,t.setAttribute("width",e),t.setAttribute("height",n)},getWidth:function(){var t=this.get("pixelRatio");return this.get("width")*t},getHeight:function(){var t=this.get("pixelRatio");return this.get("height")*t},changeSize:function(t,e){var n=this.get("pixelRatio"),i=t*n,r=e*n;this.set("widthCanvas",i),this.set("heightCanvas",r),this.set("widthStyle",t+"px"),this.set("heightStyle",e+"px"),this.set("width",t),this.set("height",e),this._resize()},getPointByClient:function(t,e){var n=this.get("el"),i=this.get("pixelRatio")||1,r=n.getBoundingClientRect();return{x:(t-r.left)*i,y:(e-r.top)*i}},getClientByPoint:function(t,e){var n=this.get("el").getBoundingClientRect(),i=this.get("pixelRatio")||1;return{clientX:t/i+n.left,clientY:e/i+n.top}},draw:function(){this._cfg.painter.draw(this)},getShape:function(t,e,n){return 3===arguments.length&&this._cfg.renderer.getShape?this._cfg.renderer.getShape.call(this,t,e,n):u.superclass.getShape.call(this,t,e)},_drawSync:function(){this._cfg.painter.drawSync(this)},destroy:function(){var t=this._cfg,e=t.containerDOM,n=t.canvasDOM;n&&e&&e.removeChild(n),t.timeline.stop(),u.superclass.destroy.call(this)}}),t.exports=u},function(t,e,n){var i=n(1),r={delay:"delay",rotate:"rotate"},a={fill:"fill",stroke:"stroke",fillStyle:"fillStyle",strokeStyle:"strokeStyle"};t.exports={animate:function(t,e,n,o,s){void 0===s&&(s=0);this.set("animating",!0);var u=this.get("timeline");u||(u=this.get("canvas").get("timeline"),this.setSilent("timeline",u));var l=this.get("animators")||[];u._timer||u.initTimer(),i.isNumber(o)&&(s=o,o=null),i.isFunction(n)?(o=n,n="easeLinear"):n=n||"easeLinear";var c=function(t,e){var n={matrix:null,attrs:{}},o=e._attrs;for(var s in t)if("transform"===s)n.matrix=i.transform(e.getMatrix(),t[s]);else if("rotate"===s)n.matrix=i.transform(e.getMatrix(),[["r",t[s]]]);else if("matrix"===s)n.matrix=t[s];else{if(a[s]&&/^[r,R,L,l]{1}[\s]*\(/.test(t[s]))continue;r[s]||o[s]===t[s]||(n.attrs[s]=t[s])}return n}(t,this),h={fromAttrs:function(t,e){var n={},i=e._attrs;for(var r in t.attrs)n[r]=i[r];return n}(c,this),toAttrs:c.attrs,fromMatrix:i.clone(this.getMatrix()),toMatrix:c.matrix,duration:e,easing:n,callback:o,delay:s,startTime:u.getTime(),id:i.uniqueId()};l.length>0?l=function(t,e){var n=e.delay,r=Object.prototype.hasOwnProperty;return i.each(e.toAttrs,function(e,a){i.each(t,function(t){n<t.startTime+t.duration&&r.call(t.toAttrs,a)&&(delete t.toAttrs[a],delete t.fromAttrs[a])})}),e.toMatrix&&i.each(t,function(t){n<t.startTime+t.duration&&t.toMatrix&&delete t.toMatrix}),t}(l,h):u.addAnimator(this),l.push(h),this.setSilent("animators",l),this.setSilent("pause",{isPaused:!1})},stopAnimate:function(){var t=this,e=this.get("animators");i.each(e,function(e){t.attr(e.toAttrs),e.toMatrix&&t.attr("matrix",e.toMatrix),e.callback&&e.callback()}),this.setSilent("animating",!1),this.setSilent("animators",[])},pauseAnimate:function(){var t=this.get("timeline");return this.setSilent("pause",{isPaused:!0,pauseTime:t.getTime()}),this},resumeAnimate:function(){var t=this.get("timeline").getTime(),e=this.get("animators"),n=this.get("pause").pauseTime;return i.each(e,function(e){e.startTime=e.startTime+(t-n),e._paused=!1,e._pauseTime=null}),this.setSilent("pause",{isPaused:!1}),this.setSilent("animators",e),this}}},function(t,e,n){var i=n(1);t.exports={canFill:!1,canStroke:!1,initAttrs:function(t){return this._attrs={opacity:1,fillOpacity:1,strokeOpacity:1,matrix:[1,0,0,0,1,0,0,0,1]},this.attr(i.assign(this.getDefaultAttrs(),t)),this},getDefaultAttrs:function(){return{}},attr:function(t,e){if(0===arguments.length)return this._attrs;if(i.isObject(t)){for(var n in t)this._setAttr(n,t[n]);return this.clearBBox(),this._cfg.hasUpdate=!0,this}return 2===arguments.length?(this._setAttr(t,e),this.clearBBox(),this._cfg.hasUpdate=!0,this):this._attrs[t]},_setAttr:function(t,e){var n=this._attrs;n[t]=e,"fill"!==t&&"stroke"!==t?"opacity"!==t?"clip"===t&&e?this._setClip(e):"path"===t&&this._afterSetAttrPath?this._afterSetAttrPath(e):"transform"!==t?"rotate"===t&&this.rotateAtStart(e):this.transform(e):n.globalAlpha=e:n[t+"Style"]=e},clearBBox:function(){this.setSilent("box",null)},hasFill:function(){return this.canFill&&this._attrs.fillStyle},hasStroke:function(){return this.canStroke&&this._attrs.strokeStyle},_setClip:function(t){t._cfg.renderer=this._cfg.renderer,t._cfg.canvas=this._cfg.canvas,t._cfg.parent=this._cfg.parent,t.hasFill=function(){return!0}}}},function(t,e,n){var i=n(1),r=n(69),a={arc:n(43),ellipse:n(132),line:n(44)},o=i.createDom('<canvas width="500" height="500"></canvas>').getContext("2d");function s(t,e,n){return n.createPath(o),o.isPointInPath(t,e)}var u={arc:function(t,e){var n=this._attrs,i=n.x,a=n.y,o=n.r,s=n.startAngle,u=n.endAngle,l=n.clockwise,c=this.getHitLineWidth();return!!this.hasStroke()&&r.arcline(i,a,o,s,u,l,c,t,e)},circle:function(t,e){var n=this._attrs,i=n.x,a=n.y,o=n.r,s=this.getHitLineWidth(),u=this.hasFill(),l=this.hasStroke();return u&&l?r.circle(i,a,o,t,e)||r.arcline(i,a,o,0,2*Math.PI,!1,s,t,e):u?r.circle(i,a,o,t,e):!!l&&r.arcline(i,a,o,0,2*Math.PI,!1,s,t,e)},dom:function(t,e){if(!this._cfg.el)return!1;var n=this._cfg.el.getBBox();return r.box(n.x,n.x+n.width,n.y,n.y+n.height,t,e)},ellipse:function(t,e){var n=this._attrs,a=this.hasFill(),o=this.hasStroke(),s=n.x,u=n.y,l=n.rx,c=n.ry,h=this.getHitLineWidth(),f=l>c?l:c,p=l>c?1:l/c,g=l>c?c/l:1,d=[t,e,1],v=[1,0,0,0,1,0,0,0,1];i.mat3.scale(v,v,[p,g]),i.mat3.translate(v,v,[s,u]);var y=i.mat3.invert([],v);return i.vec3.transformMat3(d,d,y),a&&o?r.circle(0,0,f,d[0],d[1])||r.arcline(0,0,f,0,2*Math.PI,!1,h,d[0],d[1]):a?r.circle(0,0,f,d[0],d[1]):!!o&&r.arcline(0,0,f,0,2*Math.PI,!1,h,d[0],d[1])},fan:function(t,e){var n=this,o=n.hasFill(),s=n.hasStroke(),u=n._attrs,l=u.x,c=u.y,h=u.rs,f=u.re,p=u.startAngle,g=u.endAngle,d=u.clockwise,v=[t-l,e-c],y=i.vec2.angleTo([1,0],v);function m(){var t=a.arc.nearAngle(y,p,g,d);if(i.isNumberEqual(y,t)){var e=i.vec2.squaredLength(v);if(h*h<=e&&e<=f*f)return!0}return!1}function x(){var i=n.getHitLineWidth(),a={x:Math.cos(p)*h+l,y:Math.sin(p)*h+c},o={x:Math.cos(p)*f+l,y:Math.sin(p)*f+c},s={x:Math.cos(g)*h+l,y:Math.sin(g)*h+c},u={x:Math.cos(g)*f+l,y:Math.sin(g)*f+c};return!!(r.line(a.x,a.y,o.x,o.y,i,t,e)||r.line(s.x,s.y,u.x,u.y,i,t,e)||r.arcline(l,c,h,p,g,d,i,t,e)||r.arcline(l,c,f,p,g,d,i,t,e))}return o&&s?m()||x():o?m():!!s&&x()},image:function(t,e){var n=this._attrs;if(this.get("toDraw")||!n.img)return!1;this._cfg.attrs&&this._cfg.attrs.img===n.img||this._setAttrImg();var i=n.x,a=n.y,o=n.width,s=n.height;return r.rect(i,a,o,s,t,e)},line:function(t,e){var n=this._attrs,i=n.x1,a=n.y1,o=n.x2,s=n.y2,u=this.getHitLineWidth();return!!this.hasStroke()&&r.line(i,a,o,s,u,t,e)},path:function(t,e){var n=this,r=n.get("segments"),a=n.hasFill(),o=n.hasStroke();function u(){if(!i.isEmpty(r)){for(var a=n.getHitLineWidth(),o=0,s=r.length;o<s;o++)if(r[o].isInside(t,e,a))return!0;return!1}}return a&&o?s(t,e,n)||u():a?s(t,e,n):!!o&&u()},marker:function(t,e){var n=this._attrs,i=n.x,a=n.y,o=n.radius||n.r,s=this.getHitLineWidth();return r.circle(i,a,o+s/2,t,e)},polygon:function(t,e){var n=this,i=n.hasFill(),a=n.hasStroke();function o(){var i=n._attrs.points;if(i.length<2)return!1;var a=n.getHitLineWidth(),o=i.slice(0);return i.length>=3&&o.push(i[0]),r.polyline(o,a,t,e)}return i&&a?s(t,e,n)||o():i?s(t,e,n):!!a&&o()},polyline:function(t,e){var n=this._attrs;if(this.hasStroke()){var i=n.points;if(i.length<2)return!1;var a=n.lineWidth;return r.polyline(i,a,t,e)}return!1},rect:function(t,e){var n=this,i=n.hasFill(),a=n.hasStroke();function o(){var i=n._attrs,a=i.x,o=i.y,s=i.width,u=i.height,l=i.radius,c=n.getHitLineWidth();if(0===l){var h=c/2;return r.line(a-h,o,a+s+h,o,c,t,e)||r.line(a+s,o-h,a+s,o+u+h,c,t,e)||r.line(a+s+h,o+u,a-h,o+u,c,t,e)||r.line(a,o+u+h,a,o-h,c,t,e)}return r.line(a+l,o,a+s-l,o,c,t,e)||r.line(a+s,o+l,a+s,o+u-l,c,t,e)||r.line(a+s-l,o+u,a+l,o+u,c,t,e)||r.line(a,o+u-l,a,o+l,c,t,e)||r.arcline(a+s-l,o+l,l,1.5*Math.PI,2*Math.PI,!1,c,t,e)||r.arcline(a+s-l,o+u-l,l,0,.5*Math.PI,!1,c,t,e)||r.arcline(a+l,o+u-l,l,.5*Math.PI,Math.PI,!1,c,t,e)||r.arcline(a+l,o+l,l,Math.PI,1.5*Math.PI,!1,c,t,e)}return i&&a?s(t,e,n)||o():i?s(t,e,n):!!a&&o()},text:function(t,e){var n=this.getBBox();if(this.hasFill()||this.hasStroke())return r.box(n.minX,n.maxX,n.minY,n.maxY,t,e)}};t.exports={isPointInPath:function(t,e){var n=u[this.type];return!!n&&n.call(this,t,e)}}},function(t,e,n){var i=n(1),r=n(70),a=n(95),o=n(189),s=n(434),u=s.interpolate,l=s.interpolateArray,c=function(t){this._animators=[],this._current=0,this._timer=null,this.canvas=t};function h(t,e,n){var a,s=e.startTime;if(n<s+e.delay||e.isPaused)return!1;var c=e.duration,h=e.easing;if(n=n-s-e.delay,e.toAttrs.repeat)a=n%c/c,a=o[h](a);else{if(!((a=n/c)<1))return t.attr(e.toAttrs),e.toMatrix&&t.setMatrix(e.toMatrix),!0;a=o[h](a)}return function(t,e,n){var a={},o=e.toAttrs,s=e.fromAttrs,c=e.toMatrix;if(!t.get("destroyed")){var h;for(var f in o)if(!i.isEqual(s[f],o[f]))if("path"===f){var p=o[f],g=s[f];p.length>g.length?(p=r.parsePathString(o[f]),g=r.parsePathString(s[f]),g=r.fillPathByDiff(g,p),g=r.formatPath(g,p),e.fromAttrs.path=g,e.toAttrs.path=p):e.pathFormatted||(p=r.parsePathString(o[f]),g=r.parsePathString(s[f]),g=r.formatPath(g,p),e.fromAttrs.path=g,e.toAttrs.path=p,e.pathFormatted=!0),a[f]=[];for(var d=0;d<p.length;d++){for(var v=p[d],y=g[d],m=[],x=0;x<v.length;x++)i.isNumber(v[x])&&y&&i.isNumber(y[x])?(h=u(y[x],v[x]),m.push(h(n))):m.push(v[x]);a[f].push(m)}}else h=u(s[f],o[f]),a[f]=h(n);if(c){var b=l(e.fromMatrix,c)(n);t.setMatrix(b)}t.attr(a)}}(t,e,a),!1}i.augment(c,{initTimer:function(){var t,e,n,i=this,r=this;r._timer=a.timer(function(a){if(r._current=a,i._animators.length>0){for(var o=i._animators.length-1;o>=0;o--)if((t=i._animators[o]).get("destroyed"))r.removeAnimator(o);else{if(!t.get("pause").isPaused)for(var s=(e=t.get("animators")).length-1;s>=0;s--)n=e[s],h(t,n,a)&&(e.splice(s,1),!1,n.callback&&n.callback());0===e.length&&r.removeAnimator(o)}i.canvas.draw()}})},addAnimator:function(t){this._animators.push(t)},removeAnimator:function(t){this._animators.splice(t,1)},isAnimating:function(){return!!this._animators.length},stop:function(){this._timer&&this._timer.stop()},stopAllAnimations:function(){this._animators.forEach(function(t){t.stopAnimate()}),this._animators=[],this.canvas.draw()},getTime:function(){return this._current}}),t.exports=c},function(t,e,n){var i=n(1);function r(t){return 1===t[0]&&0===t[1]&&0===t[3]&&1===t[4]&&0===t[6]&&0===t[7]}function a(t){return 0===t[1]&&0===t[3]&&0===t[6]&&0===t[7]}function o(t,e){r(e)||(a(e)?(t[0]*=e[0],t[4]*=e[4]):i.mat3.multiply(t,t,e))}t.exports={initTransform:function(){},resetMatrix:function(){this.attr("matrix",[1,0,0,0,1,0,0,0,1])},translate:function(t,e){var n=this._attrs.matrix;return i.mat3.translate(n,n,[t,e]),this.clearTotalMatrix(),this.attr("matrix",n),this},rotate:function(t){var e=this._attrs.matrix;return i.mat3.rotate(e,e,t),this.clearTotalMatrix(),this.attr("matrix",e),this},scale:function(t,e){var n=this._attrs.matrix;return i.mat3.scale(n,n,[t,e]),this.clearTotalMatrix(),this.attr("matrix",n),this},rotateAtStart:function(t){var e=this._attrs.x||this._cfg.attrs.x,n=this._attrs.y||this._cfg.attrs.y;return Math.abs(t)>2*Math.PI&&(t=t/180*Math.PI),this.transform([["t",-e,-n],["r",t],["t",e,n]])},move:function(t,e){var n=this.get("x")||0,i=this.get("y")||0;return this.translate(t-n,e-i),this.set("x",t),this.set("y",e),this},transform:function(t){var e=this,n=this._attrs.matrix;return i.each(t,function(t){switch(t[0]){case"t":e.translate(t[1],t[2]);break;case"s":e.scale(t[1],t[2]);break;case"r":e.rotate(t[1]);break;case"m":e.attr("matrix",i.mat3.multiply([],n,t[1])),e.clearTotalMatrix()}}),e},setTransform:function(t){return this.attr("matrix",[1,0,0,0,1,0,0,0,1]),this.transform(t)},getMatrix:function(){return this.attr("matrix")},setMatrix:function(t){return this.attr("matrix",t),this.clearTotalMatrix(),this},apply:function(t,e){var n;return n=e?this._getMatrixByRoot(e):this.attr("matrix"),i.vec3.transformMat3(t,t,n),this},_getMatrixByRoot:function(t){t=t||this;for(var e=this,n=[];e!==t;)n.unshift(e),e=e.get("parent");n.unshift(e);var r=[1,0,0,0,1,0,0,0,1];return i.each(n,function(t){i.mat3.multiply(r,t.attr("matrix"),r)}),r},getTotalMatrix:function(){var t=this._cfg.totalMatrix;if(!t){t=[1,0,0,0,1,0,0,0,1];var e=this._cfg.parent;if(e)o(t,e.getTotalMatrix());o(t,this.attr("matrix")),this._cfg.totalMatrix=t}return t},clearTotalMatrix:function(){},invert:function(t){var e=this.getTotalMatrix();if(a(e))t[0]/=e[0],t[1]/=e[4];else{var n=i.mat3.invert([],e);n&&i.vec3.transformMat3(t,t,n)}return this},resetTransform:function(t){var e=this.attr("matrix");r(e)||t.transform(e[0],e[1],e[3],e[4],e[6],e[7])}}},function(t,e,n){t.exports={painter:n(315)}},function(t,e,n){var i=n(1),r=n(316),a=["fillStyle","font","globalAlpha","lineCap","lineWidth","lineJoin","miterLimit","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","strokeStyle","textAlign","textBaseline","lineDash","lineDashOffset"],o=function(){function t(t){if(!t)return null;var e=i.uniqueId("canvas_"),n=i.createDom('<canvas id="'+e+'"></canvas>');return t.appendChild(n),this.type="canvas",this.canvas=n,this.context=n.getContext("2d"),this.toDraw=!1,this}var e=t.prototype;return e.beforeDraw=function(){var t=this.canvas;this.context&&this.context.clearRect(0,0,t.width,t.height)},e.draw=function(t){var e=this;e.animateHandler?e.toDraw=!0:function n(){e.animateHandler=i.requestAnimationFrame(function(){e.animateHandler=void 0,e.toDraw&&n()}),e.beforeDraw();try{e._drawGroup(t)}catch(t){console.warn("error in draw canvas, detail as:"),console.warn(t),e.toDraw=!1}e.toDraw=!1}()},e.drawSync=function(t){this.beforeDraw(),this._drawGroup(t)},e._drawGroup=function(t){if(!t._cfg.removed&&!t._cfg.destroyed&&t._cfg.visible){var e=t._cfg.children,n=null;this.setContext(t);for(var i=0;i<e.length;i++)n=e[i],e[i].isGroup?this._drawGroup(n):this._drawShape(n);this.restoreContext(t)}},e._drawShape=function(t){t._cfg.removed||t._cfg.destroyed||!t._cfg.visible||(this.setContext(t),t.drawInner(this.context),this.restoreContext(t),t._cfg.attrs=t._attrs,t._cfg.hasUpdate=!1)},e.setContext=function(t){var e=this.context,n=t._attrs.clip;e.save(),n&&(n.resetTransform(e),n.createPath(e),e.clip()),this.resetContext(t),t.resetTransform(e)},e.restoreContext=function(){this.context.restore()},e.resetContext=function(t){var e=this.context,n=t._attrs;if(!t.isGroup)for(var o in n)if(a.indexOf(o)>-1){var s=n[o];"fillStyle"===o&&(s=r.parseStyle(s,t,e)),"strokeStyle"===o&&(s=r.parseStyle(s,t,e)),"lineDash"===o&&e.setLineDash?i.isArray(s)?e.setLineDash(s):i.isString(s)&&e.setLineDash(s.split(" ")):e[o]=s}},t}();t.exports=o},function(t,e,n){var i=n(1),r=/[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/gi,a=/[^\s\,]+/gi,o=/^l\s*\(\s*([\d.]+)\s*\)\s*(.*)/i,s=/^r\s*\(\s*([\d.]+)\s*,\s*([\d.]+)\s*,\s*([\d.]+)\s*\)\s*(.*)/i,u=/^p\s*\(\s*([axyn])\s*\)\s*(.*)/i,l=/[\d.]+:(#[^\s]+|[^\)]+\))/gi,c={};function h(t,e){var n=t.match(l);i.each(n,function(t){t=t.split(":"),e.addColorStop(t[0],t[1])})}t.exports={parsePath:function(t){return t=t||[],i.isArray(t)?t:i.isString(t)?(t=t.match(r),i.each(t,function(e,n){if((e=e.match(a))[0].length>1){var r=e[0].charAt(0);e.splice(1,0,e[0].substr(1)),e[0]=r}i.each(e,function(t,n){isNaN(t)||(e[n]=+t)}),t[n]=e}),t):void 0},parseStyle:function(t,e,n){if(i.isString(t)){if("("===t[1]||"("===t[2]){if("l"===t[0])return function(t,e,n){var r,a,s=o.exec(t),u=i.mod(i.toRadian(parseFloat(s[1])),2*Math.PI),l=s[2],c=e.getBBox();u>=0&&u<.5*Math.PI?(r={x:c.minX,y:c.minY},a={x:c.maxX,y:c.maxY}):.5*Math.PI<=u&&u<Math.PI?(r={x:c.maxX,y:c.minY},a={x:c.minX,y:c.maxY}):Math.PI<=u&&u<1.5*Math.PI?(r={x:c.maxX,y:c.maxY},a={x:c.minX,y:c.minY}):(r={x:c.minX,y:c.maxY},a={x:c.maxX,y:c.minY});var f=Math.tan(u),p=f*f,g=(a.x-r.x+f*(a.y-r.y))/(p+1)+r.x,d=f*(a.x-r.x+f*(a.y-r.y))/(p+1)+r.y,v=n.createLinearGradient(r.x,r.y,g,d);return h(l,v),v}(t,e,n);if("r"===t[0])return function(t,e,n){var i=s.exec(t),r=parseFloat(i[1]),a=parseFloat(i[2]),o=parseFloat(i[3]),u=i[4];if(0===o){var c=u.match(l);return c[c.length-1].split(":")[1]}var f=e.getBBox(),p=f.maxX-f.minX,g=f.maxY-f.minY,d=Math.sqrt(p*p+g*g)/2,v=n.createRadialGradient(f.minX+p*r,f.minY+g*a,o*d,f.minX+p/2,f.minY+g/2,d);return h(u,v),v}(t,e,n);if("p"===t[0])return function(t,e,n){if(e.get("patternSource")&&e.get("patternSource")===t)return e.get("pattern");var i,r,a=u.exec(t),o=a[1],s=a[2];function l(){i=n.createPattern(r,o),e.setSilent("pattern",i),e.setSilent("patternSource",t)}switch(o){case"a":o="repeat";break;case"x":o="repeat-x";break;case"y":o="repeat-y";break;case"n":o="no-repeat";break;default:o="no-repeat"}return r=new Image,s.match(/^data:/i)||(r.crossOrigin="Anonymous"),r.src=s,r.complete?l():(r.onload=l,r.src=r.src),i}(t,e,n)}return t}},numberToColor:function(t){var e=c[t];if(!e){for(var n=t.toString(16),i=n.length;i<6;i++)n="0"+n;e="#"+n,c[t]=e}return e}}},function(t,e,n){t.exports={canvas:n(314),svg:n(325)}},function(t,e,n){var i=n(1),r=n(321),a=n(323),o=n(319),s=n(320),u=n(322),l=function(){function t(t){var e=document.createElementNS("http://www.w3.org/2000/svg","defs"),n=i.uniqueId("defs_");e.id=n,t.appendChild(e),this.children=[],this.defaultArrow={},this.el=e,this.canvas=t}var e=t.prototype;return e.find=function(t,e){for(var n=this.children,i=null,r=0;r<n.length;r++)if(n[r].match(t,e)){i=n[r].id;break}return i},e.findById=function(t){for(var e=this.children,n=null,i=0;i<e.length;i++)if(e[i].id===t){n=e[i];break}return n},e.add=function(t){this.children.push(t),t.canvas=this.canvas,t.parent=this},e.getDefaultArrow=function(t,e){var n=t.stroke||t.strokeStyle;if(this.defaultArrow[n])return this.defaultArrow[n].id;var i=new o(t,e);return this.defaultArrow[n]=i,this.el.appendChild(i.el),i.id},e.addGradient=function(t){var e=new r(t);return this.el.appendChild(e.el),this.add(e),e.id},e.addArrow=function(t,e){var n=new o(t,e);return this.el.appendChild(n.el),n.id},e.addShadow=function(t){var e=new a(t);return this.el.appendChild(e.el),this.add(e),e.id},e.addPattern=function(t){var e=new u(t);return this.el.appendChild(e.el),this.add(e),e.id},e.addClip=function(t){var e=new s(t);return this.el.appendChild(e.el),this.add(e),e.id},t}();t.exports=l},function(t,e,n){var i=n(1),r=function(){function t(t,e){var n=document.createElementNS("http://www.w3.org/2000/svg","marker"),r=i.uniqueId("marker_");n.setAttribute("id",r);var a=document.createElementNS("http://www.w3.org/2000/svg","path");return a.setAttribute("stroke","none"),a.setAttribute("fill",t.stroke||"#000"),n.appendChild(a),n.setAttribute("overflow","visible"),n.setAttribute("orient","auto-start-reverse"),this.el=n,this.child=a,this.id=r,this.cfg=t["marker-start"===e?"startArrow":"endArrow"],this.stroke=t.stroke||"#000",!0===this.cfg?this._setDefaultPath(e,a):this._setMarker(t.lineWidth,a),this}var e=t.prototype;return e.match=function(){return!1},e._setDefaultPath=function(t,e){var n=this.el;e.setAttribute("d","M0,0 L6,3 L0,6 L3,3Z"),n.setAttribute("refX",3),n.setAttribute("refY",3)},e._setMarker=function(t,e){var n=this.el,r=this.cfg.path,a=this.cfg.d;i.isArray(r)&&(r=r.map(function(t){return t.join(" ")}).join("")),e.setAttribute("d",r),n.appendChild(e),a&&n.setAttribute("refX",a/t)},e.update=function(t){var e=this.child;e.attr?e.attr("fill",t):e.setAttribute("fill",t)},t}();t.exports=r},function(t,e,n){var i=n(1),r=function(){function t(t){this.type="clip";var e=document.createElementNS("http://www.w3.org/2000/svg","clipPath");this.el=e,this.id=i.uniqueId("clip_"),e.id=this.id;var n=t._cfg.el;return e.appendChild(n.cloneNode(!0)),this.cfg=t,this}var e=t.prototype;return e.match=function(){return!1},e.remove=function(){var t=this.el;t.parentNode.removeChild(t)},t}();t.exports=r},function(t,e,n){var i=n(1),r=/^l\s*\(\s*([\d.]+)\s*\)\s*(.*)/i,a=/^r\s*\(\s*([\d.]+)\s*,\s*([\d.]+)\s*,\s*([\d.]+)\s*\)\s*(.*)/i,o=/[\d.]+:(#[^\s]+|[^\)]+\))/gi;function s(t){var e=t.match(o);if(!e)return"";var n="";return e.sort(function(t,e){return t=t.split(":"),e=e.split(":"),Number(t[0])-Number(e[0])}),i.each(e,function(t){t=t.split(":"),n+='<stop offset="'+t[0]+'" stop-color="'+t[1]+'"></stop>'}),n}var u=function(){function t(t){var e=null,n=i.uniqueId("gradient_");return"l"===t.toLowerCase()[0]?function(t,e){var n,a,o=r.exec(t),u=i.mod(i.toRadian(parseFloat(o[1])),2*Math.PI),l=o[2];u>=0&&u<.5*Math.PI?(n={x:0,y:0},a={x:1,y:1}):.5*Math.PI<=u&&u<Math.PI?(n={x:1,y:0},a={x:0,y:1}):Math.PI<=u&&u<1.5*Math.PI?(n={x:1,y:1},a={x:0,y:0}):(n={x:0,y:1},a={x:1,y:0});var c=Math.tan(u),h=c*c,f=(a.x-n.x+c*(a.y-n.y))/(h+1)+n.x,p=c*(a.x-n.x+c*(a.y-n.y))/(h+1)+n.y;e.setAttribute("x1",n.x),e.setAttribute("y1",n.y),e.setAttribute("x2",f),e.setAttribute("y2",p),e.innerHTML=s(l)}(t,e=document.createElementNS("http://www.w3.org/2000/svg","linearGradient")):function(t,e){var n=a.exec(t),i=parseFloat(n[1]),r=parseFloat(n[2]),o=parseFloat(n[3]),u=n[4];e.setAttribute("cx",i),e.setAttribute("cy",r),e.setAttribute("r",o),e.innerHTML=s(u)}(t,e=document.createElementNS("http://www.w3.org/2000/svg","radialGradient")),e.setAttribute("id",n),this.el=e,this.id=n,this.cfg=t,this}return t.prototype.match=function(t,e){return this.cfg===e},t}();t.exports=u},function(t,e,n){var i=n(1),r=/^p\s*\(\s*([axyn])\s*\)\s*(.*)/i,a=function(){function t(t){var e=document.createElementNS("http://www.w3.org/2000/svg","pattern");e.setAttribute("patternUnits","userSpaceOnUse");var n=document.createElementNS("http://www.w3.org/2000/svg","image");e.appendChild(n);var a=i.uniqueId("pattern_");e.id=a,this.el=e,this.id=a,this.cfg=t;var o=r.exec(t)[2];n.setAttribute("href",o);var s=new Image;function u(){console.log(s.width,s.height),e.setAttribute("width",s.width),e.setAttribute("height",s.height)}return o.match(/^data:/i)||(s.crossOrigin="Anonymous"),s.src=o,s.complete?u():(s.onload=u,s.src=s.src),this}return t.prototype.match=function(t,e){return this.cfg===e},t}();t.exports=a},function(t,e,n){var i=n(1),r={shadowColor:"color",shadowOpacity:"opacity",shadowBlur:"blur",shadowOffsetX:"dx",shadowOffsetY:"dy"},a={x:"-40%",y:"-40%",width:"200%",height:"200%"},o=function(){function t(t){this.type="filter";var e=document.createElementNS("http://www.w3.org/2000/svg","filter");return i.each(a,function(t,n){e.setAttribute(n,t)}),this.el=e,this.id=i.uniqueId("filter_"),this.el.id=this.id,this.cfg=t,this._parseShadow(t,e),this}var e=t.prototype;return e.match=function(t,e){if(this.type!==t)return!1;var n=!0,r=this.cfg;return i.each(Object.keys(r),function(t){if(r[t]!==e[t])return n=!1,!1}),n},e.update=function(t,e){var n=this.cfg;return n[r[t]]=e,this._parseShadow(n,this.el),this},e._parseShadow=function(t,e){var n='<feDropShadow \n      dx="'+(t.dx||0)+'" \n      dy="'+(t.dy||0)+'" \n      stdDeviation="'+(t.blur?t.blur/10:0)+'"\n      flood-color="'+(t.color?t.color:"#000")+'"\n      flood-opacity="'+(t.opacity?t.opacity:1)+'"\n      />';e.innerHTML=n},t}();t.exports=o},function(t,e){var n={svg:"svg",circle:"circle",rect:"rect",text:"text",path:"path",foreignObject:"foreignObject",polygon:"polygon",ellipse:"ellipse",image:"image"};t.exports=function(t,e,i){var r=i.target||i.srcElement;if(!n[r.tagName]){for(var a=r.parentNode;a&&!n[a.tagName];)a=a.parentNode;r=a}return this._cfg.el===r?this:this.find(function(t){return t._cfg&&t._cfg.el===r})}},function(t,e,n){t.exports={painter:n(326),getShape:n(324)}},function(t,e,n){var i=n(1),r=n(34).parseRadius,a=n(67),o=n(318),s={rect:"path",circle:"circle",line:"line",path:"path",marker:"path",text:"text",polygon:"polygon",image:"image",ellipse:"ellipse",dom:"foreignObject",fan:"path",group:"g"},u={opacity:"opacity",fillStyle:"fill",strokeOpacity:"stroke-opacity",fillOpacity:"fill-opacity",strokeStyle:"stroke",x:"x",y:"y",r:"r",width:"width",height:"height",x1:"x1",x2:"x2",y1:"y1",y2:"y2",lineCap:"stroke-linecap",lineJoin:"stroke-linejoin",lineWidth:"stroke-width",lineDash:"stroke-dasharray",lineDashOffset:"stroke-dashoffset",miterLimit:"stroke-miterlimit",font:"font",fontSize:"font-size",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",fontFamily:"font-family",startArrow:"marker-start",endArrow:"marker-end",path:"d",class:"class",id:"id",style:"style",preserveAspectRatio:"preserveAspectRatio"},l={top:"before-edge",middle:"central",bottom:"after-edge",alphabetic:"baseline",hanging:"hanging"},c={left:"left",start:"left",center:"middle",right:"end",end:"end"},h=function(){function t(t){if(!t)return null;var e=i.uniqueId("canvas_"),n=i.createDom('<svg id="'+e+'"></svg>');return t.appendChild(n),this.type="svg",this.canvas=n,this.context=new o(n),this.toDraw=!1,this}var e=t.prototype;return e.draw=function(t){var e=this;e.animateHandler?e.toDraw=!0:function n(){e.animateHandler=i.requestAnimationFrame(function(){e.animateHandler=void 0,e.toDraw&&n()});try{t.resetMatrix(),e._drawGroup(t,!1)}catch(t){console.warn("error in draw canvas, detail as:"),console.warn(t),e.toDraw=!1}e.toDraw=!1}()},e.drawSync=function(t){this._drawChildren(t,!1)},e._drawGroup=function(t,e){var n=t._cfg;n.removed||n.destroyed||(!n.el&&n.attrs&&(e=!0),n.tobeRemoved&&(i.each(n.tobeRemoved,function(t){t.parentNode&&t.parentNode.removeChild(t)}),n.tobeRemoved=[]),this._drawShape(t,e),n.children&&n.children.length>0&&this._drawChildren(t,e))},e._drawChildren=function(t,e){var n,i=t._cfg.children;if(i){if(t._cfg.el&&!e){var r=t._cfg.el.childNodes.length+1;0!==r&&r!==i.length&&(e=!0)}for(var a=0;a<i.length;a++)(n=i[a]).isGroup?this._drawGroup(n,e):this._drawShape(n,e)}},e._drawShape=function(t,e){var n=t._attrs,i=t._cfg,r=i.el;i.removed||i.destroyed?r&&r.parentNode.removeChild(i.el):(e&&r&&(r.parentNode&&r.parentNode.removeChild(r),r=null),!r&&i.parent&&(this._createDom(t),this._updateShape(t)),r=i.el,!1!==i.visible?(i.visible&&r.hasAttribute("visibility")&&r.removeAttribute("visibility"),i.hasUpdate&&this._updateShape(t),n.clip&&n.clip._cfg.hasUpdate&&this._updateShape(n.clip)):r.setAttribute("visibility","hidden"))},e._updateShape=function(t){var e=t._attrs,n=t._cfg.attrs;if(n)if(t._cfg.el||this._createDom(t),"clip"in e&&this._setClip(t,e.clip),("shadowOffsetX"in e||"shadowOffsetY"in e||"shadowBlur"in e||"shadowColor"in e)&&this._setShadow(t),"text"!==t.type){for(var r in"fan"===t.type&&this._updateFan(t),"marker"===t.type&&t._cfg.el.setAttribute("d",this._assembleMarker(e)),"rect"===t.type&&t._cfg.el.setAttribute("d",this._assembleRect(e)),e)e[r]!==n[r]&&this._setAttribute(t,r,e[r]);t._cfg.attrs=i.deepMix({},t._attrs),t._cfg.hasUpdate=!1}else this._updateText(t)},e._setAttribute=function(t,e,n){var r=t.type,a=t._attrs,o=t._cfg.el,s=this.context;if("marker"!==r&&"rect"!==r||!~["x","y","radius","r"].indexOf(e))if(~["circle","ellipse"].indexOf(r)&&~["x","y"].indexOf(e))o.setAttribute("c"+e,parseInt(n,10));else{if("polygon"===r&&"points"===e)return n&&0!==n.length||(n=""),i.isArray(n)&&(n=(n=n.map(function(t){return t[0]+","+t[1]})).join(" ")),void o.setAttribute("points",n);if("path"===e&&i.isArray(n))o.setAttribute("d",this._formatPath(n));else if("img"!==e){if("transform"===e)return n?void this._setTransform(t):void o.removeAttribute("transform");if("rotate"===e)return n?void this._setTransform(t):void o.removeAttribute("transform");if("matrix"!==e)if("fillStyle"!==e&&"strokeStyle"!==e){if("clip"!==e)if(~e.indexOf("Arrow"))if(e=u[e],n){var l=null;l="boolean"==typeof n?s.getDefaultArrow(a,e):s.addArrow(a,e),o.setAttribute(e,"url(#"+l+")"),t._cfg[e]=l}else t._cfg[e]=null,o.removeAttribute(e);else"html"===e&&("string"==typeof n?o.innerHTML=n:(o.innerHTML="",o.appendChild(n))),u[e]&&o.setAttribute(u[e],n)}else this._setColor(t,e,n);else this._setTransform(t)}else this._setImage(t,n)}},e._createDom=function(t){var e=s[t.type],n=t._attrs;if(!e)throw new Error("the type"+t.type+"is not supported by svg");var i=document.createElementNS("http://www.w3.org/2000/svg",e);return t._cfg.el=i,t._cfg.parent&&t._cfg.parent.get("el").appendChild(i),t._cfg.attrs={},"text"===t.type?(i.setAttribute("paint-order","stroke"),i.setAttribute("style","stroke-linecap:butt; stroke-linejoin:miter;")):(n.stroke||n.strokeStyle||i.setAttribute("stroke","none"),n.fill||n.fillStyle||i.setAttribute("fill","none")),i},e._assembleMarker=function(t){var e=t.r;if(void 0===t.r&&(e=t.radius),isNaN(Number(t.x))||isNaN(Number(t.y))||isNaN(Number(e)))return"";var n="";return n="function"==typeof t.symbol?t.symbol(t.x,t.y,e):a.Symbols[t.symbol||"circle"](t.x,t.y,e),i.isArray(n)&&(n=n.map(function(t){return t.join(" ")}).join("")),n},e._assembleRect=function(t){var e=t.x,n=t.y,a=t.width,o=t.height,s=t.radius;if(!s)return"M "+e+","+n+" l "+a+",0 l 0,"+o+" l"+-a+" 0 z";var u=r(s);return i.isArray(s)?1===s.length?u.r1=u.r2=u.r3=u.r4=s[0]:2===s.length?(u.r1=u.r3=s[0],u.r2=u.r4=s[1]):3===s.length?(u.r1=s[0],u.r2=u.r4=s[1],u.r3=s[2]):(u.r1=s[0],u.r2=s[1],u.r3=s[2],u.r4=s[3]):u.r1=u.r2=u.r3=u.r4=s,[["M "+(e+u.r1)+","+n],["l "+(a-u.r1-u.r2)+",0"],["a "+u.r2+","+u.r2+",0,0,1,"+u.r2+","+u.r2],["l 0,"+(o-u.r2-u.r3)],["a "+u.r3+","+u.r3+",0,0,1,"+-u.r3+","+u.r3],["l "+(u.r3+u.r4-a)+",0"],["a "+u.r4+","+u.r4+",0,0,1,"+-u.r4+","+-u.r4],["l 0,"+(u.r4+u.r1-o)],["a "+u.r1+","+u.r1+",0,0,1,"+u.r1+","+-u.r1],["z"]].join(" ")},e._formatPath=function(t){return~(t=t.map(function(t){return t.join(" ")}).join("")).indexOf("NaN")?"":t},e._setTransform=function(t){for(var e=t._attrs.matrix,n=t._cfg.el,i=[],r=0;r<9;r+=3)i.push(e[r]+","+e[r+1]);-1===(i=i.join(",")).indexOf("NaN")?n.setAttribute("transform","matrix("+i+")"):console.warn("invalid matrix:",e)},e._setImage=function(t,e){var n=t._attrs,r=t._cfg.el;if(i.isString(e))r.setAttribute("href",e);else if(e instanceof Image)n.width||(r.setAttribute("width",e.width),t._attrs.width=e.width),n.height||(r.setAttribute("height",e.height),t._attrs.height=e.height),r.setAttribute("href",e.src);else if(e instanceof HTMLElement&&i.isString(e.nodeName)&&"CANVAS"===e.nodeName.toUpperCase())r.setAttribute("href",e.toDataURL());else if(e instanceof ImageData){var a=document.createElement("canvas");a.setAttribute("width",e.width),a.setAttribute("height",e.height),a.getContext("2d").putImageData(e,0,0),n.width||(r.setAttribute("width",e.width),t._attrs.width=e.width),n.height||(r.setAttribute("height",e.height),t._attrs.height=e.height),r.setAttribute("href",a.toDataURL())}},e._updateFan=function(t){function e(t,e,n){return{x:e*Math.cos(t)+n.x,y:e*Math.sin(t)+n.y}}var n=t._attrs,r=t._cfg,a={x:n.x,y:n.y},o=[],s=n.startAngle,u=n.endAngle;i.isNumberEqual(u-s,2*Math.PI)&&(u-=1e-5);var l=e(s,n.re,a),c=e(u,n.re,a),h=u>s?1:0,f=Math.abs(u-s)>Math.PI?1:0,p=n.rs,g=n.re,d=e(s,n.rs,a),v=e(u,n.rs,a);n.rs>0?(o.push("M "+c.x+","+c.y),o.push("L "+v.x+","+v.y),o.push("A "+p+","+p+",0,"+f+","+(1===h?0:1)+","+d.x+","+d.y),o.push("L "+l.x+" "+l.y)):(o.push("M "+a.x+","+a.y),o.push("L "+l.x+","+l.y)),o.push("A "+g+","+g+",0,"+f+","+h+","+c.x+","+c.y),n.rs>0?o.push("L "+v.x+","+v.y):o.push("Z"),r.el.setAttribute("d",o.join(" "))},e._updateText=function(t){var e=t._attrs,n=t._cfg.attrs,i=t._cfg.el;for(var r in this._setFont(t),e)if(e[r]!==n[r]){if("text"===r){this._setText(t,""+e[r]);continue}if("fillStyle"===r||"strokeStyle"===r){this._setColor(t,r,e[r]);continue}if("matrix"===r){this._setTransform(t);continue}u[r]&&i.setAttribute(u[r],e[r])}t._cfg.attrs=Object.assign({},t._attrs),t._cfg.hasUpdate=!1},e._setFont=function(t){var e=t.get("el"),n=t._attrs,i=n.fontSize;e.setAttribute("alignment-baseline",l[n.textBaseline]||"baseline"),e.setAttribute("text-anchor",c[n.textAlign]||"left"),i&&+i<12&&(n.matrix=[1,0,0,0,1,0,0,0,1],t.transform([["t",-n.x,-n.y],["s",+i/12,+i/12],["t",n.x,n.y]]))},e._setText=function(t,e){var n=t._cfg.el,r=t._attrs.textBaseline||"bottom";if(e)if(~e.indexOf("\n")){var a=t._attrs.x,o=e.split("\n"),s=o.length-1,u="";i.each(o,function(t,e){0===e?"alphabetic"===r?u+='<tspan x="'+a+'" dy="'+-s+'em">'+t+"</tspan>":"top"===r?u+='<tspan x="'+a+'" dy="0.9em">'+t+"</tspan>":"middle"===r?u+='<tspan x="'+a+'" dy="'+-(s-1)/2+'em">'+t+"</tspan>":"bottom"===r?u+='<tspan x="'+a+'" dy="-'+(s+.3)+'em">'+t+"</tspan>":"hanging"===r&&(u+='<tspan x="'+a+'" dy="'+(-(s-1)-.3)+'em">'+t+"</tspan>"):u+='<tspan x="'+a+'" dy="1em">'+t+"</tspan>"}),n.innerHTML=u}else n.innerHTML=e;else n.innerHTML=""},e._setClip=function(t,e){var n=t._cfg.el;if(e)if(n.hasAttribute("clip-path"))e._cfg.hasUpdate&&this._updateShape(e);else{this._createDom(e),this._updateShape(e);var i=this.context.addClip(e);n.setAttribute("clip-path","url(#"+i+")")}else n.removeAttribute("clip-path")},e._setColor=function(t,e,n){var i=t._cfg.el,r=this.context;if(n)if(n=n.trim(),/^[r,R,L,l]{1}[\s]*\(/.test(n)){var a=r.find("gradient",n);a||(a=r.addGradient(n)),i.setAttribute(u[e],"url(#"+a+")")}else if(/^[p,P]{1}[\s]*\(/.test(n)){var o=r.find("pattern",n);o||(o=r.addPattern(n)),i.setAttribute(u[e],"url(#"+o+")")}else i.setAttribute(u[e],n);else i.setAttribute(u[e],"none")},e._setShadow=function(t){var e=t._cfg.el,n=t._attrs,i={dx:n.shadowOffsetX,dy:n.shadowOffsetY,blur:n.shadowBlur,color:n.shadowColor};if(i.dx||i.dy||i.blur||i.color){var r=this.context.find("filter",i);r||(r=this.context.addShadow(i,this)),e.setAttribute("filter","url(#"+r+")")}else e.removeAttribute("filter")},t}();t.exports=h},function(t,e,n){var i=n(6);i.Arc=n(125),i.Circle=n(126),i.Dom=n(127),i.Ellipse=n(128),i.Fan=n(129),i.Image=n(130),i.Line=n(131),i.Marker=n(67),i.Path=n(134),i.Polygon=n(135),i.Polyline=n(136),i.Rect=n(137),i.Text=n(138),t.exports=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sub=e.mul=void 0,e.create=function(){var t=new i.ARRAY_TYPE(9);i.ARRAY_TYPE!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0);return t[0]=1,t[4]=1,t[8]=1,t},e.fromMat4=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t},e.clone=function(t){var e=new i.ARRAY_TYPE(9);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},e.copy=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},e.fromValues=function(t,e,n,r,a,o,s,u,l){var c=new i.ARRAY_TYPE(9);return c[0]=t,c[1]=e,c[2]=n,c[3]=r,c[4]=a,c[5]=o,c[6]=s,c[7]=u,c[8]=l,c},e.set=function(t,e,n,i,r,a,o,s,u,l){return t[0]=e,t[1]=n,t[2]=i,t[3]=r,t[4]=a,t[5]=o,t[6]=s,t[7]=u,t[8]=l,t},e.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},e.transpose=function(t,e){if(t===e){var n=e[1],i=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=n,t[5]=e[7],t[6]=i,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t},e.invert=function(t,e){var n=e[0],i=e[1],r=e[2],a=e[3],o=e[4],s=e[5],u=e[6],l=e[7],c=e[8],h=c*o-s*l,f=-c*a+s*u,p=l*a-o*u,g=n*h+i*f+r*p;if(!g)return null;return g=1/g,t[0]=h*g,t[1]=(-c*i+r*l)*g,t[2]=(s*i-r*o)*g,t[3]=f*g,t[4]=(c*n-r*u)*g,t[5]=(-s*n+r*a)*g,t[6]=p*g,t[7]=(-l*n+i*u)*g,t[8]=(o*n-i*a)*g,t},e.adjoint=function(t,e){var n=e[0],i=e[1],r=e[2],a=e[3],o=e[4],s=e[5],u=e[6],l=e[7],c=e[8];return t[0]=o*c-s*l,t[1]=r*l-i*c,t[2]=i*s-r*o,t[3]=s*u-a*c,t[4]=n*c-r*u,t[5]=r*a-n*s,t[6]=a*l-o*u,t[7]=i*u-n*l,t[8]=n*o-i*a,t},e.determinant=function(t){var e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],o=t[5],s=t[6],u=t[7],l=t[8];return e*(l*a-o*u)+n*(-l*r+o*s)+i*(u*r-a*s)},e.multiply=r,e.translate=function(t,e,n){var i=e[0],r=e[1],a=e[2],o=e[3],s=e[4],u=e[5],l=e[6],c=e[7],h=e[8],f=n[0],p=n[1];return t[0]=i,t[1]=r,t[2]=a,t[3]=o,t[4]=s,t[5]=u,t[6]=f*i+p*o+l,t[7]=f*r+p*s+c,t[8]=f*a+p*u+h,t},e.rotate=function(t,e,n){var i=e[0],r=e[1],a=e[2],o=e[3],s=e[4],u=e[5],l=e[6],c=e[7],h=e[8],f=Math.sin(n),p=Math.cos(n);return t[0]=p*i+f*o,t[1]=p*r+f*s,t[2]=p*a+f*u,t[3]=p*o-f*i,t[4]=p*s-f*r,t[5]=p*u-f*a,t[6]=l,t[7]=c,t[8]=h,t},e.scale=function(t,e,n){var i=n[0],r=n[1];return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},e.fromTranslation=function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t},e.fromRotation=function(t,e){var n=Math.sin(e),i=Math.cos(e);return t[0]=i,t[1]=n,t[2]=0,t[3]=-n,t[4]=i,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},e.fromScaling=function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},e.fromMat2d=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t},e.fromQuat=function(t,e){var n=e[0],i=e[1],r=e[2],a=e[3],o=n+n,s=i+i,u=r+r,l=n*o,c=i*o,h=i*s,f=r*o,p=r*s,g=r*u,d=a*o,v=a*s,y=a*u;return t[0]=1-h-g,t[3]=c-y,t[6]=f+v,t[1]=c+y,t[4]=1-l-g,t[7]=p-d,t[2]=f-v,t[5]=p+d,t[8]=1-l-h,t},e.normalFromMat4=function(t,e){var n=e[0],i=e[1],r=e[2],a=e[3],o=e[4],s=e[5],u=e[6],l=e[7],c=e[8],h=e[9],f=e[10],p=e[11],g=e[12],d=e[13],v=e[14],y=e[15],m=n*s-i*o,x=n*u-r*o,b=n*l-a*o,_=i*u-r*s,w=i*l-a*s,M=r*l-a*u,S=c*d-h*g,C=c*v-f*g,k=c*y-p*g,A=h*v-f*d,P=h*y-p*d,I=f*y-p*v,T=m*I-x*P+b*A+_*k-w*C+M*S;if(!T)return null;return T=1/T,t[0]=(s*I-u*P+l*A)*T,t[1]=(u*k-o*I-l*C)*T,t[2]=(o*P-s*k+l*S)*T,t[3]=(r*P-i*I-a*A)*T,t[4]=(n*I-r*k+a*C)*T,t[5]=(i*k-n*P-a*S)*T,t[6]=(d*M-v*w+y*_)*T,t[7]=(v*b-g*M-y*x)*T,t[8]=(g*w-d*b+y*m)*T,t},e.projection=function(t,e,n){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/n,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t},e.str=function(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"},e.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))},e.add=function(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t},e.subtract=a,e.multiplyScalar=function(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t},e.multiplyScalarAndAdd=function(t,e,n,i){return t[0]=e[0]+n[0]*i,t[1]=e[1]+n[1]*i,t[2]=e[2]+n[2]*i,t[3]=e[3]+n[3]*i,t[4]=e[4]+n[4]*i,t[5]=e[5]+n[5]*i,t[6]=e[6]+n[6]*i,t[7]=e[7]+n[7]*i,t[8]=e[8]+n[8]*i,t},e.exactEquals=function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]},e.equals=function(t,e){var n=t[0],r=t[1],a=t[2],o=t[3],s=t[4],u=t[5],l=t[6],c=t[7],h=t[8],f=e[0],p=e[1],g=e[2],d=e[3],v=e[4],y=e[5],m=e[6],x=e[7],b=e[8];return Math.abs(n-f)<=i.EPSILON*Math.max(1,Math.abs(n),Math.abs(f))&&Math.abs(r-p)<=i.EPSILON*Math.max(1,Math.abs(r),Math.abs(p))&&Math.abs(a-g)<=i.EPSILON*Math.max(1,Math.abs(a),Math.abs(g))&&Math.abs(o-d)<=i.EPSILON*Math.max(1,Math.abs(o),Math.abs(d))&&Math.abs(s-v)<=i.EPSILON*Math.max(1,Math.abs(s),Math.abs(v))&&Math.abs(u-y)<=i.EPSILON*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(l-m)<=i.EPSILON*Math.max(1,Math.abs(l),Math.abs(m))&&Math.abs(c-x)<=i.EPSILON*Math.max(1,Math.abs(c),Math.abs(x))&&Math.abs(h-b)<=i.EPSILON*Math.max(1,Math.abs(h),Math.abs(b))};var i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(71));function r(t,e,n){var i=e[0],r=e[1],a=e[2],o=e[3],s=e[4],u=e[5],l=e[6],c=e[7],h=e[8],f=n[0],p=n[1],g=n[2],d=n[3],v=n[4],y=n[5],m=n[6],x=n[7],b=n[8];return t[0]=f*i+p*o+g*l,t[1]=f*r+p*s+g*c,t[2]=f*a+p*u+g*h,t[3]=d*i+v*o+y*l,t[4]=d*r+v*s+y*c,t[5]=d*a+v*u+y*h,t[6]=m*i+x*o+b*l,t[7]=m*r+x*s+b*c,t[8]=m*a+x*u+b*h,t}function a(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t}e.mul=r,e.sub=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.forEach=e.sqrLen=e.sqrDist=e.dist=e.div=e.mul=e.sub=e.len=void 0,e.create=r,e.clone=function(t){var e=new i.ARRAY_TYPE(2);return e[0]=t[0],e[1]=t[1],e},e.fromValues=function(t,e){var n=new i.ARRAY_TYPE(2);return n[0]=t,n[1]=e,n},e.copy=function(t,e){return t[0]=e[0],t[1]=e[1],t},e.set=function(t,e,n){return t[0]=e,t[1]=n,t},e.add=function(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t},e.subtract=a,e.multiply=o,e.divide=s,e.ceil=function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},e.floor=function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},e.min=function(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t},e.max=function(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t},e.round=function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},e.scale=function(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t},e.scaleAndAdd=function(t,e,n,i){return t[0]=e[0]+n[0]*i,t[1]=e[1]+n[1]*i,t},e.distance=u,e.squaredDistance=l,e.length=c,e.squaredLength=h,e.negate=function(t,e){return t[0]=-e[0],t[1]=-e[1],t},e.inverse=function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t},e.normalize=function(t,e){var n=e[0],i=e[1],r=n*n+i*i;r>0&&(r=1/Math.sqrt(r),t[0]=e[0]*r,t[1]=e[1]*r);return t},e.dot=function(t,e){return t[0]*e[0]+t[1]*e[1]},e.cross=function(t,e,n){var i=e[0]*n[1]-e[1]*n[0];return t[0]=t[1]=0,t[2]=i,t},e.lerp=function(t,e,n,i){var r=e[0],a=e[1];return t[0]=r+i*(n[0]-r),t[1]=a+i*(n[1]-a),t},e.random=function(t,e){e=e||1;var n=2*i.RANDOM()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},e.transformMat2=function(t,e,n){var i=e[0],r=e[1];return t[0]=n[0]*i+n[2]*r,t[1]=n[1]*i+n[3]*r,t},e.transformMat2d=function(t,e,n){var i=e[0],r=e[1];return t[0]=n[0]*i+n[2]*r+n[4],t[1]=n[1]*i+n[3]*r+n[5],t},e.transformMat3=function(t,e,n){var i=e[0],r=e[1];return t[0]=n[0]*i+n[3]*r+n[6],t[1]=n[1]*i+n[4]*r+n[7],t},e.transformMat4=function(t,e,n){var i=e[0],r=e[1];return t[0]=n[0]*i+n[4]*r+n[12],t[1]=n[1]*i+n[5]*r+n[13],t},e.rotate=function(t,e,n,i){var r=e[0]-n[0],a=e[1]-n[1],o=Math.sin(i),s=Math.cos(i);return t[0]=r*s-a*o+n[0],t[1]=r*o+a*s+n[1],t},e.angle=function(t,e){var n=t[0],i=t[1],r=e[0],a=e[1],o=n*n+i*i;o>0&&(o=1/Math.sqrt(o));var s=r*r+a*a;s>0&&(s=1/Math.sqrt(s));var u=(n*r+i*a)*o*s;return u>1?0:u<-1?Math.PI:Math.acos(u)},e.str=function(t){return"vec2("+t[0]+", "+t[1]+")"},e.exactEquals=function(t,e){return t[0]===e[0]&&t[1]===e[1]},e.equals=function(t,e){var n=t[0],r=t[1],a=e[0],o=e[1];return Math.abs(n-a)<=i.EPSILON*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-o)<=i.EPSILON*Math.max(1,Math.abs(r),Math.abs(o))};var i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(71));function r(){var t=new i.ARRAY_TYPE(2);return i.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0),t}function a(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t}function o(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t}function s(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t}function u(t,e){var n=e[0]-t[0],i=e[1]-t[1];return Math.sqrt(n*n+i*i)}function l(t,e){var n=e[0]-t[0],i=e[1]-t[1];return n*n+i*i}function c(t){var e=t[0],n=t[1];return Math.sqrt(e*e+n*n)}function h(t){var e=t[0],n=t[1];return e*e+n*n}e.len=c,e.sub=a,e.mul=o,e.div=s,e.dist=u,e.sqrDist=l,e.sqrLen=h,e.forEach=function(){var t=r();return function(e,n,i,r,a,o){var s=void 0,u=void 0;for(n||(n=2),i||(i=0),u=r?Math.min(r*n+i,e.length):e.length,s=i;s<u;s+=n)t[0]=e[s],t[1]=e[s+1],a(t,t,o),e[s]=t[0],e[s+1]=t[1];return e}}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.forEach=e.sqrLen=e.len=e.sqrDist=e.dist=e.div=e.mul=e.sub=void 0,e.create=r,e.clone=function(t){var e=new i.ARRAY_TYPE(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e},e.length=a,e.fromValues=o,e.copy=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t},e.set=function(t,e,n,i){return t[0]=e,t[1]=n,t[2]=i,t},e.add=function(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t},e.subtract=s,e.multiply=u,e.divide=l,e.ceil=function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},e.floor=function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},e.min=function(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t[2]=Math.min(e[2],n[2]),t},e.max=function(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t[2]=Math.max(e[2],n[2]),t},e.round=function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},e.scale=function(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t},e.scaleAndAdd=function(t,e,n,i){return t[0]=e[0]+n[0]*i,t[1]=e[1]+n[1]*i,t[2]=e[2]+n[2]*i,t},e.distance=c,e.squaredDistance=h,e.squaredLength=f,e.negate=function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},e.inverse=function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t},e.normalize=p,e.dot=g,e.cross=function(t,e,n){var i=e[0],r=e[1],a=e[2],o=n[0],s=n[1],u=n[2];return t[0]=r*u-a*s,t[1]=a*o-i*u,t[2]=i*s-r*o,t},e.lerp=function(t,e,n,i){var r=e[0],a=e[1],o=e[2];return t[0]=r+i*(n[0]-r),t[1]=a+i*(n[1]-a),t[2]=o+i*(n[2]-o),t},e.hermite=function(t,e,n,i,r,a){var o=a*a,s=o*(2*a-3)+1,u=o*(a-2)+a,l=o*(a-1),c=o*(3-2*a);return t[0]=e[0]*s+n[0]*u+i[0]*l+r[0]*c,t[1]=e[1]*s+n[1]*u+i[1]*l+r[1]*c,t[2]=e[2]*s+n[2]*u+i[2]*l+r[2]*c,t},e.bezier=function(t,e,n,i,r,a){var o=1-a,s=o*o,u=a*a,l=s*o,c=3*a*s,h=3*u*o,f=u*a;return t[0]=e[0]*l+n[0]*c+i[0]*h+r[0]*f,t[1]=e[1]*l+n[1]*c+i[1]*h+r[1]*f,t[2]=e[2]*l+n[2]*c+i[2]*h+r[2]*f,t},e.random=function(t,e){e=e||1;var n=2*i.RANDOM()*Math.PI,r=2*i.RANDOM()-1,a=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*a,t[1]=Math.sin(n)*a,t[2]=r*e,t},e.transformMat4=function(t,e,n){var i=e[0],r=e[1],a=e[2],o=n[3]*i+n[7]*r+n[11]*a+n[15];return o=o||1,t[0]=(n[0]*i+n[4]*r+n[8]*a+n[12])/o,t[1]=(n[1]*i+n[5]*r+n[9]*a+n[13])/o,t[2]=(n[2]*i+n[6]*r+n[10]*a+n[14])/o,t},e.transformMat3=function(t,e,n){var i=e[0],r=e[1],a=e[2];return t[0]=i*n[0]+r*n[3]+a*n[6],t[1]=i*n[1]+r*n[4]+a*n[7],t[2]=i*n[2]+r*n[5]+a*n[8],t},e.transformQuat=function(t,e,n){var i=n[0],r=n[1],a=n[2],o=n[3],s=e[0],u=e[1],l=e[2],c=r*l-a*u,h=a*s-i*l,f=i*u-r*s,p=r*f-a*h,g=a*c-i*f,d=i*h-r*c,v=2*o;return c*=v,h*=v,f*=v,p*=2,g*=2,d*=2,t[0]=s+c+p,t[1]=u+h+g,t[2]=l+f+d,t},e.rotateX=function(t,e,n,i){var r=[],a=[];return r[0]=e[0]-n[0],r[1]=e[1]-n[1],r[2]=e[2]-n[2],a[0]=r[0],a[1]=r[1]*Math.cos(i)-r[2]*Math.sin(i),a[2]=r[1]*Math.sin(i)+r[2]*Math.cos(i),t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t},e.rotateY=function(t,e,n,i){var r=[],a=[];return r[0]=e[0]-n[0],r[1]=e[1]-n[1],r[2]=e[2]-n[2],a[0]=r[2]*Math.sin(i)+r[0]*Math.cos(i),a[1]=r[1],a[2]=r[2]*Math.cos(i)-r[0]*Math.sin(i),t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t},e.rotateZ=function(t,e,n,i){var r=[],a=[];return r[0]=e[0]-n[0],r[1]=e[1]-n[1],r[2]=e[2]-n[2],a[0]=r[0]*Math.cos(i)-r[1]*Math.sin(i),a[1]=r[0]*Math.sin(i)+r[1]*Math.cos(i),a[2]=r[2],t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t},e.angle=function(t,e){var n=o(t[0],t[1],t[2]),i=o(e[0],e[1],e[2]);p(n,n),p(i,i);var r=g(n,i);return r>1?0:r<-1?Math.PI:Math.acos(r)},e.str=function(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"},e.exactEquals=function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},e.equals=function(t,e){var n=t[0],r=t[1],a=t[2],o=e[0],s=e[1],u=e[2];return Math.abs(n-o)<=i.EPSILON*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-s)<=i.EPSILON*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(a-u)<=i.EPSILON*Math.max(1,Math.abs(a),Math.abs(u))};var i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(71));function r(){var t=new i.ARRAY_TYPE(3);return i.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function a(t){var e=t[0],n=t[1],i=t[2];return Math.sqrt(e*e+n*n+i*i)}function o(t,e,n){var r=new i.ARRAY_TYPE(3);return r[0]=t,r[1]=e,r[2]=n,r}function s(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t}function u(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t}function l(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function c(t,e){var n=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(n*n+i*i+r*r)}function h(t,e){var n=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return n*n+i*i+r*r}function f(t){var e=t[0],n=t[1],i=t[2];return e*e+n*n+i*i}function p(t,e){var n=e[0],i=e[1],r=e[2],a=n*n+i*i+r*r;return a>0&&(a=1/Math.sqrt(a),t[0]=e[0]*a,t[1]=e[1]*a,t[2]=e[2]*a),t}function g(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}e.sub=s,e.mul=u,e.div=l,e.dist=c,e.sqrDist=h,e.len=a,e.sqrLen=f,e.forEach=function(){var t=r();return function(e,n,i,r,a,o){var s=void 0,u=void 0;for(n||(n=3),i||(i=0),u=r?Math.min(r*n+i,e.length):e.length,s=i;s<u;s+=n)t[0]=e[s],t[1]=e[s+1],t[2]=e[s+2],a(t,t,o),e[s]=t[0],e[s+1]=t[1],e[s+2]=t[2];return e}}()},function(t,e,n){var i=n(7),r=n(11),a=n(141),o=[0,1,1.2,1.5,1.6,2,2.2,2.4,2.5,3,4,5,6,7.5,8,10],s=[0,1,2,4,5,10];t.exports=function(t){var e=t.min,n=t.max,u=t.interval,l=t.minTickInterval,c=[],h=t.minCount||5,f=t.maxCount||7,p=h===f,g=i(t.minLimit)?-1/0:t.minLimit,d=i(t.maxLimit)?1/0:t.maxLimit,v=(h+f)/2,y=v,m=t.snapArray?t.snapArray:p?o:s;if(e===g&&n===d&&p&&(u=(n-e)/(y-1)),i(e)&&(e=0),i(n)&&(n=0),n===e&&(0===e?n=1:e>0?e=0:n=0,n-e<5&&!u&&n-e>=1&&(u=1)),i(u)){var x=(n-e)/(v-1);u=a.snapFactorTo(x,m,"ceil"),f!==h&&((y=parseInt((n-e)/u,10))>f&&(y=f),y<h&&(y=h),u=a.snapFactorTo((n-e)/(y-1),m,"floor"))}if(r(l)&&u<l&&(u=l),t.interval||f!==h)n=Math.min(a.snapMultiple(n,u,"ceil"),d),e=Math.max(a.snapMultiple(e,u,"floor"),g),y=Math.round((n-e)/u),e=a.fixedBase(e,u),n=a.fixedBase(n,u);else{v=parseInt(v,10);var b,_=(n+e)/2,w=a.snapMultiple(_,u,"ceil"),M=Math.floor((v-2)/2),S=w+M*u;b=v%2==0?w-M*u:w-(M+1)*u,S<n&&(S+=u),b>e&&(b-=u),n=a.fixedBase(S,u),e=a.fixedBase(b,u)}n=Math.min(n,d),e=Math.max(e,g),c.push(e);for(var C=1;C<y;C++){var k=a.fixedBase(u*C+e,u);k<n&&c.push(k)}return c[c.length-1]<n&&c.push(n),{min:e,max:n,interval:u,count:y,ticks:c}}},function(t,e,n){var i=n(141),r=n(7),a=[1,2,4,6,8,12],o=36e5,s=864e5;function u(t){return new Date(t).getFullYear()}function l(t){return new Date(t,0,1).getTime()}function c(t){return new Date(t).getMonth()}function h(t,e){return new Date(t,e,1).getTime()}t.exports=function(t){var e,n=t.minInterval,f=[],p=t.min,g=t.max,d=t.interval;if(g===p&&(g=p+s),r(d)){var v=s,y=365*v;d=parseInt((g-p)/(t.maxCount||6),10),n&&n>d&&(d=n);var m=d/y,x=u(p);if(m>.51){for(var b=Math.ceil(m),_=u(g),w=x;w<=_+b;w+=b)f.push(l(w));d=null}else if(m>.0834){for(var M=Math.ceil(m/.0834),S=c(p),C=function(t,e){var n=u(t),i=u(e),r=c(t);return 12*(i-n)+(c(e)-r)%12}(p,g),k=0;k<=C+M;k+=M)f.push(h(x,k+S));d=null}else if(d>.5*v){var A=new Date(p),P=A.getFullYear(),I=A.getMonth(p),T=A.getDate(),O=Math.ceil(d/v),E=function(t,e){return Math.ceil((e-t)/s)}(p,g);d=O*v;for(var L=0;L<E+O;L+=O)f.push(new Date(P,I,T+L).getTime())}else if(d>o){var D=new Date(p),F=D.getFullYear(),B=D.getMonth(p),R=D.getDate(),j=D.getHours(),N=i.snapTo(a,Math.ceil(d/o)),z=function(t,e){return Math.ceil((e-t)/o)}(p,g);d=N*o;for(var G=0;G<=z+N;G+=N)f.push(new Date(F,B,R,j+G).getTime())}else if(d>6e4){var V=function(t,e){return Math.ceil((e-t)/6e4)}(p,g),Y=Math.ceil(d/6e4);d=6e4*Y;for(var H=0;H<=V+Y;H+=Y)f.push(p+6e4*H)}else{d<1e3&&(d=1e3),p=1e3*Math.floor(p/1e3);var W=Math.ceil((g-p)/1e3),q=Math.ceil(d/1e3);d=1e3*q;for(var X=0;X<W+q;X+=q)f.push(p+1e3*X)}}if(!f.length){p=1e3*Math.floor(p/1e3),e=((g=1e3*Math.ceil(g/1e3))-p)/d;for(var U=0;U<=e;U++)f.push(i.fixedBase(d*U+p,d))}return{max:g,min:p,interval:d,ticks:f,count:f.length}}},function(t,e,n){var i=n(23),r=n(11),a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){t.prototype._initDefaultCfg.call(this),this.isIdentity=!0,this.type="identity",this.value=null},n.getText=function(){return this.value.toString()},n.scale=function(t){return this.value!==t&&r(t)?t:this.range[0]},n.invert=function(){return this.value},e}(i);i.Identity=a,t.exports=a},function(t,e,n){var i=n(2),r=n(23);function a(t,e){return 1===t?1:Math.log(e)/Math.log(t)}var o=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){t.prototype._initDefaultCfg.call(this),this.type="log",this.tickCount=10,this.base=2,this._minTick=null},n.calculateTicks=function(){var t,e=this.base;if(this.min<0)throw new Error("The minimum value must be greater than zero!");var n=a(e,this.max);if(this.min>0)t=Math.floor(a(e,this.min));else{var r=this.values,o=this.max;i(r,function(t){t>0&&t<o&&(o=t)}),o===this.max&&(o=this.max/e),o>1&&(o=1),t=Math.floor(a(e,o)),this._minTick=t,this.positiveMin=o}for(var s=n-t,u=this.tickCount,l=Math.ceil(s/u),c=[],h=t;h<n+l;h+=l)c.push(Math.pow(e,h));return 0===this.min&&c.unshift(0),c},n._getScalePercent=function(t){var e=this.max,n=this.min;if(e===n)return 0;if(t<=0)return 0;var i=this.base,r=this.positiveMin;return r&&(n=1*r/i),t<r?t/r/(a(i,e)-a(i,n)):(a(i,t)-a(i,n))/(a(i,e)-a(i,n))},n.scale=function(t){var e=this._getScalePercent(t),n=this.rangeMin();return n+e*(this.rangeMax()-n)},n.invert=function(t){var e,n=this.base,i=a(n,this.max),r=this.rangeMin(),o=this.rangeMax()-r,s=this.positiveMin;if(s){if(0===t)return 0;var u=1/(i-(e=a(n,s/n)))*o;if(t<u)return t/u*s}else e=a(n,this.min);var l=(t-r)/o*(i-e)+e;return Math.pow(n,l)},e}(n(47));r.Log=o,t.exports=o},function(t,e,n){var i=n(23);function r(t,e){var n=Math.E;return Math.pow(n,Math.log(e)/t)}var a=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){t.prototype._initDefaultCfg.call(this),this.type="pow",this.tickCount=10,this.exponent=2},n.calculateTicks=function(){var t,e=this.exponent,n=Math.ceil(r(e,this.max));if((t=this.min>=0?Math.floor(r(e,this.min)):0)>n){var i=n;n=t,t=i}for(var a=n-t,o=this.tickCount,s=Math.ceil(a/o),u=[],l=t;l<n+s;l+=s)u.push(Math.pow(l,e));return u},n._getScalePercent=function(t){var e=this.max,n=this.min;if(e===n)return 0;var i=this.exponent;return(r(i,t)-r(i,n))/(r(i,e)-r(i,n))},n.scale=function(t){var e=this._getScalePercent(t),n=this.rangeMin();return n+e*(this.rangeMax()-n)},n.invert=function(t){var e=(t-this.rangeMin())/(this.rangeMax()-this.rangeMin()),n=this.exponent,i=r(n,this.max),a=r(n,this.min),o=e*(i-a)+a;return Math.pow(o,n)},e}(n(47));i.Pow=a,t.exports=a},function(t,e,n){var i=n(23),r=n(142),a=n(212),o=n(140),s=n(144),u=n(2),l=n(11),c=n(36),h=n(14),f=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){t.prototype._initDefaultCfg.call(this),this.type="timeCat",this.sortable=!0,this.tickCount=5,this.mask="YYYY-MM-DD"},n.init=function(){var t=this,e=this.values;u(e,function(n,i){e[i]=t._toTimeStamp(n)}),this.sortable&&e.sort(function(t,e){return t-e}),t.ticks||(t.ticks=this.calculateTicks())},n.calculateTicks=function(){var t,e=this.tickCount;e?t=o({maxCount:e,data:this.values,isRounding:this.isRounding}).ticks:t=this.values;return t},n.translate=function(t){t=this._toTimeStamp(t);var e=this.values.indexOf(t);return-1===e&&(e=l(t)&&t<this.values.length?t:NaN),e},n.scale=function(t){var e=this.rangeMin(),n=this.rangeMax(),i=this.translate(t);return e+(1===this.values.length||isNaN(i)?i:i>-1?i/(this.values.length-1):0)*(n-e)},n.getText=function(t){var e="",n=this.translate(t);e=n>-1?this.values[n]:t;var i=this.formatter;return e=parseInt(e,10),e=i?i(e):a.format(e,this.mask)},n.getTicks=function(){var t=this,e=this.ticks,n=[];return u(e,function(e){var i;i=c(e)?e:{text:h(e)?e:t.getText(e),value:t.scale(e),tickValue:e},n.push(i)}),n},n._toTimeStamp=function(t){return s.toTimeStamp(t)},e}(r);i.TimeCat=f,t.exports=f},function(t,e,n){var i=n(212),r=n(2),a=n(7),o=n(14),s=n(23),u=n(47),l=n(332),c=n(144),h=function(t){function e(){return t.apply(this,arguments)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n._initDefaultCfg=function(){t.prototype._initDefaultCfg.call(this),this.type="time",this.mask="YYYY-MM-DD"},n.init=function(){var e=this,n=e.values;if(n&&n.length){var i=[],o=1/0,s=o,u=0;r(n,function(t){var n=e._toTimeStamp(t);if(isNaN(n))throw new TypeError("Invalid Time: "+t);o>n?(s=o,o=n):s>n&&(s=n),u<n&&(u=n),i.push(n)}),n.length>1&&(e.minTickInterval=s-o),(a(e.min)||e._toTimeStamp(e.min)>o)&&(e.min=o),(a(e.max)||e._toTimeStamp(e.max)<u)&&(e.max=u)}t.prototype.init.call(this)},n.calculateTicks=function(){var t=this.min,e=this.max,n=this.tickCount,i=this.tickInterval;return l({min:t,max:e,minCount:n,maxCount:n,interval:i,minInterval:this.minTickInterval}).ticks},n.getText=function(t){var e=this.formatter;return t=this.translate(t),t=e?e(t):i.format(t,this.mask)},n.scale=function(e){return o(e)&&(e=this.translate(e)),t.prototype.scale.call(this,e)},n.translate=function(t){return this._toTimeStamp(t)},n._toTimeStamp=function(t){return c.toTimeStamp(t)},e}(u);s.Time=h,t.exports=h},function(t,e,n){var i=n(75),r=n(48);t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return i(t,function(t){return!r(e,t)})}},function(t,e,n){var i=n(13),r=n(37),a=n(167);t.exports=function(t,e){var n=void 0;if(i(e)&&(n=e),r(e)&&(n=function(t){return a(t,e)}),n)for(var o=0;o<t.length;o+=1)if(n(t[o]))return t[o];return null}},function(t,e,n){var i=n(7),r=n(4);t.exports=function(t,e){for(var n=null,a=0;a<t.length;a++){var o=t[a][e];if(!i(o)){n=r(o)?o[0]:o;break}}return n}},function(t,e,n){var i=n(4);t.exports=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(i(e))for(var r=0;r<e.length;r+=1)t(e[r],n);else n.push(e);return n}},function(t,e,n){var i=n(4),r=n(2);t.exports=function(t){if(!i(t))return t;var e=[];return r(t,function(t){i(t)?r(t,function(t){e.push(t)}):e.push(t)}),e}},function(t,e,n){var i=n(75),r=n(4);t.exports=function(t){if(!(t=i(t,function(t){return!isNaN(t)})).length)return{min:0,max:0};if(r(t[0])){for(var e=[],n=0;n<t.length;n++)e=e.concat(t[n]);t=e}var a=Math.max.apply(null,t);return{min:Math.min.apply(null,t),max:a}}},function(t,e,n){t.exports={contains:n(48),difference:n(338),find:n(339),firstValue:n(340),flatten:n(342),flattenDeep:n(341),getRange:n(343),merge:n(49),pull:n(146),pullAt:n(145),reduce:n(345),remove:n(346),sortBy:n(347),union:n(348),uniq:n(147),valuesOfKey:n(72)}},function(t,e,n){var i=n(4),r=n(37),a=n(2);t.exports=function(t,e,n){if(!i(t)&&!r(t))return t;var o=n;return a(t,function(t,n){o=e(o,t,n)}),o}},function(t,e,n){var i=n(19),r=n(145);t.exports=function(t,e){var n=[];if(!i(t))return n;for(var a=-1,o=[],s=t.length;++a<s;){var u=t[a];e(u,a,t)&&(n.push(u),o.push(a))}return r(t,o),n}},function(t,e,n){var i=n(14),r=n(13),a=n(4);t.exports=function(t,e){var n=void 0;if(r(e))n=function(t,n){return e(t)-e(n)};else{var o=[];i(e)?o.push(e):a(e)&&(o=e),n=function(t,e){for(var n=0;n<o.length;n+=1){var i=o[n];if(t[i]>e[i])return 1;if(t[i]<e[i])return-1}return 0}}return t.sort(n),t}},function(t,e,n){var i=n(2),r=n(52),a=n(147);t.exports=function(){var t=[],e=r(arguments);return i(e,function(e){t=t.concat(e)}),a(t)}},function(t,e){t.exports=function(t,e,n){var i=void 0;return function(){var r=this,a=arguments,o=n&&!i;clearTimeout(i),i=setTimeout(function(){i=null,n||t.apply(r,a)},e),o&&t.apply(r,a)}}},function(t,e){t.exports=function(t,e,n){if(t){if(t.addEventListener)return t.addEventListener(e,n,!1),{remove:function(){t.removeEventListener(e,n,!1)}};if(t.attachEvent)return t.attachEvent("on"+e,n),{remove:function(){t.detachEvent("on"+e,n)}}}}},function(t,e){t.exports=function(t,e){if(t&&t.getBoundingClientRect){var n=t.getBoundingClientRect(),i=document.documentElement.clientTop,r=document.documentElement.clientLeft;return{top:n.top-i,bottom:n.bottom-i,left:n.left-r,right:n.right-r}}return e||null}},function(t,e){t.exports=function(t,e){var n=this.getStyle(t,"height",e);return"auto"===n&&(n=t.offsetHeight),parseFloat(n)}},function(t,e){t.exports=function(t,e){var n=this.getHeight(t,e),i=parseFloat(this.getStyle(t,"borderTopWidth"))||0,r=parseFloat(this.getStyle(t,"paddingTop"))||0,a=parseFloat(this.getStyle(t,"paddingBottom"))||0;return n+i+(parseFloat(this.getStyle(t,"borderBottomWidth"))||0)+r+a}},function(t,e){t.exports=function(t,e){var n=this.getWidth(t,e),i=parseFloat(this.getStyle(t,"borderLeftWidth"))||0,r=parseFloat(this.getStyle(t,"paddingLeft"))||0,a=parseFloat(this.getStyle(t,"paddingRight"))||0;return n+i+(parseFloat(this.getStyle(t,"borderRightWidth"))||0)+r+a}},function(t,e){t.exports=function(){return window.devicePixelRatio?window.devicePixelRatio:2}},function(t,e,n){var i=n(7);t.exports=function(t,e,n){try{return window.getComputedStyle?window.getComputedStyle(t,null)[e]:t.currentStyle[e]}catch(t){return i(n)?null:n}}},function(t,e){t.exports=function(t,e){var n=this.getStyle(t,"width",e);return"auto"===n&&(n=t.offsetWidth),parseFloat(n)}},function(t,e,n){t.exports={addEventListener:n(350),createDom:n(149),getBoundingClientRect:n(351),getHeight:n(352),getOuterHeight:n(353),getOuterWidth:n(354),getRatio:n(355),getStyle:n(356),getWidth:n(357),modifyCSS:n(150),requestAnimationFrame:n(151)}},function(t,e){t.exports=function(t,e){return t["_wrap_"+e]}},function(t,e,n){t.exports={getWrapBehavior:n(359),wrapBehavior:n(361)}},function(t,e){t.exports=function(t,e){if(t["_wrap_"+e])return t["_wrap_"+e];var n=function(n){t[e](n)};return t["_wrap_"+e]=n,n}},function(t,e,n){var i=n(363);t.exports={number2color:i,numberToColor:i,parsePath:n(364),parseRadius:n(365)}},function(t,e){var n={};t.exports=function(t){var e=n[t];if(!e){for(var i=t.toString(16),r=i.length;r<6;r++)i="0"+i;e="#"+i,n[t]=e}return e}},function(t,e,n){var i=n(4),r=n(14),a=n(2),o=/[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/gi,s=/[^\s\,]+/gi;t.exports=function(t){return i(t=t||[])?t:r(t)?(t=t.match(o),a(t,function(e,n){if((e=e.match(s))[0].length>1){var i=e[0].charAt(0);e.splice(1,0,e[0].substr(1)),e[0]=i}a(e,function(t,n){isNaN(t)||(e[n]=+t)}),t[n]=e}),t):void 0}},function(t,e,n){var i=n(4);t.exports=function(t){var e=0,n=0,r=0,a=0;return i(t)?1===t.length?e=n=r=a=t[0]:2===t.length?(e=r=t[0],n=a=t[1]):3===t.length?(e=t[0],n=a=t[1],r=t[2]):(e=t[0],n=t[1],r=t[2],a=t[3]):e=n=r=a=t,{r1:e,r2:n,r3:r,r4:a}}},function(t,e,n){var i=n(19);t.exports=function(t,e){if(!i(t))return-1;var n=Array.prototype.indexOf;if(n)return n.call(t,e);for(var r=-1,a=0;a<t.length;a++)if(t[a]===e){r=a;break}return r}},function(t,e,n){var i=n(13),r=n(76);t.exports=function(t,e,n){return i(n)?!!n(t,e):r(t,e)}},function(t,e,n){var i=n(2),r=n(19);t.exports=function(t,e){if(!r(t))return t;var n=[];return i(t,function(t,i){n.push(e(t,i))}),n}},function(t,e){t.exports=function(t,e){var n=e.toString(),i=n.indexOf(".");if(-1===i)return Math.round(t);var r=n.substr(i+1).length;return r>20&&(r=20),parseFloat(t.toFixed(r))}},function(t,e,n){var i=n(50);t.exports={clamp:n(77),fixedBase:n(369),isDecimal:n(371),isEven:n(372),isInteger:n(373),isNegative:n(374),isNumberEqual:i,isOdd:n(375),isPositive:n(376),maxBy:n(158),minBy:n(377),mod:n(159),snapEqual:i,toDegree:n(160),toInt:n(161),toInteger:n(161),toRadian:n(162)}},function(t,e,n){var i=n(11);t.exports=function(t){return i(t)&&t%1!=0}},function(t,e,n){var i=n(11);t.exports=function(t){return i(t)&&t%2==0}},function(t,e,n){var i=n(11),r=Number.isInteger?Number.isInteger:function(t){return i(t)&&t%1==0};t.exports=r},function(t,e,n){var i=n(11);t.exports=function(t){return i(t)&&t<0}},function(t,e,n){var i=n(11);t.exports=function(t){return i(t)&&t%2!=0}},function(t,e,n){var i=n(11);t.exports=function(t){return i(t)&&t>0}},function(t,e,n){var i=n(4),r=n(13),a=n(2);t.exports=function(t,e){if(i(t)){var n=t[0],o=void 0;o=r(e)?e(t[0]):t[0][e];var s=void 0;return a(t,function(t){(s=r(e)?e(t):t[e])<o&&(n=t,o=s)}),n}}},function(t,e,n){t.exports=n(2)},function(t,e,n){t.exports=n(166)},function(t,e,n){var i=n(48),r=n(169);t.exports=function(t,e){return i(r(t),e)}},function(t,e,n){t.exports={forIn:n(378),has:n(166),hasKey:n(379),hasValue:n(380),keys:n(168),isMatch:n(167),values:n(169)}},function(t,e,n){var i=n(386);function r(t,e,n){var i=null,r=n;return e<r&&(r=e,i="add"),t<r&&(r=t,i="del"),{type:i,min:r}}t.exports=function(t,e){var n=function(t,e){var n=t.length,a=e.length,o=void 0,s=void 0,u=0;if(0===n||0===a)return null;for(var l=[],c=0;c<=n;c++)l[c]=[],l[c][0]={min:c};for(var h=0;h<=a;h++)l[0][h]={min:h};for(var f=1;f<=n;f++){o=t[f-1];for(var p=1;p<=a;p++){s=e[p-1],u=i(o,s)?0:1;var g=l[f-1][p].min+1,d=l[f][p-1].min+1,v=l[f-1][p-1].min+u;l[f][p]=r(g,d,v)}}return l}(t,e),a=t.length,o=e.length,s=[],u=1,l=1;if(n[a][o]!==a){for(var c=1;c<=a;c++){var h=n[c][c].min;l=c;for(var f=u;f<=o;f++)n[c][f].min<h&&(h=n[c][f].min,l=f);u=l,n[c][u].type&&s.push({index:c-1,type:n[c][u].type})}for(var p=s.length-1;p>=0;p--)u=s[p].index,"add"===s[p].type?t.splice(u,0,[].concat(t[u])):t.splice(u,1)}if((a=t.length)<o)for(var g=0;g<o-a;g++)"z"===t[a-1][0]||"Z"===t[a-1][0]?t.splice(a-2,0,t[a-2]):t.push(t[a-1]);return t}},function(t,e){function n(t,e){var n=[],i=[];return t.length&&function t(e,r){if(1===e.length)n.push(e[0]),i.push(e[0]);else{for(var a=[],o=0;o<e.length-1;o++)0===o&&n.push(e[0]),o===e.length-2&&i.push(e[o+1]),a[o]=[(1-r)*e[o][0]+r*e[o+1][0],(1-r)*e[o][1]+r*e[o+1][1]];t(a,r)}}(t,e),{left:n,right:i.reverse()}}function i(t,e,i){if(1===i)return[[].concat(t)];var r=[];if("L"===e[0]||"C"===e[0]||"Q"===e[0])r=r.concat(function(t,e,i){var r=[[t[1],t[2]]];i=i||2;var a=[];"A"===e[0]?(r.push(e[6]),r.push(e[7])):"C"===e[0]?(r.push([e[1],e[2]]),r.push([e[3],e[4]]),r.push([e[5],e[6]])):"S"===e[0]||"Q"===e[0]?(r.push([e[1],e[2]]),r.push([e[3],e[4]])):r.push([e[1],e[2]]);for(var o=r,s=1/i,u=0;u<i-1;u++){var l=n(o,s/(1-s*u));a.push(l.left),o=l.right}return a.push(o),a.map(function(t){var e=[];return 4===t.length&&(e.push("C"),e=e.concat(t[2])),t.length>=3&&(3===t.length&&e.push("Q"),e=e.concat(t[1])),2===t.length&&e.push("L"),e=e.concat(t[t.length-1])})}(t,e,i));else{var a=[].concat(t);"M"===a[0]&&(a[0]="L");for(var o=0;o<=i-1;o++)r.push(a)}return r}t.exports=function(t,e){if(1===t.length)return t;var n=t.length-1,r=e.length-1,a=n/r,o=[];if(1===t.length&&"M"===t[0][0]){for(var s=0;s<r-n;s++)t.push(t[0]);return t}for(var u=0;u<r;u++){var l=Math.floor(a*u);o[l]=(o[l]||0)+1}var c=o.reduce(function(e,r,a){return a===n?e.concat(t[n]):e.concat(i(t[a],t[a+1],r))},[]);return c.unshift(t[0]),"Z"!==e[r]&&"z"!==e[r]||c.push("Z"),c}},function(t,e){function n(t){var e=[];switch(t[0]){case"M":case"L":e.push([t[1],t[2]]);break;case"A":e.push([t[6],t[7]]);break;case"Q":e.push([t[3],t[4]]),e.push([t[1],t[2]]);break;case"T":e.push([t[1],t[2]]);break;case"C":e.push([t[5],t[6]]),e.push([t[1],t[2]]),e.push([t[3],t[4]]);break;case"S":e.push([t[3],t[4]]),e.push([t[1],t[2]]);break;case"H":case"V":e.push([t[1],t[1]])}return e}function i(t,e,i){for(var r=[].concat(t),a=void 0,o=1/(i+1),s=n(e)[0],u=1;u<=i;u++)o*=u,0===(a=Math.floor(t.length*o))?r.unshift([s[0]*o+t[a][0]*(1-o),s[1]*o+t[a][1]*(1-o)]):r.splice(a,0,[s[0]*o+t[a][0]*(1-o),s[1]*o+t[a][1]*(1-o)]);return r}t.exports=function(t,e){if(t.length<=1)return t;for(var r=void 0,a=0;a<e.length;a++)if(t[a][0]!==e[a][0])switch(r=n(t[a]),e[a][0]){case"M":t[a]=["M"].concat(r[0]);break;case"L":t[a]=["L"].concat(r[0]);break;case"A":t[a]=[].concat(e[a]),t[a][6]=r[0][0],t[a][7]=r[0][1];break;case"Q":if(r.length<2){if(!(a>0)){t[a]=e[a];break}r=i(r,t[a-1],1)}t[a]=["Q"].concat(r.reduce(function(t,e){return t.concat(e)},[]));break;case"T":t[a]=["T"].concat(r[0]);break;case"C":if(r.length<3){if(!(a>0)){t[a]=e[a];break}r=i(r,t[a-1],2)}t[a]=["C"].concat(r.reduce(function(t,e){return t.concat(e)},[]));break;case"S":if(r.length<2){if(!(a>0)){t[a]=e[a];break}r=i(r,t[a-1],1)}t[a]=["S"].concat(r.reduce(function(t,e){return t.concat(e)},[]));break;default:t[a]=e[a]}return t}},function(t,e,n){var i=n(387),r=n(173),a=n(174),o=n(170);t.exports={catmullRom2Bezier:o,catmullRomToBezier:o,fillPath:n(383),fillPathByDiff:n(382),formatPath:n(384),intersection:i,pathIntersection:i,parsePathArray:n(171),parsePathString:n(172),pathToAbsolute:r,path2absolute:r,pathTocurve:a,path2curve:a,rectPath:n(175)}},function(t,e,n){var i=n(2);t.exports=function(t,e){if(t.length!==e.length)return!1;var n=!0;return i(t,function(t,i){if(t!==e[i])return n=!1,!1}),n}},function(t,e,n){var i=n(4),r=n(175),a=n(174),o=function(t,e,n,i,r){return t*(t*(-3*e+9*n-9*i+3*r)+6*e-12*n+6*i)-3*e+3*n},s=function(t,e,n,i,r,a,s,u,l){null===l&&(l=1);for(var c=(l=l>1?1:l<0?0:l)/2,h=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],f=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],p=0,g=0;g<12;g++){var d=c*h[g]+c,v=o(d,t,n,r,s),y=o(d,e,i,a,u),m=v*v+y*y;p+=f[g]*Math.sqrt(m)}return c*p},u=function(t,e,n,i,r,a,o,s){if(!(Math.max(t,n)<Math.min(r,o)||Math.min(t,n)>Math.max(r,o)||Math.max(e,i)<Math.min(a,s)||Math.min(e,i)>Math.max(a,s))){var u=(t-n)*(a-s)-(e-i)*(r-o);if(u){var l=((t*i-e*n)*(r-o)-(t-n)*(r*s-a*o))/u,c=((t*i-e*n)*(a-s)-(e-i)*(r*s-a*o))/u,h=+l.toFixed(2),f=+c.toFixed(2);if(!(h<+Math.min(t,n).toFixed(2)||h>+Math.max(t,n).toFixed(2)||h<+Math.min(r,o).toFixed(2)||h>+Math.max(r,o).toFixed(2)||f<+Math.min(e,i).toFixed(2)||f>+Math.max(e,i).toFixed(2)||f<+Math.min(a,s).toFixed(2)||f>+Math.max(a,s).toFixed(2)))return{x:l,y:c}}}},l=function(t,e,n){return e>=t.x&&e<=t.x+t.width&&n>=t.y&&n<=t.y+t.height},c=function(t,e,n,i){return null===t&&(t=e=n=i=0),null===e&&(e=t.y,n=t.width,i=t.height,t=t.x),{x:t,y:e,width:n,w:n,height:i,h:i,x2:t+n,y2:e+i,cx:t+n/2,cy:e+i/2,r1:Math.min(n,i)/2,r2:Math.max(n,i)/2,r0:Math.sqrt(n*n+i*i)/2,path:r(t,e,n,i),vb:[t,e,n,i].join(" ")}},h=function(t,e,n,r,a,o,s,u){i(t)||(t=[t,e,n,r,a,o,s,u]);var l=function(t,e,n,i,r,a,o,s){for(var u=[],l=[[],[]],c=void 0,h=void 0,f=void 0,p=void 0,g=0;g<2;++g)if(0===g?(h=6*t-12*n+6*r,c=-3*t+9*n-9*r+3*o,f=3*n-3*t):(h=6*e-12*i+6*a,c=-3*e+9*i-9*a+3*s,f=3*i-3*e),Math.abs(c)<1e-12){if(Math.abs(h)<1e-12)continue;(p=-f/h)>0&&p<1&&u.push(p)}else{var d=h*h-4*f*c,v=Math.sqrt(d);if(!(d<0)){var y=(-h+v)/(2*c);y>0&&y<1&&u.push(y);var m=(-h-v)/(2*c);m>0&&m<1&&u.push(m)}}for(var x=u.length,b=x,_=void 0;x--;)_=1-(p=u[x]),l[0][x]=_*_*_*t+3*_*_*p*n+3*_*p*p*r+p*p*p*o,l[1][x]=_*_*_*e+3*_*_*p*i+3*_*p*p*a+p*p*p*s;return l[0][b]=t,l[1][b]=e,l[0][b+1]=o,l[1][b+1]=s,l[0].length=l[1].length=b+2,{min:{x:Math.min.apply(0,l[0]),y:Math.min.apply(0,l[1])},max:{x:Math.max.apply(0,l[0]),y:Math.max.apply(0,l[1])}}}.apply(null,t);return c(l.min.x,l.min.y,l.max.x-l.min.x,l.max.y-l.min.y)},f=function(t,e,n,i,r,a,o,s,u){var l=1-u,c=Math.pow(l,3),h=Math.pow(l,2),f=u*u,p=f*u,g=t+2*u*(n-t)+f*(r-2*n+t),d=e+2*u*(i-e)+f*(a-2*i+e),v=n+2*u*(r-n)+f*(o-2*r+n),y=i+2*u*(a-i)+f*(s-2*a+i);return{x:c*t+3*h*u*n+3*l*u*u*r+p*o,y:c*e+3*h*u*i+3*l*u*u*a+p*s,m:{x:g,y:d},n:{x:v,y:y},start:{x:l*t+u*n,y:l*e+u*i},end:{x:l*r+u*o,y:l*a+u*s},alpha:90-180*Math.atan2(g-v,d-y)/Math.PI}},p=function(t,e,n){if(!function(t,e){return t=c(t),e=c(e),l(e,t.x,t.y)||l(e,t.x2,t.y)||l(e,t.x,t.y2)||l(e,t.x2,t.y2)||l(t,e.x,e.y)||l(t,e.x2,e.y)||l(t,e.x,e.y2)||l(t,e.x2,e.y2)||(t.x<e.x2&&t.x>e.x||e.x<t.x2&&e.x>t.x)&&(t.y<e.y2&&t.y>e.y||e.y<t.y2&&e.y>t.y)}(h(t),h(e)))return n?0:[];for(var i=~~(s.apply(0,t)/8),r=~~(s.apply(0,e)/8),a=[],o=[],p={},g=n?0:[],d=0;d<i+1;d++){var v=f.apply(0,t.concat(d/i));a.push({x:v.x,y:v.y,t:d/i})}for(var y=0;y<r+1;y++){var m=f.apply(0,e.concat(y/r));o.push({x:m.x,y:m.y,t:y/r})}for(var x=0;x<i;x++)for(var b=0;b<r;b++){var _=a[x],w=a[x+1],M=o[b],S=o[b+1],C=Math.abs(w.x-_.x)<.001?"y":"x",k=Math.abs(S.x-M.x)<.001?"y":"x",A=u(_.x,_.y,w.x,w.y,M.x,M.y,S.x,S.y);if(A){if(p[A.x.toFixed(4)]===A.y.toFixed(4))continue;p[A.x.toFixed(4)]=A.y.toFixed(4);var P=_.t+Math.abs((A[C]-_[C])/(w[C]-_[C]))*(w.t-_.t),I=M.t+Math.abs((A[k]-M[k])/(S[k]-M[k]))*(S.t-M.t);P>=0&&P<=1&&I>=0&&I<=1&&(n?g++:g.push({x:A.x,y:A.y,t1:P,t2:I}))}}return g};t.exports=function(t,e){return function(t,e,n){t=a(t),e=a(e);for(var i=void 0,r=void 0,o=void 0,s=void 0,u=void 0,l=void 0,c=void 0,h=void 0,f=void 0,g=void 0,d=n?0:[],v=0,y=t.length;v<y;v++){var m=t[v];if("M"===m[0])i=u=m[1],r=l=m[2];else{"C"===m[0]?(i=(f=[i,r].concat(m.slice(1)))[6],r=f[7]):(f=[i,r,i,r,u,l,u,l],i=u,r=l);for(var x=0,b=e.length;x<b;x++){var _=e[x];if("M"===_[0])o=c=_[1],s=h=_[2];else{"C"===_[0]?(o=(g=[o,s].concat(_.slice(1)))[6],s=g[7]):(g=[o,s,o,s,c,h,c,h],o=c,s=h);var w=p(f,g,n);if(n)d+=w;else{for(var M=0,S=w.length;M<S;M++)w[M].segment1=v,w[M].segment2=x,w[M].bez1=f,w[M].bez2=g;d=d.concat(w)}}}}}return d}(t,e)}},function(t,e,n){var i=n(2),r=n(37),a=Object.prototype.hasOwnProperty;t.exports=function(t,e){if(null===t||!r(t))return{};var n={};return i(e,function(e){a.call(t,e)&&(n[e]=t[e])}),n}},function(t,e,n){var i={lc:n(390),lowerCase:n(176),lowerFirst:n(177),substitute:n(391),uc:n(392),upperCase:n(178),upperFirst:n(179)};t.exports=i},function(t,e,n){t.exports=n(176)},function(t,e){t.exports=function(t,e){return t&&e?t.replace(/\\?\{([^{}]+)\}/g,function(t,n){return"\\"===t.charAt(0)?t.slice(1):void 0===e[n]?"":e[n]}):t}},function(t,e,n){t.exports=n(178)},function(t,e){t.exports=function(t,e,n){var i=void 0,r=void 0,a=void 0,o=void 0,s=0;n||(n={});var u=function(){s=!1===n.leading?0:Date.now(),i=null,o=t.apply(r,a),i||(r=a=null)},l=function(){var l=Date.now();s||!1!==n.leading||(s=l);var c=e-(l-s);return r=this,a=arguments,c<=0||c>e?(i&&(clearTimeout(i),i=null),s=l,o=t.apply(r,a),i||(r=a=null)):i||!1===n.trailing||(i=setTimeout(u,c)),o};return l.cancel=function(){clearTimeout(i),s=0,i=r=a=null},l}},function(t,e,n){var i=n(15),r={getType:n(180),isArray:n(4),isArrayLike:n(19),isBoolean:n(181),isFunction:n(13),isNil:n(7),isNull:n(397),isNumber:n(11),isObject:n(36),isObjectLike:n(79),isPlainObject:n(37),isPrototype:n(183),isType:i,isUndefined:n(399),isString:n(14),isRegExp:n(398),isDate:n(182),isArguments:n(395),isError:n(396)};t.exports=r},function(t,e,n){var i=n(15);t.exports=function(t){return i(t,"Arguments")}},function(t,e,n){var i=n(15);t.exports=function(t){return i(t,"Error")}},function(t,e){t.exports=function(t){return null===t}},function(t,e,n){var i=n(15);t.exports=function(t){return i(t,"RegExp")}},function(t,e){t.exports=function(t){return void 0===t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){return t&&t.__esModule?t:{default:t}}(n(21));e.default=i.default.generateBaseTypedComponent("Axis")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=o(n(40)),a=o(n(25));function o(t){return t&&t.__esModule?t:{default:t}}(0,o(n(214)).default)(r.default.PureComponent,"`React.PureComponent` needs React >=15.3.0");var s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,r.default.PureComponent||r.default.Component),i(e,[{key:"render",value:function(){var t=this.props,e=t.width,n=t.height,i=t.placeholder;return r.default.createElement("div",{style:{width:e,height:n}},i)}}]),e}();s.propTypes={width:a.default.oneOfType([a.default.string,a.default.number]),height:a.default.oneOfType([a.default.string,a.default.number]),placeholder:a.default.node},s.defaultProps={width:"100%",placeholder:r.default.createElement("div",{style:{position:"relative",top:"48%",textAlign:"center"}},"暂无数据")},e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=l(n(40)),o=(l(n(38)),l(n(403))),s=l(n(401)),u=(l(n(25)),l(n(405)));function l(t){return t&&t.__esModule?t:{default:t}}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function p(t){var e=!0;return null!=t&&0!==t.length||(e=!1),!!e}var g=function(t){function e(){var t,n,i;c(this,e);for(var r=arguments.length,o=Array(r),s=0;s<r;s++)o[s]=arguments[s];return n=i=h(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(o))),i._refCallback=function(t){t&&(i.chart=t.getG2Instance())},i.hasViewSource=function(){var t=!1;return a.default.Children.map(i.props.children,function(e){!t&&"function"==typeof e.type&&"View"===e.type.name&&e.props.data&&p(e.props.data)&&(t=!0)}),t},h(i,n)}return f(e,a.default.PureComponent||a.default.Component),r(e,[{key:"getG2Instance",value:function(){return this.chart}},{key:"render",value:function(){var t=this.props,e=t.data,n=t.width,r=t.height,u=t.placeholder,l=t.className,c=t.style;return a.default.createElement("div",{className:l,style:c},p(e)||this.hasViewSource()||!u?a.default.createElement(o.default,i({ref:this._refCallback},this.props)):a.default.createElement(s.default,{width:n,height:r,placeholder:!0===u?void 0:u}))}}]),e}(),d=function(t){function e(){return c(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,a.default.Component),r(e,[{key:"render",value:function(){return a.default.createElement(u.default,null,a.default.createElement(g,this.props))}}]),e}();e.default=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=n(40),o=l(a),s=l(n(25)),u=l(n(417));function l(t){return t&&t.__esModule?t:{default:t}}var c=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return h.call(n),n.name="Chart",n.gId=0,n.id=n.createId(),n.g2Processor=new u.default,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.Component),r(e,[{key:"getChildContext",value:function(){return{addElement:this.addElement,updateElement:this.updateElement,deleteElement:this.deleteElement,createId:this.createId,getParentInfo:this.getParentInfo,getViewId:this.getViewId}}},{key:"componentDidMount",value:function(){this.addElement(this.name,this.id,i({},this.props,{container:this.containerWrap})),this.chart=this.g2Processor.createG2Instance(),this.notifyG2Instance()}},{key:"componentDidUpdate",value:function(){this.updateElement(this.name,this.id,i({},this.props,{container:this.containerWrap}));var t=this.g2Processor.batchedUpdate();this.chart!==t&&(this.chart=t,this.notifyG2Instance())}},{key:"componentWillUnmount",value:function(){this.g2Processor.destory(),this.chart=null,this.containerWrap=null}},{key:"getG2Instance",value:function(){return this.chart}},{key:"notifyG2Instance",value:function(){this.props.onGetG2Instance&&this.props.onGetG2Instance(this.chart)}},{key:"render",value:function(){return o.default.createElement("div",{ref:this.refHandle},this.props.children)}}]),e}();c.propTypes={data:s.default.oneOfType([s.default.arrayOf(s.default.object),s.default.object]),scale:s.default.oneOfType([s.default.object,s.default.array]),animate:s.default.bool,width:s.default.number,height:s.default.number.isRequired,onGetG2Instance:s.default.func},c.childContextTypes={addElement:s.default.func,updateElement:s.default.func,deleteElement:s.default.func,createId:s.default.func,getParentInfo:s.default.func,getViewId:s.default.func};var h=function(){var t=this;this.getViewId=function(){},this.getParentInfo=function(){return{id:t.id,name:t.name}},this.createId=function(){return t.gId+=1,t.gId},this.addElement=function(e,n,i,r,a){return t.g2Processor.addElement(e,n,i,r,a)},this.updateElement=function(e,n,i,r,a){t.g2Processor.updateElement(e,n,i,r,a)},this.deleteElement=function(e,n,i){t.g2Processor.deleteElement(e,n,i)},this.refHandle=function(e){t.containerWrap||(t.containerWrap=e)}};e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){return t&&t.__esModule?t:{default:t}}(n(21));e.default=i.default.generateBaseTypedComponent("Coord")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(t){return t&&t.__esModule?t:{default:t}}(n(40));var a=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.state={hasError:!1},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,r.default.Component),i(e,[{key:"componentDidCatch",value:function(t,e){this.setState({hasError:!0})}},{key:"unstable_handleError",value:function(t,e){this.setState({hasError:!0})}},{key:"render",value:function(){return this.state.hasError?r.default.createElement("h1",null,"bizcharts error."):this.props.children}}]),e}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(274);var i=function(t){return t&&t.__esModule?t:{default:t}}(n(21));e.default=i.default.generateBaseTypedComponent("Facet")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(281);var i=function(t){return t&&t.__esModule?t:{default:t}}(n(21));e.default=i.default.generateBaseTypedComponent("Geom")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){return t&&t.__esModule?t:{default:t}}(n(21));var r=i.default.generateBaseTypedComponent("Guide");r.Line=i.default.generateBaseTypedComponent("GuideLine"),r.Image=i.default.generateBaseTypedComponent("GuideImage"),r.Text=i.default.generateBaseTypedComponent("GuideText"),r.Region=i.default.generateBaseTypedComponent("GuideRegion"),r.Html=i.default.generateBaseTypedComponent("GuideHtml"),r.Arc=i.default.generateBaseTypedComponent("GuideArc"),r.RegionFilter=i.default.generateBaseTypedComponent("GuideRegionFilter"),r.DataMarker=i.default.generateBaseTypedComponent("GuideDataMarker"),r.DataRegion=i.default.generateBaseTypedComponent("GuideDataRegion"),e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=s(n(515)),a=s(n(21)),o=s(n(25));function s(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,"Label"))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),i(e,[{key:"componentWillMount",value:function(){var t=this.context.getParentInfo();(0,r.default)("Geom"===t.name,"`<Label />` must be wrapped in `<Geom />`"),this.id=this.context.createId(),this.context.addElement(this.name,this.id,this.props,this.context.getParentInfo(),this.context.getViewId())}}]),e}();u.contextTypes={addElement:o.default.func,updateElement:o.default.func,deleteElement:o.default.func,createId:o.default.func,getParentInfo:o.default.func,getViewId:o.default.func},u.childContextTypes={addElement:o.default.func,updateElement:o.default.func,deleteElement:o.default.func,createId:o.default.func,getParentInfo:o.default.func,getViewId:o.default.func},e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=a(n(21)),r=a(n(25));function a(t){return t&&t.__esModule?t:{default:t}}var o=function(t){function e(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,"Legend"))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),e}();o.contextTypes={addElement:r.default.func,updateElement:r.default.func,deleteElement:r.default.func,createId:r.default.func,getParentInfo:r.default.func,getViewId:r.default.func},o.childContextTypes={addElement:r.default.func,updateElement:r.default.func,deleteElement:r.default.func,createId:r.default.func,getParentInfo:r.default.func,getViewId:r.default.func},o.defaultProps={visible:!0},e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){return t&&t.__esModule?t:{default:t}}(n(21));e.default=i.default.generateBaseTypedComponent("Tooltip")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=o(n(21)),a=o(n(25));function o(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,"View"));return n.getViewId=function(){return n.id},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,r.default),i(e,[{key:"getChildContext",value:function(){return{addElement:this.context.addElement,updateElement:this.context.updateElement,deleteElement:this.context.deleteElement,createId:this.context.createId,getParentInfo:this.getParentInfo,getViewId:this.getViewId}}}]),e}();s.contextTypes={addElement:a.default.func,updateElement:a.default.func,deleteElement:a.default.func,createId:a.default.func,getParentInfo:a.default.func,getViewId:a.default.func},s.childContextTypes={addElement:a.default.func,updateElement:a.default.func,deleteElement:a.default.func,createId:a.default.func,getParentInfo:a.default.func,getViewId:a.default.func},e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Facet=e.Label=e.Guide=e.View=e.Geom=e.Tooltip=e.Legend=e.Axis=e.Coord=e.Chart=void 0;var i=p(n(402)),r=p(n(404)),a=p(n(400)),o=p(n(410)),s=p(n(411)),u=p(n(407)),l=p(n(412)),c=p(n(408)),h=p(n(409)),f=p(n(406));function p(t){return t&&t.__esModule?t:{default:t}}e.Chart=i.default,e.Coord=r.default,e.Axis=a.default,e.Legend=o.default,e.Tooltip=s.default,e.Geom=u.default,e.View=l.default,e.Guide=c.default,e.Label=h.default,e.Facet=f.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i={Chart:"addChart",Coord:"addCoord",Geom:"addGeom",Axis:"addAxis",Tooltip:"addTooltip",Legend:"addLegend",Label:"addLabel",View:"addView",Guide:"addGuide",GuideLine:"addGuideLine",GuideImage:"addGuideImage",GuideText:"addGuideText",GuideRegion:"addGuideRegion",GuideHtml:"addGuideHtml",GuideArc:"addGuideArc",GuideRegionFilter:"addGuideRegionFilter",GuideDataMarker:"addGuideDataMarker",GuideDataRegion:"addGuideDataRegion",Facet:"addFacet"},r={addElement:function(t,e,n){this[i[t]](e,n,n.id,n.viewId,n.parentInfo)},getConfigContainer:function(t,e){return e&&(t.views||(t.views={}),(t=t.views[e])||((t={}).views[e]=t)),t},addUniqueElement:function(t,e,n,i,r){var a=this.getConfigContainer(t,r);return a[e],a[e]=n,i},addChart:function(t,e,n){return this.addUniqueElement(t,"chart",e,n,null)},addView:function(t,e,n){return t.views||(t.views={}),t.views[n]=e,n},addAxis:function(t,e,n,i){var r=this.getConfigContainer(t,i);return r.axises||(r.axises={}),r.axises[n]=e,n},addCoord:function(t,e,n,i){return this.addUniqueElement(t,"coord",e,n,i)},addGeom:function(t,e,n,i,r){var a=this.getConfigContainer(t,i);return a.geoms||(a.geoms={}),a.geoms[n]?r?a.geoms[n].label=e.label:(a.geoms[n].label||console.log("geom label error"),e.label=a.geoms[n].label,a.geoms[n]=e):a.geoms[n]=e,n},addLabel:function(t,e,n,i,r){var a=this.getConfigContainer(t,i);return a.geoms||(a.geoms={}),this.addGeom(t,{label:e},r.id,i,!0),n},addTooltip:function(t,e,n,i){return this.addUniqueElement(t,"tooltip",e,n,i)},addFacet:function(t,e,n,i){return this.addUniqueElement(t,"facet",e,n,i)},addLegend:function(t,e,n,i){var r=this.getConfigContainer(t,i);return r.legends||(r.legends={}),r.legends[n]=e,n},addGuide:function(t,e,n,i){return this.addUniqueElement(t,"guide",e,n,i)},addTypedGuide:function(t,e,n,i,r,a){var o=this.getConfigContainer(t,r),s=o.guide;return s||(this.addUniqueElement("guide",{},a.id,r),s=o.guide),s.elements||(s.elements={}),n.type=e,s.elements[i]=n,i},addGuideLine:function(t,e,n,i,r){this.addTypedGuide(t,"line",e,n,i,r)},addGuideImage:function(t,e,n,i,r){this.addTypedGuide(t,"image",e,n,i,r)},addGuideText:function(t,e,n,i,r){this.addTypedGuide(t,"text",e,n,i,r)},addGuideRegion:function(t,e,n,i,r){this.addTypedGuide(t,"region",e,n,i,r)},addGuideHtml:function(t,e,n,i,r){this.addTypedGuide(t,"html",e,n,i,r)},addGuideArc:function(t,e,n,i,r){this.addTypedGuide(t,"arc",e,n,i,r)},addGuideRegionFilter:function(t,e,n,i,r){this.addTypedGuide(t,"regionFilter",e,n,i,r)},addGuideDataMarker:function(t,e,n,i,r){this.addTypedGuide(t,"dataMarker",e,n,i,r)},addGuideDataRegion:function(t,e,n,i,r){this.addTypedGuide(t,"dataRegion",e,n,i,r)}};e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i={Chart:"deleteChart",Coord:"deleteCoord",Geom:"deleteGeom",Axis:"deleteAxis",Tooltip:"deleteTooltip",Legend:"deleteLegend",Label:"deleteLabel",View:"deleteView",Guide:"deleteGuide",GuideLine:"deleteTypedGuide",GuideImage:"deleteTypedGuide",GuideText:"deleteTypedGuide",GuideRegion:"deleteTypedGuide",GuideHtml:"deleteTypedGuide",GuideArc:"deleteTypedGuide",Facet:"deleteFacet"},r={Geom:!0,Label:!0,Facet:!0},a={deleteAxis:function(t,e,n){var i=e.axises[n].props;t.axis(i.name,!1)},deleteTooltip:function(t){t.tooltip(!1)},deleteCoord:function(t){t.coord("rect",{})},deleteLegend:function(t,e,n){var i=e.legends[n].props;t.legend.apply(t,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(i.name?[i.name,!1]:[!1]))},deleteGuide:function(t){t.guide().clear()},deleteView:function(t,e,n){e.views[n].g2Instance&&(t.removeView(e.views[n].g2Instance),delete e.views[n].g2Instance)},deleteViewElement:function(t,e,n,a){var o=this;Object.keys(n).forEach(function(t){var n=a[t],s=n.viewId;s&&(r[n.name]?e.views[s].needReExecute=!0:e.views[s].g2Instance&&o[i[n.name]]&&o[i[n.name]](e.views[s].g2Instance,e.views[s],n.id))})},needReExecute:function(t,e){for(var n in t)if(r[e[n].name]&&!e[n].viewId)return!0;return!1},synchronizeG2Delete:function(t,e,n,r){var a=this;Object.keys(n).forEach(function(n){var o=i[r[n].name];a[o]&&!r[n].viewId&&a[o](t,e,n)}),this.deleteViewElement(t,e,n,r)}};e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r=c(n(214)),a=n(81),o=c(n(185)),s=c(n(187)),u=c(n(80)),l=c(n(186));function c(t){return t&&t.__esModule?t:{default:t}}function h(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function f(t,e){var n={};for(var i in t)e.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(t,i)&&(n[i]=t[i]);return n}var p=o.default.COORD_FUNC_PROPS,g=o.default.GEOM_FUNC_PROPS,d={needRebuildChart:function(t){if(null==t.chart.props||null==t.chart.updateProps)return!1;var e=t.chart.props,n=t.chart.updateProps;return!(a.Util.shallowEqual(e.padding,n.padding)&&a.Util.shallowEqual(e.background,n.background)&&a.Util.shallowEqual(e.plotBackground,n.plotBackground)&&a.Util.shallowEqual(e.pixelRatio,n.pixelRatio)&&a.Util.shallowEqual(e.theme,n.theme))},needReExecute:function(t){var e=t.geoms;if(null==e)return!1;for(var n in e)if(e[n].props&&e[n].updateProps&&(e[n].props.type!==e[n].updateProps.type||e[n].props.color&&!e[n].updateProps.color||e[n].props.size&&!e[n].updateProps.size||e[n].props.shape&&!e[n].updateProps.shape))return!0;return!1},synchronizeG2Update:function(t,e){this.updateChart(t,e.chart),this.updateAxises(t,e.axises),this.updateTooltip(t,e),this.updateCoord(t,e),this.updateLegends(t,e.legends),this.updateGeoms(t,e.geoms),this.updateGuide(t,e.guide),this.updateFacet(t,e),this.updateViews(t,e)},updateChart:function(t,e){if(e){var n=e.props,i=e.updateProps,r=n.width,o=n.height,s=n.animate,u=n.data,c=n.scale,h=i.width,f=i.height,p=i.animate,g=i.data,d=i.scale;u!==g&&t.changeData(g),a.Util.shallowEqual(c,d)||(a.Util.isArray(d)?t.scale(d[0],d[1]):t.scale(d)),s!==p&&t.animate(p),r!==h&&o!==f?t.changeSize(h,f):r!==h?t.changeWidth(h):o!==f&&t.changeHeight(f),l.default.updateEvents(t,l.default.chartEvents,e.props,i),l.default.updateBaseEvents(t,e.updateProps,i)}},updateAxis:function(t,e){var n=e.props,i=n.name,o=n.visible,s=f(n,["name","visible"]),u=e.updateProps,l=u.name,c=u.visible,h=f(u,["name","visible"]);(0,r.default)(i===l,"`name` propertry should not be changed in `<Axis />`"),o!==c&&t.axis(i,!!c),a.Util.shallowEqual(s,h)||t.axis(i,h)},updateAxises:function(t,e){if(e)for(var n in e)e[n]&&e[n].props&&e[n].updateProps&&this.updateAxis(t,e[n])},updateTooltip:function(t,e){if(e.tooltip){var n=e.tooltip.props,r=e.tooltip.updateProps;null==n&&null==r||a.Util.shallowEqual(n,r)||t.tooltip(i({},r))}},updateCoord:function(t,e){var n=e.coord;if(n){var i=n.props,r=n.updateProps;if(null!=i&&null!=r){var o=a.Util.without(r,p.concat(["type"]));if(!a.Util.shallowEqual(i,r)){var s=t.coord(r.type,o);n.g2Instance=s,a.Prop.init(p,r,function(t,e){s[e].apply(s,h(t))})}}}},updateLegend:function(t,e){var n=e.props,i=e.updateProps;if(i&&!a.Util.shallowEqual(n,i)){var r=i.name,o=i.visible,s=f(i,["name","visible"]),u=o?s:o;t.legend.apply(t,h(r?[r,u]:[u]))}},updateLegends:function(t,e){if(null!=e)for(var n in e)e[n]&&this.updateLegend(t,e[n])},updateLabel:function(t,e,n){if(null!=e&&null!=n){var i=e.content,r=f(e,["content"]),o=n.content,s=f(n,["content"]);a.Util.shallowEqual(r,s)&&a.Util.shallowEqual(i,o)||(a.Util.isArray(o)?t.label(o[0],o[1],s):t.label(o,s))}},updateGeom:function(t,e){var n=e.props,i=e.updateProps;if(n&&i&&n.type===i.type){var r=e.g2Instance;if(a.Util.shallowEqual(n,i))e.label&&this.updateLabel(r,e.label.props,e.label.updateProps);else{var o=n.adjust,s=f(n,["adjust"]),u=i.adjust,l=f(i,["adjust"]);(o||u)&&r.adjust(u),a.Prop.update(g,s,l,function(t,e){r[e].apply(r,h(t))}),e.label&&this.updateLabel(r,e.label.props,e.label.updateProps)}}},updateGeoms:function(t,e){if(null==e)return!1;for(var n in e)e[n]&&this.updateGeom(t,e[n]);return!1},isTypedGuideChanged:function(t){return!a.Util.shallowEqual(t.props,t.updateProps)},updateGuide:function(t,e){if(e&&e.elements){var n=e.elements,i=!1;for(var r in n)if(n[r]&&(n[r].updateProps||this.isTypedGuideChanged(n[r]))){i=!0;break}i&&(u.default.mergeGuide(e,!0),t.guide().clear(),s.default.guide(t,e))}},updateView:function(t,e){if(e&&e.props&&e.updateProps&&"Facet"!==e.parentInfo.name){var n=e.g2Instance,i=e.props,r=e.updateProps,o=i.scale,s=i.data,u=i.animate,l=i.axis,c=i.filter,h=r.scale,f=r.animate,p=r.data,g=r.axis,d=r.filter;u!==f&&n.animate(f),s!==p&&n.changeData(p),a.Util.shallowEqual(o,h)||n.scale(h),a.Util.shallowEqual(c,d)||d.forEach(function(t){n.filter(t[0],t[1])}),l!==g&&n.axis(g),this.updateCoord(n,e),this.updateAxises(n,e.axises),this.updateGeoms(n,e.geoms),this.updateGuide(n,e.guide)}},updateViews:function(t,e){var n=e.views;if(n)for(var i in n){var r=n[i];r&&(r.needReExecute||this.needReExecute(r))?(s.default.synchronizeG2View(r.g2Instance,r),n[i].needReExecute=!1):this.updateView(t,r)}},updateFacet:function(t,e){var n=e.facet;if(n){var i=n.props,r=n.updateProps;if(null!=i&&null!=r){var o=i.type,u=f(i,["type"]),l=r.type,c=f(r,["type"]);o===l&&a.Util.shallowEqual(u,c)||(n.props=r,s.default.facet(t,e))}}}};e.default=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=h(n(414)),o=h(n(80)),s=h(n(416)),u=h(n(415)),l=h(n(187)),c=n(81);function h(t){return t&&t.__esModule?t:{default:t}}function f(t,e){var n={};for(var i in t)e.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(t,i)&&(n[i]=t[i]);return n}var p=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.config={},this.elementInfos={},this.added=!1,this.initedG2=!1,this.updated=!1,this.deleted=!1,this.deleteInfos={}}return r(t,[{key:"calUpdateFlag",value:function(t,e){var n=this.elementInfos[e].props,i=(n.children,f(n,["children"])),r=this.elementInfos[e].updateProps,a=(r.children,f(r,["children"]));if("Chart"===t||"View"===t){var o=i.data,s=f(i,["data"]),u=a.data,l=f(a,["data"]);o===u&&c.Util.isEqual(s,l)||(this.updated=!0)}else c.Util.isEqual(i,a)||(this.updated=!0)}},{key:"addElement",value:function(t,e,n,r,o){!this.chart&&this.initedG2||(this.added=!0,this.elementInfos[e]={id:e,viewId:o,parentInfo:r,name:t,props:i({},n)},r&&!this.elementInfos[r.id]&&(this.elementInfos[r.id]={id:r.id,name:r.name}),a.default.addElement(t,this.config,this.elementInfos[e]))}},{key:"updateElement",value:function(t,e,n){this.elementInfos[e].updateProps=i({},n),this.calUpdateFlag(t,e)}},{key:"deleteElement",value:function(t,e){this.chart&&(this.deleteInfos[e]=e,this.deleted=!0)}},{key:"createG2Instance",value:function(){var t=this.config,e=l.default.createChart(t,this.elementInfos);return l.default.executeChartConfig(e,t,this.elementInfos),l.default.synchronizeG2Add(e,t,this.elementInfos),e.render(),this.chart=e,this.initedG2=!0,this.resetStates(),e}},{key:"destory",value:function(){this.chart.destroy(),this.chart=null}},{key:"resetStates",value:function(){var t=this.elementInfos;for(var e in t)t[e].updateProps&&delete t[e].updateProps,this.deleteInfos[e]&&delete t[e];this.added=!1,this.updated=!1,this.deleteInfos={}}},{key:"reExecuteChart",value:function(){return this.chart.clear(),o.default.merge(this.config,this.deleteInfos,this.elementInfos,!0),l.default.executeChartConfig(this.chart,this.config,this.elementInfos),l.default.synchronizeG2Add(this.chart,this.config,this.elementInfos),this.chart.repaint(),this.resetStates(),this.chart}},{key:"batchedUpdate",value:function(){return null==this.chart?null:this.config.chart.props.forceUpdate||s.default.needRebuildChart(this.config)?(o.default.merge(this.config,this.deleteInfos,this.elementInfos,!0),this.chart.destroy(),this.chart="destroy",this.createG2Instance()):u.default.needReExecute(this.deleteInfos,this.elementInfos)||s.default.needReExecute(this.config)?(this.reExecuteChart(),this.chart):(this.deleted&&(u.default.synchronizeG2Delete(this.chart,this.config,this.deleteInfos,this.elementInfos),o.default.mergeDelete(this.config,this.deleteInfos,this.elementInfos)),this.added&&l.default.synchronizeG2Add(this.chart,this.config),this.updated&&s.default.synchronizeG2Update(this.chart,this.config),(this.added||this.deleted||this.updated)&&this.chart.repaint(),o.default.mergeUpdate(this.config,!1),this.resetStates(),this.chart)}}]),t}();e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){return t&&t.__esModule?t:{default:t}}(n(38));e.default={init:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1],n=arguments[2];i.default.each(t,function(t){var r=e[t];void 0!==r&&(i.default.isArray(r)||(r=[r]),n(r,t))})},update:function(t,e,n,r){var a=void 0,o=void 0;i.default.each(t,function(t){a=e[t],o=n[t],i.default.shallowEqual(o,a)||(i.default.isArray(o)||(o=[o]),r(o,t))})}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={}},function(t,e,n){"use strict";e.a=g;var i=n(83),r=n(82),a=n(188),o=-.14861,s=1.78277,u=-.29227,l=-.90649,c=1.97294,h=c*l,f=c*s,p=s*u-l*o;function g(t,e,i,o){return 1===arguments.length?function(t){if(t instanceof d)return new d(t.h,t.s,t.l,t.opacity);t instanceof r.a||(t=n.i(r.b)(t));var e=t.r/255,i=t.g/255,o=t.b/255,s=(p*o+h*e-f*i)/(p+h-f),g=o-s,v=(c*(i-s)-u*g)/l,y=Math.sqrt(v*v+g*g)/(c*s*(1-s)),m=y?Math.atan2(v,g)*a.a-120:NaN;return new d(m<0?m+360:m,y,s,t.opacity)}(t):new d(t,e,i,null==o?1:o)}function d(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}n.i(i.a)(d,g,n.i(i.b)(r.c,{brighter:function(t){return t=null==t?r.d:Math.pow(r.d,t),new d(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?r.e:Math.pow(r.e,t),new d(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*a.b,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),i=Math.cos(t),h=Math.sin(t);return new r.a(255*(e+n*(o*i+s*h)),255*(e+n*(u*i+l*h)),255*(e+n*(c*i)),this.opacity)}}))},function(t,e,n){"use strict";e.b=g,e.a=_;var i=n(83),r=n(82),a=n(188),o=.96422,s=1,u=.82521,l=4/29,c=6/29,h=3*c*c,f=c*c*c;function p(t){if(t instanceof d)return new d(t.l,t.a,t.b,t.opacity);if(t instanceof w){if(isNaN(t.h))return new d(t.l,0,0,t.opacity);var e=t.h*a.b;return new d(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof r.a||(t=n.i(r.b)(t));var i,l,c=x(t.r),h=x(t.g),f=x(t.b),p=v((.2225045*c+.7168786*h+.0606169*f)/s);return c===h&&h===f?i=l=p:(i=v((.4360747*c+.3850649*h+.1430804*f)/o),l=v((.0139322*c+.0971045*h+.7141733*f)/u)),new d(116*p-16,500*(i-p),200*(p-l),t.opacity)}function g(t,e,n,i){return 1===arguments.length?p(t):new d(t,e,n,null==i?1:i)}function d(t,e,n,i){this.l=+t,this.a=+e,this.b=+n,this.opacity=+i}function v(t){return t>f?Math.pow(t,1/3):t/h+l}function y(t){return t>c?t*t*t:h*(t-l)}function m(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function x(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function b(t){if(t instanceof w)return new w(t.h,t.c,t.l,t.opacity);if(t instanceof d||(t=p(t)),0===t.a&&0===t.b)return new w(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*a.a;return new w(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function _(t,e,n,i){return 1===arguments.length?b(t):new w(t,e,n,null==i?1:i)}function w(t,e,n,i){this.h=+t,this.c=+e,this.l=+n,this.opacity=+i}n.i(i.a)(d,g,n.i(i.b)(r.c,{brighter:function(t){return new d(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new d(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return e=o*y(e),t=s*y(t),n=u*y(n),new r.a(m(3.1338561*e-1.6168667*t-.4906146*n),m(-.9787684*e+1.9161415*t+.033454*n),m(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),n.i(i.a)(w,_,n.i(i.b)(r.c,{brighter:function(t){return new w(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new w(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return p(this).rgb()}}))},function(t,e,n){"use strict";var i={value:function(){}};function r(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+"")||t in i)throw new Error("illegal type: "+t);i[t]=[]}return new a(i)}function a(t){this._=t}function o(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function s(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=i,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}a.prototype=r.prototype={constructor:a,on:function(t,e){var n,i=this._,r=function(t,e){return t.trim().split(/^|\s+/).map(function(t){var n="",i=t.indexOf(".");if(i>=0&&(n=t.slice(i+1),t=t.slice(0,i)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}(t+"",i),a=-1,u=r.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<u;)if(n=(t=r[a]).type)i[n]=s(i[n],t.name,e);else if(null==e)for(n in i)i[n]=s(i[n],t.name,null);return this}for(;++a<u;)if((n=(t=r[a]).type)&&(n=o(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new a(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),a=0;a<n;++a)r[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(i=this._[t]).length;a<n;++a)i[a].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,a=i.length;r<a;++r)i[r].value.apply(e,n)}},e.a=r},function(t,e,n){"use strict";var i=n(422);n.d(e,"a",function(){return i.a})},function(t,e,n){"use strict";n.d(e,"b",function(){return i}),n.d(e,"c",function(){return r}),n.d(e,"a",function(){return a});var i=function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n}(1.70158),r=function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),a=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158)},function(t,e,n){"use strict";e.b=function(t){return 1-p(1-t)},e.a=p,e.c=function(t){return((t*=2)<=1?1-p(1-t):p(t-1)+1)/2};var i=4/11,r=6/11,a=8/11,o=.75,s=9/11,u=10/11,l=.9375,c=21/22,h=63/64,f=1/i/i;function p(t){return(t=+t)<i?f*t*t:t<a?f*(t-=r)*t+o:t<u?f*(t-=s)*t+l:f*(t-=c)*t+h}},function(t,e,n){"use strict";e.b=function(t){return 1-Math.sqrt(1-t*t)},e.c=function(t){return Math.sqrt(1- --t*t)},e.a=function(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}},function(t,e,n){"use strict";e.b=function(t){return t*t*t},e.c=function(t){return--t*t*t+1},e.a=function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}},function(t,e,n){"use strict";n.d(e,"b",function(){return r}),n.d(e,"a",function(){return a}),n.d(e,"c",function(){return o});var i=2*Math.PI,r=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=i);function a(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return a.amplitude=function(e){return t(e,n*i)},a.period=function(n){return t(e,n)},a}(1,.3),a=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=i);function a(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return a.amplitude=function(e){return t(e,n*i)},a.period=function(n){return t(e,n)},a}(1,.3),o=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=i);function a(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return a.amplitude=function(e){return t(e,n*i)},a.period=function(n){return t(e,n)},a}(1,.3)},function(t,e,n){"use strict";e.b=function(t){return Math.pow(2,10*t-10)},e.c=function(t){return 1-Math.pow(2,-10*t)},e.a=function(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}},function(t,e,n){"use strict";e.a=function(t){return+t}},function(t,e,n){"use strict";n.d(e,"b",function(){return i}),n.d(e,"c",function(){return r}),n.d(e,"a",function(){return a});var i=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),r=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),a=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3)},function(t,e,n){"use strict";e.b=function(t){return t*t},e.c=function(t){return t*(2-t)},e.a=function(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}},function(t,e,n){"use strict";e.b=function(t){return 1-Math.cos(t*r)},e.c=function(t){return Math.sin(t*r)},e.a=function(t){return(1-Math.cos(i*t))/2};var i=Math.PI,r=i/2},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(85);n.d(e,"interpolate",function(){return i.a});var r=n(190);n.d(e,"interpolateArray",function(){return r.a});var a=n(84);n.d(e,"interpolateBasis",function(){return a.a});var o=n(191);n.d(e,"interpolateBasisClosed",function(){return o.a});var s=n(193);n.d(e,"interpolateDate",function(){return s.a});var u=n(53);n.d(e,"interpolateNumber",function(){return u.a});var l=n(194);n.d(e,"interpolateObject",function(){return l.a});var c=n(440);n.d(e,"interpolateRound",function(){return c.a});var h=n(196);n.d(e,"interpolateString",function(){return h.a});var f=n(442);n.d(e,"interpolateTransformCss",function(){return f.a}),n.d(e,"interpolateTransformSvg",function(){return f.b});var p=n(444);n.d(e,"interpolateZoom",function(){return p.a});var g=n(195);n.d(e,"interpolateRgb",function(){return g.a}),n.d(e,"interpolateRgbBasis",function(){return g.b}),n.d(e,"interpolateRgbBasisClosed",function(){return g.c});var d=n(437);n.d(e,"interpolateHsl",function(){return d.a}),n.d(e,"interpolateHslLong",function(){return d.b});var v=n(438);n.d(e,"interpolateLab",function(){return v.a});var y=n(436);n.d(e,"interpolateHcl",function(){return y.a}),n.d(e,"interpolateHclLong",function(){return y.b});var m=n(435);n.d(e,"interpolateCubehelix",function(){return m.a}),n.d(e,"interpolateCubehelixLong",function(){return m.b});var x=n(439);n.d(e,"quantize",function(){return x.a})},function(t,e,n){"use strict";n.d(e,"b",function(){return o});var i=n(12),r=n(39);function a(t){return function e(a){function o(e,o){var s=t((e=n.i(i.a)(e)).h,(o=n.i(i.a)(o)).h),u=n.i(r.a)(e.s,o.s),l=n.i(r.a)(e.l,o.l),c=n.i(r.a)(e.opacity,o.opacity);return function(t){return e.h=s(t),e.s=u(t),e.l=l(Math.pow(t,a)),e.opacity=c(t),e+""}}return a=+a,o.gamma=e,o}(1)}e.a=a(r.b);var o=a(r.a)},function(t,e,n){"use strict";n.d(e,"b",function(){return o});var i=n(12),r=n(39);function a(t){return function(e,a){var o=t((e=n.i(i.b)(e)).h,(a=n.i(i.b)(a)).h),s=n.i(r.a)(e.c,a.c),u=n.i(r.a)(e.l,a.l),l=n.i(r.a)(e.opacity,a.opacity);return function(t){return e.h=o(t),e.c=s(t),e.l=u(t),e.opacity=l(t),e+""}}}e.a=a(r.b);var o=a(r.a)},function(t,e,n){"use strict";n.d(e,"b",function(){return o});var i=n(12),r=n(39);function a(t){return function(e,a){var o=t((e=n.i(i.d)(e)).h,(a=n.i(i.d)(a)).h),s=n.i(r.a)(e.s,a.s),u=n.i(r.a)(e.l,a.l),l=n.i(r.a)(e.opacity,a.opacity);return function(t){return e.h=o(t),e.s=s(t),e.l=u(t),e.opacity=l(t),e+""}}}e.a=a(r.b);var o=a(r.a)},function(t,e,n){"use strict";e.a=function(t,e){var a=n.i(r.a)((t=n.i(i.c)(t)).l,(e=n.i(i.c)(e)).l),o=n.i(r.a)(t.a,e.a),s=n.i(r.a)(t.b,e.b),u=n.i(r.a)(t.opacity,e.opacity);return function(e){return t.l=a(e),t.a=o(e),t.b=s(e),t.opacity=u(e),t+""}};var i=n(12),r=n(39)},function(t,e,n){"use strict";e.a=function(t,e){for(var n=new Array(e),i=0;i<e;++i)n[i]=t(i/(e-1));return n}},function(t,e,n){"use strict";e.a=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}}},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=180/Math.PI,r={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};e.b=function(t,e,n,r,a,o){var s,u,l;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,l/=u),t*r<e*n&&(t=-t,e=-e,l=-l,s=-s),{translateX:a,translateY:o,rotate:Math.atan2(e,t)*i,skewX:Math.atan(l)*i,scaleX:s,scaleY:u}}},function(t,e,n){"use strict";n.d(e,"a",function(){return o}),n.d(e,"b",function(){return s});var i=n(53),r=n(443);function a(t,e,r,a){function o(t){return t.length?t.pop()+" ":""}return function(s,u){var l=[],c=[];return s=t(s),u=t(u),function(t,a,o,s,u,l){if(t!==o||a!==s){var c=u.push("translate(",null,e,null,r);l.push({i:c-4,x:n.i(i.a)(t,o)},{i:c-2,x:n.i(i.a)(a,s)})}else(o||s)&&u.push("translate("+o+e+s+r)}(s.translateX,s.translateY,u.translateX,u.translateY,l,c),function(t,e,r,s){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),s.push({i:r.push(o(r)+"rotate(",null,a)-2,x:n.i(i.a)(t,e)})):e&&r.push(o(r)+"rotate("+e+a)}(s.rotate,u.rotate,l,c),function(t,e,r,s){t!==e?s.push({i:r.push(o(r)+"skewX(",null,a)-2,x:n.i(i.a)(t,e)}):e&&r.push(o(r)+"skewX("+e+a)}(s.skewX,u.skewX,l,c),function(t,e,r,a,s,u){if(t!==r||e!==a){var l=s.push(o(s)+"scale(",null,",",null,")");u.push({i:l-4,x:n.i(i.a)(t,r)},{i:l-2,x:n.i(i.a)(e,a)})}else 1===r&&1===a||s.push(o(s)+"scale("+r+","+a+")")}(s.scaleX,s.scaleY,u.scaleX,u.scaleY,l,c),s=u=null,function(t){for(var e,n=-1,i=c.length;++n<i;)l[(e=c[n]).i]=e.x(t);return l.join("")}}}var o=a(r.a,"px, ","px)","deg)"),s=a(r.b,", ",")",")")},function(t,e,n){"use strict";e.a=function(t){if("none"===t)return s.a;i||(i=document.createElement("DIV"),r=document.documentElement,a=document.defaultView);return i.style.transform=t,t=a.getComputedStyle(r.appendChild(i),null).getPropertyValue("transform"),r.removeChild(i),t=t.slice(7,-1).split(","),n.i(s.b)(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5])},e.b=function(t){if(null==t)return s.a;o||(o=document.createElementNS("http://www.w3.org/2000/svg","g"));return o.setAttribute("transform",t),(t=o.transform.baseVal.consolidate())?(t=t.matrix,n.i(s.b)(t.a,t.b,t.c,t.d,t.e,t.f)):s.a};var i,r,a,o,s=n(441)},function(t,e,n){"use strict";var i=Math.SQRT2;function r(t){return((t=Math.exp(t))+1/t)/2}e.a=function(t,e){var n,a,o=t[0],s=t[1],u=t[2],l=e[0],c=e[1],h=e[2],f=l-o,p=c-s,g=f*f+p*p;if(g<1e-12)a=Math.log(h/u)/i,n=function(t){return[o+t*f,s+t*p,u*Math.exp(i*t*a)]};else{var d=Math.sqrt(g),v=(h*h-u*u+4*g)/(2*u*2*d),y=(h*h-u*u-4*g)/(2*h*2*d),m=Math.log(Math.sqrt(v*v+1)-v),x=Math.log(Math.sqrt(y*y+1)-y);a=(x-m)/i,n=function(t){var e=t*a,n=r(m),l=u/(2*d)*(n*function(t){return((t=Math.exp(2*t))-1)/(t+1)}(i*e+m)-function(t){return((t=Math.exp(t))-1/t)/2}(m));return[o+l*f,s+l*p,u*n/r(i*e+m)]}}return n.duration=1e3*a,n}},function(t,e,n){"use strict";var i=n(12),r=n(28);function a(t){return function e(a){function o(e,o){var s=t((e=n.i(i.a)(e)).h,(o=n.i(i.a)(o)).h),u=n.i(r.a)(e.s,o.s),l=n.i(r.a)(e.l,o.l),c=n.i(r.a)(e.opacity,o.opacity);return function(t){return e.h=s(t),e.s=u(t),e.l=l(Math.pow(t,a)),e.opacity=c(t),e+""}}return a=+a,o.gamma=e,o}(1)}a(r.b),a(r.a)},function(t,e,n){"use strict"},function(t,e,n){"use strict";var i=n(12),r=n(28);function a(t){return function(e,a){var o=t((e=n.i(i.b)(e)).h,(a=n.i(i.b)(a)).h),s=n.i(r.a)(e.c,a.c),u=n.i(r.a)(e.l,a.l),l=n.i(r.a)(e.opacity,a.opacity);return function(t){return e.h=o(t),e.c=s(t),e.l=u(t),e.opacity=l(t),e+""}}}a(r.b),a(r.a)},function(t,e,n){"use strict";var i=n(12),r=n(28);function a(t){return function(e,a){var o=t((e=n.i(i.d)(e)).h,(a=n.i(i.d)(a)).h),s=n.i(r.a)(e.s,a.s),u=n.i(r.a)(e.l,a.l),l=n.i(r.a)(e.opacity,a.opacity);return function(t){return e.h=o(t),e.s=s(t),e.l=u(t),e.opacity=l(t),e+""}}}a(r.b),a(r.a)},function(t,e,n){"use strict";n(28)},function(t,e,n){"use strict";n(12),n(28)},function(t,e,n){"use strict"},function(t,e,n){"use strict"},function(t,e,n){"use strict"},function(t,e,n){"use strict";n.d(e,"a",function(){return r});var i=180/Math.PI,r={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};e.b=function(t,e,n,r,a,o){var s,u,l;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,l/=u),t*r<e*n&&(t=-t,e=-e,l=-l,s=-s),{translateX:a,translateY:o,rotate:Math.atan2(e,t)*i,skewX:Math.atan(l)*i,scaleX:s,scaleY:u}}},function(t,e,n){"use strict";n.d(e,"a",function(){return o}),n.d(e,"b",function(){return s});var i=n(54),r=n(456);function a(t,e,r,a){function o(t){return t.length?t.pop()+" ":""}return function(s,u){var l=[],c=[];return s=t(s),u=t(u),function(t,a,o,s,u,l){if(t!==o||a!==s){var c=u.push("translate(",null,e,null,r);l.push({i:c-4,x:n.i(i.a)(t,o)},{i:c-2,x:n.i(i.a)(a,s)})}else(o||s)&&u.push("translate("+o+e+s+r)}(s.translateX,s.translateY,u.translateX,u.translateY,l,c),function(t,e,r,s){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),s.push({i:r.push(o(r)+"rotate(",null,a)-2,x:n.i(i.a)(t,e)})):e&&r.push(o(r)+"rotate("+e+a)}(s.rotate,u.rotate,l,c),function(t,e,r,s){t!==e?s.push({i:r.push(o(r)+"skewX(",null,a)-2,x:n.i(i.a)(t,e)}):e&&r.push(o(r)+"skewX("+e+a)}(s.skewX,u.skewX,l,c),function(t,e,r,a,s,u){if(t!==r||e!==a){var l=s.push(o(s)+"scale(",null,",",null,")");u.push({i:l-4,x:n.i(i.a)(t,r)},{i:l-2,x:n.i(i.a)(e,a)})}else 1===r&&1===a||s.push(o(s)+"scale("+r+","+a+")")}(s.scaleX,s.scaleY,u.scaleX,u.scaleY,l,c),s=u=null,function(t){for(var e,n=-1,i=c.length;++n<i;)l[(e=c[n]).i]=e.x(t);return l.join("")}}}var o=a(r.a,"px, ","px)","deg)"),s=a(r.b,", ",")",")")},function(t,e,n){"use strict";e.a=function(t){if("none"===t)return s.a;i||(i=document.createElement("DIV"),r=document.documentElement,a=document.defaultView);return i.style.transform=t,t=a.getComputedStyle(r.appendChild(i),null).getPropertyValue("transform"),r.removeChild(i),t=t.slice(7,-1).split(","),n.i(s.b)(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5])},e.b=function(t){if(null==t)return s.a;o||(o=document.createElementNS("http://www.w3.org/2000/svg","g"));return o.setAttribute("transform",t),(t=o.transform.baseVal.consolidate())?(t=t.matrix,n.i(s.b)(t.a,t.b,t.c,t.d,t.e,t.f)):s.a};var i,r,a,o,s=n(454)},function(t,e,n){"use strict";Math.SQRT2},function(t,e,n){"use strict";e.a=function(t){return function(){return t}}},function(t,e,n){"use strict";var i=n(55),r=n(205);e.a=function(t){return n.i(r.a)(n.i(i.a)(t).call(document.documentElement))}},function(t,e,n){"use strict";e.a=r;var i=0;function r(){return new a}function a(){this._="@"+(++i).toString(36)}a.prototype=r.prototype={constructor:a,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}}},function(t,e,n){"use strict";var i=n(93),r=n(56);e.a=function(t){var e=n.i(i.a)();return e.changedTouches&&(e=e.changedTouches[0]),n.i(r.a)(t,e)}},function(t,e,n){"use strict";var i=n(16);e.a=function(t){return"string"==typeof t?new i.b([document.querySelectorAll(t)],[document.documentElement]):new i.b([null==t?[]:t],i.c)}},function(t,e,n){"use strict";var i=n(55);e.a=function(t){var e="function"==typeof t?t:n.i(i.a)(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})}},function(t,e,n){"use strict";var i=n(89);e.a=function(t,e){var r=n.i(i.a)(t);if(arguments.length<2){var a=this.node();return r.local?a.getAttributeNS(r.space,r.local):a.getAttribute(r)}return this.each((null==e?r.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?r.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:r.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(r,e))}},function(t,e,n){"use strict";e.a=function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this}},function(t,e,n){"use strict";function i(t){return t.trim().split(/^|\s+/)}function r(t){return t.classList||new a(t)}function a(t){this._node=t,this._names=i(t.getAttribute("class")||"")}function o(t,e){for(var n=r(t),i=-1,a=e.length;++i<a;)n.add(e[i])}function s(t,e){for(var n=r(t),i=-1,a=e.length;++i<a;)n.remove(e[i])}a.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}},e.a=function(t,e){var n=i(t+"");if(arguments.length<2){for(var a=r(this.node()),u=-1,l=n.length;++u<l;)if(!a.contains(n[u]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?o:s)(this,t)}}:e?function(t){return function(){o(this,t)}}:function(t){return function(){s(this,t)}})(n,e))}},function(t,e,n){"use strict";function i(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function r(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}e.a=function(t){return this.select(t?r:i)}},function(t,e,n){"use strict";var i=n(16),r=n(206),a=n(458),o="$";function s(t,e,n,i,a,o){for(var s,u=0,l=e.length,c=o.length;u<c;++u)(s=e[u])?(s.__data__=o[u],i[u]=s):n[u]=new r.b(t,o[u]);for(;u<l;++u)(s=e[u])&&(a[u]=s)}function u(t,e,n,i,a,s,u){var l,c,h,f={},p=e.length,g=s.length,d=new Array(p);for(l=0;l<p;++l)(c=e[l])&&(d[l]=h=o+u.call(c,c.__data__,l,e),h in f?a[l]=c:f[h]=c);for(l=0;l<g;++l)(c=f[h=o+u.call(t,s[l],l,s)])?(i[l]=c,c.__data__=s[l],f[h]=null):n[l]=new r.b(t,s[l]);for(l=0;l<p;++l)(c=e[l])&&f[d[l]]===c&&(a[l]=c)}e.a=function(t,e){if(!t)return m=new Array(this.size()),g=-1,this.each(function(t){m[++g]=t}),m;var r=e?u:s,o=this._parents,l=this._groups;"function"!=typeof t&&(t=n.i(a.a)(t));for(var c=l.length,h=new Array(c),f=new Array(c),p=new Array(c),g=0;g<c;++g){var d=o[g],v=l[g],y=v.length,m=t.call(d,d&&d.__data__,g,o),x=m.length,b=f[g]=new Array(x),_=h[g]=new Array(x);r(d,v,b,_,p[g]=new Array(y),m,e);for(var w,M,S=0,C=0;S<x;++S)if(w=b[S]){for(S>=C&&(C=S+1);!(M=_[C])&&++C<x;);w._next=M||null}}return(h=new i.b(h,o))._enter=f,h._exit=p,h}},function(t,e,n){"use strict";e.a=function(t){return arguments.length?this.property("__data__",t):this.node().__data__}},function(t,e,n){"use strict";var i=n(94);function r(t,e,r){var a=n.i(i.a)(t),o=a.CustomEvent;"function"==typeof o?o=new o(e,r):(o=a.document.createEvent("Event"),r?(o.initEvent(e,r.bubbles,r.cancelable),o.detail=r.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}e.a=function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return r(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return r(this,t,e)}})(t,e))}},function(t,e,n){"use strict";e.a=function(t){for(var e=this._groups,n=0,i=e.length;n<i;++n)for(var r,a=e[n],o=0,s=a.length;o<s;++o)(r=a[o])&&t.call(r,r.__data__,o,a);return this}},function(t,e,n){"use strict";e.a=function(){return!this.node()}},function(t,e,n){"use strict";var i=n(207),r=n(16);e.a=function(){return new r.b(this._exit||this._groups.map(i.a),this._parents)}},function(t,e,n){"use strict";var i=n(16),r=n(204);e.a=function(t){"function"!=typeof t&&(t=n.i(r.a)(t));for(var e=this._groups,a=e.length,o=new Array(a),s=0;s<a;++s)for(var u,l=e[s],c=l.length,h=o[s]=[],f=0;f<c;++f)(u=l[f])&&t.call(u,u.__data__,f,l)&&h.push(u);return new i.b(o,this._parents)}},function(t,e,n){"use strict";function i(){this.innerHTML=""}e.a=function(t){return arguments.length?this.each(null==t?i:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML}},function(t,e,n){"use strict";var i=n(55),r=n(92);function a(){return null}e.a=function(t,e){var o="function"==typeof t?t:n.i(i.a)(t),s=null==e?a:"function"==typeof e?e:n.i(r.a)(e);return this.select(function(){return this.insertBefore(o.apply(this,arguments),s.apply(this,arguments)||null)})}},function(t,e,n){"use strict";function i(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}e.a=function(){return this.each(i)}},function(t,e,n){"use strict";var i=n(16);e.a=function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,o=Math.min(r,a),s=new Array(r),u=0;u<o;++u)for(var l,c=e[u],h=n[u],f=c.length,p=s[u]=new Array(f),g=0;g<f;++g)(l=c[g]||h[g])&&(p[g]=l);for(;u<r;++u)s[u]=e[u];return new i.b(s,this._parents)}},function(t,e,n){"use strict";e.a=function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i=t[e],r=0,a=i.length;r<a;++r){var o=i[r];if(o)return o}return null}},function(t,e,n){"use strict";e.a=function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t}},function(t,e,n){"use strict";e.a=function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var i,r=t[e],a=r.length-1,o=r[a];--a>=0;)(i=r[a])&&(o&&o!==i.nextSibling&&o.parentNode.insertBefore(i,o),o=i);return this}},function(t,e,n){"use strict";e.a=function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]}},function(t,e,n){"use strict";function i(){this.nextSibling&&this.parentNode.appendChild(this)}e.a=function(){return this.each(i)}},function(t,e,n){"use strict";function i(){var t=this.parentNode;t&&t.removeChild(this)}e.a=function(){return this.each(i)}},function(t,e,n){"use strict";var i=n(16),r=n(92);e.a=function(t){"function"!=typeof t&&(t=n.i(r.a)(t));for(var e=this._groups,a=e.length,o=new Array(a),s=0;s<a;++s)for(var u,l,c=e[s],h=c.length,f=o[s]=new Array(h),p=0;p<h;++p)(u=c[p])&&(l=t.call(u,u.__data__,p,c))&&("__data__"in u&&(l.__data__=u.__data__),f[p]=l);return new i.b(o,this._parents)}},function(t,e,n){"use strict";var i=n(16),r=n(209);e.a=function(t){"function"!=typeof t&&(t=n.i(r.a)(t));for(var e=this._groups,a=e.length,o=[],s=[],u=0;u<a;++u)for(var l,c=e[u],h=c.length,f=0;f<h;++f)(l=c[f])&&(o.push(t.call(l,l.__data__,f,c)),s.push(l));return new i.b(o,s)}},function(t,e,n){"use strict";e.a=function(){var t=0;return this.each(function(){++t}),t}},function(t,e,n){"use strict";var i=n(16);function r(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}e.a=function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=r);for(var n=this._groups,a=n.length,o=new Array(a),s=0;s<a;++s){for(var u,l=n[s],c=l.length,h=o[s]=new Array(c),f=0;f<c;++f)(u=l[f])&&(h[f]=u);h.sort(e)}return new i.b(o,this._parents).order()}},function(t,e,n){"use strict";function i(){this.textContent=""}e.a=function(t){return arguments.length?this.each(null==t?i:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent}},function(t,e,n){"use strict";var i=n(93),r=n(56);e.a=function(t,e,a){arguments.length<3&&(a=e,e=n.i(i.a)().changedTouches);for(var o,s=0,u=e?e.length:0;s<u;++s)if((o=e[s]).identifier===a)return n.i(r.a)(t,o);return null}},function(t,e,n){"use strict";var i=n(93),r=n(56);e.a=function(t,e){null==e&&(e=n.i(i.a)().touches);for(var a=0,o=e?e.length:0,s=new Array(o);a<o;++a)s[a]=n.i(r.a)(t,e[a]);return s}},function(t,e,n){"use strict";var i=n(96);e.a=function(t,e,r){var a=new i.d,o=e;return null==e?(a.restart(t,e,r),a):(e=+e,r=null==r?n.i(i.a)():+r,a.restart(function n(i){i+=o,a.restart(n,o+=e,r),t(i)},e,r),a)}},function(t,e,n){"use strict";var i=n(96);e.a=function(t,e,n){var r=new i.d;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r}},function(t,e,n){"use strict";var i=n(24),r=n(17),a=[null];e.a=function(t,e){var n,o,s=t.__transition;if(s)for(o in e=null==e?null:e+"",s)if((n=s[o]).state>r.d&&n.name===e)return new i.b([[t]],a,e,+o);return null}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});n(496);var i=n(24);n.d(e,"transition",function(){return i.a});var r=n(494);n.d(e,"active",function(){return r.a});var a=n(210);n.d(e,"interrupt",function(){return a.a})},function(t,e,n){"use strict";var i=n(20),r=n(497),a=n(498);i.selection.prototype.interrupt=r.a,i.selection.prototype.transition=a.a},function(t,e,n){"use strict";var i=n(210);e.a=function(t){return this.each(function(){n.i(i.a)(this,t)})}},function(t,e,n){"use strict";var i=n(24),r=n(17),a=n(189),o=n(95),s={time:null,delay:0,duration:250,ease:a.easeCubicInOut};function u(t,e){for(var i;!(i=t.__transition)||!(i=i[e]);)if(!(t=t.parentNode))return s.time=n.i(o.now)(),s;return i}e.a=function(t){var e,a;t instanceof i.b?(e=t._id,t=t._name):(e=n.i(i.c)(),(a=s).time=n.i(o.now)(),t=null==t?null:t+"");for(var l=this._groups,c=l.length,h=0;h<c;++h)for(var f,p=l[h],g=p.length,d=0;d<g;++d)(f=p[d])&&n.i(r.h)(f,t,e,d,p,a||u(f,e));return new i.b(l,this._parents,t,e)}},function(t,e,n){"use strict";var i=n(87),r=n(20),a=n(57),o=n(211);e.a=function(t,e){var s=n.i(r.namespace)(t),u="transform"===s?i.e:o.a;return this.attrTween(t,"function"==typeof e?(s.local?function(t,e,n){var i,r,a;return function(){var o,s=n(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===s?null:o===i&&s===r?a:a=e(i=o,r=s);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var i,r,a;return function(){var o,s=n(this);if(null!=s)return(o=this.getAttribute(t))===s?null:o===i&&s===r?a:a=e(i=o,r=s);this.removeAttribute(t)}})(s,u,n.i(a.b)(this,"attr."+t,e)):null==e?(s.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(s):(s.local?function(t,e,n){var i,r;return function(){var a=this.getAttributeNS(t.space,t.local);return a===n?null:a===i?r:r=e(i=a,n)}}:function(t,e,n){var i,r;return function(){var a=this.getAttribute(t);return a===n?null:a===i?r:r=e(i=a,n)}})(s,u,e+""))}},function(t,e,n){"use strict";var i=n(20);e.a=function(t,e){var r="attr."+t;if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;var a=n.i(i.namespace)(t);return this.tween(r,(a.local?function(t,e){function n(){var n=this,i=e.apply(n,arguments);return i&&function(e){n.setAttributeNS(t.space,t.local,i(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,i=e.apply(n,arguments);return i&&function(e){n.setAttribute(t,i(e))}}return n._value=e,n})(a,e))}},function(t,e,n){"use strict";var i=n(17);e.a=function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){n.i(i.g)(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){n.i(i.g)(this,t).delay=e}})(e,t)):n.i(i.f)(this.node(),e).delay}},function(t,e,n){"use strict";var i=n(17);e.a=function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){n.i(i.e)(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){n.i(i.e)(this,t).duration=e}})(e,t)):n.i(i.f)(this.node(),e).duration}},function(t,e,n){"use strict";var i=n(17);e.a=function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){n.i(i.e)(this,t).ease=e}}(e,t)):n.i(i.f)(this.node(),e).ease}},function(t,e,n){"use strict";var i=n(20),r=n(24);e.a=function(t){"function"!=typeof t&&(t=n.i(i.matcher)(t));for(var e=this._groups,a=e.length,o=new Array(a),s=0;s<a;++s)for(var u,l=e[s],c=l.length,h=o[s]=[],f=0;f<c;++f)(u=l[f])&&t.call(u,u.__data__,f,l)&&h.push(u);return new r.b(o,this._parents,this._name,this._id)}},function(t,e,n){"use strict";var i=n(24);e.a=function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,o=Math.min(r,a),s=new Array(r),u=0;u<o;++u)for(var l,c=e[u],h=n[u],f=c.length,p=s[u]=new Array(f),g=0;g<f;++g)(l=c[g]||h[g])&&(p[g]=l);for(;u<r;++u)s[u]=e[u];return new i.b(s,this._parents,this._name,this._id)}},function(t,e,n){"use strict";var i=n(17);e.a=function(t,e){var r=this._id;return arguments.length<2?n.i(i.f)(this.node(),r).on.on(t):this.each(function(t,e,n){var r,a,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?i.g:i.e;return function(){var i=o(this,t),s=i.on;s!==r&&(a=(r=s).copy()).on(e,n),i.on=a}}(r,t,e))}},function(t,e,n){"use strict";e.a=function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))}},function(t,e,n){"use strict";var i=n(20),r=n(24),a=n(17);e.a=function(t){var e=this._name,o=this._id;"function"!=typeof t&&(t=n.i(i.selector)(t));for(var s=this._groups,u=s.length,l=new Array(u),c=0;c<u;++c)for(var h,f,p=s[c],g=p.length,d=l[c]=new Array(g),v=0;v<g;++v)(h=p[v])&&(f=t.call(h,h.__data__,v,p))&&("__data__"in h&&(f.__data__=h.__data__),d[v]=f,n.i(a.h)(d[v],e,o,v,d,n.i(a.f)(h,o)));return new r.b(l,this._parents,e,o)}},function(t,e,n){"use strict";var i=n(20),r=n(24),a=n(17);e.a=function(t){var e=this._name,o=this._id;"function"!=typeof t&&(t=n.i(i.selectorAll)(t));for(var s=this._groups,u=s.length,l=[],c=[],h=0;h<u;++h)for(var f,p=s[h],g=p.length,d=0;d<g;++d)if(f=p[d]){for(var v,y=t.call(f,f.__data__,d,p),m=n.i(a.f)(f,o),x=0,b=y.length;x<b;++x)(v=y[x])&&n.i(a.h)(v,e,o,x,y,m);l.push(y),c.push(f)}return new r.b(l,c,e,o)}},function(t,e,n){"use strict";var i=n(20).selection.prototype.constructor;e.a=function(){return new i(this._groups,this._parents)}},function(t,e,n){"use strict";var i=n(87),r=n(20),a=n(57),o=n(211);e.a=function(t,e,s){var u="transform"==(t+="")?i.a:o.a;return null==e?this.styleTween(t,function(t,e){var i,a,o;return function(){var s=n.i(r.style)(this,t),u=(this.style.removeProperty(t),n.i(r.style)(this,t));return s===u?null:s===i&&u===a?o:o=e(i=s,a=u)}}(t,u)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,i){var a,o,s;return function(){var u=n.i(r.style)(this,t),l=i(this);return null==l&&(this.style.removeProperty(t),l=n.i(r.style)(this,t)),u===l?null:u===a&&l===o?s:s=e(a=u,o=l)}}(t,u,n.i(a.b)(this,"style."+t,e)):function(t,e,i){var a,o;return function(){var s=n.i(r.style)(this,t);return s===i?null:s===a?o:o=e(a=s,i)}}(t,u,e+""),s)}},function(t,e,n){"use strict";e.a=function(t,e,n){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==e)return this.tween(i,null);if("function"!=typeof e)throw new Error;return this.tween(i,function(t,e,n){function i(){var i=this,r=e.apply(i,arguments);return r&&function(e){i.style.setProperty(t,r(e),n)}}return i._value=e,i}(t,e,null==n?"":n))}},function(t,e,n){"use strict";var i=n(57);e.a=function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(n.i(i.b)(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))}},function(t,e,n){"use strict";var i=n(24),r=n(17);e.a=function(){for(var t=this._name,e=this._id,a=n.i(i.c)(),o=this._groups,s=o.length,u=0;u<s;++u)for(var l,c=o[u],h=c.length,f=0;f<h;++f)if(l=c[f]){var p=n.i(r.f)(l,e);n.i(r.h)(l,t,a,f,c,{time:p.time+p.delay+p.duration,delay:0,duration:p.duration,ease:p.ease})}return new i.b(o,this._parents,t,a)}},function(t,e,n){"use strict";t.exports=function(t,e,n,i,r,a,o,s){if(void 0===e)throw new Error("invariant requires an error message argument");if(!t){var u;if(void 0===e)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,i,r,a,o,s],c=0;(u=new Error(e.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var i=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach(function(t){i[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,o,s=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))r.call(n,l)&&(s[l]=n[l]);if(i){o=i(n);for(var c=0;c<o.length;c++)a.call(n,o[c])&&(s[o[c]]=n[o[c]])}}return s}},function(t,e,n){"use strict";var i=function(){},r=n(213),a={};i=function(t){var e="Warning: "+t;"undefined"!=typeof console&&console.error(e);try{throw new Error(e)}catch(t){}},t.exports=function(t,e,n,o,s){for(var u in t)if(t.hasOwnProperty(u)){var l;try{if("function"!=typeof t[u]){var c=Error((o||"React class")+": "+n+" type `"+u+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof t[u]+"`.");throw c.name="Invariant Violation",c}l=t[u](e,u,o,n,null,r)}catch(t){l=t}if(!l||l instanceof Error||i((o||"React class")+": type specification of "+n+" `"+u+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof l+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),l instanceof Error&&!(l.message in a)){a[l.message]=!0;var h=s?s():"";i("Failed "+n+" type: "+l.message+(null!=h?h:""))}}}},function(t,e,n){"use strict";var i=n(516),r=n(213),a=n(517),o=function(){};function s(){return null}o=function(t){var e="Warning: "+t;"undefined"!=typeof console&&console.error(e);try{throw new Error(e)}catch(t){}},t.exports=function(t,e){var n="function"==typeof Symbol&&Symbol.iterator,u="@@iterator";var l="<<anonymous>>",c={array:g("array"),bool:g("boolean"),func:g("function"),number:g("number"),object:g("object"),string:g("string"),symbol:g("symbol"),any:p(s),arrayOf:function(t){return p(function(e,n,i,a,o){if("function"!=typeof t)return new f("Property `"+o+"` of component `"+i+"` has invalid PropType notation inside arrayOf.");var s=e[n];if(!Array.isArray(s)){var u=v(s);return new f("Invalid "+a+" `"+o+"` of type `"+u+"` supplied to `"+i+"`, expected an array.")}for(var l=0;l<s.length;l++){var c=t(s,l,i,a,o+"["+l+"]",r);if(c instanceof Error)return c}return null})},element:function(){return p(function(e,n,i,r,a){var o=e[n];if(!t(o)){var s=v(o);return new f("Invalid "+r+" `"+a+"` of type `"+s+"` supplied to `"+i+"`, expected a single ReactElement.")}return null})}(),instanceOf:function(t){return p(function(e,n,i,r,a){if(!(e[n]instanceof t)){var o=t.name||l,s=function(t){if(!t.constructor||!t.constructor.name)return l;return t.constructor.name}(e[n]);return new f("Invalid "+r+" `"+a+"` of type `"+s+"` supplied to `"+i+"`, expected instance of `"+o+"`.")}return null})},node:function(){return p(function(t,e,n,i,r){if(!d(t[e]))return new f("Invalid "+i+" `"+r+"` supplied to `"+n+"`, expected a ReactNode.");return null})}(),objectOf:function(t){return p(function(e,n,i,a,o){if("function"!=typeof t)return new f("Property `"+o+"` of component `"+i+"` has invalid PropType notation inside objectOf.");var s=e[n],u=v(s);if("object"!==u)return new f("Invalid "+a+" `"+o+"` of type `"+u+"` supplied to `"+i+"`, expected an object.");for(var l in s)if(s.hasOwnProperty(l)){var c=t(s,l,i,a,o+"."+l,r);if(c instanceof Error)return c}return null})},oneOf:function(t){if(!Array.isArray(t))return o("Invalid argument supplied to oneOf, expected an instance of array."),s;return p(function(e,n,i,r,a){for(var o=e[n],s=0;s<t.length;s++)if(h(o,t[s]))return null;var u=JSON.stringify(t);return new f("Invalid "+r+" `"+a+"` of value `"+o+"` supplied to `"+i+"`, expected one of "+u+".")})},oneOfType:function(t){if(!Array.isArray(t))return o("Invalid argument supplied to oneOfType, expected an instance of array."),s;for(var e=0;e<t.length;e++){var n=t[e];if("function"!=typeof n)return o("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+m(n)+" at index "+e+"."),s}return p(function(e,n,i,a,o){for(var s=0;s<t.length;s++){var u=t[s];if(null==u(e,n,i,a,o,r))return null}return new f("Invalid "+a+" `"+o+"` supplied to `"+i+"`.")})},shape:function(t){return p(function(e,n,i,a,o){var s=e[n],u=v(s);if("object"!==u)return new f("Invalid "+a+" `"+o+"` of type `"+u+"` supplied to `"+i+"`, expected `object`.");for(var l in t){var c=t[l];if(c){var h=c(s,l,i,a,o+"."+l,r);if(h)return h}}return null})},exact:function(t){return p(function(e,n,a,o,s){var u=e[n],l=v(u);if("object"!==l)return new f("Invalid "+o+" `"+s+"` of type `"+l+"` supplied to `"+a+"`, expected `object`.");var c=i({},e[n],t);for(var h in c){var p=t[h];if(!p)return new f("Invalid "+o+" `"+s+"` key `"+h+"` supplied to `"+a+"`.\nBad object: "+JSON.stringify(e[n],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(t),null,"  "));var g=p(u,h,a,o,s+"."+h,r);if(g)return g}return null})}};function h(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}function f(t){this.message=t,this.stack=""}function p(t){var n={},i=0;function a(a,s,u,c,h,p,g){if(c=c||l,p=p||u,g!==r){if(e){var d=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw d.name="Invariant Violation",d}if("undefined"!=typeof console){var v=c+":"+u;!n[v]&&i<3&&(o("You are manually calling a React.PropTypes validation function for the `"+p+"` prop on `"+c+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),n[v]=!0,i++)}}return null==s[u]?a?null===s[u]?new f("The "+h+" `"+p+"` is marked as required in `"+c+"`, but its value is `null`."):new f("The "+h+" `"+p+"` is marked as required in `"+c+"`, but its value is `undefined`."):null:t(s,u,c,h,p)}var s=a.bind(null,!1);return s.isRequired=a.bind(null,!0),s}function g(t){return p(function(e,n,i,r,a,o){var s=e[n];return v(s)!==t?new f("Invalid "+r+" `"+a+"` of type `"+y(s)+"` supplied to `"+i+"`, expected `"+t+"`."):null})}function d(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(d);if(null===e||t(e))return!0;var i=function(t){var e=t&&(n&&t[n]||t[u]);if("function"==typeof e)return e}(e);if(!i)return!1;var r,a=i.call(e);if(i!==e.entries){for(;!(r=a.next()).done;)if(!d(r.value))return!1}else for(;!(r=a.next()).done;){var o=r.value;if(o&&!d(o[1]))return!1}return!0;default:return!1}}function v(t){var e=typeof t;return Array.isArray(t)?"array":t instanceof RegExp?"object":function(t,e){return"symbol"===t||"Symbol"===e["@@toStringTag"]||"function"==typeof Symbol&&e instanceof Symbol}(e,t)?"symbol":e}function y(t){if(void 0===t||null===t)return""+t;var e=v(t);if("object"===e){if(t instanceof Date)return"date";if(t instanceof RegExp)return"regexp"}return e}function m(t){var e=y(t);switch(e){case"array":case"object":return"an "+e;case"boolean":case"date":case"regexp":return"a "+e;default:return e}}return f.prototype=Error.prototype,c.checkPropTypes=a,c.PropTypes=c,c}},function(t,e,n){!function(t,e,n){"use strict";var i=1e-10;function r(t,e){var n,r=function(t){for(var e=[],n=0;n<t.length;++n)for(var i=n+1;i<t.length;++i)for(var r=u(t[n],t[i]),a=0;a<r.length;++a){var o=r[a];o.parentIndex=[n,i],e.push(o)}return e}(t),s=r.filter(function(e){return function(t,e){for(var n=0;n<e.length;++n)if(o(t,e[n])>e[n].radius+i)return!1;return!0}(e,t)}),c=0,h=0,f=[];if(s.length>1){var p=l(s);for(n=0;n<s.length;++n){var g=s[n];g.angle=Math.atan2(g.x-p.x,g.y-p.y)}s.sort(function(t,e){return e.angle-t.angle});var d=s[s.length-1];for(n=0;n<s.length;++n){var v=s[n];h+=(d.x+v.x)*(v.y-d.y);for(var y={x:(v.x+d.x)/2,y:(v.y+d.y)/2},m=null,x=0;x<v.parentIndex.length;++x)if(d.parentIndex.indexOf(v.parentIndex[x])>-1){var b=t[v.parentIndex[x]],_=Math.atan2(v.x-b.x,v.y-b.y),w=Math.atan2(d.x-b.x,d.y-b.y),M=w-_;M<0&&(M+=2*Math.PI);var S=w-M/2,C=o(y,{x:b.x+b.radius*Math.sin(S),y:b.y+b.radius*Math.cos(S)});C>2*b.radius&&(C=2*b.radius),(null===m||m.width>C)&&(m={circle:b,width:C,p1:v,p2:d})}null!==m&&(f.push(m),c+=a(m.circle.radius,m.width),d=v)}}else{var k=t[0];for(n=1;n<t.length;++n)t[n].radius<k.radius&&(k=t[n]);var A=!1;for(n=0;n<t.length;++n)if(o(t[n],k)>Math.abs(k.radius-t[n].radius)){A=!0;break}A?c=h=0:(c=k.radius*k.radius*Math.PI,f.push({circle:k,p1:{x:k.x,y:k.y+k.radius},p2:{x:k.x-i,y:k.y+k.radius},width:2*k.radius}))}return h/=2,e&&(e.area=c+h,e.arcArea=c,e.polygonArea=h,e.arcs=f,e.innerPoints=s,e.intersectionPoints=r),c+h}function a(t,e){return t*t*Math.acos(1-e/t)-(t-e)*Math.sqrt(e*(2*t-e))}function o(t,e){return Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y))}function s(t,e,n){if(n>=t+e)return 0;if(n<=Math.abs(t-e))return Math.PI*Math.min(t,e)*Math.min(t,e);var i=t-(n*n-e*e+t*t)/(2*n),r=e-(n*n-t*t+e*e)/(2*n);return a(t,i)+a(e,r)}function u(t,e){var n=o(t,e),i=t.radius,r=e.radius;if(n>=i+r||n<=Math.abs(i-r))return[];var a=(i*i-r*r+n*n)/(2*n),s=Math.sqrt(i*i-a*a),u=t.x+a*(e.x-t.x)/n,l=t.y+a*(e.y-t.y)/n,c=-(e.y-t.y)*(s/n),h=-(e.x-t.x)*(s/n);return[{x:u+c,y:l-h},{x:u-c,y:l+h}]}function l(t){for(var e={x:0,y:0},n=0;n<t.length;++n)e.x+=t[n].x,e.y+=t[n].y;return e.x/=t.length,e.y/=t.length,e}function c(t){for(var e=new Array(t),n=0;n<t;++n)e[n]=0;return e}function h(t,e){return c(t).map(function(){return c(e)})}function f(t,e){for(var n=0,i=0;i<t.length;++i)n+=t[i]*e[i];return n}function p(t){return Math.sqrt(f(t,t))}function g(t,e,n){for(var i=0;i<e.length;++i)t[i]=e[i]*n}function d(t,e,n,i,r){for(var a=0;a<t.length;++a)t[a]=e*n[a]+i*r[a]}function v(t,e,n){var i,r=(n=n||{}).maxIterations||200*e.length,a=n.nonZeroDelta||1.05,o=n.zeroDelta||.001,s=n.minErrorDelta||1e-6,u=n.minErrorDelta||1e-5,l=void 0!==n.rho?n.rho:1,c=void 0!==n.chi?n.chi:2,h=void 0!==n.psi?n.psi:-.5,f=void 0!==n.sigma?n.sigma:.5,p=e.length,g=new Array(p+1);g[0]=e,g[0].fx=t(e),g[0].id=0;for(var v=0;v<p;++v){var y=e.slice();y[v]=y[v]?y[v]*a:o,g[v+1]=y,g[v+1].fx=t(y),g[v+1].id=v+1}function m(t){for(var e=0;e<t.length;e++)g[p][e]=t[e];g[p].fx=t.fx}for(var x=function(t,e){return t.fx-e.fx},b=e.slice(),_=e.slice(),w=e.slice(),M=e.slice(),S=0;S<r;++S){if(g.sort(x),n.history){var C=g.map(function(t){var e=t.slice();return e.fx=t.fx,e.id=t.id,e});C.sort(function(t,e){return t.id-e.id}),n.history.push({x:g[0].slice(),fx:g[0].fx,simplex:C})}for(i=0,v=0;v<p;++v)i=Math.max(i,Math.abs(g[0][v]-g[1][v]));if(Math.abs(g[0].fx-g[p].fx)<s&&i<u)break;for(v=0;v<p;++v){b[v]=0;for(var k=0;k<p;++k)b[v]+=g[k][v];b[v]/=p}var A=g[p];if(d(_,1+l,b,-l,A),_.fx=t(_),_.fx<g[0].fx)d(M,1+c,b,-c,A),M.fx=t(M),M.fx<_.fx?m(M):m(_);else if(_.fx>=g[p-1].fx){var P=!1;if(_.fx>A.fx?(d(w,1+h,b,-h,A),w.fx=t(w),w.fx<A.fx?m(w):P=!0):(d(w,1-h*l,b,h*l,A),w.fx=t(w),w.fx<_.fx?m(w):P=!0),P){if(f>=1)break;for(v=1;v<g.length;++v)d(g[v],1-f,g[0],f,g[v]),g[v].fx=t(g[v])}}else m(_)}return g.sort(x),{fx:g[0].fx,x:g[0]}}function y(t,e,n,i,r,a,o){var s=n.fx,u=f(n.fxprime,e),l=s,c=s,h=u,p=0;function g(c,p,g){for(var v=0;v<16;++v)if(r=(c+p)/2,d(i.x,1,n.x,r,e),l=i.fx=t(i.x,i.fxprime),h=f(i.fxprime,e),l>s+a*r*u||l>=g)p=r;else{if(Math.abs(h)<=-o*u)return r;h*(p-c)>=0&&(p=c),c=r,g=l}return 0}r=r||1,a=a||1e-6,o=o||.1;for(var v=0;v<10;++v){if(d(i.x,1,n.x,r,e),l=i.fx=t(i.x,i.fxprime),h=f(i.fxprime,e),l>s+a*r*u||v&&l>=c)return g(p,r,c);if(Math.abs(h)<=-o*u)return r;if(h>=0)return g(r,p,l);c=l,p=r,r*=2}return r}function m(t,e,n){var i,r,a,o={x:e.slice(),fx:0,fxprime:e.slice()},s={x:e.slice(),fx:0,fxprime:e.slice()},u=e.slice(),l=1;a=(n=n||{}).maxIterations||20*e.length,o.fx=t(o.x,o.fxprime),g(i=o.fxprime.slice(),o.fxprime,-1);for(var c=0;c<a;++c){if(l=y(t,i,o,s,l),n.history&&n.history.push({x:o.x.slice(),fx:o.fx,fxprime:o.fxprime.slice(),alpha:l}),l){d(u,1,s.fxprime,-1,o.fxprime);var h=f(o.fxprime,o.fxprime),v=Math.max(0,f(u,s.fxprime)/h);d(i,v,i,-1,s.fxprime),r=o,o=s,s=r}else g(i,o.fxprime,-1);if(p(o.fxprime)<=1e-5)break}return n.history&&n.history.push({x:o.x.slice(),fx:o.fx,fxprime:o.fxprime.slice(),alpha:l}),o}function x(t,e){(e=e||{}).maxIterations=e.maxIterations||500;var n=e.initialLayout||w,i=e.lossFunction||S;t=function(t){t=t.slice();var e,n,i,r,a=[],o={};for(e=0;e<t.length;++e){var s=t[e];1==s.sets.length?a.push(s.sets[0]):2==s.sets.length&&(i=s.sets[0],r=s.sets[1],o[[i,r]]=!0,o[[r,i]]=!0)}for(a.sort(function(t,e){return t>e}),e=0;e<a.length;++e)for(i=a[e],n=e+1;n<a.length;++n)r=a[n],[i,r]in o||t.push({sets:[i,r],size:0});return t}(t);var r,a=n(t,e),o=[],s=[];for(r in a)a.hasOwnProperty(r)&&(o.push(a[r].x),o.push(a[r].y),s.push(r));for(var u=v(function(e){for(var n={},r=0;r<s.length;++r){var o=s[r];n[o]={x:e[2*r],y:e[2*r+1],radius:a[o].radius}}return i(n,t)},o,e),l=u.x,c=0;c<s.length;++c)r=s[c],a[r].x=l[2*c],a[r].y=l[2*c+1];return a}var b=1e-10;function _(t,e,n){return Math.min(t,e)*Math.min(t,e)*Math.PI<=n+b?Math.abs(t-e):function(t,e,n,i){var r=(i=i||{}).maxIterations||100,a=i.tolerance||1e-10,o=t(e),s=t(n),u=n-e;if(o*s>0)throw"Initial bisect points must have opposite signs";if(0===o)return e;if(0===s)return n;for(var l=0;l<r;++l){var c=e+(u/=2),h=t(c);if(h*o>=0&&(e=c),Math.abs(u)<a||0===h)return c}return e+u}(function(i){return s(t,e,i)-n},0,t+e)}function w(t,e){var n=M(t,e),i=e.lossFunction||S;if(t.length>=8){var r=function(t,e){var n,i=(e=e||{}).restarts||10,r=[],a={};for(n=0;n<t.length;++n){var o=t[n];1==o.sets.length&&(a[o.sets[0]]=r.length,r.push(o))}var s=function(t,e,n){var i=h(e.length,e.length),r=h(e.length,e.length);return t.filter(function(t){return 2==t.sets.length}).map(function(t){var a=n[t.sets[0]],o=n[t.sets[1]],s=_(Math.sqrt(e[a].size/Math.PI),Math.sqrt(e[o].size/Math.PI),t.size);i[a][o]=i[o][a]=s;var u=0;t.size+1e-10>=Math.min(e[a].size,e[o].size)?u=1:t.size<=1e-10&&(u=-1),r[a][o]=r[o][a]=u}),{distances:i,constraints:r}}(t,r,a),u=s.distances,l=s.constraints,f=p(u.map(p))/u.length;u=u.map(function(t){return t.map(function(t){return t/f})});var d,v,y=function(t,e){return function(t,e,n,i){var r,a=0;for(r=0;r<e.length;++r)e[r]=0;for(r=0;r<n.length;++r)for(var o=t[2*r],s=t[2*r+1],u=r+1;u<n.length;++u){var l=t[2*u],c=t[2*u+1],h=n[r][u],f=i[r][u],p=(l-o)*(l-o)+(c-s)*(c-s),g=Math.sqrt(p),d=p-h*h;f>0&&g<=h||f<0&&g>=h||(a+=2*d*d,e[2*r]+=4*d*(o-l),e[2*r+1]+=4*d*(s-c),e[2*u]+=4*d*(l-o),e[2*u+1]+=4*d*(c-s))}return a}(t,e,u,l)};for(n=0;n<i;++n){var x=c(2*u.length).map(Math.random);v=m(y,x,e),(!d||v.fx<d.fx)&&(d=v)}var b=d.x,w={};for(n=0;n<r.length;++n){var M=r[n];w[M.sets[0]]={x:b[2*n]*f,y:b[2*n+1]*f,radius:Math.sqrt(M.size/Math.PI)}}if(e.history)for(n=0;n<e.history.length;++n)g(e.history[n].x,f);return w}(t,e),a=i(r,t),o=i(n,t);a+1e-8<o&&(n=r)}return n}function M(t,e){for(var n,i=e&&e.lossFunction?e.lossFunction:S,r={},a={},o=0;o<t.length;++o){var s=t[o];1==s.sets.length&&(n=s.sets[0],r[n]={x:1e10,y:1e10,rowid:r.length,size:s.size,radius:Math.sqrt(s.size/Math.PI)},a[n]=[])}for(t=t.filter(function(t){return 2==t.sets.length}),o=0;o<t.length;++o){var l=t[o],c=l.hasOwnProperty("weight")?l.weight:1,h=l.sets[0],f=l.sets[1];l.size+b>=Math.min(r[h].size,r[f].size)&&(c=0),a[h].push({set:f,size:l.size,weight:c}),a[f].push({set:h,size:l.size,weight:c})}var p=[];for(n in a)if(a.hasOwnProperty(n)){var g=0;for(o=0;o<a[n].length;++o)g+=a[n][o].size*a[n][o].weight;p.push({set:n,size:g})}function d(t,e){return e.size-t.size}p.sort(d);var v={};function y(t){return t.set in v}function m(t,e){r[e].x=t.x,r[e].y=t.y,v[e]=!0}for(m({x:0,y:0},p[0].set),o=1;o<p.length;++o){var x=p[o].set,w=a[x].filter(y);if(n=r[x],w.sort(d),0===w.length)throw"ERROR: missing pairwise overlap information";for(var M=[],C=0;C<w.length;++C){var k=r[w[C].set],A=_(n.radius,k.radius,w[C].size);M.push({x:k.x+A,y:k.y}),M.push({x:k.x-A,y:k.y}),M.push({y:k.y+A,x:k.x}),M.push({y:k.y-A,x:k.x});for(var P=C+1;P<w.length;++P)for(var I=r[w[P].set],T=_(n.radius,I.radius,w[P].size),O=u({x:k.x,y:k.y,radius:A},{x:I.x,y:I.y,radius:T}),E=0;E<O.length;++E)M.push(O[E])}var L=1e50,D=M[0];for(C=0;C<M.length;++C){r[x].x=M[C].x,r[x].y=M[C].y;var F=i(r,t);F<L&&(L=F,D=M[C])}m(D,x)}return r}function S(t,e){var n=0;function i(e){return e.map(function(e){return t[e]})}for(var a=0;a<e.length;++a){var u,l=e[a];if(1!=l.sets.length){if(2==l.sets.length){var c=t[l.sets[0]],h=t[l.sets[1]];u=s(c.radius,h.radius,o(c,h))}else u=r(i(l.sets));var f=l.hasOwnProperty("weight")?l.weight:1;n+=f*(u-l.size)*(u-l.size)}}return n}function C(t,e,n){var i;if(null===n?t.sort(function(t,e){return e.radius-t.radius}):t.sort(n),t.length>0){var r=t[0].x,a=t[0].y;for(i=0;i<t.length;++i)t[i].x-=r,t[i].y-=a}if(2==t.length){var s=o(t[0],t[1]);s<Math.abs(t[1].radius-t[0].radius)&&(t[1].x=t[0].x+t[0].radius-t[1].radius-1e-10,t[1].y=t[0].y)}if(t.length>1){var u,l,c=Math.atan2(t[1].x,t[1].y)-e,h=Math.cos(c),f=Math.sin(c);for(i=0;i<t.length;++i)u=t[i].x,l=t[i].y,t[i].x=h*u-f*l,t[i].y=f*u+h*l}if(t.length>2){for(var p=Math.atan2(t[2].x,t[2].y)-e;p<0;)p+=2*Math.PI;for(;p>2*Math.PI;)p-=2*Math.PI;if(p>Math.PI){var g=t[1].y/(1e-10+t[1].x);for(i=0;i<t.length;++i){var d=(t[i].x+g*t[i].y)/(1+g*g);t[i].x=2*d-t[i].x,t[i].y=2*d*g-t[i].y}}}}function k(t){function e(t){return t.parent!==t&&(t.parent=e(t.parent)),t.parent}function n(t,n){var i=e(t),r=e(n);i.parent=r}t.map(function(t){t.parent=t});for(var i=0;i<t.length;++i)for(var r=i+1;r<t.length;++r){var a=t[i].radius+t[r].radius;o(t[i],t[r])+1e-10<a&&n(t[r],t[i])}var s,u={};for(i=0;i<t.length;++i)(s=e(t[i]).parent.setid)in u||(u[s]=[]),u[s].push(t[i]);t.map(function(t){delete t.parent});var l=[];for(s in u)u.hasOwnProperty(s)&&l.push(u[s]);return l}function A(t){var e=function(e){var n=Math.max.apply(null,t.map(function(t){return t[e]+t.radius})),i=Math.min.apply(null,t.map(function(t){return t[e]-t.radius}));return{max:n,min:i}};return{xRange:e("x"),yRange:e("y")}}function P(t,e,n){null===e&&(e=Math.PI/2);var i,r,a=[];for(r in t)if(t.hasOwnProperty(r)){var o=t[r];a.push({x:o.x,y:o.y,radius:o.radius,setid:r})}var s=k(a);for(i=0;i<s.length;++i){C(s[i],e,n);var u=A(s[i]);s[i].size=(u.xRange.max-u.xRange.min)*(u.yRange.max-u.yRange.min),s[i].bounds=u}s.sort(function(t,e){return e.size-t.size});var l=(a=s[0]).bounds,c=(l.xRange.max-l.xRange.min)/50;function h(t,e,n){if(t){var i,r,o,s=t.bounds;e?i=l.xRange.max-s.xRange.min+c:(i=l.xRange.max-s.xRange.max,(o=(s.xRange.max-s.xRange.min)/2-(l.xRange.max-l.xRange.min)/2)<0&&(i+=o)),n?r=l.yRange.max-s.yRange.min+c:(r=l.yRange.max-s.yRange.max,(o=(s.yRange.max-s.yRange.min)/2-(l.yRange.max-l.yRange.min)/2)<0&&(r+=o));for(var u=0;u<t.length;++u)t[u].x+=i,t[u].y+=r,a.push(t[u])}}for(var f=1;f<s.length;)h(s[f],!0,!1),h(s[f+1],!1,!0),h(s[f+2],!0,!0),f+=3,l=A(a);var p={};for(i=0;i<a.length;++i)p[a[i].setid]=a[i];return p}function I(t,e,n,i){var r=[],a=[];for(var o in t)t.hasOwnProperty(o)&&(a.push(o),r.push(t[o]));e-=2*i,n-=2*i;var s=A(r),u=s.xRange,l=s.yRange;if(u.max==u.min||l.max==l.min)return console.log("not scaling solution: zero size detected"),t;for(var c=e/(u.max-u.min),h=n/(l.max-l.min),f=Math.min(h,c),p=(e-(u.max-u.min)*f)/2,g=(n-(l.max-l.min)*f)/2,d={},v=0;v<r.length;++v){var y=r[v];d[a[v]]={radius:f*y.radius,x:i+p+(y.x-u.min)*f,y:i+g+(y.y-l.min)*f}}return d}function T(t,n){return function(){for(var i,r=e.select(this),a=r.datum(),o=t[a.sets[0]].radius||50,s=n(a)||"",u=s.split(/\s+/).reverse(),l=(s.length+u.length)/3,c=u.pop(),h=[c],f=0,p=r.text(null).append("tspan").text(c);c=u.pop();)h.push(c),i=h.join(" "),p.text(i),i.length>l&&p.node().getComputedTextLength()>o&&(h.pop(),p.text(h.join(" ")),h=[c],p=r.append("tspan").text(c),f++);var g=.35-1.1*f/2,d=r.attr("x"),v=r.attr("y");r.selectAll("tspan").attr("x",d).attr("y",v).attr("dy",function(t,e){return g+1.1*e+"em"})}}function O(t,e,n){var i,r,a=e[0].radius-o(e[0],t);for(i=1;i<e.length;++i)(r=e[i].radius-o(e[i],t))<=a&&(a=r);for(i=0;i<n.length;++i)(r=o(n[i],t)-n[i].radius)<=a&&(a=r);return a}function E(t,e){var n,i=[];for(n=0;n<t.length;++n){var a=t[n];i.push({x:a.x,y:a.y}),i.push({x:a.x+a.radius/2,y:a.y}),i.push({x:a.x-a.radius/2,y:a.y}),i.push({x:a.x,y:a.y+a.radius/2}),i.push({x:a.x,y:a.y-a.radius/2})}var s=i[0],u=O(i[0],t,e);for(n=1;n<i.length;++n){var c=O(i[n],t,e);c>=u&&(s=i[n],u=c)}var h=v(function(n){return-1*O({x:n[0],y:n[1]},t,e)},[s.x,s.y],{maxIterations:500,minErrorDelta:1e-10}).x,f={x:h[0],y:h[1]},p=!0;for(n=0;n<t.length;++n)if(o(f,t[n])>t[n].radius){p=!1;break}for(n=0;n<e.length;++n)if(o(f,e[n])<e[n].radius){p=!1;break}if(!p)if(1==t.length)f={x:t[0].x,y:t[0].y};else{var g={};r(t,g),f=0===g.arcs.length?{x:0,y:-1e3,disjoint:!0}:1==g.arcs.length?{x:g.arcs[0].circle.x,y:g.arcs[0].circle.y}:e.length?E(t,[]):l(g.arcs.map(function(t){return t.p1}))}return f}function L(t){var e={},n=[];for(var i in t)n.push(i),e[i]=[];for(var r=0;r<n.length;r++)for(var a=t[n[r]],s=r+1;s<n.length;++s){var u=t[n[s]],l=o(a,u);l+u.radius<=a.radius+1e-10?e[n[s]].push(n[r]):l+a.radius<=u.radius+1e-10&&e[n[r]].push(n[s])}return e}function D(t,e){for(var n={},i=L(t),r=0;r<e.length;++r){for(var a=e[r].sets,o={},s={},u=0;u<a.length;++u){o[a[u]]=!0;for(var l=i[a[u]],c=0;c<l.length;++c)s[l[c]]=!0}var h=[],f=[];for(var p in t)p in o?h.push(t[p]):p in s||f.push(t[p]);var g=E(h,f);n[a]=g,g.disjoint&&e[r].size>0&&console.log("WARNING: area "+a+" not represented on screen")}return n}function F(t,e,n){var i=[];return i.push("\nM",t,e),i.push("\nm",-n,0),i.push("\na",n,n,0,1,0,2*n,0),i.push("\na",n,n,0,1,0,2*-n,0),i.join(" ")}function B(t){var e=t.split(" ");return{x:parseFloat(e[1]),y:parseFloat(e[2]),radius:-parseFloat(e[4])}}function R(t){var e={};r(t,e);var n=e.arcs;if(0===n.length)return"M 0 0";if(1==n.length){var i=n[0].circle;return F(i.x,i.y,i.radius)}for(var a=["\nM",n[0].p2.x,n[0].p2.y],o=0;o<n.length;++o){var s=n[o],u=s.circle.radius,l=s.width>u;a.push("\nA",u,u,0,l?1:0,1,s.p1.x,s.p1.y)}return a.join(" ")}t.intersectionArea=r,t.circleCircleIntersection=u,t.circleOverlap=s,t.circleArea=a,t.distance=o,t.venn=x,t.greedyLayout=M,t.scaleSolution=I,t.normalizeSolution=P,t.bestInitialLayout=w,t.lossFunction=S,t.disjointCluster=k,t.distanceFromIntersectArea=_,t.VennDiagram=function(){var t=600,n=350,i=15,r=1e3,a=Math.PI/2,o=!0,s=!0,u=!0,l=null,c=null,h={},f=["#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"],p=0,g=function(t){if(t in h)return h[t];var e=h[t]=f[p];return(p+=1)>=f.length&&(p=0),e},d=x,v=S;function y(h){var f=h.datum(),p={};f.forEach(function(t){0==t.size&&1==t.sets.length&&(p[t.sets[0]]=1)});var y={},m={};if((f=f.filter(function(t){return!t.sets.some(function(t){return t in p})})).length>0){var x=d(f,{lossFunction:v});o&&(x=P(x,a,c)),y=I(x,t,n,i),m=D(y,f)}var b={};function _(t){return t.sets in b?b[t.sets]:1==t.sets.length?""+t.sets[0]:void 0}f.forEach(function(t){t.label&&(b[t.sets]=t.label)}),h.selectAll("svg").data([y]).enter().append("svg");var w=h.select("svg").attr("width",t).attr("height",n),M={},S=!1;w.selectAll(".venn-area path").each(function(t){var n=e.select(this).attr("d");1==t.sets.length&&n&&(S=!0,M[t.sets[0]]=B(n))});var C=function(e){return function(i){var r=e.sets.map(function(e){var r=M[e],a=y[e];return r||(r={x:t/2,y:n/2,radius:1}),a||(a={x:t/2,y:n/2,radius:1}),{x:r.x*(1-i)+a.x*i,y:r.y*(1-i)+a.y*i,radius:r.radius*(1-i)+a.radius*i}});return R(r)}},k=w.selectAll(".venn-area").data(f,function(t){return t.sets}),A=k.enter().append("g").attr("class",function(t){return"venn-area venn-"+(1==t.sets.length?"circle":"intersection")}).attr("data-venn-sets",function(t){return t.sets.join("_")}),O=A.append("path"),E=A.append("text").attr("class","label").text(function(t){return _(t)}).attr("text-anchor","middle").attr("dy",".35em").attr("x",t/2).attr("y",n/2);u&&(O.style("fill-opacity","0").filter(function(t){return 1==t.sets.length}).style("fill",function(t){return g(t.sets)}).style("fill-opacity",".25"),E.style("fill",function(t){return 1==t.sets.length?g(t.sets):"#444"}));var L=h;S?(L=h.transition("venn").duration(r)).selectAll("path").attrTween("d",C):L.selectAll("path").attr("d",function(t){return R(t.sets.map(function(t){return y[t]}))});var F=L.selectAll("text").filter(function(t){return t.sets in m}).text(function(t){return _(t)}).attr("x",function(t){return Math.floor(m[t.sets].x)}).attr("y",function(t){return Math.floor(m[t.sets].y)});s&&(S?"on"in F?F.on("end",T(y,_)):F.each("end",T(y,_)):F.each(T(y,_)));var j=k.exit().transition("venn").duration(r).remove();j.selectAll("path").attrTween("d",C);var N=j.selectAll("text").attr("x",t/2).attr("y",n/2);return null!==l&&(E.style("font-size","0px"),F.style("font-size",l),N.style("font-size","0px")),{circles:y,textCentres:m,nodes:k,enter:A,update:L,exit:j}}return y.wrap=function(t){return arguments.length?(s=t,y):s},y.width=function(e){return arguments.length?(t=e,y):t},y.height=function(t){return arguments.length?(n=t,y):n},y.padding=function(t){return arguments.length?(i=t,y):i},y.colours=function(t){return arguments.length?(g=t,y):g},y.fontSize=function(t){return arguments.length?(l=t,y):l},y.duration=function(t){return arguments.length?(r=t,y):r},y.layoutFunction=function(t){return arguments.length?(d=t,y):d},y.normalize=function(t){return arguments.length?(o=t,y):o},y.styled=function(t){return arguments.length?(u=t,y):u},y.orientation=function(t){return arguments.length?(a=t,y):a},y.orientationOrder=function(t){return arguments.length?(c=t,y):c},y.lossFunction=function(t){return arguments.length?(v=t,y):v},y},t.wrapText=T,t.computeTextCentres=D,t.computeTextCentre=E,t.sortAreas=function(t,e){for(var n=L(t.selectAll("svg").datum()),i={},r=0;r<e.sets.length;++r){var a=e.sets[r];for(var o in n)for(var s=n[o],u=0;u<s.length;++u)if(s[u]==a){i[o]=!0;break}}function l(t){for(var e=0;e<t.length;++e)if(!(t[e]in i))return!1;return!0}t.selectAll("g").sort(function(t,n){return t.sets.length!=n.sets.length?t.sets.length-n.sets.length:t==e?l(n.sets)?-1:1:n==e?l(t.sets)?1:-1:n.size-t.size})},t.circlePath=F,t.circleFromPath=B,t.intersectionAreaPath=R,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(20),n(495))},function(t,e,n){n(58),t.exports=n(58)}])})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,