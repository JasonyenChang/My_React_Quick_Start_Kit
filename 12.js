(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{251:function(e,t,n){var r=n(252);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(19)(r,o);r.locals&&(e.exports=r.locals)},252:function(e,t,n){(e.exports=n(11)(!1)).push([e.i,".barChart{display:flex}",""])},35:function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(96),c=n(95);n(1);function i(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  width: 1300px;\n  text-align: center;\n  overflow-x: scroll;\n"]);return i=function(){return e},e}var u=n(48).a.div(i());n(251);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var b=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(n=p(this,(e=s(t)).call.apply(e,[this].concat(o)))).scale=function(){return{item:{alias:""},count:{min:0,tickCount:7,alias:""},percentage:{min:0,tickCount:7,alias:""}}},n.geomLabel=function(){var e=1;return{count:{labelLine:{lineWidth:1,stroke:"#ffffff",lineDash:[2,2],offset:0},content:["item*count",function(e,t){return"".concat(t)}],textStyle:function(){var t={textAlign:"center"};return e<=10&&(t.fill=c.a[e]),(e+=1)>10&&(e=1),t}},percentage:{labelLine:{lineWidth:1,stroke:"#ffffff",lineDash:[2,2],offset:0},content:["item*percentage",function(e,t){return"".concat(t.toFixed(2),"%")}]}}},n.label=function(){return{item:{formatter:function(e){return"".concat(e)},textStyle:{fill:"#000000",rotate:7,textAlign:"start"},autoRotate:!1},count:{formatter:function(e){return"".concat(e)},textStyle:{fill:"#000000",rotate:0},autoRotate:!1},percentage:{formatter:function(e){return"".concat(e,"%")},textStyle:{fill:"#A6A6A6",rotate:0},autoRotate:!1}}},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(t,o.a.PureComponent),function(e,t,n){t&&f(e.prototype,t),n&&f(e,n)}(t,[{key:"render",value:function(){var e=this.props.barData,t=e.reduce(function(e,t){return e+t.count},0),n=e,r=0;return n.map(function(e){return r+=e.count,e.percentage=r/t*100,e}),o.a.createElement(u,null,o.a.createElement(a.Chart,{className:"barChart",height:500,width:120*e.length,data:n,scale:this.scale(),padding:[60,70,160,60]},o.a.createElement(a.Axis,{name:"item",label:this.label().item}),o.a.createElement(a.Axis,{name:"count",label:this.label().count}),o.a.createElement(a.Axis,{name:"percentage",label:this.label().percentage}),o.a.createElement(a.Legend,{position:"bottom",visible:!1}),o.a.createElement(a.Geom,{type:"interval",position:"item*count",color:["item",c.b]},o.a.createElement(a.Label,{content:this.geomLabel().count.content,labelLine:this.geomLabel().count.labelLine,textStyle:this.geomLabel().count.textStyle,offset:10})),o.a.createElement(a.Geom,{type:"line",position:"item*percentage",color:"#000000",shape:"smooth",size:2,label:this.label().percentage}),o.a.createElement(a.Geom,{type:"point",position:"item*percentage",color:"#000000",shape:"circle",size:4},o.a.createElement(a.Label,{content:this.geomLabel().percentage.content,labelLine:this.geomLabel().percentage.labelLine,offset:20}))))}}]),t}(),m=n(121),h=n.n(m);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var O,j=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(n=g(this,(e=E(t)).call.apply(e,[this].concat(o)))).label=function(){return{percentage:{formatter:function(e){return"".concat(e,"%")},textStyle:{fill:"#A6A6A6",rotate:0},autoRotate:!1}}},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(t,o.a.PureComponent),function(e,t,n){t&&d(e.prototype,t),n&&d(e,n)}(t,[{key:"render",value:function(){var e=[{country:"Europe",year:"1750",value:163,cost:95},{country:"Europe",year:"1800",value:203,cost:90},{country:"Europe",year:"1850",value:276,cost:80},{country:"Europe",year:"1900",value:408,cost:70},{country:"Europe",year:"1950",value:547,cost:60},{country:"Europe",year:"1999",value:729,cost:50},{country:"Europe",year:"2050",value:628,cost:40},{country:"Europe",year:"2100",value:828,cost:10},{country:"Asia",year:"1750",value:95,cost:95},{country:"Asia",year:"1800",value:635,cost:90},{country:"Asia",year:"1850",value:809,cost:80},{country:"Asia",year:"1900",value:947,cost:70},{country:"Asia",year:"1950",value:1402,cost:60},{country:"Asia",year:"1999",value:3634,cost:50},{country:"Asia",year:"2050",value:5268,cost:40},{country:"Asia",year:"2100",value:7268,cost:10}];(new h.a).createView().source(e).transform({type:"percent",field:"value",dimension:"country",groupBy:["year"],as:"percent"});return o.a.createElement("div",null,o.a.createElement(a.Chart,{height:400,data:e,padding:[10,40,70,50],forceFit:!0},o.a.createElement(a.Legend,null),o.a.createElement(a.Axis,{name:"year"}),o.a.createElement(a.Axis,{name:"value"}),o.a.createElement(a.Geom,{type:"intervalStack",position:"year*value",color:"country"}),o.a.createElement(a.Geom,{type:"line",position:"year*cost",color:"#fdae6b",size:3,shape:"smooth"}),o.a.createElement(a.Geom,{type:"point",position:"year*cost",color:"#fdae6b",size:3,shape:"circle"})))}}]),t}(),A=n(53),S=n(9),_={data:[{item:"AA",count:20,percentage:0},{item:"BB",count:18,percentage:0},{item:"CC",count:16,percentage:0},{item:"DD",count:14,percentage:0},{item:"EE",count:12,percentage:0},{item:"FF",count:10,percentage:0},{item:"GG",count:8,percentage:0}]},x={data:[{item:"AA",percentage:[12,23,43,34,12,54]},{item:"BB",percentage:[2,32,14,65,34,88]}]};function C(e){return(C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t){return!t||"object"!==C(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function z(e,t){return(z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}n.d(t,"default",function(){return R});var R=Object(S.b)("translateStore")(O=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),k(this,L(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&z(e,t)}(t,o.a.Component),function(e,t,n){t&&P(e.prototype,t),n&&P(e,n)}(t,[{key:"render",value:function(){var e=this.props.translateStore.translateObj;return o.a.createElement("div",null,o.a.createElement(A.a,{title:e.MIX_CHART}),o.a.createElement("br",null),o.a.createElement(b,{barData:_.data}),o.a.createElement("br",null),o.a.createElement(j,{dataSource:x.data}))}}]),t}())||O},53:function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(48);function c(){var e=l(["\n  flex: 1;\n  color: black;\n  font-size: 20px;\n  padding-left: 15px;\n"]);return c=function(){return e},e}function i(){var e=l(["\n  width: 5px;\n  height: 30px;\n  background: black;\n"]);return i=function(){return e},e}function u(){var e=l(["\n  display: flex;\n"]);return u=function(){return e},e}function l(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var f=a.a.div(u()),p=a.a.div(i()),s=a.a.div(c());function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}n.d(t,"a",function(){return d});var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),m(this,h(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(t,o.a.PureComponent),function(e,t,n){t&&b(e.prototype,t),n&&b(e,n)}(t,[{key:"render",value:function(){return o.a.createElement(f,null,o.a.createElement(p,null),o.a.createElement(s,null,this.props.title))}}]),t}()},95:function(e,t,n){"use strict";n.d(t,"c",function(){return r}),n.d(t,"b",function(){return o}),n.d(t,"a",function(){return a});var r=function(e){return e.length>20?"".concat(e.substring(0,20),"..."):e},o=["#00A99D","#F7931E","#E93922","#7C90A9","#A7B7CB","#CCCCCC","#333333","#70A4A1","#416585","#6A6A6A"],a={1:o[0],2:o[1],3:o[2],4:o[3],5:o[4],6:o[5],7:o[6],8:o[7],9:o[8],10:o[9]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,