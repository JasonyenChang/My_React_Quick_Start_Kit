(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{249:function(e,t,n){e.exports=n.p+"6ee1e0be80e632ca5e8057af5797f01f.jpg"},250:function(e,t,n){e.exports=n.p+"3e26572bce8c82dea94a982cd109d5c1.jpg"},4:function(e,t,n){"use strict";var r=n(44),o=n.n(r),i=n(50),a=n.n(i),c=n(45),u=n.n(c),l=n(48),s=n.n(l),f=n(46),p=n.n(f),d=n(47),y=n.n(d),h=n(0),b=n(8),m=n(1),v=n(49),g=n.n(v),x=n(67),O=void 0,w=function(e){function t(){u()(this,t);var e=p()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return e.onClick=function(t,n){if(!(t.className.indexOf("-leave")>=0)){var r=e.props.insertExtraNode;e.extraNode=document.createElement("div");var o=e.extraNode;o.className="ant-click-animating-node";var i=e.getAttributeName();t.removeAttribute(i),t.setAttribute(i,"true"),O=O||document.createElement("style"),n&&"#ffffff"!==n&&"rgb(255, 255, 255)"!==n&&e.isNotGrey(n)&&!/rgba\(\d*, \d*, \d*, 0\)/.test(n)&&"transparent"!==n&&(o.style.borderColor=n,O.innerHTML="[ant-click-animating-without-extra-node]:after { border-color: "+n+"; }",document.body.contains(O)||document.body.appendChild(O)),r&&t.appendChild(o),x.a.addEndEventListener(t,e.onTransitionEnd)}},e.bindAnimationEvent=function(t){if(t&&t.getAttribute&&!t.getAttribute("disabled")&&!(t.className.indexOf("disabled")>=0)){var n=function(n){if("INPUT"!==n.target.tagName){e.resetEffect(t);var r=getComputedStyle(t).getPropertyValue("border-top-color")||getComputedStyle(t).getPropertyValue("border-color")||getComputedStyle(t).getPropertyValue("background-color");e.clickWaveTimeoutId=window.setTimeout(function(){return e.onClick(t,r)},0)}};return t.addEventListener("click",n,!0),{cancel:function(){t.removeEventListener("click",n,!0)}}}},e.onTransitionEnd=function(t){t&&"fadeEffect"===t.animationName&&e.resetEffect(t.target)},e}return y()(t,e),s()(t,[{key:"isNotGrey",value:function(e){var t=(e||"").match(/rgba?\((\d*), (\d*), (\d*)(, [\.\d]*)?\)/);return!(t&&t[1]&&t[2]&&t[3])||!(t[1]===t[2]&&t[2]===t[3])}},{key:"getAttributeName",value:function(){return this.props.insertExtraNode?"ant-click-animating":"ant-click-animating-without-extra-node"}},{key:"resetEffect",value:function(e){if(e&&e!==this.extraNode){var t=this.props.insertExtraNode,n=this.getAttributeName();e.removeAttribute(n),this.removeExtraStyleNode(),t&&this.extraNode&&e.contains(this.extraNode)&&e.removeChild(this.extraNode),x.a.removeEndEventListener(e,this.onTransitionEnd)}}},{key:"removeExtraStyleNode",value:function(){O&&(O.innerHTML="")}},{key:"componentDidMount",value:function(){this.instance=this.bindAnimationEvent(Object(b.findDOMNode)(this))}},{key:"componentWillUnmount",value:function(){this.instance&&this.instance.cancel(),this.clickWaveTimeoutId&&clearTimeout(this.clickWaveTimeoutId)}},{key:"render",value:function(){return this.props.children}}]),t}(h.Component),C=n(3),k=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n},E=/^[\u4e00-\u9fa5]{2}$/,j=E.test.bind(E);var N=function(e){function t(e){u()(this,t);var n=p()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleClick=function(e){var t=n.props.onClick;t&&t(e)},n.state={loading:e.loading,hasTwoCNChar:!1},n}return y()(t,e),s()(t,[{key:"componentDidMount",value:function(){this.fixTwoCNChar()}},{key:"componentWillReceiveProps",value:function(e){var t=this,n=this.props.loading,r=e.loading;n&&clearTimeout(this.delayTimeout),"boolean"!=typeof r&&r&&r.delay?this.delayTimeout=window.setTimeout(function(){return t.setState({loading:r})},r.delay):this.setState({loading:r})}},{key:"componentDidUpdate",value:function(){this.fixTwoCNChar()}},{key:"componentWillUnmount",value:function(){this.delayTimeout&&clearTimeout(this.delayTimeout)}},{key:"fixTwoCNChar",value:function(){var e=Object(b.findDOMNode)(this),t=e.textContent||e.innerText;this.isNeedInserted()&&j(t)?this.state.hasTwoCNChar||this.setState({hasTwoCNChar:!0}):this.state.hasTwoCNChar&&this.setState({hasTwoCNChar:!1})}},{key:"isNeedInserted",value:function(){var e=this.props,t=e.icon,n=e.children;return 1===h.Children.count(n)&&!t}},{key:"render",value:function(){var e,t=this,n=this.props,r=n.type,i=n.shape,c=n.size,u=n.className,l=n.children,s=n.icon,f=n.prefixCls,p=n.ghost,d=(n.loading,n.block),y=k(n,["type","shape","size","className","children","icon","prefixCls","ghost","loading","block"]),b=this.state,m=b.loading,v=b.hasTwoCNChar,x="";switch(c){case"large":x="lg";break;case"small":x="sm"}var O=new Date,E=11===O.getMonth()&&25===O.getDate(),N=g()(f,u,(e={},a()(e,f+"-"+r,r),a()(e,f+"-"+i,i),a()(e,f+"-"+x,x),a()(e,f+"-icon-only",!l&&s),a()(e,f+"-loading",m),a()(e,f+"-background-ghost",p),a()(e,f+"-two-chinese-chars",v),a()(e,f+"-block",d),a()(e,"christmas",E),e)),T=m?"loading":s,S=T?h.createElement(C.a,{type:T}):null,_=l||0===l?h.Children.map(l,function(e){return function(e,t){if(null!=e){var n=t?" ":"";return"string"!=typeof e&&"number"!=typeof e&&function(e){return"string"==typeof e}(e.type)&&j(e.props.children)?h.cloneElement(e,{},e.props.children.split("").join(n)):"string"==typeof e?(j(e)&&(e=e.split("").join(n)),h.createElement("span",null,e)):e}}(e,t.isNeedInserted())}):null,P=E?"Ho Ho Ho!":y.title;if("href"in y)return h.createElement("a",o()({},y,{className:N,onClick:this.handleClick,title:P}),S,_);var A=y.htmlType,z=k(y,["htmlType"]);return h.createElement(w,null,h.createElement("button",o()({},z,{type:A||"button",className:N,onClick:this.handleClick,title:P}),S,_))}}]),t}(h.Component),T=N;N.__ANT_BUTTON=!0,N.defaultProps={prefixCls:"ant-btn",loading:!1,ghost:!1,block:!1},N.propTypes={type:m.string,shape:m.oneOf(["circle","circle-outline"]),size:m.oneOf(["large","default","small"]),htmlType:m.oneOf(["submit","button","reset"]),onClick:m.func,loading:m.oneOfType([m.bool,m.object]),className:m.string,icon:m.string,block:m.bool};var S=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n},_=function(e){var t=e.prefixCls,n=void 0===t?"ant-btn-group":t,r=e.size,i=e.className,c=S(e,["prefixCls","size","className"]),u="";switch(r){case"large":u="lg";break;case"small":u="sm"}var l=g()(n,a()({},n+"-"+u,u),i);return h.createElement("div",o()({},c,{className:l}))};T.Group=_;t.a=T},40:function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(97),a=n(4),c=n(11),u=n(51);function l(){var e=b(["\n  position: relative;\n  top: 220px;\n  padding: 5px;\n"]);return l=function(){return e},e}function s(){var e=b(["\n  width: 290px;\n  height: 40px;\n  font-size: 20px;\n  position: relative;\n  top: 190px;\n  padding: 5px;\n  color: ",";\n"]);return s=function(){return e},e}function f(){var e=b(["\n  width: 290px;\n  font-size: 20px;\n  height: 60px;\n  position: relative;\n  top: 180px;\n  padding: 5px;\n"]);return f=function(){return e},e}function p(){var e=b(["\n  border: none;\n  width: 100px;\n  height: 30px;\n  position: relative;\n  top: 20px;\n  left: -105px;\n  z-index: 1;\n  padding-top: 3px;\n  padding-left: 5px;\n"]);return p=function(){return e},e}function d(){var e=b(["\n  border: 1px solid ",";\n  width: 100px;\n  height: 30px;\n  background: ",";\n  color: #fff;\n  position: relative;\n  top: 20px;\n  left: -105px;\n  z-index: 1;\n  padding-top: 3px;\n  padding-left: 5px;\n"]);return d=function(){return e},e}function y(){var e=b(["\n  width: 290px;\n  height: 200px;\n  margin-top: 5px;\n  position: absolute;\n"]);return y=function(){return e},e}function h(){var e=b(["\n  width: 300px;\n  height: 400px;\n  border-radius: 3px;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.19);\n\n  &:hover, &:focus {\n    border: "," solid 1px;\n  }\n"]);return h=function(){return e},e}function b(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var m,v="rgba(235, 72, 42, 1)",g=u.a.div(h(),v),x=u.a.img(y()),O=u.a.div(d(),v,v),w=u.a.div(p()),C=u.a.div(f()),k=u.a.div(s(),v),E=u.a.div(l());function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(e,t){return!t||"object"!==j(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var P,A=Object(c.b)("translateStore")(m=Object(c.c)(m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),T(this,S(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(t,o.a.Component),function(e,t,n){t&&N(e.prototype,t),n&&N(e,n)}(t,[{key:"render",value:function(){var e=this.props.translateStore.translateObj,t=this.props,n=t.title,r=t.prize,c=t.image,u=t.recommand;t.name;return o.a.createElement(g,null,u?o.a.createElement(O,null,e.RECOMMAND):o.a.createElement(w,null),o.a.createElement(x,{src:c}),o.a.createElement(C,null,Object(i.c)(n)),o.a.createElement(k,null,r),o.a.createElement(E,null,o.a.createElement(a.a,{type:"primary",size:"small",onClick:function(){alert(n)}},e.BUY)))}}]),t}())||m)||m,z=n(56),D=n(249),M=n.n(D),I=n(250),R=n.n(I);function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function W(e,t){return!t||"object"!==L(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function H(e){return(H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}n.d(t,"default",function(){return V});var G=[{key:"1",title:"TOMIX 小火車驚爆價!!",prize:"NT 2200",image:M.a,recommand:!0},{key:"2",title:"捷安特腳踏車大出清!! 錯過這次再等100年年年!!",prize:"NT 5900",image:R.a,recommand:!0}],V=Object(c.b)("translateStore")(P=Object(c.c)(P=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=W(this,(e=H(t)).call.apply(e,[this].concat(o)))).state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(t,o.a.Component),function(e,t,n){t&&U(e.prototype,t),n&&U(e,n)}(t,[{key:"render",value:function(){var e=this.props.translateStore.translateObj;return o.a.createElement("div",null,o.a.createElement(z.a,{title:e.CARD}),o.a.createElement("br",null),o.a.createElement("div",{style:{padding:"10px",display:"flex",flexDirection:"row"}},G.map(function(e){return o.a.createElement("div",{key:e.key,style:{paddingRight:"20px"}},o.a.createElement(A,{title:e.title,prize:e.prize,image:e.image,recommand:e.recommand}))})))}}]),t}())||P)||P},56:function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(51);function a(){var e=l(["\n  flex: 1;\n  color: black;\n  font-size: 20px;\n  padding-left: 15px;\n"]);return a=function(){return e},e}function c(){var e=l(["\n  width: 5px;\n  height: 30px;\n  background: black;\n"]);return c=function(){return e},e}function u(){var e=l(["\n  display: flex;\n"]);return u=function(){return e},e}function l(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var s=i.a.div(u()),f=i.a.div(c()),p=i.a.div(a());function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}n.d(t,"a",function(){return v});var v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),h(this,b(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,o.a.PureComponent),function(e,t,n){t&&y(e.prototype,t),n&&y(e,n)}(t,[{key:"render",value:function(){return o.a.createElement(s,null,o.a.createElement(f,null),o.a.createElement(p,null,this.props.title))}}]),t}()},97:function(e,t,n){"use strict";n.d(t,"c",function(){return r}),n.d(t,"b",function(){return o}),n.d(t,"a",function(){return i});var r=function(e){return e.length>20?"".concat(e.substring(0,20),"..."):e},o=["#00A99D","#F7931E","#E93922","#7C90A9","#A7B7CB","#CCCCCC","#333333","#70A4A1","#416585","#6A6A6A"],i={1:o[0],2:o[1],3:o[2],4:o[3],5:o[4],6:o[5],7:o[6],8:o[7],9:o[8],10:o[9]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,