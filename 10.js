(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{255:function(e,t,n){"use strict";var r=n(226),i=n.n(r),a=n(232),o=n.n(a),l=n(227),c=n.n(l),s=n(230),u=n.n(s),d=n(228),p=n.n(d),f=n(229),h=n.n(f),m=n(1),v=n(25),g=n(2),y=n(231),b=n.n(y),x=n(273),C=void 0,k=function(e){function t(){c()(this,t);var e=p()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return e.onClick=function(t,n){if(!(t.className.indexOf("-leave")>=0)){var r=e.props.insertExtraNode;e.extraNode=document.createElement("div");var i=e.extraNode;i.className="ant-click-animating-node";var a=e.getAttributeName();t.removeAttribute(a),t.setAttribute(a,"true"),C=C||document.createElement("style"),n&&"#ffffff"!==n&&"rgb(255, 255, 255)"!==n&&e.isNotGrey(n)&&!/rgba\(\d*, \d*, \d*, 0\)/.test(n)&&"transparent"!==n&&(i.style.borderColor=n,C.innerHTML="[ant-click-animating-without-extra-node]:after { border-color: "+n+"; }",document.body.contains(C)||document.body.appendChild(C)),r&&t.appendChild(i),x.a.addEndEventListener(t,e.onTransitionEnd)}},e.bindAnimationEvent=function(t){if(t&&t.getAttribute&&!t.getAttribute("disabled")&&!(t.className.indexOf("disabled")>=0)){var n=function(n){if("INPUT"!==n.target.tagName){e.resetEffect(t);var r=getComputedStyle(t).getPropertyValue("border-top-color")||getComputedStyle(t).getPropertyValue("border-color")||getComputedStyle(t).getPropertyValue("background-color");e.clickWaveTimeoutId=window.setTimeout(function(){return e.onClick(t,r)},0)}};return t.addEventListener("click",n,!0),{cancel:function(){t.removeEventListener("click",n,!0)}}}},e.onTransitionEnd=function(t){t&&"fadeEffect"===t.animationName&&e.resetEffect(t.target)},e}return h()(t,e),u()(t,[{key:"isNotGrey",value:function(e){var t=(e||"").match(/rgba?\((\d*), (\d*), (\d*)(, [\.\d]*)?\)/);return!(t&&t[1]&&t[2]&&t[3])||!(t[1]===t[2]&&t[2]===t[3])}},{key:"getAttributeName",value:function(){return this.props.insertExtraNode?"ant-click-animating":"ant-click-animating-without-extra-node"}},{key:"resetEffect",value:function(e){if(e&&e!==this.extraNode){var t=this.props.insertExtraNode,n=this.getAttributeName();e.removeAttribute(n),this.removeExtraStyleNode(),t&&this.extraNode&&e.contains(this.extraNode)&&e.removeChild(this.extraNode),x.a.removeEndEventListener(e,this.onTransitionEnd)}}},{key:"removeExtraStyleNode",value:function(){C&&(C.innerHTML="")}},{key:"componentDidMount",value:function(){this.instance=this.bindAnimationEvent(Object(v.findDOMNode)(this))}},{key:"componentWillUnmount",value:function(){this.instance&&this.instance.cancel(),this.clickWaveTimeoutId&&clearTimeout(this.clickWaveTimeoutId)}},{key:"render",value:function(){return this.props.children}}]),t}(m.Component),E=n(245),N=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&(n[r[i]]=e[r[i]])}return n},w=/^[\u4e00-\u9fa5]{2}$/,O=w.test.bind(w);var T=function(e){function t(e){c()(this,t);var n=p()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleClick=function(e){var t=n.props.onClick;t&&t(e)},n.state={loading:e.loading,hasTwoCNChar:!1},n}return h()(t,e),u()(t,[{key:"componentDidMount",value:function(){this.fixTwoCNChar()}},{key:"componentWillReceiveProps",value:function(e){var t=this,n=this.props.loading,r=e.loading;n&&clearTimeout(this.delayTimeout),"boolean"!=typeof r&&r&&r.delay?this.delayTimeout=window.setTimeout(function(){return t.setState({loading:r})},r.delay):this.setState({loading:r})}},{key:"componentDidUpdate",value:function(){this.fixTwoCNChar()}},{key:"componentWillUnmount",value:function(){this.delayTimeout&&clearTimeout(this.delayTimeout)}},{key:"fixTwoCNChar",value:function(){var e=Object(v.findDOMNode)(this),t=e.textContent||e.innerText;this.isNeedInserted()&&O(t)?this.state.hasTwoCNChar||this.setState({hasTwoCNChar:!0}):this.state.hasTwoCNChar&&this.setState({hasTwoCNChar:!1})}},{key:"isNeedInserted",value:function(){var e=this.props,t=e.icon,n=e.children;return 1===m.Children.count(n)&&!t}},{key:"render",value:function(){var e,t=this,n=this.props,r=n.type,a=n.shape,l=n.size,c=n.className,s=n.children,u=n.icon,d=n.prefixCls,p=n.ghost,f=(n.loading,n.block),h=N(n,["type","shape","size","className","children","icon","prefixCls","ghost","loading","block"]),v=this.state,g=v.loading,y=v.hasTwoCNChar,x="";switch(l){case"large":x="lg";break;case"small":x="sm"}var C=new Date,w=11===C.getMonth()&&25===C.getDate(),T=b()(d,c,(e={},o()(e,d+"-"+r,r),o()(e,d+"-"+a,a),o()(e,d+"-"+x,x),o()(e,d+"-icon-only",!s&&u),o()(e,d+"-loading",g),o()(e,d+"-background-ghost",p),o()(e,d+"-two-chinese-chars",y),o()(e,d+"-block",f),o()(e,"christmas",w),e)),j=g?"loading":u,A=j?m.createElement(E.a,{type:j}):null,S=s||0===s?m.Children.map(s,function(e){return function(e,t){if(null!=e){var n=t?" ":"";return"string"!=typeof e&&"number"!=typeof e&&function(e){return"string"==typeof e}(e.type)&&O(e.props.children)?m.cloneElement(e,{},e.props.children.split("").join(n)):"string"==typeof e?(O(e)&&(e=e.split("").join(n)),m.createElement("span",null,e)):e}}(e,t.isNeedInserted())}):null,z=w?"Ho Ho Ho!":h.title;if("href"in h)return m.createElement("a",i()({},h,{className:T,onClick:this.handleClick,title:z}),A,S);var P=h.htmlType,D=N(h,["htmlType"]);return m.createElement(k,null,m.createElement("button",i()({},D,{type:P||"button",className:T,onClick:this.handleClick,title:z}),A,S))}}]),t}(m.Component),j=T;T.__ANT_BUTTON=!0,T.defaultProps={prefixCls:"ant-btn",loading:!1,ghost:!1,block:!1},T.propTypes={type:g.string,shape:g.oneOf(["circle","circle-outline"]),size:g.oneOf(["large","default","small"]),htmlType:g.oneOf(["submit","button","reset"]),onClick:g.func,loading:g.oneOfType([g.bool,g.object]),className:g.string,icon:g.string,block:g.bool};var A=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&(n[r[i]]=e[r[i]])}return n},S=function(e){var t=e.prefixCls,n=void 0===t?"ant-btn-group":t,r=e.size,a=e.className,l=A(e,["prefixCls","size","className"]),c="";switch(r){case"large":c="lg";break;case"small":c="sm"}var s=b()(n,o()({},n+"-"+c,c),a);return m.createElement("div",i()({},l,{className:s}))};j.Group=S;t.a=j},264:function(e,t,n){"use strict";n.r(t);var r=n(59),i=n.n(r),a=n(233),o=n.n(a),l=n(234),c=n.n(l),s=n(235),u=n.n(s),d=n(236),p=n.n(d),f=n(1),h=n.n(f),m=n(300),v=n(255),g=n(60),y=n(238),b=n.n(y),x=n(239);function C(){var e=b()(["\n  position: relative;\n  top: 220px;\n  padding: 5px;\n"]);return C=function(){return e},e}function k(){var e=b()(["\n  width: 290px;\n  height: 40px;\n  font-size: 20px;\n  position: relative;\n  top: 190px;\n  padding: 5px;\n  color: ",";\n"]);return k=function(){return e},e}function E(){var e=b()(["\n  width: 290px;\n  font-size: 20px;\n  height: 60px;\n  position: relative;\n  top: 180px;\n  padding: 5px;\n"]);return E=function(){return e},e}function N(){var e=b()(["\n  border: none;\n  width: 100px;\n  height: 30px;\n  position: relative;\n  top: 20px;\n  left: -105px;\n  z-index: 1;\n  padding-top: 3px;\n  padding-left: 5px;\n"]);return N=function(){return e},e}function w(){var e=b()(["\n  border: 1px solid ",";\n  width: 100px;\n  height: 30px;\n  background: ",";\n  color: #fff;\n  position: relative;\n  top: 20px;\n  left: -105px;\n  z-index: 1;\n  padding-top: 3px;\n  padding-left: 5px;\n"]);return w=function(){return e},e}function O(){var e=b()(["\n  width: 290px;\n  height: 200px;\n  margin-top: 5px;\n  position: absolute;\n"]);return O=function(){return e},e}function T(){var e=b()(["\n  width: 300px;\n  height: 400px;\n  border-radius: 3px;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.19);\n\n  &:hover, &:focus {\n    border: "," solid 1px;\n  }\n"]);return T=function(){return e},e}var j,A,S="rgba(235, 72, 42, 1)",z=x.a.div(T(),S),P=x.a.img(O()),D=x.a.div(w(),S,S),_=x.a.div(N()),M=x.a.div(E()),I=x.a.div(k(),S),L=x.a.div(C()),U=Object(g.b)("translateStore")(j=Object(g.c)(j=function(e){function t(){return i()(this,t),c()(this,u()(t).apply(this,arguments))}return p()(t,e),o()(t,[{key:"render",value:function(){var e=this.props.translateStore.translateObj,t=this.props,n=t.title,r=t.prize,i=t.image,a=t.recommand;t.name;return h.a.createElement(z,null,a?h.a.createElement(D,null,e.RECOMMAND):h.a.createElement(_,null),h.a.createElement(P,{src:i}),h.a.createElement(M,null,Object(m.c)(n)),h.a.createElement(I,null,r),h.a.createElement(L,null,h.a.createElement(v.a,{type:"primary",size:"small",onClick:function(){alert(n)}},e.BUY)))}}]),t}(h.a.Component))||j)||j,W=n(266),H=n(483),B=n.n(H),R=n(484),G=n.n(R);n.d(t,"default",function(){return J});var V=[{key:"1",title:"TOMIX 小火車驚爆價!!",prize:"NT 2200",image:B.a,recommand:!0},{key:"2",title:"捷安特腳踏車大出清!! 錯過這次再等100年年年!!",prize:"NT 5900",image:G.a,recommand:!0}],J=Object(g.b)("translateStore")(A=Object(g.c)(A=function(e){function t(){var e,n;i()(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return(n=c()(this,(e=u()(t)).call.apply(e,[this].concat(a)))).state={},n}return p()(t,e),o()(t,[{key:"render",value:function(){var e=this.props.translateStore.translateObj;return h.a.createElement("div",null,h.a.createElement(W.a,{title:e.CARD}),h.a.createElement("br",null),h.a.createElement("div",{style:{padding:"10px",display:"flex",flexDirection:"row"}},V.map(function(e){return h.a.createElement("div",{key:e.key,style:{paddingRight:"20px"}},h.a.createElement(U,{title:e.title,prize:e.prize,image:e.image,recommand:e.recommand}))})))}}]),t}(h.a.Component))||A)||A},266:function(e,t,n){"use strict";var r=n(59),i=n.n(r),a=n(233),o=n.n(a),l=n(234),c=n.n(l),s=n(235),u=n.n(s),d=n(236),p=n.n(d),f=n(1),h=n.n(f),m=n(238),v=n.n(m),g=n(239);function y(){var e=v()(["\n  flex: 1;\n  color: black;\n  font-size: 20px;\n  padding-left: 15px;\n"]);return y=function(){return e},e}function b(){var e=v()(["\n  width: 5px;\n  height: 30px;\n  background: black;\n"]);return b=function(){return e},e}function x(){var e=v()(["\n  display: flex;\n"]);return x=function(){return e},e}var C=g.a.div(x()),k=g.a.div(b()),E=g.a.div(y());n.d(t,"a",function(){return N});var N=function(e){function t(){return i()(this,t),c()(this,u()(t).apply(this,arguments))}return p()(t,e),o()(t,[{key:"render",value:function(){return h.a.createElement(C,null,h.a.createElement(k,null),h.a.createElement(E,null,this.props.title))}}]),t}(h.a.PureComponent)},300:function(e,t,n){"use strict";n.d(t,"c",function(){return r}),n.d(t,"b",function(){return i}),n.d(t,"a",function(){return a});var r=function(e){return e.length>20?"".concat(e.substring(0,20),"..."):e},i=["#00A99D","#F7931E","#E93922","#7C90A9","#A7B7CB","#CCCCCC","#333333","#70A4A1","#416585","#6A6A6A"],a={1:i[0],2:i[1],3:i[2],4:i[3],5:i[4],6:i[5],7:i[6],8:i[7],9:i[8],10:i[9]}},483:function(e,t,n){e.exports=n.p+"6ee1e0be80e632ca5e8057af5797f01f.jpg"},484:function(e,t,n){e.exports=n.p+"3e26572bce8c82dea94a982cd109d5c1.jpg"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,