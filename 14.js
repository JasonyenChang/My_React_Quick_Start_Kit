(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{270:function(e,t,n){"use strict";var o=n(226),i=n.n(o),r=n(243),a=n.n(r),s=n(227),l=n.n(s),u=n(228),c=n.n(u),p=n(229),f=n.n(p),d=n(1),h=n.n(d),v=n(2),m=n.n(v),g=n(278),y=n(279),b=n(470),C=n(231),O=n.n(C);function w(){}function S(e,t,n){var o=t||"";return e.key||o+"item_"+n}function M(e){return e+"-menu-"}function T(e,t){var n=-1;h.a.Children.forEach(e,function(e){n++,e&&e.type&&e.type.isMenuItemGroup?h.a.Children.forEach(e.props.children,function(e){t(e,++n)}):t(e,n)})}var E=["defaultSelectedKeys","selectedKeys","defaultOpenKeys","openKeys","mode","getPopupContainer","onSelect","onDeselect","onDestroy","openTransitionName","openAnimation","subMenuOpenDelay","subMenuCloseDelay","forceSubMenuRender","triggerSubMenuAction","level","selectable","multiple","onOpenChange","visible","focusable","defaultActiveFirst","prefixCls","inlineIndent","parentMenu","title","rootPrefixCls","eventKey","active","onItemHover","onTitleMouseEnter","onTitleMouseLeave","onTitleClick","popupAlign","popupOffset","isOpen","renderMenuItem","manualRef","subMenuKey","disabled","index","isSelected","store","activeKey","builtinPlacements","overflowedIndicator","attribute","value","popupClassName","inlineCollapsed","menu","theme","itemIcon","expandIcon"],P=function(e){return e.getBoundingClientRect().width},N=n(25),x=n.n(N),D=n(471),_=n(303),k={adjustX:1,adjustY:1},I={topLeft:{points:["bl","tl"],overflow:k,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:k,offset:[0,7]},leftTop:{points:["tr","tl"],overflow:k,offset:[-4,0]},rightTop:{points:["tl","tr"],overflow:k,offset:[4,0]}},A=n(280),j=0,R={horizontal:"bottomLeft",vertical:"rightTop","vertical-left":"rightTop","vertical-right":"leftTop"},V=function(e,t,n){var o,r=M(t),a=e.getState();e.setState({defaultActiveFirst:i()({},a.defaultActiveFirst,(o={},o[r]=n,o))})},K=function(e){function t(n){l()(this,t);var o=c()(this,e.call(this,n));L.call(o);var i=n.store,r=n.eventKey,a=i.getState().defaultActiveFirst;o.isRootMenu=!1;var s=!1;return a&&(s=a[r]),V(i,r,s),o}return f()(t,e),t.prototype.componentDidMount=function(){this.componentDidUpdate()},t.prototype.componentDidUpdate=function(){var e=this,t=this.props,n=t.mode,o=t.parentMenu,i=t.manualRef;i&&i(this),"horizontal"===n&&o.isRootMenu&&this.props.isOpen&&(this.minWidthTimeout=setTimeout(function(){return e.adjustWidth()},0))},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.onDestroy,n=e.eventKey;t&&t(n),this.minWidthTimeout&&clearTimeout(this.minWidthTimeout),this.mouseenterTimeout&&clearTimeout(this.mouseenterTimeout)},t.prototype.renderChildren=function(e){var t=this.props,n={mode:"horizontal"===t.mode?"vertical":t.mode,visible:this.props.isOpen,level:t.level+1,inlineIndent:t.inlineIndent,focusable:!1,onClick:this.onSubMenuClick,onSelect:this.onSelect,onDeselect:this.onDeselect,onDestroy:this.onDestroy,selectedKeys:t.selectedKeys,eventKey:t.eventKey+"-menu-",openKeys:t.openKeys,openTransitionName:t.openTransitionName,openAnimation:t.openAnimation,onOpenChange:this.onOpenChange,subMenuOpenDelay:t.subMenuOpenDelay,parentMenu:this,subMenuCloseDelay:t.subMenuCloseDelay,forceSubMenuRender:t.forceSubMenuRender,triggerSubMenuAction:t.triggerSubMenuAction,builtinPlacements:t.builtinPlacements,defaultActiveFirst:t.store.getState().defaultActiveFirst[M(t.eventKey)],multiple:t.multiple,prefixCls:t.rootPrefixCls,id:this._menuId,manualRef:this.saveMenuInstance,itemIcon:t.itemIcon,expandIcon:t.expandIcon},o=this.haveRendered;if(this.haveRendered=!0,this.haveOpened=this.haveOpened||n.visible||n.forceSubMenuRender,!this.haveOpened)return h.a.createElement("div",null);var r=o||!n.visible||"inline"===!n.mode;n.className=" "+n.prefixCls+"-sub";var a={};return n.openTransitionName?a.transitionName=n.openTransitionName:"object"==typeof n.openAnimation&&(a.animation=i()({},n.openAnimation),r||delete a.animation.appear),h.a.createElement(A.a,i()({},a,{showProp:"visible",component:"",transitionAppear:r}),h.a.createElement(G,i()({},n,{id:this._menuId}),e))},t.prototype.render=function(){var e,t=i()({},this.props),n=t.isOpen,o=t.level,r=this.getPrefixCls(),a="inline"===t.mode,s=O()(r,r+"-"+t.mode,((e={})[t.className]=!!t.className,e[this.getOpenClassName()]=n,e[this.getActiveClassName()]=t.active||n&&!a,e[this.getDisabledClassName()]=t.disabled,e[this.getSelectedClassName()]=this.isChildrenSelected(),e));this._menuId||(t.eventKey?this._menuId=t.eventKey+"$Menu":this._menuId="$__$"+ ++j+"$Menu");var l={},u={},c={};t.disabled||(l={onMouseLeave:this.onMouseLeave,onMouseEnter:this.onMouseEnter},u={onClick:this.onTitleClick},c={onMouseEnter:this.onTitleMouseEnter,onMouseLeave:this.onTitleMouseLeave});var p={};a&&(p.paddingLeft=t.inlineIndent*t.level);var f={};this.props.isOpen&&(f={"aria-owns":this._menuId});var d=null;"horizontal"!==t.mode&&(d=this.props.expandIcon,"function"==typeof this.props.expandIcon&&(d=h.a.createElement(this.props.expandIcon,i()({},this.props))));var v=h.a.createElement("div",i()({ref:this.saveSubMenuTitle,style:p,className:r+"-title"},c,u,{"aria-expanded":n},f,{"aria-haspopup":"true",title:"string"==typeof t.title?t.title:void 0}),t.title,d||h.a.createElement("i",{className:r+"-arrow"})),m=this.renderChildren(t.children),g=t.parentMenu.isRootMenu?t.parentMenu.props.getPopupContainer:function(e){return e.parentNode},y=R[t.mode],b=t.popupOffset?{offset:t.popupOffset}:{},C="inline"===t.mode?"":t.popupClassName,w=t.disabled,S=t.triggerSubMenuAction,M=t.subMenuOpenDelay,T=t.forceSubMenuRender,P=t.subMenuCloseDelay,N=t.builtinPlacements;return E.forEach(function(e){return delete t[e]}),delete t.onClick,h.a.createElement("li",i()({},t,l,{className:s,role:"menuitem"}),a&&v,a&&m,!a&&h.a.createElement(_.a,{prefixCls:r,popupClassName:r+"-popup "+C,getPopupContainer:g,builtinPlacements:i()({},I,N),popupPlacement:y,popupVisible:n,popupAlign:b,popup:m,action:w?[]:[S],mouseEnterDelay:M,mouseLeaveDelay:P,onPopupVisibleChange:this.onPopupVisibleChange,forceRender:T,zIndex:o},v))},t}(h.a.Component);K.propTypes={parentMenu:m.a.object,title:m.a.node,children:m.a.any,selectedKeys:m.a.array,openKeys:m.a.array,onClick:m.a.func,onOpenChange:m.a.func,rootPrefixCls:m.a.string,eventKey:m.a.string,multiple:m.a.bool,active:m.a.bool,onItemHover:m.a.func,onSelect:m.a.func,triggerSubMenuAction:m.a.string,onDeselect:m.a.func,onDestroy:m.a.func,onMouseEnter:m.a.func,onMouseLeave:m.a.func,onTitleMouseEnter:m.a.func,onTitleMouseLeave:m.a.func,onTitleClick:m.a.func,popupOffset:m.a.array,isOpen:m.a.bool,store:m.a.object,mode:m.a.oneOf(["horizontal","vertical","vertical-left","vertical-right","inline"]),manualRef:m.a.func,itemIcon:m.a.oneOfType([m.a.func,m.a.node]),expandIcon:m.a.oneOfType([m.a.func,m.a.node])},K.defaultProps={onMouseEnter:w,onMouseLeave:w,onTitleMouseEnter:w,onTitleMouseLeave:w,onTitleClick:w,manualRef:w,mode:"vertical",title:""};var L=function(){var e=this;this.onDestroy=function(t){e.props.onDestroy(t)},this.onKeyDown=function(t){var n=t.keyCode,o=e.menuInstance,i=e.props,r=i.isOpen,a=i.store;if(n===y.a.ENTER)return e.onTitleClick(t),V(a,e.props.eventKey,!0),!0;if(n===y.a.RIGHT)return r?o.onKeyDown(t):(e.triggerOpenChange(!0),V(a,e.props.eventKey,!0)),!0;if(n===y.a.LEFT){var s=void 0;if(!r)return;return(s=o.onKeyDown(t))||(e.triggerOpenChange(!1),s=!0),s}return!r||n!==y.a.UP&&n!==y.a.DOWN?void 0:o.onKeyDown(t)},this.onOpenChange=function(t){e.props.onOpenChange(t)},this.onPopupVisibleChange=function(t){e.triggerOpenChange(t,t?"mouseenter":"mouseleave")},this.onMouseEnter=function(t){var n=e.props,o=n.eventKey,i=n.onMouseEnter,r=n.store;V(r,e.props.eventKey,!1),i({key:o,domEvent:t})},this.onMouseLeave=function(t){var n=e.props,o=n.parentMenu,i=n.eventKey,r=n.onMouseLeave;o.subMenuInstance=e,r({key:i,domEvent:t})},this.onTitleMouseEnter=function(t){var n=e.props,o=n.eventKey,i=n.onItemHover,r=n.onTitleMouseEnter;i({key:o,hover:!0}),r({key:o,domEvent:t})},this.onTitleMouseLeave=function(t){var n=e.props,o=n.parentMenu,i=n.eventKey,r=n.onItemHover,a=n.onTitleMouseLeave;o.subMenuInstance=e,r({key:i,hover:!1}),a({key:i,domEvent:t})},this.onTitleClick=function(t){var n=e.props;n.onTitleClick({key:n.eventKey,domEvent:t}),"hover"!==n.triggerSubMenuAction&&(e.triggerOpenChange(!n.isOpen,"click"),V(n.store,e.props.eventKey,!1))},this.onSubMenuClick=function(t){e.props.onClick(e.addKeyPath(t))},this.onSelect=function(t){e.props.onSelect(t)},this.onDeselect=function(t){e.props.onDeselect(t)},this.getPrefixCls=function(){return e.props.rootPrefixCls+"-submenu"},this.getActiveClassName=function(){return e.getPrefixCls()+"-active"},this.getDisabledClassName=function(){return e.getPrefixCls()+"-disabled"},this.getSelectedClassName=function(){return e.getPrefixCls()+"-selected"},this.getOpenClassName=function(){return e.props.rootPrefixCls+"-submenu-open"},this.saveMenuInstance=function(t){e.menuInstance=t},this.addKeyPath=function(t){return i()({},t,{keyPath:(t.keyPath||[]).concat(e.props.eventKey)})},this.triggerOpenChange=function(t,n){var o=e.props.eventKey,i=function(){e.onOpenChange({key:o,item:e,trigger:n,open:t})};"mouseenter"===n?e.mouseenterTimeout=setTimeout(function(){i()},0):i()},this.isChildrenSelected=function(){var t={find:!1};return function e(t,n,o){t&&!o.find&&h.a.Children.forEach(t,function(t){if(t){var i=t.type;if(!i||!(i.isSubMenu||i.isMenuItem||i.isMenuItemGroup))return;-1!==n.indexOf(t.key)?o.find=!0:t.props.children&&e(t.props.children,n,o)}})}(e.props.children,e.props.selectedKeys,t),t.find},this.isOpen=function(){return-1!==e.props.openKeys.indexOf(e.props.eventKey)},this.adjustWidth=function(){if(e.subMenuTitle&&e.menuInstance){var t=x.a.findDOMNode(e.menuInstance);t.offsetWidth>=e.subMenuTitle.offsetWidth||(t.style.minWidth=e.subMenuTitle.offsetWidth+"px")}},this.saveSubMenuTitle=function(t){e.subMenuTitle=t}},F=Object(g.connect)(function(e,t){var n=e.openKeys,o=e.activeKey,i=e.selectedKeys,r=t.eventKey,a=t.subMenuKey;return{isOpen:n.indexOf(r)>-1,active:o[a]===r,selectedKeys:i}})(K);F.isSubMenu=!0;var W=F;!("undefined"==typeof window||!window.document||!window.document.createElement)&&n(478);var H=function(e){function t(){var n,o,r;l()(this,t);for(var s=arguments.length,u=Array(s),p=0;p<s;p++)u[p]=arguments[p];return n=o=c()(this,e.call.apply(e,[this].concat(u))),o.state={lastVisibleIndex:void 0},o.getOverflowedSubMenuItem=function(e,t,n){var r=o.props,s=r.overflowedIndicator,l=r.level,u=r.mode,c=r.prefixCls,p=r.theme,f=r.style;if(1!==l||"horizontal"!==u)return null;var d=o.props.children[0].props,v=(d.children,d.title,d.eventKey,a()(d,["children","title","eventKey"])),m=i()({},f),g=e+"-overflowed-indicator";0===t.length&&!0!==n?m=i()({},m,{display:"none"}):n&&(m=i()({},m,{visibility:"hidden",position:"absolute"}),g+="-placeholder");var y=p?c+"-"+p:"";return h.a.createElement(W,i()({title:s,className:c+"-overflowed-submenu",popupClassName:y},v,{key:g,eventKey:e+"-overflowed-indicator",disabled:!1,style:m}),t)},o.setChildrenWidthAndResize=function(){if("horizontal"===o.props.mode){var e=x.a.findDOMNode(o);if(e){var t=e.children;if(t&&0!==t.length){o.childrenSizes=[];var n=o.props.children,i=e.children[t.length-1];i.style.width="auto",o.childrenSizes=n.map(function(t,n){return P(e.children[2*n+1])}),o.overflowedIndicatorWidth=P(e.children[e.children.length-1]),o.originalTotalWidth=o.childrenSizes.reduce(function(e,t){return e+t},0),o.handleResize(),i.style.width=0}}}},o.resizeObserver=null,o.mutationObserver=null,o.originalTotalWidth=0,o.overflowedItems=[],o.childrenSizes=[],o.handleResize=function(){if("horizontal"===o.props.mode){var e=x.a.findDOMNode(o);if(e){var t=P(e);o.overflowedItems=[];var n=0,i=void 0;o.originalTotalWidth>t&&(i=-1,o.childrenSizes.forEach(function(e){(n+=e)+o.overflowedIndicatorWidth<=t&&i++})),o.setState({lastVisibleIndex:i})}}},r=n,c()(o,r)}return f()(t,e),t.prototype.componentDidMount=function(){var e=this;if(this.setChildrenWidthAndResize(),1===this.props.level&&"horizontal"===this.props.mode){var t=x.a.findDOMNode(this);if(!t)return;this.resizeObserver=new D.a(function(t){t.forEach(e.setChildrenWidthAndResize)}),[].slice.call(t.children).concat(t).forEach(function(t){e.resizeObserver.observe(t)}),"undefined"!=typeof MutationObserver&&(this.mutationObserver=new MutationObserver(function(){e.resizeObserver.disconnect(),[].slice.call(t.children).concat(t).forEach(function(t){e.resizeObserver.observe(t)}),e.setChildrenWidthAndResize()}),this.mutationObserver.observe(t,{attributes:!1,childList:!0,subTree:!1}))}},t.prototype.componentWillUnmount=function(){this.resizeObserver&&this.resizeObserver.disconnect(),this.mutationObserver&&this.resizeObserver.disconnect()},t.prototype.renderChildren=function(e){var t=this,n=this.state.lastVisibleIndex;return(e||[]).reduce(function(o,i,r){var a=i;if("horizontal"===t.props.mode){var s=t.getOverflowedSubMenuItem(i.props.eventKey,[]);void 0!==n&&-1!==t.props.className.indexOf(t.props.prefixCls+"-root")&&(r>n&&(a=h.a.cloneElement(i,{style:{visibility:"hidden"},eventKey:i.props.eventKey+"-hidden"})),r===n+1&&(t.overflowedItems=e.slice(n+1).map(function(e){return h.a.cloneElement(e,{key:e.props.eventKey,mode:"vertical-left"})}),s=t.getOverflowedSubMenuItem(i.props.eventKey,t.overflowedItems)));var l=[].concat(o,[s,a]);return r===e.length-1&&l.push(t.getOverflowedSubMenuItem(i.props.eventKey,[],!0)),l}return[].concat(o,[a])},[])},t.prototype.render=function(){var e=this.props,t=e.hiddenClassName,n=e.visible,o=(e.prefixCls,e.overflowedIndicator,e.mode,e.level,e.tag),i=(e.children,e.theme,a()(e,["hiddenClassName","visible","prefixCls","overflowedIndicator","mode","level","tag","children","theme"]));return n||(i.className+=" "+t),h.a.createElement(o,i,this.renderChildren(this.props.children))},t}(h.a.Component);H.propTypes={className:m.a.string,children:m.a.node,mode:m.a.oneOf(["horizontal","vertical","vertical-left","vertical-right","inline"]),prefixCls:m.a.string,level:m.a.number,theme:m.a.string,overflowedIndicator:m.a.node,visible:m.a.bool,hiddenClassName:m.a.string,tag:m.a.string,style:m.a.object},H.defaultProps={tag:"div",className:""};var U=H;function B(e,t,n){var o,r=e.getState();e.setState({activeKey:i()({},r.activeKey,(o={},o[t]=n,o))})}function z(e){return e.eventKey||"0-menu-"}function Y(e,t){var n=t,o=e.children,i=e.eventKey;if(n){var r=void 0;if(T(o,function(e,t){e&&!e.props.disabled&&n===S(e,i,t)&&(r=!0)}),r)return n}return n=null,e.defaultActiveFirst?(T(o,function(e,t){n||!e||e.props.disabled||(n=S(e,i,t))}),n):n}var q=function(e){function t(n){var o;l()(this,t);var r=c()(this,e.call(this,n));return X.call(r),n.store.setState({activeKey:i()({},n.store.getState().activeKey,(o={},o[n.eventKey]=Y(n,n.activeKey),o))}),r.instanceArray=[],r}return f()(t,e),t.prototype.componentDidMount=function(){this.props.manualRef&&this.props.manualRef(this)},t.prototype.shouldComponentUpdate=function(e){return this.props.visible||e.visible},t.prototype.componentDidUpdate=function(){var e=this.props,t="activeKey"in e?e.activeKey:e.store.getState().activeKey[z(e)],n=Y(e,t);n!==t&&B(e.store,z(e),n)},t.prototype.render=function(){var e=this,t=a()(this.props,[]);this.instanceArray=[];var n={className:O()(t.prefixCls,t.className,t.prefixCls+"-"+t.mode),role:t.role||"menu"};t.id&&(n.id=t.id),t.focusable&&(n.tabIndex="0",n.onKeyDown=this.onKeyDown);var o=t.prefixCls,r=t.eventKey,s=t.visible,l=t.level,u=t.mode,c=t.overflowedIndicator,p=t.theme;return E.forEach(function(e){return delete t[e]}),delete t.onClick,h.a.createElement(U,i()({},t,{prefixCls:o,mode:u,tag:"ul",level:l,theme:p,hiddenClassName:o+"-hidden",visible:s,overflowedIndicator:c},n),h.a.Children.map(t.children,function(t,n){return e.renderMenuItem(t,n,r||"0-menu-")}))},t}(h.a.Component);q.propTypes={onSelect:m.a.func,onClick:m.a.func,onDeselect:m.a.func,onOpenChange:m.a.func,onDestroy:m.a.func,openTransitionName:m.a.string,openAnimation:m.a.oneOfType([m.a.string,m.a.object]),openKeys:m.a.arrayOf(m.a.string),visible:m.a.bool,children:m.a.any,parentMenu:m.a.object,eventKey:m.a.string,store:m.a.shape({getState:m.a.func,setState:m.a.func}),focusable:m.a.bool,multiple:m.a.bool,style:m.a.object,defaultActiveFirst:m.a.bool,activeKey:m.a.string,selectedKeys:m.a.arrayOf(m.a.string),defaultSelectedKeys:m.a.arrayOf(m.a.string),defaultOpenKeys:m.a.arrayOf(m.a.string),level:m.a.number,mode:m.a.oneOf(["horizontal","vertical","vertical-left","vertical-right","inline"]),triggerSubMenuAction:m.a.oneOf(["click","hover"]),inlineIndent:m.a.oneOfType([m.a.number,m.a.string]),manualRef:m.a.func,itemIcon:m.a.oneOfType([m.a.func,m.a.node]),expandIcon:m.a.oneOfType([m.a.func,m.a.node])},q.defaultProps={prefixCls:"rc-menu",className:"",mode:"vertical",level:1,inlineIndent:24,visible:!0,focusable:!0,style:{},manualRef:w};var X=function(){var e=this;this.onKeyDown=function(t,n){var o=t.keyCode,i=void 0;if(e.getFlatInstanceArray().forEach(function(e){e&&e.props.active&&e.onKeyDown&&(i=e.onKeyDown(t))}),i)return 1;var r=null;return o!==y.a.UP&&o!==y.a.DOWN||(r=e.step(o===y.a.UP?-1:1)),r?(t.preventDefault(),B(e.props.store,z(e.props),r.props.eventKey),"function"==typeof n&&n(r),1):void 0},this.onItemHover=function(t){var n=t.key,o=t.hover;B(e.props.store,z(e.props),o?n:null)},this.onDeselect=function(t){e.props.onDeselect(t)},this.onSelect=function(t){e.props.onSelect(t)},this.onClick=function(t){e.props.onClick(t)},this.onOpenChange=function(t){e.props.onOpenChange(t)},this.onDestroy=function(t){e.props.onDestroy(t)},this.getFlatInstanceArray=function(){return e.instanceArray},this.getOpenTransitionName=function(){return e.props.openTransitionName},this.step=function(t){var n=e.getFlatInstanceArray(),o=e.props.store.getState().activeKey[z(e.props)],i=n.length;if(!i)return null;t<0&&(n=n.concat().reverse());var r=-1;if(n.every(function(e,t){return!e||e.props.eventKey!==o||(r=t,!1)}),e.props.defaultActiveFirst||-1===r||!function(e){return!e.length||e.every(function(e){return!!e.props.disabled})}(n.slice(r,i-1))){var a=(r+1)%i,s=a;do{var l=n[s];if(l&&!l.props.disabled)return l;s=(s+1)%i}while(s!==a);return null}},this.renderCommonMenuItem=function(t,n,o){var r=e.props.store.getState(),a=e.props,s=S(t,a.eventKey,n),l=t.props,u=s===r.activeKey,c=i()({mode:l.mode||a.mode,level:a.level,inlineIndent:a.inlineIndent,renderMenuItem:e.renderMenuItem,rootPrefixCls:a.prefixCls,index:n,parentMenu:a.parentMenu,manualRef:l.disabled?void 0:Object(b.a)(t.ref,function(e){if(e){var t=this.instanceArray.indexOf(e);-1!==t?this.instanceArray[t]=e:this.instanceArray.push(e)}}.bind(e)),eventKey:s,active:!l.disabled&&u,multiple:a.multiple,onClick:function(t){(l.onClick||w)(t),e.onClick(t)},onItemHover:e.onItemHover,openTransitionName:e.getOpenTransitionName(),openAnimation:a.openAnimation,subMenuOpenDelay:a.subMenuOpenDelay,subMenuCloseDelay:a.subMenuCloseDelay,forceSubMenuRender:a.forceSubMenuRender,onOpenChange:e.onOpenChange,onDeselect:e.onDeselect,onSelect:e.onSelect,builtinPlacements:a.builtinPlacements,itemIcon:l.itemIcon||e.props.itemIcon,expandIcon:l.expandIcon||e.props.expandIcon},o);return"inline"===a.mode&&(c.triggerSubMenuAction="click"),h.a.cloneElement(t,c)},this.renderMenuItem=function(t,n,o){if(!t)return null;var i=e.props.store.getState(),r={openKeys:i.openKeys,selectedKeys:i.selectedKeys,triggerSubMenuAction:e.props.triggerSubMenuAction,subMenuKey:o};return e.renderCommonMenuItem(t,n,r)}},G=Object(g.connect)()(q),Z=function(e){function t(n){l()(this,t);var o=c()(this,e.call(this,n));$.call(o),o.isRootMenu=!0;var i=n.defaultSelectedKeys,r=n.defaultOpenKeys;return"selectedKeys"in n&&(i=n.selectedKeys||[]),"openKeys"in n&&(r=n.openKeys||[]),o.store=Object(g.create)({selectedKeys:i,openKeys:r,activeKey:{"0-menu-":Y(n,n.activeKey)}}),o}return f()(t,e),t.prototype.componentDidMount=function(){this.updateMiniStore()},t.prototype.componentDidUpdate=function(){this.updateMiniStore()},t.prototype.updateMiniStore=function(){"selectedKeys"in this.props&&this.store.setState({selectedKeys:this.props.selectedKeys||[]}),"openKeys"in this.props&&this.store.setState({openKeys:this.props.openKeys||[]})},t.prototype.render=function(){var e=this,t=a()(this.props,[]);return t.className+=" "+t.prefixCls+"-root",t=i()({},t,{onClick:this.onClick,onOpenChange:this.onOpenChange,onDeselect:this.onDeselect,onSelect:this.onSelect,openTransitionName:this.getOpenTransitionName(),parentMenu:this}),h.a.createElement(g.Provider,{store:this.store},h.a.createElement(G,i()({},t,{ref:function(t){return e.innerMenu=t}}),this.props.children))},t}(h.a.Component);Z.propTypes={defaultSelectedKeys:m.a.arrayOf(m.a.string),defaultActiveFirst:m.a.bool,selectedKeys:m.a.arrayOf(m.a.string),defaultOpenKeys:m.a.arrayOf(m.a.string),openKeys:m.a.arrayOf(m.a.string),mode:m.a.oneOf(["horizontal","vertical","vertical-left","vertical-right","inline"]),getPopupContainer:m.a.func,onClick:m.a.func,onSelect:m.a.func,onDeselect:m.a.func,onDestroy:m.a.func,openTransitionName:m.a.string,openAnimation:m.a.oneOfType([m.a.string,m.a.object]),subMenuOpenDelay:m.a.number,subMenuCloseDelay:m.a.number,forceSubMenuRender:m.a.bool,triggerSubMenuAction:m.a.string,level:m.a.number,selectable:m.a.bool,multiple:m.a.bool,children:m.a.any,className:m.a.string,style:m.a.object,activeKey:m.a.string,prefixCls:m.a.string,builtinPlacements:m.a.object,itemIcon:m.a.oneOfType([m.a.func,m.a.node]),expandIcon:m.a.oneOfType([m.a.func,m.a.node]),overflowedIndicator:m.a.node},Z.defaultProps={selectable:!0,onClick:w,onSelect:w,onOpenChange:w,onDeselect:w,defaultSelectedKeys:[],defaultOpenKeys:[],subMenuOpenDelay:.1,subMenuCloseDelay:.1,triggerSubMenuAction:"hover",prefixCls:"rc-menu",className:"",mode:"vertical",style:{},builtinPlacements:{},overflowedIndicator:h.a.createElement("span",null,"···")};var $=function(){var e=this;this.onSelect=function(t){var n=e.props;if(n.selectable){var o=e.store.getState().selectedKeys,r=t.key;o=n.multiple?o.concat([r]):[r],"selectedKeys"in n||e.store.setState({selectedKeys:o}),n.onSelect(i()({},t,{selectedKeys:o}))}},this.onClick=function(t){e.props.onClick(t)},this.onKeyDown=function(t,n){e.innerMenu.getWrappedInstance().onKeyDown(t,n)},this.onOpenChange=function(t){var n=e.props,o=e.store.getState().openKeys.concat(),i=!1,r=function(e){var t=!1;if(e.open)(t=-1===o.indexOf(e.key))&&o.push(e.key);else{var n=o.indexOf(e.key);(t=-1!==n)&&o.splice(n,1)}i=i||t};Array.isArray(t)?t.forEach(r):r(t),i&&("openKeys"in e.props||e.store.setState({openKeys:o}),n.onOpenChange(o))},this.onDeselect=function(t){var n=e.props;if(n.selectable){var o=e.store.getState().selectedKeys.concat(),r=t.key,a=o.indexOf(r);-1!==a&&o.splice(a,1),"selectedKeys"in n||e.store.setState({selectedKeys:o}),n.onDeselect(i()({},t,{selectedKeys:o}))}},this.getOpenTransitionName=function(){var t=e.props,n=t.openTransitionName,o=t.openAnimation;return n||"string"!=typeof o||(n=t.prefixCls+"-open-"+o),n}},Q=Z,J=n(290),ee=n.n(J),te=function(e){function t(n){l()(this,t);var o=c()(this,e.call(this,n));return o.onKeyDown=function(e){if(e.keyCode===y.a.ENTER)return o.onClick(e),!0},o.onMouseLeave=function(e){var t=o.props,n=t.eventKey,i=t.onItemHover,r=t.onMouseLeave;i({key:n,hover:!1}),r({key:n,domEvent:e})},o.onMouseEnter=function(e){var t=o.props,n=t.eventKey,i=t.onItemHover,r=t.onMouseEnter;i({key:n,hover:!0}),r({key:n,domEvent:e})},o.onClick=function(e){var t=o.props,n=t.eventKey,i=t.multiple,r=t.onClick,a=t.onSelect,s=t.onDeselect,l=t.isSelected,u={key:n,keyPath:[n],item:o,domEvent:e};r(u),i?l?s(u):a(u):l||a(u)},o}return f()(t,e),t.prototype.componentDidMount=function(){this.callRef()},t.prototype.componentDidUpdate=function(){this.props.active&&ee()(x.a.findDOMNode(this),x.a.findDOMNode(this.props.parentMenu),{onlyScrollIfNeeded:!0}),this.callRef()},t.prototype.componentWillUnmount=function(){var e=this.props;e.onDestroy&&e.onDestroy(e.eventKey)},t.prototype.getPrefixCls=function(){return this.props.rootPrefixCls+"-item"},t.prototype.getActiveClassName=function(){return this.getPrefixCls()+"-active"},t.prototype.getSelectedClassName=function(){return this.getPrefixCls()+"-selected"},t.prototype.getDisabledClassName=function(){return this.getPrefixCls()+"-disabled"},t.prototype.callRef=function(){this.props.manualRef&&this.props.manualRef(this)},t.prototype.render=function(){var e,t=i()({},this.props),n=O()(this.getPrefixCls(),t.className,((e={})[this.getActiveClassName()]=!t.disabled&&t.active,e[this.getSelectedClassName()]=t.isSelected,e[this.getDisabledClassName()]=t.disabled,e)),o=i()({},t.attribute,{title:t.title,className:n,role:t.role||"menuitem","aria-disabled":t.disabled});"option"===t.role?o=i()({},o,{role:"option","aria-selected":t.isSelected}):null!==t.role&&"none"!==t.role||(o.role="none");var r={onClick:t.disabled?null:this.onClick,onMouseLeave:t.disabled?null:this.onMouseLeave,onMouseEnter:t.disabled?null:this.onMouseEnter},a=i()({},t.style);"inline"===t.mode&&(a.paddingLeft=t.inlineIndent*t.level),E.forEach(function(e){return delete t[e]});var s=this.props.itemIcon;return"function"==typeof this.props.itemIcon&&(s=h.a.createElement(this.props.itemIcon,this.props)),h.a.createElement("li",i()({},t,o,r,{style:a}),t.children,s)},t}(h.a.Component);te.propTypes={attribute:m.a.object,rootPrefixCls:m.a.string,eventKey:m.a.string,active:m.a.bool,children:m.a.any,selectedKeys:m.a.array,disabled:m.a.bool,title:m.a.string,onItemHover:m.a.func,onSelect:m.a.func,onClick:m.a.func,onDeselect:m.a.func,parentMenu:m.a.object,onDestroy:m.a.func,onMouseEnter:m.a.func,onMouseLeave:m.a.func,multiple:m.a.bool,isSelected:m.a.bool,manualRef:m.a.func,itemIcon:m.a.oneOfType([m.a.func,m.a.node])},te.defaultProps={onSelect:w,onMouseEnter:w,onMouseLeave:w,manualRef:w},te.isMenuItem=!0;var ne=Object(g.connect)(function(e,t){var n=e.activeKey,o=e.selectedKeys,i=t.eventKey;return{active:n[t.subMenuKey]===i,isSelected:-1!==o.indexOf(i)}})(te),oe=function(e){function t(){var n,o,i;l()(this,t);for(var r=arguments.length,a=Array(r),s=0;s<r;s++)a[s]=arguments[s];return n=o=c()(this,e.call.apply(e,[this].concat(a))),o.renderInnerMenuItem=function(e){var t=o.props;return(0,t.renderMenuItem)(e,t.index,o.props.subMenuKey)},i=n,c()(o,i)}return f()(t,e),t.prototype.render=function(){var e=a()(this.props,[]),t=e.className,n=void 0===t?"":t,o=e.rootPrefixCls,r=o+"-item-group-title",s=o+"-item-group-list",l=e.title,u=e.children;return E.forEach(function(t){return delete e[t]}),delete e.onClick,h.a.createElement("li",i()({},e,{className:n+" "+o+"-item-group"}),h.a.createElement("div",{className:r,title:"string"==typeof l?l:void 0},l),h.a.createElement("ul",{className:s},h.a.Children.map(u,this.renderInnerMenuItem)))},t}(h.a.Component);oe.propTypes={renderMenuItem:m.a.func,index:m.a.number,className:m.a.string,subMenuKey:m.a.string,rootPrefixCls:m.a.string},oe.defaultProps={disabled:!0},oe.isMenuItemGroup=!0;var ie=oe,re=function(e){function t(){return l()(this,t),c()(this,e.apply(this,arguments))}return f()(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=e.rootPrefixCls,o=e.style;return h.a.createElement("li",{className:t+" "+n+"-item-divider",style:o})},t}(h.a.Component);re.propTypes={className:m.a.string,rootPrefixCls:m.a.string,style:m.a.object},re.defaultProps={disabled:!0,className:"",style:{}};var ae=re;n.d(t,"d",function(){return W}),n.d(t,"b",function(){return ne}),n.d(t,"c",function(){return ie}),n.d(t,"a",function(){return ae});t.e=Q},278:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.create=t.connect=t.Provider=void 0;var o=a(n(466)),i=a(n(467)),r=a(n(469));function a(e){return e&&e.__esModule?e:{default:e}}t.Provider=o.default,t.connect=i.default,t.create=r.default},279:function(e,t,n){"use strict";var o={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=o.F1&&t<=o.F12)return!1;switch(t){case o.ALT:case o.CAPS_LOCK:case o.CONTEXT_MENU:case o.CTRL:case o.DOWN:case o.END:case o.ESC:case o.HOME:case o.INSERT:case o.LEFT:case o.MAC_FF_META:case o.META:case o.NUMLOCK:case o.NUM_CENTER:case o.PAGE_DOWN:case o.PAGE_UP:case o.PAUSE:case o.PRINT_SCREEN:case o.RIGHT:case o.SHIFT:case o.UP:case o.WIN_KEY:case o.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=o.ZERO&&e<=o.NINE)return!0;if(e>=o.NUM_ZERO&&e<=o.NUM_MULTIPLY)return!0;if(e>=o.A&&e<=o.Z)return!0;if(-1!==window.navigation.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case o.SPACE:case o.QUESTION_MARK:case o.NUM_PLUS:case o.NUM_MINUS:case o.NUM_PERIOD:case o.NUM_DIVISION:case o.SEMICOLON:case o.DASH:case o.EQUALS:case o.COMMA:case o.PERIOD:case o.SLASH:case o.APOSTROPHE:case o.SINGLE_QUOTE:case o.OPEN_SQUARE_BRACKET:case o.BACKSLASH:case o.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};t.a=o},303:function(e,t,n){"use strict";var o=n(226),i=n.n(o),r=n(227),a=n.n(r),s=n(228),l=n.n(s),u=n(229),c=n.n(u),p=n(1),f=n.n(p),d=n(2),h=n.n(d),v=n(25),m=n.n(v),g=n(472),y=n(332),b=n(476),C=n(477),O=n(231),w=n.n(O);function S(e,t,n){return n?e[0]===t[0]:e[0]===t[0]&&e[1]===t[1]}function M(e,t){this[e]=t}var T=void 0,E={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-",O:"-o-"};function P(){if(void 0!==T)return T;T="";var e=document.createElement("p").style;for(var t in E)t+"Transform"in e&&(T=t);return T}function N(){return P()?P()+"TransitionProperty":"transitionProperty"}function x(){return P()?P()+"Transform":"transform"}function D(e,t){var n=N();n&&(e.style[n]=t,"transitionProperty"!==n&&(e.style.transitionProperty=t))}function _(e,t){var n=x();n&&(e.style[n]=t,"transform"!==n&&(e.style.transform=t))}var k=/matrix\((.*)\)/,I=/matrix3d\((.*)\)/;var A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j=void 0;function R(e){var t=e.style.display;e.style.display="none",e.offsetHeight,e.style.display=t}function V(e,t,n){var o=n;if("object"!==(void 0===t?"undefined":A(t)))return void 0!==o?("number"==typeof o&&(o+="px"),void(e.style[t]=o)):j(e,t);for(var i in t)t.hasOwnProperty(i)&&V(e,i,t[i])}function K(e,t){var n=e["page"+(t?"Y":"X")+"Offset"],o="scroll"+(t?"Top":"Left");if("number"!=typeof n){var i=e.document;"number"!=typeof(n=i.documentElement[o])&&(n=i.body[o])}return n}function L(e){return K(e)}function F(e){return K(e,!0)}function W(e){var t=function(e){var t,n=void 0,o=void 0,i=e.ownerDocument,r=i.body,a=i&&i.documentElement;return n=(t=e.getBoundingClientRect()).left,o=t.top,{left:n-=a.clientLeft||r.clientLeft||0,top:o-=a.clientTop||r.clientTop||0}}(e),n=e.ownerDocument,o=n.defaultView||n.parentWindow;return t.left+=L(o),t.top+=F(o),t}function H(e){return null!==e&&void 0!==e&&e==e.window}function U(e){return H(e)?e.document:9===e.nodeType?e:e.ownerDocument}var B=new RegExp("^("+/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source+")(?!px)[a-z%]+$","i"),z=/^(top|right|bottom|left)$/,Y="currentStyle",q="runtimeStyle",X="left",G="px";function Z(e,t){return"left"===e?t.useCssRight?"right":e:t.useCssBottom?"bottom":e}function $(e){return"left"===e?"right":"right"===e?"left":"top"===e?"bottom":"bottom"===e?"top":void 0}function Q(e,t,n){"static"===V(e,"position")&&(e.style.position="relative");var o=-999,i=-999,r=Z("left",n),a=Z("top",n),s=$(r),l=$(a);"left"!==r&&(o=999),"top"!==a&&(i=999);var u="",c=W(e);("left"in t||"top"in t)&&(u=function(e){return e.style.transitionProperty||e.style[N()]}(e)||"",D(e,"none")),"left"in t&&(e.style[s]="",e.style[r]=o+"px"),"top"in t&&(e.style[l]="",e.style[a]=i+"px"),R(e);var p=W(e),f={};for(var d in t)if(t.hasOwnProperty(d)){var h=Z(d,n),v="left"===d?o:i,m=c[d]-p[d];f[h]=h===d?v+m:v-m}V(e,f),R(e),("left"in t||"top"in t)&&D(e,u);var g={};for(var y in t)if(t.hasOwnProperty(y)){var b=Z(y,n),C=t[y]-c[y];g[b]=y===b?f[b]+C:f[b]-C}V(e,g)}function J(e,t){var n=W(e),o=function(e){var t=window.getComputedStyle(e,null),n=t.getPropertyValue("transform")||t.getPropertyValue(x());if(n&&"none"!==n){var o=n.replace(/[^0-9\-.,]/g,"").split(",");return{x:parseFloat(o[12]||o[4],0),y:parseFloat(o[13]||o[5],0)}}return{x:0,y:0}}(e),i={x:o.x,y:o.y};"left"in t&&(i.x=o.x+t.left-n.left),"top"in t&&(i.y=o.y+t.top-n.top),function(e,t){var n=window.getComputedStyle(e,null),o=n.getPropertyValue("transform")||n.getPropertyValue(x());if(o&&"none"!==o){var i=void 0,r=o.match(k);r?((i=(r=r[1]).split(",").map(function(e){return parseFloat(e,10)}))[4]=t.x,i[5]=t.y,_(e,"matrix("+i.join(",")+")")):((i=o.match(I)[1].split(",").map(function(e){return parseFloat(e,10)}))[12]=t.x,i[13]=t.y,_(e,"matrix3d("+i.join(",")+")"))}else _(e,"translateX("+t.x+"px) translateY("+t.y+"px) translateZ(0)")}(e,i)}function ee(e,t){for(var n=0;n<e.length;n++)t(e[n])}function te(e){return"border-box"===j(e,"boxSizing")}"undefined"!=typeof window&&(j=window.getComputedStyle?function(e,t,n){var o=n,i="",r=U(e);return(o=o||r.defaultView.getComputedStyle(e,null))&&(i=o.getPropertyValue(t)||o[t]),i}:function(e,t){var n=e[Y]&&e[Y][t];if(B.test(n)&&!z.test(t)){var o=e.style,i=o[X],r=e[q][X];e[q][X]=e[Y][X],o[X]="fontSize"===t?"1em":n||0,n=o.pixelLeft+G,o[X]=i,e[q][X]=r}return""===n?"auto":n});var ne=["margin","border","padding"],oe=-1,ie=2,re=1;function ae(e,t,n){var o=0,i=void 0,r=void 0,a=void 0;for(r=0;r<t.length;r++)if(i=t[r])for(a=0;a<n.length;a++){var s=void 0;s="border"===i?""+i+n[a]+"Width":i+n[a],o+=parseFloat(j(e,s))||0}return o}var se={};function le(e,t,n){var o=n;if(H(e))return"width"===t?se.viewportWidth(e):se.viewportHeight(e);if(9===e.nodeType)return"width"===t?se.docWidth(e):se.docHeight(e);var i="width"===t?["Left","Right"]:["Top","Bottom"],r="width"===t?e.getBoundingClientRect().width:e.getBoundingClientRect().height,a=(j(e),te(e)),s=0;(null===r||void 0===r||r<=0)&&(r=void 0,(null===(s=j(e,t))||void 0===s||Number(s)<0)&&(s=e.style[t]||0),s=parseFloat(s)||0),void 0===o&&(o=a?re:oe);var l=void 0!==r||a,u=r||s;return o===oe?l?u-ae(e,["border","padding"],i):s:l?o===re?u:u+(o===ie?-ae(e,["border"],i):ae(e,["margin"],i)):s+ae(e,ne.slice(o),i)}ee(["Width","Height"],function(e){se["doc"+e]=function(t){var n=t.document;return Math.max(n.documentElement["scroll"+e],n.body["scroll"+e],se["viewport"+e](n))},se["viewport"+e]=function(t){var n="client"+e,o=t.document,i=o.body,r=o.documentElement[n];return"CSS1Compat"===o.compatMode&&r||i&&i[n]||r}});var ue={position:"absolute",visibility:"hidden",display:"block"};function ce(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=void 0,i=t[0];return 0!==i.offsetWidth?o=le.apply(void 0,t):function(e,t,n){var o={},i=e.style,r=void 0;for(r in t)t.hasOwnProperty(r)&&(o[r]=i[r],i[r]=t[r]);for(r in n.call(e),t)t.hasOwnProperty(r)&&(i[r]=o[r])}(i,ue,function(){o=le.apply(void 0,t)}),o}function pe(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}ee(["width","height"],function(e){var t=e.charAt(0).toUpperCase()+e.slice(1);se["outer"+t]=function(t,n){return t&&ce(t,e,n?0:re)};var n="width"===e?["Left","Right"]:["Top","Bottom"];se[e]=function(t,o){var i=o;if(void 0===i)return t&&ce(t,e,oe);if(t){j(t);return te(t)&&(i+=ae(t,["padding","border"],n)),V(t,e,i)}}});var fe={getWindow:function(e){if(e&&e.document&&e.setTimeout)return e;var t=e.ownerDocument||e;return t.defaultView||t.parentWindow},getDocument:U,offset:function(e,t,n){if(void 0===t)return W(e);!function(e,t,n){if(n.ignoreShake){var o=W(e),i=o.left.toFixed(0),r=o.top.toFixed(0),a=t.left.toFixed(0),s=t.top.toFixed(0);if(i===a&&r===s)return}n.useCssRight||n.useCssBottom?Q(e,t,n):n.useCssTransform&&x()in document.body.style?J(e,t):Q(e,t,n)}(e,t,n||{})},isWindow:H,each:ee,css:V,clone:function(e){var t=void 0,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);if(e.overflow)for(t in e)e.hasOwnProperty(t)&&(n.overflow[t]=e.overflow[t]);return n},mix:pe,getWindowScrollLeft:function(e){return L(e)},getWindowScrollTop:function(e){return F(e)},merge:function(){for(var e={},t=arguments.length,n=Array(t),o=0;o<t;o++)n[o]=arguments[o];for(var i=0;i<n.length;i++)fe.mix(e,n[i]);return e},viewportWidth:0,viewportHeight:0};pe(fe,se);var de=fe;var he=function(e){if(de.isWindow(e)||9===e.nodeType)return null;var t=de.getDocument(e).body,n=void 0,o=de.css(e,"position");if("fixed"!==o&&"absolute"!==o)return"html"===e.nodeName.toLowerCase()?null:e.parentNode;for(n=e.parentNode;n&&n!==t;n=n.parentNode)if("static"!==(o=de.css(n,"position")))return n;return null};var ve=function(e){for(var t={left:0,right:1/0,top:0,bottom:1/0},n=he(e),o=de.getDocument(e),i=o.defaultView||o.parentWindow,r=o.body,a=o.documentElement;n;){if(-1!==navigator.userAgent.indexOf("MSIE")&&0===n.clientWidth||n===r||n===a||"visible"===de.css(n,"overflow")){if(n===r||n===a)break}else{var s=de.offset(n);s.left+=n.clientLeft,s.top+=n.clientTop,t.top=Math.max(t.top,s.top),t.right=Math.min(t.right,s.left+n.clientWidth),t.bottom=Math.min(t.bottom,s.top+n.clientHeight),t.left=Math.max(t.left,s.left)}n=he(n)}var l=null;de.isWindow(e)||9===e.nodeType||(l=e.style.position,"absolute"===de.css(e,"position")&&(e.style.position="fixed"));var u=de.getWindowScrollLeft(i),c=de.getWindowScrollTop(i),p=de.viewportWidth(i),f=de.viewportHeight(i),d=a.scrollWidth,h=a.scrollHeight;if(e.style&&(e.style.position=l),function(e){if(de.isWindow(e)||9===e.nodeType)return!1;var t=de.getDocument(e).body,n=null;for(n=e.parentNode;n&&n!==t;n=n.parentNode)if("fixed"===de.css(n,"position"))return!0;return!1}(e))t.left=Math.max(t.left,u),t.top=Math.max(t.top,c),t.right=Math.min(t.right,u+p),t.bottom=Math.min(t.bottom,c+f);else{var v=Math.max(d,u+p);t.right=Math.min(t.right,v);var m=Math.max(h,c+f);t.bottom=Math.min(t.bottom,m)}return t.top>=0&&t.left>=0&&t.bottom>t.top&&t.right>t.left?t:null};var me=function(e,t,n,o){var i=de.clone(e),r={width:t.width,height:t.height};return o.adjustX&&i.left<n.left&&(i.left=n.left),o.resizeWidth&&i.left>=n.left&&i.left+r.width>n.right&&(r.width-=i.left+r.width-n.right),o.adjustX&&i.left+r.width>n.right&&(i.left=Math.max(n.right-r.width,n.left)),o.adjustY&&i.top<n.top&&(i.top=n.top),o.resizeHeight&&i.top>=n.top&&i.top+r.height>n.bottom&&(r.height-=i.top+r.height-n.bottom),o.adjustY&&i.top+r.height>n.bottom&&(i.top=Math.max(n.bottom-r.height,n.top)),de.mix(i,r)};var ge=function(e){var t=void 0,n=void 0,o=void 0;if(de.isWindow(e)||9===e.nodeType){var i=de.getWindow(e);t={left:de.getWindowScrollLeft(i),top:de.getWindowScrollTop(i)},n=de.viewportWidth(i),o=de.viewportHeight(i)}else t=de.offset(e),n=de.outerWidth(e),o=de.outerHeight(e);return t.width=n,t.height=o,t};var ye=function(e,t){var n=t.charAt(0),o=t.charAt(1),i=e.width,r=e.height,a=e.left,s=e.top;return"c"===n?s+=r/2:"b"===n&&(s+=r),"c"===o?a+=i/2:"r"===o&&(a+=i),{left:a,top:s}};var be=function(e,t,n,o,i){var r=ye(t,n[1]),a=ye(e,n[0]),s=[a.left-r.left,a.top-r.top];return{left:e.left-s[0]+o[0]-i[0],top:e.top-s[1]+o[1]-i[1]}};function Ce(e,t,n){return e.left<n.left||e.left+t.width>n.right}function Oe(e,t,n){return e.top<n.top||e.top+t.height>n.bottom}function we(e,t,n){var o=[];return de.each(e,function(e){o.push(e.replace(t,function(e){return n[e]}))}),o}function Se(e,t){return e[t]=-e[t],e}function Me(e,t){return(/%$/.test(e)?parseInt(e.substring(0,e.length-1),10)/100*t:parseInt(e,10))||0}function Te(e,t){e[0]=Me(e[0],t.width),e[1]=Me(e[1],t.height)}var Ee=function(e,t,n,o){var i=n.points,r=n.offset||[0,0],a=n.targetOffset||[0,0],s=n.overflow,l=n.source||e;r=[].concat(r),a=[].concat(a),s=s||{};var u={},c=0,p=ve(l),f=ge(l);Te(r,f),Te(a,t);var d=be(f,t,i,r,a),h=de.merge(f,d);if(p&&(s.adjustX||s.adjustY)&&o){if(s.adjustX&&Ce(d,f,p)){var v=we(i,/[lr]/gi,{l:"r",r:"l"}),m=Se(r,0),g=Se(a,0);(function(e,t,n){return e.left>n.right||e.left+t.width<n.left})(be(f,t,v,m,g),f,p)||(c=1,i=v,r=m,a=g)}if(s.adjustY&&Oe(d,f,p)){var y=we(i,/[tb]/gi,{t:"b",b:"t"}),b=Se(r,1),C=Se(a,1);(function(e,t,n){return e.top>n.bottom||e.top+t.height<n.top})(be(f,t,y,b,C),f,p)||(c=1,i=y,r=b,a=C)}c&&(d=be(f,t,i,r,a),de.mix(h,d));var O=Ce(d,f,p),w=Oe(d,f,p);(O||w)&&(i=n.points,r=n.offset||[0,0],a=n.targetOffset||[0,0]),u.adjustX=s.adjustX&&O,u.adjustY=s.adjustY&&w,(u.adjustX||u.adjustY)&&(h=me(d,f,p,u))}return h.width!==f.width&&de.css(l,"width",de.width(l)+h.width-f.width),h.height!==f.height&&de.css(l,"height",de.height(l)+h.height-f.height),de.offset(l,{left:h.left,top:h.top},{useCssRight:n.useCssRight,useCssBottom:n.useCssBottom,useCssTransform:n.useCssTransform,ignoreShake:n.ignoreShake}),{points:i,offset:r,targetOffset:a,overflow:u}};function Pe(e,t,n){var o=n.target||t,i=ge(o),r=!function(e){var t=ve(e),n=ge(e);return!t||n.left+n.width<=t.left||n.top+n.height<=t.top||n.left>=t.right||n.top>=t.bottom}(o);return Ee(e,i,n,r)}Pe.__getOffsetParent=he,Pe.__getVisibleRectForElement=ve;var Ne=Pe,xe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};var De=function(e,t,n){var o=void 0,i=void 0,r=de.getDocument(e),a=r.defaultView||r.parentWindow,s=de.getWindowScrollLeft(a),l=de.getWindowScrollTop(a),u=de.viewportWidth(a),c=de.viewportHeight(a),p={left:o="pageX"in t?t.pageX:s+t.clientX,top:i="pageY"in t?t.pageY:l+t.clientY,width:0,height:0},f=o>=0&&o<=s+u&&i>=0&&i<=l+c,d=[n.points[0],"cc"];return Ee(e,p,xe({},n,{points:d}),f)};function _e(e){return e&&"object"==typeof e&&e.window===e}function ke(e){return"function"==typeof e&&e?e():null}function Ie(e){return"object"==typeof e&&e?e:null}var Ae=function(e){function t(){var n,o,i;a()(this,t);for(var r=arguments.length,s=Array(r),u=0;u<r;u++)s[u]=arguments[u];return n=o=l()(this,e.call.apply(e,[this].concat(s))),o.forceAlign=function(){var e=o.props,t=e.disabled,n=e.target,i=e.align,r=e.onAlign;if(!t&&n){var a=m.a.findDOMNode(o),s=void 0,l=ke(n),u=Ie(n);l?s=Ne(a,l,i):u&&(s=De(a,u,i)),r&&r(a,s)}},i=n,l()(o,i)}return c()(t,e),t.prototype.componentDidMount=function(){var e=this.props;this.forceAlign(),!e.disabled&&e.monitorWindowResize&&this.startMonitorWindowResize()},t.prototype.componentDidUpdate=function(e){var t=!1,n=this.props;if(!n.disabled){var o=m.a.findDOMNode(this),i=o?o.getBoundingClientRect():null;if(e.disabled)t=!0;else{var r=ke(e.target),a=ke(n.target),s=Ie(e.target),l=Ie(n.target);_e(r)&&_e(a)?t=!1:(r!==a||r&&!a&&l||s&&l&&a||l&&!function(e,t){return e===t||!(!e||!t)&&("pageX"in t&&"pageY"in t?e.pageX===t.pageX&&e.pageY===t.pageY:"clientX"in t&&"clientY"in t&&e.clientX===t.clientX&&e.clientY===t.clientY)}(s,l))&&(t=!0);var u=this.sourceRect||{};t||!o||u.width===i.width&&u.height===i.height||(t=!0)}this.sourceRect=i}t&&this.forceAlign(),n.monitorWindowResize&&!n.disabled?this.startMonitorWindowResize():this.stopMonitorWindowResize()},t.prototype.componentWillUnmount=function(){this.stopMonitorWindowResize()},t.prototype.startMonitorWindowResize=function(){this.resizeHandler||(this.bufferMonitor=function(e,t){var n=void 0;function o(){n&&(clearTimeout(n),n=null)}function i(){o(),n=setTimeout(e,t)}return i.clear=o,i}(this.forceAlign,this.props.monitorBufferTime),this.resizeHandler=Object(y.a)(window,"resize",this.bufferMonitor))},t.prototype.stopMonitorWindowResize=function(){this.resizeHandler&&(this.bufferMonitor.clear(),this.resizeHandler.remove(),this.resizeHandler=null)},t.prototype.render=function(){var e=this,t=this.props,n=t.childrenProps,o=t.children,i=f.a.Children.only(o);if(n){var r={};return Object.keys(n).forEach(function(t){r[t]=e.props[n[t]]}),f.a.cloneElement(i,r)}return i},t}(p.Component);Ae.propTypes={childrenProps:h.a.object,align:h.a.object.isRequired,target:h.a.oneOfType([h.a.func,h.a.shape({clientX:h.a.number,clientY:h.a.number,pageX:h.a.number,pageY:h.a.number})]),onAlign:h.a.func,monitorBufferTime:h.a.number,monitorWindowResize:h.a.bool,disabled:h.a.bool,children:h.a.any},Ae.defaultProps={target:function(){return window},monitorBufferTime:50,monitorWindowResize:!1,disabled:!1};var je=Ae,Re=n(280),Ve=n(243),Ke=n.n(Ve),Le=function(e){function t(){return a()(this,t),l()(this,e.apply(this,arguments))}return c()(t,e),t.prototype.shouldComponentUpdate=function(e){return e.hiddenClassName||e.visible},t.prototype.render=function(){var e=this.props,t=e.hiddenClassName,n=e.visible,o=Ke()(e,["hiddenClassName","visible"]);return t||f.a.Children.count(o.children)>1?(!n&&t&&(o.className+=" "+t),f.a.createElement("div",o)):f.a.Children.only(o.children)},t}(p.Component);Le.propTypes={children:h.a.any,className:h.a.string,visible:h.a.bool,hiddenClassName:h.a.string};var Fe=Le,We=function(e){function t(){return a()(this,t),l()(this,e.apply(this,arguments))}return c()(t,e),t.prototype.render=function(){var e=this.props,t=e.className;return e.visible||(t+=" "+e.hiddenClassName),f.a.createElement("div",{className:t,onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,onMouseDown:e.onMouseDown,onTouchStart:e.onTouchStart,style:e.style},f.a.createElement(Fe,{className:e.prefixCls+"-content",visible:e.visible},e.children))},t}(p.Component);We.propTypes={hiddenClassName:h.a.string,className:h.a.string,prefixCls:h.a.string,onMouseEnter:h.a.func,onMouseLeave:h.a.func,onMouseDown:h.a.func,onTouchStart:h.a.func,children:h.a.any};var He=We,Ue=function(e){function t(n){a()(this,t);var o=l()(this,e.call(this,n));return Be.call(o),o.state={stretchChecked:!1,targetWidth:void 0,targetHeight:void 0},o.savePopupRef=M.bind(o,"popupInstance"),o.saveAlignRef=M.bind(o,"alignInstance"),o}return c()(t,e),t.prototype.componentDidMount=function(){this.rootNode=this.getPopupDomNode(),this.setStretchSize()},t.prototype.componentDidUpdate=function(){this.setStretchSize()},t.prototype.getPopupDomNode=function(){return m.a.findDOMNode(this.popupInstance)},t.prototype.getMaskTransitionName=function(){var e=this.props,t=e.maskTransitionName,n=e.maskAnimation;return!t&&n&&(t=e.prefixCls+"-"+n),t},t.prototype.getTransitionName=function(){var e=this.props,t=e.transitionName;return!t&&e.animation&&(t=e.prefixCls+"-"+e.animation),t},t.prototype.getClassName=function(e){return this.props.prefixCls+" "+this.props.className+" "+e},t.prototype.getPopupElement=function(){var e=this,t=this.savePopupRef,n=this.state,o=n.stretchChecked,r=n.targetHeight,a=n.targetWidth,s=this.props,l=s.align,u=s.visible,c=s.prefixCls,p=s.style,d=s.getClassNameFromAlign,h=s.destroyPopupOnHide,v=s.stretch,m=s.children,g=s.onMouseEnter,y=s.onMouseLeave,b=s.onMouseDown,C=s.onTouchStart,O=this.getClassName(this.currentAlignClassName||d(l)),w=c+"-hidden";u||(this.currentAlignClassName=null);var S={};v&&(-1!==v.indexOf("height")?S.height=r:-1!==v.indexOf("minHeight")&&(S.minHeight=r),-1!==v.indexOf("width")?S.width=a:-1!==v.indexOf("minWidth")&&(S.minWidth=a),o||(S.visibility="hidden",setTimeout(function(){e.alignInstance&&e.alignInstance.forceAlign()},0)));var M={className:O,prefixCls:c,ref:t,onMouseEnter:g,onMouseLeave:y,onMouseDown:b,onTouchStart:C,style:i()({},S,p,this.getZIndexStyle())};return h?f.a.createElement(Re.a,{component:"",exclusive:!0,transitionAppear:!0,transitionName:this.getTransitionName()},u?f.a.createElement(je,{target:this.getAlignTarget(),key:"popup",ref:this.saveAlignRef,monitorWindowResize:!0,align:l,onAlign:this.onAlign},f.a.createElement(He,i()({visible:!0},M),m)):null):f.a.createElement(Re.a,{component:"",exclusive:!0,transitionAppear:!0,transitionName:this.getTransitionName(),showProp:"xVisible"},f.a.createElement(je,{target:this.getAlignTarget(),key:"popup",ref:this.saveAlignRef,monitorWindowResize:!0,xVisible:u,childrenProps:{visible:"xVisible"},disabled:!u,align:l,onAlign:this.onAlign},f.a.createElement(He,i()({hiddenClassName:w},M),m)))},t.prototype.getZIndexStyle=function(){var e={},t=this.props;return void 0!==t.zIndex&&(e.zIndex=t.zIndex),e},t.prototype.getMaskElement=function(){var e=this.props,t=void 0;if(e.mask){var n=this.getMaskTransitionName();t=f.a.createElement(Fe,{style:this.getZIndexStyle(),key:"mask",className:e.prefixCls+"-mask",hiddenClassName:e.prefixCls+"-mask-hidden",visible:e.visible}),n&&(t=f.a.createElement(Re.a,{key:"mask",showProp:"visible",transitionAppear:!0,component:"",transitionName:n},t))}return t},t.prototype.render=function(){return f.a.createElement("div",null,this.getMaskElement(),this.getPopupElement())},t}(p.Component);Ue.propTypes={visible:h.a.bool,style:h.a.object,getClassNameFromAlign:h.a.func,onAlign:h.a.func,getRootDomNode:h.a.func,align:h.a.any,destroyPopupOnHide:h.a.bool,className:h.a.string,prefixCls:h.a.string,onMouseEnter:h.a.func,onMouseLeave:h.a.func,onMouseDown:h.a.func,onTouchStart:h.a.func,stretch:h.a.string,children:h.a.node,point:h.a.shape({pageX:h.a.number,pageY:h.a.number})};var Be=function(){var e=this;this.onAlign=function(t,n){var o=e.props,i=o.getClassNameFromAlign(n);e.currentAlignClassName!==i&&(e.currentAlignClassName=i,t.className=e.getClassName(i)),o.onAlign(t,n)},this.setStretchSize=function(){var t=e.props,n=t.stretch,o=t.getRootDomNode,i=t.visible,r=e.state,a=r.stretchChecked,s=r.targetHeight,l=r.targetWidth;if(n&&i){var u=o();if(u){var c=u.offsetHeight,p=u.offsetWidth;s===c&&l===p&&a||e.setState({stretchChecked:!0,targetHeight:c,targetWidth:p})}}else a&&e.setState({stretchChecked:!1})},this.getTargetElement=function(){return e.props.getRootDomNode()},this.getAlignTarget=function(){var t=e.props.point;return t||e.getTargetElement}},ze=Ue;function Ye(){}var qe=["onClick","onMouseDown","onTouchStart","onMouseEnter","onMouseLeave","onFocus","onBlur","onContextMenu"],Xe=!!v.createPortal,Ge={rcTrigger:h.a.shape({onPopupMouseDown:h.a.func})},Ze=function(e){function t(n){a()(this,t);var o=l()(this,e.call(this,n));$e.call(o);var i=void 0;return i="popupVisible"in n?!!n.popupVisible:!!n.defaultPopupVisible,o.prevPopupVisible=i,o.state={popupVisible:i},o}return c()(t,e),t.prototype.getChildContext=function(){return{rcTrigger:{onPopupMouseDown:this.onPopupMouseDown}}},t.prototype.componentWillMount=function(){var e=this;qe.forEach(function(t){e["fire"+t]=function(n){e.fireEvents(t,n)}})},t.prototype.componentDidMount=function(){this.componentDidUpdate({},{popupVisible:this.state.popupVisible})},t.prototype.componentWillReceiveProps=function(e){var t=e.popupVisible;void 0!==t&&this.setState({popupVisible:t})},t.prototype.componentDidUpdate=function(e,t){var n=this.props,o=this.state;if(Xe||this.renderComponent(null,function(){t.popupVisible!==o.popupVisible&&n.afterPopupVisibleChange(o.popupVisible)}),this.prevPopupVisible=t.popupVisible,o.popupVisible){var i=void 0;return this.clickOutsideHandler||!this.isClickToHide()&&!this.isContextMenuToShow()||(i=n.getDocument(),this.clickOutsideHandler=Object(y.a)(i,"mousedown",this.onDocumentClick)),this.touchOutsideHandler||(i=i||n.getDocument(),this.touchOutsideHandler=Object(y.a)(i,"touchstart",this.onDocumentClick)),!this.contextMenuOutsideHandler1&&this.isContextMenuToShow()&&(i=i||n.getDocument(),this.contextMenuOutsideHandler1=Object(y.a)(i,"scroll",this.onContextMenuClose)),void(!this.contextMenuOutsideHandler2&&this.isContextMenuToShow()&&(this.contextMenuOutsideHandler2=Object(y.a)(window,"blur",this.onContextMenuClose)))}this.clearOutsideHandler()},t.prototype.componentWillUnmount=function(){this.clearDelayTimer(),this.clearOutsideHandler(),clearTimeout(this.mouseDownTimeout)},t.prototype.getPopupDomNode=function(){return this._component&&this._component.getPopupDomNode?this._component.getPopupDomNode():null},t.prototype.getPopupAlign=function(){var e=this.props,t=e.popupPlacement,n=e.popupAlign,o=e.builtinPlacements;return t&&o?function(e,t,n){var o=e[t]||{};return i()({},o,n)}(o,t,n):n},t.prototype.setPopupVisible=function(e,t){var n=this.props.alignPoint;this.clearDelayTimer(),this.state.popupVisible!==e&&("popupVisible"in this.props||this.setState({popupVisible:e}),this.props.onPopupVisibleChange(e)),n&&t&&this.setPoint(t)},t.prototype.delaySetPopupVisible=function(e,t,n){var o=this,i=1e3*t;if(this.clearDelayTimer(),i){var r=n?{pageX:n.pageX,pageY:n.pageY}:null;this.delayTimer=setTimeout(function(){o.setPopupVisible(e,r),o.clearDelayTimer()},i)}else this.setPopupVisible(e,n)},t.prototype.clearDelayTimer=function(){this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null)},t.prototype.clearOutsideHandler=function(){this.clickOutsideHandler&&(this.clickOutsideHandler.remove(),this.clickOutsideHandler=null),this.contextMenuOutsideHandler1&&(this.contextMenuOutsideHandler1.remove(),this.contextMenuOutsideHandler1=null),this.contextMenuOutsideHandler2&&(this.contextMenuOutsideHandler2.remove(),this.contextMenuOutsideHandler2=null),this.touchOutsideHandler&&(this.touchOutsideHandler.remove(),this.touchOutsideHandler=null)},t.prototype.createTwoChains=function(e){var t=this.props.children.props,n=this.props;return t[e]&&n[e]?this["fire"+e]:t[e]||n[e]},t.prototype.isClickToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")},t.prototype.isContextMenuToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("contextMenu")||-1!==n.indexOf("contextMenu")},t.prototype.isClickToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")},t.prototype.isMouseEnterToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseEnter")},t.prototype.isMouseLeaveToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseLeave")},t.prototype.isFocusToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("focus")},t.prototype.isBlurToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("blur")},t.prototype.forcePopupAlign=function(){this.state.popupVisible&&this._component&&this._component.alignInstance&&this._component.alignInstance.forceAlign()},t.prototype.fireEvents=function(e,t){var n=this.props.children.props[e];n&&n(t);var o=this.props[e];o&&o(t)},t.prototype.close=function(){this.setPopupVisible(!1)},t.prototype.render=function(){var e=this,t=this.state.popupVisible,n=this.props,o=n.children,i=n.forceRender,r=n.alignPoint,a=n.className,s=f.a.Children.only(o),l={key:"trigger"};this.isContextMenuToShow()?l.onContextMenu=this.onContextMenu:l.onContextMenu=this.createTwoChains("onContextMenu"),this.isClickToHide()||this.isClickToShow()?(l.onClick=this.onClick,l.onMouseDown=this.onMouseDown,l.onTouchStart=this.onTouchStart):(l.onClick=this.createTwoChains("onClick"),l.onMouseDown=this.createTwoChains("onMouseDown"),l.onTouchStart=this.createTwoChains("onTouchStart")),this.isMouseEnterToShow()?(l.onMouseEnter=this.onMouseEnter,r&&(l.onMouseMove=this.onMouseMove)):l.onMouseEnter=this.createTwoChains("onMouseEnter"),this.isMouseLeaveToHide()?l.onMouseLeave=this.onMouseLeave:l.onMouseLeave=this.createTwoChains("onMouseLeave"),this.isFocusToShow()||this.isBlurToHide()?(l.onFocus=this.onFocus,l.onBlur=this.onBlur):(l.onFocus=this.createTwoChains("onFocus"),l.onBlur=this.createTwoChains("onBlur"));var u=w()(s&&s.props&&s.props.className,a);u&&(l.className=u);var c=f.a.cloneElement(s,l);if(!Xe)return f.a.createElement(b.a,{parent:this,visible:t,autoMount:!1,forceRender:i,getComponent:this.getComponent,getContainer:this.getContainer},function(t){var n=t.renderComponent;return e.renderComponent=n,c});var p=void 0;return(t||this._component||i)&&(p=f.a.createElement(C.a,{key:"portal",getContainer:this.getContainer,didUpdate:this.handlePortalUpdate},this.getComponent())),[c,p]},t}(f.a.Component);Ze.propTypes={children:h.a.any,action:h.a.oneOfType([h.a.string,h.a.arrayOf(h.a.string)]),showAction:h.a.any,hideAction:h.a.any,getPopupClassNameFromAlign:h.a.any,onPopupVisibleChange:h.a.func,afterPopupVisibleChange:h.a.func,popup:h.a.oneOfType([h.a.node,h.a.func]).isRequired,popupStyle:h.a.object,prefixCls:h.a.string,popupClassName:h.a.string,className:h.a.string,popupPlacement:h.a.string,builtinPlacements:h.a.object,popupTransitionName:h.a.oneOfType([h.a.string,h.a.object]),popupAnimation:h.a.any,mouseEnterDelay:h.a.number,mouseLeaveDelay:h.a.number,zIndex:h.a.number,focusDelay:h.a.number,blurDelay:h.a.number,getPopupContainer:h.a.func,getDocument:h.a.func,forceRender:h.a.bool,destroyPopupOnHide:h.a.bool,mask:h.a.bool,maskClosable:h.a.bool,onPopupAlign:h.a.func,popupAlign:h.a.object,popupVisible:h.a.bool,defaultPopupVisible:h.a.bool,maskTransitionName:h.a.oneOfType([h.a.string,h.a.object]),maskAnimation:h.a.string,stretch:h.a.string,alignPoint:h.a.bool},Ze.contextTypes=Ge,Ze.childContextTypes=Ge,Ze.defaultProps={prefixCls:"rc-trigger-popup",getPopupClassNameFromAlign:function(){return""},getDocument:function(){return window.document},onPopupVisibleChange:Ye,afterPopupVisibleChange:Ye,onPopupAlign:Ye,popupClassName:"",mouseEnterDelay:0,mouseLeaveDelay:.1,focusDelay:0,blurDelay:.15,popupStyle:{},destroyPopupOnHide:!1,popupAlign:{},defaultPopupVisible:!1,mask:!1,maskClosable:!0,action:[],showAction:[],hideAction:[]};var $e=function(){var e=this;this.onMouseEnter=function(t){var n=e.props.mouseEnterDelay;e.fireEvents("onMouseEnter",t),e.delaySetPopupVisible(!0,n,n?null:t)},this.onMouseMove=function(t){e.fireEvents("onMouseMove",t),e.setPoint(t)},this.onMouseLeave=function(t){e.fireEvents("onMouseLeave",t),e.delaySetPopupVisible(!1,e.props.mouseLeaveDelay)},this.onPopupMouseEnter=function(){e.clearDelayTimer()},this.onPopupMouseLeave=function(t){t.relatedTarget&&!t.relatedTarget.setTimeout&&e._component&&e._component.getPopupDomNode&&Object(g.a)(e._component.getPopupDomNode(),t.relatedTarget)||e.delaySetPopupVisible(!1,e.props.mouseLeaveDelay)},this.onFocus=function(t){e.fireEvents("onFocus",t),e.clearDelayTimer(),e.isFocusToShow()&&(e.focusTime=Date.now(),e.delaySetPopupVisible(!0,e.props.focusDelay))},this.onMouseDown=function(t){e.fireEvents("onMouseDown",t),e.preClickTime=Date.now()},this.onTouchStart=function(t){e.fireEvents("onTouchStart",t),e.preTouchTime=Date.now()},this.onBlur=function(t){e.fireEvents("onBlur",t),e.clearDelayTimer(),e.isBlurToHide()&&e.delaySetPopupVisible(!1,e.props.blurDelay)},this.onContextMenu=function(t){t.preventDefault(),e.fireEvents("onContextMenu",t),e.setPopupVisible(!0,t)},this.onContextMenuClose=function(){e.isContextMenuToShow()&&e.close()},this.onClick=function(t){if(e.fireEvents("onClick",t),e.focusTime){var n=void 0;if(e.preClickTime&&e.preTouchTime?n=Math.min(e.preClickTime,e.preTouchTime):e.preClickTime?n=e.preClickTime:e.preTouchTime&&(n=e.preTouchTime),Math.abs(n-e.focusTime)<20)return;e.focusTime=0}e.preClickTime=0,e.preTouchTime=0,t&&t.preventDefault&&t.preventDefault();var o=!e.state.popupVisible;(e.isClickToHide()&&!o||o&&e.isClickToShow())&&e.setPopupVisible(!e.state.popupVisible,t)},this.onPopupMouseDown=function(){var t=e.context.rcTrigger,n=void 0===t?{}:t;e.hasPopupMouseDown=!0,clearTimeout(e.mouseDownTimeout),e.mouseDownTimeout=setTimeout(function(){e.hasPopupMouseDown=!1},0),n.onPopupMouseDown&&n.onPopupMouseDown.apply(n,arguments)},this.onDocumentClick=function(t){if(!e.props.mask||e.props.maskClosable){var n=t.target,o=Object(v.findDOMNode)(e);Object(g.a)(o,n)||e.hasPopupMouseDown||e.close()}},this.getRootDomNode=function(){return Object(v.findDOMNode)(e)},this.getPopupClassNameFromAlign=function(t){var n=[],o=e.props,i=o.popupPlacement,r=o.builtinPlacements,a=o.prefixCls,s=o.alignPoint,l=o.getPopupClassNameFromAlign;return i&&r&&n.push(function(e,t,n,o){var i=n.points;for(var r in e)if(e.hasOwnProperty(r)&&S(e[r].points,i,o))return t+"-placement-"+r;return""}(r,a,t,s)),l&&n.push(l(t)),n.join(" ")},this.getComponent=function(){var t=e.props,n=t.prefixCls,o=t.destroyPopupOnHide,r=t.popupClassName,a=t.action,s=t.onPopupAlign,l=t.popupAnimation,u=t.popupTransitionName,c=t.popupStyle,p=t.mask,d=t.maskAnimation,h=t.maskTransitionName,v=t.zIndex,m=t.popup,g=t.stretch,y=t.alignPoint,b=e.state,C=b.popupVisible,O=b.point,w=e.getPopupAlign(),S={};return e.isMouseEnterToShow()&&(S.onMouseEnter=e.onPopupMouseEnter),e.isMouseLeaveToHide()&&(S.onMouseLeave=e.onPopupMouseLeave),S.onMouseDown=e.onPopupMouseDown,S.onTouchStart=e.onPopupMouseDown,f.a.createElement(ze,i()({prefixCls:n,destroyPopupOnHide:o,visible:C,point:y&&O,className:r,action:a,align:w,onAlign:s,animation:l,getClassNameFromAlign:e.getPopupClassNameFromAlign},S,{stretch:g,getRootDomNode:e.getRootDomNode,style:c,mask:p,zIndex:v,transitionName:u,maskAnimation:d,maskTransitionName:h,ref:e.savePopup}),"function"==typeof m?m():m)},this.getContainer=function(){var t=e.props,n=document.createElement("div");return n.style.position="absolute",n.style.top="0",n.style.left="0",n.style.width="100%",(t.getPopupContainer?t.getPopupContainer(Object(v.findDOMNode)(e)):t.getDocument().body).appendChild(n),n},this.setPoint=function(t){e.props.alignPoint&&t&&e.setState({point:{pageX:t.pageX,pageY:t.pageY}})},this.handlePortalUpdate=function(){e.prevPopupVisible!==e.state.popupVisible&&e.props.afterPopupVisibleChange(e.state.popupVisible)},this.savePopup=function(t){e._component=t}};t.a=Ze},331:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.storeShape=void 0;var o=function(e){return e&&e.__esModule?e:{default:e}}(n(2));t.storeShape=o.default.shape({subscribe:o.default.func.isRequired,setState:o.default.func.isRequired,getState:o.default.func.isRequired})},332:function(e,t,n){"use strict";n.d(t,"a",function(){return s});var o=n(473),i=n.n(o),r=n(25),a=n.n(r);function s(e,t,n){var o=a.a.unstable_batchedUpdates?function(e){a.a.unstable_batchedUpdates(n,e)}:n;return i()(e,t,o)}},333:function(e,t,n){"use strict";n.d(t,"a",function(){return r});var o=n(1),i=n.n(o);function r(e){var t=[];return i.a.Children.forEach(e,function(e){t.push(e)}),t}},466:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(1),r=(function(e){e&&e.__esModule}(i),n(331));var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"getChildContext",value:function(){return{miniStore:this.props.store}}},{key:"render",value:function(){return i.Children.only(this.props.children)}}]),t}();a.propTypes={store:r.storeShape.isRequired},a.childContextTypes={miniStore:r.storeShape.isRequired},t.default=a},467:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();t.default=function(e){var t=!!e,n=e||f;return function(p){var f=function(r){function l(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,e,t));return o.handleChange=function(){if(o.unsubscribe){var e=n(o.store.getState(),o.props);(0,s.default)(o.state.subscribed,e)||o.setState({subscribed:e})}},o.store=t.miniStore,o.state={subscribed:n(o.store.getState(),e),store:o.store,props:e},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(l,r),i(l,null,[{key:"getDerivedStateFromProps",value:function(t,o){return e&&2===e.length&&t!==o.props?{subscribed:n(o.store.getState(),t),props:t}:{props:t}}}]),i(l,[{key:"componentDidMount",value:function(){this.trySubscribe()}},{key:"componentWillUnmount",value:function(){this.tryUnsubscribe()}},{key:"trySubscribe",value:function(){t&&(this.unsubscribe=this.store.subscribe(this.handleChange),this.handleChange())}},{key:"tryUnsubscribe",value:function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null)}},{key:"getWrappedInstance",value:function(){return this.wrappedInstance}},{key:"render",value:function(){var e=this,t=o({},this.props,this.state.subscribed,{store:this.store});return function(e){return!e.prototype.render}(p)||(t=o({},t,{ref:function(t){return e.wrappedInstance=t}})),a.default.createElement(p,t)}}]),l}(r.Component);return f.displayName="Connect("+function(e){return e.displayName||e.name||"Component"}(p)+")",f.contextTypes={miniStore:c.storeShape.isRequired},(0,u.polyfill)(f),(0,l.default)(f,p)}};var r=n(1),a=p(r),s=p(n(468)),l=p(n(253)),u=n(269),c=n(331);function p(e){return e&&e.__esModule?e:{default:e}}var f=function(){return{}}},468:function(e,t){e.exports=function(e,t,n,o){var i=n?n.call(o,e,t):void 0;if(void 0!==i)return!!i;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var r=Object.keys(e),a=Object.keys(t);if(r.length!==a.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),l=0;l<r.length;l++){var u=r[l];if(!s(u))return!1;var c=e[u],p=t[u];if(!1===(i=n?n.call(o,c,p,u):void 0)||void 0===i&&c!==p)return!1}return!0}},469:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};t.default=function(e){var t=e,n=[];return{setState:function(e){t=o({},t,e);for(var i=0;i<n.length;i++)n[i]()},getState:function(){return t},subscribe:function(e){return n.push(e),function(){var t=n.indexOf(e);n.splice(t,1)}}}}},470:function(e,t,n){"use strict";function o(){var e=[].slice.call(arguments,0);return 1===e.length?e[0]:function(){for(var t=0;t<e.length;t++)e[t]&&e[t].apply&&e[t].apply(this,arguments)}}n.d(t,"a",function(){return o})},471:function(e,t,n){"use strict";(function(e){var n=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some(function(e,o){return e[0]===t&&(n=o,!0)}),n}return function(){function t(){this.__entries__=[]}var n={size:{configurable:!0}};return n.size.get=function(){return this.__entries__.length},t.prototype.get=function(t){var n=e(this.__entries__,t),o=this.__entries__[n];return o&&o[1]},t.prototype.set=function(t,n){var o=e(this.__entries__,t);~o?this.__entries__[o][1]=n:this.__entries__.push([t,n])},t.prototype.delete=function(t){var n=this.__entries__,o=e(n,t);~o&&n.splice(o,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,o=this.__entries__;n<o.length;n+=1){var i=o[n];e.call(t,i[1],i[0])}},Object.defineProperties(t.prototype,n),t}()}(),o="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,i=void 0!==e&&e.Math===Math?e:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),r="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(i):function(e){return setTimeout(function(){return e(Date.now())},1e3/60)},a=2,s=["top","right","bottom","left","width","height","size","weight"],l="undefined"!=typeof MutationObserver,u=function(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var n=!1,o=!1,i=0;function s(){n&&(n=!1,e()),o&&u()}function l(){r(s)}function u(){var e=Date.now();if(n){if(e-i<a)return;o=!0}else n=!0,o=!1,setTimeout(l,t);i=e}return u}(this.refresh.bind(this),20)};u.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},u.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_()},u.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},u.prototype.updateObservers_=function(){var e=this.observers_.filter(function(e){return e.gatherActive(),e.hasActive()});return e.forEach(function(e){return e.broadcastActive()}),e.length>0},u.prototype.connect_=function(){o&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),l?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},u.prototype.disconnect_=function(){o&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},u.prototype.onTransitionEnd_=function(e){var t=e.propertyName;void 0===t&&(t=""),s.some(function(e){return!!~t.indexOf(e)})&&this.refresh()},u.getInstance=function(){return this.instance_||(this.instance_=new u),this.instance_},u.instance_=null;var c=function(e,t){for(var n=0,o=Object.keys(t);n<o.length;n+=1){var i=o[n];Object.defineProperty(e,i,{value:t[i],enumerable:!1,writable:!1,configurable:!0})}return e},p=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||i},f=y(0,0,0,0);function d(e){return parseFloat(e)||0}function h(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return t.reduce(function(t,n){return t+d(e["border-"+n+"-width"])},0)}function v(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return f;var o=p(e).getComputedStyle(e),i=function(e){for(var t={},n=0,o=["top","right","bottom","left"];n<o.length;n+=1){var i=o[n],r=e["padding-"+i];t[i]=d(r)}return t}(o),r=i.left+i.right,a=i.top+i.bottom,s=d(o.width),l=d(o.height);if("border-box"===o.boxSizing&&(Math.round(s+r)!==t&&(s-=h(o,"left","right")+r),Math.round(l+a)!==n&&(l-=h(o,"top","bottom")+a)),!function(e){return e===p(e).document.documentElement}(e)){var u=Math.round(s+r)-t,c=Math.round(l+a)-n;1!==Math.abs(u)&&(s-=u),1!==Math.abs(c)&&(l-=c)}return y(i.left,i.top,s,l)}var m="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof p(e).SVGGraphicsElement}:function(e){return e instanceof p(e).SVGElement&&"function"==typeof e.getBBox};function g(e){return o?m(e)?function(e){var t=e.getBBox();return y(0,0,t.width,t.height)}(e):v(e):f}function y(e,t,n,o){return{x:e,y:t,width:n,height:o}}var b=function(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=y(0,0,0,0),this.target=e};b.prototype.isActive=function(){var e=g(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},b.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e};var C=function(e,t){var n=function(e){var t=e.x,n=e.y,o=e.width,i=e.height,r="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,a=Object.create(r.prototype);return c(a,{x:t,y:n,width:o,height:i,top:n,right:t+o,bottom:i+n,left:t}),a}(t);c(this,{target:e,contentRect:n})},O=function(e,t,o){if(this.activeObservations_=[],this.observations_=new n,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=o};O.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof p(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new b(e)),this.controller_.addObserver(this),this.controller_.refresh())}},O.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof p(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},O.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},O.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach(function(t){t.isActive()&&e.activeObservations_.push(t)})},O.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map(function(e){return new C(e.target,e.broadcastRect())});this.callback_.call(e,t,e),this.clearActive()}},O.prototype.clearActive=function(){this.activeObservations_.splice(0)},O.prototype.hasActive=function(){return this.activeObservations_.length>0};var w="undefined"!=typeof WeakMap?new WeakMap:new n,S=function(e){if(!(this instanceof S))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var t=u.getInstance(),n=new O(e,t,this);w.set(this,n)};["observe","unobserve","disconnect"].forEach(function(e){S.prototype[e]=function(){return(t=w.get(this))[e].apply(t,arguments);var t}});var M=void 0!==i.ResizeObserver?i.ResizeObserver:S;t.a=M}).call(this,n(61))},472:function(e,t,n){"use strict";function o(e,t){for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}n.d(t,"a",function(){return o})},473:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){function i(t){var i=new o.default(t);n.call(e,i)}if(e.addEventListener)return e.addEventListener(t,i,!1),{remove:function(){e.removeEventListener(t,i,!1)}};if(e.attachEvent)return e.attachEvent("on"+t,i),{remove:function(){e.detachEvent("on"+t,i)}}};var o=function(e){return e&&e.__esModule?e:{default:e}}(n(474));e.exports=t.default},474:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(475)),i=r(n(62));function r(e){return e&&e.__esModule?e:{default:e}}var a=!0,s=!1,l=["altKey","bubbles","cancelable","ctrlKey","currentTarget","eventPhase","metaKey","shiftKey","target","timeStamp","view","type"];function u(e){return null===e||void 0===e}var c=[{reg:/^key/,props:["char","charCode","key","keyCode","which"],fix:function(e,t){u(e.which)&&(e.which=u(t.charCode)?t.keyCode:t.charCode),void 0===e.metaKey&&(e.metaKey=e.ctrlKey)}},{reg:/^touch/,props:["touches","changedTouches","targetTouches"]},{reg:/^hashchange$/,props:["newURL","oldURL"]},{reg:/^gesturechange$/i,props:["rotation","scale"]},{reg:/^(mousewheel|DOMMouseScroll)$/,props:[],fix:function(e,t){var n=void 0,o=void 0,i=void 0,r=t.wheelDelta,a=t.axis,s=t.wheelDeltaY,l=t.wheelDeltaX,u=t.detail;r&&(i=r/120),u&&(i=0-(u%3==0?u/3:u)),void 0!==a&&(a===e.HORIZONTAL_AXIS?(o=0,n=0-i):a===e.VERTICAL_AXIS&&(n=0,o=i)),void 0!==s&&(o=s/120),void 0!==l&&(n=-1*l/120),n||o||(o=i),void 0!==n&&(e.deltaX=n),void 0!==o&&(e.deltaY=o),void 0!==i&&(e.delta=i)}},{reg:/^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,props:["buttons","clientX","clientY","button","offsetX","relatedTarget","which","fromElement","toElement","offsetY","pageX","pageY","screenX","screenY"],fix:function(e,t){var n=void 0,o=void 0,i=void 0,r=e.target,a=t.button;return r&&u(e.pageX)&&!u(t.clientX)&&(o=(n=r.ownerDocument||document).documentElement,i=n.body,e.pageX=t.clientX+(o&&o.scrollLeft||i&&i.scrollLeft||0)-(o&&o.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(o&&o.scrollTop||i&&i.scrollTop||0)-(o&&o.clientTop||i&&i.clientTop||0)),e.which||void 0===a||(e.which=1&a?1:2&a?3:4&a?2:0),!e.relatedTarget&&e.fromElement&&(e.relatedTarget=e.fromElement===r?e.toElement:e.fromElement),e}}];function p(){return a}function f(){return s}function d(e){var t=e.type,n="function"==typeof e.stopPropagation||"boolean"==typeof e.cancelBubble;o.default.call(this),this.nativeEvent=e;var i=f;"defaultPrevented"in e?i=e.defaultPrevented?p:f:"getPreventDefault"in e?i=e.getPreventDefault()?p:f:"returnValue"in e&&(i=e.returnValue===s?p:f),this.isDefaultPrevented=i;var r=[],a=void 0,u=void 0,d=l.concat();for(c.forEach(function(e){t.match(e.reg)&&(d=d.concat(e.props),e.fix&&r.push(e.fix))}),a=d.length;a;)this[u=d[--a]]=e[u];for(!this.target&&n&&(this.target=e.srcElement||document),this.target&&3===this.target.nodeType&&(this.target=this.target.parentNode),a=r.length;a;)(0,r[--a])(this,e);this.timeStamp=e.timeStamp||Date.now()}var h=o.default.prototype;(0,i.default)(d.prototype,h,{constructor:d,preventDefault:function(){var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=s,h.preventDefault.call(this)},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=a,h.stopPropagation.call(this)}}),t.default=d,e.exports=t.default},475:function(e,t,n){"use strict";function o(){return!1}function i(){return!0}function r(){this.timeStamp=Date.now(),this.target=void 0,this.currentTarget=void 0}Object.defineProperty(t,"__esModule",{value:!0}),r.prototype={isEventObject:1,constructor:r,isDefaultPrevented:o,isPropagationStopped:o,isImmediatePropagationStopped:o,preventDefault:function(){this.isDefaultPrevented=i},stopPropagation:function(){this.isPropagationStopped=i},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=i,this.stopPropagation()},halt:function(e){e?this.stopImmediatePropagation():this.stopPropagation(),this.preventDefault()}},t.default=r,e.exports=t.default},476:function(e,t,n){"use strict";var o=n(227),i=n.n(o),r=n(230),a=n.n(r),s=n(228),l=n.n(s),u=n(229),c=n.n(u),p=n(1),f=n.n(p),d=n(25),h=n.n(d),v=n(2),m=n.n(v),g=function(e){function t(){var e,n,o,r;i()(this,t);for(var a=arguments.length,s=Array(a),u=0;u<a;u++)s[u]=arguments[u];return n=o=l()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),o.removeContainer=function(){o.container&&(h.a.unmountComponentAtNode(o.container),o.container.parentNode.removeChild(o.container),o.container=null)},o.renderComponent=function(e,t){var n=o.props,i=n.visible,r=n.getComponent,a=n.forceRender,s=n.getContainer,l=n.parent;(i||l._component||a)&&(o.container||(o.container=s()),h.a.unstable_renderSubtreeIntoContainer(l,r(e),o.container,function(){t&&t.call(this)}))},r=n,l()(o,r)}return c()(t,e),a()(t,[{key:"componentDidMount",value:function(){this.props.autoMount&&this.renderComponent()}},{key:"componentDidUpdate",value:function(){this.props.autoMount&&this.renderComponent()}},{key:"componentWillUnmount",value:function(){this.props.autoDestroy&&this.removeContainer()}},{key:"render",value:function(){return this.props.children({renderComponent:this.renderComponent,removeContainer:this.removeContainer})}}]),t}(f.a.Component);g.propTypes={autoMount:m.a.bool,autoDestroy:m.a.bool,visible:m.a.bool,forceRender:m.a.bool,parent:m.a.any,getComponent:m.a.func.isRequired,getContainer:m.a.func.isRequired,children:m.a.func.isRequired},g.defaultProps={autoMount:!0,autoDestroy:!0,forceRender:!1},t.a=g},477:function(e,t,n){"use strict";var o=n(227),i=n.n(o),r=n(230),a=n.n(r),s=n(228),l=n.n(s),u=n(229),c=n.n(u),p=n(1),f=n.n(p),d=n(25),h=n.n(d),v=n(2),m=n.n(v),g=function(e){function t(){return i()(this,t),l()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return c()(t,e),a()(t,[{key:"componentDidMount",value:function(){this.createContainer()}},{key:"componentDidUpdate",value:function(e){var t=this.props.didUpdate;t&&t(e)}},{key:"componentWillUnmount",value:function(){this.removeContainer()}},{key:"createContainer",value:function(){this._container=this.props.getContainer(),this.forceUpdate()}},{key:"removeContainer",value:function(){this._container&&this._container.parentNode.removeChild(this._container)}},{key:"render",value:function(){return this._container?h.a.createPortal(this.props.children,this._container):null}}]),t}(f.a.Component);g.propTypes={getContainer:m.a.func.isRequired,children:m.a.node.isRequired,didUpdate:m.a.func},t.a=g},478:function(e,t){window.MutationObserver=window.MutationObserver||function(e){function t(e){this.i=[],this.m=e}function n(t){var n,o={type:null,target:null,addedNodes:[],removedNodes:[],previousSibling:null,nextSibling:null,attributeName:null,attributeNamespace:null,oldValue:null};for(n in t)o[n]!==e&&t[n]!==e&&(o[n]=t[n]);return o}function o(t,o){var s=r(t,o);return function(u){var c,p=u.length;o.a&&3===t.nodeType&&t.nodeValue!==s.a&&u.push(new n({type:"characterData",target:t,oldValue:s.a})),o.b&&s.b&&i(u,t,s.b,o.f),(o.c||o.g)&&(c=function(t,o,r,s){function u(e,o,r,a,l){var u,p,f,d=e.length-1;for(l=-~((d-l)/2);f=e.pop();)u=r[f.j],p=a[f.l],s.c&&l&&Math.abs(f.j-f.l)>=d&&(t.push(n({type:"childList",target:o,addedNodes:[u],removedNodes:[u],nextSibling:u.nextSibling,previousSibling:u.previousSibling})),l--),s.b&&p.b&&i(t,u,p.b,s.f),s.a&&3===u.nodeType&&u.nodeValue!==p.a&&t.push(n({type:"characterData",target:u,oldValue:p.a})),s.g&&c(u,p)}function c(o,r){for(var f,d,h,v,m,g=o.childNodes,y=r.c,b=g.length,C=y?y.length:0,O=0,w=0,S=0;w<b||S<C;)v=g[w],m=(h=y[S])&&h.node,v===m?(s.b&&h.b&&i(t,v,h.b,s.f),s.a&&h.a!==e&&v.nodeValue!==h.a&&t.push(n({type:"characterData",target:v,oldValue:h.a})),d&&u(d,o,g,y,O),s.g&&(v.childNodes.length||h.c&&h.c.length)&&c(v,h),w++,S++):(p=!0,f||(f={},d=[]),v&&(f[h=a(v)]||(f[h]=!0,-1===(h=l(y,v,S,"node"))?s.c&&(t.push(n({type:"childList",target:o,addedNodes:[v],nextSibling:v.nextSibling,previousSibling:v.previousSibling})),O++):d.push({j:w,l:h})),w++),m&&m!==g[w]&&(f[h=a(m)]||(f[h]=!0,-1===(h=l(g,m,w))?s.c&&(t.push(n({type:"childList",target:r.node,removedNodes:[m],nextSibling:y[S+1],previousSibling:y[S-1]})),O--):d.push({j:h,l:S})),S++));d&&u(d,o,g,y,O)}var p;return c(o,r),p}(u,t,s,o)),(c||u.length!==p)&&(s=r(t,o))}}function i(t,o,i,r){for(var a,s,l={},u=o.attributes,p=u.length;p--;)s=(a=u[p]).name,r&&r[s]===e||(c(o,a)!==i[s]&&t.push(n({type:"attributes",target:o,attributeName:s,oldValue:i[s],attributeNamespace:a.namespaceURI})),l[s]=!0);for(s in i)l[s]||t.push(n({target:o,type:"attributes",attributeName:s,oldValue:i[s]}))}function r(e,t){var n=!0;return function e(o){var i={node:o};return!t.a||3!==o.nodeType&&8!==o.nodeType?(t.b&&n&&1===o.nodeType&&(i.b=s(o.attributes,function(e,n){return t.f&&!t.f[n.name]||(e[n.name]=c(o,n)),e})),n&&(t.c||t.a||t.b&&t.g)&&(i.c=function(e,t){for(var n=[],o=0;o<e.length;o++)n[o]=t(e[o],o,e);return n}(o.childNodes,e)),n=t.g):i.a=o.nodeValue,i}(e)}function a(e){try{return e.id||(e.mo_id=e.mo_id||p++)}catch(t){try{return e.nodeValue}catch(e){return p++}}}function s(e,t){for(var n={},o=0;o<e.length;o++)n=t(n,e[o],o,e);return n}function l(e,t,n,o){for(;n<e.length;n++)if((o?e[n][o]:e[n])===t)return n;return-1}t._period=30,t.prototype={observe:function(e,n){for(var i={b:!!(n.attributes||n.attributeFilter||n.attributeOldValue),c:!!n.childList,g:!!n.subtree,a:!(!n.characterData&&!n.characterDataOldValue)},r=this.i,a=0;a<r.length;a++)r[a].s===e&&r.splice(a,1);n.attributeFilter&&(i.f=s(n.attributeFilter,function(e,t){return e[t]=!0,e})),r.push({s:e,o:o(e,i)}),this.h||function(e){!function n(){var o=e.takeRecords();o.length&&e.m(o,e),e.h=setTimeout(n,t._period)}()}(this)},takeRecords:function(){for(var e=[],t=this.i,n=0;n<t.length;n++)t[n].o(e);return e},disconnect:function(){this.i=[],clearTimeout(this.h),this.h=null}};var u=document.createElement("i");u.style.top=0;var c=(u="null"!=u.attributes.style.value)?function(e,t){return t.value}:function(e,t){return"style"!==t.name?t.value:e.style.cssText},p=1;return t}(void 0)},479:function(e,t,n){"use strict";t.a={today:"Today",now:"Now",backToToday:"Back to today",ok:"Ok",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"}},488:function(e,t,n){"use strict";var o={};n.r(o),n.d(o,"initialize",function(){return H}),n.d(o,"ga",function(){return U}),n.d(o,"set",function(){return B}),n.d(o,"send",function(){return z}),n.d(o,"pageview",function(){return Y}),n.d(o,"modalview",function(){return q}),n.d(o,"timing",function(){return X}),n.d(o,"event",function(){return G}),n.d(o,"exception",function(){return Z}),n.d(o,"plugin",function(){return $}),n.d(o,"outboundLink",function(){return Q}),n.d(o,"testModeAPI",function(){return J}),n.d(o,"default",function(){return ee});var i=n(1),r=n.n(i),a=n(2),s=n.n(a);function l(e){console.warn("[react-ga]",e)}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,o)}return n}function p(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function f(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var g="_blank",y=1,b=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=new Array(o),r=0;r<o;r++)i[r]=arguments[r];return m(h(n=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?h(e):t}(this,(e=d(t)).call.apply(e,[this].concat(i)))),"handleClick",function(e){var o=n.props,i=o.target,r=o.eventLabel,a=o.to,s=o.onClick,l=o.trackerNames,u={label:r},c=i!==g,p=!(e.ctrlKey||e.shiftKey||e.metaKey||e.button===y);c&&p?(e.preventDefault(),t.trackLink(u,function(){window.location.href=a},l)):t.trackLink(u,function(){},l),s&&s(e)}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(t,i["Component"]),function(e,t,n){t&&f(e.prototype,t),n&&f(e,n)}(t,[{key:"render",value:function(){var e=this.props,t=e.to,n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(n,!0).forEach(function(t){m(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},p(e,["to"]),{href:t,onClick:this.handleClick});return this.props.target===g&&(n.rel="noopener noreferrer"),delete n.eventLabel,delete n.trackerNames,r.a.createElement("a",n)}}]),t}();function C(e){return e.replace(/^\s+|\s+$/g,"")}m(b,"trackLink",function(){l("ga tracking not enabled")}),m(b,"propTypes",{eventLabel:s.a.string.isRequired,target:s.a.string,to:s.a.string,onClick:s.a.func,trackerNames:s.a.arrayOf(s.a.string)}),m(b,"defaultProps",{target:null,to:null,onClick:null,trackerNames:null});var O=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;var w="REDACTED (Potential Email Address)";function S(e,t){return function(e){return"string"==typeof e&&-1!==e.indexOf("@")}(e)?(l("This arg looks like an email address, redacting."),w):t?function(e){return C(e).replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,function(e,t,n){return t>0&&t+e.length!==n.length&&e.search(O)>-1&&":"!==n.charAt(t-2)&&("-"!==n.charAt(t+e.length)||"-"===n.charAt(t-1))&&n.charAt(t-1).search(/[^\s-]/)<0?e.toLowerCase():e.substr(1).search(/[A-Z]|\../)>-1?e:e.charAt(0).toUpperCase()+e.substr(1)})}(e):e}var M=function(e){var t="https://www.google-analytics.com/analytics.js";e&&e.gaAddress?t=e.gaAddress:e&&e.debug&&(t="https://www.google-analytics.com/analytics_debug.js"),function(e,t,n,o,i,r,a){e.GoogleAnalyticsObject=i,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,r=t.createElement(n),a=t.getElementsByTagName(n)[0],r.async=1,r.src=o,a.parentNode.insertBefore(r,a)}(window,document,"script",t,"ga")};function T(e){console.info("[react-ga]",e)}var E=[],P={calls:E,ga:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];E.push([].concat(t))},resetCalls:function(){E.length=0}};function N(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,o)}return n}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var I="undefined"==typeof window||"undefined"==typeof document,A=!1,j=!0,R=!1,V=!0,K=function(){var e;return R?P.ga.apply(P,arguments):!I&&(window.ga?(e=window).ga.apply(e,arguments):l("ReactGA.initialize must be called first or GoogleAnalytics should be loaded manually"))};function L(e){return S(e,j)}function F(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];var i=n[0];if("function"==typeof K){if("string"!=typeof i)return void l("ga command must be a string");!V&&Array.isArray(e)||K.apply(void 0,n),Array.isArray(e)&&e.forEach(function(e){K.apply(void 0,k(["".concat(e,".").concat(i)].concat(n.slice(1))))})}}function W(e,t){e?t&&(t.debug&&!0===t.debug&&(A=!0),!1===t.titleCase&&(j=!1),t.useExistingGa)||(t&&t.gaOptions?K("create",e,t.gaOptions):K("create",e,"auto")):l("gaTrackingID is required in initialize()")}function H(e,t){if(t&&!0===t.testMode)R=!0;else{if(I)return!1;t&&!0===t.standardImplementation||M(t)}return V=!t||"boolean"!=typeof t.alwaysSendToDefaultTracker||t.alwaysSendToDefaultTracker,Array.isArray(e)?e.forEach(function(e){"object"===_(e)?W(e.trackingId,e):l("All configs must be an object")}):W(e,t),!0}function U(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.length>0&&(K.apply(void 0,t),A&&(T("called ga('arguments');"),T("with arguments: ".concat(JSON.stringify(t))))),window.ga}function B(e,t){e?"object"===_(e)?(0===Object.keys(e).length&&l("empty `fieldsObject` given to .set()"),F(t,"set",e),A&&(T("called ga('set', fieldsObject);"),T("with fieldsObject: ".concat(JSON.stringify(e))))):l("Expected `fieldsObject` arg to be an Object"):l("`fieldsObject` is required in .set()")}function z(e,t){F(t,"send",e),A&&(T("called ga('send', fieldObject);"),T("with fieldObject: ".concat(JSON.stringify(e))),T("with trackers: ".concat(JSON.stringify(t))))}function Y(e,t,n){if(e){var o=C(e);if(""!==o){var i={};if(n&&(i.title=n),F(t,"send",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(n,!0).forEach(function(t){D(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({hitType:"pageview",page:o},i)),A){T("called ga('send', 'pageview', path);");var r="";n&&(r=" and title: ".concat(n)),T("with path: ".concat(o).concat(r))}}else l("path cannot be an empty string in .pageview()")}else l("path is required in .pageview()")}function q(e,t){if(e){var n=function(e){return"/"===e.substring(0,1)?e.substring(1):e}(C(e));if(""!==n){var o="/modal/".concat(n);F(t,"send","pageview",o),A&&(T("called ga('send', 'pageview', path);"),T("with path: ".concat(o)))}else l("modalName cannot be an empty string or a single / in .modalview()")}else l("modalName is required in .modalview(modalName)")}function X(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.category,n=e.variable,o=e.value,i=e.label,r=arguments.length>1?arguments[1]:void 0;if(t&&n&&o&&"number"==typeof o){var a={hitType:"timing",timingCategory:L(t),timingVar:L(n),timingValue:o};i&&(a.timingLabel=L(i)),z(a,r)}else l("args.category, args.variable AND args.value are required in timing() AND args.value has to be a number")}function G(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.category,n=e.action,o=e.label,i=e.value,r=e.nonInteraction,a=e.transport,s=N(e,["category","action","label","value","nonInteraction","transport"]),u=arguments.length>1?arguments[1]:void 0;if(t&&n){var c={hitType:"event",eventCategory:L(t),eventAction:L(n)};o&&(c.eventLabel=L(o)),void 0!==i&&("number"!=typeof i?l("Expected `args.value` arg to be a Number."):c.eventValue=i),void 0!==r&&("boolean"!=typeof r?l("`args.nonInteraction` must be a boolean."):c.nonInteraction=r),void 0!==a&&("string"!=typeof a?l("`args.transport` must be a string."):(-1===["beacon","xhr","image"].indexOf(a)&&l("`args.transport` must be either one of these values: `beacon`, `xhr` or `image`"),c.transport=a)),Object.keys(s).filter(function(e){return"dimension"===e.substr(0,"dimension".length)}).forEach(function(e){c[e]=s[e]}),Object.keys(s).filter(function(e){return"metric"===e.substr(0,"metric".length)}).forEach(function(e){c[e]=s[e]}),z(c,u)}else l("args.category AND args.action are required in event()")}function Z(e,t){var n=e.description,o=e.fatal,i={hitType:"exception"};n&&(i.exDescription=L(n)),void 0!==o&&("boolean"!=typeof o?l("`args.fatal` must be a boolean."):i.exFatal=o),z(i,t)}var $={require:function(e,t,n){if(e){var o=C(e);if(""!==o){var i=n?"".concat(n,".require"):"require";if(t){if("object"!==_(t))return void l("Expected `options` arg to be an Object");0===Object.keys(t).length&&l("Empty `options` given to .require()"),U(i,o,t),A&&T("called ga('require', '".concat(o,"', ").concat(JSON.stringify(t)))}else U(i,o),A&&T("called ga('require', '".concat(o,"');"))}else l("`name` cannot be an empty string in .require()")}else l("`name` is required in .require()")},execute:function(e,t){var n,o;if(1==(arguments.length<=2?0:arguments.length-2)?n=arguments.length<=2?void 0:arguments[2]:(o=arguments.length<=2?void 0:arguments[2],n=arguments.length<=3?void 0:arguments[3]),"string"!=typeof e)l("Expected `pluginName` arg to be a String.");else if("string"!=typeof t)l("Expected `action` arg to be a String.");else{var i="".concat(e,":").concat(t);n=n||null,o&&n?(U(i,o,n),A&&(T("called ga('".concat(i,"');")),T('actionType: "'.concat(o,'" with payload: ').concat(JSON.stringify(n))))):n?(U(i,n),A&&(T("called ga('".concat(i,"');")),T("with payload: ".concat(JSON.stringify(n))))):(U(i),A&&T("called ga('".concat(i,"');")))}}};function Q(e,t,n){if("function"==typeof t)if(e&&e.label){var o={hitType:"event",eventCategory:"Outbound",eventAction:"Click",eventLabel:L(e.label)},i=!1,r=setTimeout(function(){i=!0,t()},250);o.hitCallback=function(){clearTimeout(r),i||t()},z(o,n)}else l("args.label is required in outboundLink()");else l("hitCallback function is required")}var J=P,ee={initialize:H,ga:U,set:B,send:z,pageview:Y,modalview:q,timing:X,event:G,exception:Z,plugin:$,outboundLink:Q,testModeAPI:P};function te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,o)}return n}function ne(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}b.origTrackLink=b.trackLink,b.trackLink=Q;var oe=b;t.a=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?te(n,!0).forEach(function(t){ne(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):te(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},o,{OutboundLink:oe})},490:function(e,t,n){"use strict";var o=n(226),i=n.n(o),r=n(232),a=n.n(r),s=n(227),l=n.n(s),u=n(230),c=n.n(u),p=n(228),f=n.n(p),d=n(229),h=n.n(d),v=n(1),m=n.n(v),g=n(2),y=n.n(g),b=n(25),C=n.n(b),O=n(269),w=n(279),S=n(333),M=n(231),T=n.n(M),E=n(280),P=n(328),N=n.n(P),x=n(270),D=n(4),_=n.n(D),k=function(e){function t(){return l()(this,t),f()(this,e.apply(this,arguments))}return h()(t,e),t}(m.a.Component);k.propTypes={value:y.a.oneOfType([y.a.string,y.a.number])},k.isSelectOption=!0;var I=k;function A(e){return"string"==typeof e?e:null}function j(e){if(!e)return null;var t=e.props;if("value"in t)return t.value;if(e.key)return e.key;if(e.type&&e.type.isSelectOptGroup&&t.label)return t.label;throw new Error("Need at least a key or a value or a label (only for OptGroup) for "+e)}function R(e,t){return"value"===t?j(e):e.props[t]}function V(e){return e.combobox}function K(e){return e.multiple||e.tags}function L(e){return K(e)||V(e)}function F(e){return!L(e)}function W(e){var t=e;return void 0===e?t=[]:Array.isArray(e)||(t=[e]),t}function H(e){return typeof e+"-"+e}function U(e){e.preventDefault()}function B(e,t){for(var n=-1,o=0;o<e.length;o++)if(e[o]===t){n=o;break}return n}var z={userSelect:"none",WebkitUserSelect:"none"},Y={unselectable:"on"};function q(e,t){return!t.props.disabled&&W(R(t,this.props.optionFilterProp)).join("").toLowerCase().indexOf(e.toLowerCase())>-1}function X(e,t){return function(n){e[t]=n}}var G=n(243),Z=n.n(G),$=n(303),Q=n(290),J=n.n(Q),ee=n(300),te=n.n(ee),ne=function(e){function t(n){l()(this,t);var o=f()(this,e.call(this,n));return o.scrollActiveItemToView=function(){var e=Object(b.findDOMNode)(o.firstActiveItem),t=o.props,n=t.value,i=t.visible,r=t.firstActiveValue;if(e&&i){var a={onlyScrollIfNeeded:!0};n&&0!==n.length||!r||(a.alignWithTop=!0),o.rafInstance=te()(function(){J()(e,Object(b.findDOMNode)(o.menuRef),a)})}},o.lastInputValue=n.inputValue,o.saveMenuRef=X(o,"menuRef"),o}return h()(t,e),t.prototype.componentDidMount=function(){this.scrollActiveItemToView(),this.lastVisible=this.props.visible},t.prototype.shouldComponentUpdate=function(e){return e.visible||(this.lastVisible=!1),e.visible||e.inputValue!==this.props.inputValue},t.prototype.componentDidUpdate=function(e){var t=this.props;!e.visible&&t.visible&&this.scrollActiveItemToView(),this.lastVisible=t.visible,this.lastInputValue=t.inputValue},t.prototype.componentWillUnmount=function(){this.rafInstance&&this.rafInstance.cancel&&this.rafInstance.cancel()},t.prototype.renderMenu=function(){var e=this,t=this.props,n=t.menuItems,o=t.menuItemSelectedIcon,r=t.defaultActiveFirstOption,a=t.value,s=t.prefixCls,l=t.multiple,u=t.onMenuSelect,c=t.inputValue,p=t.firstActiveValue,f=t.backfillValue;if(n&&n.length){var d={};l?(d.onDeselect=t.onMenuDeselect,d.onSelect=u):d.onClick=u;var h=function e(t,n){if(null===n||void 0===n)return[];var o=[];return m.a.Children.forEach(t,function(t){if(t.type.isMenuItemGroup)o=o.concat(e(t.props.children,n));else{var i=j(t),r=t.key;-1!==B(n,i)&&r&&o.push(r)}}),o}(n,a),g={},y=n;if(h.length||p){t.visible&&!this.lastVisible&&(g.activeKey=h[0]||p);var b=!1,C=function(t){return!b&&-1!==h.indexOf(t.key)||!b&&!h.length&&-1!==p.indexOf(t.key)?(b=!0,Object(v.cloneElement)(t,{ref:function(t){e.firstActiveItem=t}})):t};y=n.map(function(e){if(e.type.isMenuItemGroup){var t=Object(S.a)(e.props.children).map(C);return Object(v.cloneElement)(e,{},t)}return C(e)})}else this.firstActiveItem=null;var O=a&&a[a.length-1];return c===this.lastInputValue||O&&O===f||(g.activeKey=""),m.a.createElement(x.e,i()({ref:this.saveMenuRef,style:this.props.dropdownMenuStyle,defaultActiveFirst:r,role:"listbox",itemIcon:l?o:null},g,{multiple:l},d,{selectedKeys:h,prefixCls:s+"-menu"}),y)}return null},t.prototype.render=function(){var e=this.renderMenu();return e?m.a.createElement("div",{style:{overflow:"auto",transform:"translateZ(0)"},onFocus:this.props.onPopupFocus,onMouseDown:U,onScroll:this.props.onPopupScroll},e):null},t}(m.a.Component);ne.displayName="DropdownMenu",ne.propTypes={defaultActiveFirstOption:y.a.bool,value:y.a.any,dropdownMenuStyle:y.a.object,multiple:y.a.bool,onPopupFocus:y.a.func,onPopupScroll:y.a.func,onMenuDeSelect:y.a.func,onMenuSelect:y.a.func,prefixCls:y.a.string,menuItems:y.a.any,inputValue:y.a.string,visible:y.a.bool,firstActiveValue:y.a.string,menuItemSelectedIcon:y.a.oneOfType([y.a.func,y.a.node])};var oe=ne;$.a.displayName="Trigger";var ie={bottomLeft:{points:["tl","bl"],offset:[0,4],overflow:{adjustX:0,adjustY:1}},topLeft:{points:["bl","tl"],offset:[0,-4],overflow:{adjustX:0,adjustY:1}}},re=function(e){function t(n){l()(this,t);var o=f()(this,e.call(this,n));return ae.call(o),o.saveDropdownMenuRef=X(o,"dropdownMenuRef"),o.saveTriggerRef=X(o,"triggerRef"),o.state={dropdownWidth:null},o}return h()(t,e),t.prototype.componentDidMount=function(){this.setDropdownWidth()},t.prototype.componentDidUpdate=function(){this.setDropdownWidth()},t.prototype.render=function(){var e,t=this.props,n=t.onPopupFocus,o=Z()(t,["onPopupFocus"]),r=o.multiple,a=o.visible,s=o.inputValue,l=o.dropdownAlign,u=o.disabled,c=o.showSearch,p=o.dropdownClassName,f=o.dropdownStyle,d=o.dropdownMatchSelectWidth,h=this.getDropdownPrefixCls(),v=((e={})[p]=!!p,e[h+"--"+(r?"multiple":"single")]=1,e),g=this.getDropdownElement({menuItems:o.options,onPopupFocus:n,multiple:r,inputValue:s,visible:a}),y=void 0;y=u?[]:F(o)&&!c?["click"]:["blur"];var b=i()({},f),C=d?"width":"minWidth";return this.state.dropdownWidth&&(b[C]=this.state.dropdownWidth+"px"),m.a.createElement($.a,i()({},o,{showAction:u?[]:this.props.showAction,hideAction:y,ref:this.saveTriggerRef,popupPlacement:"bottomLeft",builtinPlacements:ie,prefixCls:h,popupTransitionName:this.getDropdownTransitionName(),onPopupVisibleChange:o.onDropdownVisibleChange,popup:g,popupAlign:l,popupVisible:a,getPopupContainer:o.getPopupContainer,popupClassName:T()(v),popupStyle:b}),o.children)},t}(m.a.Component);re.propTypes={onPopupFocus:y.a.func,onPopupScroll:y.a.func,dropdownMatchSelectWidth:y.a.bool,dropdownAlign:y.a.object,visible:y.a.bool,disabled:y.a.bool,showSearch:y.a.bool,dropdownClassName:y.a.string,multiple:y.a.bool,inputValue:y.a.string,filterOption:y.a.any,options:y.a.any,prefixCls:y.a.string,popupClassName:y.a.string,children:y.a.any,showAction:y.a.arrayOf(y.a.string),menuItemSelectedIcon:y.a.oneOfType([y.a.func,y.a.node])};var ae=function(){var e=this;this.setDropdownWidth=function(){if(e.props.dropdownMatchSelectWidth){var t=C.a.findDOMNode(e).offsetWidth;t!==e.state.dropdownWidth&&e.setState({dropdownWidth:t})}},this.getInnerMenu=function(){return e.dropdownMenuRef&&e.dropdownMenuRef.menuRef},this.getPopupDOMNode=function(){return e.triggerRef.getPopupDomNode()},this.getDropdownElement=function(t){var n=e.props;return m.a.createElement(oe,i()({ref:e.saveDropdownMenuRef},t,{prefixCls:e.getDropdownPrefixCls(),onMenuSelect:n.onMenuSelect,onMenuDeselect:n.onMenuDeselect,onPopupScroll:n.onPopupScroll,value:n.value,backfillValue:n.backfillValue,firstActiveValue:n.firstActiveValue,defaultActiveFirstOption:n.defaultActiveFirstOption,dropdownMenuStyle:n.dropdownMenuStyle,menuItemSelectedIcon:n.menuItemSelectedIcon}))},this.getDropdownTransitionName=function(){var t=e.props,n=t.transitionName;return!n&&t.animation&&(n=e.getDropdownPrefixCls()+"-"+t.animation),n},this.getDropdownPrefixCls=function(){return e.props.prefixCls+"-dropdown"}},se=re;function le(e,t,n){var o=y.a.oneOfType([y.a.string,y.a.number]),i=y.a.shape({key:o.isRequired,label:y.a.node});{if(!e.labelInValue)return("multiple"===e.mode||"tags"===e.mode||e.multiple||e.tags)&&""===e[t]?new Error("Invalid prop `"+t+"` of type `string` supplied to `"+n+"`, expected `array` when `multiple` or `tags` is `true`."):y.a.oneOfType([y.a.arrayOf(o),o]).apply(void 0,arguments);if(y.a.oneOfType([y.a.arrayOf(i),i]).apply(void 0,arguments))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`, when you set `labelInValue` to `true`, `"+t+"` should in shape of `{ key: string | number, label?: ReactNode }`.")}}re.displayName="SelectTrigger";var ue={id:y.a.string,defaultActiveFirstOption:y.a.bool,multiple:y.a.bool,filterOption:y.a.any,children:y.a.any,showSearch:y.a.bool,disabled:y.a.bool,allowClear:y.a.bool,showArrow:y.a.bool,tags:y.a.bool,prefixCls:y.a.string,className:y.a.string,transitionName:y.a.string,optionLabelProp:y.a.string,optionFilterProp:y.a.string,animation:y.a.string,choiceTransitionName:y.a.string,onChange:y.a.func,onBlur:y.a.func,onFocus:y.a.func,onSelect:y.a.func,onSearch:y.a.func,onPopupScroll:y.a.func,onMouseEnter:y.a.func,onMouseLeave:y.a.func,onInputKeyDown:y.a.func,placeholder:y.a.any,onDeselect:y.a.func,labelInValue:y.a.bool,value:le,defaultValue:le,dropdownStyle:y.a.object,maxTagTextLength:y.a.number,maxTagCount:y.a.number,maxTagPlaceholder:y.a.oneOfType([y.a.node,y.a.func]),tokenSeparators:y.a.arrayOf(y.a.string),getInputElement:y.a.func,showAction:y.a.arrayOf(y.a.string),clearIcon:y.a.node,inputIcon:y.a.node,removeIcon:y.a.node,menuItemSelectedIcon:y.a.oneOfType([y.a.func,y.a.node])};function ce(){}var pe=function(e){function t(n){l()(this,t);var o=f()(this,e.call(this,n));fe.call(o);var i=t.getOptionsInfoFromProps(n);return o.state={value:t.getValueFromProps(n,!0),inputValue:n.combobox?t.getInputValueForCombobox(n,i,!0):"",open:n.defaultOpen,optionsInfo:i,skipBuildOptionsInfo:!0},o.saveInputRef=X(o,"inputRef"),o.saveInputMirrorRef=X(o,"inputMirrorRef"),o.saveTopCtrlRef=X(o,"topCtrlRef"),o.saveSelectTriggerRef=X(o,"selectTriggerRef"),o.saveRootRef=X(o,"rootRef"),o.saveSelectionRef=X(o,"selectionRef"),o}return h()(t,e),t.prototype.componentDidMount=function(){this.props.autoFocus&&this.focus()},t.prototype.componentDidUpdate=function(){if(K(this.props)){var e=this.getInputDOMNode(),t=this.getInputMirrorDOMNode();e.value?(e.style.width="",e.style.width=t.clientWidth+"px"):e.style.width=""}this.forcePopupAlign()},t.prototype.componentWillUnmount=function(){this.clearFocusTime(),this.clearBlurTime(),this.dropdownContainer&&(C.a.unmountComponentAtNode(this.dropdownContainer),document.body.removeChild(this.dropdownContainer),this.dropdownContainer=null)},t.prototype.focus=function(){F(this.props)?this.selectionRef.focus():this.getInputDOMNode().focus()},t.prototype.blur=function(){F(this.props)?this.selectionRef.blur():this.getInputDOMNode().blur()},t.prototype.renderClear=function(){var e=this.props,t=e.prefixCls,n=e.allowClear,o=e.clearIcon,r=this.state,a=r.value,s=r.inputValue,l=m.a.createElement("span",i()({key:"clear",className:t+"-selection__clear",onMouseDown:U,style:z},Y,{onClick:this.onClearSelection}),o||m.a.createElement("i",{className:t+"-selection__clear-icon"},"×"));return n?V(this.props)?s?l:null:s||a.length?l:null:null},t.prototype.render=function(){var e,t=this.props,n=K(t),o=this.state,r=t.className,a=t.disabled,s=t.prefixCls,l=t.inputIcon,u=this.renderTopControlNode(),c=this.state.open;c&&(this._options=this.renderFilterOptions());var p=this.getRealOpenState(),f=this._options||[],d={};for(var h in t)!t.hasOwnProperty(h)||"data-"!==h.substr(0,5)&&"aria-"!==h.substr(0,5)&&"role"!==h||(d[h]=t[h]);var v=i()({},d);L(t)||(v=i()({},v,{onKeyDown:this.onKeyDown,tabIndex:t.disabled?-1:0}));var g=((e={})[r]=!!r,e[s]=1,e[s+"-open"]=c,e[s+"-focused"]=c||!!this._focused,e[s+"-combobox"]=V(t),e[s+"-disabled"]=a,e[s+"-enabled"]=!a,e[s+"-allow-clear"]=!!t.allowClear,e[s+"-no-arrow"]=!t.showArrow,e);return m.a.createElement(se,{onPopupFocus:this.onPopupFocus,onMouseEnter:this.props.onMouseEnter,onMouseLeave:this.props.onMouseLeave,dropdownAlign:t.dropdownAlign,dropdownClassName:t.dropdownClassName,dropdownMatchSelectWidth:t.dropdownMatchSelectWidth,defaultActiveFirstOption:t.defaultActiveFirstOption,dropdownMenuStyle:t.dropdownMenuStyle,transitionName:t.transitionName,animation:t.animation,prefixCls:t.prefixCls,dropdownStyle:t.dropdownStyle,combobox:t.combobox,showSearch:t.showSearch,options:f,multiple:n,disabled:a,visible:p,inputValue:o.inputValue,value:o.value,backfillValue:o.backfillValue,firstActiveValue:t.firstActiveValue,onDropdownVisibleChange:this.onDropdownVisibleChange,getPopupContainer:t.getPopupContainer,onMenuSelect:this.onMenuSelect,onMenuDeselect:this.onMenuDeselect,onPopupScroll:t.onPopupScroll,showAction:t.showAction,ref:this.saveSelectTriggerRef,menuItemSelectedIcon:t.menuItemSelectedIcon},m.a.createElement("div",{id:t.id,style:t.style,ref:this.saveRootRef,onBlur:this.onOuterBlur,onFocus:this.onOuterFocus,className:T()(g)},m.a.createElement("div",i()({ref:this.saveSelectionRef,key:"selection",className:s+"-selection\n            "+s+"-selection--"+(n?"multiple":"single"),role:"combobox","aria-autocomplete":"list","aria-haspopup":"true","aria-expanded":p},v),u,this.renderClear(),n||!t.showArrow?null:m.a.createElement("span",i()({key:"arrow",className:s+"-arrow",style:z},Y,{onClick:this.onArrowClick}),l||m.a.createElement("i",{className:s+"-arrow-icon"})))))},t}(m.a.Component);pe.propTypes=ue,pe.defaultProps={prefixCls:"rc-select",defaultOpen:!1,labelInValue:!1,defaultActiveFirstOption:!0,showSearch:!0,allowClear:!1,placeholder:"",onChange:ce,onFocus:ce,onBlur:ce,onSelect:ce,onSearch:ce,onDeselect:ce,onInputKeyDown:ce,showArrow:!0,dropdownMatchSelectWidth:!0,dropdownStyle:{},dropdownMenuStyle:{},optionFilterProp:"value",optionLabelProp:"value",notFoundContent:"Not Found",backfill:!1,showAction:["click"],tokenSeparators:[],autoClearSearchValue:!0},pe.getDerivedStateFromProps=function(e,t){var n=t.skipBuildOptionsInfo?t.optionsInfo:pe.getOptionsInfoFromProps(e,t),o={optionsInfo:n,skipBuildOptionsInfo:!1};if("open"in e&&(o.open=e.open),"value"in e){var i=pe.getValueFromProps(e);o.value=i,e.combobox&&(o.inputValue=pe.getInputValueForCombobox(e,n))}return o},pe.getOptionsFromChildren=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return m.a.Children.forEach(e,function(e){e&&(e.type.isSelectOptGroup?pe.getOptionsFromChildren(e.props.children,t):t.push(e))}),t},pe.getInputValueForCombobox=function(e,t,n){var o=[];if("value"in e&&!n&&(o=W(e.value)),"defaultValue"in e&&n&&(o=W(e.defaultValue)),!o.length)return"";var i=o=o[0];return e.labelInValue?i=o.label:t[H(o)]&&(i=t[H(o)].label),void 0===i&&(i=""),i},pe.getLabelFromOption=function(e,t){return R(t,e.optionLabelProp)},pe.getOptionsInfoFromProps=function(e,t){var n={};if(pe.getOptionsFromChildren(e.children).forEach(function(t){var o=j(t);n[H(o)]={option:t,value:o,label:pe.getLabelFromOption(e,t),title:t.props.title}}),t){var o=t.optionsInfo;t.value.forEach(function(e){var t=H(e);n[t]||void 0===o[t]||(n[t]=o[t])})}return n},pe.getValueFromProps=function(e,t){var n=[];return"value"in e&&!t&&(n=W(e.value)),"defaultValue"in e&&t&&(n=W(e.defaultValue)),e.labelInValue&&(n=n.map(function(e){return e.key})),n};var fe=function(){var e=this;this.onInputChange=function(t){var n=e.props.tokenSeparators,o=t.target.value;if(K(e.props)&&n.length&&function(e,t){for(var n=0;n<t.length;++n)if(e.lastIndexOf(t[n])>0)return!0;return!1}(o,n)){var i=e.getValueByInput(o);return void 0!==i&&e.fireChange(i),e.setOpenState(!1,!0),void e.setInputValue("",!1)}e.setInputValue(o),e.setState({open:!0}),V(e.props)&&e.fireChange([o])},this.onDropdownVisibleChange=function(t){t&&!e._focused&&(e.clearBlurTime(),e.timeoutFocus(),e._focused=!0,e.updateFocusClassName()),e.setOpenState(t)},this.onKeyDown=function(t){var n=e.state.open;if(!e.props.disabled){var o=t.keyCode;n&&!e.getInputDOMNode()?e.onInputKeyDown(t):o!==w.a.ENTER&&o!==w.a.DOWN||(n||e.setOpenState(!0),t.preventDefault())}},this.onInputKeyDown=function(t){var n=e.props;if(!n.disabled){var o=e.state,i=t.keyCode;if(!K(n)||t.target.value||i!==w.a.BACKSPACE){if(i===w.a.DOWN){if(!o.open)return e.openIfHasChildren(),t.preventDefault(),void t.stopPropagation()}else if(i===w.a.ENTER&&o.open)t.preventDefault();else if(i===w.a.ESC)return void(o.open&&(e.setOpenState(!1),t.preventDefault(),t.stopPropagation()));if(e.getRealOpenState(o)){var r=e.selectTriggerRef.getInnerMenu();r&&r.onKeyDown(t,e.handleBackfill)&&(t.preventDefault(),t.stopPropagation())}}else{t.preventDefault();var a=o.value;a.length&&e.removeSelected(a[a.length-1])}}},this.onMenuSelect=function(t){var n=t.item;if(n){var o=e.state.value,i=e.props,r=j(n),a=o[o.length-1];if(e.fireSelect(r),K(i)){if(-1!==B(o,r))return;o=o.concat([r])}else{if(void 0!==a&&a===r&&r!==e.state.backfillValue)return void e.setOpenState(!1,!0);o=[r],e.setOpenState(!1,!0)}e.fireChange(o);var s=void 0;s=V(i)?R(n,i.optionLabelProp):"",i.autoClearSearchValue&&e.setInputValue(s,!1)}},this.onMenuDeselect=function(t){var n=t.item,o=t.domEvent;"keydown"!==o.type||o.keyCode!==w.a.ENTER?("click"===o.type&&e.removeSelected(j(n)),e.props.autoClearSearchValue&&e.setInputValue("",!1)):e.removeSelected(j(n))},this.onArrowClick=function(t){t.stopPropagation(),t.preventDefault(),e.props.disabled||e.setOpenState(!e.state.open,!e.state.open)},this.onPlaceholderClick=function(){e.getInputDOMNode()&&e.getInputDOMNode().focus()},this.onOuterFocus=function(t){e.props.disabled?t.preventDefault():(e.clearBlurTime(),(L(e.props)||t.target!==e.getInputDOMNode())&&(e._focused||(e._focused=!0,e.updateFocusClassName(),e.timeoutFocus())))},this.onPopupFocus=function(){e.maybeFocus(!0,!0)},this.onOuterBlur=function(t){e.props.disabled?t.preventDefault():e.blurTimer=setTimeout(function(){e._focused=!1,e.updateFocusClassName();var t=e.props,n=e.state.value,o=e.state.inputValue;if(F(t)&&t.showSearch&&o&&t.defaultActiveFirstOption){var i=e._options||[];if(i.length){var r=function e(t){for(var n=0;n<t.length;n++){var o=t[n];if(o.type.isMenuItemGroup){var i=e(o.props.children);if(i)return i}else if(!o.props.disabled)return o}return null}(i);r&&(n=[j(r)],e.fireChange(n))}}else K(t)&&o&&(e.state.inputValue=e.getInputDOMNode().value="",void 0!==(n=e.getValueByInput(o))&&e.fireChange(n));e.setOpenState(!1),t.onBlur(e.getVLForOnChange(n))},10)},this.onClearSelection=function(t){var n=e.props,o=e.state;if(!n.disabled){var i=o.inputValue,r=o.value;t.stopPropagation(),(i||r.length)&&(r.length&&e.fireChange([]),e.setOpenState(!1,!0),i&&e.setInputValue(""))}},this.onChoiceAnimationLeave=function(){e.forcePopupAlign()},this.getOptionInfoBySingleValue=function(t,n){var o=void 0;if((n=n||e.state.optionsInfo)[H(t)]&&(o=n[H(t)]),o)return o;var i=t;if(e.props.labelInValue){var r=function(e,t){var n=void 0;e=W(e);for(var o=0;o<e.length;o++)if(e[o].key===t){n=e[o].label;break}return n}(e.props.value,t);void 0!==r&&(i=r)}return{option:m.a.createElement(I,{value:t,key:t},t),value:t,label:i}},this.getOptionBySingleValue=function(t){return e.getOptionInfoBySingleValue(t).option},this.getOptionsBySingleValue=function(t){return t.map(function(t){return e.getOptionBySingleValue(t)})},this.getValueByLabel=function(t){if(void 0===t)return null;var n=null;return Object.keys(e.state.optionsInfo).forEach(function(o){var i=e.state.optionsInfo[o];W(i.label).join("")===t&&(n=i.value)}),n},this.getVLBySingleValue=function(t){return e.props.labelInValue?{key:t,label:e.getLabelBySingleValue(t)}:t},this.getVLForOnChange=function(t){var n=t;return void 0!==n?(n=e.props.labelInValue?n.map(function(t){return{key:t,label:e.getLabelBySingleValue(t)}}):n.map(function(e){return e}),K(e.props)?n:n[0]):n},this.getLabelBySingleValue=function(t,n){return e.getOptionInfoBySingleValue(t,n).label},this.getDropdownContainer=function(){return e.dropdownContainer||(e.dropdownContainer=document.createElement("div"),document.body.appendChild(e.dropdownContainer)),e.dropdownContainer},this.getPlaceholderElement=function(){var t=e.props,n=e.state,o=!1;n.inputValue&&(o=!0),n.value.length&&(o=!0),V(t)&&1===n.value.length&&!n.value[0]&&(o=!1);var r=t.placeholder;return r?m.a.createElement("div",i()({onMouseDown:U,style:i()({display:o?"none":"block"},z)},Y,{onClick:e.onPlaceholderClick,className:t.prefixCls+"-selection__placeholder"}),r):null},this.getInputElement=function(){var t,n=e.props,o=n.getInputElement?n.getInputElement():m.a.createElement("input",{id:n.id,autoComplete:"off"}),i=T()(o.props.className,((t={})[n.prefixCls+"-search__field"]=!0,t));return m.a.createElement("div",{className:n.prefixCls+"-search__field__wrap"},m.a.cloneElement(o,{ref:e.saveInputRef,onChange:e.onInputChange,onKeyDown:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(){for(var e=arguments.length,n=Array(e),o=0;o<e;o++)n[o]=arguments[o];for(var i=0;i<t.length;i++)t[i]&&"function"==typeof t[i]&&t[i].apply(this,n)}}(e.onInputKeyDown,o.props.onKeyDown,e.props.onInputKeyDown),value:e.state.inputValue,disabled:n.disabled,className:i}),m.a.createElement("span",{ref:e.saveInputMirrorRef,className:n.prefixCls+"-search__field__mirror"},e.state.inputValue," "))},this.getInputDOMNode=function(){return e.topCtrlRef?e.topCtrlRef.querySelector("input,textarea,div[contentEditable]"):e.inputRef},this.getInputMirrorDOMNode=function(){return e.inputMirrorRef},this.getPopupDOMNode=function(){return e.selectTriggerRef.getPopupDOMNode()},this.getPopupMenuComponent=function(){return e.selectTriggerRef.getInnerMenu()},this.setOpenState=function(t,n){var o=e.props;if(e.state.open!==t){e.props.onDropdownVisibleChange&&e.props.onDropdownVisibleChange(t);var i={open:t,backfillValue:void 0};!t&&F(o)&&o.showSearch&&e.setInputValue("",!1),t||e.maybeFocus(t,n),e.setState(i,function(){t&&e.maybeFocus(t,n)})}else e.maybeFocus(t,n)},this.setInputValue=function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t!==e.state.inputValue&&(e.setState({inputValue:t},e.forcePopupAlign),n&&e.props.onSearch(t))},this.getValueByInput=function(t){var n=e.props,o=n.multiple,i=n.tokenSeparators,r=e.state.value,a=!1;return function(e,t){var n=new RegExp("["+t.join()+"]");return e.split(n).filter(function(e){return e})}(t,i).forEach(function(t){var n=[t];if(o){var i=e.getValueByLabel(t);i&&-1===B(r,i)&&(r=r.concat(i),a=!0,e.fireSelect(i))}else-1===B(r,t)&&(r=r.concat(n),a=!0,e.fireSelect(t))}),a?r:void 0},this.getRealOpenState=function(t){var n=(t||e.state).open,o=e._options||[];return!L(e.props)&&e.props.showSearch||n&&!o.length&&(n=!1),n},this.handleBackfill=function(t){if(e.props.backfill&&(F(e.props)||V(e.props))){var n=j(t);V(e.props)&&e.setInputValue(n,!1),e.setState({value:[n],backfillValue:n})}},this.filterOption=function(t,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:q,i=e.state.value,r=i[i.length-1];if(!t||r&&r===e.state.backfillValue)return!0;var a=e.props.filterOption;return"filterOption"in e.props?!0===e.props.filterOption&&(a=o):a=o,!a||("function"==typeof a?a.call(e,t,n):!n.props.disabled)},this.timeoutFocus=function(){e.focusTimer&&e.clearFocusTime(),e.focusTimer=setTimeout(function(){e.props.onFocus()},10)},this.clearFocusTime=function(){e.focusTimer&&(clearTimeout(e.focusTimer),e.focusTimer=null)},this.clearBlurTime=function(){e.blurTimer&&(clearTimeout(e.blurTimer),e.blurTimer=null)},this.updateFocusClassName=function(){var t=e.rootRef,n=e.props;e._focused?N()(t).add(n.prefixCls+"-focused"):N()(t).remove(n.prefixCls+"-focused")},this.maybeFocus=function(t,n){if(n||t){var o=e.getInputDOMNode(),i=document.activeElement;o&&(t||L(e.props))?i!==o&&(o.focus(),e._focused=!0):i!==e.selectionRef&&(e.selectionRef.focus(),e._focused=!0)}},this.removeSelected=function(t,n){var o=e.props;if(!o.disabled&&!e.isChildDisabled(t)){n&&n.stopPropagation&&n.stopPropagation();var i=e.state.value.filter(function(e){return e!==t});if(K(o)){var r=t;o.labelInValue&&(r={key:t,label:e.getLabelBySingleValue(t)}),o.onDeselect(r,e.getOptionBySingleValue(t))}e.fireChange(i)}},this.openIfHasChildren=function(){var t=e.props;(m.a.Children.count(t.children)||F(t))&&e.setOpenState(!0)},this.fireSelect=function(t){e.props.onSelect(e.getVLBySingleValue(t),e.getOptionBySingleValue(t))},this.fireChange=function(t){var n=e.props;"value"in n||e.setState({value:t},e.forcePopupAlign);var o=e.getVLForOnChange(t),i=e.getOptionsBySingleValue(t);n.onChange(o,K(e.props)?i:i[0])},this.isChildDisabled=function(t){return Object(S.a)(e.props.children).some(function(e){return j(e)===t&&e.props&&e.props.disabled})},this.forcePopupAlign=function(){e.state.open&&e.selectTriggerRef.triggerRef.forcePopupAlign()},this.renderFilterOptions=function(){var t=e.state.inputValue,n=e.props,o=n.children,i=n.tags,r=n.filterOption,a=n.notFoundContent,s=[],l=[],u=e.renderFilterOptionsFromChildren(o,l,s);if(i){var c=e.state.value;if((c=c.filter(function(e){return-1===l.indexOf(e)&&(!t||String(e).indexOf(String(t))>-1)})).forEach(function(e){var t=e,n=m.a.createElement(x.b,{style:z,role:"option",attribute:Y,value:t,key:t},t);u.push(n),s.push(n)}),t)s.every(function(n){var o=function(){return j(n)===t};return!1!==r?!e.filterOption.call(e,t,n,o):!o()})&&u.unshift(m.a.createElement(x.b,{style:z,role:"option",attribute:Y,value:t,key:t},t))}return!u.length&&a&&(u=[m.a.createElement(x.b,{style:z,attribute:Y,disabled:!0,role:"option",value:"NOT_FOUND",key:"NOT_FOUND"},a)]),u},this.renderFilterOptionsFromChildren=function(t,n,o){var r=[],a=e.props,s=e.state.inputValue,l=a.tags;return m.a.Children.forEach(t,function(t){if(t)if(t.type.isSelectOptGroup){var a=e.renderFilterOptionsFromChildren(t.props.children,n,o);if(a.length){var u=t.props.label,c=t.key;c||"string"!=typeof u?!u&&c&&(u=c):c=u,r.push(m.a.createElement(x.c,{key:c,title:u},a))}}else{_()(t.type.isSelectOption,"the children of `Select` should be `Select.Option` or `Select.OptGroup`, instead of `"+(t.type.name||t.type.displayName||t.type)+"`.");var p=j(t);if(function(e,t){if(!F(t)&&!function(e){return e.multiple}(t)&&"string"!=typeof e)throw new Error("Invalid `value` of type `"+typeof e+"` supplied to Option, expected `string` when `tags/combobox` is `true`.")}(p,e.props),e.filterOption(s,t)){var f=m.a.createElement(x.b,i()({style:z,attribute:Y,value:p,key:p,role:"option"},t.props));r.push(f),o.push(f)}l&&n.push(p)}}),r},this.renderTopControlNode=function(){var t=e.state,n=t.value,o=t.open,r=t.inputValue,a=e.props,s=a.choiceTransitionName,l=a.prefixCls,u=a.maxTagTextLength,c=a.maxTagCount,p=a.maxTagPlaceholder,f=a.showSearch,d=a.removeIcon,h=l+"-selection__rendered",v=null;if(F(a)){var g=null;if(n.length){var y=!1,b=1;f&&o?(y=!r)&&(b=.4):y=!0;var C=n[0],O=e.getOptionInfoBySingleValue(C),w=O.label,S=O.title;g=m.a.createElement("div",{key:"value",className:l+"-selection-selected-value",title:A(S||w),style:{display:y?"block":"none",opacity:b}},w)}v=f?[g,m.a.createElement("div",{className:l+"-search "+l+"-search--inline",key:"input",style:{display:o?"block":"none"}},e.getInputElement())]:[g]}else{var M=[],T=n,P=void 0;if(void 0!==c&&n.length>c){T=T.slice(0,c);var N=e.getVLForOnChange(n.slice(c,n.length)),x="+ "+(n.length-c)+" ...";p&&(x="function"==typeof p?p(N):p),P=m.a.createElement("li",i()({style:z},Y,{onMouseDown:U,className:l+"-selection__choice "+l+"-selection__choice__disabled",key:"maxTagPlaceholder",title:A(x)}),m.a.createElement("div",{className:l+"-selection__choice__content"},x))}K(a)&&(M=T.map(function(t){var n=e.getOptionInfoBySingleValue(t),o=n.label,r=n.title||o;u&&"string"==typeof o&&o.length>u&&(o=o.slice(0,u)+"...");var a=e.isChildDisabled(t),s=a?l+"-selection__choice "+l+"-selection__choice__disabled":l+"-selection__choice";return m.a.createElement("li",i()({style:z},Y,{onMouseDown:U,className:s,key:t,title:A(r)}),m.a.createElement("div",{className:l+"-selection__choice__content"},o),a?null:m.a.createElement("span",{onClick:function(n){e.removeSelected(t,n)},className:l+"-selection__choice__remove"},d||m.a.createElement("i",{className:l+"-selection__choice__remove-icon"},"×")))})),P&&M.push(P),M.push(m.a.createElement("li",{className:l+"-search "+l+"-search--inline",key:"__input"},e.getInputElement())),v=K(a)&&s?m.a.createElement(E.a,{onLeave:e.onChoiceAnimationLeave,component:"ul",transitionName:s},M):m.a.createElement("ul",null,M)}return m.a.createElement("div",{className:h,ref:e.saveTopCtrlRef},e.getPlaceholderElement(),v)}};pe.displayName="Select",Object(O.polyfill)(pe);var de=pe,he=function(e){function t(){return l()(this,t),f()(this,e.apply(this,arguments))}return h()(t,e),t}(m.a.Component);he.isSelectOptGroup=!0;var ve=he;de.Option=I,de.OptGroup=ve;var me=de,ge=function(e){function t(){return l()(this,t),f()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return h()(t,e),c()(t,[{key:"getLocale",value:function(){var e=this.props,t=e.componentName,n=e.defaultLocale,o=this.context.antLocale,r=o&&o[t];return i()({},"function"==typeof n?n():n,r||{})}},{key:"getLocaleCode",value:function(){var e=this.context.antLocale,t=e&&e.locale;return e&&e.exist&&!t?"en-us":t}},{key:"render",value:function(){return this.props.children(this.getLocale(),this.getLocaleCode())}}]),t}(v.Component),ye=ge;ge.contextTypes={antLocale:g.object};var be=n(479),Ce={placeholder:"Select time"},Oe={lang:i()({placeholder:"Select date",rangePlaceholder:["Start date","End date"]},be.a),timePickerLocale:i()({},Ce)},we={locale:"en",Pagination:{items_per_page:"/ page",jump_to:"Goto",jump_to_confirm:"confirm",page:"",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages"},DatePicker:Oe,TimePicker:Ce,Calendar:Oe,Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],notFoundContent:"Not Found",searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items"},Select:{notFoundContent:"Not Found"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file"}},Se=n(245),Me=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(e);i<o.length;i++)t.indexOf(o[i])<0&&(n[o[i]]=e[o[i]])}return n},Te={prefixCls:g.string,className:g.string,size:g.oneOf(["default","large","small"]),notFoundContent:g.any,showSearch:g.bool,optionLabelProp:g.string,transitionName:g.string,choiceTransitionName:g.string,id:g.string},Ee=function(e){function t(e){l()(this,t);var n=f()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.saveSelect=function(e){n.rcSelect=e},n.renderSelect=function(e){var t,o=n.props,r=o.prefixCls,s=o.className,l=void 0===s?"":s,u=o.size,c=o.mode,p=Me(o,["prefixCls","className","size","mode"]),f=T()((t={},a()(t,r+"-lg","large"===u),a()(t,r+"-sm","small"===u),t),l),d=n.props.optionLabelProp;n.isCombobox()&&(d=d||"value");var h={multiple:"multiple"===c,tags:"tags"===c,combobox:n.isCombobox()},m=v.createElement(Se.a,{type:"down",className:r+"-arrow-icon"}),g=v.createElement(Se.a,{type:"close",className:r+"-remove-icon"}),y=v.createElement(Se.a,{type:"close-circle",theme:"filled",className:r+"-clear-icon"}),b=v.createElement(Se.a,{type:"check",className:r+"-selected-icon"});return v.createElement(me,i()({inputIcon:m,removeIcon:g,clearIcon:y,menuItemSelectedIcon:b},p,h,{prefixCls:r,className:f,optionLabelProp:d||"children",notFoundContent:n.getNotFoundContent(e),ref:n.saveSelect}))},_()("combobox"!==e.mode,"The combobox mode of Select is deprecated,it will be removed in next major version,please use AutoComplete instead"),n}return h()(t,e),c()(t,[{key:"focus",value:function(){this.rcSelect.focus()}},{key:"blur",value:function(){this.rcSelect.blur()}},{key:"getNotFoundContent",value:function(e){var t=this.props.notFoundContent;return this.isCombobox()?void 0===t?null:t:void 0===t?e.notFoundContent:t}},{key:"isCombobox",value:function(){var e=this.props.mode;return"combobox"===e||e===t.SECRET_COMBOBOX_MODE_DO_NOT_USE}},{key:"render",value:function(){return v.createElement(ye,{componentName:"Select",defaultLocale:we.Select},this.renderSelect)}}]),t}(v.Component);t.a=Ee;Ee.Option=I,Ee.OptGroup=ve,Ee.SECRET_COMBOBOX_MODE_DO_NOT_USE="SECRET_COMBOBOX_MODE_DO_NOT_USE",Ee.defaultProps={prefixCls:"ant-select",showSearch:!1,transitionName:"slide-up",choiceTransitionName:"zoom"},Ee.propTypes=Te},491:function(e,t,n){"use strict";var o=n(232),i=n.n(o),r=n(226),a=n.n(r),s=n(227),l=n.n(s),u=n(230),c=n.n(u),p=n(228),f=n.n(p),d=n(229),h=n.n(d),v=n(1),m=n.n(v),g=n(25),y=n(270),b=n(2),C=n.n(b),O=n(231),w=n.n(O),S=n(327),M=n(300),T=n.n(M);function E(e,t,n){var o=void 0,i=void 0;return Object(S.a)(e,"ant-motion-collapse",{start:function(){t?(o=e.offsetHeight,e.style.height="0px",e.style.opacity="0"):(e.style.height=e.offsetHeight+"px",e.style.opacity="1")},active:function(){i&&T.a.cancel(i),i=T()(function(){e.style.height=(t?o:0)+"px",e.style.opacity=t?"1":"0"})},end:function(){i&&T.a.cancel(i),e.style.height="",e.style.opacity="",n()}})}var P={enter:function(e,t){return E(e,!0,t)},leave:function(e,t){return E(e,!1,t)},appear:function(e,t){return E(e,!0,t)}},N=n(268),x=function(e){function t(){l()(this,t);var e=f()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return e.onKeyDown=function(t){e.subMenu.onKeyDown(t)},e.saveSubMenu=function(t){e.subMenu=t},e}return h()(t,e),c()(t,[{key:"render",value:function(){var e=this.props,t=e.rootPrefixCls,n=e.className,o=this.context.antdMenuTheme;return v.createElement(y.d,a()({},this.props,{ref:this.saveSubMenu,popupClassName:w()(t+"-"+o,n)}))}}]),t}(v.Component);x.contextTypes={antdMenuTheme:b.string},x.isSubMenu=1;var D=x,_=n(269),k=n(243),I=n.n(k),A=n(303),j={adjustX:1,adjustY:1},R=[0,0],V={left:{points:["cr","cl"],overflow:j,offset:[-4,0],targetOffset:R},right:{points:["cl","cr"],overflow:j,offset:[4,0],targetOffset:R},top:{points:["bc","tc"],overflow:j,offset:[0,-4],targetOffset:R},bottom:{points:["tc","bc"],overflow:j,offset:[0,4],targetOffset:R},topLeft:{points:["bl","tl"],overflow:j,offset:[0,-4],targetOffset:R},leftTop:{points:["tr","tl"],overflow:j,offset:[-4,0],targetOffset:R},topRight:{points:["br","tr"],overflow:j,offset:[0,-4],targetOffset:R},rightTop:{points:["tl","tr"],overflow:j,offset:[4,0],targetOffset:R},bottomRight:{points:["tr","br"],overflow:j,offset:[0,4],targetOffset:R},rightBottom:{points:["bl","br"],overflow:j,offset:[4,0],targetOffset:R},bottomLeft:{points:["tl","bl"],overflow:j,offset:[0,4],targetOffset:R},leftBottom:{points:["br","bl"],overflow:j,offset:[-4,0],targetOffset:R}},K=function(e){function t(){return l()(this,t),f()(this,e.apply(this,arguments))}return h()(t,e),t.prototype.componentDidUpdate=function(){var e=this.props.trigger;e&&e.forcePopupAlign()},t.prototype.render=function(){var e=this.props,t=e.overlay,n=e.prefixCls,o=e.id;return m.a.createElement("div",{className:n+"-inner",id:o,role:"tooltip"},"function"==typeof t?t():t)},t}(m.a.Component);K.propTypes={prefixCls:C.a.string,overlay:C.a.oneOfType([C.a.node,C.a.func]).isRequired,id:C.a.string,trigger:C.a.any};var L=K,F=function(e){function t(){var n,o,i;l()(this,t);for(var r=arguments.length,a=Array(r),s=0;s<r;s++)a[s]=arguments[s];return n=o=f()(this,e.call.apply(e,[this].concat(a))),o.getPopupElement=function(){var e=o.props,t=e.arrowContent,n=e.overlay,i=e.prefixCls,r=e.id;return[m.a.createElement("div",{className:i+"-arrow",key:"arrow"},t),m.a.createElement(L,{key:"content",trigger:o.trigger,prefixCls:i,id:r,overlay:n})]},o.saveTrigger=function(e){o.trigger=e},i=n,f()(o,i)}return h()(t,e),t.prototype.getPopupDomNode=function(){return this.trigger.getPopupDomNode()},t.prototype.render=function(){var e=this.props,t=e.overlayClassName,n=e.trigger,o=e.mouseEnterDelay,i=e.mouseLeaveDelay,r=e.overlayStyle,s=e.prefixCls,l=e.children,u=e.onVisibleChange,c=e.afterVisibleChange,p=e.transitionName,f=e.animation,d=e.placement,h=e.align,v=e.destroyTooltipOnHide,g=e.defaultVisible,y=e.getTooltipContainer,b=I()(e,["overlayClassName","trigger","mouseEnterDelay","mouseLeaveDelay","overlayStyle","prefixCls","children","onVisibleChange","afterVisibleChange","transitionName","animation","placement","align","destroyTooltipOnHide","defaultVisible","getTooltipContainer"]),C=a()({},b);return"visible"in this.props&&(C.popupVisible=this.props.visible),m.a.createElement(A.a,a()({popupClassName:t,ref:this.saveTrigger,prefixCls:s,popup:this.getPopupElement,action:n,builtinPlacements:V,popupPlacement:d,popupAlign:h,getPopupContainer:y,onPopupVisibleChange:u,afterPopupVisibleChange:c,popupTransitionName:p,popupAnimation:f,defaultPopupVisible:g,destroyPopupOnHide:v,mouseLeaveDelay:i,popupStyle:r,mouseEnterDelay:o},C),l)},t}(v.Component);F.propTypes={trigger:C.a.any,children:C.a.any,defaultVisible:C.a.bool,visible:C.a.bool,placement:C.a.string,transitionName:C.a.oneOfType([C.a.string,C.a.object]),animation:C.a.any,onVisibleChange:C.a.func,afterVisibleChange:C.a.func,overlay:C.a.oneOfType([C.a.node,C.a.func]).isRequired,overlayStyle:C.a.object,overlayClassName:C.a.string,prefixCls:C.a.string,mouseEnterDelay:C.a.number,mouseLeaveDelay:C.a.number,getTooltipContainer:C.a.func,destroyTooltipOnHide:C.a.bool,align:C.a.object,arrowContent:C.a.any,id:C.a.string},F.defaultProps={prefixCls:"rc-tooltip",mouseEnterDelay:0,destroyTooltipOnHide:!1,mouseLeaveDelay:.1,align:{},placement:"right",trigger:["hover"],arrowContent:null};var W=F,H={adjustX:1,adjustY:1},U={adjustX:0,adjustY:0},B=[0,0];function z(e){return"boolean"==typeof e?e?H:U:a()({},U,e)}var Y=function(e){function t(e){l()(this,t);var n=f()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onVisibleChange=function(e){var t=n.props.onVisibleChange;"visible"in n.props||n.setState({visible:!n.isNoTitle()&&e}),t&&!n.isNoTitle()&&t(e)},n.onPopupAlign=function(e,t){var o=n.getPlacements(),i=Object.keys(o).filter(function(e){return o[e].points[0]===t.points[0]&&o[e].points[1]===t.points[1]})[0];if(i){var r=e.getBoundingClientRect(),a={top:"50%",left:"50%"};i.indexOf("top")>=0||i.indexOf("Bottom")>=0?a.top=r.height-t.offset[1]+"px":(i.indexOf("Top")>=0||i.indexOf("bottom")>=0)&&(a.top=-t.offset[1]+"px"),i.indexOf("left")>=0||i.indexOf("Right")>=0?a.left=r.width-t.offset[0]+"px":(i.indexOf("right")>=0||i.indexOf("Left")>=0)&&(a.left=-t.offset[0]+"px"),e.style.transformOrigin=a.left+" "+a.top}},n.saveTooltip=function(e){n.tooltip=e},n.state={visible:!!e.visible||!!e.defaultVisible},n}return h()(t,e),c()(t,[{key:"getPopupDomNode",value:function(){return this.tooltip.getPopupDomNode()}},{key:"getPlacements",value:function(){var e=this.props,t=e.builtinPlacements,n=e.arrowPointAtCenter,o=e.autoAdjustOverflow;return t||function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.arrowWidth,n=void 0===t?5:t,o=e.horizontalArrowShift,i=void 0===o?16:o,r=e.verticalArrowShift,s=void 0===r?12:r,l=e.autoAdjustOverflow,u=void 0===l||l,c={left:{points:["cr","cl"],offset:[-4,0]},right:{points:["cl","cr"],offset:[4,0]},top:{points:["bc","tc"],offset:[0,-4]},bottom:{points:["tc","bc"],offset:[0,4]},topLeft:{points:["bl","tc"],offset:[-(i+n),-4]},leftTop:{points:["tr","cl"],offset:[-4,-(s+n)]},topRight:{points:["br","tc"],offset:[i+n,-4]},rightTop:{points:["tl","cr"],offset:[4,-(s+n)]},bottomRight:{points:["tr","bc"],offset:[i+n,4]},rightBottom:{points:["bl","cr"],offset:[4,s+n]},bottomLeft:{points:["tl","bc"],offset:[-(i+n),4]},leftBottom:{points:["br","cl"],offset:[-4,s+n]}};return Object.keys(c).forEach(function(t){c[t]=e.arrowPointAtCenter?a()({},c[t],{overflow:z(u),targetOffset:B}):a()({},V[t],{overflow:z(u)})}),c}({arrowPointAtCenter:n,verticalArrowShift:8,autoAdjustOverflow:o})}},{key:"isHoverTrigger",value:function(){var e=this.props.trigger;return!e||"hover"===e||!!Array.isArray(e)&&e.indexOf("hover")>=0}},{key:"getDisabledCompatibleChildren",value:function(e){if((e.type.__ANT_BUTTON||"button"===e.type)&&e.props.disabled&&this.isHoverTrigger()){var t=function(e,t){var n={},o=a()({},e);return t.forEach(function(t){e&&t in e&&(n[t]=e[t],delete o[t])}),{picked:n,omitted:o}}(e.props.style,["position","left","right","top","bottom","float","display","zIndex"]),n=t.picked,o=t.omitted,i=a()({display:"inline-block"},n,{cursor:"not-allowed"}),r=a()({},o,{pointerEvents:"none"}),s=Object(v.cloneElement)(e,{style:r,className:null});return v.createElement("span",{style:i,className:e.props.className},s)}return e}},{key:"isNoTitle",value:function(){var e=this.props,t=e.title,n=e.overlay;return!t&&!n}},{key:"render",value:function(){var e=this.props,t=this.state,n=e.prefixCls,o=e.title,r=e.overlay,s=e.openClassName,l=e.getPopupContainer,u=e.getTooltipContainer,c=e.children,p=t.visible;"visible"in e||!this.isNoTitle()||(p=!1);var f=this.getDisabledCompatibleChildren(v.isValidElement(c)?c:v.createElement("span",null,c)),d=f.props,h=w()(d.className,i()({},s||n+"-open",!0));return v.createElement(W,a()({},this.props,{getTooltipContainer:l||u,ref:this.saveTooltip,builtinPlacements:this.getPlacements(),overlay:r||o||"",visible:p,onVisibleChange:this.onVisibleChange,onPopupAlign:this.onPopupAlign}),p?Object(v.cloneElement)(f,{className:h}):f)}}],[{key:"getDerivedStateFromProps",value:function(e){return"visible"in e?{visible:e.visible}:null}}]),t}(v.Component);Y.defaultProps={prefixCls:"ant-tooltip",placement:"top",transitionName:"zoom-big-fast",mouseEnterDelay:.1,mouseLeaveDelay:.1,arrowPointAtCenter:!1,autoAdjustOverflow:!0},Object(_.polyfill)(Y);var q=Y,X=function(e){function t(){l()(this,t);var e=f()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return e.onKeyDown=function(t){e.menuItem.onKeyDown(t)},e.saveMenuItem=function(t){e.menuItem=t},e}return h()(t,e),c()(t,[{key:"render",value:function(){var e=this.context.inlineCollapsed,t=this.props;return v.createElement(q,{title:e&&1===t.level?t.children:"",placement:"right",overlayClassName:t.rootPrefixCls+"-inline-collapsed-tooltip"},v.createElement(y.b,a()({},t,{ref:this.saveMenuItem})))}}]),t}(v.Component);X.contextTypes={inlineCollapsed:b.bool},X.isMenuItem=1;var G=X,Z=function(e){function t(e){l()(this,t);var n=f()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.inlineOpenKeys=[],n.handleClick=function(e){n.handleOpenChange([]);var t=n.props.onClick;t&&t(e)},n.handleOpenChange=function(e){n.setOpenKeys(e);var t=n.props.onOpenChange;t&&t(e)},Object(N.a)(!("onOpen"in e||"onClose"in e),"`onOpen` and `onClose` are removed, please use `onOpenChange` instead, see: https://u.ant.design/menu-on-open-change."),Object(N.a)(!("inlineCollapsed"in e&&"inline"!==e.mode),"`inlineCollapsed` should only be used when Menu's `mode` is inline.");var o=void 0;return"openKeys"in e?o=e.openKeys:"defaultOpenKeys"in e&&(o=e.defaultOpenKeys),n.state={openKeys:o||[]},n}return h()(t,e),c()(t,[{key:"getChildContext",value:function(){return{inlineCollapsed:this.getInlineCollapsed(),antdMenuTheme:this.props.theme}}},{key:"componentWillReceiveProps",value:function(e,t){var n=this.props.prefixCls;if("inline"===this.props.mode&&"inline"!==e.mode&&(this.switchModeFromInline=!0),"openKeys"in e)this.setState({openKeys:e.openKeys});else{if(e.inlineCollapsed&&!this.props.inlineCollapsed||t.siderCollapsed&&!this.context.siderCollapsed){var o=Object(g.findDOMNode)(this);this.switchModeFromInline=!!this.state.openKeys.length&&!!o.querySelectorAll("."+n+"-submenu-open").length,this.inlineOpenKeys=this.state.openKeys,this.setState({openKeys:[]})}(!e.inlineCollapsed&&this.props.inlineCollapsed||!t.siderCollapsed&&this.context.siderCollapsed)&&(this.setState({openKeys:this.inlineOpenKeys}),this.inlineOpenKeys=[])}}},{key:"setOpenKeys",value:function(e){"openKeys"in this.props||this.setState({openKeys:e})}},{key:"getRealMenuMode",value:function(){var e=this.getInlineCollapsed();if(this.switchModeFromInline&&e)return"inline";var t=this.props.mode;return e?"vertical":t}},{key:"getInlineCollapsed",value:function(){var e=this.props.inlineCollapsed;return void 0!==this.context.siderCollapsed?this.context.siderCollapsed:e}},{key:"getMenuOpenAnimation",value:function(e){var t=this,n=this.props,o=n.openAnimation,i=n.openTransitionName,r=o||i;if(void 0===o&&void 0===i)switch(e){case"horizontal":r="slide-up";break;case"vertical":case"vertical-left":case"vertical-right":this.switchModeFromInline?(r="",this.switchModeFromInline=!1):r="zoom-big";break;case"inline":r=a()({},P,{leave:function(e,n){return P.leave(e,function(){t.switchModeFromInline=!1,t.setState({}),"vertical"!==t.getRealMenuMode()&&n()})}})}return r}},{key:"render",value:function(){var e=this.props,t=e.prefixCls,n=e.className,o=e.theme,r=this.getRealMenuMode(),s=this.getMenuOpenAnimation(r),l=w()(n,t+"-"+o,i()({},t+"-inline-collapsed",this.getInlineCollapsed())),u={openKeys:this.state.openKeys,onOpenChange:this.handleOpenChange,className:l,mode:r};"inline"!==r?(u.onClick=this.handleClick,u.openTransitionName=s):u.openAnimation=s;var c=this.context.collapsedWidth;return!this.getInlineCollapsed()||0!==c&&"0"!==c&&"0px"!==c?v.createElement(y.e,a()({},this.props,u)):null}}]),t}(v.Component);t.a=Z;Z.Divider=y.a,Z.Item=G,Z.SubMenu=D,Z.ItemGroup=y.c,Z.defaultProps={prefixCls:"ant-menu",className:"",theme:"light",focusable:!1},Z.childContextTypes={inlineCollapsed:b.bool,antdMenuTheme:b.string},Z.contextTypes={siderCollapsed:b.bool,collapsedWidth:b.oneOfType([b.number,b.string])}},493:function(e,t,n){"use strict";var o=n(232),i=n.n(o),r=n(289),a=n.n(r),s=n(226),l=n.n(s),u=n(227),c=n.n(u),p=n(230),f=n.n(p),d=n(228),h=n.n(d),v=n(229),m=n.n(v),g=n(1),y=n(2),b=n(231),C=n.n(b),O=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(e);i<o.length;i++)t.indexOf(o[i])<0&&(n[o[i]]=e[o[i]])}return n};function w(e){return function(t){return function(n){function o(){return c()(this,o),h()(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return m()(o,n),f()(o,[{key:"render",value:function(){var n=e.prefixCls;return g.createElement(t,l()({prefixCls:n},this.props))}}]),o}(g.Component)}}var S=function(e){function t(){return c()(this,t),h()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return m()(t,e),f()(t,[{key:"render",value:function(){var e=this.props,t=e.prefixCls,n=e.className,o=e.children,i=O(e,["prefixCls","className","children"]),r=C()(n,t);return g.createElement("div",l()({className:r},i),o)}}]),t}(g.Component),M=function(e){function t(){c()(this,t);var e=h()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return e.state={siders:[]},e}return m()(t,e),f()(t,[{key:"getChildContext",value:function(){var e=this;return{siderHook:{addSider:function(t){e.setState({siders:[].concat(a()(e.state.siders),[t])})},removeSider:function(t){e.setState({siders:e.state.siders.filter(function(e){return e!==t})})}}}}},{key:"render",value:function(){var e=this.props,t=e.prefixCls,n=e.className,o=e.children,r=e.hasSider,a=O(e,["prefixCls","className","children","hasSider"]),s=C()(n,t,i()({},t+"-has-sider",r||this.state.siders.length>0));return g.createElement("div",l()({className:s},a),o)}}]),t}(g.Component);M.childContextTypes={siderHook:y.object};var T=w({prefixCls:"ant-layout"})(M),E=w({prefixCls:"ant-layout-header"})(S),P=w({prefixCls:"ant-layout-footer"})(S),N=w({prefixCls:"ant-layout-content"})(S);T.Header=E,T.Footer=P,T.Content=N;var x=T,D=n(269),_=n(272),k=n(245),I=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},A=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(e);i<o.length;i++)t.indexOf(o[i])<0&&(n[o[i]]=e[o[i]])}return n};if("undefined"!=typeof window){window.matchMedia=window.matchMedia||function(e){return{media:e,matches:!1,addListener:function(){},removeListener:function(){}}}}var j={xs:"480px",sm:"576px",md:"768px",lg:"992px",xl:"1200px",xxl:"1600px"},R=function(){var e=0;return function(){return""+(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"")+(e+=1)}}(),V=function(e){function t(e){c()(this,t);var n=h()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.responsiveHandler=function(e){n.setState({below:e.matches});var t=n.props.onBreakpoint;t&&t(e.matches),n.state.collapsed!==e.matches&&n.setCollapsed(e.matches,"responsive")},n.setCollapsed=function(e,t){"collapsed"in n.props||n.setState({collapsed:e});var o=n.props.onCollapse;o&&o(e,t)},n.toggle=function(){var e=!n.state.collapsed;n.setCollapsed(e,"clickTrigger")},n.belowShowChange=function(){n.setState({belowShow:!n.state.belowShow})},n.uniqueId=R("ant-sider-");var o=void 0;"undefined"!=typeof window&&(o=window.matchMedia),o&&e.breakpoint&&e.breakpoint in j&&(n.mql=o("(max-width: "+j[e.breakpoint]+")"));var i=void 0;return i="collapsed"in e?e.collapsed:e.defaultCollapsed,n.state={collapsed:i,below:!1},n}return m()(t,e),f()(t,[{key:"getChildContext",value:function(){return{siderCollapsed:this.state.collapsed,collapsedWidth:this.props.collapsedWidth}}},{key:"componentDidMount",value:function(){this.mql&&(this.mql.addListener(this.responsiveHandler),this.responsiveHandler(this.mql)),this.context.siderHook&&this.context.siderHook.addSider(this.uniqueId)}},{key:"componentWillUnmount",value:function(){this.mql&&this.mql.removeListener(this.responsiveHandler),this.context.siderHook&&this.context.siderHook.removeSider(this.uniqueId)}},{key:"render",value:function(){var e,t=this.props,n=t.prefixCls,o=t.className,r=t.theme,a=t.collapsible,s=t.reverseArrow,u=t.trigger,c=t.style,p=t.width,f=t.collapsedWidth,d=A(t,["prefixCls","className","theme","collapsible","reverseArrow","trigger","style","width","collapsedWidth"]),h=Object(_.a)(d,["collapsed","defaultCollapsed","onCollapse","breakpoint","onBreakpoint"]),v=this.state.collapsed?f:p,m=I(v)?v+"px":String(v),y=0===parseFloat(String(f||0))?g.createElement("span",{onClick:this.toggle,className:n+"-zero-width-trigger"},g.createElement(k.a,{type:"bars"})):null,b={expanded:s?g.createElement(k.a,{type:"right"}):g.createElement(k.a,{type:"left"}),collapsed:s?g.createElement(k.a,{type:"left"}):g.createElement(k.a,{type:"right"})}[this.state.collapsed?"collapsed":"expanded"],O=null!==u?y||g.createElement("div",{className:n+"-trigger",onClick:this.toggle,style:{width:m}},u||b):null,w=l()({},c,{flex:"0 0 "+m,maxWidth:m,minWidth:m,width:m}),S=C()(o,n,n+"-"+r,(e={},i()(e,n+"-collapsed",!!this.state.collapsed),i()(e,n+"-has-trigger",a&&null!==u&&!y),i()(e,n+"-below",!!this.state.below),i()(e,n+"-zero-width",0===parseFloat(m)),e));return g.createElement("div",l()({className:S},h,{style:w}),g.createElement("div",{className:n+"-children"},this.props.children),a||this.state.below&&y?O:null)}}],[{key:"getDerivedStateFromProps",value:function(e){return"collapsed"in e?{collapsed:e.collapsed}:null}}]),t}(g.Component);V.__ANT_LAYOUT_SIDER=!0,V.defaultProps={prefixCls:"ant-layout-sider",collapsible:!1,defaultCollapsed:!1,reverseArrow:!1,width:200,collapsedWidth:80,style:{},theme:"dark"},V.childContextTypes={siderCollapsed:y.bool,collapsedWidth:y.oneOfType([y.number,y.string])},V.contextTypes={siderHook:y.object},Object(D.polyfill)(V);var K=V;x.Sider=K;t.a=x}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbWVudS9lcy91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tZW51L2VzL3BsYWNlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW1lbnUvZXMvU3ViTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbWVudS9lcy9ET01XcmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tZW51L2VzL1N1YlBvcHVwTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbWVudS9lcy9NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tZW51L2VzL01lbnVJdGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1tZW51L2VzL01lbnVJdGVtR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLW1lbnUvZXMvRGl2aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtbWVudS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1zdG9yZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvS2V5Q29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdHJpZ2dlci9lcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL3Byb3BlcnR5VXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1hbGlnbi9lcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL2dldE9mZnNldFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL2dldFZpc2libGVSZWN0Rm9yRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL2lzQW5jZXN0b3JGaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL2FkanVzdEZvclZpZXdwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tYWxpZ24vZXMvZ2V0UmVnaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tYWxpZ24vZXMvZ2V0QWxpZ25PZmZzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1hbGlnbi9lcy9nZXRFbEZ1dHVyZVBvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFsaWduL2VzL2FsaWduL2FsaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tYWxpZ24vZXMvYWxpZ24vYWxpZ25FbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tYWxpZ24vZXMvYWxpZ24vYWxpZ25Qb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtYWxpZ24vZXMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtYWxpZ24vZXMvQWxpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWFsaWduL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10cmlnZ2VyL2VzL0xhenlSZW5kZXJCb3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRyaWdnZXIvZXMvUG9wdXBJbm5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdHJpZ2dlci9lcy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdHJpZ2dlci9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1zdG9yZS9saWIvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9hZGRFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0NoaWxkcmVuL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktc3RvcmUvbGliL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLXN0b3JlL2xpYi9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGFsbG93ZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktc3RvcmUvbGliL2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbC9kaXN0L1Jlc2l6ZU9ic2VydmVyLmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9jb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRkLWRvbS1ldmVudC1saXN0ZW5lci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FkZC1kb20tZXZlbnQtbGlzdGVuZXIvbGliL0V2ZW50T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hZGQtZG9tLWV2ZW50LWxpc3RlbmVyL2xpYi9FdmVudEJhc2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvQ29udGFpbmVyUmVuZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXV0YXRpb25vYnNlcnZlci1zaGltL2Rpc3QvbXV0YXRpb25vYnNlcnZlci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLWNhbGVuZGFyL2VzL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvY29uc29sZS93YXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1nYS9kaXN0L2VzbS9jb21wb25lbnRzL091dGJvdW5kTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvdG9UaXRsZUNhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWdhL2Rpc3QvZXNtL3V0aWxzL2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvbWlnaHRCZUVtYWlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1nYS9kaXN0L2VzbS91dGlscy9sb2FkR0EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWdhL2Rpc3QvZXNtL3V0aWxzL2NvbnNvbGUvbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1nYS9kaXN0L2VzbS91dGlscy90ZXN0TW9kZUFQSS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZ2EvZGlzdC9lc20vdXRpbHMvcmVtb3ZlTGVhZGluZ1NsYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1nYS9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtc2VsZWN0L2VzL09wdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtc2VsZWN0L2VzL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXNlbGVjdC9lcy9Ecm9wZG93bk1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXNlbGVjdC9lcy9TZWxlY3RUcmlnZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1zZWxlY3QvZXMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1zZWxlY3QvZXMvU2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1zZWxlY3QvZXMvT3B0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXNlbGVjdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXBhZ2luYXRpb24vZXMvbG9jYWxlL2VuX1VTLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RpbWUtcGlja2VyL2xvY2FsZS9lbl9VUy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9kYXRlLXBpY2tlci9sb2NhbGUvZW5fVVMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbG9jYWxlLXByb3ZpZGVyL2RlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvc2VsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL191dGlsL29wZW5BbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbWVudS9TdWJNZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10b29sdGlwL2VzL3BsYWNlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRvb2x0aXAvZXMvQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdG9vbHRpcC9lcy9Ub29sdGlwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10b29sdGlwL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3Rvb2x0aXAvcGxhY2VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90b29sdGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL21lbnUvTWVudUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbWVudS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sYXlvdXQvbGF5b3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL191dGlsL2lzTnVtZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9sYXlvdXQvU2lkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvbGF5b3V0L2luZGV4LmpzIl0sIm5hbWVzIjpbIm5vb3AiLCJnZXRLZXlGcm9tQ2hpbGRyZW5JbmRleCIsImNoaWxkIiwibWVudUV2ZW50S2V5IiwiaW5kZXgiLCJwcmVmaXgiLCJrZXkiLCJnZXRNZW51SWRGcm9tU3ViTWVudUV2ZW50S2V5IiwiZXZlbnRLZXkiLCJsb29wTWVudUl0ZW0iLCJjaGlsZHJlbiIsImNiIiwicmVhY3RfZGVmYXVsdCIsImEiLCJDaGlsZHJlbiIsImZvckVhY2giLCJjIiwidHlwZSIsImlzTWVudUl0ZW1Hcm91cCIsInByb3BzIiwiYzIiLCJtZW51QWxsUHJvcHMiLCJnZXRXaWR0aCIsImVsZW0iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsImF1dG9BZGp1c3RPdmVyZmxvdyIsImFkanVzdFgiLCJhZGp1c3RZIiwiZXNfcGxhY2VtZW50cyIsInRvcExlZnQiLCJwb2ludHMiLCJvdmVyZmxvdyIsIm9mZnNldCIsImJvdHRvbUxlZnQiLCJsZWZ0VG9wIiwicmlnaHRUb3AiLCJndWlkIiwicG9wdXBQbGFjZW1lbnRNYXAiLCJob3Jpem9udGFsIiwidmVydGljYWwiLCJ2ZXJ0aWNhbC1sZWZ0IiwidmVydGljYWwtcmlnaHQiLCJTdWJNZW51X3VwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdCIsInN0b3JlIiwiZGVmYXVsdEFjdGl2ZUZpcnN0IiwiX2V4dGVuZHMyIiwibWVudUlkIiwic3RhdGUiLCJnZXRTdGF0ZSIsInNldFN0YXRlIiwiZXh0ZW5kc19kZWZhdWx0IiwiU3ViTWVudV9TdWJNZW51IiwiX1JlYWN0JENvbXBvbmVudCIsIlN1Yk1lbnUiLCJjbGFzc0NhbGxDaGVja19kZWZhdWx0IiwidGhpcyIsIl90aGlzIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybl9kZWZhdWx0IiwiY2FsbCIsIlN1Yk1lbnVfaW5pdGlhbGlzZVByb3BzIiwiaXNSb290TWVudSIsInZhbHVlIiwiaW5oZXJpdHNfZGVmYXVsdCIsInByb3RvdHlwZSIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50RGlkVXBkYXRlIiwiX3RoaXMyIiwiX3Byb3BzIiwibW9kZSIsInBhcmVudE1lbnUiLCJtYW51YWxSZWYiLCJpc09wZW4iLCJtaW5XaWR0aFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYWRqdXN0V2lkdGgiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIl9wcm9wczIiLCJvbkRlc3Ryb3kiLCJjbGVhclRpbWVvdXQiLCJtb3VzZWVudGVyVGltZW91dCIsInJlbmRlckNoaWxkcmVuIiwiYmFzZVByb3BzIiwidmlzaWJsZSIsImxldmVsIiwiaW5saW5lSW5kZW50IiwiZm9jdXNhYmxlIiwib25DbGljayIsIm9uU3ViTWVudUNsaWNrIiwib25TZWxlY3QiLCJvbkRlc2VsZWN0Iiwic2VsZWN0ZWRLZXlzIiwib3BlbktleXMiLCJvcGVuVHJhbnNpdGlvbk5hbWUiLCJvcGVuQW5pbWF0aW9uIiwib25PcGVuQ2hhbmdlIiwic3ViTWVudU9wZW5EZWxheSIsInN1Yk1lbnVDbG9zZURlbGF5IiwiZm9yY2VTdWJNZW51UmVuZGVyIiwidHJpZ2dlclN1Yk1lbnVBY3Rpb24iLCJidWlsdGluUGxhY2VtZW50cyIsIm11bHRpcGxlIiwicHJlZml4Q2xzIiwicm9vdFByZWZpeENscyIsImlkIiwiX21lbnVJZCIsInNhdmVNZW51SW5zdGFuY2UiLCJpdGVtSWNvbiIsImV4cGFuZEljb24iLCJoYXZlUmVuZGVyZWQiLCJoYXZlT3BlbmVkIiwiY3JlYXRlRWxlbWVudCIsInRyYW5zaXRpb25BcHBlYXIiLCJjbGFzc05hbWUiLCJhbmltUHJvcHMiLCJ0cmFuc2l0aW9uTmFtZSIsImFuaW1hdGlvbiIsImFwcGVhciIsIkFuaW1hdGUiLCJzaG93UHJvcCIsImNvbXBvbmVudCIsImVzX1N1YlBvcHVwTWVudSIsInJlbmRlciIsIl9jbGFzc05hbWVzIiwiZ2V0UHJlZml4Q2xzIiwiaXNJbmxpbmVNb2RlIiwiY2xhc3NuYW1lc19kZWZhdWx0IiwiZ2V0T3BlbkNsYXNzTmFtZSIsImdldEFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZSIsImdldERpc2FibGVkQ2xhc3NOYW1lIiwiZGlzYWJsZWQiLCJnZXRTZWxlY3RlZENsYXNzTmFtZSIsImlzQ2hpbGRyZW5TZWxlY3RlZCIsIm1vdXNlRXZlbnRzIiwidGl0bGVDbGlja0V2ZW50cyIsInRpdGxlTW91c2VFdmVudHMiLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlRW50ZXIiLCJvblRpdGxlQ2xpY2siLCJvblRpdGxlTW91c2VFbnRlciIsIm9uVGl0bGVNb3VzZUxlYXZlIiwic3R5bGUiLCJwYWRkaW5nTGVmdCIsImFyaWFPd25zIiwiYXJpYS1vd25zIiwiaWNvbiIsInRpdGxlIiwicmVmIiwic2F2ZVN1Yk1lbnVUaXRsZSIsImFyaWEtZXhwYW5kZWQiLCJhcmlhLWhhc3BvcHVwIiwidW5kZWZpbmVkIiwiZ2V0UG9wdXBDb250YWluZXIiLCJ0cmlnZ2VyTm9kZSIsInBhcmVudE5vZGUiLCJwb3B1cFBsYWNlbWVudCIsInBvcHVwQWxpZ24iLCJwb3B1cE9mZnNldCIsInBvcHVwQ2xhc3NOYW1lIiwicm9sZSIsImVzIiwicG9wdXBWaXNpYmxlIiwicG9wdXAiLCJhY3Rpb24iLCJtb3VzZUVudGVyRGVsYXkiLCJtb3VzZUxlYXZlRGVsYXkiLCJvblBvcHVwVmlzaWJsZUNoYW5nZSIsImZvcmNlUmVuZGVyIiwiekluZGV4IiwiQ29tcG9uZW50IiwicHJvcFR5cGVzIiwicHJvcF90eXBlc19kZWZhdWx0Iiwib2JqZWN0Iiwibm9kZSIsImFueSIsImFycmF5IiwiZnVuYyIsInN0cmluZyIsImJvb2wiLCJvbkl0ZW1Ib3ZlciIsIm9uZU9mIiwib25lT2ZUeXBlIiwiZGVmYXVsdFByb3BzIiwiX3RoaXMzIiwib25LZXlEb3duIiwiZSIsImtleUNvZGUiLCJtZW51IiwibWVudUluc3RhbmNlIiwiX3Byb3BzMyIsIktleUNvZGUiLCJFTlRFUiIsIlJJR0hUIiwidHJpZ2dlck9wZW5DaGFuZ2UiLCJMRUZUIiwiaGFuZGxlZCIsIlVQIiwiRE9XTiIsIl9wcm9wczQiLCJkb21FdmVudCIsIl9wcm9wczUiLCJzdWJNZW51SW5zdGFuY2UiLCJfcHJvcHM2IiwiaG92ZXIiLCJfcHJvcHM3IiwiaW5mbyIsImFkZEtleVBhdGgiLCJrZXlQYXRoIiwiY29uY2F0Iiwib3BlbiIsIm9wZW5DaGFuZ2UiLCJpdGVtIiwidHJpZ2dlciIsInJldCIsImZpbmQiLCJsb29wTWVudUl0ZW1SZWN1cnNpdmVseSIsImtleXMiLCJjb25zdHJ1Y3QiLCJpc1N1Yk1lbnUiLCJpc01lbnVJdGVtIiwiaW5kZXhPZiIsInN1Yk1lbnVUaXRsZSIsInBvcHVwTWVudSIsInJlYWN0X2RvbV9kZWZhdWx0IiwiZmluZERPTU5vZGUiLCJvZmZzZXRXaWR0aCIsIm1pbldpZHRoIiwiY29ubmVjdGVkIiwiT2JqZWN0IiwibGliIiwiX3JlZiIsIl9yZWYyIiwiYWN0aXZlS2V5Iiwic3ViTWVudUtleSIsImVzX1N1Yk1lbnUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJET01XcmFwX0RPTVdyYXAiLCJET01XcmFwIiwiX3RlbXAiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJhcHBseSIsImxhc3RWaXNpYmxlSW5kZXgiLCJnZXRPdmVyZmxvd2VkU3ViTWVudUl0ZW0iLCJrZXlQcmVmaXgiLCJvdmVyZmxvd2VkSXRlbXMiLCJyZW5kZXJQbGFjZWhvbGRlciIsIl90aGlzJHByb3BzIiwib3ZlcmZsb3dlZEluZGljYXRvciIsInRoZW1lIiwicHJvcFN0eWxlIiwiX2NvcHkkcHJvcHMiLCJyZXN0Iiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNfZGVmYXVsdCIsImRpc3BsYXkiLCJ2aXNpYmlsaXR5IiwicG9zaXRpb24iLCJzZXRDaGlsZHJlbldpZHRoQW5kUmVzaXplIiwidWwiLCJ1bENoaWxkcmVuTm9kZXMiLCJjaGlsZHJlblNpemVzIiwibGFzdE92ZXJmbG93ZWRJbmRpY2F0b3JQbGFjZWhvbGRlciIsIm1hcCIsImkiLCJvdmVyZmxvd2VkSW5kaWNhdG9yV2lkdGgiLCJvcmlnaW5hbFRvdGFsV2lkdGgiLCJyZWR1Y2UiLCJhY2MiLCJjdXIiLCJoYW5kbGVSZXNpemUiLCJyZXNpemVPYnNlcnZlciIsIm11dGF0aW9uT2JzZXJ2ZXIiLCJjdXJyZW50U3VtV2lkdGgiLCJsaVdpZHRoIiwibWVudVVsIiwiUmVzaXplT2JzZXJ2ZXJfZXMiLCJlbnRyaWVzIiwic2xpY2UiLCJlbCIsIm9ic2VydmUiLCJNdXRhdGlvbk9ic2VydmVyIiwiZGlzY29ubmVjdCIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJzdWJUcmVlIiwiY2hpbGROb2RlIiwib3ZlcmZsb3dlZCIsImNsb25lRWxlbWVudCIsInB1c2giLCJoaWRkZW5DbGFzc05hbWUiLCJUYWciLCJ0YWciLCJudW1iZXIiLCJlc19ET01XcmFwIiwidXBkYXRlQWN0aXZlS2V5IiwiZ2V0RXZlbnRLZXkiLCJnZXRBY3RpdmVLZXkiLCJvcmlnaW5hbEFjdGl2ZUtleSIsImZvdW5kIiwiU3ViUG9wdXBNZW51X1N1YlBvcHVwTWVudSIsIlN1YlBvcHVwTWVudSIsIl9leHRlbmRzMyIsIlN1YlBvcHVwTWVudV9pbml0aWFsaXNlUHJvcHMiLCJpbnN0YW5jZUFycmF5Iiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFByb3BzIiwiZG9tUHJvcHMiLCJ0YWJJbmRleCIsInJlbmRlck1lbnVJdGVtIiwiYXJyYXlPZiIsInNoYXBlIiwiZGVmYXVsdFNlbGVjdGVkS2V5cyIsImRlZmF1bHRPcGVuS2V5cyIsImNhbGxiYWNrIiwiZ2V0RmxhdEluc3RhbmNlQXJyYXkiLCJvYmoiLCJhY3RpdmVJdGVtIiwic3RlcCIsInByZXZlbnREZWZhdWx0Iiwic2VsZWN0SW5mbyIsImdldE9wZW5UcmFuc2l0aW9uTmFtZSIsImRpcmVjdGlvbiIsImxlbiIsInJldmVyc2UiLCJhY3RpdmVJbmRleCIsImV2ZXJ5IiwiY2kiLCJhcnIiLCJhbGxEaXNhYmxlZCIsInN0YXJ0IiwicmVuZGVyQ29tbW9uTWVudUl0ZW0iLCJleHRyYVByb3BzIiwiY2hpbGRQcm9wcyIsImlzQWN0aXZlIiwibmV3Q2hpbGRQcm9wcyIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsImJpbmQiLCJNZW51X01lbnUiLCJNZW51IiwiTWVudV9pbml0aWFsaXNlUHJvcHMiLCIwLW1lbnUtIiwidXBkYXRlTWluaVN0b3JlIiwiaW5uZXJNZW51Iiwic2VsZWN0YWJsZSIsInNlbGVjdGVkS2V5IiwiZ2V0V3JhcHBlZEluc3RhbmNlIiwiZXZlbnQiLCJjaGFuZ2VkIiwicHJvY2Vzc1NpbmdsZSIsIm9uZUNoYW5nZWQiLCJzcGxpY2UiLCJpc0FycmF5IiwiYW5pbWF0aW9uTmFtZSIsImVzX01lbnUiLCJNZW51SXRlbV9NZW51SXRlbSIsIk1lbnVJdGVtIiwiX3RoaXMkcHJvcHMyIiwiX3RoaXMkcHJvcHMzIiwiaXNTZWxlY3RlZCIsImNhbGxSZWYiLCJkb21fc2Nyb2xsX2ludG9fdmlld19saWJfZGVmYXVsdCIsIm9ubHlTY3JvbGxJZk5lZWRlZCIsImF0dHJzIiwiYXR0cmlidXRlIiwiYXJpYS1kaXNhYmxlZCIsImFyaWEtc2VsZWN0ZWQiLCJtb3VzZUV2ZW50IiwiZXNfTWVudUl0ZW0iLCJNZW51SXRlbUdyb3VwX01lbnVJdGVtR3JvdXAiLCJNZW51SXRlbUdyb3VwIiwicmVuZGVySW5uZXJNZW51SXRlbSIsIl9wcm9wcyRjbGFzc05hbWUiLCJ0aXRsZUNsYXNzTmFtZSIsImxpc3RDbGFzc05hbWUiLCJlc19NZW51SXRlbUdyb3VwIiwiRGl2aWRlcl9EaXZpZGVyIiwiRGl2aWRlciIsImVzX0RpdmlkZXIiLCJkIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImNyZWF0ZSIsImNvbm5lY3QiLCJQcm92aWRlciIsIl9Qcm92aWRlcjMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2Nvbm5lY3QzIiwiX2NyZWF0ZTMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk1BQ19FTlRFUiIsIkJBQ0tTUEFDRSIsIlRBQiIsIk5VTV9DRU5URVIiLCJTSElGVCIsIkNUUkwiLCJBTFQiLCJQQVVTRSIsIkNBUFNfTE9DSyIsIkVTQyIsIlNQQUNFIiwiUEFHRV9VUCIsIlBBR0VfRE9XTiIsIkVORCIsIkhPTUUiLCJQUklOVF9TQ1JFRU4iLCJJTlNFUlQiLCJERUxFVEUiLCJaRVJPIiwiT05FIiwiVFdPIiwiVEhSRUUiLCJGT1VSIiwiRklWRSIsIlNJWCIsIlNFVkVOIiwiRUlHSFQiLCJOSU5FIiwiUVVFU1RJT05fTUFSSyIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJOIiwiTyIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiTUVUQSIsIldJTl9LRVlfUklHSFQiLCJDT05URVhUX01FTlUiLCJOVU1fWkVSTyIsIk5VTV9PTkUiLCJOVU1fVFdPIiwiTlVNX1RIUkVFIiwiTlVNX0ZPVVIiLCJOVU1fRklWRSIsIk5VTV9TSVgiLCJOVU1fU0VWRU4iLCJOVU1fRUlHSFQiLCJOVU1fTklORSIsIk5VTV9NVUxUSVBMWSIsIk5VTV9QTFVTIiwiTlVNX01JTlVTIiwiTlVNX1BFUklPRCIsIk5VTV9ESVZJU0lPTiIsIkYxIiwiRjIiLCJGMyIsIkY0IiwiRjUiLCJGNiIsIkY3IiwiRjgiLCJGOSIsIkYxMCIsIkYxMSIsIkYxMiIsIk5VTUxPQ0siLCJTRU1JQ09MT04iLCJEQVNIIiwiRVFVQUxTIiwiQ09NTUEiLCJQRVJJT0QiLCJTTEFTSCIsIkFQT1NUUk9QSEUiLCJTSU5HTEVfUVVPVEUiLCJPUEVOX1NRVUFSRV9CUkFDS0VUIiwiQkFDS1NMQVNIIiwiQ0xPU0VfU1FVQVJFX0JSQUNLRVQiLCJXSU5fS0VZIiwiTUFDX0ZGX01FVEEiLCJXSU5fSU1FIiwiaXNUZXh0TW9kaWZ5aW5nS2V5RXZlbnQiLCJhbHRLZXkiLCJjdHJsS2V5IiwibWV0YUtleSIsImlzQ2hhcmFjdGVyS2V5IiwibmF2aWdhdGlvbiIsInVzZXJBZ2VudCIsImlzUG9pbnRzRXEiLCJhMSIsImEyIiwiaXNBbGlnblBvaW50Iiwic2F2ZVJlZiIsIm5hbWUiLCJ2ZW5kb3JQcmVmaXgiLCJqc0Nzc01hcCIsIldlYmtpdCIsIk1veiIsIm1zIiwiZ2V0VmVuZG9yUHJlZml4IiwiZ2V0VHJhbnNpdGlvbk5hbWUiLCJnZXRUcmFuc2Zvcm1OYW1lIiwic2V0VHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvblByb3BlcnR5Iiwic2V0VHJhbnNmb3JtIiwidHJhbnNmb3JtIiwibWF0cml4MmQiLCJtYXRyaXgzZCIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiZ2V0Q29tcHV0ZWRTdHlsZVgiLCJmb3JjZVJlbGF5b3V0Iiwib3JpZ2luYWxTdHlsZSIsIm9mZnNldEhlaWdodCIsImNzcyIsInYiLCJoYXNPd25Qcm9wZXJ0eSIsImdldFNjcm9sbCIsInciLCJ0b3AiLCJtZXRob2QiLCJkb2N1bWVudEVsZW1lbnQiLCJib2R5IiwiZ2V0U2Nyb2xsTGVmdCIsImdldFNjcm9sbFRvcCIsImdldE9mZnNldCIsInBvcyIsImJveCIsIngiLCJ5IiwiZG9jIiwib3duZXJEb2N1bWVudCIsImRvY0VsZW0iLCJsZWZ0IiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsImdldENsaWVudFBvc2l0aW9uIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJpc1dpbmRvdyIsImdldERvY3VtZW50Iiwibm9kZVR5cGUiLCJfUkVfTlVNX05PX1BYIiwiUmVnRXhwIiwic291cmNlIiwiUkVfUE9TIiwiQ1VSUkVOVF9TVFlMRSIsIlJVTlRJTUVfU1RZTEUiLCJQWCIsImdldE9mZnNldERpcmVjdGlvbiIsImRpciIsIm9wdGlvbiIsInVzZUNzc1JpZ2h0IiwidXNlQ3NzQm90dG9tIiwib3Bwb3NpdGVPZmZzZXREaXJlY3Rpb24iLCJzZXRMZWZ0VG9wIiwicHJlc2V0SCIsInByZXNldFYiLCJob3Jpem9udGFsUHJvcGVydHkiLCJ2ZXJ0aWNhbFByb3BlcnR5Iiwib3Bwb3NpdGVIb3Jpem9udGFsUHJvcGVydHkiLCJvcHBvc2l0ZVZlcnRpY2FsUHJvcGVydHkiLCJvcmlnaW5hbFRyYW5zaXRpb24iLCJvcmlnaW5hbE9mZnNldCIsImdldFRyYW5zaXRpb25Qcm9wZXJ0eSIsIm9sZCIsInByZXNldCIsIm9mZiIsIl9kaXIiLCJfb2ZmIiwidXRpbHNfc2V0VHJhbnNmb3JtIiwib3JpZ2luYWxYWSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibWF0cml4IiwicmVwbGFjZSIsInNwbGl0IiwicGFyc2VGbG9hdCIsImdldFRyYW5zZm9ybVhZIiwicmVzdWx0WFkiLCJ4eSIsIm1hdGNoMmQiLCJtYXRjaCIsImpvaW4iLCJzZXRUcmFuc2Zvcm1YWSIsImVhY2giLCJmbiIsImlzQm9yZGVyQm94Rm4iLCJjcyIsImNvbXB1dGVkU3R5bGUiLCJ2YWwiLCJ0ZXN0IiwicnNMZWZ0IiwicGl4ZWxMZWZ0IiwiQk9YX01PREVMUyIsIkNPTlRFTlRfSU5ERVgiLCJQQURESU5HX0lOREVYIiwiQk9SREVSX0lOREVYIiwiZ2V0UEJNV2lkdGgiLCJ3aGljaCIsInByb3AiLCJqIiwiY3NzUHJvcCIsImRvbVV0aWxzIiwiZ2V0V0giLCJleCIsImV4dHJhIiwidmlld3BvcnRXaWR0aCIsInZpZXdwb3J0SGVpZ2h0IiwiZG9jV2lkdGgiLCJkb2NIZWlnaHQiLCJib3JkZXJCb3hWYWx1ZSIsImhlaWdodCIsImlzQm9yZGVyQm94IiwiY3NzQm94VmFsdWUiLCJOdW1iZXIiLCJib3JkZXJCb3hWYWx1ZU9ySXNCb3JkZXJCb3giLCJyZWZXaW4iLCJNYXRoIiwibWF4Iiwid2luIiwiZG9jdW1lbnRFbGVtZW50UHJvcCIsImNvbXBhdE1vZGUiLCJjc3NTaG93IiwiZ2V0V0hJZ25vcmVEaXNwbGF5IiwiX2tleTIiLCJvcHRpb25zIiwic3dhcCIsIm1peCIsInRvIiwiZnJvbSIsImZpcnN0IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJpbmNsdWRlTWFyZ2luIiwidXRpbHMiLCJnZXRXaW5kb3ciLCJpZ25vcmVTaGFrZSIsIm9yaU9mZnNldCIsIm9MZWZ0IiwidG9GaXhlZCIsIm9Ub3AiLCJ0TGVmdCIsInRUb3AiLCJ1c2VDc3NUcmFuc2Zvcm0iLCJzZXRPZmZzZXQiLCJjbG9uZSIsImdldFdpbmRvd1Njcm9sbExlZnQiLCJnZXRXaW5kb3dTY3JvbGxUb3AiLCJtZXJnZSIsIl9sZW4yIiwiX2tleTMiLCJlc191dGlscyIsImVzX2dldE9mZnNldFBhcmVudCIsImVsZW1lbnQiLCJwYXJlbnQiLCJwb3NpdGlvblN0eWxlIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImVzX2dldFZpc2libGVSZWN0Rm9yRWxlbWVudCIsInZpc2libGVSZWN0IiwicmlnaHQiLCJJbmZpbml0eSIsImJvdHRvbSIsIm5hdmlnYXRvciIsImNsaWVudFdpZHRoIiwibWluIiwiY2xpZW50SGVpZ2h0Iiwib3JpZ2luYWxQb3NpdGlvbiIsInNjcm9sbFgiLCJzY3JvbGxZIiwiZG9jdW1lbnRXaWR0aCIsInNjcm9sbFdpZHRoIiwiZG9jdW1lbnRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJpc0FuY2VzdG9yRml4ZWQiLCJtYXhWaXNpYmxlV2lkdGgiLCJtYXhWaXNpYmxlSGVpZ2h0IiwiZXNfYWRqdXN0Rm9yVmlld3BvcnQiLCJlbEZ1dHVyZVBvcyIsImVsUmVnaW9uIiwic2l6ZSIsInJlc2l6ZVdpZHRoIiwicmVzaXplSGVpZ2h0IiwiZXNfZ2V0UmVnaW9uIiwiaCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsImVzX2dldEFsaWduT2Zmc2V0IiwicmVnaW9uIiwiYWxpZ24iLCJlc19nZXRFbEZ1dHVyZVBvcyIsInJlZk5vZGVSZWdpb24iLCJ0YXJnZXRPZmZzZXQiLCJwMSIsInAyIiwiZGlmZiIsImlzRmFpbFgiLCJpc0ZhaWxZIiwiZmxpcCIsInJlZyIsInAiLCJtIiwiZmxpcE9mZnNldCIsImNvbnZlcnRPZmZzZXQiLCJzdHIiLCJvZmZzZXRMZW4iLCJwYXJzZUludCIsInN1YnN0cmluZyIsIm5vcm1hbGl6ZU9mZnNldCIsImFsaWduX2FsaWduIiwidGd0UmVnaW9uIiwiaXNUZ3RSZWdpb25WaXNpYmxlIiwibmV3T3ZlcmZsb3dDZmciLCJmYWlsIiwibmV3RWxSZWdpb24iLCJuZXdQb2ludHMiLCJsIiwiciIsIm5ld09mZnNldCIsIm5ld1RhcmdldE9mZnNldCIsImlzQ29tcGxldGVGYWlsWCIsIl9uZXdQb2ludHMiLCJ0IiwiYiIsIl9uZXdPZmZzZXQiLCJfbmV3VGFyZ2V0T2Zmc2V0IiwiaXNDb21wbGV0ZUZhaWxZIiwiaXNTdGlsbEZhaWxYIiwiaXNTdGlsbEZhaWxZIiwiYWxpZ25FbGVtZW50IiwicmVmTm9kZSIsInRhcmdldCIsImlzVGFyZ2V0Tm90T3V0T2ZWaXNpYmxlIiwidGFyZ2V0UmVnaW9uIiwiaXNPdXRPZlZpc2libGVSZWN0IiwiX19nZXRPZmZzZXRQYXJlbnQiLCJfX2dldFZpc2libGVSZWN0Rm9yRWxlbWVudCIsImFsaWduX2FsaWduRWxlbWVudCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYWxpZ25fYWxpZ25Qb2ludCIsInRndFBvaW50IiwicGFnZVgiLCJwYWdlWSIsImNsaWVudFgiLCJjbGllbnRZIiwicG9pbnRJblZpZXciLCJ1dGlsX2lzV2luZG93IiwiZ2V0RWxlbWVudCIsImdldFBvaW50IiwicG9pbnQiLCJBbGlnbl9BbGlnbiIsIl9Db21wb25lbnQiLCJBbGlnbiIsImZvcmNlQWxpZ24iLCJvbkFsaWduIiwicmVzdWx0IiwibW9uaXRvcldpbmRvd1Jlc2l6ZSIsInN0YXJ0TW9uaXRvcldpbmRvd1Jlc2l6ZSIsInByZXZQcm9wcyIsInJlQWxpZ24iLCJzb3VyY2VSZWN0IiwibGFzdEVsZW1lbnQiLCJjdXJyZW50RWxlbWVudCIsImxhc3RQb2ludCIsImN1cnJlbnRQb2ludCIsInByZXYiLCJuZXh0IiwiaXNTYW1lUG9pbnQiLCJwcmVSZWN0Iiwic3RvcE1vbml0b3JXaW5kb3dSZXNpemUiLCJyZXNpemVIYW5kbGVyIiwiYnVmZmVyTW9uaXRvciIsInRpbWVyIiwiY2xlYXIiLCJidWZmZXJGbiIsImJ1ZmZlciIsIm1vbml0b3JCdWZmZXJUaW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZSIsImNoaWxkcmVuUHJvcHMiLCJvbmx5IiwibmV3UHJvcHMiLCJyZWFjdCIsImlzUmVxdWlyZWQiLCJyY19hbGlnbl9lcyIsIkxhenlSZW5kZXJCb3hfTGF6eVJlbmRlckJveCIsIkxhenlSZW5kZXJCb3giLCJjb3VudCIsImVzX0xhenlSZW5kZXJCb3giLCJQb3B1cElubmVyX1BvcHVwSW5uZXIiLCJQb3B1cElubmVyIiwib25Nb3VzZURvd24iLCJvblRvdWNoU3RhcnQiLCJlc19Qb3B1cElubmVyIiwiUG9wdXBfUG9wdXAiLCJQb3B1cCIsIlBvcHVwX2luaXRpYWxpc2VQcm9wcyIsInN0cmV0Y2hDaGVja2VkIiwidGFyZ2V0V2lkdGgiLCJ0YXJnZXRIZWlnaHQiLCJzYXZlUG9wdXBSZWYiLCJzYXZlQWxpZ25SZWYiLCJyb290Tm9kZSIsImdldFBvcHVwRG9tTm9kZSIsInNldFN0cmV0Y2hTaXplIiwicG9wdXBJbnN0YW5jZSIsImdldE1hc2tUcmFuc2l0aW9uTmFtZSIsIm1hc2tUcmFuc2l0aW9uTmFtZSIsIm1hc2tBbmltYXRpb24iLCJnZXRDbGFzc05hbWUiLCJjdXJyZW50QWxpZ25DbGFzc05hbWUiLCJnZXRQb3B1cEVsZW1lbnQiLCJfc3RhdGUiLCJnZXRDbGFzc05hbWVGcm9tQWxpZ24iLCJkZXN0cm95UG9wdXBPbkhpZGUiLCJzdHJldGNoIiwic2l6ZVN0eWxlIiwibWluSGVpZ2h0IiwiYWxpZ25JbnN0YW5jZSIsInBvcHVwSW5uZXJQcm9wcyIsImdldFpJbmRleFN0eWxlIiwiZXhjbHVzaXZlIiwiZ2V0QWxpZ25UYXJnZXQiLCJ4VmlzaWJsZSIsImdldE1hc2tFbGVtZW50IiwibWFza0VsZW1lbnQiLCJtYXNrIiwibWFza1RyYW5zaXRpb24iLCJnZXRSb290RG9tTm9kZSIsInBvcHVwRG9tTm9kZSIsIl9zdGF0ZTIiLCIkZWxlIiwiZ2V0VGFyZ2V0RWxlbWVudCIsImVzX1BvcHVwIiwiQUxMX0hBTkRMRVJTIiwiSVNfUkVBQ1RfMTYiLCJyZWFjdF9kb20iLCJjb250ZXh0VHlwZXMiLCJyY1RyaWdnZXIiLCJvblBvcHVwTW91c2VEb3duIiwiZXNfVHJpZ2dlciIsIlRyaWdnZXIiLCJlc19pbml0aWFsaXNlUHJvcHMiLCJkZWZhdWx0UG9wdXBWaXNpYmxlIiwicHJldlBvcHVwVmlzaWJsZSIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxNb3VudCIsImZpcmVFdmVudHMiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiXyIsInByZXZTdGF0ZSIsInJlbmRlckNvbXBvbmVudCIsImFmdGVyUG9wdXBWaXNpYmxlQ2hhbmdlIiwiY3VycmVudERvY3VtZW50IiwiY2xpY2tPdXRzaWRlSGFuZGxlciIsImlzQ2xpY2tUb0hpZGUiLCJpc0NvbnRleHRNZW51VG9TaG93Iiwib25Eb2N1bWVudENsaWNrIiwidG91Y2hPdXRzaWRlSGFuZGxlciIsImNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIxIiwib25Db250ZXh0TWVudUNsb3NlIiwiY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIiLCJjbGVhck91dHNpZGVIYW5kbGVyIiwiY2xlYXJEZWxheVRpbWVyIiwibW91c2VEb3duVGltZW91dCIsIl9jb21wb25lbnQiLCJnZXRQb3B1cEFsaWduIiwicGxhY2VtZW50U3RyIiwiYmFzZUFsaWduIiwiZ2V0QWxpZ25Gcm9tUGxhY2VtZW50Iiwic2V0UG9wdXBWaXNpYmxlIiwiYWxpZ25Qb2ludCIsInNldFBvaW50IiwiZGVsYXlTZXRQb3B1cFZpc2libGUiLCJkZWxheVMiLCJkZWxheSIsImRlbGF5VGltZXIiLCJjcmVhdGVUd29DaGFpbnMiLCJjaGlsZFByb3MiLCJpc0NsaWNrVG9TaG93Iiwic2hvd0FjdGlvbiIsImhpZGVBY3Rpb24iLCJpc01vdXNlRW50ZXJUb1Nob3ciLCJpc01vdXNlTGVhdmVUb0hpZGUiLCJpc0ZvY3VzVG9TaG93IiwiaXNCbHVyVG9IaWRlIiwiZm9yY2VQb3B1cEFsaWduIiwiY2hpbGRDYWxsYmFjayIsImNsb3NlIiwiX3RoaXM0IiwiX3Byb3BzOCIsIm9uQ29udGV4dE1lbnUiLCJvbk1vdXNlTW92ZSIsIm9uRm9jdXMiLCJvbkJsdXIiLCJjaGlsZHJlbkNsYXNzTmFtZSIsIkNvbnRhaW5lclJlbmRlciIsImF1dG9Nb3VudCIsImdldENvbXBvbmVudCIsImdldENvbnRhaW5lciIsInBvcnRhbCIsIlBvcnRhbCIsImRpZFVwZGF0ZSIsImhhbmRsZVBvcnRhbFVwZGF0ZSIsImdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduIiwicG9wdXBTdHlsZSIsInBvcHVwVHJhbnNpdGlvbk5hbWUiLCJwb3B1cEFuaW1hdGlvbiIsImZvY3VzRGVsYXkiLCJibHVyRGVsYXkiLCJtYXNrQ2xvc2FibGUiLCJvblBvcHVwQWxpZ24iLCJjaGlsZENvbnRleHRUeXBlcyIsIl90aGlzNSIsIm9uUG9wdXBNb3VzZUVudGVyIiwib25Qb3B1cE1vdXNlTGVhdmUiLCJyZWxhdGVkVGFyZ2V0IiwiY29udGFpbnMiLCJmb2N1c1RpbWUiLCJEYXRlIiwibm93IiwicHJlQ2xpY2tUaW1lIiwicHJlVG91Y2hUaW1lIiwicHJlVGltZSIsImFicyIsIm5leHRWaXNpYmxlIiwiX2NvbnRleHQkcmNUcmlnZ2VyIiwiY29udGV4dCIsImhhc1BvcHVwTW91c2VEb3duIiwicm9vdCIsIl9wcm9wczkiLCJwbGFjZW1lbnQiLCJnZXRBbGlnblBvcHVwQ2xhc3NOYW1lIiwiX3Byb3BzMTAiLCJtb3VzZVByb3BzIiwic2F2ZVBvcHVwIiwicG9wdXBDb250YWluZXIiLCJhcHBlbmRDaGlsZCIsInN0b3JlU2hhcGUiLCJfcHJvcFR5cGVzMiIsInN1YnNjcmliZSIsImFkZEV2ZW50TGlzdGVuZXJXcmFwIiwiYWRkX2RvbV9ldmVudF9saXN0ZW5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiYWRkX2RvbV9ldmVudF9saXN0ZW5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJuIiwicmVhY3RfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJyZWFjdF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiZXZlbnRUeXBlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ0b0FycmF5IiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcmVhY3QiLCJfUHJvcFR5cGVzIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwic2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHMiLCJtaW5pU3RvcmUiLCJtYXBTdGF0ZVRvUHJvcHMiLCJzaG91bGRTdWJzY3JpYmUiLCJmaW5uYWxNYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWFwU3RhdGVUb1Byb3BzIiwiV3JhcHBlZENvbXBvbmVudCIsIkNvbm5lY3QiLCJoYW5kbGVDaGFuZ2UiLCJ1bnN1YnNjcmliZSIsIm5leHRTdGF0ZSIsIl9zaGFsbG93ZXF1YWwyIiwic3Vic2NyaWJlZCIsInRyeVN1YnNjcmliZSIsInRyeVVuc3Vic2NyaWJlIiwid3JhcHBlZEluc3RhbmNlIiwiaXNTdGF0ZWxlc3MiLCJfcmVhY3QyIiwiZGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWFjdExpZmVjeWNsZXNDb21wYXQiLCJwb2x5ZmlsbCIsIl9ob2lzdE5vblJlYWN0U3RhdGljczIiLCJtb2R1bGUiLCJvYmpBIiwib2JqQiIsImNvbXBhcmUiLCJjb21wYXJlQ29udGV4dCIsImtleXNBIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLCJpZHgiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJpbml0aWFsU3RhdGUiLCJsaXN0ZW5lcnMiLCJwYXJ0aWFsIiwibGlzdGVuZXIiLCJnbG9iYWwiLCJNYXBTaGltIiwiTWFwIiwiZ2V0SW5kZXgiLCJzb21lIiwiZW50cnkiLCJhbm9ueW1vdXMiLCJfX2VudHJpZXNfXyIsInByb3RvdHlwZUFjY2Vzc29ycyIsImdldCIsInNldCIsImRlbGV0ZSIsImhhcyIsImN0eCIsImxpc3QiLCJpc0Jyb3dzZXIiLCJnbG9iYWwkMSIsIkZ1bmN0aW9uIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0cmFpbGluZ1RpbWVvdXQiLCJ0cmFuc2l0aW9uS2V5cyIsIm11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQiLCJSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIiLCJjb25uZWN0ZWRfIiwibXV0YXRpb25FdmVudHNBZGRlZF8iLCJtdXRhdGlvbnNPYnNlcnZlcl8iLCJvYnNlcnZlcnNfIiwib25UcmFuc2l0aW9uRW5kXyIsInJlZnJlc2giLCJsZWFkaW5nQ2FsbCIsInRyYWlsaW5nQ2FsbCIsImxhc3RDYWxsVGltZSIsInJlc29sdmVQZW5kaW5nIiwicHJveHkiLCJ0aW1lb3V0Q2FsbGJhY2siLCJ0aW1lU3RhbXAiLCJ0aHJvdHRsZSIsImFkZE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJjb25uZWN0XyIsInJlbW92ZU9ic2VydmVyIiwib2JzZXJ2ZXJzIiwiZGlzY29ubmVjdF8iLCJ1cGRhdGVPYnNlcnZlcnNfIiwiYWN0aXZlT2JzZXJ2ZXJzIiwiZmlsdGVyIiwiZ2F0aGVyQWN0aXZlIiwiaGFzQWN0aXZlIiwiYnJvYWRjYXN0QWN0aXZlIiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHJvcGVydHlOYW1lIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZV8iLCJkZWZpbmVDb25maWd1cmFibGUiLCJnZXRXaW5kb3dPZiIsImVtcHR5UmVjdCIsImNyZWF0ZVJlY3RJbml0IiwidG9GbG9hdCIsImdldEJvcmRlcnNTaXplIiwic3R5bGVzIiwicG9zaXRpb25zIiwiZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCIsInBhZGRpbmdzIiwiZ2V0UGFkZGluZ3MiLCJob3JpelBhZCIsInZlcnRQYWQiLCJib3hTaXppbmciLCJyb3VuZCIsImlzRG9jdW1lbnRFbGVtZW50IiwidmVydFNjcm9sbGJhciIsImhvcml6U2Nyb2xsYmFyIiwiaXNTVkdHcmFwaGljc0VsZW1lbnQiLCJTVkdHcmFwaGljc0VsZW1lbnQiLCJTVkdFbGVtZW50IiwiZ2V0QkJveCIsImdldENvbnRlbnRSZWN0IiwiYmJveCIsImdldFNWR0NvbnRlbnRSZWN0IiwiUmVzaXplT2JzZXJ2YXRpb24iLCJicm9hZGNhc3RXaWR0aCIsImJyb2FkY2FzdEhlaWdodCIsImNvbnRlbnRSZWN0XyIsInJlY3QiLCJicm9hZGNhc3RSZWN0IiwiUmVzaXplT2JzZXJ2ZXJFbnRyeSIsInJlY3RJbml0IiwiY29udGVudFJlY3QiLCJDb25zdHIiLCJET01SZWN0UmVhZE9ubHkiLCJjcmVhdGVSZWFkT25seVJlY3QiLCJSZXNpemVPYnNlcnZlclNQSSIsImNvbnRyb2xsZXIiLCJjYWxsYmFja0N0eCIsImFjdGl2ZU9ic2VydmF0aW9uc18iLCJvYnNlcnZhdGlvbnNfIiwiY2FsbGJhY2tfIiwiY29udHJvbGxlcl8iLCJjYWxsYmFja0N0eF8iLCJFbGVtZW50Iiwib2JzZXJ2YXRpb25zIiwidW5vYnNlcnZlIiwiY2xlYXJBY3RpdmUiLCJ0aGlzJDEiLCJvYnNlcnZhdGlvbiIsIldlYWtNYXAiLCJSZXNpemVPYnNlcnZlciIsIndyYXBDYWxsYmFjayIsIm5lIiwiX0V2ZW50T2JqZWN0MiIsImF0dGFjaEV2ZW50IiwiZGV0YWNoRXZlbnQiLCJfRXZlbnRCYXNlT2JqZWN0MiIsIl9vYmplY3RBc3NpZ24yIiwiVFJVRSIsIkZBTFNFIiwiY29tbW9uUHJvcHMiLCJpc051bGxPclVuZGVmaW5lZCIsImV2ZW50Tm9ybWFsaXplcnMiLCJmaXgiLCJuYXRpdmVFdmVudCIsImNoYXJDb2RlIiwiZGVsdGFYIiwiZGVsdGFZIiwiZGVsdGEiLCJ3aGVlbERlbHRhIiwiYXhpcyIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJkZXRhaWwiLCJIT1JJWk9OVEFMX0FYSVMiLCJWRVJUSUNBTF9BWElTIiwiZXZlbnREb2MiLCJidXR0b24iLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJyZXRUcnVlIiwicmV0RmFsc2UiLCJEb21FdmVudE9iamVjdCIsImlzTmF0aXZlIiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsImdldFByZXZlbnREZWZhdWx0IiwicmV0dXJuVmFsdWUiLCJmaXhGbnMiLCJub3JtYWxpemVyIiwic3JjRWxlbWVudCIsImZpeEZuIiwiRXZlbnRCYXNlT2JqZWN0UHJvdG8iLCJyZXR1cm5GYWxzZSIsInJldHVyblRydWUiLCJFdmVudEJhc2VPYmplY3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNFdmVudE9iamVjdCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJoYWx0IiwiaW1tZWRpYXRlIiwiYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJiYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJiYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiYmFiZWxfcnVudGltZV9oZWxwZXJzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImJhYmVsX3J1bnRpbWVfaGVscGVyc19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsImJhYmVsX3J1bnRpbWVfaGVscGVyc19pbmhlcml0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiYmFiZWxfcnVudGltZV9oZWxwZXJzX2luaGVyaXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJyZWFjdF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsInJlYWN0X2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fX2RlZmF1bHQiLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19fZGVmYXVsdCIsInJlbW92ZUNvbnRhaW5lciIsImNvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlYWR5IiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJhdXRvRGVzdHJveSIsImNyZWF0ZUNvbnRhaW5lciIsIl9jb250YWluZXIiLCJmb3JjZVVwZGF0ZSIsImNyZWF0ZVBvcnRhbCIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJwcmV2aW91c1NpYmxpbmciLCJuZXh0U2libGluZyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJvbGRWYWx1ZSIsImYiLCJub2RlVmFsdWUiLCJnIiwiayIsInBvcCIsImNoaWxkTm9kZXMiLCJxIiwieiIsInUiLCJuYW1lc3BhY2VVUkkiLCJtb19pZCIsIl9wZXJpb2QiLCJhdHRyaWJ1dGVGaWx0ZXIiLCJhdHRyaWJ1dGVPbGRWYWx1ZSIsImNoYXJhY3RlckRhdGFPbGRWYWx1ZSIsInMiLCJvIiwidGFrZVJlY29yZHMiLCJjc3NUZXh0IiwidG9kYXkiLCJiYWNrVG9Ub2RheSIsIm9rIiwibW9udGgiLCJ5ZWFyIiwidGltZVNlbGVjdCIsImRhdGVTZWxlY3QiLCJ3ZWVrU2VsZWN0IiwibW9udGhTZWxlY3QiLCJ5ZWFyU2VsZWN0IiwiZGVjYWRlU2VsZWN0IiwieWVhckZvcm1hdCIsImRhdGVGb3JtYXQiLCJkYXlGb3JtYXQiLCJkYXRlVGltZUZvcm1hdCIsIm1vbnRoQmVmb3JlWWVhciIsInByZXZpb3VzTW9udGgiLCJuZXh0TW9udGgiLCJwcmV2aW91c1llYXIiLCJuZXh0WWVhciIsInByZXZpb3VzRGVjYWRlIiwibmV4dERlY2FkZSIsInByZXZpb3VzQ2VudHVyeSIsIm5leHRDZW50dXJ5Iiwid2FybiIsImNvbnNvbGUiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfZGVmaW5lUHJvcGVydGllcyIsIl9nZXRQcm90b3R5cGVPZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfc2V0UHJvdG90eXBlT2YiLCJfZGVmaW5lUHJvcGVydHkiLCJORVdUQUIiLCJNSURETEVDTElDSyIsIk91dGJvdW5kTGlua19PdXRib3VuZExpbmsiLCJPdXRib3VuZExpbmsiLCJfZ2V0UHJvdG90eXBlT2YyIiwiZXZlbnRMYWJlbCIsInRyYWNrZXJOYW1lcyIsImV2ZW50TWV0YSIsImxhYmVsIiwic2FtZVRhcmdldCIsIm5vcm1hbENsaWNrIiwic2hpZnRLZXkiLCJ0cmFja0xpbmsiLCJsb2NhdGlvbiIsImhyZWYiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiX29iamVjdFNwcmVhZCIsImhhbmRsZUNsaWNrIiwicmVsIiwidHJpbSIsInNtYWxsV29yZHMiLCJyZWRhY3RlZCIsImZvcm1hdCIsInRpdGxlQ2FzZSIsIm1pZ2h0QmVFbWFpbCIsInNlYXJjaCIsInN1YnN0ciIsInRvVGl0bGVDYXNlIiwibG9hZEdBIiwiZ2FBZGRyZXNzIiwiZGVidWciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFzeW5jIiwic3JjIiwiaW5zZXJ0QmVmb3JlIiwibG9nIiwiZ2FDYWxscyIsInRlc3RNb2RlQVBJIiwiY2FsbHMiLCJnYSIsInJlc2V0Q2FsbHMiLCJjb3JlX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiY29yZV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiY29yZV9vd25LZXlzIiwiY29yZV9kZWZpbmVQcm9wZXJ0eSIsImNvcmVfdHlwZW9mIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyMiIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJ0b1N0cmluZyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJfaXNOb3RCcm93c2VyIiwiX2RlYnVnIiwiX3RpdGxlQ2FzZSIsIl90ZXN0TW9kZSIsIl9hbHdheXNTZW5kVG9EZWZhdWx0VHJhY2tlciIsImNvcmVfaW50ZXJuYWxHYSIsIl93aW5kb3ciLCJfZm9ybWF0IiwiX2dhQ29tbWFuZCIsImNvbW1hbmQiLCJfaW5pdGlhbGl6ZSIsImdhVHJhY2tpbmdJRCIsInVzZUV4aXN0aW5nR2EiLCJnYU9wdGlvbnMiLCJpbml0aWFsaXplIiwiY29uZmlnc09yVHJhY2tpbmdJZCIsInRlc3RNb2RlIiwic3RhbmRhcmRJbXBsZW1lbnRhdGlvbiIsImFsd2F5c1NlbmRUb0RlZmF1bHRUcmFja2VyIiwiY29uZmlnIiwidHJhY2tpbmdJZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaWVsZHNPYmplY3QiLCJzZW5kIiwiZmllbGRPYmplY3QiLCJwYWdldmlldyIsInJhd1BhdGgiLCJwYXRoIiwiZXh0cmFGaWVsZHMiLCJjb3JlX29iamVjdFNwcmVhZCIsImhpdFR5cGUiLCJwYWdlIiwiZXh0cmFMb2ciLCJtb2RhbHZpZXciLCJyYXdNb2RhbE5hbWUiLCJtb2RhbE5hbWUiLCJyZW1vdmVMZWFkaW5nU2xhc2giLCJ0aW1pbmciLCJjYXRlZ29yeSIsInZhcmlhYmxlIiwidGltaW5nQ2F0ZWdvcnkiLCJ0aW1pbmdWYXIiLCJ0aW1pbmdWYWx1ZSIsInRpbWluZ0xhYmVsIiwiY29yZV9ldmVudCIsIm5vbkludGVyYWN0aW9uIiwidHJhbnNwb3J0IiwiZXZlbnRDYXRlZ29yeSIsImV2ZW50QWN0aW9uIiwiZXZlbnRWYWx1ZSIsImV4Y2VwdGlvbiIsIl9yZWYzIiwiZGVzY3JpcHRpb24iLCJmYXRhbCIsImV4RGVzY3JpcHRpb24iLCJleEZhdGFsIiwiY29yZV9wbHVnaW4iLCJyZXF1aXJlIiwicmF3TmFtZSIsInRyYWNrZXJOYW1lIiwicmVxdWlyZVN0cmluZyIsImV4ZWN1dGUiLCJwbHVnaW5OYW1lIiwicGF5bG9hZCIsImFjdGlvblR5cGUiLCJvdXRib3VuZExpbmsiLCJoaXRDYWxsYmFjayIsInNhZmV0eUNhbGxiYWNrQ2FsbGVkIiwiY29yZV90ZXN0TW9kZUFQSSIsImNvcmUiLCJwbHVnaW4iLCJlc21fb3duS2V5cyIsImVzbV9kZWZpbmVQcm9wZXJ0eSIsIm9yaWdUcmFja0xpbmsiLCJlc21fT3V0Ym91bmRMaW5rIiwiY29yZV9uYW1lc3BhY2VPYmplY3QiLCJPcHRpb25fT3B0aW9uIiwiT3B0aW9uIiwiaXNTZWxlY3RPcHRpb24iLCJlc19PcHRpb24iLCJ0b1RpdGxlIiwiZ2V0VmFsdWVQcm9wVmFsdWUiLCJpc1NlbGVjdE9wdEdyb3VwIiwiRXJyb3IiLCJnZXRQcm9wVmFsdWUiLCJpc0NvbWJvYm94IiwiY29tYm9ib3giLCJpc011bHRpcGxlT3JUYWdzIiwidGFncyIsImlzTXVsdGlwbGVPclRhZ3NPckNvbWJvYm94IiwiaXNTaW5nbGVNb2RlIiwidXRpbF90b0FycmF5IiwiZ2V0TWFwS2V5IiwicHJldmVudERlZmF1bHRFdmVudCIsImZpbmRJbmRleEluVmFsdWVCeVNpbmdsZVZhbHVlIiwic2luZ2xlVmFsdWUiLCJVTlNFTEVDVEFCTEVfU1RZTEUiLCJ1c2VyU2VsZWN0IiwiV2Via2l0VXNlclNlbGVjdCIsIlVOU0VMRUNUQUJMRV9BVFRSSUJVVEUiLCJ1bnNlbGVjdGFibGUiLCJkZWZhdWx0RmlsdGVyRm4iLCJpbnB1dCIsIm9wdGlvbkZpbHRlclByb3AiLCJEcm9wZG93bk1lbnVfRHJvcGRvd25NZW51IiwiRHJvcGRvd25NZW51Iiwic2Nyb2xsQWN0aXZlSXRlbVRvVmlldyIsIml0ZW1Db21wb25lbnQiLCJmaXJzdEFjdGl2ZUl0ZW0iLCJmaXJzdEFjdGl2ZVZhbHVlIiwic2Nyb2xsSW50b1ZpZXdPcHRzIiwiYWxpZ25XaXRoVG9wIiwicmFmSW5zdGFuY2UiLCJyYWZfZGVmYXVsdCIsImxpYl9kZWZhdWx0IiwibWVudVJlZiIsImxhc3RJbnB1dFZhbHVlIiwiaW5wdXRWYWx1ZSIsInNhdmVNZW51UmVmIiwibGFzdFZpc2libGUiLCJjYW5jZWwiLCJyZW5kZXJNZW51IiwibWVudUl0ZW1zIiwibWVudUl0ZW1TZWxlY3RlZEljb24iLCJkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24iLCJvbk1lbnVTZWxlY3QiLCJiYWNrZmlsbFZhbHVlIiwibWVudVByb3BzIiwib25NZW51RGVzZWxlY3QiLCJnZXRTZWxlY3RLZXlzIiwiaXRlbVZhbHVlIiwiaXRlbUtleSIsImFjdGl2ZUtleVByb3BzIiwiY2xvbmVkTWVudUl0ZW1zIiwiZm91bmRGaXJzdCIsImxhc3RWYWx1ZSIsImRyb3Bkb3duTWVudVN0eWxlIiwib25Qb3B1cEZvY3VzIiwib25TY3JvbGwiLCJvblBvcHVwU2Nyb2xsIiwib25NZW51RGVTZWxlY3QiLCJlc19Ecm9wZG93bk1lbnUiLCJyY190cmlnZ2VyX2VzIiwiQlVJTFRfSU5fUExBQ0VNRU5UUyIsIlNlbGVjdFRyaWdnZXJfU2VsZWN0VHJpZ2dlciIsIlNlbGVjdFRyaWdnZXIiLCJTZWxlY3RUcmlnZ2VyX2luaXRpYWxpc2VQcm9wcyIsInNhdmVEcm9wZG93bk1lbnVSZWYiLCJzYXZlVHJpZ2dlclJlZiIsImRyb3Bkb3duV2lkdGgiLCJzZXREcm9wZG93bldpZHRoIiwiX3BvcHVwQ2xhc3NOYW1lIiwiZHJvcGRvd25BbGlnbiIsInNob3dTZWFyY2giLCJkcm9wZG93bkNsYXNzTmFtZSIsImRyb3Bkb3duU3R5bGUiLCJkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGgiLCJkcm9wZG93blByZWZpeENscyIsImdldERyb3Bkb3duUHJlZml4Q2xzIiwicG9wdXBFbGVtZW50IiwiZ2V0RHJvcGRvd25FbGVtZW50Iiwid2lkdGhQcm9wIiwiZ2V0RHJvcGRvd25UcmFuc2l0aW9uTmFtZSIsIm9uRHJvcGRvd25WaXNpYmxlQ2hhbmdlIiwiZmlsdGVyT3B0aW9uIiwiZ2V0SW5uZXJNZW51IiwiZHJvcGRvd25NZW51UmVmIiwiZ2V0UG9wdXBET01Ob2RlIiwidHJpZ2dlclJlZiIsImVzX1NlbGVjdFRyaWdnZXIiLCJ2YWx1ZVR5cGUiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJiYXNpY1R5cGUiLCJsYWJlbEluVmFsdWVTaGFwZSIsImxhYmVsSW5WYWx1ZSIsIlNlbGVjdFByb3BUeXBlcyIsImFsbG93Q2xlYXIiLCJzaG93QXJyb3ciLCJvcHRpb25MYWJlbFByb3AiLCJjaG9pY2VUcmFuc2l0aW9uTmFtZSIsIm9uQ2hhbmdlIiwib25TZWFyY2giLCJvbklucHV0S2V5RG93biIsInBsYWNlaG9sZGVyIiwiZGVmYXVsdFZhbHVlIiwibWF4VGFnVGV4dExlbmd0aCIsIm1heFRhZ0NvdW50IiwibWF4VGFnUGxhY2Vob2xkZXIiLCJ0b2tlblNlcGFyYXRvcnMiLCJnZXRJbnB1dEVsZW1lbnQiLCJjbGVhckljb24iLCJpbnB1dEljb24iLCJyZW1vdmVJY29uIiwiU2VsZWN0X1NlbGVjdCIsIlNlbGVjdCIsIlNlbGVjdF9pbml0aWFsaXNlUHJvcHMiLCJvcHRpb25zSW5mbyIsImdldE9wdGlvbnNJbmZvRnJvbVByb3BzIiwiZ2V0VmFsdWVGcm9tUHJvcHMiLCJnZXRJbnB1dFZhbHVlRm9yQ29tYm9ib3giLCJkZWZhdWx0T3BlbiIsInNraXBCdWlsZE9wdGlvbnNJbmZvIiwic2F2ZUlucHV0UmVmIiwic2F2ZUlucHV0TWlycm9yUmVmIiwic2F2ZVRvcEN0cmxSZWYiLCJzYXZlU2VsZWN0VHJpZ2dlclJlZiIsInNhdmVSb290UmVmIiwic2F2ZVNlbGVjdGlvblJlZiIsImF1dG9Gb2N1cyIsImZvY3VzIiwiaW5wdXROb2RlIiwiZ2V0SW5wdXRET01Ob2RlIiwibWlycm9yTm9kZSIsImdldElucHV0TWlycm9yRE9NTm9kZSIsImNsZWFyRm9jdXNUaW1lIiwiY2xlYXJCbHVyVGltZSIsImRyb3Bkb3duQ29udGFpbmVyIiwic2VsZWN0aW9uUmVmIiwiYmx1ciIsInJlbmRlckNsZWFyIiwib25DbGVhclNlbGVjdGlvbiIsIl9yb290Q2xzIiwiY3RybE5vZGUiLCJyZW5kZXJUb3BDb250cm9sTm9kZSIsIl9vcHRpb25zIiwicmVuZGVyRmlsdGVyT3B0aW9ucyIsInJlYWxPcGVuIiwiZ2V0UmVhbE9wZW5TdGF0ZSIsImRhdGFPckFyaWFBdHRyaWJ1dGVQcm9wcyIsImV4dHJhU2VsZWN0aW9uUHJvcHMiLCJyb290Q2xzIiwiX2ZvY3VzZWQiLCJvbk91dGVyQmx1ciIsIm9uT3V0ZXJGb2N1cyIsImFyaWEtYXV0b2NvbXBsZXRlIiwib25BcnJvd0NsaWNrIiwibm90Rm91bmRDb250ZW50IiwiYmFja2ZpbGwiLCJhdXRvQ2xlYXJTZWFyY2hWYWx1ZSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm5ld1N0YXRlIiwiZ2V0T3B0aW9uc0Zyb21DaGlsZHJlbiIsInVzZURlZmF1bHRWYWx1ZSIsImdldExhYmVsRnJvbU9wdGlvbiIsInByZVN0YXRlIiwib2xkT3B0aW9uc0luZm8iLCJvbklucHV0Q2hhbmdlIiwic2VwYXJhdG9ycyIsImxhc3RJbmRleE9mIiwiaW5jbHVkZXNTZXBhcmF0b3JzIiwibmV4dFZhbHVlIiwiZ2V0VmFsdWVCeUlucHV0IiwiZmlyZUNoYW5nZSIsInNldE9wZW5TdGF0ZSIsInNldElucHV0VmFsdWUiLCJ0aW1lb3V0Rm9jdXMiLCJ1cGRhdGVGb2N1c0NsYXNzTmFtZSIsIm9wZW5JZkhhc0NoaWxkcmVuIiwic2VsZWN0VHJpZ2dlclJlZiIsImhhbmRsZUJhY2tmaWxsIiwicmVtb3ZlU2VsZWN0ZWQiLCJzZWxlY3RlZFZhbHVlIiwiZmlyZVNlbGVjdCIsIm9uUGxhY2Vob2xkZXJDbGljayIsIm1heWJlRm9jdXMiLCJibHVyVGltZXIiLCJmaXJzdE9wdGlvbiIsImZpbmRGaXJzdE1lbnVJdGVtIiwiZ2V0VkxGb3JPbkNoYW5nZSIsIm9uQ2hvaWNlQW5pbWF0aW9uTGVhdmUiLCJnZXRPcHRpb25JbmZvQnlTaW5nbGVWYWx1ZSIsImRlZmF1bHRMYWJlbCIsImdldExhYmVsRnJvbVByb3BzVmFsdWUiLCJnZXRPcHRpb25CeVNpbmdsZVZhbHVlIiwiZ2V0T3B0aW9uc0J5U2luZ2xlVmFsdWUiLCJ2YWx1ZXMiLCJnZXRWYWx1ZUJ5TGFiZWwiLCJnZXRWTEJ5U2luZ2xlVmFsdWUiLCJnZXRMYWJlbEJ5U2luZ2xlVmFsdWUiLCJ2bHNfIiwidmxzIiwidmwiLCJnZXREcm9wZG93bkNvbnRhaW5lciIsImdldFBsYWNlaG9sZGVyRWxlbWVudCIsImhpZGRlbiIsIl9jbGFzc25hbWVzIiwiaW5wdXRFbGVtZW50IiwiYXV0b0NvbXBsZXRlIiwiaW5wdXRDbHMiLCJmbnMiLCJjaGFpbmluZyIsInRvcEN0cmxSZWYiLCJxdWVyeVNlbGVjdG9yIiwiaW5wdXRSZWYiLCJpbnB1dE1pcnJvclJlZiIsImdldFBvcHVwTWVudUNvbXBvbmVudCIsIm5lZWRGb2N1cyIsImZpcmVTZWFyY2giLCJoYXNOZXdWYWx1ZSIsInRva2VuIiwic3BsaXRCeVNlcGFyYXRvcnMiLCJkZWZhdWx0RmlsdGVyIiwiZmlsdGVyRm4iLCJmb2N1c1RpbWVyIiwicm9vdFJlZiIsImNvbXBvbmVudF9jbGFzc2VzX2RlZmF1bHQiLCJhZGQiLCJhY3RpdmVFbGVtZW50IiwiaXNDaGlsZERpc2FibGVkIiwiY2hpbGRyZW5LZXlzIiwicmVuZGVyRmlsdGVyT3B0aW9uc0Zyb21DaGlsZHJlbiIsIlN0cmluZyIsIm1lbnVJdGVtIiwidW5zaGlmdCIsInNlbCIsImlubmVySXRlbXMiLCJ3YXJuaW5nX2RlZmF1bHQiLCJjaGlsZFZhbHVlIiwiaXNNdWx0aXBsZSIsInZhbGlkYXRlT3B0aW9uVmFsdWUiLCJpbm5lck5vZGUiLCJzaG93U2VsZWN0ZWRWYWx1ZSIsIm9wYWNpdHkiLCJfZ2V0T3B0aW9uSW5mb0J5U2luZ2wzIiwic2VsZWN0ZWRWYWx1ZU5vZGVzIiwibGltaXRlZENvdW50VmFsdWUiLCJtYXhUYWdQbGFjZWhvbGRlckVsIiwib21pdHRlZFZhbHVlcyIsImNvbnRlbnQiLCJjaG9pY2VDbGFzc05hbWUiLCJvbkxlYXZlIiwicmVhY3RfbGlmZWN5Y2xlc19jb21wYXRfZXMiLCJlc19TZWxlY3QiLCJPcHRHcm91cF9PcHRHcm91cCIsIk9wdEdyb3VwIiwiZXNfT3B0R3JvdXAiLCJyY19zZWxlY3RfZXMiLCJMb2NhbGVSZWNlaXZlcl9Mb2NhbGVSZWNlaXZlciIsIkxvY2FsZVJlY2VpdmVyIiwiY3JlYXRlQ2xhc3NfZGVmYXVsdCIsImRlZmF1bHRMb2NhbGUiLCJhbnRMb2NhbGUiLCJsb2NhbGVGcm9tQ29udGV4dCIsImxvY2FsZUNvZGUiLCJsb2NhbGUiLCJleGlzdCIsImdldExvY2FsZSIsImdldExvY2FsZUNvZGUiLCJsb2NhbGVfcHJvdmlkZXJfTG9jYWxlUmVjZWl2ZXIiLCJwcm9wX3R5cGVzIiwidGltZV9waWNrZXJfbG9jYWxlX2VuX1VTIiwibG9jYWxlX2VuX1VTX2xvY2FsZSIsImxhbmciLCJyYW5nZVBsYWNlaG9sZGVyIiwibG9jYWxlX2VuX1VTIiwidGltZVBpY2tlckxvY2FsZSIsImxvY2FsZV9wcm92aWRlcl9kZWZhdWx0IiwiUGFnaW5hdGlvbiIsIml0ZW1zX3Blcl9wYWdlIiwianVtcF90byIsImp1bXBfdG9fY29uZmlybSIsInByZXZfcGFnZSIsIm5leHRfcGFnZSIsInByZXZfNSIsIm5leHRfNSIsInByZXZfMyIsIm5leHRfMyIsIkRhdGVQaWNrZXIiLCJUaW1lUGlja2VyIiwiQ2FsZW5kYXIiLCJUYWJsZSIsImZpbHRlclRpdGxlIiwiZmlsdGVyQ29uZmlybSIsImZpbHRlclJlc2V0IiwiZW1wdHlUZXh0Iiwic2VsZWN0QWxsIiwic2VsZWN0SW52ZXJ0IiwiTW9kYWwiLCJva1RleHQiLCJjYW5jZWxUZXh0IiwianVzdE9rVGV4dCIsIlBvcGNvbmZpcm0iLCJUcmFuc2ZlciIsInRpdGxlcyIsInNlYXJjaFBsYWNlaG9sZGVyIiwiaXRlbVVuaXQiLCJpdGVtc1VuaXQiLCJVcGxvYWQiLCJ1cGxvYWRpbmciLCJyZW1vdmVGaWxlIiwidXBsb2FkRXJyb3IiLCJwcmV2aWV3RmlsZSIsIl9fcmVzdCIsInNlbGVjdF9TZWxlY3RQcm9wVHlwZXMiLCJzZWxlY3RfU2VsZWN0Iiwic2F2ZVNlbGVjdCIsInJjU2VsZWN0IiwicmVuZGVyU2VsZWN0IiwiX2EiLCJfYSRjbGFzc05hbWUiLCJyZXN0UHJvcHMiLCJjbHMiLCJkZWZpbmVQcm9wZXJ0eV9kZWZhdWx0IiwibW9kZUNvbmZpZyIsImdldE5vdEZvdW5kQ29udGVudCIsIlNFQ1JFVF9DT01CT0JPWF9NT0RFX0RPX05PVF9VU0UiLCJhbmltYXRlIiwic2hvdyIsImRvbmUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCIsImNzc19hbmltYXRpb25fZXMiLCJlbmQiLCJfdXRpbF9vcGVuQW5pbWF0aW9uIiwiZW50ZXIiLCJsZWF2ZSIsInN1Yk1lbnUiLCJzYXZlU3ViTWVudSIsImFudGRNZW51VGhlbWUiLCJtZW51X1N1Yk1lbnUiLCJwbGFjZW1lbnRzX2F1dG9BZGp1c3RPdmVyZmxvdyIsInBsYWNlbWVudHMiLCJ0b3BSaWdodCIsImJvdHRvbVJpZ2h0IiwicmlnaHRCb3R0b20iLCJsZWZ0Qm90dG9tIiwiQ29udGVudF9Db250ZW50IiwiQ29udGVudCIsIm92ZXJsYXkiLCJlc19Db250ZW50IiwiVG9vbHRpcF9Ub29sdGlwIiwiVG9vbHRpcCIsImFycm93Q29udGVudCIsInNhdmVUcmlnZ2VyIiwib3ZlcmxheUNsYXNzTmFtZSIsIm92ZXJsYXlTdHlsZSIsIm9uVmlzaWJsZUNoYW5nZSIsImFmdGVyVmlzaWJsZUNoYW5nZSIsImRlc3Ryb3lUb29sdGlwT25IaWRlIiwiZGVmYXVsdFZpc2libGUiLCJnZXRUb29sdGlwQ29udGFpbmVyIiwicmNfdG9vbHRpcF9lcyIsImF1dG9BZGp1c3RPdmVyZmxvd0VuYWJsZWQiLCJhdXRvQWRqdXN0T3ZlcmZsb3dEaXNhYmxlZCIsInBsYWNlbWVudHNfdGFyZ2V0T2Zmc2V0IiwiZ2V0T3ZlcmZsb3dPcHRpb25zIiwidG9vbHRpcF9Ub29sdGlwIiwiaXNOb1RpdGxlIiwiZG9tTm9kZSIsImdldFBsYWNlbWVudHMiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJzYXZlVG9vbHRpcCIsInRvb2x0aXAiLCJhcnJvd1BvaW50QXRDZW50ZXIiLCJfY29uZmlnJGFycm93V2lkdGgiLCJhcnJvd1dpZHRoIiwiX2NvbmZpZyRob3Jpem9udGFsQXJyIiwiaG9yaXpvbnRhbEFycm93U2hpZnQiLCJfY29uZmlnJHZlcnRpY2FsQXJyb3ciLCJ2ZXJ0aWNhbEFycm93U2hpZnQiLCJfY29uZmlnJGF1dG9BZGp1c3RPdmUiLCJwbGFjZW1lbnRNYXAiLCJwbGFjZW1lbnRzX2dldFBsYWNlbWVudHMiLCJfX0FOVF9CVVRUT04iLCJpc0hvdmVyVHJpZ2dlciIsIl9zcGxpdE9iamVjdCIsInBpY2tlZCIsIm9taXR0ZWQiLCJ0b29sdGlwX3NwbGl0T2JqZWN0Iiwic3BhblN0eWxlIiwiY3Vyc29yIiwiYnV0dG9uU3R5bGUiLCJwb2ludGVyRXZlbnRzIiwib3BlbkNsYXNzTmFtZSIsImdldERpc2FibGVkQ29tcGF0aWJsZUNoaWxkcmVuIiwiY2hpbGRDbHMiLCJzYXZlTWVudUl0ZW0iLCJpbmxpbmVDb2xsYXBzZWQiLCJtZW51X01lbnVJdGVtIiwibWVudV9NZW51IiwiaW5saW5lT3BlbktleXMiLCJoYW5kbGVPcGVuQ2hhbmdlIiwic2V0T3BlbktleXMiLCJ3YXJuaW5nIiwiZ2V0SW5saW5lQ29sbGFwc2VkIiwibmV4dENvbnRleHQiLCJzd2l0Y2hNb2RlRnJvbUlubGluZSIsInNpZGVyQ29sbGFwc2VkIiwibWVudU5vZGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWVudU1vZGUiLCJtZW51T3BlbkFuaW1hdGlvbiIsImdldFJlYWxNZW51TW9kZSIsImdldE1lbnVPcGVuQW5pbWF0aW9uIiwibWVudUNsYXNzTmFtZSIsImNvbGxhcHNlZFdpZHRoIiwiSXRlbSIsIkl0ZW1Hcm91cCIsImdlbmVyYXRvciIsIkJhc2ljQ29tcG9uZW50IiwiQWRhcHRlciIsImxheW91dF9CYXNpYyIsIl9SZWFjdCRDb21wb25lbnQyIiwiQmFzaWMiLCJvdGhlcnMiLCJkaXZDbHMiLCJsYXlvdXRfQmFzaWNMYXlvdXQiLCJfUmVhY3QkQ29tcG9uZW50MyIsIkJhc2ljTGF5b3V0Iiwic2lkZXJzIiwic2lkZXJIb29rIiwiYWRkU2lkZXIiLCJ0b0NvbnN1bWFibGVBcnJheV9kZWZhdWx0IiwicmVtb3ZlU2lkZXIiLCJjdXJyZW50SWQiLCJoYXNTaWRlciIsIkxheW91dCIsIkhlYWRlciIsIkZvb3RlciIsImxheW91dCIsIl91dGlsX2lzTnVtZXJpYyIsImlzTmFOIiwiaXNGaW5pdGUiLCJTaWRlcl9yZXN0IiwibWF0Y2hNZWRpYSIsIm1lZGlhUXVlcnkiLCJtZWRpYSIsIm1hdGNoZXMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiZGltZW5zaW9uTWFwIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsInh4bCIsImdlbmVyYXRlSWQiLCJTaWRlcl9TaWRlciIsIlNpZGVyIiwicmVzcG9uc2l2ZUhhbmRsZXIiLCJtcWwiLCJiZWxvdyIsIm9uQnJlYWtwb2ludCIsImNvbGxhcHNlZCIsInNldENvbGxhcHNlZCIsIm9uQ29sbGFwc2UiLCJ0b2dnbGUiLCJiZWxvd1Nob3dDaGFuZ2UiLCJiZWxvd1Nob3ciLCJ1bmlxdWVJZCIsImJyZWFrcG9pbnQiLCJkZWZhdWx0Q29sbGFwc2VkIiwiY29sbGFwc2libGUiLCJyZXZlcnNlQXJyb3ciLCJkaXZQcm9wcyIsInJhd1dpZHRoIiwic2lkZXJXaWR0aCIsInplcm9XaWR0aFRyaWdnZXIiLCJkZWZhdWx0VHJpZ2dlciIsImV4cGFuZGVkIiwidHJpZ2dlckRvbSIsImRpdlN0eWxlIiwiZmxleCIsIm1heFdpZHRoIiwic2lkZXJDbHMiLCJfX0FOVF9MQVlPVVRfU0lERVIiLCJsYXlvdXRfU2lkZXIiXSwibWFwcGluZ3MiOiJzUUFFTyxTQUFBQSxLQUVBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ1AsSUFBQUMsRUFBQUYsR0FBQSxHQUNBLE9BQUFELEVBQUFJLEtBQUFELEVBQUEsUUFBQUQsRUFHTyxTQUFBRyxFQUFBQyxHQUNQLE9BQUFBLEVBQUEsU0FHTyxTQUFBQyxFQUFBQyxFQUFBQyxHQUNQLElBQUFQLEdBQUEsRUFDRVEsRUFBQUMsRUFBS0MsU0FBQUMsUUFBQUwsRUFBQSxTQUFBTSxHQUNQWixJQUNBWSxLQUFBQyxNQUFBRCxFQUFBQyxLQUFBQyxnQkFDTU4sRUFBQUMsRUFBS0MsU0FBQUMsUUFBQUMsRUFBQUcsTUFBQVQsU0FBQSxTQUFBVSxHQUVYVCxFQUFBUyxJQURBaEIsS0FJQU8sRUFBQUssRUFBQVosS0F5Qk8sSUFBQWlCLEdBQUEsd3BCQUdQLCtGQUVPQyxFQUFBLFNBQUFDLEdBQ1AsT0FBQUEsRUFBQUMsd0JBQUFDLDBDQ3REQUMsR0FDQUMsUUFBQSxFQUNBQyxRQUFBLEdBMEJlQyxHQXRCZkMsU0FDQUMsUUFBQSxXQUNBQyxTQUFBTixFQUNBTyxRQUFBLE9BRUFDLFlBQ0FILFFBQUEsV0FDQUMsU0FBQU4sRUFDQU8sUUFBQSxNQUVBRSxTQUNBSixRQUFBLFdBQ0FDLFNBQUFOLEVBQ0FPLFNBQUEsTUFFQUcsVUFDQUwsUUFBQSxXQUNBQyxTQUFBTixFQUNBTyxRQUFBLGdCQ1JBSSxFQUFBLEVBRUFDLEdBQ0FDLFdBQUEsYUFDQUMsU0FBQSxXQUNBQyxnQkFBQSxXQUNBQyxpQkFBQSxXQUdJQyxFQUF3QixTQUFBQyxFQUFBcEMsRUFBQXFDLEdBQzVCLElBQUFDLEVBRUFDLEVBQWV4QyxFQUE0QkMsR0FDM0N3QyxFQUFBSixF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YWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5RnJvbUNoaWxkcmVuSW5kZXgoY2hpbGQsIG1lbnVFdmVudEtleSwgaW5kZXgpIHtcbiAgdmFyIHByZWZpeCA9IG1lbnVFdmVudEtleSB8fCAnJztcbiAgcmV0dXJuIGNoaWxkLmtleSB8fCBwcmVmaXggKyAnaXRlbV8nICsgaW5kZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW51SWRGcm9tU3ViTWVudUV2ZW50S2V5KGV2ZW50S2V5KSB7XG4gIHJldHVybiBldmVudEtleSArICctbWVudS0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9vcE1lbnVJdGVtKGNoaWxkcmVuLCBjYikge1xuICB2YXIgaW5kZXggPSAtMTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICBpbmRleCsrO1xuICAgIGlmIChjICYmIGMudHlwZSAmJiBjLnR5cGUuaXNNZW51SXRlbUdyb3VwKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjMikge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBjYihjMiwgaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKGMsIGluZGV4KTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9vcE1lbnVJdGVtUmVjdXJzaXZlbHkoY2hpbGRyZW4sIGtleXMsIHJldCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZHJlbiB8fCByZXQuZmluZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIGlmIChjKSB7XG4gICAgICB2YXIgY29uc3RydWN0ID0gYy50eXBlO1xuICAgICAgaWYgKCFjb25zdHJ1Y3QgfHwgIShjb25zdHJ1Y3QuaXNTdWJNZW51IHx8IGNvbnN0cnVjdC5pc01lbnVJdGVtIHx8IGNvbnN0cnVjdC5pc01lbnVJdGVtR3JvdXApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXlzLmluZGV4T2YoYy5rZXkpICE9PSAtMSkge1xuICAgICAgICByZXQuZmluZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgbG9vcE1lbnVJdGVtUmVjdXJzaXZlbHkoYy5wcm9wcy5jaGlsZHJlbiwga2V5cywgcmV0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIG1lbnVBbGxQcm9wcyA9IFsnZGVmYXVsdFNlbGVjdGVkS2V5cycsICdzZWxlY3RlZEtleXMnLCAnZGVmYXVsdE9wZW5LZXlzJywgJ29wZW5LZXlzJywgJ21vZGUnLCAnZ2V0UG9wdXBDb250YWluZXInLCAnb25TZWxlY3QnLCAnb25EZXNlbGVjdCcsICdvbkRlc3Ryb3knLCAnb3BlblRyYW5zaXRpb25OYW1lJywgJ29wZW5BbmltYXRpb24nLCAnc3ViTWVudU9wZW5EZWxheScsICdzdWJNZW51Q2xvc2VEZWxheScsICdmb3JjZVN1Yk1lbnVSZW5kZXInLCAndHJpZ2dlclN1Yk1lbnVBY3Rpb24nLCAnbGV2ZWwnLCAnc2VsZWN0YWJsZScsICdtdWx0aXBsZScsICdvbk9wZW5DaGFuZ2UnLCAndmlzaWJsZScsICdmb2N1c2FibGUnLCAnZGVmYXVsdEFjdGl2ZUZpcnN0JywgJ3ByZWZpeENscycsICdpbmxpbmVJbmRlbnQnLCAncGFyZW50TWVudScsICd0aXRsZScsICdyb290UHJlZml4Q2xzJywgJ2V2ZW50S2V5JywgJ2FjdGl2ZScsICdvbkl0ZW1Ib3ZlcicsICdvblRpdGxlTW91c2VFbnRlcicsICdvblRpdGxlTW91c2VMZWF2ZScsICdvblRpdGxlQ2xpY2snLCAncG9wdXBBbGlnbicsICdwb3B1cE9mZnNldCcsICdpc09wZW4nLCAncmVuZGVyTWVudUl0ZW0nLCAnbWFudWFsUmVmJywgJ3N1Yk1lbnVLZXknLCAnZGlzYWJsZWQnLCAnaW5kZXgnLCAnaXNTZWxlY3RlZCcsICdzdG9yZScsICdhY3RpdmVLZXknLCAnYnVpbHRpblBsYWNlbWVudHMnLCAnb3ZlcmZsb3dlZEluZGljYXRvcicsXG5cbi8vIHRoZSBmb2xsb3dpbmcga2V5cyBmb3VuZCBuZWVkIHRvIGJlIHJlbW92ZWQgZnJvbSB0ZXN0IHJlZ3Jlc3Npb25cbidhdHRyaWJ1dGUnLCAndmFsdWUnLCAncG9wdXBDbGFzc05hbWUnLCAnaW5saW5lQ29sbGFwc2VkJywgJ21lbnUnLCAndGhlbWUnLCAnaXRlbUljb24nLCAnZXhwYW5kSWNvbiddO1xuXG5leHBvcnQgdmFyIGdldFdpZHRoID0gZnVuY3Rpb24gZ2V0V2lkdGgoZWxlbSkge1xuICByZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbn07IiwidmFyIGF1dG9BZGp1c3RPdmVyZmxvdyA9IHtcbiAgYWRqdXN0WDogMSxcbiAgYWRqdXN0WTogMVxufTtcblxuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0ge1xuICB0b3BMZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ2JsJywgJ3RsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCAtN11cbiAgfSxcbiAgYm90dG9tTGVmdDoge1xuICAgIHBvaW50czogWyd0bCcsICdibCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgN11cbiAgfSxcbiAgbGVmdFRvcDoge1xuICAgIHBvaW50czogWyd0cicsICd0bCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbLTQsIDBdXG4gIH0sXG4gIHJpZ2h0VG9wOiB7XG4gICAgcG9pbnRzOiBbJ3RsJywgJ3RyJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFs0LCAwXVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwbGFjZW1lbnRzOyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUcmlnZ2VyIGZyb20gJ3JjLXRyaWdnZXInO1xuaW1wb3J0IEtleUNvZGUgZnJvbSAncmMtdXRpbC9lcy9LZXlDb2RlJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ21pbmktc3RvcmUnO1xuaW1wb3J0IFN1YlBvcHVwTWVudSBmcm9tICcuL1N1YlBvcHVwTWVudSc7XG5pbXBvcnQgcGxhY2VtZW50cyBmcm9tICcuL3BsYWNlbWVudHMnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAncmMtYW5pbWF0ZSc7XG5pbXBvcnQgeyBub29wLCBsb29wTWVudUl0ZW1SZWN1cnNpdmVseSwgZ2V0TWVudUlkRnJvbVN1Yk1lbnVFdmVudEtleSwgbWVudUFsbFByb3BzIH0gZnJvbSAnLi91dGlsJztcblxudmFyIGd1aWQgPSAwO1xuXG52YXIgcG9wdXBQbGFjZW1lbnRNYXAgPSB7XG4gIGhvcml6b250YWw6ICdib3R0b21MZWZ0JyxcbiAgdmVydGljYWw6ICdyaWdodFRvcCcsXG4gICd2ZXJ0aWNhbC1sZWZ0JzogJ3JpZ2h0VG9wJyxcbiAgJ3ZlcnRpY2FsLXJpZ2h0JzogJ2xlZnRUb3AnXG59O1xuXG52YXIgdXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0ID0gZnVuY3Rpb24gdXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0KHN0b3JlLCBldmVudEtleSwgZGVmYXVsdEFjdGl2ZUZpcnN0KSB7XG4gIHZhciBfZXh0ZW5kczI7XG5cbiAgdmFyIG1lbnVJZCA9IGdldE1lbnVJZEZyb21TdWJNZW51RXZlbnRLZXkoZXZlbnRLZXkpO1xuICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBzdG9yZS5zZXRTdGF0ZSh7XG4gICAgZGVmYXVsdEFjdGl2ZUZpcnN0OiBfZXh0ZW5kcyh7fSwgc3RhdGUuZGVmYXVsdEFjdGl2ZUZpcnN0LCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMlttZW51SWRdID0gZGVmYXVsdEFjdGl2ZUZpcnN0LCBfZXh0ZW5kczIpKVxuICB9KTtcbn07XG5cbmV4cG9ydCB2YXIgU3ViTWVudSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdWJNZW51LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdWJNZW51KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1Yk1lbnUpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpO1xuXG4gICAgdmFyIHN0b3JlID0gcHJvcHMuc3RvcmU7XG4gICAgdmFyIGV2ZW50S2V5ID0gcHJvcHMuZXZlbnRLZXk7XG4gICAgdmFyIGRlZmF1bHRBY3RpdmVGaXJzdCA9IHN0b3JlLmdldFN0YXRlKCkuZGVmYXVsdEFjdGl2ZUZpcnN0O1xuXG4gICAgX3RoaXMuaXNSb290TWVudSA9IGZhbHNlO1xuXG4gICAgdmFyIHZhbHVlID0gZmFsc2U7XG5cbiAgICBpZiAoZGVmYXVsdEFjdGl2ZUZpcnN0KSB7XG4gICAgICB2YWx1ZSA9IGRlZmF1bHRBY3RpdmVGaXJzdFtldmVudEtleV07XG4gICAgfVxuXG4gICAgdXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0KHN0b3JlLCBldmVudEtleSwgdmFsdWUpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFN1Yk1lbnUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUoKTtcbiAgfTtcblxuICBTdWJNZW51LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbW9kZSA9IF9wcm9wcy5tb2RlLFxuICAgICAgICBwYXJlbnRNZW51ID0gX3Byb3BzLnBhcmVudE1lbnUsXG4gICAgICAgIG1hbnVhbFJlZiA9IF9wcm9wcy5tYW51YWxSZWY7XG5cbiAgICAvLyBpbnZva2UgY3VzdG9taXplZCByZWYgdG8gZXhwb3NlIGNvbXBvbmVudCB0byBtaXhpblxuXG4gICAgaWYgKG1hbnVhbFJlZikge1xuICAgICAgbWFudWFsUmVmKHRoaXMpO1xuICAgIH1cblxuICAgIGlmIChtb2RlICE9PSAnaG9yaXpvbnRhbCcgfHwgIXBhcmVudE1lbnUuaXNSb290TWVudSB8fCAhdGhpcy5wcm9wcy5pc09wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm1pbldpZHRoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzMi5hZGp1c3RXaWR0aCgpO1xuICAgIH0sIDApO1xuICB9O1xuXG4gIFN1Yk1lbnUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkRlc3Ryb3kgPSBfcHJvcHMyLm9uRGVzdHJveSxcbiAgICAgICAgZXZlbnRLZXkgPSBfcHJvcHMyLmV2ZW50S2V5O1xuXG4gICAgaWYgKG9uRGVzdHJveSkge1xuICAgICAgb25EZXN0cm95KGV2ZW50S2V5KTtcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5taW5XaWR0aFRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1pbldpZHRoVGltZW91dCk7XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMubW91c2VlbnRlclRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1vdXNlZW50ZXJUaW1lb3V0KTtcbiAgICB9XG4gIH07XG5cbiAgU3ViTWVudS5wcm90b3R5cGUucmVuZGVyQ2hpbGRyZW4gPSBmdW5jdGlvbiByZW5kZXJDaGlsZHJlbihjaGlsZHJlbikge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGJhc2VQcm9wcyA9IHtcbiAgICAgIG1vZGU6IHByb3BzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiBwcm9wcy5tb2RlLFxuICAgICAgdmlzaWJsZTogdGhpcy5wcm9wcy5pc09wZW4sXG4gICAgICBsZXZlbDogcHJvcHMubGV2ZWwgKyAxLFxuICAgICAgaW5saW5lSW5kZW50OiBwcm9wcy5pbmxpbmVJbmRlbnQsXG4gICAgICBmb2N1c2FibGU6IGZhbHNlLFxuICAgICAgb25DbGljazogdGhpcy5vblN1Yk1lbnVDbGljayxcbiAgICAgIG9uU2VsZWN0OiB0aGlzLm9uU2VsZWN0LFxuICAgICAgb25EZXNlbGVjdDogdGhpcy5vbkRlc2VsZWN0LFxuICAgICAgb25EZXN0cm95OiB0aGlzLm9uRGVzdHJveSxcbiAgICAgIHNlbGVjdGVkS2V5czogcHJvcHMuc2VsZWN0ZWRLZXlzLFxuICAgICAgZXZlbnRLZXk6IHByb3BzLmV2ZW50S2V5ICsgJy1tZW51LScsXG4gICAgICBvcGVuS2V5czogcHJvcHMub3BlbktleXMsXG4gICAgICBvcGVuVHJhbnNpdGlvbk5hbWU6IHByb3BzLm9wZW5UcmFuc2l0aW9uTmFtZSxcbiAgICAgIG9wZW5BbmltYXRpb246IHByb3BzLm9wZW5BbmltYXRpb24sXG4gICAgICBvbk9wZW5DaGFuZ2U6IHRoaXMub25PcGVuQ2hhbmdlLFxuICAgICAgc3ViTWVudU9wZW5EZWxheTogcHJvcHMuc3ViTWVudU9wZW5EZWxheSxcbiAgICAgIHBhcmVudE1lbnU6IHRoaXMsXG4gICAgICBzdWJNZW51Q2xvc2VEZWxheTogcHJvcHMuc3ViTWVudUNsb3NlRGVsYXksXG4gICAgICBmb3JjZVN1Yk1lbnVSZW5kZXI6IHByb3BzLmZvcmNlU3ViTWVudVJlbmRlcixcbiAgICAgIHRyaWdnZXJTdWJNZW51QWN0aW9uOiBwcm9wcy50cmlnZ2VyU3ViTWVudUFjdGlvbixcbiAgICAgIGJ1aWx0aW5QbGFjZW1lbnRzOiBwcm9wcy5idWlsdGluUGxhY2VtZW50cyxcbiAgICAgIGRlZmF1bHRBY3RpdmVGaXJzdDogcHJvcHMuc3RvcmUuZ2V0U3RhdGUoKS5kZWZhdWx0QWN0aXZlRmlyc3RbZ2V0TWVudUlkRnJvbVN1Yk1lbnVFdmVudEtleShwcm9wcy5ldmVudEtleSldLFxuICAgICAgbXVsdGlwbGU6IHByb3BzLm11bHRpcGxlLFxuICAgICAgcHJlZml4Q2xzOiBwcm9wcy5yb290UHJlZml4Q2xzLFxuICAgICAgaWQ6IHRoaXMuX21lbnVJZCxcbiAgICAgIG1hbnVhbFJlZjogdGhpcy5zYXZlTWVudUluc3RhbmNlLFxuICAgICAgaXRlbUljb246IHByb3BzLml0ZW1JY29uLFxuICAgICAgZXhwYW5kSWNvbjogcHJvcHMuZXhwYW5kSWNvblxuICAgIH07XG5cbiAgICB2YXIgaGF2ZVJlbmRlcmVkID0gdGhpcy5oYXZlUmVuZGVyZWQ7XG4gICAgdGhpcy5oYXZlUmVuZGVyZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5oYXZlT3BlbmVkID0gdGhpcy5oYXZlT3BlbmVkIHx8IGJhc2VQcm9wcy52aXNpYmxlIHx8IGJhc2VQcm9wcy5mb3JjZVN1Yk1lbnVSZW5kZXI7XG4gICAgLy8gbmV2ZXIgcmVuZGVyZWQgbm90IHBsYW5uaW5nIHRvLCBkb24ndCByZW5kZXJcbiAgICBpZiAoIXRoaXMuaGF2ZU9wZW5lZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIG51bGwpO1xuICAgIH1cblxuICAgIC8vIGRvbid0IHNob3cgdHJhbnNpdGlvbiBvbiBmaXJzdCByZW5kZXJpbmcgKG5vIGFuaW1hdGlvbiBmb3Igb3BlbmVkIG1lbnUpXG4gICAgLy8gc2hvdyBhcHBlYXIgdHJhbnNpdGlvbiBpZiBpdCdzIG5vdCB2aXNpYmxlIChub3Qgc3VyZSB3aHkpXG4gICAgLy8gc2hvdyBhcHBlYXIgdHJhbnNpdGlvbiBpZiBpdCdzIG5vdCBpbmxpbmUgbW9kZVxuICAgIHZhciB0cmFuc2l0aW9uQXBwZWFyID0gaGF2ZVJlbmRlcmVkIHx8ICFiYXNlUHJvcHMudmlzaWJsZSB8fCAhYmFzZVByb3BzLm1vZGUgPT09ICdpbmxpbmUnO1xuXG4gICAgYmFzZVByb3BzLmNsYXNzTmFtZSA9ICcgJyArIGJhc2VQcm9wcy5wcmVmaXhDbHMgKyAnLXN1Yic7XG4gICAgdmFyIGFuaW1Qcm9wcyA9IHt9O1xuXG4gICAgaWYgKGJhc2VQcm9wcy5vcGVuVHJhbnNpdGlvbk5hbWUpIHtcbiAgICAgIGFuaW1Qcm9wcy50cmFuc2l0aW9uTmFtZSA9IGJhc2VQcm9wcy5vcGVuVHJhbnNpdGlvbk5hbWU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYmFzZVByb3BzLm9wZW5BbmltYXRpb24gPT09ICdvYmplY3QnKSB7XG4gICAgICBhbmltUHJvcHMuYW5pbWF0aW9uID0gX2V4dGVuZHMoe30sIGJhc2VQcm9wcy5vcGVuQW5pbWF0aW9uKTtcbiAgICAgIGlmICghdHJhbnNpdGlvbkFwcGVhcikge1xuICAgICAgICBkZWxldGUgYW5pbVByb3BzLmFuaW1hdGlvbi5hcHBlYXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBBbmltYXRlLFxuICAgICAgX2V4dGVuZHMoe30sIGFuaW1Qcm9wcywge1xuICAgICAgICBzaG93UHJvcDogJ3Zpc2libGUnLFxuICAgICAgICBjb21wb25lbnQ6ICcnLFxuICAgICAgICB0cmFuc2l0aW9uQXBwZWFyOiB0cmFuc2l0aW9uQXBwZWFyXG4gICAgICB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFN1YlBvcHVwTWVudSxcbiAgICAgICAgX2V4dGVuZHMoe30sIGJhc2VQcm9wcywgeyBpZDogdGhpcy5fbWVudUlkIH0pLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgU3ViTWVudS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzKTtcbiAgICB2YXIgaXNPcGVuID0gcHJvcHMuaXNPcGVuO1xuICAgIHZhciBsZXZlbCA9IHByb3BzLmxldmVsO1xuICAgIHZhciBwcmVmaXhDbHMgPSB0aGlzLmdldFByZWZpeENscygpO1xuICAgIHZhciBpc0lubGluZU1vZGUgPSBwcm9wcy5tb2RlID09PSAnaW5saW5lJztcbiAgICB2YXIgY2xhc3NOYW1lID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIHByZWZpeENscyArICctJyArIHByb3BzLm1vZGUsIChfY2xhc3NOYW1lcyA9IHt9LCBfY2xhc3NOYW1lc1twcm9wcy5jbGFzc05hbWVdID0gISFwcm9wcy5jbGFzc05hbWUsIF9jbGFzc05hbWVzW3RoaXMuZ2V0T3BlbkNsYXNzTmFtZSgpXSA9IGlzT3BlbiwgX2NsYXNzTmFtZXNbdGhpcy5nZXRBY3RpdmVDbGFzc05hbWUoKV0gPSBwcm9wcy5hY3RpdmUgfHwgaXNPcGVuICYmICFpc0lubGluZU1vZGUsIF9jbGFzc05hbWVzW3RoaXMuZ2V0RGlzYWJsZWRDbGFzc05hbWUoKV0gPSBwcm9wcy5kaXNhYmxlZCwgX2NsYXNzTmFtZXNbdGhpcy5nZXRTZWxlY3RlZENsYXNzTmFtZSgpXSA9IHRoaXMuaXNDaGlsZHJlblNlbGVjdGVkKCksIF9jbGFzc05hbWVzKSk7XG5cbiAgICBpZiAoIXRoaXMuX21lbnVJZCkge1xuICAgICAgaWYgKHByb3BzLmV2ZW50S2V5KSB7XG4gICAgICAgIHRoaXMuX21lbnVJZCA9IHByb3BzLmV2ZW50S2V5ICsgJyRNZW51JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX21lbnVJZCA9ICckX18kJyArICsrZ3VpZCArICckTWVudSc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1vdXNlRXZlbnRzID0ge307XG4gICAgdmFyIHRpdGxlQ2xpY2tFdmVudHMgPSB7fTtcbiAgICB2YXIgdGl0bGVNb3VzZUV2ZW50cyA9IHt9O1xuICAgIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIG1vdXNlRXZlbnRzID0ge1xuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMub25Nb3VzZUxlYXZlLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMub25Nb3VzZUVudGVyXG4gICAgICB9O1xuXG4gICAgICAvLyBvbmx5IHdvcmtzIGluIHRpdGxlLCBub3Qgb3V0ZXIgbGlcbiAgICAgIHRpdGxlQ2xpY2tFdmVudHMgPSB7XG4gICAgICAgIG9uQ2xpY2s6IHRoaXMub25UaXRsZUNsaWNrXG4gICAgICB9O1xuICAgICAgdGl0bGVNb3VzZUV2ZW50cyA9IHtcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLm9uVGl0bGVNb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMub25UaXRsZU1vdXNlTGVhdmVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlID0ge307XG4gICAgaWYgKGlzSW5saW5lTW9kZSkge1xuICAgICAgc3R5bGUucGFkZGluZ0xlZnQgPSBwcm9wcy5pbmxpbmVJbmRlbnQgKiBwcm9wcy5sZXZlbDtcbiAgICB9XG5cbiAgICB2YXIgYXJpYU93bnMgPSB7fTtcbiAgICAvLyBvbmx5IHNldCBhcmlhLW93bnMgd2hlbiBtZW51IGlzIG9wZW5cbiAgICAvLyBvdGhlcndpc2UgaXQgd291bGQgYmUgYW4gaW52YWxpZCBhcmlhLW93bnMgdmFsdWVcbiAgICAvLyBzaW5jZSBjb3JyZXNwb25kaW5nIG5vZGUgY2Fubm90IGJlIGZvdW5kXG4gICAgaWYgKHRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICBhcmlhT3ducyA9IHtcbiAgICAgICAgJ2FyaWEtb3ducyc6IHRoaXMuX21lbnVJZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBleHBhbmQgY3VzdG9tIGljb24gc2hvdWxkIE5PVCBiZSBkaXNwbGF5ZWQgaW4gbWVudSB3aXRoIGhvcml6b250YWwgbW9kZS5cbiAgICB2YXIgaWNvbiA9IG51bGw7XG4gICAgaWYgKHByb3BzLm1vZGUgIT09ICdob3Jpem9udGFsJykge1xuICAgICAgaWNvbiA9IHRoaXMucHJvcHMuZXhwYW5kSWNvbjsgLy8gUmVhY3ROb2RlXG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuZXhwYW5kSWNvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLmV4cGFuZEljb24sIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRpdGxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IHRoaXMuc2F2ZVN1Yk1lbnVUaXRsZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctdGl0bGUnXG4gICAgICB9LCB0aXRsZU1vdXNlRXZlbnRzLCB0aXRsZUNsaWNrRXZlbnRzLCB7XG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogaXNPcGVuXG4gICAgICB9LCBhcmlhT3ducywge1xuICAgICAgICAnYXJpYS1oYXNwb3B1cCc6ICd0cnVlJyxcbiAgICAgICAgdGl0bGU6IHR5cGVvZiBwcm9wcy50aXRsZSA9PT0gJ3N0cmluZycgPyBwcm9wcy50aXRsZSA6IHVuZGVmaW5lZFxuICAgICAgfSksXG4gICAgICBwcm9wcy50aXRsZSxcbiAgICAgIGljb24gfHwgUmVhY3QuY3JlYXRlRWxlbWVudCgnaScsIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLWFycm93JyB9KVxuICAgICk7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5yZW5kZXJDaGlsZHJlbihwcm9wcy5jaGlsZHJlbik7XG5cbiAgICB2YXIgZ2V0UG9wdXBDb250YWluZXIgPSBwcm9wcy5wYXJlbnRNZW51LmlzUm9vdE1lbnUgPyBwcm9wcy5wYXJlbnRNZW51LnByb3BzLmdldFBvcHVwQ29udGFpbmVyIDogZnVuY3Rpb24gKHRyaWdnZXJOb2RlKSB7XG4gICAgICByZXR1cm4gdHJpZ2dlck5vZGUucGFyZW50Tm9kZTtcbiAgICB9O1xuICAgIHZhciBwb3B1cFBsYWNlbWVudCA9IHBvcHVwUGxhY2VtZW50TWFwW3Byb3BzLm1vZGVdO1xuICAgIHZhciBwb3B1cEFsaWduID0gcHJvcHMucG9wdXBPZmZzZXQgPyB7IG9mZnNldDogcHJvcHMucG9wdXBPZmZzZXQgfSA6IHt9O1xuICAgIHZhciBwb3B1cENsYXNzTmFtZSA9IHByb3BzLm1vZGUgPT09ICdpbmxpbmUnID8gJycgOiBwcm9wcy5wb3B1cENsYXNzTmFtZTtcbiAgICB2YXIgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgdHJpZ2dlclN1Yk1lbnVBY3Rpb24gPSBwcm9wcy50cmlnZ2VyU3ViTWVudUFjdGlvbixcbiAgICAgICAgc3ViTWVudU9wZW5EZWxheSA9IHByb3BzLnN1Yk1lbnVPcGVuRGVsYXksXG4gICAgICAgIGZvcmNlU3ViTWVudVJlbmRlciA9IHByb3BzLmZvcmNlU3ViTWVudVJlbmRlcixcbiAgICAgICAgc3ViTWVudUNsb3NlRGVsYXkgPSBwcm9wcy5zdWJNZW51Q2xvc2VEZWxheSxcbiAgICAgICAgYnVpbHRpblBsYWNlbWVudHMgPSBwcm9wcy5idWlsdGluUGxhY2VtZW50cztcblxuICAgIG1lbnVBbGxQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBkZWxldGUgcHJvcHNba2V5XTtcbiAgICB9KTtcbiAgICAvLyBTZXQgb25DbGljayB0byBudWxsLCB0byBpZ25vcmUgcHJvcGFnYXRlZCBvbkNsaWNrIGV2ZW50XG4gICAgZGVsZXRlIHByb3BzLm9uQ2xpY2s7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdsaScsXG4gICAgICBfZXh0ZW5kcyh7fSwgcHJvcHMsIG1vdXNlRXZlbnRzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICByb2xlOiAnbWVudWl0ZW0nXG4gICAgICB9KSxcbiAgICAgIGlzSW5saW5lTW9kZSAmJiB0aXRsZSxcbiAgICAgIGlzSW5saW5lTW9kZSAmJiBjaGlsZHJlbixcbiAgICAgICFpc0lubGluZU1vZGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgVHJpZ2dlcixcbiAgICAgICAge1xuICAgICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICAgIHBvcHVwQ2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXBvcHVwICcgKyBwb3B1cENsYXNzTmFtZSxcbiAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lcjogZ2V0UG9wdXBDb250YWluZXIsXG4gICAgICAgICAgYnVpbHRpblBsYWNlbWVudHM6IF9leHRlbmRzKHt9LCBwbGFjZW1lbnRzLCBidWlsdGluUGxhY2VtZW50cyksXG4gICAgICAgICAgcG9wdXBQbGFjZW1lbnQ6IHBvcHVwUGxhY2VtZW50LFxuICAgICAgICAgIHBvcHVwVmlzaWJsZTogaXNPcGVuLFxuICAgICAgICAgIHBvcHVwQWxpZ246IHBvcHVwQWxpZ24sXG4gICAgICAgICAgcG9wdXA6IGNoaWxkcmVuLFxuICAgICAgICAgIGFjdGlvbjogZGlzYWJsZWQgPyBbXSA6IFt0cmlnZ2VyU3ViTWVudUFjdGlvbl0sXG4gICAgICAgICAgbW91c2VFbnRlckRlbGF5OiBzdWJNZW51T3BlbkRlbGF5LFxuICAgICAgICAgIG1vdXNlTGVhdmVEZWxheTogc3ViTWVudUNsb3NlRGVsYXksXG4gICAgICAgICAgb25Qb3B1cFZpc2libGVDaGFuZ2U6IHRoaXMub25Qb3B1cFZpc2libGVDaGFuZ2UsXG4gICAgICAgICAgZm9yY2VSZW5kZXI6IGZvcmNlU3ViTWVudVJlbmRlcixcbiAgICAgICAgICB6SW5kZXg6IGxldmVsXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gU3ViTWVudTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3ViTWVudS5wcm9wVHlwZXMgPSB7XG4gIHBhcmVudE1lbnU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIHNlbGVjdGVkS2V5czogUHJvcFR5cGVzLmFycmF5LFxuICBvcGVuS2V5czogUHJvcFR5cGVzLmFycmF5LFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25PcGVuQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgcm9vdFByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXZlbnRLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCwgLy8gVE9ETzogcmVtb3ZlXG4gIG9uSXRlbUhvdmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICB0cmlnZ2VyU3ViTWVudUFjdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25EZXNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRGVzdHJveTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uVGl0bGVNb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25UaXRsZU1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICBvblRpdGxlQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBwb3B1cE9mZnNldDogUHJvcFR5cGVzLmFycmF5LFxuICBpc09wZW46IFByb3BUeXBlcy5ib29sLFxuICBzdG9yZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgbW9kZTogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCcsICd2ZXJ0aWNhbC1sZWZ0JywgJ3ZlcnRpY2FsLXJpZ2h0JywgJ2lubGluZSddKSxcbiAgbWFudWFsUmVmOiBQcm9wVHlwZXMuZnVuYyxcbiAgaXRlbUljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBleHBhbmRJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKVxufTtcblN1Yk1lbnUuZGVmYXVsdFByb3BzID0ge1xuICBvbk1vdXNlRW50ZXI6IG5vb3AsXG4gIG9uTW91c2VMZWF2ZTogbm9vcCxcbiAgb25UaXRsZU1vdXNlRW50ZXI6IG5vb3AsXG4gIG9uVGl0bGVNb3VzZUxlYXZlOiBub29wLFxuICBvblRpdGxlQ2xpY2s6IG5vb3AsXG4gIG1hbnVhbFJlZjogbm9vcCxcbiAgbW9kZTogJ3ZlcnRpY2FsJyxcbiAgdGl0bGU6ICcnXG59O1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gIHRoaXMub25EZXN0cm95ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIF90aGlzMy5wcm9wcy5vbkRlc3Ryb3koa2V5KTtcbiAgfTtcblxuICB0aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGU7XG4gICAgdmFyIG1lbnUgPSBfdGhpczMubWVudUluc3RhbmNlO1xuICAgIHZhciBfcHJvcHMzID0gX3RoaXMzLnByb3BzLFxuICAgICAgICBpc09wZW4gPSBfcHJvcHMzLmlzT3BlbixcbiAgICAgICAgc3RvcmUgPSBfcHJvcHMzLnN0b3JlO1xuXG5cbiAgICBpZiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5FTlRFUikge1xuICAgICAgX3RoaXMzLm9uVGl0bGVDbGljayhlKTtcbiAgICAgIHVwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdChzdG9yZSwgX3RoaXMzLnByb3BzLmV2ZW50S2V5LCB0cnVlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLlJJR0hUKSB7XG4gICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgIG1lbnUub25LZXlEb3duKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMzLnRyaWdnZXJPcGVuQ2hhbmdlKHRydWUpO1xuICAgICAgICAvLyBuZWVkIHRvIHVwZGF0ZSBjdXJyZW50IG1lbnUncyBkZWZhdWx0QWN0aXZlRmlyc3QgdmFsdWVcbiAgICAgICAgdXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0KHN0b3JlLCBfdGhpczMucHJvcHMuZXZlbnRLZXksIHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLkxFRlQpIHtcbiAgICAgIHZhciBoYW5kbGVkID0gdm9pZCAwO1xuICAgICAgaWYgKGlzT3Blbikge1xuICAgICAgICBoYW5kbGVkID0gbWVudS5vbktleURvd24oZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKCFoYW5kbGVkKSB7XG4gICAgICAgIF90aGlzMy50cmlnZ2VyT3BlbkNoYW5nZShmYWxzZSk7XG4gICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhbmRsZWQ7XG4gICAgfVxuXG4gICAgaWYgKGlzT3BlbiAmJiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5VUCB8fCBrZXlDb2RlID09PSBLZXlDb2RlLkRPV04pKSB7XG4gICAgICByZXR1cm4gbWVudS5vbktleURvd24oZSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25PcGVuQ2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBfdGhpczMucHJvcHMub25PcGVuQ2hhbmdlKGUpO1xuICB9O1xuXG4gIHRoaXMub25Qb3B1cFZpc2libGVDaGFuZ2UgPSBmdW5jdGlvbiAodmlzaWJsZSkge1xuICAgIF90aGlzMy50cmlnZ2VyT3BlbkNoYW5nZSh2aXNpYmxlLCB2aXNpYmxlID8gJ21vdXNlZW50ZXInIDogJ21vdXNlbGVhdmUnKTtcbiAgfTtcblxuICB0aGlzLm9uTW91c2VFbnRlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIF9wcm9wczQgPSBfdGhpczMucHJvcHMsXG4gICAgICAgIGtleSA9IF9wcm9wczQuZXZlbnRLZXksXG4gICAgICAgIG9uTW91c2VFbnRlciA9IF9wcm9wczQub25Nb3VzZUVudGVyLFxuICAgICAgICBzdG9yZSA9IF9wcm9wczQuc3RvcmU7XG5cbiAgICB1cGRhdGVEZWZhdWx0QWN0aXZlRmlyc3Qoc3RvcmUsIF90aGlzMy5wcm9wcy5ldmVudEtleSwgZmFsc2UpO1xuICAgIG9uTW91c2VFbnRlcih7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGRvbUV2ZW50OiBlXG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5vbk1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBfcHJvcHM1ID0gX3RoaXMzLnByb3BzLFxuICAgICAgICBwYXJlbnRNZW51ID0gX3Byb3BzNS5wYXJlbnRNZW51LFxuICAgICAgICBldmVudEtleSA9IF9wcm9wczUuZXZlbnRLZXksXG4gICAgICAgIG9uTW91c2VMZWF2ZSA9IF9wcm9wczUub25Nb3VzZUxlYXZlO1xuXG4gICAgcGFyZW50TWVudS5zdWJNZW51SW5zdGFuY2UgPSBfdGhpczM7XG4gICAgb25Nb3VzZUxlYXZlKHtcbiAgICAgIGtleTogZXZlbnRLZXksXG4gICAgICBkb21FdmVudDogZVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMub25UaXRsZU1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZG9tRXZlbnQpIHtcbiAgICB2YXIgX3Byb3BzNiA9IF90aGlzMy5wcm9wcyxcbiAgICAgICAga2V5ID0gX3Byb3BzNi5ldmVudEtleSxcbiAgICAgICAgb25JdGVtSG92ZXIgPSBfcHJvcHM2Lm9uSXRlbUhvdmVyLFxuICAgICAgICBvblRpdGxlTW91c2VFbnRlciA9IF9wcm9wczYub25UaXRsZU1vdXNlRW50ZXI7XG5cbiAgICBvbkl0ZW1Ib3Zlcih7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGhvdmVyOiB0cnVlXG4gICAgfSk7XG4gICAgb25UaXRsZU1vdXNlRW50ZXIoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBkb21FdmVudDogZG9tRXZlbnRcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLm9uVGl0bGVNb3VzZUxlYXZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgX3Byb3BzNyA9IF90aGlzMy5wcm9wcyxcbiAgICAgICAgcGFyZW50TWVudSA9IF9wcm9wczcucGFyZW50TWVudSxcbiAgICAgICAgZXZlbnRLZXkgPSBfcHJvcHM3LmV2ZW50S2V5LFxuICAgICAgICBvbkl0ZW1Ib3ZlciA9IF9wcm9wczcub25JdGVtSG92ZXIsXG4gICAgICAgIG9uVGl0bGVNb3VzZUxlYXZlID0gX3Byb3BzNy5vblRpdGxlTW91c2VMZWF2ZTtcblxuICAgIHBhcmVudE1lbnUuc3ViTWVudUluc3RhbmNlID0gX3RoaXMzO1xuICAgIG9uSXRlbUhvdmVyKHtcbiAgICAgIGtleTogZXZlbnRLZXksXG4gICAgICBob3ZlcjogZmFsc2VcbiAgICB9KTtcbiAgICBvblRpdGxlTW91c2VMZWF2ZSh7XG4gICAgICBrZXk6IGV2ZW50S2V5LFxuICAgICAgZG9tRXZlbnQ6IGVcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLm9uVGl0bGVDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMzLnByb3BzO1xuXG4gICAgcHJvcHMub25UaXRsZUNsaWNrKHtcbiAgICAgIGtleTogcHJvcHMuZXZlbnRLZXksXG4gICAgICBkb21FdmVudDogZVxuICAgIH0pO1xuICAgIGlmIChwcm9wcy50cmlnZ2VyU3ViTWVudUFjdGlvbiA9PT0gJ2hvdmVyJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfdGhpczMudHJpZ2dlck9wZW5DaGFuZ2UoIXByb3BzLmlzT3BlbiwgJ2NsaWNrJyk7XG4gICAgdXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0KHByb3BzLnN0b3JlLCBfdGhpczMucHJvcHMuZXZlbnRLZXksIGZhbHNlKTtcbiAgfTtcblxuICB0aGlzLm9uU3ViTWVudUNsaWNrID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICBfdGhpczMucHJvcHMub25DbGljayhfdGhpczMuYWRkS2V5UGF0aChpbmZvKSk7XG4gIH07XG5cbiAgdGhpcy5vblNlbGVjdCA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgX3RoaXMzLnByb3BzLm9uU2VsZWN0KGluZm8pO1xuICB9O1xuXG4gIHRoaXMub25EZXNlbGVjdCA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgX3RoaXMzLnByb3BzLm9uRGVzZWxlY3QoaW5mbyk7XG4gIH07XG5cbiAgdGhpcy5nZXRQcmVmaXhDbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMy5wcm9wcy5yb290UHJlZml4Q2xzICsgJy1zdWJtZW51JztcbiAgfTtcblxuICB0aGlzLmdldEFjdGl2ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMzLmdldFByZWZpeENscygpICsgJy1hY3RpdmUnO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGlzYWJsZWRDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMy5nZXRQcmVmaXhDbHMoKSArICctZGlzYWJsZWQnO1xuICB9O1xuXG4gIHRoaXMuZ2V0U2VsZWN0ZWRDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMy5nZXRQcmVmaXhDbHMoKSArICctc2VsZWN0ZWQnO1xuICB9O1xuXG4gIHRoaXMuZ2V0T3BlbkNsYXNzTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMzLnByb3BzLnJvb3RQcmVmaXhDbHMgKyAnLXN1Ym1lbnUtb3Blbic7XG4gIH07XG5cbiAgdGhpcy5zYXZlTWVudUluc3RhbmNlID0gZnVuY3Rpb24gKGMpIHtcbiAgICAvLyBjaGlsZHJlbiBtZW51IGluc3RhbmNlXG4gICAgX3RoaXMzLm1lbnVJbnN0YW5jZSA9IGM7XG4gIH07XG5cbiAgdGhpcy5hZGRLZXlQYXRoID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGluZm8sIHtcbiAgICAgIGtleVBhdGg6IChpbmZvLmtleVBhdGggfHwgW10pLmNvbmNhdChfdGhpczMucHJvcHMuZXZlbnRLZXkpXG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy50cmlnZ2VyT3BlbkNoYW5nZSA9IGZ1bmN0aW9uIChvcGVuLCB0eXBlKSB7XG4gICAgdmFyIGtleSA9IF90aGlzMy5wcm9wcy5ldmVudEtleTtcbiAgICB2YXIgb3BlbkNoYW5nZSA9IGZ1bmN0aW9uIG9wZW5DaGFuZ2UoKSB7XG4gICAgICBfdGhpczMub25PcGVuQ2hhbmdlKHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIGl0ZW06IF90aGlzMyxcbiAgICAgICAgdHJpZ2dlcjogdHlwZSxcbiAgICAgICAgb3Blbjogb3BlblxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAodHlwZSA9PT0gJ21vdXNlZW50ZXInKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgbW91c2VlbnRlciBoYXBwZW4gYWZ0ZXIgb3RoZXIgbWVudSBpdGVtJ3MgbW91c2VsZWF2ZVxuICAgICAgX3RoaXMzLm1vdXNlZW50ZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9wZW5DaGFuZ2UoKTtcbiAgICAgIH0sIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVuQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaXNDaGlsZHJlblNlbGVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXQgPSB7IGZpbmQ6IGZhbHNlIH07XG4gICAgbG9vcE1lbnVJdGVtUmVjdXJzaXZlbHkoX3RoaXMzLnByb3BzLmNoaWxkcmVuLCBfdGhpczMucHJvcHMuc2VsZWN0ZWRLZXlzLCByZXQpO1xuICAgIHJldHVybiByZXQuZmluZDtcbiAgfTtcblxuICB0aGlzLmlzT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMzLnByb3BzLm9wZW5LZXlzLmluZGV4T2YoX3RoaXMzLnByb3BzLmV2ZW50S2V5KSAhPT0gLTE7XG4gIH07XG5cbiAgdGhpcy5hZGp1c3RXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIV90aGlzMy5zdWJNZW51VGl0bGUgfHwgIV90aGlzMy5tZW51SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHBvcHVwTWVudSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF90aGlzMy5tZW51SW5zdGFuY2UpO1xuICAgIGlmIChwb3B1cE1lbnUub2Zmc2V0V2lkdGggPj0gX3RoaXMzLnN1Yk1lbnVUaXRsZS5vZmZzZXRXaWR0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcG9wdXBNZW51LnN0eWxlLm1pbldpZHRoID0gX3RoaXMzLnN1Yk1lbnVUaXRsZS5vZmZzZXRXaWR0aCArICdweCc7XG4gIH07XG5cbiAgdGhpcy5zYXZlU3ViTWVudVRpdGxlID0gZnVuY3Rpb24gKHN1Yk1lbnVUaXRsZSkge1xuICAgIF90aGlzMy5zdWJNZW51VGl0bGUgPSBzdWJNZW51VGl0bGU7XG4gIH07XG59O1xuXG52YXIgY29ubmVjdGVkID0gY29ubmVjdChmdW5jdGlvbiAoX3JlZiwgX3JlZjIpIHtcbiAgdmFyIG9wZW5LZXlzID0gX3JlZi5vcGVuS2V5cyxcbiAgICAgIGFjdGl2ZUtleSA9IF9yZWYuYWN0aXZlS2V5LFxuICAgICAgc2VsZWN0ZWRLZXlzID0gX3JlZi5zZWxlY3RlZEtleXM7XG4gIHZhciBldmVudEtleSA9IF9yZWYyLmV2ZW50S2V5LFxuICAgICAgc3ViTWVudUtleSA9IF9yZWYyLnN1Yk1lbnVLZXk7XG4gIHJldHVybiB7XG4gICAgaXNPcGVuOiBvcGVuS2V5cy5pbmRleE9mKGV2ZW50S2V5KSA+IC0xLFxuICAgIGFjdGl2ZTogYWN0aXZlS2V5W3N1Yk1lbnVLZXldID09PSBldmVudEtleSxcbiAgICBzZWxlY3RlZEtleXM6IHNlbGVjdGVkS2V5c1xuICB9O1xufSkoU3ViTWVudSk7XG5cbmNvbm5lY3RlZC5pc1N1Yk1lbnUgPSB0cnVlO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0ZWQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XG5pbXBvcnQgU3ViTWVudSBmcm9tICcuL1N1Yk1lbnUnO1xuaW1wb3J0IHsgZ2V0V2lkdGggfSBmcm9tICcuL3V0aWwnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLy8gRml4IHNzclxuaWYgKGNhblVzZURPTSkge1xuICByZXF1aXJlKCdtdXRhdGlvbm9ic2VydmVyLXNoaW0nKTtcbn1cblxudmFyIERPTVdyYXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRE9NV3JhcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRE9NV3JhcCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERPTVdyYXApO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbGFzdFZpc2libGVJbmRleDogdW5kZWZpbmVkXG4gICAgfSwgX3RoaXMuZ2V0T3ZlcmZsb3dlZFN1Yk1lbnVJdGVtID0gZnVuY3Rpb24gKGtleVByZWZpeCwgb3ZlcmZsb3dlZEl0ZW1zLCByZW5kZXJQbGFjZWhvbGRlcikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb3ZlcmZsb3dlZEluZGljYXRvciA9IF90aGlzJHByb3BzLm92ZXJmbG93ZWRJbmRpY2F0b3IsXG4gICAgICAgICAgbGV2ZWwgPSBfdGhpcyRwcm9wcy5sZXZlbCxcbiAgICAgICAgICBtb2RlID0gX3RoaXMkcHJvcHMubW9kZSxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wcy50aGVtZSxcbiAgICAgICAgICBwcm9wU3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZTtcblxuICAgICAgaWYgKGxldmVsICE9PSAxIHx8IG1vZGUgIT09ICdob3Jpem9udGFsJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIHB1dCBhbGwgdGhlIG92ZXJmbG93ZWQgaXRlbSBpbnNpZGUgYSBzdWJtZW51XG4gICAgICAvLyB3aXRoIGEgdGl0bGUgb2Ygb3ZlcmZsb3cgaW5kaWNhdG9yICgnLi4uJylcbiAgICAgIHZhciBjb3B5ID0gX3RoaXMucHJvcHMuY2hpbGRyZW5bMF07XG5cbiAgICAgIHZhciBfY29weSRwcm9wcyA9IGNvcHkucHJvcHMsXG4gICAgICAgICAgdGhyb3dBd2F5ID0gX2NvcHkkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgdGl0bGUgPSBfY29weSRwcm9wcy50aXRsZSxcbiAgICAgICAgICBldmVudEtleSA9IF9jb3B5JHByb3BzLmV2ZW50S2V5LFxuICAgICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX2NvcHkkcHJvcHMsIFsnY2hpbGRyZW4nLCAndGl0bGUnLCAnZXZlbnRLZXknXSk7XG5cbiAgICAgIHZhciBzdHlsZSA9IF9leHRlbmRzKHt9LCBwcm9wU3R5bGUpO1xuICAgICAgdmFyIGtleSA9IGtleVByZWZpeCArICctb3ZlcmZsb3dlZC1pbmRpY2F0b3InO1xuXG4gICAgICBpZiAob3ZlcmZsb3dlZEl0ZW1zLmxlbmd0aCA9PT0gMCAmJiByZW5kZXJQbGFjZWhvbGRlciAhPT0gdHJ1ZSkge1xuICAgICAgICBzdHlsZSA9IF9leHRlbmRzKHt9LCBzdHlsZSwge1xuICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocmVuZGVyUGxhY2Vob2xkZXIpIHtcbiAgICAgICAgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIHtcbiAgICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgICAvLyBwcmV2ZW50IGZyb20gdGFraW5nIG5vcm1hbCBkb20gc3BhY2VcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgICB9KTtcbiAgICAgICAga2V5ID0ga2V5ICsgJy1wbGFjZWhvbGRlcic7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3B1cENsYXNzTmFtZSA9IHRoZW1lID8gcHJlZml4Q2xzICsgJy0nICsgdGhlbWUgOiAnJztcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFN1Yk1lbnUsXG4gICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICB0aXRsZTogb3ZlcmZsb3dlZEluZGljYXRvcixcbiAgICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctb3ZlcmZsb3dlZC1zdWJtZW51JyxcbiAgICAgICAgICBwb3B1cENsYXNzTmFtZTogcG9wdXBDbGFzc05hbWVcbiAgICAgICAgfSwgcmVzdCwge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIGV2ZW50S2V5OiBrZXlQcmVmaXggKyAnLW92ZXJmbG93ZWQtaW5kaWNhdG9yJyxcbiAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICAgIH0pLFxuICAgICAgICBvdmVyZmxvd2VkSXRlbXNcbiAgICAgICk7XG4gICAgfSwgX3RoaXMuc2V0Q2hpbGRyZW5XaWR0aEFuZFJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5tb2RlICE9PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHVsID0gUmVhY3RET00uZmluZERPTU5vZGUoX3RoaXMpO1xuXG4gICAgICBpZiAoIXVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHVsQ2hpbGRyZW5Ob2RlcyA9IHVsLmNoaWxkcmVuO1xuXG4gICAgICBpZiAoIXVsQ2hpbGRyZW5Ob2RlcyB8fCB1bENoaWxkcmVuTm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2hpbGRyZW5TaXplcyA9IFtdO1xuICAgICAgdmFyIGNoaWxkcmVuID0gX3RoaXMucHJvcHMuY2hpbGRyZW47XG5cblxuICAgICAgdmFyIGxhc3RPdmVyZmxvd2VkSW5kaWNhdG9yUGxhY2Vob2xkZXIgPSB1bC5jaGlsZHJlblt1bENoaWxkcmVuTm9kZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgIC8vIG5lZWQgbGFzdCBvdmVyZmxvd2VkIGluZGljYXRvciBmb3IgY2FsY3VsYXRpbmcgbGVuZ3RoO1xuICAgICAgbGFzdE92ZXJmbG93ZWRJbmRpY2F0b3JQbGFjZWhvbGRlci5zdHlsZS53aWR0aCA9ICdhdXRvJztcbiAgICAgIF90aGlzLmNoaWxkcmVuU2l6ZXMgPSBjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgICAgcmV0dXJuIGdldFdpZHRoKHVsLmNoaWxkcmVuWzIgKiBpICsgMV0pO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm92ZXJmbG93ZWRJbmRpY2F0b3JXaWR0aCA9IGdldFdpZHRoKHVsLmNoaWxkcmVuW3VsLmNoaWxkcmVuLmxlbmd0aCAtIDFdKTtcbiAgICAgIF90aGlzLm9yaWdpbmFsVG90YWxXaWR0aCA9IF90aGlzLmNoaWxkcmVuU2l6ZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cikge1xuICAgICAgICByZXR1cm4gYWNjICsgY3VyO1xuICAgICAgfSwgMCk7XG4gICAgICBfdGhpcy5oYW5kbGVSZXNpemUoKTtcblxuICAgICAgLy8gcHJldmVudCB0aGUgb3ZlcmZsb3dlZCBpbmRpY2F0b3IgZnJvbSB0YWtpbmcgc3BhY2U7XG4gICAgICBsYXN0T3ZlcmZsb3dlZEluZGljYXRvclBsYWNlaG9sZGVyLnN0eWxlLndpZHRoID0gMDtcbiAgICB9LCBfdGhpcy5yZXNpemVPYnNlcnZlciA9IG51bGwsIF90aGlzLm11dGF0aW9uT2JzZXJ2ZXIgPSBudWxsLCBfdGhpcy5vcmlnaW5hbFRvdGFsV2lkdGggPSAwLCBfdGhpcy5vdmVyZmxvd2VkSXRlbXMgPSBbXSwgX3RoaXMuY2hpbGRyZW5TaXplcyA9IFtdLCBfdGhpcy5oYW5kbGVSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubW9kZSAhPT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHVsID0gUmVhY3RET00uZmluZERPTU5vZGUoX3RoaXMpO1xuICAgICAgaWYgKCF1bCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgd2lkdGggPSBnZXRXaWR0aCh1bCk7XG5cbiAgICAgIF90aGlzLm92ZXJmbG93ZWRJdGVtcyA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRTdW1XaWR0aCA9IDA7XG5cbiAgICAgIC8vIGluZGV4IGZvciBsYXN0IHZpc2libGUgY2hpbGQgaW4gaG9yaXpvbnRhbCBtb2RlXG4gICAgICB2YXIgbGFzdFZpc2libGVJbmRleCA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKF90aGlzLm9yaWdpbmFsVG90YWxXaWR0aCA+IHdpZHRoKSB7XG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSAtMTtcblxuICAgICAgICBfdGhpcy5jaGlsZHJlblNpemVzLmZvckVhY2goZnVuY3Rpb24gKGxpV2lkdGgpIHtcbiAgICAgICAgICBjdXJyZW50U3VtV2lkdGggKz0gbGlXaWR0aDtcbiAgICAgICAgICBpZiAoY3VycmVudFN1bVdpZHRoICsgX3RoaXMub3ZlcmZsb3dlZEluZGljYXRvcldpZHRoIDw9IHdpZHRoKSB7XG4gICAgICAgICAgICBsYXN0VmlzaWJsZUluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBsYXN0VmlzaWJsZUluZGV4OiBsYXN0VmlzaWJsZUluZGV4IH0pO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgRE9NV3JhcC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMuc2V0Q2hpbGRyZW5XaWR0aEFuZFJlc2l6ZSgpO1xuICAgIGlmICh0aGlzLnByb3BzLmxldmVsID09PSAxICYmIHRoaXMucHJvcHMubW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICB2YXIgbWVudVVsID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgICBpZiAoIW1lbnVVbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChfdGhpczIuc2V0Q2hpbGRyZW5XaWR0aEFuZFJlc2l6ZSk7XG4gICAgICB9KTtcblxuICAgICAgW10uc2xpY2UuY2FsbChtZW51VWwuY2hpbGRyZW4pLmNvbmNhdChtZW51VWwpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIF90aGlzMi5yZXNpemVPYnNlcnZlci5vYnNlcnZlKGVsKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgIFtdLnNsaWNlLmNhbGwobWVudVVsLmNoaWxkcmVuKS5jb25jYXQobWVudVVsKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgX3RoaXMyLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIF90aGlzMi5zZXRDaGlsZHJlbldpZHRoQW5kUmVzaXplKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShtZW51VWwsIHsgYXR0cmlidXRlczogZmFsc2UsIGNoaWxkTGlzdDogdHJ1ZSwgc3ViVHJlZTogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIERPTVdyYXAucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5tdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gbWVtb3JpemUgcmVuZGVyZWQgbWVudVNpemVcblxuXG4gIC8vIG9yaWdpbmFsIHNjcm9sbCBzaXplIG9mIHRoZSBsaXN0XG5cblxuICAvLyBjb3B5IG9mIG92ZXJmbG93ZWQgaXRlbXNcblxuXG4gIC8vIGNhY2hlIGl0ZW0gb2YgdGhlIG9yaWdpbmFsIGl0ZW1zIChzbyB3ZSBjYW4gdHJhY2sgdGhlIHNpemUgYW5kIG9yZGVyKVxuXG5cbiAgRE9NV3JhcC5wcm90b3R5cGUucmVuZGVyQ2hpbGRyZW4gPSBmdW5jdGlvbiByZW5kZXJDaGlsZHJlbihjaGlsZHJlbikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgLy8gbmVlZCB0byB0YWtlIGNhcmUgb2Ygb3ZlcmZsb3dlZCBpdGVtcyBpbiBob3Jpem9udGFsIG1vZGVcbiAgICB2YXIgbGFzdFZpc2libGVJbmRleCA9IHRoaXMuc3RhdGUubGFzdFZpc2libGVJbmRleDtcblxuICAgIHJldHVybiAoY2hpbGRyZW4gfHwgW10pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjaGlsZE5vZGUsIGluZGV4KSB7XG4gICAgICB2YXIgaXRlbSA9IGNoaWxkTm9kZTtcbiAgICAgIGlmIChfdGhpczMucHJvcHMubW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHZhciBvdmVyZmxvd2VkID0gX3RoaXMzLmdldE92ZXJmbG93ZWRTdWJNZW51SXRlbShjaGlsZE5vZGUucHJvcHMuZXZlbnRLZXksIFtdKTtcbiAgICAgICAgaWYgKGxhc3RWaXNpYmxlSW5kZXggIT09IHVuZGVmaW5lZCAmJiBfdGhpczMucHJvcHMuY2xhc3NOYW1lLmluZGV4T2YoX3RoaXMzLnByb3BzLnByZWZpeENscyArICctcm9vdCcpICE9PSAtMSkge1xuICAgICAgICAgIGlmIChpbmRleCA+IGxhc3RWaXNpYmxlSW5kZXgpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGROb2RlLFxuICAgICAgICAgICAgLy8g6L+Z6YeM5L+u5pS5IGV2ZW50S2V5IOaYr+S4uuS6humYsuatoumakOiXj+eKtuaAgeS4i+i/mOS8muinpuWPkSBvcGVua2V5cyDkuovku7ZcbiAgICAgICAgICAgIHsgc3R5bGU6IHsgdmlzaWJpbGl0eTogJ2hpZGRlbicgfSwgZXZlbnRLZXk6IGNoaWxkTm9kZS5wcm9wcy5ldmVudEtleSArICctaGlkZGVuJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4ID09PSBsYXN0VmlzaWJsZUluZGV4ICsgMSkge1xuICAgICAgICAgICAgX3RoaXMzLm92ZXJmbG93ZWRJdGVtcyA9IGNoaWxkcmVuLnNsaWNlKGxhc3RWaXNpYmxlSW5kZXggKyAxKS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjLFxuICAgICAgICAgICAgICAvLyBjaGlsZHJlbltpbmRleF0ua2V5IHdpbGwgYmVjb21lICcuJGtleScgaW4gY2xvbmUgYnkgZGVmYXVsdCxcbiAgICAgICAgICAgICAgLy8gd2UgaGF2ZSB0byBvdmVyd3JpdGUgd2l0aCB0aGUgY29ycmVjdCBrZXkgZXhwbGljaXRseVxuICAgICAgICAgICAgICB7IGtleTogYy5wcm9wcy5ldmVudEtleSwgbW9kZTogJ3ZlcnRpY2FsLWxlZnQnIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG92ZXJmbG93ZWQgPSBfdGhpczMuZ2V0T3ZlcmZsb3dlZFN1Yk1lbnVJdGVtKGNoaWxkTm9kZS5wcm9wcy5ldmVudEtleSwgX3RoaXMzLm92ZXJmbG93ZWRJdGVtcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJldCA9IFtdLmNvbmNhdChhY2MsIFtvdmVyZmxvd2VkLCBpdGVtXSk7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSBjaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgLy8gbmVlZCBhIHBsYWNlaG9sZGVyIGZvciBjYWxjdWxhdGluZyBvdmVyZmxvd2VkIGluZGljYXRvciB3aWR0aFxuICAgICAgICAgIHJldC5wdXNoKF90aGlzMy5nZXRPdmVyZmxvd2VkU3ViTWVudUl0ZW0oY2hpbGROb2RlLnByb3BzLmV2ZW50S2V5LCBbXSwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gW10uY29uY2F0KGFjYywgW2l0ZW1dKTtcbiAgICB9LCBbXSk7XG4gIH07XG5cbiAgRE9NV3JhcC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBoaWRkZW5DbGFzc05hbWUgPSBfcHJvcHMuaGlkZGVuQ2xhc3NOYW1lLFxuICAgICAgICB2aXNpYmxlID0gX3Byb3BzLnZpc2libGUsXG4gICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgIG92ZXJmbG93ZWRJbmRpY2F0b3IgPSBfcHJvcHMub3ZlcmZsb3dlZEluZGljYXRvcixcbiAgICAgICAgbW9kZSA9IF9wcm9wcy5tb2RlLFxuICAgICAgICBsZXZlbCA9IF9wcm9wcy5sZXZlbCxcbiAgICAgICAgVGFnID0gX3Byb3BzLnRhZyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHRoZW1lID0gX3Byb3BzLnRoZW1lLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydoaWRkZW5DbGFzc05hbWUnLCAndmlzaWJsZScsICdwcmVmaXhDbHMnLCAnb3ZlcmZsb3dlZEluZGljYXRvcicsICdtb2RlJywgJ2xldmVsJywgJ3RhZycsICdjaGlsZHJlbicsICd0aGVtZSddKTtcblxuICAgIGlmICghdmlzaWJsZSkge1xuICAgICAgcmVzdC5jbGFzc05hbWUgKz0gJyAnICsgaGlkZGVuQ2xhc3NOYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGFnLFxuICAgICAgcmVzdCxcbiAgICAgIHRoaXMucmVuZGVyQ2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbilcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBET01XcmFwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5ET01XcmFwLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIG1vZGU6IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnLCAndmVydGljYWwtbGVmdCcsICd2ZXJ0aWNhbC1yaWdodCcsICdpbmxpbmUnXSksXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgbGV2ZWw6IFByb3BUeXBlcy5udW1iZXIsXG4gIHRoZW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvdmVyZmxvd2VkSW5kaWNhdG9yOiBQcm9wVHlwZXMubm9kZSxcbiAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGhpZGRlbkNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdGFnOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuRE9NV3JhcC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ2RpdicsXG4gIGNsYXNzTmFtZTogJydcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERPTVdyYXA7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdtaW5pLXN0b3JlJztcbmltcG9ydCBLZXlDb2RlIGZyb20gJ3JjLXV0aWwvZXMvS2V5Q29kZSc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJ3JjLXV0aWwvZXMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZ2V0S2V5RnJvbUNoaWxkcmVuSW5kZXgsIGxvb3BNZW51SXRlbSwgbm9vcCwgbWVudUFsbFByb3BzIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCBET01XcmFwIGZyb20gJy4vRE9NV3JhcCc7XG5cbmZ1bmN0aW9uIGFsbERpc2FibGVkKGFycikge1xuICBpZiAoIWFyci5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gYXJyLmV2ZXJ5KGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICEhYy5wcm9wcy5kaXNhYmxlZDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUtleShzdG9yZSwgbWVudUlkLCBhY3RpdmVLZXkpIHtcbiAgdmFyIF9leHRlbmRzMjtcblxuICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBzdG9yZS5zZXRTdGF0ZSh7XG4gICAgYWN0aXZlS2V5OiBfZXh0ZW5kcyh7fSwgc3RhdGUuYWN0aXZlS2V5LCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMlttZW51SWRdID0gYWN0aXZlS2V5LCBfZXh0ZW5kczIpKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRLZXkocHJvcHMpIHtcbiAgLy8gd2hlbiBldmVudEtleSBub3QgYXZhaWxhYmxlICxpdCdzIG1lbnUgYW5kIHJldHVybiBtZW51IGlkICcwLW1lbnUtJ1xuICByZXR1cm4gcHJvcHMuZXZlbnRLZXkgfHwgJzAtbWVudS0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aXZlS2V5KHByb3BzLCBvcmlnaW5hbEFjdGl2ZUtleSkge1xuICB2YXIgYWN0aXZlS2V5ID0gb3JpZ2luYWxBY3RpdmVLZXk7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgZXZlbnRLZXkgPSBwcm9wcy5ldmVudEtleTtcblxuICBpZiAoYWN0aXZlS2V5KSB7XG4gICAgdmFyIGZvdW5kID0gdm9pZCAwO1xuICAgIGxvb3BNZW51SXRlbShjaGlsZHJlbiwgZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgIGlmIChjICYmICFjLnByb3BzLmRpc2FibGVkICYmIGFjdGl2ZUtleSA9PT0gZ2V0S2V5RnJvbUNoaWxkcmVuSW5kZXgoYywgZXZlbnRLZXksIGkpKSB7XG4gICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoZm91bmQpIHtcbiAgICAgIHJldHVybiBhY3RpdmVLZXk7XG4gICAgfVxuICB9XG4gIGFjdGl2ZUtleSA9IG51bGw7XG4gIGlmIChwcm9wcy5kZWZhdWx0QWN0aXZlRmlyc3QpIHtcbiAgICBsb29wTWVudUl0ZW0oY2hpbGRyZW4sIGZ1bmN0aW9uIChjLCBpKSB7XG4gICAgICBpZiAoIWFjdGl2ZUtleSAmJiBjICYmICFjLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIGFjdGl2ZUtleSA9IGdldEtleUZyb21DaGlsZHJlbkluZGV4KGMsIGV2ZW50S2V5LCBpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYWN0aXZlS2V5O1xuICB9XG4gIHJldHVybiBhY3RpdmVLZXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlUmVmKGMpIHtcbiAgaWYgKGMpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluc3RhbmNlQXJyYXkuaW5kZXhPZihjKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAvLyB1cGRhdGUgY29tcG9uZW50IGlmIGl0J3MgYWxyZWFkeSBpbnNpZGUgaW5zdGFuY2VBcnJheVxuICAgICAgdGhpcy5pbnN0YW5jZUFycmF5W2luZGV4XSA9IGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGFkZCBjb21wb25lbnQgaWYgaXQncyBub3QgaW4gaW5zdGFuY2VBcnJheSB5ZXQ7XG4gICAgICB0aGlzLmluc3RhbmNlQXJyYXkucHVzaChjKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHZhciBTdWJQb3B1cE1lbnUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3ViUG9wdXBNZW51LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdWJQb3B1cE1lbnUocHJvcHMpIHtcbiAgICB2YXIgX2V4dGVuZHMzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1YlBvcHVwTWVudSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICBwcm9wcy5zdG9yZS5zZXRTdGF0ZSh7XG4gICAgICBhY3RpdmVLZXk6IF9leHRlbmRzKHt9LCBwcm9wcy5zdG9yZS5nZXRTdGF0ZSgpLmFjdGl2ZUtleSwgKF9leHRlbmRzMyA9IHt9LCBfZXh0ZW5kczNbcHJvcHMuZXZlbnRLZXldID0gZ2V0QWN0aXZlS2V5KHByb3BzLCBwcm9wcy5hY3RpdmVLZXkpLCBfZXh0ZW5kczMpKVxuICAgIH0pO1xuXG4gICAgX3RoaXMuaW5zdGFuY2VBcnJheSA9IFtdO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFN1YlBvcHVwTWVudS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBpbnZva2UgY3VzdG9taXplZCByZWYgdG8gZXhwb3NlIGNvbXBvbmVudCB0byBtaXhpblxuICAgIGlmICh0aGlzLnByb3BzLm1hbnVhbFJlZikge1xuICAgICAgdGhpcy5wcm9wcy5tYW51YWxSZWYodGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIFN1YlBvcHVwTWVudS5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnZpc2libGUgfHwgbmV4dFByb3BzLnZpc2libGU7XG4gIH07XG5cbiAgU3ViUG9wdXBNZW51LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgb3JpZ2luYWxBY3RpdmVLZXkgPSAnYWN0aXZlS2V5JyBpbiBwcm9wcyA/IHByb3BzLmFjdGl2ZUtleSA6IHByb3BzLnN0b3JlLmdldFN0YXRlKCkuYWN0aXZlS2V5W2dldEV2ZW50S2V5KHByb3BzKV07XG4gICAgdmFyIGFjdGl2ZUtleSA9IGdldEFjdGl2ZUtleShwcm9wcywgb3JpZ2luYWxBY3RpdmVLZXkpO1xuICAgIGlmIChhY3RpdmVLZXkgIT09IG9yaWdpbmFsQWN0aXZlS2V5KSB7XG4gICAgICB1cGRhdGVBY3RpdmVLZXkocHJvcHMuc3RvcmUsIGdldEV2ZW50S2V5KHByb3BzKSwgYWN0aXZlS2V5KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gYWxsIGtleWJvYXJkIGV2ZW50cyBjYWxsYmFja3MgcnVuIGZyb20gaGVyZSBhdCBmaXJzdFxuXG5cbiAgU3ViUG9wdXBNZW51LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXModGhpcy5wcm9wcywgW10pO1xuXG4gICAgdGhpcy5pbnN0YW5jZUFycmF5ID0gW107XG4gICAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXMocHJvcHMucHJlZml4Q2xzLCBwcm9wcy5jbGFzc05hbWUsIHByb3BzLnByZWZpeENscyArICctJyArIHByb3BzLm1vZGUpO1xuICAgIHZhciBkb21Qcm9wcyA9IHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgLy8gcm9sZSBjb3VsZCBiZSAnc2VsZWN0JyBhbmQgYnkgZGVmYXVsdCBzZXQgdG8gbWVudVxuICAgICAgcm9sZTogcHJvcHMucm9sZSB8fCAnbWVudSdcbiAgICB9O1xuICAgIGlmIChwcm9wcy5pZCkge1xuICAgICAgZG9tUHJvcHMuaWQgPSBwcm9wcy5pZDtcbiAgICB9XG4gICAgaWYgKHByb3BzLmZvY3VzYWJsZSkge1xuICAgICAgZG9tUHJvcHMudGFiSW5kZXggPSAnMCc7XG4gICAgICBkb21Qcm9wcy5vbktleURvd24gPSB0aGlzLm9uS2V5RG93bjtcbiAgICB9XG4gICAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgICAgZXZlbnRLZXkgPSBwcm9wcy5ldmVudEtleSxcbiAgICAgICAgdmlzaWJsZSA9IHByb3BzLnZpc2libGUsXG4gICAgICAgIGxldmVsID0gcHJvcHMubGV2ZWwsXG4gICAgICAgIG1vZGUgPSBwcm9wcy5tb2RlLFxuICAgICAgICBvdmVyZmxvd2VkSW5kaWNhdG9yID0gcHJvcHMub3ZlcmZsb3dlZEluZGljYXRvcixcbiAgICAgICAgdGhlbWUgPSBwcm9wcy50aGVtZTtcblxuICAgIG1lbnVBbGxQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBkZWxldGUgcHJvcHNba2V5XTtcbiAgICB9KTtcblxuICAgIC8vIE90aGVyd2lzZSwgdGhlIHByb3BhZ2F0ZWQgY2xpY2sgZXZlbnQgd2lsbCB0cmlnZ2VyIGFub3RoZXIgb25DbGlja1xuICAgIGRlbGV0ZSBwcm9wcy5vbkNsaWNrO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEVTTGludCBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGtub3cgdGhhdCB0aGUgdHlwZSBvZiBgY2hpbGRyZW5gIHdhcyBjaGVja2VkLlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIERPTVdyYXAsXG4gICAgICAgIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICAgIG1vZGU6IG1vZGUsXG4gICAgICAgICAgdGFnOiAndWwnLFxuICAgICAgICAgIGxldmVsOiBsZXZlbCxcbiAgICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgICAgaGlkZGVuQ2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLWhpZGRlbicsXG4gICAgICAgICAgdmlzaWJsZTogdmlzaWJsZSxcbiAgICAgICAgICBvdmVyZmxvd2VkSW5kaWNhdG9yOiBvdmVyZmxvd2VkSW5kaWNhdG9yXG4gICAgICAgIH0sIGRvbVByb3BzKSxcbiAgICAgICAgUmVhY3QuQ2hpbGRyZW4ubWFwKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoYywgaSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIucmVuZGVyTWVudUl0ZW0oYywgaSwgZXZlbnRLZXkgfHwgJzAtbWVudS0nKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC8qZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gU3ViUG9wdXBNZW51O1xufShSZWFjdC5Db21wb25lbnQpO1xuU3ViUG9wdXBNZW51LnByb3BUeXBlcyA9IHtcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25EZXNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uT3BlbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRGVzdHJveTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9wZW5UcmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb3BlbkFuaW1hdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICBvcGVuS2V5czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIHZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgcGFyZW50TWVudTogUHJvcFR5cGVzLm9iamVjdCxcbiAgZXZlbnRLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmNcbiAgfSksXG5cbiAgLy8gYWRkaW5nIGluIHJlZmFjdG9yXG4gIGZvY3VzYWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGRlZmF1bHRBY3RpdmVGaXJzdDogUHJvcFR5cGVzLmJvb2wsXG4gIGFjdGl2ZUtleTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc2VsZWN0ZWRLZXlzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgZGVmYXVsdFNlbGVjdGVkS2V5czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIGRlZmF1bHRPcGVuS2V5czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIGxldmVsOiBQcm9wVHlwZXMubnVtYmVyLFxuICBtb2RlOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ3ZlcnRpY2FsLWxlZnQnLCAndmVydGljYWwtcmlnaHQnLCAnaW5saW5lJ10pLFxuICB0cmlnZ2VyU3ViTWVudUFjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnY2xpY2snLCAnaG92ZXInXSksXG4gIGlubGluZUluZGVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICBtYW51YWxSZWY6IFByb3BUeXBlcy5mdW5jLFxuICBpdGVtSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGV4cGFuZEljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pXG59O1xuU3ViUG9wdXBNZW51LmRlZmF1bHRQcm9wcyA9IHtcbiAgcHJlZml4Q2xzOiAncmMtbWVudScsXG4gIGNsYXNzTmFtZTogJycsXG4gIG1vZGU6ICd2ZXJ0aWNhbCcsXG4gIGxldmVsOiAxLFxuICBpbmxpbmVJbmRlbnQ6IDI0LFxuICB2aXNpYmxlOiB0cnVlLFxuICBmb2N1c2FibGU6IHRydWUsXG4gIHN0eWxlOiB7fSxcbiAgbWFudWFsUmVmOiBub29wXG59O1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gIHRoaXMub25LZXlEb3duID0gZnVuY3Rpb24gKGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGU7XG4gICAgdmFyIGhhbmRsZWQgPSB2b2lkIDA7XG4gICAgX3RoaXMzLmdldEZsYXRJbnN0YW5jZUFycmF5KCkuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICBpZiAob2JqICYmIG9iai5wcm9wcy5hY3RpdmUgJiYgb2JqLm9uS2V5RG93bikge1xuICAgICAgICBoYW5kbGVkID0gb2JqLm9uS2V5RG93bihlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaGFuZGxlZCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHZhciBhY3RpdmVJdGVtID0gbnVsbDtcbiAgICBpZiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5VUCB8fCBrZXlDb2RlID09PSBLZXlDb2RlLkRPV04pIHtcbiAgICAgIGFjdGl2ZUl0ZW0gPSBfdGhpczMuc3RlcChrZXlDb2RlID09PSBLZXlDb2RlLlVQID8gLTEgOiAxKTtcbiAgICB9XG4gICAgaWYgKGFjdGl2ZUl0ZW0pIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHVwZGF0ZUFjdGl2ZUtleShfdGhpczMucHJvcHMuc3RvcmUsIGdldEV2ZW50S2V5KF90aGlzMy5wcm9wcyksIGFjdGl2ZUl0ZW0ucHJvcHMuZXZlbnRLZXkpO1xuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrKGFjdGl2ZUl0ZW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbkl0ZW1Ib3ZlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGtleSA9IGUua2V5LFxuICAgICAgICBob3ZlciA9IGUuaG92ZXI7XG5cbiAgICB1cGRhdGVBY3RpdmVLZXkoX3RoaXMzLnByb3BzLnN0b3JlLCBnZXRFdmVudEtleShfdGhpczMucHJvcHMpLCBob3ZlciA/IGtleSA6IG51bGwpO1xuICB9O1xuXG4gIHRoaXMub25EZXNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3RJbmZvKSB7XG4gICAgX3RoaXMzLnByb3BzLm9uRGVzZWxlY3Qoc2VsZWN0SW5mbyk7XG4gIH07XG5cbiAgdGhpcy5vblNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3RJbmZvKSB7XG4gICAgX3RoaXMzLnByb3BzLm9uU2VsZWN0KHNlbGVjdEluZm8pO1xuICB9O1xuXG4gIHRoaXMub25DbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgX3RoaXMzLnByb3BzLm9uQ2xpY2soZSk7XG4gIH07XG5cbiAgdGhpcy5vbk9wZW5DaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzMy5wcm9wcy5vbk9wZW5DaGFuZ2UoZSk7XG4gIH07XG5cbiAgdGhpcy5vbkRlc3Ryb3kgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBfdGhpczMucHJvcHMub25EZXN0cm95KGtleSk7XG4gIH07XG5cbiAgdGhpcy5nZXRGbGF0SW5zdGFuY2VBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMzLmluc3RhbmNlQXJyYXk7XG4gIH07XG5cbiAgdGhpcy5nZXRPcGVuVHJhbnNpdGlvbk5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMy5wcm9wcy5vcGVuVHJhbnNpdGlvbk5hbWU7XG4gIH07XG5cbiAgdGhpcy5zdGVwID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xuICAgIHZhciBjaGlsZHJlbiA9IF90aGlzMy5nZXRGbGF0SW5zdGFuY2VBcnJheSgpO1xuICAgIHZhciBhY3RpdmVLZXkgPSBfdGhpczMucHJvcHMuc3RvcmUuZ2V0U3RhdGUoKS5hY3RpdmVLZXlbZ2V0RXZlbnRLZXkoX3RoaXMzLnByb3BzKV07XG4gICAgdmFyIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBpZiAoIWxlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChkaXJlY3Rpb24gPCAwKSB7XG4gICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdCgpLnJldmVyc2UoKTtcbiAgICB9XG4gICAgLy8gZmluZCBjdXJyZW50IGFjdGl2ZUluZGV4XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gLTE7XG4gICAgY2hpbGRyZW4uZXZlcnkoZnVuY3Rpb24gKGMsIGNpKSB7XG4gICAgICBpZiAoYyAmJiBjLnByb3BzLmV2ZW50S2V5ID09PSBhY3RpdmVLZXkpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBjaTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgaWYgKCFfdGhpczMucHJvcHMuZGVmYXVsdEFjdGl2ZUZpcnN0ICYmIGFjdGl2ZUluZGV4ICE9PSAtMSAmJiBhbGxEaXNhYmxlZChjaGlsZHJlbi5zbGljZShhY3RpdmVJbmRleCwgbGVuIC0gMSkpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB2YXIgc3RhcnQgPSAoYWN0aXZlSW5kZXggKyAxKSAlIGxlbjtcbiAgICB2YXIgaSA9IHN0YXJ0O1xuXG4gICAgZG8ge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoIWNoaWxkIHx8IGNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIGkgPSAoaSArIDEpICUgbGVuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGkgIT09IHN0YXJ0KTtcblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHRoaXMucmVuZGVyQ29tbW9uTWVudUl0ZW0gPSBmdW5jdGlvbiAoY2hpbGQsIGksIGV4dHJhUHJvcHMpIHtcbiAgICB2YXIgc3RhdGUgPSBfdGhpczMucHJvcHMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczMucHJvcHM7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21DaGlsZHJlbkluZGV4KGNoaWxkLCBwcm9wcy5ldmVudEtleSwgaSk7XG4gICAgdmFyIGNoaWxkUHJvcHMgPSBjaGlsZC5wcm9wcztcbiAgICB2YXIgaXNBY3RpdmUgPSBrZXkgPT09IHN0YXRlLmFjdGl2ZUtleTtcbiAgICB2YXIgbmV3Q2hpbGRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIG1vZGU6IGNoaWxkUHJvcHMubW9kZSB8fCBwcm9wcy5tb2RlLFxuICAgICAgbGV2ZWw6IHByb3BzLmxldmVsLFxuICAgICAgaW5saW5lSW5kZW50OiBwcm9wcy5pbmxpbmVJbmRlbnQsXG4gICAgICByZW5kZXJNZW51SXRlbTogX3RoaXMzLnJlbmRlck1lbnVJdGVtLFxuICAgICAgcm9vdFByZWZpeENsczogcHJvcHMucHJlZml4Q2xzLFxuICAgICAgaW5kZXg6IGksXG4gICAgICBwYXJlbnRNZW51OiBwcm9wcy5wYXJlbnRNZW51LFxuICAgICAgLy8gY3VzdG9taXplZCByZWYgZnVuY3Rpb24sIG5lZWQgdG8gYmUgaW52b2tlZCBtYW51YWxseSBpbiBjaGlsZCdzIGNvbXBvbmVudERpZE1vdW50XG4gICAgICBtYW51YWxSZWY6IGNoaWxkUHJvcHMuZGlzYWJsZWQgPyB1bmRlZmluZWQgOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oY2hpbGQucmVmLCBzYXZlUmVmLmJpbmQoX3RoaXMzKSksXG4gICAgICBldmVudEtleToga2V5LFxuICAgICAgYWN0aXZlOiAhY2hpbGRQcm9wcy5kaXNhYmxlZCAmJiBpc0FjdGl2ZSxcbiAgICAgIG11bHRpcGxlOiBwcm9wcy5tdWx0aXBsZSxcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAoY2hpbGRQcm9wcy5vbkNsaWNrIHx8IG5vb3ApKGUpO1xuICAgICAgICBfdGhpczMub25DbGljayhlKTtcbiAgICAgIH0sXG4gICAgICBvbkl0ZW1Ib3ZlcjogX3RoaXMzLm9uSXRlbUhvdmVyLFxuICAgICAgb3BlblRyYW5zaXRpb25OYW1lOiBfdGhpczMuZ2V0T3BlblRyYW5zaXRpb25OYW1lKCksXG4gICAgICBvcGVuQW5pbWF0aW9uOiBwcm9wcy5vcGVuQW5pbWF0aW9uLFxuICAgICAgc3ViTWVudU9wZW5EZWxheTogcHJvcHMuc3ViTWVudU9wZW5EZWxheSxcbiAgICAgIHN1Yk1lbnVDbG9zZURlbGF5OiBwcm9wcy5zdWJNZW51Q2xvc2VEZWxheSxcbiAgICAgIGZvcmNlU3ViTWVudVJlbmRlcjogcHJvcHMuZm9yY2VTdWJNZW51UmVuZGVyLFxuICAgICAgb25PcGVuQ2hhbmdlOiBfdGhpczMub25PcGVuQ2hhbmdlLFxuICAgICAgb25EZXNlbGVjdDogX3RoaXMzLm9uRGVzZWxlY3QsXG4gICAgICBvblNlbGVjdDogX3RoaXMzLm9uU2VsZWN0LFxuICAgICAgYnVpbHRpblBsYWNlbWVudHM6IHByb3BzLmJ1aWx0aW5QbGFjZW1lbnRzLFxuICAgICAgaXRlbUljb246IGNoaWxkUHJvcHMuaXRlbUljb24gfHwgX3RoaXMzLnByb3BzLml0ZW1JY29uLFxuICAgICAgZXhwYW5kSWNvbjogY2hpbGRQcm9wcy5leHBhbmRJY29uIHx8IF90aGlzMy5wcm9wcy5leHBhbmRJY29uXG4gICAgfSwgZXh0cmFQcm9wcyk7XG4gICAgaWYgKHByb3BzLm1vZGUgPT09ICdpbmxpbmUnKSB7XG4gICAgICBuZXdDaGlsZFByb3BzLnRyaWdnZXJTdWJNZW51QWN0aW9uID0gJ2NsaWNrJztcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gIH07XG5cbiAgdGhpcy5yZW5kZXJNZW51SXRlbSA9IGZ1bmN0aW9uIChjLCBpLCBzdWJNZW51S2V5KSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHN0YXRlID0gX3RoaXMzLnByb3BzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdmFyIGV4dHJhUHJvcHMgPSB7XG4gICAgICBvcGVuS2V5czogc3RhdGUub3BlbktleXMsXG4gICAgICBzZWxlY3RlZEtleXM6IHN0YXRlLnNlbGVjdGVkS2V5cyxcbiAgICAgIHRyaWdnZXJTdWJNZW51QWN0aW9uOiBfdGhpczMucHJvcHMudHJpZ2dlclN1Yk1lbnVBY3Rpb24sXG4gICAgICBzdWJNZW51S2V5OiBzdWJNZW51S2V5XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXMzLnJlbmRlckNvbW1vbk1lbnVJdGVtKGMsIGksIGV4dHJhUHJvcHMpO1xuICB9O1xufTtcblxudmFyIGNvbm5lY3RlZCA9IGNvbm5lY3QoKShTdWJQb3B1cE1lbnUpO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0ZWQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFByb3ZpZGVyLCBjcmVhdGUgfSBmcm9tICdtaW5pLXN0b3JlJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgU3ViUG9wdXBNZW51LCBnZXRBY3RpdmVLZXkgfSBmcm9tICcuL1N1YlBvcHVwTWVudSc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsJztcblxudmFyIE1lbnUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVudSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVudShwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKTtcblxuICAgIF90aGlzLmlzUm9vdE1lbnUgPSB0cnVlO1xuXG4gICAgdmFyIHNlbGVjdGVkS2V5cyA9IHByb3BzLmRlZmF1bHRTZWxlY3RlZEtleXM7XG4gICAgdmFyIG9wZW5LZXlzID0gcHJvcHMuZGVmYXVsdE9wZW5LZXlzO1xuICAgIGlmICgnc2VsZWN0ZWRLZXlzJyBpbiBwcm9wcykge1xuICAgICAgc2VsZWN0ZWRLZXlzID0gcHJvcHMuc2VsZWN0ZWRLZXlzIHx8IFtdO1xuICAgIH1cbiAgICBpZiAoJ29wZW5LZXlzJyBpbiBwcm9wcykge1xuICAgICAgb3BlbktleXMgPSBwcm9wcy5vcGVuS2V5cyB8fCBbXTtcbiAgICB9XG5cbiAgICBfdGhpcy5zdG9yZSA9IGNyZWF0ZSh7XG4gICAgICBzZWxlY3RlZEtleXM6IHNlbGVjdGVkS2V5cyxcbiAgICAgIG9wZW5LZXlzOiBvcGVuS2V5cyxcbiAgICAgIGFjdGl2ZUtleTogeyAnMC1tZW51LSc6IGdldEFjdGl2ZUtleShwcm9wcywgcHJvcHMuYWN0aXZlS2V5KSB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTWVudS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZU1pbmlTdG9yZSgpO1xuICB9O1xuXG4gIE1lbnUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZU1pbmlTdG9yZSgpO1xuICB9O1xuXG4gIC8vIG9uS2V5RG93biBuZWVkcyB0byBiZSBleHBvc2VkIGFzIGEgaW5zdGFuY2UgbWV0aG9kXG4gIC8vIGUuZy4sIGluIHJjLXNlbGVjdCwgd2UgbmVlZCB0byBuYXZpZ2F0ZSBtZW51IGl0ZW0gd2hpbGVcbiAgLy8gY3VycmVudCBhY3RpdmUgaXRlbSBpcyByYy1zZWxlY3QgaW5wdXQgYm94IHJhdGhlciB0aGFuIHRoZSBtZW51IGl0c2VsZlxuXG5cbiAgTWVudS5wcm90b3R5cGUudXBkYXRlTWluaVN0b3JlID0gZnVuY3Rpb24gdXBkYXRlTWluaVN0b3JlKCkge1xuICAgIGlmICgnc2VsZWN0ZWRLZXlzJyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICB0aGlzLnN0b3JlLnNldFN0YXRlKHtcbiAgICAgICAgc2VsZWN0ZWRLZXlzOiB0aGlzLnByb3BzLnNlbGVjdGVkS2V5cyB8fCBbXVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICgnb3BlbktleXMnIGluIHRoaXMucHJvcHMpIHtcbiAgICAgIHRoaXMuc3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuS2V5czogdGhpcy5wcm9wcy5vcGVuS2V5cyB8fCBbXVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIE1lbnUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyh0aGlzLnByb3BzLCBbXSk7XG5cbiAgICBwcm9wcy5jbGFzc05hbWUgKz0gJyAnICsgcHJvcHMucHJlZml4Q2xzICsgJy1yb290JztcbiAgICBwcm9wcyA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgb25DbGljazogdGhpcy5vbkNsaWNrLFxuICAgICAgb25PcGVuQ2hhbmdlOiB0aGlzLm9uT3BlbkNoYW5nZSxcbiAgICAgIG9uRGVzZWxlY3Q6IHRoaXMub25EZXNlbGVjdCxcbiAgICAgIG9uU2VsZWN0OiB0aGlzLm9uU2VsZWN0LFxuICAgICAgb3BlblRyYW5zaXRpb25OYW1lOiB0aGlzLmdldE9wZW5UcmFuc2l0aW9uTmFtZSgpLFxuICAgICAgcGFyZW50TWVudTogdGhpc1xuICAgIH0pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgUHJvdmlkZXIsXG4gICAgICB7IHN0b3JlOiB0aGlzLnN0b3JlIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBTdWJQb3B1cE1lbnUsXG4gICAgICAgIF9leHRlbmRzKHt9LCBwcm9wcywgeyByZWY6IGZ1bmN0aW9uIHJlZihjKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmlubmVyTWVudSA9IGM7XG4gICAgICAgICAgfSB9KSxcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbnU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbnUucHJvcFR5cGVzID0ge1xuICBkZWZhdWx0U2VsZWN0ZWRLZXlzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgZGVmYXVsdEFjdGl2ZUZpcnN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2VsZWN0ZWRLZXlzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgZGVmYXVsdE9wZW5LZXlzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgb3BlbktleXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICBtb2RlOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ3ZlcnRpY2FsLWxlZnQnLCAndmVydGljYWwtcmlnaHQnLCAnaW5saW5lJ10pLFxuICBnZXRQb3B1cENvbnRhaW5lcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRGVzZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbkRlc3Ryb3k6IFByb3BUeXBlcy5mdW5jLFxuICBvcGVuVHJhbnNpdGlvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9wZW5BbmltYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgc3ViTWVudU9wZW5EZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgc3ViTWVudUNsb3NlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIGZvcmNlU3ViTWVudVJlbmRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIHRyaWdnZXJTdWJNZW51QWN0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsZXZlbDogUHJvcFR5cGVzLm51bWJlcixcbiAgc2VsZWN0YWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGFjdGl2ZUtleTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBidWlsdGluUGxhY2VtZW50czogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXRlbUljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBleHBhbmRJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgb3ZlcmZsb3dlZEluZGljYXRvcjogUHJvcFR5cGVzLm5vZGVcbn07XG5NZW51LmRlZmF1bHRQcm9wcyA9IHtcbiAgc2VsZWN0YWJsZTogdHJ1ZSxcbiAgb25DbGljazogbm9vcCxcbiAgb25TZWxlY3Q6IG5vb3AsXG4gIG9uT3BlbkNoYW5nZTogbm9vcCxcbiAgb25EZXNlbGVjdDogbm9vcCxcbiAgZGVmYXVsdFNlbGVjdGVkS2V5czogW10sXG4gIGRlZmF1bHRPcGVuS2V5czogW10sXG4gIHN1Yk1lbnVPcGVuRGVsYXk6IDAuMSxcbiAgc3ViTWVudUNsb3NlRGVsYXk6IDAuMSxcbiAgdHJpZ2dlclN1Yk1lbnVBY3Rpb246ICdob3ZlcicsXG4gIHByZWZpeENsczogJ3JjLW1lbnUnLFxuICBjbGFzc05hbWU6ICcnLFxuICBtb2RlOiAndmVydGljYWwnLFxuICBzdHlsZToge30sXG4gIGJ1aWx0aW5QbGFjZW1lbnRzOiB7fSxcbiAgb3ZlcmZsb3dlZEluZGljYXRvcjogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnc3BhbicsXG4gICAgbnVsbCxcbiAgICAnXFx4QjdcXHhCN1xceEI3J1xuICApXG59O1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gIHRoaXMub25TZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0SW5mbykge1xuICAgIHZhciBwcm9wcyA9IF90aGlzMy5wcm9wcztcbiAgICBpZiAocHJvcHMuc2VsZWN0YWJsZSkge1xuICAgICAgLy8gcm9vdCBtZW51XG4gICAgICB2YXIgc2VsZWN0ZWRLZXlzID0gX3RoaXMzLnN0b3JlLmdldFN0YXRlKCkuc2VsZWN0ZWRLZXlzO1xuICAgICAgdmFyIHNlbGVjdGVkS2V5ID0gc2VsZWN0SW5mby5rZXk7XG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgc2VsZWN0ZWRLZXlzID0gc2VsZWN0ZWRLZXlzLmNvbmNhdChbc2VsZWN0ZWRLZXldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkS2V5cyA9IFtzZWxlY3RlZEtleV07XG4gICAgICB9XG4gICAgICBpZiAoISgnc2VsZWN0ZWRLZXlzJyBpbiBwcm9wcykpIHtcbiAgICAgICAgX3RoaXMzLnN0b3JlLnNldFN0YXRlKHtcbiAgICAgICAgICBzZWxlY3RlZEtleXM6IHNlbGVjdGVkS2V5c1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHByb3BzLm9uU2VsZWN0KF9leHRlbmRzKHt9LCBzZWxlY3RJbmZvLCB7XG4gICAgICAgIHNlbGVjdGVkS2V5czogc2VsZWN0ZWRLZXlzXG4gICAgICB9KSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25DbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgX3RoaXMzLnByb3BzLm9uQ2xpY2soZSk7XG4gIH07XG5cbiAgdGhpcy5vbktleURvd24gPSBmdW5jdGlvbiAoZSwgY2FsbGJhY2spIHtcbiAgICBfdGhpczMuaW5uZXJNZW51LmdldFdyYXBwZWRJbnN0YW5jZSgpLm9uS2V5RG93bihlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgdGhpcy5vbk9wZW5DaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczMucHJvcHM7XG4gICAgdmFyIG9wZW5LZXlzID0gX3RoaXMzLnN0b3JlLmdldFN0YXRlKCkub3BlbktleXMuY29uY2F0KCk7XG4gICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgcHJvY2Vzc1NpbmdsZSA9IGZ1bmN0aW9uIHByb2Nlc3NTaW5nbGUoZSkge1xuICAgICAgdmFyIG9uZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIGlmIChlLm9wZW4pIHtcbiAgICAgICAgb25lQ2hhbmdlZCA9IG9wZW5LZXlzLmluZGV4T2YoZS5rZXkpID09PSAtMTtcbiAgICAgICAgaWYgKG9uZUNoYW5nZWQpIHtcbiAgICAgICAgICBvcGVuS2V5cy5wdXNoKGUua2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGluZGV4ID0gb3BlbktleXMuaW5kZXhPZihlLmtleSk7XG4gICAgICAgIG9uZUNoYW5nZWQgPSBpbmRleCAhPT0gLTE7XG4gICAgICAgIGlmIChvbmVDaGFuZ2VkKSB7XG4gICAgICAgICAgb3BlbktleXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hhbmdlZCA9IGNoYW5nZWQgfHwgb25lQ2hhbmdlZDtcbiAgICB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgLy8gYmF0Y2ggY2hhbmdlIGNhbGxcbiAgICAgIGV2ZW50LmZvckVhY2gocHJvY2Vzc1NpbmdsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3NTaW5nbGUoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgaWYgKCEoJ29wZW5LZXlzJyBpbiBfdGhpczMucHJvcHMpKSB7XG4gICAgICAgIF90aGlzMy5zdG9yZS5zZXRTdGF0ZSh7IG9wZW5LZXlzOiBvcGVuS2V5cyB9KTtcbiAgICAgIH1cbiAgICAgIHByb3BzLm9uT3BlbkNoYW5nZShvcGVuS2V5cyk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25EZXNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3RJbmZvKSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMzLnByb3BzO1xuICAgIGlmIChwcm9wcy5zZWxlY3RhYmxlKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRLZXlzID0gX3RoaXMzLnN0b3JlLmdldFN0YXRlKCkuc2VsZWN0ZWRLZXlzLmNvbmNhdCgpO1xuICAgICAgdmFyIHNlbGVjdGVkS2V5ID0gc2VsZWN0SW5mby5rZXk7XG4gICAgICB2YXIgaW5kZXggPSBzZWxlY3RlZEtleXMuaW5kZXhPZihzZWxlY3RlZEtleSk7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHNlbGVjdGVkS2V5cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgaWYgKCEoJ3NlbGVjdGVkS2V5cycgaW4gcHJvcHMpKSB7XG4gICAgICAgIF90aGlzMy5zdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2VsZWN0ZWRLZXlzOiBzZWxlY3RlZEtleXNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBwcm9wcy5vbkRlc2VsZWN0KF9leHRlbmRzKHt9LCBzZWxlY3RJbmZvLCB7XG4gICAgICAgIHNlbGVjdGVkS2V5czogc2VsZWN0ZWRLZXlzXG4gICAgICB9KSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZ2V0T3BlblRyYW5zaXRpb25OYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9wcyA9IF90aGlzMy5wcm9wcztcbiAgICB2YXIgdHJhbnNpdGlvbk5hbWUgPSBwcm9wcy5vcGVuVHJhbnNpdGlvbk5hbWU7XG4gICAgdmFyIGFuaW1hdGlvbk5hbWUgPSBwcm9wcy5vcGVuQW5pbWF0aW9uO1xuICAgIGlmICghdHJhbnNpdGlvbk5hbWUgJiYgdHlwZW9mIGFuaW1hdGlvbk5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cmFuc2l0aW9uTmFtZSA9IHByb3BzLnByZWZpeENscyArICctb3Blbi0nICsgYW5pbWF0aW9uTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zaXRpb25OYW1lO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVudTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgS2V5Q29kZSBmcm9tICdyYy11dGlsL2VzL0tleUNvZGUnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgc2Nyb2xsSW50b1ZpZXcgZnJvbSAnZG9tLXNjcm9sbC1pbnRvLXZpZXcnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ21pbmktc3RvcmUnO1xuaW1wb3J0IHsgbm9vcCwgbWVudUFsbFByb3BzIH0gZnJvbSAnLi91dGlsJztcblxuLyogZXNsaW50IHJlYWN0L25vLWlzLW1vdW50ZWQ6MCAqL1xuXG5leHBvcnQgdmFyIE1lbnVJdGVtID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbnVJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51SXRlbShwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51SXRlbSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIga2V5Q29kZSA9IGUua2V5Q29kZTtcbiAgICAgIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLkVOVEVSKSB7XG4gICAgICAgIF90aGlzLm9uQ2xpY2soZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbk1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZXZlbnRLZXkgPSBfdGhpcyRwcm9wcy5ldmVudEtleSxcbiAgICAgICAgICBvbkl0ZW1Ib3ZlciA9IF90aGlzJHByb3BzLm9uSXRlbUhvdmVyLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZSA9IF90aGlzJHByb3BzLm9uTW91c2VMZWF2ZTtcblxuICAgICAgb25JdGVtSG92ZXIoe1xuICAgICAgICBrZXk6IGV2ZW50S2V5LFxuICAgICAgICBob3ZlcjogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgb25Nb3VzZUxlYXZlKHtcbiAgICAgICAga2V5OiBldmVudEtleSxcbiAgICAgICAgZG9tRXZlbnQ6IGVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbk1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGV2ZW50S2V5ID0gX3RoaXMkcHJvcHMyLmV2ZW50S2V5LFxuICAgICAgICAgIG9uSXRlbUhvdmVyID0gX3RoaXMkcHJvcHMyLm9uSXRlbUhvdmVyLFxuICAgICAgICAgIG9uTW91c2VFbnRlciA9IF90aGlzJHByb3BzMi5vbk1vdXNlRW50ZXI7XG5cbiAgICAgIG9uSXRlbUhvdmVyKHtcbiAgICAgICAga2V5OiBldmVudEtleSxcbiAgICAgICAgaG92ZXI6IHRydWVcbiAgICAgIH0pO1xuICAgICAgb25Nb3VzZUVudGVyKHtcbiAgICAgICAga2V5OiBldmVudEtleSxcbiAgICAgICAgZG9tRXZlbnQ6IGVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBldmVudEtleSA9IF90aGlzJHByb3BzMy5ldmVudEtleSxcbiAgICAgICAgICBtdWx0aXBsZSA9IF90aGlzJHByb3BzMy5tdWx0aXBsZSxcbiAgICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMzLm9uQ2xpY2ssXG4gICAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wczMub25TZWxlY3QsXG4gICAgICAgICAgb25EZXNlbGVjdCA9IF90aGlzJHByb3BzMy5vbkRlc2VsZWN0LFxuICAgICAgICAgIGlzU2VsZWN0ZWQgPSBfdGhpcyRwcm9wczMuaXNTZWxlY3RlZDtcblxuICAgICAgdmFyIGluZm8gPSB7XG4gICAgICAgIGtleTogZXZlbnRLZXksXG4gICAgICAgIGtleVBhdGg6IFtldmVudEtleV0sXG4gICAgICAgIGl0ZW06IF90aGlzLFxuICAgICAgICBkb21FdmVudDogZVxuICAgICAgfTtcbiAgICAgIG9uQ2xpY2soaW5mbyk7XG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgaWYgKGlzU2VsZWN0ZWQpIHtcbiAgICAgICAgICBvbkRlc2VsZWN0KGluZm8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uU2VsZWN0KGluZm8pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc1NlbGVjdGVkKSB7XG4gICAgICAgIG9uU2VsZWN0KGluZm8pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBNZW51SXRlbS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBpbnZva2UgY3VzdG9taXplZCByZWYgdG8gZXhwb3NlIGNvbXBvbmVudCB0byBtaXhpblxuICAgIHRoaXMuY2FsbFJlZigpO1xuICB9O1xuXG4gIE1lbnVJdGVtLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYWN0aXZlKSB7XG4gICAgICBzY3JvbGxJbnRvVmlldyhSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgUmVhY3RET00uZmluZERPTU5vZGUodGhpcy5wcm9wcy5wYXJlbnRNZW51KSwge1xuICAgICAgICBvbmx5U2Nyb2xsSWZOZWVkZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmNhbGxSZWYoKTtcbiAgfTtcblxuICBNZW51SXRlbS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIGlmIChwcm9wcy5vbkRlc3Ryb3kpIHtcbiAgICAgIHByb3BzLm9uRGVzdHJveShwcm9wcy5ldmVudEtleSk7XG4gICAgfVxuICB9O1xuXG4gIE1lbnVJdGVtLnByb3RvdHlwZS5nZXRQcmVmaXhDbHMgPSBmdW5jdGlvbiBnZXRQcmVmaXhDbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMucm9vdFByZWZpeENscyArICctaXRlbSc7XG4gIH07XG5cbiAgTWVudUl0ZW0ucHJvdG90eXBlLmdldEFjdGl2ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uIGdldEFjdGl2ZUNsYXNzTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQcmVmaXhDbHMoKSArICctYWN0aXZlJztcbiAgfTtcblxuICBNZW51SXRlbS5wcm90b3R5cGUuZ2V0U2VsZWN0ZWRDbGFzc05hbWUgPSBmdW5jdGlvbiBnZXRTZWxlY3RlZENsYXNzTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQcmVmaXhDbHMoKSArICctc2VsZWN0ZWQnO1xuICB9O1xuXG4gIE1lbnVJdGVtLnByb3RvdHlwZS5nZXREaXNhYmxlZENsYXNzTmFtZSA9IGZ1bmN0aW9uIGdldERpc2FibGVkQ2xhc3NOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFByZWZpeENscygpICsgJy1kaXNhYmxlZCc7XG4gIH07XG5cbiAgTWVudUl0ZW0ucHJvdG90eXBlLmNhbGxSZWYgPSBmdW5jdGlvbiBjYWxsUmVmKCkge1xuICAgIGlmICh0aGlzLnByb3BzLm1hbnVhbFJlZikge1xuICAgICAgdGhpcy5wcm9wcy5tYW51YWxSZWYodGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIE1lbnVJdGVtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMpO1xuICAgIHZhciBjbGFzc05hbWUgPSBjbGFzc05hbWVzKHRoaXMuZ2V0UHJlZml4Q2xzKCksIHByb3BzLmNsYXNzTmFtZSwgKF9jbGFzc05hbWVzID0ge30sIF9jbGFzc05hbWVzW3RoaXMuZ2V0QWN0aXZlQ2xhc3NOYW1lKCldID0gIXByb3BzLmRpc2FibGVkICYmIHByb3BzLmFjdGl2ZSwgX2NsYXNzTmFtZXNbdGhpcy5nZXRTZWxlY3RlZENsYXNzTmFtZSgpXSA9IHByb3BzLmlzU2VsZWN0ZWQsIF9jbGFzc05hbWVzW3RoaXMuZ2V0RGlzYWJsZWRDbGFzc05hbWUoKV0gPSBwcm9wcy5kaXNhYmxlZCwgX2NsYXNzTmFtZXMpKTtcbiAgICB2YXIgYXR0cnMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMuYXR0cmlidXRlLCB7XG4gICAgICB0aXRsZTogcHJvcHMudGl0bGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIC8vIHNldCB0byBtZW51aXRlbSBieSBkZWZhdWx0XG4gICAgICByb2xlOiBwcm9wcy5yb2xlIHx8ICdtZW51aXRlbScsXG4gICAgICAnYXJpYS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkXG4gICAgfSk7XG5cbiAgICBpZiAocHJvcHMucm9sZSA9PT0gJ29wdGlvbicpIHtcbiAgICAgIC8vIG92ZXJ3cml0ZSB0byBvcHRpb25cbiAgICAgIGF0dHJzID0gX2V4dGVuZHMoe30sIGF0dHJzLCB7XG4gICAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IHByb3BzLmlzU2VsZWN0ZWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocHJvcHMucm9sZSA9PT0gbnVsbCB8fCBwcm9wcy5yb2xlID09PSAnbm9uZScpIHtcbiAgICAgIC8vIHNvbWV0aW1lcyB3ZSB3YW50IHRvIHNwZWNpZnkgcm9sZSBpbnNpZGUgPGxpLz4gZWxlbWVudFxuICAgICAgLy8gPGxpPjxhIHJvbGU9J21lbnVpdGVtJz5MaW5rPC9hPjwvbGk+IHdvdWxkIGJlIGEgZ29vZCBleGFtcGxlXG4gICAgICAvLyBpbiB0aGlzIGNhc2UgdGhlIHJvbGUgb24gPGxpLz4gc2hvdWxkIGJlIFwibm9uZVwiIHRvXG4gICAgICAvLyByZW1vdmUgdGhlIGltcGxpZWQgbGlzdGl0ZW0gcm9sZS5cbiAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMtMS4xL2V4YW1wbGVzL21lbnViYXIvbWVudWJhci0xL21lbnViYXItMS5odG1sXG4gICAgICBhdHRycy5yb2xlID0gJ25vbmUnO1xuICAgIH1cbiAgICAvLyBJbiBjYXNlIHRoYXQgb25DbGljay9vbk1vdXNlTGVhdmUvb25Nb3VzZUVudGVyIGlzIHBhc3NlZCBkb3duIGZyb20gb3duZXJcbiAgICB2YXIgbW91c2VFdmVudCA9IHtcbiAgICAgIG9uQ2xpY2s6IHByb3BzLmRpc2FibGVkID8gbnVsbCA6IHRoaXMub25DbGljayxcbiAgICAgIG9uTW91c2VMZWF2ZTogcHJvcHMuZGlzYWJsZWQgPyBudWxsIDogdGhpcy5vbk1vdXNlTGVhdmUsXG4gICAgICBvbk1vdXNlRW50ZXI6IHByb3BzLmRpc2FibGVkID8gbnVsbCA6IHRoaXMub25Nb3VzZUVudGVyXG4gICAgfTtcbiAgICB2YXIgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMuc3R5bGUpO1xuICAgIGlmIChwcm9wcy5tb2RlID09PSAnaW5saW5lJykge1xuICAgICAgc3R5bGUucGFkZGluZ0xlZnQgPSBwcm9wcy5pbmxpbmVJbmRlbnQgKiBwcm9wcy5sZXZlbDtcbiAgICB9XG4gICAgbWVudUFsbFByb3BzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGRlbGV0ZSBwcm9wc1trZXldO1xuICAgIH0pO1xuICAgIHZhciBpY29uID0gdGhpcy5wcm9wcy5pdGVtSWNvbjtcbiAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuaXRlbUljb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuaXRlbUljb24sIHRoaXMucHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdsaScsXG4gICAgICBfZXh0ZW5kcyh7fSwgcHJvcHMsIGF0dHJzLCBtb3VzZUV2ZW50LCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSksXG4gICAgICBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGljb25cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBNZW51SXRlbTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVudUl0ZW0ucHJvcFR5cGVzID0ge1xuICBhdHRyaWJ1dGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHJvb3RQcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV2ZW50S2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgc2VsZWN0ZWRLZXlzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uSXRlbUhvdmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25EZXNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIHBhcmVudE1lbnU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG9uRGVzdHJveTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNTZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIG1hbnVhbFJlZjogUHJvcFR5cGVzLmZ1bmMsXG4gIGl0ZW1JY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKVxufTtcbk1lbnVJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25TZWxlY3Q6IG5vb3AsXG4gIG9uTW91c2VFbnRlcjogbm9vcCxcbiAgb25Nb3VzZUxlYXZlOiBub29wLFxuICBtYW51YWxSZWY6IG5vb3Bcbn07XG5NZW51SXRlbS5pc01lbnVJdGVtID0gdHJ1ZTtcblxudmFyIGNvbm5lY3RlZCA9IGNvbm5lY3QoZnVuY3Rpb24gKF9yZWYsIF9yZWYyKSB7XG4gIHZhciBhY3RpdmVLZXkgPSBfcmVmLmFjdGl2ZUtleSxcbiAgICAgIHNlbGVjdGVkS2V5cyA9IF9yZWYuc2VsZWN0ZWRLZXlzO1xuICB2YXIgZXZlbnRLZXkgPSBfcmVmMi5ldmVudEtleSxcbiAgICAgIHN1Yk1lbnVLZXkgPSBfcmVmMi5zdWJNZW51S2V5O1xuICByZXR1cm4ge1xuICAgIGFjdGl2ZTogYWN0aXZlS2V5W3N1Yk1lbnVLZXldID09PSBldmVudEtleSxcbiAgICBpc1NlbGVjdGVkOiBzZWxlY3RlZEtleXMuaW5kZXhPZihldmVudEtleSkgIT09IC0xXG4gIH07XG59KShNZW51SXRlbSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3RlZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgbWVudUFsbFByb3BzIH0gZnJvbSAnLi91dGlsJztcblxudmFyIE1lbnVJdGVtR3JvdXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVudUl0ZW1Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVudUl0ZW1Hcm91cCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnVJdGVtR3JvdXApO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnJlbmRlcklubmVyTWVudUl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgcmVuZGVyTWVudUl0ZW0gPSBfdGhpcyRwcm9wcy5yZW5kZXJNZW51SXRlbSxcbiAgICAgICAgICBpbmRleCA9IF90aGlzJHByb3BzLmluZGV4O1xuXG4gICAgICByZXR1cm4gcmVuZGVyTWVudUl0ZW0oaXRlbSwgaW5kZXgsIF90aGlzLnByb3BzLnN1Yk1lbnVLZXkpO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVudUl0ZW1Hcm91cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyh0aGlzLnByb3BzLCBbXSk7XG5cbiAgICB2YXIgX3Byb3BzJGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcHJvcHMkY2xhc3NOYW1lLFxuICAgICAgICByb290UHJlZml4Q2xzID0gcHJvcHMucm9vdFByZWZpeENscztcblxuICAgIHZhciB0aXRsZUNsYXNzTmFtZSA9IHJvb3RQcmVmaXhDbHMgKyAnLWl0ZW0tZ3JvdXAtdGl0bGUnO1xuICAgIHZhciBsaXN0Q2xhc3NOYW1lID0gcm9vdFByZWZpeENscyArICctaXRlbS1ncm91cC1saXN0JztcbiAgICB2YXIgdGl0bGUgPSBwcm9wcy50aXRsZSxcbiAgICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcblxuICAgIG1lbnVBbGxQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBkZWxldGUgcHJvcHNba2V5XTtcbiAgICB9KTtcblxuICAgIC8vIFNldCBvbkNsaWNrIHRvIG51bGwsIHRvIGlnbm9yZSBwcm9wYWdhdGVkIG9uQ2xpY2sgZXZlbnRcbiAgICBkZWxldGUgcHJvcHMub25DbGljaztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2xpJyxcbiAgICAgIF9leHRlbmRzKHt9LCBwcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSArICcgJyArIHJvb3RQcmVmaXhDbHMgKyAnLWl0ZW0tZ3JvdXAnIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc05hbWU6IHRpdGxlQ2xhc3NOYW1lLFxuICAgICAgICAgIHRpdGxlOiB0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnID8gdGl0bGUgOiB1bmRlZmluZWRcbiAgICAgICAgfSxcbiAgICAgICAgdGl0bGVcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAndWwnLFxuICAgICAgICB7IGNsYXNzTmFtZTogbGlzdENsYXNzTmFtZSB9LFxuICAgICAgICBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIHRoaXMucmVuZGVySW5uZXJNZW51SXRlbSlcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBNZW51SXRlbUdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW51SXRlbUdyb3VwLnByb3BUeXBlcyA9IHtcbiAgcmVuZGVyTWVudUl0ZW06IFByb3BUeXBlcy5mdW5jLFxuICBpbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdWJNZW51S2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByb290UHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuTWVudUl0ZW1Hcm91cC5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVkOiB0cnVlXG59O1xuXG5cbk1lbnVJdGVtR3JvdXAuaXNNZW51SXRlbUdyb3VwID0gdHJ1ZTtcblxuZXhwb3J0IGRlZmF1bHQgTWVudUl0ZW1Hcm91cDsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnZhciBEaXZpZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERpdmlkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERpdmlkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpdmlkZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBEaXZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHJvb3RQcmVmaXhDbHMgPSBfcHJvcHMucm9vdFByZWZpeENscyxcbiAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnbGknLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSArICcgJyArIHJvb3RQcmVmaXhDbHMgKyAnLWl0ZW0tZGl2aWRlcicsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRGl2aWRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRGl2aWRlci5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcm9vdFByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5EaXZpZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgLy8gVG8gZml4IGtleWJvYXJkIFVYLlxuICBkaXNhYmxlZDogdHJ1ZSxcbiAgY2xhc3NOYW1lOiAnJyxcbiAgc3R5bGU6IHt9XG59O1xuZXhwb3J0IGRlZmF1bHQgRGl2aWRlcjsiLCJpbXBvcnQgTWVudSBmcm9tICcuL01lbnUnO1xuaW1wb3J0IFN1Yk1lbnUgZnJvbSAnLi9TdWJNZW51JztcbmltcG9ydCBNZW51SXRlbSBmcm9tICcuL01lbnVJdGVtJztcbmltcG9ydCBNZW51SXRlbUdyb3VwIGZyb20gJy4vTWVudUl0ZW1Hcm91cCc7XG5pbXBvcnQgRGl2aWRlciBmcm9tICcuL0RpdmlkZXInO1xuXG5leHBvcnQgeyBTdWJNZW51LCBNZW51SXRlbSBhcyBJdGVtLCBNZW51SXRlbSwgTWVudUl0ZW1Hcm91cCwgTWVudUl0ZW1Hcm91cCBhcyBJdGVtR3JvdXAsIERpdmlkZXIgfTtcblxuZXhwb3J0IGRlZmF1bHQgTWVudTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZSA9IGV4cG9ydHMuY29ubmVjdCA9IGV4cG9ydHMuUHJvdmlkZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfUHJvdmlkZXIyID0gcmVxdWlyZSgnLi9Qcm92aWRlcicpO1xuXG52YXIgX1Byb3ZpZGVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb3ZpZGVyMik7XG5cbnZhciBfY29ubmVjdDIgPSByZXF1aXJlKCcuL2Nvbm5lY3QnKTtcblxudmFyIF9jb25uZWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nvbm5lY3QyKTtcblxudmFyIF9jcmVhdGUyID0gcmVxdWlyZSgnLi9jcmVhdGUnKTtcblxudmFyIF9jcmVhdGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuUHJvdmlkZXIgPSBfUHJvdmlkZXIzLmRlZmF1bHQ7XG5leHBvcnRzLmNvbm5lY3QgPSBfY29ubmVjdDMuZGVmYXVsdDtcbmV4cG9ydHMuY3JlYXRlID0gX2NyZWF0ZTMuZGVmYXVsdDsiLCIvKipcbiAqIEBpZ25vcmVcbiAqIHNvbWUga2V5LWNvZGVzIGRlZmluaXRpb24gYW5kIHV0aWxzIGZyb20gY2xvc3VyZS1saWJyYXJ5XG4gKiBAYXV0aG9yIHlpbWluZ2hlQGdtYWlsLmNvbVxuICovXG5cbnZhciBLZXlDb2RlID0ge1xuICAvKipcbiAgICogTUFDX0VOVEVSXG4gICAqL1xuICBNQUNfRU5URVI6IDMsXG4gIC8qKlxuICAgKiBCQUNLU1BBQ0VcbiAgICovXG4gIEJBQ0tTUEFDRTogOCxcbiAgLyoqXG4gICAqIFRBQlxuICAgKi9cbiAgVEFCOiA5LFxuICAvKipcbiAgICogTlVNTE9DSyBvbiBGRi9TYWZhcmkgTWFjXG4gICAqL1xuICBOVU1fQ0VOVEVSOiAxMiwgLy8gTlVNTE9DSyBvbiBGRi9TYWZhcmkgTWFjXG4gIC8qKlxuICAgKiBFTlRFUlxuICAgKi9cbiAgRU5URVI6IDEzLFxuICAvKipcbiAgICogU0hJRlRcbiAgICovXG4gIFNISUZUOiAxNixcbiAgLyoqXG4gICAqIENUUkxcbiAgICovXG4gIENUUkw6IDE3LFxuICAvKipcbiAgICogQUxUXG4gICAqL1xuICBBTFQ6IDE4LFxuICAvKipcbiAgICogUEFVU0VcbiAgICovXG4gIFBBVVNFOiAxOSxcbiAgLyoqXG4gICAqIENBUFNfTE9DS1xuICAgKi9cbiAgQ0FQU19MT0NLOiAyMCxcbiAgLyoqXG4gICAqIEVTQ1xuICAgKi9cbiAgRVNDOiAyNyxcbiAgLyoqXG4gICAqIFNQQUNFXG4gICAqL1xuICBTUEFDRTogMzIsXG4gIC8qKlxuICAgKiBQQUdFX1VQXG4gICAqL1xuICBQQUdFX1VQOiAzMywgLy8gYWxzbyBOVU1fTk9SVEhfRUFTVFxuICAvKipcbiAgICogUEFHRV9ET1dOXG4gICAqL1xuICBQQUdFX0RPV046IDM0LCAvLyBhbHNvIE5VTV9TT1VUSF9FQVNUXG4gIC8qKlxuICAgKiBFTkRcbiAgICovXG4gIEVORDogMzUsIC8vIGFsc28gTlVNX1NPVVRIX1dFU1RcbiAgLyoqXG4gICAqIEhPTUVcbiAgICovXG4gIEhPTUU6IDM2LCAvLyBhbHNvIE5VTV9OT1JUSF9XRVNUXG4gIC8qKlxuICAgKiBMRUZUXG4gICAqL1xuICBMRUZUOiAzNywgLy8gYWxzbyBOVU1fV0VTVFxuICAvKipcbiAgICogVVBcbiAgICovXG4gIFVQOiAzOCwgLy8gYWxzbyBOVU1fTk9SVEhcbiAgLyoqXG4gICAqIFJJR0hUXG4gICAqL1xuICBSSUdIVDogMzksIC8vIGFsc28gTlVNX0VBU1RcbiAgLyoqXG4gICAqIERPV05cbiAgICovXG4gIERPV046IDQwLCAvLyBhbHNvIE5VTV9TT1VUSFxuICAvKipcbiAgICogUFJJTlRfU0NSRUVOXG4gICAqL1xuICBQUklOVF9TQ1JFRU46IDQ0LFxuICAvKipcbiAgICogSU5TRVJUXG4gICAqL1xuICBJTlNFUlQ6IDQ1LCAvLyBhbHNvIE5VTV9JTlNFUlRcbiAgLyoqXG4gICAqIERFTEVURVxuICAgKi9cbiAgREVMRVRFOiA0NiwgLy8gYWxzbyBOVU1fREVMRVRFXG4gIC8qKlxuICAgKiBaRVJPXG4gICAqL1xuICBaRVJPOiA0OCxcbiAgLyoqXG4gICAqIE9ORVxuICAgKi9cbiAgT05FOiA0OSxcbiAgLyoqXG4gICAqIFRXT1xuICAgKi9cbiAgVFdPOiA1MCxcbiAgLyoqXG4gICAqIFRIUkVFXG4gICAqL1xuICBUSFJFRTogNTEsXG4gIC8qKlxuICAgKiBGT1VSXG4gICAqL1xuICBGT1VSOiA1MixcbiAgLyoqXG4gICAqIEZJVkVcbiAgICovXG4gIEZJVkU6IDUzLFxuICAvKipcbiAgICogU0lYXG4gICAqL1xuICBTSVg6IDU0LFxuICAvKipcbiAgICogU0VWRU5cbiAgICovXG4gIFNFVkVOOiA1NSxcbiAgLyoqXG4gICAqIEVJR0hUXG4gICAqL1xuICBFSUdIVDogNTYsXG4gIC8qKlxuICAgKiBOSU5FXG4gICAqL1xuICBOSU5FOiA1NyxcbiAgLyoqXG4gICAqIFFVRVNUSU9OX01BUktcbiAgICovXG4gIFFVRVNUSU9OX01BUks6IDYzLCAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIEFcbiAgICovXG4gIEE6IDY1LFxuICAvKipcbiAgICogQlxuICAgKi9cbiAgQjogNjYsXG4gIC8qKlxuICAgKiBDXG4gICAqL1xuICBDOiA2NyxcbiAgLyoqXG4gICAqIERcbiAgICovXG4gIEQ6IDY4LFxuICAvKipcbiAgICogRVxuICAgKi9cbiAgRTogNjksXG4gIC8qKlxuICAgKiBGXG4gICAqL1xuICBGOiA3MCxcbiAgLyoqXG4gICAqIEdcbiAgICovXG4gIEc6IDcxLFxuICAvKipcbiAgICogSFxuICAgKi9cbiAgSDogNzIsXG4gIC8qKlxuICAgKiBJXG4gICAqL1xuICBJOiA3MyxcbiAgLyoqXG4gICAqIEpcbiAgICovXG4gIEo6IDc0LFxuICAvKipcbiAgICogS1xuICAgKi9cbiAgSzogNzUsXG4gIC8qKlxuICAgKiBMXG4gICAqL1xuICBMOiA3NixcbiAgLyoqXG4gICAqIE1cbiAgICovXG4gIE06IDc3LFxuICAvKipcbiAgICogTlxuICAgKi9cbiAgTjogNzgsXG4gIC8qKlxuICAgKiBPXG4gICAqL1xuICBPOiA3OSxcbiAgLyoqXG4gICAqIFBcbiAgICovXG4gIFA6IDgwLFxuICAvKipcbiAgICogUVxuICAgKi9cbiAgUTogODEsXG4gIC8qKlxuICAgKiBSXG4gICAqL1xuICBSOiA4MixcbiAgLyoqXG4gICAqIFNcbiAgICovXG4gIFM6IDgzLFxuICAvKipcbiAgICogVFxuICAgKi9cbiAgVDogODQsXG4gIC8qKlxuICAgKiBVXG4gICAqL1xuICBVOiA4NSxcbiAgLyoqXG4gICAqIFZcbiAgICovXG4gIFY6IDg2LFxuICAvKipcbiAgICogV1xuICAgKi9cbiAgVzogODcsXG4gIC8qKlxuICAgKiBYXG4gICAqL1xuICBYOiA4OCxcbiAgLyoqXG4gICAqIFlcbiAgICovXG4gIFk6IDg5LFxuICAvKipcbiAgICogWlxuICAgKi9cbiAgWjogOTAsXG4gIC8qKlxuICAgKiBNRVRBXG4gICAqL1xuICBNRVRBOiA5MSwgLy8gV0lOX0tFWV9MRUZUXG4gIC8qKlxuICAgKiBXSU5fS0VZX1JJR0hUXG4gICAqL1xuICBXSU5fS0VZX1JJR0hUOiA5MixcbiAgLyoqXG4gICAqIENPTlRFWFRfTUVOVVxuICAgKi9cbiAgQ09OVEVYVF9NRU5VOiA5MyxcbiAgLyoqXG4gICAqIE5VTV9aRVJPXG4gICAqL1xuICBOVU1fWkVSTzogOTYsXG4gIC8qKlxuICAgKiBOVU1fT05FXG4gICAqL1xuICBOVU1fT05FOiA5NyxcbiAgLyoqXG4gICAqIE5VTV9UV09cbiAgICovXG4gIE5VTV9UV086IDk4LFxuICAvKipcbiAgICogTlVNX1RIUkVFXG4gICAqL1xuICBOVU1fVEhSRUU6IDk5LFxuICAvKipcbiAgICogTlVNX0ZPVVJcbiAgICovXG4gIE5VTV9GT1VSOiAxMDAsXG4gIC8qKlxuICAgKiBOVU1fRklWRVxuICAgKi9cbiAgTlVNX0ZJVkU6IDEwMSxcbiAgLyoqXG4gICAqIE5VTV9TSVhcbiAgICovXG4gIE5VTV9TSVg6IDEwMixcbiAgLyoqXG4gICAqIE5VTV9TRVZFTlxuICAgKi9cbiAgTlVNX1NFVkVOOiAxMDMsXG4gIC8qKlxuICAgKiBOVU1fRUlHSFRcbiAgICovXG4gIE5VTV9FSUdIVDogMTA0LFxuICAvKipcbiAgICogTlVNX05JTkVcbiAgICovXG4gIE5VTV9OSU5FOiAxMDUsXG4gIC8qKlxuICAgKiBOVU1fTVVMVElQTFlcbiAgICovXG4gIE5VTV9NVUxUSVBMWTogMTA2LFxuICAvKipcbiAgICogTlVNX1BMVVNcbiAgICovXG4gIE5VTV9QTFVTOiAxMDcsXG4gIC8qKlxuICAgKiBOVU1fTUlOVVNcbiAgICovXG4gIE5VTV9NSU5VUzogMTA5LFxuICAvKipcbiAgICogTlVNX1BFUklPRFxuICAgKi9cbiAgTlVNX1BFUklPRDogMTEwLFxuICAvKipcbiAgICogTlVNX0RJVklTSU9OXG4gICAqL1xuICBOVU1fRElWSVNJT046IDExMSxcbiAgLyoqXG4gICAqIEYxXG4gICAqL1xuICBGMTogMTEyLFxuICAvKipcbiAgICogRjJcbiAgICovXG4gIEYyOiAxMTMsXG4gIC8qKlxuICAgKiBGM1xuICAgKi9cbiAgRjM6IDExNCxcbiAgLyoqXG4gICAqIEY0XG4gICAqL1xuICBGNDogMTE1LFxuICAvKipcbiAgICogRjVcbiAgICovXG4gIEY1OiAxMTYsXG4gIC8qKlxuICAgKiBGNlxuICAgKi9cbiAgRjY6IDExNyxcbiAgLyoqXG4gICAqIEY3XG4gICAqL1xuICBGNzogMTE4LFxuICAvKipcbiAgICogRjhcbiAgICovXG4gIEY4OiAxMTksXG4gIC8qKlxuICAgKiBGOVxuICAgKi9cbiAgRjk6IDEyMCxcbiAgLyoqXG4gICAqIEYxMFxuICAgKi9cbiAgRjEwOiAxMjEsXG4gIC8qKlxuICAgKiBGMTFcbiAgICovXG4gIEYxMTogMTIyLFxuICAvKipcbiAgICogRjEyXG4gICAqL1xuICBGMTI6IDEyMyxcbiAgLyoqXG4gICAqIE5VTUxPQ0tcbiAgICovXG4gIE5VTUxPQ0s6IDE0NCxcbiAgLyoqXG4gICAqIFNFTUlDT0xPTlxuICAgKi9cbiAgU0VNSUNPTE9OOiAxODYsIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogREFTSFxuICAgKi9cbiAgREFTSDogMTg5LCAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIEVRVUFMU1xuICAgKi9cbiAgRVFVQUxTOiAxODcsIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogQ09NTUFcbiAgICovXG4gIENPTU1BOiAxODgsIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogUEVSSU9EXG4gICAqL1xuICBQRVJJT0Q6IDE5MCwgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG4gIC8qKlxuICAgKiBTTEFTSFxuICAgKi9cbiAgU0xBU0g6IDE5MSwgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG4gIC8qKlxuICAgKiBBUE9TVFJPUEhFXG4gICAqL1xuICBBUE9TVFJPUEhFOiAxOTIsIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogU0lOR0xFX1FVT1RFXG4gICAqL1xuICBTSU5HTEVfUVVPVEU6IDIyMiwgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG4gIC8qKlxuICAgKiBPUEVOX1NRVUFSRV9CUkFDS0VUXG4gICAqL1xuICBPUEVOX1NRVUFSRV9CUkFDS0VUOiAyMTksIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogQkFDS1NMQVNIXG4gICAqL1xuICBCQUNLU0xBU0g6IDIyMCwgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG4gIC8qKlxuICAgKiBDTE9TRV9TUVVBUkVfQlJBQ0tFVFxuICAgKi9cbiAgQ0xPU0VfU1FVQVJFX0JSQUNLRVQ6IDIyMSwgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG4gIC8qKlxuICAgKiBXSU5fS0VZXG4gICAqL1xuICBXSU5fS0VZOiAyMjQsXG4gIC8qKlxuICAgKiBNQUNfRkZfTUVUQVxuICAgKi9cbiAgTUFDX0ZGX01FVEE6IDIyNCwgLy8gRmlyZWZveCAoR2Vja28pIGZpcmVzIHRoaXMgZm9yIHRoZSBtZXRhIGtleSBpbnN0ZWFkIG9mIDkxXG4gIC8qKlxuICAgKiBXSU5fSU1FXG4gICAqL1xuICBXSU5fSU1FOiAyMjlcbn07XG5cbi8qXG4gd2hldGhlciB0ZXh0IGFuZCBtb2RpZmllZCBrZXkgaXMgZW50ZXJlZCBhdCB0aGUgc2FtZSB0aW1lLlxuICovXG5LZXlDb2RlLmlzVGV4dE1vZGlmeWluZ0tleUV2ZW50ID0gZnVuY3Rpb24gaXNUZXh0TW9kaWZ5aW5nS2V5RXZlbnQoZSkge1xuICB2YXIga2V5Q29kZSA9IGUua2V5Q29kZTtcbiAgaWYgKGUuYWx0S2V5ICYmICFlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8XG4gIC8vIEZ1bmN0aW9uIGtleXMgZG9uJ3QgZ2VuZXJhdGUgdGV4dFxuICBrZXlDb2RlID49IEtleUNvZGUuRjEgJiYga2V5Q29kZSA8PSBLZXlDb2RlLkYxMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoZSBmb2xsb3dpbmcga2V5cyBhcmUgcXVpdGUgaGFybWxlc3MsIGV2ZW4gaW4gY29tYmluYXRpb24gd2l0aFxuICAvLyBDVFJMLCBBTFQgb3IgU0hJRlQuXG4gIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgIGNhc2UgS2V5Q29kZS5BTFQ6XG4gICAgY2FzZSBLZXlDb2RlLkNBUFNfTE9DSzpcbiAgICBjYXNlIEtleUNvZGUuQ09OVEVYVF9NRU5VOlxuICAgIGNhc2UgS2V5Q29kZS5DVFJMOlxuICAgIGNhc2UgS2V5Q29kZS5ET1dOOlxuICAgIGNhc2UgS2V5Q29kZS5FTkQ6XG4gICAgY2FzZSBLZXlDb2RlLkVTQzpcbiAgICBjYXNlIEtleUNvZGUuSE9NRTpcbiAgICBjYXNlIEtleUNvZGUuSU5TRVJUOlxuICAgIGNhc2UgS2V5Q29kZS5MRUZUOlxuICAgIGNhc2UgS2V5Q29kZS5NQUNfRkZfTUVUQTpcbiAgICBjYXNlIEtleUNvZGUuTUVUQTpcbiAgICBjYXNlIEtleUNvZGUuTlVNTE9DSzpcbiAgICBjYXNlIEtleUNvZGUuTlVNX0NFTlRFUjpcbiAgICBjYXNlIEtleUNvZGUuUEFHRV9ET1dOOlxuICAgIGNhc2UgS2V5Q29kZS5QQUdFX1VQOlxuICAgIGNhc2UgS2V5Q29kZS5QQVVTRTpcbiAgICBjYXNlIEtleUNvZGUuUFJJTlRfU0NSRUVOOlxuICAgIGNhc2UgS2V5Q29kZS5SSUdIVDpcbiAgICBjYXNlIEtleUNvZGUuU0hJRlQ6XG4gICAgY2FzZSBLZXlDb2RlLlVQOlxuICAgIGNhc2UgS2V5Q29kZS5XSU5fS0VZOlxuICAgIGNhc2UgS2V5Q29kZS5XSU5fS0VZX1JJR0hUOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLypcbiB3aGV0aGVyIGNoYXJhY3RlciBpcyBlbnRlcmVkLlxuICovXG5LZXlDb2RlLmlzQ2hhcmFjdGVyS2V5ID0gZnVuY3Rpb24gaXNDaGFyYWN0ZXJLZXkoa2V5Q29kZSkge1xuICBpZiAoa2V5Q29kZSA+PSBLZXlDb2RlLlpFUk8gJiYga2V5Q29kZSA8PSBLZXlDb2RlLk5JTkUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChrZXlDb2RlID49IEtleUNvZGUuTlVNX1pFUk8gJiYga2V5Q29kZSA8PSBLZXlDb2RlLk5VTV9NVUxUSVBMWSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGtleUNvZGUgPj0gS2V5Q29kZS5BICYmIGtleUNvZGUgPD0gS2V5Q29kZS5aKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBTYWZhcmkgc2VuZHMgemVybyBrZXkgY29kZSBmb3Igbm9uLWxhdGluIGNoYXJhY3RlcnMuXG4gIGlmICh3aW5kb3cubmF2aWdhdGlvbi51c2VyQWdlbnQuaW5kZXhPZignV2ViS2l0JykgIT09IC0xICYmIGtleUNvZGUgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgIGNhc2UgS2V5Q29kZS5TUEFDRTpcbiAgICBjYXNlIEtleUNvZGUuUVVFU1RJT05fTUFSSzpcbiAgICBjYXNlIEtleUNvZGUuTlVNX1BMVVM6XG4gICAgY2FzZSBLZXlDb2RlLk5VTV9NSU5VUzpcbiAgICBjYXNlIEtleUNvZGUuTlVNX1BFUklPRDpcbiAgICBjYXNlIEtleUNvZGUuTlVNX0RJVklTSU9OOlxuICAgIGNhc2UgS2V5Q29kZS5TRU1JQ09MT046XG4gICAgY2FzZSBLZXlDb2RlLkRBU0g6XG4gICAgY2FzZSBLZXlDb2RlLkVRVUFMUzpcbiAgICBjYXNlIEtleUNvZGUuQ09NTUE6XG4gICAgY2FzZSBLZXlDb2RlLlBFUklPRDpcbiAgICBjYXNlIEtleUNvZGUuU0xBU0g6XG4gICAgY2FzZSBLZXlDb2RlLkFQT1NUUk9QSEU6XG4gICAgY2FzZSBLZXlDb2RlLlNJTkdMRV9RVU9URTpcbiAgICBjYXNlIEtleUNvZGUuT1BFTl9TUVVBUkVfQlJBQ0tFVDpcbiAgICBjYXNlIEtleUNvZGUuQkFDS1NMQVNIOlxuICAgIGNhc2UgS2V5Q29kZS5DTE9TRV9TUVVBUkVfQlJBQ0tFVDpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEtleUNvZGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmZ1bmN0aW9uIGlzUG9pbnRzRXEoYTEsIGEyLCBpc0FsaWduUG9pbnQpIHtcbiAgaWYgKGlzQWxpZ25Qb2ludCkge1xuICAgIHJldHVybiBhMVswXSA9PT0gYTJbMF07XG4gIH1cbiAgcmV0dXJuIGExWzBdID09PSBhMlswXSAmJiBhMVsxXSA9PT0gYTJbMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGlnbkZyb21QbGFjZW1lbnQoYnVpbHRpblBsYWNlbWVudHMsIHBsYWNlbWVudFN0ciwgYWxpZ24pIHtcbiAgdmFyIGJhc2VBbGlnbiA9IGJ1aWx0aW5QbGFjZW1lbnRzW3BsYWNlbWVudFN0cl0gfHwge307XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgYmFzZUFsaWduLCBhbGlnbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGlnblBvcHVwQ2xhc3NOYW1lKGJ1aWx0aW5QbGFjZW1lbnRzLCBwcmVmaXhDbHMsIGFsaWduLCBpc0FsaWduUG9pbnQpIHtcbiAgdmFyIHBvaW50cyA9IGFsaWduLnBvaW50cztcbiAgZm9yICh2YXIgcGxhY2VtZW50IGluIGJ1aWx0aW5QbGFjZW1lbnRzKSB7XG4gICAgaWYgKGJ1aWx0aW5QbGFjZW1lbnRzLmhhc093blByb3BlcnR5KHBsYWNlbWVudCkpIHtcbiAgICAgIGlmIChpc1BvaW50c0VxKGJ1aWx0aW5QbGFjZW1lbnRzW3BsYWNlbWVudF0ucG9pbnRzLCBwb2ludHMsIGlzQWxpZ25Qb2ludCkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeENscyArICctcGxhY2VtZW50LScgKyBwbGFjZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVSZWYobmFtZSwgY29tcG9uZW50KSB7XG4gIHRoaXNbbmFtZV0gPSBjb21wb25lbnQ7XG59IiwidmFyIHZlbmRvclByZWZpeCA9IHZvaWQgMDtcblxudmFyIGpzQ3NzTWFwID0ge1xuICBXZWJraXQ6ICctd2Via2l0LScsXG4gIE1vejogJy1tb3otJyxcbiAgLy8gSUUgZGlkIGl0IHdyb25nIGFnYWluIC4uLlxuICBtczogJy1tcy0nLFxuICBPOiAnLW8tJ1xufTtcblxuZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4KCkge1xuICBpZiAodmVuZG9yUHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdmVuZG9yUHJlZml4O1xuICB9XG4gIHZlbmRvclByZWZpeCA9ICcnO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGU7XG4gIHZhciB0ZXN0UHJvcCA9ICdUcmFuc2Zvcm0nO1xuICBmb3IgKHZhciBrZXkgaW4ganNDc3NNYXApIHtcbiAgICBpZiAoa2V5ICsgdGVzdFByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZlbmRvclByZWZpeCA9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZlbmRvclByZWZpeDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbk5hbWUoKSB7XG4gIHJldHVybiBnZXRWZW5kb3JQcmVmaXgoKSA/IGdldFZlbmRvclByZWZpeCgpICsgJ1RyYW5zaXRpb25Qcm9wZXJ0eScgOiAndHJhbnNpdGlvblByb3BlcnR5Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZm9ybU5hbWUoKSB7XG4gIHJldHVybiBnZXRWZW5kb3JQcmVmaXgoKSA/IGdldFZlbmRvclByZWZpeCgpICsgJ1RyYW5zZm9ybScgOiAndHJhbnNmb3JtJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFRyYW5zaXRpb25Qcm9wZXJ0eShub2RlLCB2YWx1ZSkge1xuICB2YXIgbmFtZSA9IGdldFRyYW5zaXRpb25OYW1lKCk7XG4gIGlmIChuYW1lKSB7XG4gICAgbm9kZS5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuICAgIGlmIChuYW1lICE9PSAndHJhbnNpdGlvblByb3BlcnR5Jykge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0VHJhbnNmb3JtKG5vZGUsIHZhbHVlKSB7XG4gIHZhciBuYW1lID0gZ2V0VHJhbnNmb3JtTmFtZSgpO1xuICBpZiAobmFtZSkge1xuICAgIG5vZGUuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICBpZiAobmFtZSAhPT0gJ3RyYW5zZm9ybScpIHtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gdmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcGVydHkobm9kZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgfHwgbm9kZS5zdHlsZVtnZXRUcmFuc2l0aW9uTmFtZSgpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZm9ybVhZKG5vZGUpIHtcbiAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCk7XG4gIHZhciB0cmFuc2Zvcm0gPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKSB8fCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGdldFRyYW5zZm9ybU5hbWUoKSk7XG4gIGlmICh0cmFuc2Zvcm0gJiYgdHJhbnNmb3JtICE9PSAnbm9uZScpIHtcbiAgICB2YXIgbWF0cml4ID0gdHJhbnNmb3JtLnJlcGxhY2UoL1teMC05XFwtLixdL2csICcnKS5zcGxpdCgnLCcpO1xuICAgIHJldHVybiB7IHg6IHBhcnNlRmxvYXQobWF0cml4WzEyXSB8fCBtYXRyaXhbNF0sIDApLCB5OiBwYXJzZUZsb2F0KG1hdHJpeFsxM10gfHwgbWF0cml4WzVdLCAwKSB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG59XG5cbnZhciBtYXRyaXgyZCA9IC9tYXRyaXhcXCgoLiopXFwpLztcbnZhciBtYXRyaXgzZCA9IC9tYXRyaXgzZFxcKCguKilcXCkvO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0VHJhbnNmb3JtWFkobm9kZSwgeHkpIHtcbiAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCk7XG4gIHZhciB0cmFuc2Zvcm0gPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKSB8fCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGdldFRyYW5zZm9ybU5hbWUoKSk7XG4gIGlmICh0cmFuc2Zvcm0gJiYgdHJhbnNmb3JtICE9PSAnbm9uZScpIHtcbiAgICB2YXIgYXJyID0gdm9pZCAwO1xuICAgIHZhciBtYXRjaDJkID0gdHJhbnNmb3JtLm1hdGNoKG1hdHJpeDJkKTtcbiAgICBpZiAobWF0Y2gyZCkge1xuICAgICAgbWF0Y2gyZCA9IG1hdGNoMmRbMV07XG4gICAgICBhcnIgPSBtYXRjaDJkLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGl0ZW0sIDEwKTtcbiAgICAgIH0pO1xuICAgICAgYXJyWzRdID0geHkueDtcbiAgICAgIGFycls1XSA9IHh5Lnk7XG4gICAgICBzZXRUcmFuc2Zvcm0obm9kZSwgJ21hdHJpeCgnICsgYXJyLmpvaW4oJywnKSArICcpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtYXRjaDNkID0gdHJhbnNmb3JtLm1hdGNoKG1hdHJpeDNkKVsxXTtcbiAgICAgIGFyciA9IG1hdGNoM2Quc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoaXRlbSwgMTApO1xuICAgICAgfSk7XG4gICAgICBhcnJbMTJdID0geHkueDtcbiAgICAgIGFyclsxM10gPSB4eS55O1xuICAgICAgc2V0VHJhbnNmb3JtKG5vZGUsICdtYXRyaXgzZCgnICsgYXJyLmpvaW4oJywnKSArICcpJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNldFRyYW5zZm9ybShub2RlLCAndHJhbnNsYXRlWCgnICsgeHkueCArICdweCkgdHJhbnNsYXRlWSgnICsgeHkueSArICdweCkgdHJhbnNsYXRlWigwKScpO1xuICB9XG59IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5pbXBvcnQgeyBzZXRUcmFuc2l0aW9uUHJvcGVydHksIGdldFRyYW5zaXRpb25Qcm9wZXJ0eSwgZ2V0VHJhbnNmb3JtWFksIHNldFRyYW5zZm9ybVhZLCBnZXRUcmFuc2Zvcm1OYW1lIH0gZnJvbSAnLi9wcm9wZXJ0eVV0aWxzJztcblxudmFyIFJFX05VTSA9IC9bXFwtK10/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bXFwtK10/XFxkK3wpLy5zb3VyY2U7XG5cbnZhciBnZXRDb21wdXRlZFN0eWxlWCA9IHZvaWQgMDtcblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM0ODU2NTQvMzA0MDYwNVxuZnVuY3Rpb24gZm9yY2VSZWxheW91dChlbGVtKSB7XG4gIHZhciBvcmlnaW5hbFN0eWxlID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGVsZW0ub2Zmc2V0SGVpZ2h0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGVsZW0uc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsU3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNzcyhlbCwgbmFtZSwgdikge1xuICB2YXIgdmFsdWUgPSB2O1xuICBpZiAoKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihuYW1lKSkgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIgaSBpbiBuYW1lKSB7XG4gICAgICBpZiAobmFtZS5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICBjc3MoZWwsIGksIG5hbWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKyAncHgnO1xuICAgIH1cbiAgICBlbC5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGVYKGVsLCBuYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50UG9zaXRpb24oZWxlbSkge1xuICB2YXIgYm94ID0gdm9pZCAwO1xuICB2YXIgeCA9IHZvaWQgMDtcbiAgdmFyIHkgPSB2b2lkIDA7XG4gIHZhciBkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG4gIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gIHZhciBkb2NFbGVtID0gZG9jICYmIGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gIC8vIOagueaNriBHQlMg5pyA5paw5pWw5o2u77yMQS1HcmFkZSBCcm93c2VycyDpg73lt7LmlK/mjIEgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IOaWueazle+8jOS4jeeUqOWGjeiAg+iZkeS8oOe7n+eahOWunueOsOaWueW8j1xuICBib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIC8vIOazqO+8mmpRdWVyeSDov5jogIPomZHlh4/ljrsgZG9jRWxlbS5jbGllbnRMZWZ0L2NsaWVudFRvcFxuICAvLyDkvYbmtYvor5Xlj5HnjrDvvIzov5nmoLflj43ogIzkvJrlr7zoh7TlvZMgaHRtbCDlkowgYm9keSDmnInovrnot50v6L655qGG5qC35byP5pe277yM6I635Y+W55qE5YC85LiN5q2j56GuXG4gIC8vIOatpOWklu+8jGllNiDkvJrlv73nlaUgaHRtbCDnmoQgbWFyZ2luIOWAvO+8jOW5uOi/kOWcsOaYr+ayoeacieiwgeS8muWOu+iuvue9riBodG1sIOeahCBtYXJnaW5cblxuICB4ID0gYm94LmxlZnQ7XG4gIHkgPSBib3gudG9wO1xuXG4gIC8vIEluIElFLCBtb3N0IG9mIHRoZSB0aW1lLCAyIGV4dHJhIHBpeGVscyBhcmUgYWRkZWQgdG8gdGhlIHRvcCBhbmQgbGVmdFxuICAvLyBkdWUgdG8gdGhlIGltcGxpY2l0IDItcGl4ZWwgaW5zZXQgYm9yZGVyLiAgSW4gSUU2LzcgcXVpcmtzIG1vZGUgYW5kXG4gIC8vIElFNiBzdGFuZGFyZHMgbW9kZSwgdGhpcyBib3JkZXIgY2FuIGJlIG92ZXJyaWRkZW4gYnkgc2V0dGluZyB0aGVcbiAgLy8gZG9jdW1lbnQgZWxlbWVudCdzIGJvcmRlciB0byB6ZXJvIC0tIHRodXMsIHdlIGNhbm5vdCByZWx5IG9uIHRoZVxuICAvLyBvZmZzZXQgYWx3YXlzIGJlaW5nIDIgcGl4ZWxzLlxuXG4gIC8vIEluIHF1aXJrcyBtb2RlLCB0aGUgb2Zmc2V0IGNhbiBiZSBkZXRlcm1pbmVkIGJ5IHF1ZXJ5aW5nIHRoZSBib2R5J3NcbiAgLy8gY2xpZW50TGVmdC9jbGllbnRUb3AsIGJ1dCBpbiBzdGFuZGFyZHMgbW9kZSwgaXQgaXMgZm91bmQgYnkgcXVlcnlpbmdcbiAgLy8gdGhlIGRvY3VtZW50IGVsZW1lbnQncyBjbGllbnRMZWZ0L2NsaWVudFRvcC4gIFNpbmNlIHdlIGFscmVhZHkgY2FsbGVkXG4gIC8vIGdldENsaWVudEJvdW5kaW5nUmVjdCB3ZSBoYXZlIGFscmVhZHkgZm9yY2VkIGEgcmVmbG93LCBzbyBpdCBpcyBub3RcbiAgLy8gdG9vIGV4cGVuc2l2ZSBqdXN0IHRvIHF1ZXJ5IHRoZW0gYWxsLlxuXG4gIC8vIGllIOS4i+W6lOivpeWHj+WOu+eql+WPo+eahOi+ueahhuWQp++8jOavleern+m7mOiupCBhYnNvbHV0ZSDpg73mmK/nm7jlr7nnqpflj6PlrprkvY3nmoRcbiAgLy8g56qX5Y+j6L655qGG5qCH5YeG5piv6K6+IGRvY3VtZW50RWxlbWVudCAscXVpcmtzIOaXtuiuvue9riBib2R5XG4gIC8vIOacgOWlveemgeatouWcqCBib2R5IOWSjCBodG1sIOS4iui+ueahhiDvvIzkvYYgaWUgPCA5IGh0bWwg6buY6K6k5pyJIDJweCDvvIzlh4/ljrtcbiAgLy8g5L2G5piv6Z2eIGllIOS4jeWPr+iDveiuvue9rueql+WPo+i+ueahhu+8jGJvZHkgaHRtbCDkuZ/kuI3mmK/nqpflj6MgLGllIOWPr+S7pemAmui/hyBodG1sLGJvZHkg6K6+572uXG4gIC8vIOagh+WHhiBpZSDkuIsgZG9jRWxlbS5jbGllbnRUb3Ag5bCx5pivIGJvcmRlci10b3BcbiAgLy8gaWU3IGh0bWwg5Y2z56qX5Y+j6L655qGG5pS55Y+Y5LiN5LqG44CC5rC46L+c5Li6IDJcbiAgLy8g5L2G5qCH5YeGIGZpcmVmb3gvY2hyb21lL2llOSDkuIsgZG9jRWxlbS5jbGllbnRUb3Ag5piv56qX5Y+j6L655qGG77yM5Y2z5L2/6K6+5LqGIGJvcmRlci10b3Ag5Lmf5Li6IDBcblxuICB4IC09IGRvY0VsZW0uY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcbiAgeSAtPSBkb2NFbGVtLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogeCxcbiAgICB0b3A6IHlcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsKHcsIHRvcCkge1xuICB2YXIgcmV0ID0gd1sncGFnZScgKyAodG9wID8gJ1knIDogJ1gnKSArICdPZmZzZXQnXTtcbiAgdmFyIG1ldGhvZCA9ICdzY3JvbGwnICsgKHRvcCA/ICdUb3AnIDogJ0xlZnQnKTtcbiAgaWYgKHR5cGVvZiByZXQgIT09ICdudW1iZXInKSB7XG4gICAgdmFyIGQgPSB3LmRvY3VtZW50O1xuICAgIC8vIGllNiw3LDggc3RhbmRhcmQgbW9kZVxuICAgIHJldCA9IGQuZG9jdW1lbnRFbGVtZW50W21ldGhvZF07XG4gICAgaWYgKHR5cGVvZiByZXQgIT09ICdudW1iZXInKSB7XG4gICAgICAvLyBxdWlya3MgbW9kZVxuICAgICAgcmV0ID0gZC5ib2R5W21ldGhvZF07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbExlZnQodykge1xuICByZXR1cm4gZ2V0U2Nyb2xsKHcpO1xufVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxUb3Aodykge1xuICByZXR1cm4gZ2V0U2Nyb2xsKHcsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXQoZWwpIHtcbiAgdmFyIHBvcyA9IGdldENsaWVudFBvc2l0aW9uKGVsKTtcbiAgdmFyIGRvYyA9IGVsLm93bmVyRG9jdW1lbnQ7XG4gIHZhciB3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gIHBvcy5sZWZ0ICs9IGdldFNjcm9sbExlZnQodyk7XG4gIHBvcy50b3AgKz0gZ2V0U2Nyb2xsVG9wKHcpO1xuICByZXR1cm4gcG9zO1xufVxuXG4vKipcbiAqIEEgY3J1ZGUgd2F5IG9mIGRldGVybWluaW5nIGlmIGFuIG9iamVjdCBpcyBhIHdpbmRvd1xuICogQG1lbWJlciB1dGlsXG4gKi9cbmZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuICAvLyBtdXN0IHVzZSA9PSBmb3IgaWU4XG4gIC8qIGVzbGludCBlcWVxZXE6MCAqL1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIG9iaiAhPT0gdW5kZWZpbmVkICYmIG9iaiA9PSBvYmoud2luZG93O1xufVxuXG5mdW5jdGlvbiBnZXREb2N1bWVudChub2RlKSB7XG4gIGlmIChpc1dpbmRvdyhub2RlKSkge1xuICAgIHJldHVybiBub2RlLmRvY3VtZW50O1xuICB9XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSA5KSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudDtcbn1cblxuZnVuY3Rpb24gX2dldENvbXB1dGVkU3R5bGUoZWxlbSwgbmFtZSwgY3MpIHtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBjcztcbiAgdmFyIHZhbCA9ICcnO1xuICB2YXIgZCA9IGdldERvY3VtZW50KGVsZW0pO1xuICBjb21wdXRlZFN0eWxlID0gY29tcHV0ZWRTdHlsZSB8fCBkLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbSwgbnVsbCk7XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2tpc3N5dGVhbS9raXNzeS9pc3N1ZXMvNjFcbiAgaWYgKGNvbXB1dGVkU3R5bGUpIHtcbiAgICB2YWwgPSBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSkgfHwgY29tcHV0ZWRTdHlsZVtuYW1lXTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cbnZhciBfUkVfTlVNX05PX1BYID0gbmV3IFJlZ0V4cCgnXignICsgUkVfTlVNICsgJykoPyFweClbYS16JV0rJCcsICdpJyk7XG52YXIgUkVfUE9TID0gL14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvO1xudmFyIENVUlJFTlRfU1RZTEUgPSAnY3VycmVudFN0eWxlJztcbnZhciBSVU5USU1FX1NUWUxFID0gJ3J1bnRpbWVTdHlsZSc7XG52YXIgTEVGVCA9ICdsZWZ0JztcbnZhciBQWCA9ICdweCc7XG5cbmZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlSUUoZWxlbSwgbmFtZSkge1xuICAvLyBjdXJyZW50U3R5bGUgbWF5YmUgbnVsbFxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzUyMzEuYXNweFxuICB2YXIgcmV0ID0gZWxlbVtDVVJSRU5UX1NUWUxFXSAmJiBlbGVtW0NVUlJFTlRfU1RZTEVdW25hbWVdO1xuXG4gIC8vIOW9kyB3aWR0aC9oZWlnaHQg6K6+572u5Li655m+5YiG5q+U5pe277yM6YCa6L+HIHBpeGVsTGVmdCDmlrnlvI/ovazmjaLnmoQgd2lkdGgvaGVpZ2h0IOWAvFxuICAvLyDkuIDlvIDlp4vlsLHlpITnkIbkuoYhIENVU1RPTV9TVFlMRS5oZWlnaHQsQ1VTVE9NX1NUWUxFLndpZHRoICxjc3NIb29rIOino+WGs0AyMDExLTA4LTE5XG4gIC8vIOWcqCBpZSDkuIvkuI3lr7nvvIzpnIDopoHnm7TmjqXnlKggb2Zmc2V0IOaWueW8j1xuICAvLyBib3JkZXJXaWR0aCDnrYnlgLzkuZ/mnInpl67popjvvIzkvYbogIPomZHliLAgYm9yZGVyV2lkdGgg6K6+5Li655m+5YiG5q+U55qE5qaC546H5b6I5bCP77yM6L+Z6YeM5bCx5LiN6ICD6JmR5LqGXG5cbiAgLy8gRnJvbSB0aGUgYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1xuICAvLyBodHRwOi8vZXJpay5lYWUubmV0L2FyY2hpdmVzLzIwMDcvMDcvMjcvMTguNTQuMTUvI2NvbW1lbnQtMTAyMjkxXG4gIC8vIElmIHdlJ3JlIG5vdCBkZWFsaW5nIHdpdGggYSByZWd1bGFyIHBpeGVsIG51bWJlclxuICAvLyBidXQgYSBudW1iZXIgdGhhdCBoYXMgYSB3ZWlyZCBlbmRpbmcsIHdlIG5lZWQgdG8gY29udmVydCBpdCB0byBwaXhlbHNcbiAgLy8gZXhjbHVkZSBsZWZ0IHJpZ2h0IGZvciByZWxhdGl2aXR5XG4gIGlmIChfUkVfTlVNX05PX1BYLnRlc3QocmV0KSAmJiAhUkVfUE9TLnRlc3QobmFtZSkpIHtcbiAgICAvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG4gICAgdmFyIHN0eWxlID0gZWxlbS5zdHlsZTtcbiAgICB2YXIgbGVmdCA9IHN0eWxlW0xFRlRdO1xuICAgIHZhciByc0xlZnQgPSBlbGVtW1JVTlRJTUVfU1RZTEVdW0xFRlRdO1xuXG4gICAgLy8gcHJldmVudCBmbGFzaGluZyBvZiBjb250ZW50XG4gICAgZWxlbVtSVU5USU1FX1NUWUxFXVtMRUZUXSA9IGVsZW1bQ1VSUkVOVF9TVFlMRV1bTEVGVF07XG5cbiAgICAvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG4gICAgc3R5bGVbTEVGVF0gPSBuYW1lID09PSAnZm9udFNpemUnID8gJzFlbScgOiByZXQgfHwgMDtcbiAgICByZXQgPSBzdHlsZS5waXhlbExlZnQgKyBQWDtcblxuICAgIC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcbiAgICBzdHlsZVtMRUZUXSA9IGxlZnQ7XG5cbiAgICBlbGVtW1JVTlRJTUVfU1RZTEVdW0xFRlRdID0gcnNMZWZ0O1xuICB9XG4gIHJldHVybiByZXQgPT09ICcnID8gJ2F1dG8nIDogcmV0O1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2V0Q29tcHV0ZWRTdHlsZVggPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSA/IF9nZXRDb21wdXRlZFN0eWxlIDogX2dldENvbXB1dGVkU3R5bGVJRTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0RGlyZWN0aW9uKGRpciwgb3B0aW9uKSB7XG4gIGlmIChkaXIgPT09ICdsZWZ0Jykge1xuICAgIHJldHVybiBvcHRpb24udXNlQ3NzUmlnaHQgPyAncmlnaHQnIDogZGlyO1xuICB9XG4gIHJldHVybiBvcHRpb24udXNlQ3NzQm90dG9tID8gJ2JvdHRvbScgOiBkaXI7XG59XG5cbmZ1bmN0aW9uIG9wcG9zaXRlT2Zmc2V0RGlyZWN0aW9uKGRpcikge1xuICBpZiAoZGlyID09PSAnbGVmdCcpIHtcbiAgICByZXR1cm4gJ3JpZ2h0JztcbiAgfSBlbHNlIGlmIChkaXIgPT09ICdyaWdodCcpIHtcbiAgICByZXR1cm4gJ2xlZnQnO1xuICB9IGVsc2UgaWYgKGRpciA9PT0gJ3RvcCcpIHtcbiAgICByZXR1cm4gJ2JvdHRvbSc7XG4gIH0gZWxzZSBpZiAoZGlyID09PSAnYm90dG9tJykge1xuICAgIHJldHVybiAndG9wJztcbiAgfVxufVxuXG4vLyDorr7nva4gZWxlbSDnm7jlr7kgZWxlbS5vd25lckRvY3VtZW50IOeahOWdkOagh1xuZnVuY3Rpb24gc2V0TGVmdFRvcChlbGVtLCBvZmZzZXQsIG9wdGlvbikge1xuICAvLyBzZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG4gIGlmIChjc3MoZWxlbSwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgZWxlbS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gIH1cbiAgdmFyIHByZXNldEggPSAtOTk5O1xuICB2YXIgcHJlc2V0ViA9IC05OTk7XG4gIHZhciBob3Jpem9udGFsUHJvcGVydHkgPSBnZXRPZmZzZXREaXJlY3Rpb24oJ2xlZnQnLCBvcHRpb24pO1xuICB2YXIgdmVydGljYWxQcm9wZXJ0eSA9IGdldE9mZnNldERpcmVjdGlvbigndG9wJywgb3B0aW9uKTtcbiAgdmFyIG9wcG9zaXRlSG9yaXpvbnRhbFByb3BlcnR5ID0gb3Bwb3NpdGVPZmZzZXREaXJlY3Rpb24oaG9yaXpvbnRhbFByb3BlcnR5KTtcbiAgdmFyIG9wcG9zaXRlVmVydGljYWxQcm9wZXJ0eSA9IG9wcG9zaXRlT2Zmc2V0RGlyZWN0aW9uKHZlcnRpY2FsUHJvcGVydHkpO1xuXG4gIGlmIChob3Jpem9udGFsUHJvcGVydHkgIT09ICdsZWZ0Jykge1xuICAgIHByZXNldEggPSA5OTk7XG4gIH1cblxuICBpZiAodmVydGljYWxQcm9wZXJ0eSAhPT0gJ3RvcCcpIHtcbiAgICBwcmVzZXRWID0gOTk5O1xuICB9XG4gIHZhciBvcmlnaW5hbFRyYW5zaXRpb24gPSAnJztcbiAgdmFyIG9yaWdpbmFsT2Zmc2V0ID0gZ2V0T2Zmc2V0KGVsZW0pO1xuICBpZiAoJ2xlZnQnIGluIG9mZnNldCB8fCAndG9wJyBpbiBvZmZzZXQpIHtcbiAgICBvcmlnaW5hbFRyYW5zaXRpb24gPSBnZXRUcmFuc2l0aW9uUHJvcGVydHkoZWxlbSkgfHwgJyc7XG4gICAgc2V0VHJhbnNpdGlvblByb3BlcnR5KGVsZW0sICdub25lJyk7XG4gIH1cbiAgaWYgKCdsZWZ0JyBpbiBvZmZzZXQpIHtcbiAgICBlbGVtLnN0eWxlW29wcG9zaXRlSG9yaXpvbnRhbFByb3BlcnR5XSA9ICcnO1xuICAgIGVsZW0uc3R5bGVbaG9yaXpvbnRhbFByb3BlcnR5XSA9IHByZXNldEggKyAncHgnO1xuICB9XG4gIGlmICgndG9wJyBpbiBvZmZzZXQpIHtcbiAgICBlbGVtLnN0eWxlW29wcG9zaXRlVmVydGljYWxQcm9wZXJ0eV0gPSAnJztcbiAgICBlbGVtLnN0eWxlW3ZlcnRpY2FsUHJvcGVydHldID0gcHJlc2V0ViArICdweCc7XG4gIH1cbiAgLy8gZm9yY2UgcmVsYXlvdXRcbiAgZm9yY2VSZWxheW91dChlbGVtKTtcbiAgdmFyIG9sZCA9IGdldE9mZnNldChlbGVtKTtcbiAgdmFyIG9yaWdpbmFsU3R5bGUgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdmFyIGRpciA9IGdldE9mZnNldERpcmVjdGlvbihrZXksIG9wdGlvbik7XG4gICAgICB2YXIgcHJlc2V0ID0ga2V5ID09PSAnbGVmdCcgPyBwcmVzZXRIIDogcHJlc2V0VjtcbiAgICAgIHZhciBvZmYgPSBvcmlnaW5hbE9mZnNldFtrZXldIC0gb2xkW2tleV07XG4gICAgICBpZiAoZGlyID09PSBrZXkpIHtcbiAgICAgICAgb3JpZ2luYWxTdHlsZVtkaXJdID0gcHJlc2V0ICsgb2ZmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3JpZ2luYWxTdHlsZVtkaXJdID0gcHJlc2V0IC0gb2ZmO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjc3MoZWxlbSwgb3JpZ2luYWxTdHlsZSk7XG4gIC8vIGZvcmNlIHJlbGF5b3V0XG4gIGZvcmNlUmVsYXlvdXQoZWxlbSk7XG4gIGlmICgnbGVmdCcgaW4gb2Zmc2V0IHx8ICd0b3AnIGluIG9mZnNldCkge1xuICAgIHNldFRyYW5zaXRpb25Qcm9wZXJ0eShlbGVtLCBvcmlnaW5hbFRyYW5zaXRpb24pO1xuICB9XG4gIHZhciByZXQgPSB7fTtcbiAgZm9yICh2YXIgX2tleSBpbiBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0Lmhhc093blByb3BlcnR5KF9rZXkpKSB7XG4gICAgICB2YXIgX2RpciA9IGdldE9mZnNldERpcmVjdGlvbihfa2V5LCBvcHRpb24pO1xuICAgICAgdmFyIF9vZmYgPSBvZmZzZXRbX2tleV0gLSBvcmlnaW5hbE9mZnNldFtfa2V5XTtcbiAgICAgIGlmIChfa2V5ID09PSBfZGlyKSB7XG4gICAgICAgIHJldFtfZGlyXSA9IG9yaWdpbmFsU3R5bGVbX2Rpcl0gKyBfb2ZmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0W19kaXJdID0gb3JpZ2luYWxTdHlsZVtfZGlyXSAtIF9vZmY7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNzcyhlbGVtLCByZXQpO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2Zvcm0oZWxlbSwgb2Zmc2V0KSB7XG4gIHZhciBvcmlnaW5hbE9mZnNldCA9IGdldE9mZnNldChlbGVtKTtcbiAgdmFyIG9yaWdpbmFsWFkgPSBnZXRUcmFuc2Zvcm1YWShlbGVtKTtcbiAgdmFyIHJlc3VsdFhZID0geyB4OiBvcmlnaW5hbFhZLngsIHk6IG9yaWdpbmFsWFkueSB9O1xuICBpZiAoJ2xlZnQnIGluIG9mZnNldCkge1xuICAgIHJlc3VsdFhZLnggPSBvcmlnaW5hbFhZLnggKyBvZmZzZXQubGVmdCAtIG9yaWdpbmFsT2Zmc2V0LmxlZnQ7XG4gIH1cbiAgaWYgKCd0b3AnIGluIG9mZnNldCkge1xuICAgIHJlc3VsdFhZLnkgPSBvcmlnaW5hbFhZLnkgKyBvZmZzZXQudG9wIC0gb3JpZ2luYWxPZmZzZXQudG9wO1xuICB9XG4gIHNldFRyYW5zZm9ybVhZKGVsZW0sIHJlc3VsdFhZKTtcbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0KGVsZW0sIG9mZnNldCwgb3B0aW9uKSB7XG4gIGlmIChvcHRpb24uaWdub3JlU2hha2UpIHtcbiAgICB2YXIgb3JpT2Zmc2V0ID0gZ2V0T2Zmc2V0KGVsZW0pO1xuXG4gICAgdmFyIG9MZWZ0ID0gb3JpT2Zmc2V0LmxlZnQudG9GaXhlZCgwKTtcbiAgICB2YXIgb1RvcCA9IG9yaU9mZnNldC50b3AudG9GaXhlZCgwKTtcbiAgICB2YXIgdExlZnQgPSBvZmZzZXQubGVmdC50b0ZpeGVkKDApO1xuICAgIHZhciB0VG9wID0gb2Zmc2V0LnRvcC50b0ZpeGVkKDApO1xuXG4gICAgaWYgKG9MZWZ0ID09PSB0TGVmdCAmJiBvVG9wID09PSB0VG9wKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbi51c2VDc3NSaWdodCB8fCBvcHRpb24udXNlQ3NzQm90dG9tKSB7XG4gICAgc2V0TGVmdFRvcChlbGVtLCBvZmZzZXQsIG9wdGlvbik7XG4gIH0gZWxzZSBpZiAob3B0aW9uLnVzZUNzc1RyYW5zZm9ybSAmJiBnZXRUcmFuc2Zvcm1OYW1lKCkgaW4gZG9jdW1lbnQuYm9keS5zdHlsZSkge1xuICAgIHNldFRyYW5zZm9ybShlbGVtLCBvZmZzZXQsIG9wdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgc2V0TGVmdFRvcChlbGVtLCBvZmZzZXQsIG9wdGlvbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZWFjaChhcnIsIGZuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4oYXJyW2ldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0JvcmRlckJveEZuKGVsZW0pIHtcbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGVYKGVsZW0sICdib3hTaXppbmcnKSA9PT0gJ2JvcmRlci1ib3gnO1xufVxuXG52YXIgQk9YX01PREVMUyA9IFsnbWFyZ2luJywgJ2JvcmRlcicsICdwYWRkaW5nJ107XG52YXIgQ09OVEVOVF9JTkRFWCA9IC0xO1xudmFyIFBBRERJTkdfSU5ERVggPSAyO1xudmFyIEJPUkRFUl9JTkRFWCA9IDE7XG52YXIgTUFSR0lOX0lOREVYID0gMDtcblxuZnVuY3Rpb24gc3dhcChlbGVtLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgb2xkID0ge307XG4gIHZhciBzdHlsZSA9IGVsZW0uc3R5bGU7XG4gIHZhciBuYW1lID0gdm9pZCAwO1xuXG4gIC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuICBmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBvbGRbbmFtZV0gPSBzdHlsZVtuYW1lXTtcbiAgICAgIHN0eWxlW25hbWVdID0gb3B0aW9uc1tuYW1lXTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjay5jYWxsKGVsZW0pO1xuXG4gIC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuICBmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBzdHlsZVtuYW1lXSA9IG9sZFtuYW1lXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UEJNV2lkdGgoZWxlbSwgcHJvcHMsIHdoaWNoKSB7XG4gIHZhciB2YWx1ZSA9IDA7XG4gIHZhciBwcm9wID0gdm9pZCAwO1xuICB2YXIgaiA9IHZvaWQgMDtcbiAgdmFyIGkgPSB2b2lkIDA7XG4gIGZvciAoaiA9IDA7IGogPCBwcm9wcy5sZW5ndGg7IGorKykge1xuICAgIHByb3AgPSBwcm9wc1tqXTtcbiAgICBpZiAocHJvcCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHdoaWNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjc3NQcm9wID0gdm9pZCAwO1xuICAgICAgICBpZiAocHJvcCA9PT0gJ2JvcmRlcicpIHtcbiAgICAgICAgICBjc3NQcm9wID0gJycgKyBwcm9wICsgd2hpY2hbaV0gKyAnV2lkdGgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNzc1Byb3AgPSBwcm9wICsgd2hpY2hbaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgKz0gcGFyc2VGbG9hdChnZXRDb21wdXRlZFN0eWxlWChlbGVtLCBjc3NQcm9wKSkgfHwgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgZG9tVXRpbHMgPSB7fTtcblxuZWFjaChbJ1dpZHRoJywgJ0hlaWdodCddLCBmdW5jdGlvbiAobmFtZSkge1xuICBkb21VdGlsc1snZG9jJyArIG5hbWVdID0gZnVuY3Rpb24gKHJlZldpbikge1xuICAgIHZhciBkID0gcmVmV2luLmRvY3VtZW50O1xuICAgIHJldHVybiBNYXRoLm1heChcbiAgICAvLyBmaXJlZm94IGNocm9tZSBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0PCBib2R5LnNjcm9sbEhlaWdodFxuICAgIC8vIGllIHN0YW5kYXJkIG1vZGUgOiBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0PiBib2R5LnNjcm9sbEhlaWdodFxuICAgIGQuZG9jdW1lbnRFbGVtZW50WydzY3JvbGwnICsgbmFtZV0sXG4gICAgLy8gcXVpcmtzIDogZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCDmnIDlpKfnrYnkuo7lj6/op4bnqpflj6PlpJrkuIDngrnvvJ9cbiAgICBkLmJvZHlbJ3Njcm9sbCcgKyBuYW1lXSwgZG9tVXRpbHNbJ3ZpZXdwb3J0JyArIG5hbWVdKGQpKTtcbiAgfTtcblxuICBkb21VdGlsc1sndmlld3BvcnQnICsgbmFtZV0gPSBmdW5jdGlvbiAod2luKSB7XG4gICAgLy8gcGMgYnJvd3NlciBpbmNsdWRlcyBzY3JvbGxiYXIgaW4gd2luZG93LmlubmVyV2lkdGhcbiAgICB2YXIgcHJvcCA9ICdjbGllbnQnICsgbmFtZTtcbiAgICB2YXIgZG9jID0gd2luLmRvY3VtZW50O1xuICAgIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gICAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIGRvY3VtZW50RWxlbWVudFByb3AgPSBkb2N1bWVudEVsZW1lbnRbcHJvcF07XG4gICAgLy8g5qCH5YeG5qih5byP5Y+WIGRvY3VtZW50RWxlbWVudFxuICAgIC8vIGJhY2tjb21wYXQg5Y+WIGJvZHlcbiAgICByZXR1cm4gZG9jLmNvbXBhdE1vZGUgPT09ICdDU1MxQ29tcGF0JyAmJiBkb2N1bWVudEVsZW1lbnRQcm9wIHx8IGJvZHkgJiYgYm9keVtwcm9wXSB8fCBkb2N1bWVudEVsZW1lbnRQcm9wO1xuICB9O1xufSk7XG5cbi8qXG4g5b6X5Yiw5YWD57Sg55qE5aSn5bCP5L+h5oGvXG4gQHBhcmFtIGVsZW1cbiBAcGFyYW0gbmFtZVxuIEBwYXJhbSB7U3RyaW5nfSBbZXh0cmFdICAncGFkZGluZycgOiAoY3NzIHdpZHRoKSArIHBhZGRpbmdcbiAnYm9yZGVyJyA6IChjc3Mgd2lkdGgpICsgcGFkZGluZyArIGJvcmRlclxuICdtYXJnaW4nIDogKGNzcyB3aWR0aCkgKyBwYWRkaW5nICsgYm9yZGVyICsgbWFyZ2luXG4gKi9cbmZ1bmN0aW9uIGdldFdIKGVsZW0sIG5hbWUsIGV4KSB7XG4gIHZhciBleHRyYSA9IGV4O1xuICBpZiAoaXNXaW5kb3coZWxlbSkpIHtcbiAgICByZXR1cm4gbmFtZSA9PT0gJ3dpZHRoJyA/IGRvbVV0aWxzLnZpZXdwb3J0V2lkdGgoZWxlbSkgOiBkb21VdGlscy52aWV3cG9ydEhlaWdodChlbGVtKTtcbiAgfSBlbHNlIGlmIChlbGVtLm5vZGVUeXBlID09PSA5KSB7XG4gICAgcmV0dXJuIG5hbWUgPT09ICd3aWR0aCcgPyBkb21VdGlscy5kb2NXaWR0aChlbGVtKSA6IGRvbVV0aWxzLmRvY0hlaWdodChlbGVtKTtcbiAgfVxuICB2YXIgd2hpY2ggPSBuYW1lID09PSAnd2lkdGgnID8gWydMZWZ0JywgJ1JpZ2h0J10gOiBbJ1RvcCcsICdCb3R0b20nXTtcbiAgdmFyIGJvcmRlckJveFZhbHVlID0gbmFtZSA9PT0gJ3dpZHRoJyA/IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggOiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlWChlbGVtKTtcbiAgdmFyIGlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3hGbihlbGVtLCBjb21wdXRlZFN0eWxlKTtcbiAgdmFyIGNzc0JveFZhbHVlID0gMDtcbiAgaWYgKGJvcmRlckJveFZhbHVlID09PSBudWxsIHx8IGJvcmRlckJveFZhbHVlID09PSB1bmRlZmluZWQgfHwgYm9yZGVyQm94VmFsdWUgPD0gMCkge1xuICAgIGJvcmRlckJveFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuIGNvbXB1dGVkIGNzcyBpZiBuZWNlc3NhcnlcbiAgICBjc3NCb3hWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGVYKGVsZW0sIG5hbWUpO1xuICAgIGlmIChjc3NCb3hWYWx1ZSA9PT0gbnVsbCB8fCBjc3NCb3hWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IE51bWJlcihjc3NCb3hWYWx1ZSkgPCAwKSB7XG4gICAgICBjc3NCb3hWYWx1ZSA9IGVsZW0uc3R5bGVbbmFtZV0gfHwgMDtcbiAgICB9XG4gICAgLy8gTm9ybWFsaXplICcnLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcbiAgICBjc3NCb3hWYWx1ZSA9IHBhcnNlRmxvYXQoY3NzQm94VmFsdWUpIHx8IDA7XG4gIH1cbiAgaWYgKGV4dHJhID09PSB1bmRlZmluZWQpIHtcbiAgICBleHRyYSA9IGlzQm9yZGVyQm94ID8gQk9SREVSX0lOREVYIDogQ09OVEVOVF9JTkRFWDtcbiAgfVxuICB2YXIgYm9yZGVyQm94VmFsdWVPcklzQm9yZGVyQm94ID0gYm9yZGVyQm94VmFsdWUgIT09IHVuZGVmaW5lZCB8fCBpc0JvcmRlckJveDtcbiAgdmFyIHZhbCA9IGJvcmRlckJveFZhbHVlIHx8IGNzc0JveFZhbHVlO1xuICBpZiAoZXh0cmEgPT09IENPTlRFTlRfSU5ERVgpIHtcbiAgICBpZiAoYm9yZGVyQm94VmFsdWVPcklzQm9yZGVyQm94KSB7XG4gICAgICByZXR1cm4gdmFsIC0gZ2V0UEJNV2lkdGgoZWxlbSwgWydib3JkZXInLCAncGFkZGluZyddLCB3aGljaCwgY29tcHV0ZWRTdHlsZSk7XG4gICAgfVxuICAgIHJldHVybiBjc3NCb3hWYWx1ZTtcbiAgfSBlbHNlIGlmIChib3JkZXJCb3hWYWx1ZU9ySXNCb3JkZXJCb3gpIHtcbiAgICBpZiAoZXh0cmEgPT09IEJPUkRFUl9JTkRFWCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbCArIChleHRyYSA9PT0gUEFERElOR19JTkRFWCA/IC1nZXRQQk1XaWR0aChlbGVtLCBbJ2JvcmRlciddLCB3aGljaCwgY29tcHV0ZWRTdHlsZSkgOiBnZXRQQk1XaWR0aChlbGVtLCBbJ21hcmdpbiddLCB3aGljaCwgY29tcHV0ZWRTdHlsZSkpO1xuICB9XG4gIHJldHVybiBjc3NCb3hWYWx1ZSArIGdldFBCTVdpZHRoKGVsZW0sIEJPWF9NT0RFTFMuc2xpY2UoZXh0cmEpLCB3aGljaCwgY29tcHV0ZWRTdHlsZSk7XG59XG5cbnZhciBjc3NTaG93ID0ge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gIGRpc3BsYXk6ICdibG9jaydcbn07XG5cbi8vIGZpeCAjMTE5IDogaHR0cHM6Ly9naXRodWIuY29tL2tpc3N5dGVhbS9raXNzeS9pc3N1ZXMvMTE5XG5mdW5jdGlvbiBnZXRXSElnbm9yZURpc3BsYXkoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgdmFyIHZhbCA9IHZvaWQgMDtcbiAgdmFyIGVsZW0gPSBhcmdzWzBdO1xuICAvLyBpbiBjYXNlIGVsZW0gaXMgd2luZG93XG4gIC8vIGVsZW0ub2Zmc2V0V2lkdGggPT09IHVuZGVmaW5lZFxuICBpZiAoZWxlbS5vZmZzZXRXaWR0aCAhPT0gMCkge1xuICAgIHZhbCA9IGdldFdILmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgc3dhcChlbGVtLCBjc3NTaG93LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YWwgPSBnZXRXSC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YWw7XG59XG5cbmVhY2goWyd3aWR0aCcsICdoZWlnaHQnXSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIGZpcnN0ID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XG4gIGRvbVV0aWxzWydvdXRlcicgKyBmaXJzdF0gPSBmdW5jdGlvbiAoZWwsIGluY2x1ZGVNYXJnaW4pIHtcbiAgICByZXR1cm4gZWwgJiYgZ2V0V0hJZ25vcmVEaXNwbGF5KGVsLCBuYW1lLCBpbmNsdWRlTWFyZ2luID8gTUFSR0lOX0lOREVYIDogQk9SREVSX0lOREVYKTtcbiAgfTtcbiAgdmFyIHdoaWNoID0gbmFtZSA9PT0gJ3dpZHRoJyA/IFsnTGVmdCcsICdSaWdodCddIDogWydUb3AnLCAnQm90dG9tJ107XG5cbiAgZG9tVXRpbHNbbmFtZV0gPSBmdW5jdGlvbiAoZWxlbSwgdikge1xuICAgIHZhciB2YWwgPSB2O1xuICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGVsZW0pIHtcbiAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlWChlbGVtKTtcbiAgICAgICAgdmFyIGlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3hGbihlbGVtKTtcbiAgICAgICAgaWYgKGlzQm9yZGVyQm94KSB7XG4gICAgICAgICAgdmFsICs9IGdldFBCTVdpZHRoKGVsZW0sIFsncGFkZGluZycsICdib3JkZXInXSwgd2hpY2gsIGNvbXB1dGVkU3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjc3MoZWxlbSwgbmFtZSwgdmFsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBlbGVtICYmIGdldFdISWdub3JlRGlzcGxheShlbGVtLCBuYW1lLCBDT05URU5UX0lOREVYKTtcbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBtaXgodG8sIGZyb20pIHtcbiAgZm9yICh2YXIgaSBpbiBmcm9tKSB7XG4gICAgaWYgKGZyb20uaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIHRvW2ldID0gZnJvbVtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuXG52YXIgdXRpbHMgPSB7XG4gIGdldFdpbmRvdzogZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlLmRvY3VtZW50ICYmIG5vZGUuc2V0VGltZW91dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZTtcbiAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gIH0sXG5cbiAgZ2V0RG9jdW1lbnQ6IGdldERvY3VtZW50LFxuICBvZmZzZXQ6IGZ1bmN0aW9uIG9mZnNldChlbCwgdmFsdWUsIG9wdGlvbikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzZXRPZmZzZXQoZWwsIHZhbHVlLCBvcHRpb24gfHwge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0T2Zmc2V0KGVsKTtcbiAgICB9XG4gIH0sXG5cbiAgaXNXaW5kb3c6IGlzV2luZG93LFxuICBlYWNoOiBlYWNoLFxuICBjc3M6IGNzcyxcbiAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKG9iaikge1xuICAgIHZhciBpID0gdm9pZCAwO1xuICAgIHZhciByZXQgPSB7fTtcbiAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHJldFtpXSA9IG9ialtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG92ZXJmbG93ID0gb2JqLm92ZXJmbG93O1xuICAgIGlmIChvdmVyZmxvdykge1xuICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgcmV0Lm92ZXJmbG93W2ldID0gb2JqLm92ZXJmbG93W2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgbWl4OiBtaXgsXG4gIGdldFdpbmRvd1Njcm9sbExlZnQ6IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbExlZnQodykge1xuICAgIHJldHVybiBnZXRTY3JvbGxMZWZ0KHcpO1xuICB9LFxuICBnZXRXaW5kb3dTY3JvbGxUb3A6IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbFRvcCh3KSB7XG4gICAgcmV0dXJuIGdldFNjcm9sbFRvcCh3KTtcbiAgfSxcbiAgbWVyZ2U6IGZ1bmN0aW9uIG1lcmdlKCkge1xuICAgIHZhciByZXQgPSB7fTtcblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4yOyBfa2V5MysrKSB7XG4gICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB1dGlscy5taXgocmV0LCBhcmdzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICB2aWV3cG9ydFdpZHRoOiAwLFxuICB2aWV3cG9ydEhlaWdodDogMFxufTtcblxubWl4KHV0aWxzLCBkb21VdGlscyk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0aWxzOyIsImltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuLyoqXG4gKiDlvpfliLDkvJrlr7zoh7TlhYPntKDmmL7npLrkuI3lhajnmoTnpZblhYjlhYPntKBcbiAqL1xuXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAodXRpbHMuaXNXaW5kb3coZWxlbWVudCkgfHwgZWxlbWVudC5ub2RlVHlwZSA9PT0gOSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIGllIOi/meS4quS5n+S4jeaYr+WujOWFqOWPr+ihjFxuICAvKlxuICAgPGRpdiBzdHlsZT1cIndpZHRoOiA1MHB4O2hlaWdodDogMTAwcHg7b3ZlcmZsb3c6IGhpZGRlblwiPlxuICAgPGRpdiBzdHlsZT1cIndpZHRoOiA1MHB4O2hlaWdodDogMTAwcHg7cG9zaXRpb246IHJlbGF0aXZlO1wiIGlkPVwiZDZcIj5cbiAgIOWFg+e0oCA2IOmrmCAxMDBweCDlrr0gNTBweDxici8+XG4gICA8L2Rpdj5cbiAgIDwvZGl2PlxuICAgKi9cbiAgLy8gZWxlbWVudC5vZmZzZXRQYXJlbnQgZG9lcyB0aGUgcmlnaHQgdGhpbmcgaW4gaWU3IGFuZCBiZWxvdy4gUmV0dXJuIHBhcmVudCB3aXRoIGxheW91dCFcbiAgLy8gIEluIG90aGVyIGJyb3dzZXJzIGl0IG9ubHkgaW5jbHVkZXMgZWxlbWVudHMgd2l0aCBwb3NpdGlvbiBhYnNvbHV0ZSwgcmVsYXRpdmUgb3JcbiAgLy8gZml4ZWQsIG5vdCBlbGVtZW50cyB3aXRoIG92ZXJmbG93IHNldCB0byBhdXRvIG9yIHNjcm9sbC5cbiAgLy8gICAgICAgIGlmIChVQS5pZSAmJiBpZU1vZGUgPCA4KSB7XG4gIC8vICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICAvLyAgICAgICAgfVxuICAvLyDnu5/kuIDnmoQgb2Zmc2V0UGFyZW50IOaWueazlVxuICB2YXIgZG9jID0gdXRpbHMuZ2V0RG9jdW1lbnQoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gIHZhciBwYXJlbnQgPSB2b2lkIDA7XG4gIHZhciBwb3NpdGlvblN0eWxlID0gdXRpbHMuY3NzKGVsZW1lbnQsICdwb3NpdGlvbicpO1xuICB2YXIgc2tpcFN0YXRpYyA9IHBvc2l0aW9uU3R5bGUgPT09ICdmaXhlZCcgfHwgcG9zaXRpb25TdHlsZSA9PT0gJ2Fic29sdXRlJztcblxuICBpZiAoIXNraXBTdGF0aWMpIHtcbiAgICByZXR1cm4gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaHRtbCcgPyBudWxsIDogZWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG5cbiAgZm9yIChwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7IHBhcmVudCAmJiBwYXJlbnQgIT09IGJvZHk7IHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlKSB7XG4gICAgcG9zaXRpb25TdHlsZSA9IHV0aWxzLmNzcyhwYXJlbnQsICdwb3NpdGlvbicpO1xuICAgIGlmIChwb3NpdGlvblN0eWxlICE9PSAnc3RhdGljJykge1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE9mZnNldFBhcmVudDsiLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4vZ2V0T2Zmc2V0UGFyZW50JztcbmltcG9ydCBpc0FuY2VzdG9yRml4ZWQgZnJvbSAnLi9pc0FuY2VzdG9yRml4ZWQnO1xuXG4vKipcbiAqIOiOt+W+l+WFg+e0oOeahOaYvuekuumDqOWIhueahOWMuuWfn1xuICovXG5mdW5jdGlvbiBnZXRWaXNpYmxlUmVjdEZvckVsZW1lbnQoZWxlbWVudCkge1xuICB2YXIgdmlzaWJsZVJlY3QgPSB7XG4gICAgbGVmdDogMCxcbiAgICByaWdodDogSW5maW5pdHksXG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogSW5maW5pdHlcbiAgfTtcbiAgdmFyIGVsID0gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuICB2YXIgZG9jID0gdXRpbHMuZ2V0RG9jdW1lbnQoZWxlbWVudCk7XG4gIHZhciB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgdmFyIGJvZHkgPSBkb2MuYm9keTtcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgLy8gRGV0ZXJtaW5lIHRoZSBzaXplIG9mIHRoZSB2aXNpYmxlIHJlY3QgYnkgY2xpbWJpbmcgdGhlIGRvbSBhY2NvdW50aW5nIGZvclxuICAvLyBhbGwgc2Nyb2xsYWJsZSBjb250YWluZXJzLlxuICB3aGlsZSAoZWwpIHtcbiAgICAvLyBjbGllbnRXaWR0aCBpcyB6ZXJvIGZvciBpbmxpbmUgYmxvY2sgZWxlbWVudHMgaW4gaWUuXG4gICAgaWYgKChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ01TSUUnKSA9PT0gLTEgfHwgZWwuY2xpZW50V2lkdGggIT09IDApICYmXG4gICAgLy8gYm9keSBtYXkgaGF2ZSBvdmVyZmxvdyBzZXQgb24gaXQsIHlldCB3ZSBzdGlsbCBnZXQgdGhlIGVudGlyZVxuICAgIC8vIHZpZXdwb3J0LiBJbiBzb21lIGJyb3dzZXJzLCBlbC5vZmZzZXRQYXJlbnQgbWF5IGJlXG4gICAgLy8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBzbyBjaGVjayBmb3IgdGhhdCB0b28uXG4gICAgZWwgIT09IGJvZHkgJiYgZWwgIT09IGRvY3VtZW50RWxlbWVudCAmJiB1dGlscy5jc3MoZWwsICdvdmVyZmxvdycpICE9PSAndmlzaWJsZScpIHtcbiAgICAgIHZhciBwb3MgPSB1dGlscy5vZmZzZXQoZWwpO1xuICAgICAgLy8gYWRkIGJvcmRlclxuICAgICAgcG9zLmxlZnQgKz0gZWwuY2xpZW50TGVmdDtcbiAgICAgIHBvcy50b3AgKz0gZWwuY2xpZW50VG9wO1xuICAgICAgdmlzaWJsZVJlY3QudG9wID0gTWF0aC5tYXgodmlzaWJsZVJlY3QudG9wLCBwb3MudG9wKTtcbiAgICAgIHZpc2libGVSZWN0LnJpZ2h0ID0gTWF0aC5taW4odmlzaWJsZVJlY3QucmlnaHQsXG4gICAgICAvLyBjb25zaWRlciBhcmVhIHdpdGhvdXQgc2Nyb2xsQmFyXG4gICAgICBwb3MubGVmdCArIGVsLmNsaWVudFdpZHRoKTtcbiAgICAgIHZpc2libGVSZWN0LmJvdHRvbSA9IE1hdGgubWluKHZpc2libGVSZWN0LmJvdHRvbSwgcG9zLnRvcCArIGVsLmNsaWVudEhlaWdodCk7XG4gICAgICB2aXNpYmxlUmVjdC5sZWZ0ID0gTWF0aC5tYXgodmlzaWJsZVJlY3QubGVmdCwgcG9zLmxlZnQpO1xuICAgIH0gZWxzZSBpZiAoZWwgPT09IGJvZHkgfHwgZWwgPT09IGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGVsID0gZ2V0T2Zmc2V0UGFyZW50KGVsKTtcbiAgfVxuXG4gIC8vIFNldCBlbGVtZW50IHBvc2l0aW9uIHRvIGZpeGVkXG4gIC8vIG1ha2Ugc3VyZSBhYnNvbHV0ZSBlbGVtZW50IGl0c2VsZiBkb24ndCBhZmZlY3QgaXQncyB2aXNpYmxlIGFyZWFcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNzYwMVxuICB2YXIgb3JpZ2luYWxQb3NpdGlvbiA9IG51bGw7XG4gIGlmICghdXRpbHMuaXNXaW5kb3coZWxlbWVudCkgJiYgZWxlbWVudC5ub2RlVHlwZSAhPT0gOSkge1xuICAgIG9yaWdpbmFsUG9zaXRpb24gPSBlbGVtZW50LnN0eWxlLnBvc2l0aW9uO1xuICAgIHZhciBwb3NpdGlvbiA9IHV0aWxzLmNzcyhlbGVtZW50LCAncG9zaXRpb24nKTtcbiAgICBpZiAocG9zaXRpb24gPT09ICdhYnNvbHV0ZScpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzY3JvbGxYID0gdXRpbHMuZ2V0V2luZG93U2Nyb2xsTGVmdCh3aW4pO1xuICB2YXIgc2Nyb2xsWSA9IHV0aWxzLmdldFdpbmRvd1Njcm9sbFRvcCh3aW4pO1xuICB2YXIgdmlld3BvcnRXaWR0aCA9IHV0aWxzLnZpZXdwb3J0V2lkdGgod2luKTtcbiAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gdXRpbHMudmlld3BvcnRIZWlnaHQod2luKTtcbiAgdmFyIGRvY3VtZW50V2lkdGggPSBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGg7XG4gIHZhciBkb2N1bWVudEhlaWdodCA9IGRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQ7XG5cbiAgLy8gUmVzZXQgZWxlbWVudCBwb3NpdGlvbiBhZnRlciBjYWxjdWxhdGUgdGhlIHZpc2libGUgYXJlYVxuICBpZiAoZWxlbWVudC5zdHlsZSkge1xuICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBvcmlnaW5hbFBvc2l0aW9uO1xuICB9XG5cbiAgaWYgKGlzQW5jZXN0b3JGaXhlZChlbGVtZW50KSkge1xuICAgIC8vIENsaXAgYnkgdmlld3BvcnQncyBzaXplLlxuICAgIHZpc2libGVSZWN0LmxlZnQgPSBNYXRoLm1heCh2aXNpYmxlUmVjdC5sZWZ0LCBzY3JvbGxYKTtcbiAgICB2aXNpYmxlUmVjdC50b3AgPSBNYXRoLm1heCh2aXNpYmxlUmVjdC50b3AsIHNjcm9sbFkpO1xuICAgIHZpc2libGVSZWN0LnJpZ2h0ID0gTWF0aC5taW4odmlzaWJsZVJlY3QucmlnaHQsIHNjcm9sbFggKyB2aWV3cG9ydFdpZHRoKTtcbiAgICB2aXNpYmxlUmVjdC5ib3R0b20gPSBNYXRoLm1pbih2aXNpYmxlUmVjdC5ib3R0b20sIHNjcm9sbFkgKyB2aWV3cG9ydEhlaWdodCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2xpcCBieSBkb2N1bWVudCdzIHNpemUuXG4gICAgdmFyIG1heFZpc2libGVXaWR0aCA9IE1hdGgubWF4KGRvY3VtZW50V2lkdGgsIHNjcm9sbFggKyB2aWV3cG9ydFdpZHRoKTtcbiAgICB2aXNpYmxlUmVjdC5yaWdodCA9IE1hdGgubWluKHZpc2libGVSZWN0LnJpZ2h0LCBtYXhWaXNpYmxlV2lkdGgpO1xuXG4gICAgdmFyIG1heFZpc2libGVIZWlnaHQgPSBNYXRoLm1heChkb2N1bWVudEhlaWdodCwgc2Nyb2xsWSArIHZpZXdwb3J0SGVpZ2h0KTtcbiAgICB2aXNpYmxlUmVjdC5ib3R0b20gPSBNYXRoLm1pbih2aXNpYmxlUmVjdC5ib3R0b20sIG1heFZpc2libGVIZWlnaHQpO1xuICB9XG5cbiAgcmV0dXJuIHZpc2libGVSZWN0LnRvcCA+PSAwICYmIHZpc2libGVSZWN0LmxlZnQgPj0gMCAmJiB2aXNpYmxlUmVjdC5ib3R0b20gPiB2aXNpYmxlUmVjdC50b3AgJiYgdmlzaWJsZVJlY3QucmlnaHQgPiB2aXNpYmxlUmVjdC5sZWZ0ID8gdmlzaWJsZVJlY3QgOiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRWaXNpYmxlUmVjdEZvckVsZW1lbnQ7IiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0FuY2VzdG9yRml4ZWQoZWxlbWVudCkge1xuICBpZiAodXRpbHMuaXNXaW5kb3coZWxlbWVudCkgfHwgZWxlbWVudC5ub2RlVHlwZSA9PT0gOSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBkb2MgPSB1dGlscy5nZXREb2N1bWVudChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSBkb2MuYm9keTtcbiAgdmFyIHBhcmVudCA9IG51bGw7XG4gIGZvciAocGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOyBwYXJlbnQgJiYgcGFyZW50ICE9PSBib2R5OyBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZSkge1xuICAgIHZhciBwb3NpdGlvblN0eWxlID0gdXRpbHMuY3NzKHBhcmVudCwgJ3Bvc2l0aW9uJyk7XG4gICAgaWYgKHBvc2l0aW9uU3R5bGUgPT09ICdmaXhlZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59IiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG5mdW5jdGlvbiBhZGp1c3RGb3JWaWV3cG9ydChlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0LCBvdmVyZmxvdykge1xuICB2YXIgcG9zID0gdXRpbHMuY2xvbmUoZWxGdXR1cmVQb3MpO1xuICB2YXIgc2l6ZSA9IHtcbiAgICB3aWR0aDogZWxSZWdpb24ud2lkdGgsXG4gICAgaGVpZ2h0OiBlbFJlZ2lvbi5oZWlnaHRcbiAgfTtcblxuICBpZiAob3ZlcmZsb3cuYWRqdXN0WCAmJiBwb3MubGVmdCA8IHZpc2libGVSZWN0LmxlZnQpIHtcbiAgICBwb3MubGVmdCA9IHZpc2libGVSZWN0LmxlZnQ7XG4gIH1cblxuICAvLyBMZWZ0IGVkZ2UgaW5zaWRlIGFuZCByaWdodCBlZGdlIG91dHNpZGUgdmlld3BvcnQsIHRyeSB0byByZXNpemUgaXQuXG4gIGlmIChvdmVyZmxvdy5yZXNpemVXaWR0aCAmJiBwb3MubGVmdCA+PSB2aXNpYmxlUmVjdC5sZWZ0ICYmIHBvcy5sZWZ0ICsgc2l6ZS53aWR0aCA+IHZpc2libGVSZWN0LnJpZ2h0KSB7XG4gICAgc2l6ZS53aWR0aCAtPSBwb3MubGVmdCArIHNpemUud2lkdGggLSB2aXNpYmxlUmVjdC5yaWdodDtcbiAgfVxuXG4gIC8vIFJpZ2h0IGVkZ2Ugb3V0c2lkZSB2aWV3cG9ydCwgdHJ5IHRvIG1vdmUgaXQuXG4gIGlmIChvdmVyZmxvdy5hZGp1c3RYICYmIHBvcy5sZWZ0ICsgc2l6ZS53aWR0aCA+IHZpc2libGVSZWN0LnJpZ2h0KSB7XG4gICAgLy8g5L+d6K+B5bem6L6555WM5ZKM5Y+v6KeG5Yy65Z+f5bem6L6555WM5a+56b2QXG4gICAgcG9zLmxlZnQgPSBNYXRoLm1heCh2aXNpYmxlUmVjdC5yaWdodCAtIHNpemUud2lkdGgsIHZpc2libGVSZWN0LmxlZnQpO1xuICB9XG5cbiAgLy8gVG9wIGVkZ2Ugb3V0c2lkZSB2aWV3cG9ydCwgdHJ5IHRvIG1vdmUgaXQuXG4gIGlmIChvdmVyZmxvdy5hZGp1c3RZICYmIHBvcy50b3AgPCB2aXNpYmxlUmVjdC50b3ApIHtcbiAgICBwb3MudG9wID0gdmlzaWJsZVJlY3QudG9wO1xuICB9XG5cbiAgLy8gVG9wIGVkZ2UgaW5zaWRlIGFuZCBib3R0b20gZWRnZSBvdXRzaWRlIHZpZXdwb3J0LCB0cnkgdG8gcmVzaXplIGl0LlxuICBpZiAob3ZlcmZsb3cucmVzaXplSGVpZ2h0ICYmIHBvcy50b3AgPj0gdmlzaWJsZVJlY3QudG9wICYmIHBvcy50b3AgKyBzaXplLmhlaWdodCA+IHZpc2libGVSZWN0LmJvdHRvbSkge1xuICAgIHNpemUuaGVpZ2h0IC09IHBvcy50b3AgKyBzaXplLmhlaWdodCAtIHZpc2libGVSZWN0LmJvdHRvbTtcbiAgfVxuXG4gIC8vIEJvdHRvbSBlZGdlIG91dHNpZGUgdmlld3BvcnQsIHRyeSB0byBtb3ZlIGl0LlxuICBpZiAob3ZlcmZsb3cuYWRqdXN0WSAmJiBwb3MudG9wICsgc2l6ZS5oZWlnaHQgPiB2aXNpYmxlUmVjdC5ib3R0b20pIHtcbiAgICAvLyDkv53or4HkuIrovrnnlYzlkozlj6/op4bljLrln5/kuIrovrnnlYzlr7npvZBcbiAgICBwb3MudG9wID0gTWF0aC5tYXgodmlzaWJsZVJlY3QuYm90dG9tIC0gc2l6ZS5oZWlnaHQsIHZpc2libGVSZWN0LnRvcCk7XG4gIH1cblxuICByZXR1cm4gdXRpbHMubWl4KHBvcywgc2l6ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkanVzdEZvclZpZXdwb3J0OyIsImltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gZ2V0UmVnaW9uKG5vZGUpIHtcbiAgdmFyIG9mZnNldCA9IHZvaWQgMDtcbiAgdmFyIHcgPSB2b2lkIDA7XG4gIHZhciBoID0gdm9pZCAwO1xuICBpZiAoIXV0aWxzLmlzV2luZG93KG5vZGUpICYmIG5vZGUubm9kZVR5cGUgIT09IDkpIHtcbiAgICBvZmZzZXQgPSB1dGlscy5vZmZzZXQobm9kZSk7XG4gICAgdyA9IHV0aWxzLm91dGVyV2lkdGgobm9kZSk7XG4gICAgaCA9IHV0aWxzLm91dGVySGVpZ2h0KG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB3aW4gPSB1dGlscy5nZXRXaW5kb3cobm9kZSk7XG4gICAgb2Zmc2V0ID0ge1xuICAgICAgbGVmdDogdXRpbHMuZ2V0V2luZG93U2Nyb2xsTGVmdCh3aW4pLFxuICAgICAgdG9wOiB1dGlscy5nZXRXaW5kb3dTY3JvbGxUb3Aod2luKVxuICAgIH07XG4gICAgdyA9IHV0aWxzLnZpZXdwb3J0V2lkdGgod2luKTtcbiAgICBoID0gdXRpbHMudmlld3BvcnRIZWlnaHQod2luKTtcbiAgfVxuICBvZmZzZXQud2lkdGggPSB3O1xuICBvZmZzZXQuaGVpZ2h0ID0gaDtcbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmVnaW9uOyIsIi8qKlxuICog6I635Y+WIG5vZGUg5LiK55qEIGFsaWduIOWvuem9kOeCuSDnm7jlr7nkuo7pobXpnaLnmoTlnZDmoIdcbiAqL1xuXG5mdW5jdGlvbiBnZXRBbGlnbk9mZnNldChyZWdpb24sIGFsaWduKSB7XG4gIHZhciBWID0gYWxpZ24uY2hhckF0KDApO1xuICB2YXIgSCA9IGFsaWduLmNoYXJBdCgxKTtcbiAgdmFyIHcgPSByZWdpb24ud2lkdGg7XG4gIHZhciBoID0gcmVnaW9uLmhlaWdodDtcblxuICB2YXIgeCA9IHJlZ2lvbi5sZWZ0O1xuICB2YXIgeSA9IHJlZ2lvbi50b3A7XG5cbiAgaWYgKFYgPT09ICdjJykge1xuICAgIHkgKz0gaCAvIDI7XG4gIH0gZWxzZSBpZiAoViA9PT0gJ2InKSB7XG4gICAgeSArPSBoO1xuICB9XG5cbiAgaWYgKEggPT09ICdjJykge1xuICAgIHggKz0gdyAvIDI7XG4gIH0gZWxzZSBpZiAoSCA9PT0gJ3InKSB7XG4gICAgeCArPSB3O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiB4LFxuICAgIHRvcDogeVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRBbGlnbk9mZnNldDsiLCJpbXBvcnQgZ2V0QWxpZ25PZmZzZXQgZnJvbSAnLi9nZXRBbGlnbk9mZnNldCc7XG5cbmZ1bmN0aW9uIGdldEVsRnV0dXJlUG9zKGVsUmVnaW9uLCByZWZOb2RlUmVnaW9uLCBwb2ludHMsIG9mZnNldCwgdGFyZ2V0T2Zmc2V0KSB7XG4gIHZhciBwMSA9IGdldEFsaWduT2Zmc2V0KHJlZk5vZGVSZWdpb24sIHBvaW50c1sxXSk7XG4gIHZhciBwMiA9IGdldEFsaWduT2Zmc2V0KGVsUmVnaW9uLCBwb2ludHNbMF0pO1xuICB2YXIgZGlmZiA9IFtwMi5sZWZ0IC0gcDEubGVmdCwgcDIudG9wIC0gcDEudG9wXTtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGVsUmVnaW9uLmxlZnQgLSBkaWZmWzBdICsgb2Zmc2V0WzBdIC0gdGFyZ2V0T2Zmc2V0WzBdLFxuICAgIHRvcDogZWxSZWdpb24udG9wIC0gZGlmZlsxXSArIG9mZnNldFsxXSAtIHRhcmdldE9mZnNldFsxXVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRFbEZ1dHVyZVBvczsiLCIvKipcbiAqIGFsaWduIGRvbSBub2RlIGZsZXhpYmx5XG4gKiBAYXV0aG9yIHlpbWluZ2hlQGdtYWlsLmNvbVxuICovXG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50IGZyb20gJy4uL2dldFZpc2libGVSZWN0Rm9yRWxlbWVudCc7XG5pbXBvcnQgYWRqdXN0Rm9yVmlld3BvcnQgZnJvbSAnLi4vYWRqdXN0Rm9yVmlld3BvcnQnO1xuaW1wb3J0IGdldFJlZ2lvbiBmcm9tICcuLi9nZXRSZWdpb24nO1xuaW1wb3J0IGdldEVsRnV0dXJlUG9zIGZyb20gJy4uL2dldEVsRnV0dXJlUG9zJztcblxuLy8gaHR0cDovL3lpbWluZ2hlLml0ZXllLmNvbS9ibG9nLzExMjQ3MjBcblxuZnVuY3Rpb24gaXNGYWlsWChlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSB7XG4gIHJldHVybiBlbEZ1dHVyZVBvcy5sZWZ0IDwgdmlzaWJsZVJlY3QubGVmdCB8fCBlbEZ1dHVyZVBvcy5sZWZ0ICsgZWxSZWdpb24ud2lkdGggPiB2aXNpYmxlUmVjdC5yaWdodDtcbn1cblxuZnVuY3Rpb24gaXNGYWlsWShlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSB7XG4gIHJldHVybiBlbEZ1dHVyZVBvcy50b3AgPCB2aXNpYmxlUmVjdC50b3AgfHwgZWxGdXR1cmVQb3MudG9wICsgZWxSZWdpb24uaGVpZ2h0ID4gdmlzaWJsZVJlY3QuYm90dG9tO1xufVxuXG5mdW5jdGlvbiBpc0NvbXBsZXRlRmFpbFgoZWxGdXR1cmVQb3MsIGVsUmVnaW9uLCB2aXNpYmxlUmVjdCkge1xuICByZXR1cm4gZWxGdXR1cmVQb3MubGVmdCA+IHZpc2libGVSZWN0LnJpZ2h0IHx8IGVsRnV0dXJlUG9zLmxlZnQgKyBlbFJlZ2lvbi53aWR0aCA8IHZpc2libGVSZWN0LmxlZnQ7XG59XG5cbmZ1bmN0aW9uIGlzQ29tcGxldGVGYWlsWShlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSB7XG4gIHJldHVybiBlbEZ1dHVyZVBvcy50b3AgPiB2aXNpYmxlUmVjdC5ib3R0b20gfHwgZWxGdXR1cmVQb3MudG9wICsgZWxSZWdpb24uaGVpZ2h0IDwgdmlzaWJsZVJlY3QudG9wO1xufVxuXG5mdW5jdGlvbiBmbGlwKHBvaW50cywgcmVnLCBtYXApIHtcbiAgdmFyIHJldCA9IFtdO1xuICB1dGlscy5lYWNoKHBvaW50cywgZnVuY3Rpb24gKHApIHtcbiAgICByZXQucHVzaChwLnJlcGxhY2UocmVnLCBmdW5jdGlvbiAobSkge1xuICAgICAgcmV0dXJuIG1hcFttXTtcbiAgICB9KSk7XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBmbGlwT2Zmc2V0KG9mZnNldCwgaW5kZXgpIHtcbiAgb2Zmc2V0W2luZGV4XSA9IC1vZmZzZXRbaW5kZXhdO1xuICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0T2Zmc2V0KHN0ciwgb2Zmc2V0TGVuKSB7XG4gIHZhciBuID0gdm9pZCAwO1xuICBpZiAoLyUkLy50ZXN0KHN0cikpIHtcbiAgICBuID0gcGFyc2VJbnQoc3RyLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSksIDEwKSAvIDEwMCAqIG9mZnNldExlbjtcbiAgfSBlbHNlIHtcbiAgICBuID0gcGFyc2VJbnQoc3RyLCAxMCk7XG4gIH1cbiAgcmV0dXJuIG4gfHwgMDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplT2Zmc2V0KG9mZnNldCwgZWwpIHtcbiAgb2Zmc2V0WzBdID0gY29udmVydE9mZnNldChvZmZzZXRbMF0sIGVsLndpZHRoKTtcbiAgb2Zmc2V0WzFdID0gY29udmVydE9mZnNldChvZmZzZXRbMV0sIGVsLmhlaWdodCk7XG59XG5cbi8qKlxuICogQHBhcmFtIGVsXG4gKiBAcGFyYW0gdGd0UmVnaW9uIOWPgueFp+iKgueCueaJgOWNoOeahOWMuuWfnzogeyBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQgfVxuICogQHBhcmFtIGFsaWduXG4gKi9cbmZ1bmN0aW9uIGRvQWxpZ24oZWwsIHRndFJlZ2lvbiwgYWxpZ24sIGlzVGd0UmVnaW9uVmlzaWJsZSkge1xuICB2YXIgcG9pbnRzID0gYWxpZ24ucG9pbnRzO1xuICB2YXIgb2Zmc2V0ID0gYWxpZ24ub2Zmc2V0IHx8IFswLCAwXTtcbiAgdmFyIHRhcmdldE9mZnNldCA9IGFsaWduLnRhcmdldE9mZnNldCB8fCBbMCwgMF07XG4gIHZhciBvdmVyZmxvdyA9IGFsaWduLm92ZXJmbG93O1xuICB2YXIgc291cmNlID0gYWxpZ24uc291cmNlIHx8IGVsO1xuICBvZmZzZXQgPSBbXS5jb25jYXQob2Zmc2V0KTtcbiAgdGFyZ2V0T2Zmc2V0ID0gW10uY29uY2F0KHRhcmdldE9mZnNldCk7XG4gIG92ZXJmbG93ID0gb3ZlcmZsb3cgfHwge307XG4gIHZhciBuZXdPdmVyZmxvd0NmZyA9IHt9O1xuICB2YXIgZmFpbCA9IDA7XG4gIC8vIOW9k+WJjeiKgueCueWPr+S7peiiq+aUvue9rueahOaYvuekuuWMuuWfn1xuICB2YXIgdmlzaWJsZVJlY3QgPSBnZXRWaXNpYmxlUmVjdEZvckVsZW1lbnQoc291cmNlKTtcbiAgLy8g5b2T5YmN6IqC54K55omA5Y2g55qE5Yy65Z+fLCBsZWZ0L3RvcC93aWR0aC9oZWlnaHRcbiAgdmFyIGVsUmVnaW9uID0gZ2V0UmVnaW9uKHNvdXJjZSk7XG4gIC8vIOWwhiBvZmZzZXQg6L2s5o2i5oiQ5pWw5YC877yM5pSv5oyB55m+5YiG5q+UXG4gIG5vcm1hbGl6ZU9mZnNldChvZmZzZXQsIGVsUmVnaW9uKTtcbiAgbm9ybWFsaXplT2Zmc2V0KHRhcmdldE9mZnNldCwgdGd0UmVnaW9uKTtcbiAgLy8g5b2T5YmN6IqC54K55bCG6KaB6KKr5pS+572u55qE5L2N572uXG4gIHZhciBlbEZ1dHVyZVBvcyA9IGdldEVsRnV0dXJlUG9zKGVsUmVnaW9uLCB0Z3RSZWdpb24sIHBvaW50cywgb2Zmc2V0LCB0YXJnZXRPZmZzZXQpO1xuICAvLyDlvZPliY3oioLngrnlsIbopoHmiYDlpITnmoTljLrln59cbiAgdmFyIG5ld0VsUmVnaW9uID0gdXRpbHMubWVyZ2UoZWxSZWdpb24sIGVsRnV0dXJlUG9zKTtcblxuICAvLyDlpoLmnpzlj6/op4bljLrln5/kuI3og73lrozlhajmlL7nva7lvZPliY3oioLngrnml7blhYHorrjosIPmlbRcbiAgaWYgKHZpc2libGVSZWN0ICYmIChvdmVyZmxvdy5hZGp1c3RYIHx8IG92ZXJmbG93LmFkanVzdFkpICYmIGlzVGd0UmVnaW9uVmlzaWJsZSkge1xuICAgIGlmIChvdmVyZmxvdy5hZGp1c3RYKSB7XG4gICAgICAvLyDlpoLmnpzmqKrlkJHkuI3og73mlL7kuItcbiAgICAgIGlmIChpc0ZhaWxYKGVsRnV0dXJlUG9zLCBlbFJlZ2lvbiwgdmlzaWJsZVJlY3QpKSB7XG4gICAgICAgIC8vIOWvuem9kOS9jee9ruWPjeS4i1xuICAgICAgICB2YXIgbmV3UG9pbnRzID0gZmxpcChwb2ludHMsIC9bbHJdL2lnLCB7XG4gICAgICAgICAgbDogJ3InLFxuICAgICAgICAgIHI6ICdsJ1xuICAgICAgICB9KTtcbiAgICAgICAgLy8g5YGP56e76YeP5Lmf5Y+N5LiLXG4gICAgICAgIHZhciBuZXdPZmZzZXQgPSBmbGlwT2Zmc2V0KG9mZnNldCwgMCk7XG4gICAgICAgIHZhciBuZXdUYXJnZXRPZmZzZXQgPSBmbGlwT2Zmc2V0KHRhcmdldE9mZnNldCwgMCk7XG4gICAgICAgIHZhciBuZXdFbEZ1dHVyZVBvcyA9IGdldEVsRnV0dXJlUG9zKGVsUmVnaW9uLCB0Z3RSZWdpb24sIG5ld1BvaW50cywgbmV3T2Zmc2V0LCBuZXdUYXJnZXRPZmZzZXQpO1xuXG4gICAgICAgIGlmICghaXNDb21wbGV0ZUZhaWxYKG5ld0VsRnV0dXJlUG9zLCBlbFJlZ2lvbiwgdmlzaWJsZVJlY3QpKSB7XG4gICAgICAgICAgZmFpbCA9IDE7XG4gICAgICAgICAgcG9pbnRzID0gbmV3UG9pbnRzO1xuICAgICAgICAgIG9mZnNldCA9IG5ld09mZnNldDtcbiAgICAgICAgICB0YXJnZXRPZmZzZXQgPSBuZXdUYXJnZXRPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3ZlcmZsb3cuYWRqdXN0WSkge1xuICAgICAgLy8g5aaC5p6c57q15ZCR5LiN6IO95pS+5LiLXG4gICAgICBpZiAoaXNGYWlsWShlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KSkge1xuICAgICAgICAvLyDlr7npvZDkvY3nva7lj43kuItcbiAgICAgICAgdmFyIF9uZXdQb2ludHMgPSBmbGlwKHBvaW50cywgL1t0Yl0vaWcsIHtcbiAgICAgICAgICB0OiAnYicsXG4gICAgICAgICAgYjogJ3QnXG4gICAgICAgIH0pO1xuICAgICAgICAvLyDlgY/np7vph4/kuZ/lj43kuItcbiAgICAgICAgdmFyIF9uZXdPZmZzZXQgPSBmbGlwT2Zmc2V0KG9mZnNldCwgMSk7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0T2Zmc2V0ID0gZmxpcE9mZnNldCh0YXJnZXRPZmZzZXQsIDEpO1xuICAgICAgICB2YXIgX25ld0VsRnV0dXJlUG9zID0gZ2V0RWxGdXR1cmVQb3MoZWxSZWdpb24sIHRndFJlZ2lvbiwgX25ld1BvaW50cywgX25ld09mZnNldCwgX25ld1RhcmdldE9mZnNldCk7XG5cbiAgICAgICAgaWYgKCFpc0NvbXBsZXRlRmFpbFkoX25ld0VsRnV0dXJlUG9zLCBlbFJlZ2lvbiwgdmlzaWJsZVJlY3QpKSB7XG4gICAgICAgICAgZmFpbCA9IDE7XG4gICAgICAgICAgcG9pbnRzID0gX25ld1BvaW50cztcbiAgICAgICAgICBvZmZzZXQgPSBfbmV3T2Zmc2V0O1xuICAgICAgICAgIHRhcmdldE9mZnNldCA9IF9uZXdUYXJnZXRPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDlpoLmnpzlpLHotKXvvIzph43mlrDorqHnrpflvZPliY3oioLngrnlsIbopoHooqvmlL7nva7nmoTkvY3nva5cbiAgICBpZiAoZmFpbCkge1xuICAgICAgZWxGdXR1cmVQb3MgPSBnZXRFbEZ1dHVyZVBvcyhlbFJlZ2lvbiwgdGd0UmVnaW9uLCBwb2ludHMsIG9mZnNldCwgdGFyZ2V0T2Zmc2V0KTtcbiAgICAgIHV0aWxzLm1peChuZXdFbFJlZ2lvbiwgZWxGdXR1cmVQb3MpO1xuICAgIH1cbiAgICB2YXIgaXNTdGlsbEZhaWxYID0gaXNGYWlsWChlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KTtcbiAgICB2YXIgaXNTdGlsbEZhaWxZID0gaXNGYWlsWShlbEZ1dHVyZVBvcywgZWxSZWdpb24sIHZpc2libGVSZWN0KTtcbiAgICAvLyDmo4Dmn6Xlj43kuIvlkI7nmoTkvY3nva7mmK/lkKblj6/ku6XmlL7kuIvkuobvvIzlpoLmnpzku43nhLbmlL7kuI3kuIvvvJpcbiAgICAvLyAxLiDlpI3ljp/kv67mlLnov4fnmoTlrprkvY3lj4LmlbBcbiAgICBpZiAoaXNTdGlsbEZhaWxYIHx8IGlzU3RpbGxGYWlsWSkge1xuICAgICAgcG9pbnRzID0gYWxpZ24ucG9pbnRzO1xuICAgICAgb2Zmc2V0ID0gYWxpZ24ub2Zmc2V0IHx8IFswLCAwXTtcbiAgICAgIHRhcmdldE9mZnNldCA9IGFsaWduLnRhcmdldE9mZnNldCB8fCBbMCwgMF07XG4gICAgfVxuICAgIC8vIDIuIOWPquacieaMh+WumuS6huWPr+S7peiwg+aVtOW9k+WJjeaWueWQkeaJjeiwg+aVtFxuICAgIG5ld092ZXJmbG93Q2ZnLmFkanVzdFggPSBvdmVyZmxvdy5hZGp1c3RYICYmIGlzU3RpbGxGYWlsWDtcbiAgICBuZXdPdmVyZmxvd0NmZy5hZGp1c3RZID0gb3ZlcmZsb3cuYWRqdXN0WSAmJiBpc1N0aWxsRmFpbFk7XG5cbiAgICAvLyDnoa7lrp7opoHosIPmlbTvvIznlJroh7Plj6/og73kvJrosIPmlbTpq5jluqblrr3luqZcbiAgICBpZiAobmV3T3ZlcmZsb3dDZmcuYWRqdXN0WCB8fCBuZXdPdmVyZmxvd0NmZy5hZGp1c3RZKSB7XG4gICAgICBuZXdFbFJlZ2lvbiA9IGFkanVzdEZvclZpZXdwb3J0KGVsRnV0dXJlUG9zLCBlbFJlZ2lvbiwgdmlzaWJsZVJlY3QsIG5ld092ZXJmbG93Q2ZnKTtcbiAgICB9XG4gIH1cblxuICAvLyBuZWVkIGp1ZGdlIHRvIGluIGNhc2Ugc2V0IGZpeGVkIHdpdGggaW4gY3NzIG9uIGhlaWdodCBhdXRvIGVsZW1lbnRcbiAgaWYgKG5ld0VsUmVnaW9uLndpZHRoICE9PSBlbFJlZ2lvbi53aWR0aCkge1xuICAgIHV0aWxzLmNzcyhzb3VyY2UsICd3aWR0aCcsIHV0aWxzLndpZHRoKHNvdXJjZSkgKyBuZXdFbFJlZ2lvbi53aWR0aCAtIGVsUmVnaW9uLndpZHRoKTtcbiAgfVxuXG4gIGlmIChuZXdFbFJlZ2lvbi5oZWlnaHQgIT09IGVsUmVnaW9uLmhlaWdodCkge1xuICAgIHV0aWxzLmNzcyhzb3VyY2UsICdoZWlnaHQnLCB1dGlscy5oZWlnaHQoc291cmNlKSArIG5ld0VsUmVnaW9uLmhlaWdodCAtIGVsUmVnaW9uLmhlaWdodCk7XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20va2lzc3l0ZWFtL2tpc3N5L2lzc3Vlcy8xOTBcbiAgLy8g55u45a+55LqO5bGP5bmV5L2N572u5rKh5Y+Y77yM6ICMIGxlZnQvdG9wIOWPmOS6hlxuICAvLyDkvovlpoIgPGRpdiAncmVsYXRpdmUnPjxlbCBhYnNvbHV0ZT48L2Rpdj5cbiAgdXRpbHMub2Zmc2V0KHNvdXJjZSwge1xuICAgIGxlZnQ6IG5ld0VsUmVnaW9uLmxlZnQsXG4gICAgdG9wOiBuZXdFbFJlZ2lvbi50b3BcbiAgfSwge1xuICAgIHVzZUNzc1JpZ2h0OiBhbGlnbi51c2VDc3NSaWdodCxcbiAgICB1c2VDc3NCb3R0b206IGFsaWduLnVzZUNzc0JvdHRvbSxcbiAgICB1c2VDc3NUcmFuc2Zvcm06IGFsaWduLnVzZUNzc1RyYW5zZm9ybSxcbiAgICBpZ25vcmVTaGFrZTogYWxpZ24uaWdub3JlU2hha2VcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwb2ludHM6IHBvaW50cyxcbiAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldCxcbiAgICBvdmVyZmxvdzogbmV3T3ZlcmZsb3dDZmdcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZG9BbGlnbjtcbi8qKlxuICogIDIwMTItMDQtMjYgeWltaW5naGVAZ21haWwuY29tXG4gKiAgIC0g5LyY5YyW5pm66IO95a+56b2Q566X5rOVXG4gKiAgIC0g5oWO55SoIHJlc2l6ZVhYXG4gKlxuICogIDIwMTEtMDctMTMgeWltaW5naGVAZ21haWwuY29tIG5vdGU6XG4gKiAgIC0g5aKe5Yqg5pm66IO95a+56b2Q77yM5Lul5Y+K5aSn5bCP6LCD5pW06YCJ6aG5XG4gKiovIiwiaW1wb3J0IGRvQWxpZ24gZnJvbSAnLi9hbGlnbic7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4uL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50IGZyb20gJy4uL2dldFZpc2libGVSZWN0Rm9yRWxlbWVudCc7XG5pbXBvcnQgZ2V0UmVnaW9uIGZyb20gJy4uL2dldFJlZ2lvbic7XG5cbmZ1bmN0aW9uIGlzT3V0T2ZWaXNpYmxlUmVjdCh0YXJnZXQpIHtcbiAgdmFyIHZpc2libGVSZWN0ID0gZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50KHRhcmdldCk7XG4gIHZhciB0YXJnZXRSZWdpb24gPSBnZXRSZWdpb24odGFyZ2V0KTtcblxuICByZXR1cm4gIXZpc2libGVSZWN0IHx8IHRhcmdldFJlZ2lvbi5sZWZ0ICsgdGFyZ2V0UmVnaW9uLndpZHRoIDw9IHZpc2libGVSZWN0LmxlZnQgfHwgdGFyZ2V0UmVnaW9uLnRvcCArIHRhcmdldFJlZ2lvbi5oZWlnaHQgPD0gdmlzaWJsZVJlY3QudG9wIHx8IHRhcmdldFJlZ2lvbi5sZWZ0ID49IHZpc2libGVSZWN0LnJpZ2h0IHx8IHRhcmdldFJlZ2lvbi50b3AgPj0gdmlzaWJsZVJlY3QuYm90dG9tO1xufVxuXG5mdW5jdGlvbiBhbGlnbkVsZW1lbnQoZWwsIHJlZk5vZGUsIGFsaWduKSB7XG4gIHZhciB0YXJnZXQgPSBhbGlnbi50YXJnZXQgfHwgcmVmTm9kZTtcbiAgdmFyIHJlZk5vZGVSZWdpb24gPSBnZXRSZWdpb24odGFyZ2V0KTtcblxuICB2YXIgaXNUYXJnZXROb3RPdXRPZlZpc2libGUgPSAhaXNPdXRPZlZpc2libGVSZWN0KHRhcmdldCk7XG5cbiAgcmV0dXJuIGRvQWxpZ24oZWwsIHJlZk5vZGVSZWdpb24sIGFsaWduLCBpc1RhcmdldE5vdE91dE9mVmlzaWJsZSk7XG59XG5cbmFsaWduRWxlbWVudC5fX2dldE9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudDtcblxuYWxpZ25FbGVtZW50Ll9fZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50ID0gZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50O1xuXG5leHBvcnQgZGVmYXVsdCBhbGlnbkVsZW1lbnQ7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBkb0FsaWduIGZyb20gJy4vYWxpZ24nO1xuXG4vKipcbiAqIGB0Z3RQb2ludGA6IHsgcGFnZVgsIHBhZ2VZIH0gb3IgeyBjbGllbnRYLCBjbGllbnRZIH0uXG4gKiBJZiBjbGllbnQgcG9zaXRpb24gcHJvdmlkZWQsIHdpbGwgaW50ZXJuYWwgY29udmVydCB0byBwYWdlIHBvc2l0aW9uLlxuICovXG5cbmZ1bmN0aW9uIGFsaWduUG9pbnQoZWwsIHRndFBvaW50LCBhbGlnbikge1xuICB2YXIgcGFnZVggPSB2b2lkIDA7XG4gIHZhciBwYWdlWSA9IHZvaWQgMDtcblxuICB2YXIgZG9jID0gdXRpbHMuZ2V0RG9jdW1lbnQoZWwpO1xuICB2YXIgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG5cbiAgdmFyIHNjcm9sbFggPSB1dGlscy5nZXRXaW5kb3dTY3JvbGxMZWZ0KHdpbik7XG4gIHZhciBzY3JvbGxZID0gdXRpbHMuZ2V0V2luZG93U2Nyb2xsVG9wKHdpbik7XG4gIHZhciB2aWV3cG9ydFdpZHRoID0gdXRpbHMudmlld3BvcnRXaWR0aCh3aW4pO1xuICB2YXIgdmlld3BvcnRIZWlnaHQgPSB1dGlscy52aWV3cG9ydEhlaWdodCh3aW4pO1xuXG4gIGlmICgncGFnZVgnIGluIHRndFBvaW50KSB7XG4gICAgcGFnZVggPSB0Z3RQb2ludC5wYWdlWDtcbiAgfSBlbHNlIHtcbiAgICBwYWdlWCA9IHNjcm9sbFggKyB0Z3RQb2ludC5jbGllbnRYO1xuICB9XG5cbiAgaWYgKCdwYWdlWScgaW4gdGd0UG9pbnQpIHtcbiAgICBwYWdlWSA9IHRndFBvaW50LnBhZ2VZO1xuICB9IGVsc2Uge1xuICAgIHBhZ2VZID0gc2Nyb2xsWSArIHRndFBvaW50LmNsaWVudFk7XG4gIH1cblxuICB2YXIgdGd0UmVnaW9uID0ge1xuICAgIGxlZnQ6IHBhZ2VYLFxuICAgIHRvcDogcGFnZVksXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH07XG5cbiAgdmFyIHBvaW50SW5WaWV3ID0gcGFnZVggPj0gMCAmJiBwYWdlWCA8PSBzY3JvbGxYICsgdmlld3BvcnRXaWR0aCAmJiBwYWdlWSA+PSAwICYmIHBhZ2VZIDw9IHNjcm9sbFkgKyB2aWV3cG9ydEhlaWdodDtcblxuICAvLyBQcm92aWRlIGRlZmF1bHQgdGFyZ2V0IHBvaW50XG4gIHZhciBwb2ludHMgPSBbYWxpZ24ucG9pbnRzWzBdLCAnY2MnXTtcblxuICByZXR1cm4gZG9BbGlnbihlbCwgdGd0UmVnaW9uLCBfZXh0ZW5kcyh7fSwgYWxpZ24sIHsgcG9pbnRzOiBwb2ludHMgfSksIHBvaW50SW5WaWV3KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWxpZ25Qb2ludDsiLCJleHBvcnQgZnVuY3Rpb24gYnVmZmVyKGZuLCBtcykge1xuICB2YXIgdGltZXIgPSB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckZuKCkge1xuICAgIGNsZWFyKCk7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZuLCBtcyk7XG4gIH1cblxuICBidWZmZXJGbi5jbGVhciA9IGNsZWFyO1xuXG4gIHJldHVybiBidWZmZXJGbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZVBvaW50KHByZXYsIG5leHQpIHtcbiAgaWYgKHByZXYgPT09IG5leHQpIHJldHVybiB0cnVlO1xuICBpZiAoIXByZXYgfHwgIW5leHQpIHJldHVybiBmYWxzZTtcblxuICBpZiAoJ3BhZ2VYJyBpbiBuZXh0ICYmICdwYWdlWScgaW4gbmV4dCkge1xuICAgIHJldHVybiBwcmV2LnBhZ2VYID09PSBuZXh0LnBhZ2VYICYmIHByZXYucGFnZVkgPT09IG5leHQucGFnZVk7XG4gIH1cblxuICBpZiAoJ2NsaWVudFgnIGluIG5leHQgJiYgJ2NsaWVudFknIGluIG5leHQpIHtcbiAgICByZXR1cm4gcHJldi5jbGllbnRYID09PSBuZXh0LmNsaWVudFggJiYgcHJldi5jbGllbnRZID09PSBuZXh0LmNsaWVudFk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmoud2luZG93ID09PSBvYmo7XG59IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBhbGlnbkVsZW1lbnQsIGFsaWduUG9pbnQgfSBmcm9tICdkb20tYWxpZ24nO1xuaW1wb3J0IGFkZEV2ZW50TGlzdGVuZXIgZnJvbSAncmMtdXRpbC9lcy9Eb20vYWRkRXZlbnRMaXN0ZW5lcic7XG5cbmltcG9ydCB7IGlzV2luZG93LCBidWZmZXIsIGlzU2FtZVBvaW50IH0gZnJvbSAnLi91dGlsJztcblxuZnVuY3Rpb24gZ2V0RWxlbWVudChmdW5jKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJyB8fCAhZnVuYykgcmV0dXJuIG51bGw7XG4gIHJldHVybiBmdW5jKCk7XG59XG5cbmZ1bmN0aW9uIGdldFBvaW50KHBvaW50KSB7XG4gIGlmICh0eXBlb2YgcG9pbnQgIT09ICdvYmplY3QnIHx8ICFwb2ludCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBwb2ludDtcbn1cblxudmFyIEFsaWduID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEFsaWduLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBbGlnbigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFsaWduKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5mb3JjZUFsaWduID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICB0YXJnZXQgPSBfdGhpcyRwcm9wcy50YXJnZXQsXG4gICAgICAgICAgYWxpZ24gPSBfdGhpcyRwcm9wcy5hbGlnbixcbiAgICAgICAgICBvbkFsaWduID0gX3RoaXMkcHJvcHMub25BbGlnbjtcblxuICAgICAgaWYgKCFkaXNhYmxlZCAmJiB0YXJnZXQpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF90aGlzKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICB2YXIgZWxlbWVudCA9IGdldEVsZW1lbnQodGFyZ2V0KTtcbiAgICAgICAgdmFyIHBvaW50ID0gZ2V0UG9pbnQodGFyZ2V0KTtcblxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgIHJlc3VsdCA9IGFsaWduRWxlbWVudChzb3VyY2UsIGVsZW1lbnQsIGFsaWduKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludCkge1xuICAgICAgICAgIHJlc3VsdCA9IGFsaWduUG9pbnQoc291cmNlLCBwb2ludCwgYWxpZ24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9uQWxpZ24pIHtcbiAgICAgICAgICBvbkFsaWduKHNvdXJjZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQWxpZ24ucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAvLyBpZiBwYXJlbnQgcmVmIG5vdCBhdHRhY2hlZCAuLi4uIHVzZSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZFxuICAgIHRoaXMuZm9yY2VBbGlnbigpO1xuICAgIGlmICghcHJvcHMuZGlzYWJsZWQgJiYgcHJvcHMubW9uaXRvcldpbmRvd1Jlc2l6ZSkge1xuICAgICAgdGhpcy5zdGFydE1vbml0b3JXaW5kb3dSZXNpemUoKTtcbiAgICB9XG4gIH07XG5cbiAgQWxpZ24ucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcmVBbGlnbiA9IGZhbHNlO1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIXByb3BzLmRpc2FibGVkKSB7XG4gICAgICB2YXIgc291cmNlID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgICB2YXIgc291cmNlUmVjdCA9IHNvdXJjZSA/IHNvdXJjZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IG51bGw7XG5cbiAgICAgIGlmIChwcmV2UHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgcmVBbGlnbiA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbGFzdEVsZW1lbnQgPSBnZXRFbGVtZW50KHByZXZQcm9wcy50YXJnZXQpO1xuICAgICAgICB2YXIgY3VycmVudEVsZW1lbnQgPSBnZXRFbGVtZW50KHByb3BzLnRhcmdldCk7XG4gICAgICAgIHZhciBsYXN0UG9pbnQgPSBnZXRQb2ludChwcmV2UHJvcHMudGFyZ2V0KTtcbiAgICAgICAgdmFyIGN1cnJlbnRQb2ludCA9IGdldFBvaW50KHByb3BzLnRhcmdldCk7XG5cbiAgICAgICAgaWYgKGlzV2luZG93KGxhc3RFbGVtZW50KSAmJiBpc1dpbmRvdyhjdXJyZW50RWxlbWVudCkpIHtcbiAgICAgICAgICAvLyBTa2lwIGlmIGlzIHdpbmRvd1xuICAgICAgICAgIHJlQWxpZ24gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0RWxlbWVudCAhPT0gY3VycmVudEVsZW1lbnQgfHwgLy8gRWxlbWVudCBjaGFuZ2VcbiAgICAgICAgbGFzdEVsZW1lbnQgJiYgIWN1cnJlbnRFbGVtZW50ICYmIGN1cnJlbnRQb2ludCB8fCAvLyBDaGFuZ2UgZnJvbSBlbGVtZW50IHRvIHBvaW50XG4gICAgICAgIGxhc3RQb2ludCAmJiBjdXJyZW50UG9pbnQgJiYgY3VycmVudEVsZW1lbnQgfHwgLy8gQ2hhbmdlIGZyb20gcG9pbnQgdG8gZWxlbWVudFxuICAgICAgICBjdXJyZW50UG9pbnQgJiYgIWlzU2FtZVBvaW50KGxhc3RQb2ludCwgY3VycmVudFBvaW50KSkge1xuICAgICAgICAgIHJlQWxpZ24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgc291cmNlIGVsZW1lbnQgc2l6ZSBjaGFuZ2VkXG4gICAgICAgIHZhciBwcmVSZWN0ID0gdGhpcy5zb3VyY2VSZWN0IHx8IHt9O1xuICAgICAgICBpZiAoIXJlQWxpZ24gJiYgc291cmNlICYmIChwcmVSZWN0LndpZHRoICE9PSBzb3VyY2VSZWN0LndpZHRoIHx8IHByZVJlY3QuaGVpZ2h0ICE9PSBzb3VyY2VSZWN0LmhlaWdodCkpIHtcbiAgICAgICAgICByZUFsaWduID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNvdXJjZVJlY3QgPSBzb3VyY2VSZWN0O1xuICAgIH1cblxuICAgIGlmIChyZUFsaWduKSB7XG4gICAgICB0aGlzLmZvcmNlQWxpZ24oKTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMubW9uaXRvcldpbmRvd1Jlc2l6ZSAmJiAhcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc3RhcnRNb25pdG9yV2luZG93UmVzaXplKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RvcE1vbml0b3JXaW5kb3dSZXNpemUoKTtcbiAgICB9XG4gIH07XG5cbiAgQWxpZ24ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5zdG9wTW9uaXRvcldpbmRvd1Jlc2l6ZSgpO1xuICB9O1xuXG4gIEFsaWduLnByb3RvdHlwZS5zdGFydE1vbml0b3JXaW5kb3dSZXNpemUgPSBmdW5jdGlvbiBzdGFydE1vbml0b3JXaW5kb3dSZXNpemUoKSB7XG4gICAgaWYgKCF0aGlzLnJlc2l6ZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMuYnVmZmVyTW9uaXRvciA9IGJ1ZmZlcih0aGlzLmZvcmNlQWxpZ24sIHRoaXMucHJvcHMubW9uaXRvckJ1ZmZlclRpbWUpO1xuICAgICAgdGhpcy5yZXNpemVIYW5kbGVyID0gYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCB0aGlzLmJ1ZmZlck1vbml0b3IpO1xuICAgIH1cbiAgfTtcblxuICBBbGlnbi5wcm90b3R5cGUuc3RvcE1vbml0b3JXaW5kb3dSZXNpemUgPSBmdW5jdGlvbiBzdG9wTW9uaXRvcldpbmRvd1Jlc2l6ZSgpIHtcbiAgICBpZiAodGhpcy5yZXNpemVIYW5kbGVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlck1vbml0b3IuY2xlYXIoKTtcbiAgICAgIHRoaXMucmVzaXplSGFuZGxlci5yZW1vdmUoKTtcbiAgICAgIHRoaXMucmVzaXplSGFuZGxlciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIEFsaWduLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW5Qcm9wcyA9IF9wcm9wcy5jaGlsZHJlblByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBjaGlsZCA9IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZHJlblByb3BzKSB7XG4gICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcbiAgICAgIHZhciBwcm9wTGlzdCA9IE9iamVjdC5rZXlzKGNoaWxkcmVuUHJvcHMpO1xuICAgICAgcHJvcExpc3QuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICBuZXdQcm9wc1twcm9wXSA9IF90aGlzMi5wcm9wc1tjaGlsZHJlblByb3BzW3Byb3BdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBuZXdQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZDtcbiAgfTtcblxuICByZXR1cm4gQWxpZ247XG59KENvbXBvbmVudCk7XG5cbkFsaWduLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW5Qcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWxpZ246IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjbGllbnRYOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNsaWVudFk6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgcGFnZVg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgcGFnZVk6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcbiAgb25BbGlnbjogUHJvcFR5cGVzLmZ1bmMsXG4gIG1vbml0b3JCdWZmZXJUaW1lOiBQcm9wVHlwZXMubnVtYmVyLFxuICBtb25pdG9yV2luZG93UmVzaXplOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxufTtcbkFsaWduLmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFyZ2V0OiBmdW5jdGlvbiB0YXJnZXQoKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfSxcbiAgbW9uaXRvckJ1ZmZlclRpbWU6IDUwLFxuICBtb25pdG9yV2luZG93UmVzaXplOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEFsaWduOyIsIi8vIGV4cG9ydCB0aGlzIHBhY2thZ2UncyBhcGlcbmltcG9ydCBBbGlnbiBmcm9tICcuL0FsaWduJztcblxuZXhwb3J0IGRlZmF1bHQgQWxpZ247IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgTGF6eVJlbmRlckJveCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMYXp5UmVuZGVyQm94LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMYXp5UmVuZGVyQm94KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMYXp5UmVuZGVyQm94KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgTGF6eVJlbmRlckJveC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHJldHVybiBuZXh0UHJvcHMuaGlkZGVuQ2xhc3NOYW1lIHx8IG5leHRQcm9wcy52aXNpYmxlO1xuICB9O1xuXG4gIExhenlSZW5kZXJCb3gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaGlkZGVuQ2xhc3NOYW1lID0gX3Byb3BzLmhpZGRlbkNsYXNzTmFtZSxcbiAgICAgICAgdmlzaWJsZSA9IF9wcm9wcy52aXNpYmxlLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaGlkZGVuQ2xhc3NOYW1lJywgJ3Zpc2libGUnXSk7XG5cbiAgICBpZiAoaGlkZGVuQ2xhc3NOYW1lIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KHByb3BzLmNoaWxkcmVuKSA+IDEpIHtcbiAgICAgIGlmICghdmlzaWJsZSAmJiBoaWRkZW5DbGFzc05hbWUpIHtcbiAgICAgICAgcHJvcHMuY2xhc3NOYW1lICs9ICcgJyArIGhpZGRlbkNsYXNzTmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm9ubHkocHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBMYXp5UmVuZGVyQm94O1xufShDb21wb25lbnQpO1xuXG5MYXp5UmVuZGVyQm94LnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGhpZGRlbkNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMYXp5UmVuZGVyQm94OyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBMYXp5UmVuZGVyQm94IGZyb20gJy4vTGF6eVJlbmRlckJveCc7XG5cbnZhciBQb3B1cElubmVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcHVwSW5uZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcHVwSW5uZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHVwSW5uZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQb3B1cElubmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lO1xuICAgIGlmICghcHJvcHMudmlzaWJsZSkge1xuICAgICAgY2xhc3NOYW1lICs9ICcgJyArIHByb3BzLmhpZGRlbkNsYXNzTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uTW91c2VFbnRlcjogcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgb25Nb3VzZURvd246IHByb3BzLm9uTW91c2VEb3duLFxuICAgICAgICBvblRvdWNoU3RhcnQ6IHByb3BzLm9uVG91Y2hTdGFydCxcbiAgICAgICAgc3R5bGU6IHByb3BzLnN0eWxlXG4gICAgICB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgTGF6eVJlbmRlckJveCxcbiAgICAgICAgeyBjbGFzc05hbWU6IHByb3BzLnByZWZpeENscyArICctY29udGVudCcsIHZpc2libGU6IHByb3BzLnZpc2libGUgfSxcbiAgICAgICAgcHJvcHMuY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBQb3B1cElubmVyO1xufShDb21wb25lbnQpO1xuXG5Qb3B1cElubmVyLnByb3BUeXBlcyA9IHtcbiAgaGlkZGVuQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQb3B1cElubmVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBBbGlnbiBmcm9tICdyYy1hbGlnbic7XG5pbXBvcnQgQW5pbWF0ZSBmcm9tICdyYy1hbmltYXRlJztcbmltcG9ydCBQb3B1cElubmVyIGZyb20gJy4vUG9wdXBJbm5lcic7XG5pbXBvcnQgTGF6eVJlbmRlckJveCBmcm9tICcuL0xhenlSZW5kZXJCb3gnO1xuaW1wb3J0IHsgc2F2ZVJlZiB9IGZyb20gJy4vdXRpbHMnO1xuXG52YXIgUG9wdXAgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9wdXAsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcHVwKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHVwKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgLy8gVXNlZCBmb3Igc3RyZXRjaFxuICAgICAgc3RyZXRjaENoZWNrZWQ6IGZhbHNlLFxuICAgICAgdGFyZ2V0V2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgIHRhcmdldEhlaWdodDogdW5kZWZpbmVkXG4gICAgfTtcblxuICAgIF90aGlzLnNhdmVQb3B1cFJlZiA9IHNhdmVSZWYuYmluZChfdGhpcywgJ3BvcHVwSW5zdGFuY2UnKTtcbiAgICBfdGhpcy5zYXZlQWxpZ25SZWYgPSBzYXZlUmVmLmJpbmQoX3RoaXMsICdhbGlnbkluc3RhbmNlJyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgUG9wdXAucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5yb290Tm9kZSA9IHRoaXMuZ2V0UG9wdXBEb21Ob2RlKCk7XG4gICAgdGhpcy5zZXRTdHJldGNoU2l6ZSgpO1xuICB9O1xuXG4gIFBvcHVwLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5zZXRTdHJldGNoU2l6ZSgpO1xuICB9O1xuXG4gIC8vIFJlY29yZCBzaXplIGlmIHN0cmV0Y2ggbmVlZGVkXG5cblxuICBQb3B1cC5wcm90b3R5cGUuZ2V0UG9wdXBEb21Ob2RlID0gZnVuY3Rpb24gZ2V0UG9wdXBEb21Ob2RlKCkge1xuICAgIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLnBvcHVwSW5zdGFuY2UpO1xuICB9O1xuXG4gIC8vIGB0YXJnZXRgIG9uIGByYy1hbGlnbmAgY2FuIGFjY2VwdCBhcyBhIGZ1bmN0aW9uIHRvIGdldCB0aGUgYmluZCBlbGVtZW50IG9yIGEgcG9pbnQuXG4gIC8vIHJlZjogaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmMtYWxpZ25cblxuXG4gIFBvcHVwLnByb3RvdHlwZS5nZXRNYXNrVHJhbnNpdGlvbk5hbWUgPSBmdW5jdGlvbiBnZXRNYXNrVHJhbnNpdGlvbk5hbWUoKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgdHJhbnNpdGlvbk5hbWUgPSBwcm9wcy5tYXNrVHJhbnNpdGlvbk5hbWU7XG4gICAgdmFyIGFuaW1hdGlvbiA9IHByb3BzLm1hc2tBbmltYXRpb247XG4gICAgaWYgKCF0cmFuc2l0aW9uTmFtZSAmJiBhbmltYXRpb24pIHtcbiAgICAgIHRyYW5zaXRpb25OYW1lID0gcHJvcHMucHJlZml4Q2xzICsgJy0nICsgYW5pbWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWU7XG4gIH07XG5cbiAgUG9wdXAucHJvdG90eXBlLmdldFRyYW5zaXRpb25OYW1lID0gZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbk5hbWUoKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgdHJhbnNpdGlvbk5hbWUgPSBwcm9wcy50cmFuc2l0aW9uTmFtZTtcbiAgICBpZiAoIXRyYW5zaXRpb25OYW1lICYmIHByb3BzLmFuaW1hdGlvbikge1xuICAgICAgdHJhbnNpdGlvbk5hbWUgPSBwcm9wcy5wcmVmaXhDbHMgKyAnLScgKyBwcm9wcy5hbmltYXRpb247XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2l0aW9uTmFtZTtcbiAgfTtcblxuICBQb3B1cC5wcm90b3R5cGUuZ2V0Q2xhc3NOYW1lID0gZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKGN1cnJlbnRBbGlnbkNsYXNzTmFtZSkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnByZWZpeENscyArICcgJyArIHRoaXMucHJvcHMuY2xhc3NOYW1lICsgJyAnICsgY3VycmVudEFsaWduQ2xhc3NOYW1lO1xuICB9O1xuXG4gIFBvcHVwLnByb3RvdHlwZS5nZXRQb3B1cEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRQb3B1cEVsZW1lbnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgc2F2ZVBvcHVwUmVmID0gdGhpcy5zYXZlUG9wdXBSZWY7XG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHN0cmV0Y2hDaGVja2VkID0gX3N0YXRlLnN0cmV0Y2hDaGVja2VkLFxuICAgICAgICB0YXJnZXRIZWlnaHQgPSBfc3RhdGUudGFyZ2V0SGVpZ2h0LFxuICAgICAgICB0YXJnZXRXaWR0aCA9IF9zdGF0ZS50YXJnZXRXaWR0aDtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWxpZ24gPSBfcHJvcHMuYWxpZ24sXG4gICAgICAgIHZpc2libGUgPSBfcHJvcHMudmlzaWJsZSxcbiAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzLnByZWZpeENscyxcbiAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgIGdldENsYXNzTmFtZUZyb21BbGlnbiA9IF9wcm9wcy5nZXRDbGFzc05hbWVGcm9tQWxpZ24sXG4gICAgICAgIGRlc3Ryb3lQb3B1cE9uSGlkZSA9IF9wcm9wcy5kZXN0cm95UG9wdXBPbkhpZGUsXG4gICAgICAgIHN0cmV0Y2ggPSBfcHJvcHMuc3RyZXRjaCxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG9uTW91c2VFbnRlciA9IF9wcm9wcy5vbk1vdXNlRW50ZXIsXG4gICAgICAgIG9uTW91c2VMZWF2ZSA9IF9wcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICAgIG9uTW91c2VEb3duID0gX3Byb3BzLm9uTW91c2VEb3duLFxuICAgICAgICBvblRvdWNoU3RhcnQgPSBfcHJvcHMub25Ub3VjaFN0YXJ0O1xuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuZ2V0Q2xhc3NOYW1lKHRoaXMuY3VycmVudEFsaWduQ2xhc3NOYW1lIHx8IGdldENsYXNzTmFtZUZyb21BbGlnbihhbGlnbikpO1xuICAgIHZhciBoaWRkZW5DbGFzc05hbWUgPSBwcmVmaXhDbHMgKyAnLWhpZGRlbic7XG5cbiAgICBpZiAoIXZpc2libGUpIHtcbiAgICAgIHRoaXMuY3VycmVudEFsaWduQ2xhc3NOYW1lID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgc2l6ZVN0eWxlID0ge307XG4gICAgaWYgKHN0cmV0Y2gpIHtcbiAgICAgIC8vIFN0cmV0Y2ggd2l0aCB0YXJnZXRcbiAgICAgIGlmIChzdHJldGNoLmluZGV4T2YoJ2hlaWdodCcpICE9PSAtMSkge1xuICAgICAgICBzaXplU3R5bGUuaGVpZ2h0ID0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgfSBlbHNlIGlmIChzdHJldGNoLmluZGV4T2YoJ21pbkhlaWdodCcpICE9PSAtMSkge1xuICAgICAgICBzaXplU3R5bGUubWluSGVpZ2h0ID0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgfVxuICAgICAgaWYgKHN0cmV0Y2guaW5kZXhPZignd2lkdGgnKSAhPT0gLTEpIHtcbiAgICAgICAgc2l6ZVN0eWxlLndpZHRoID0gdGFyZ2V0V2lkdGg7XG4gICAgICB9IGVsc2UgaWYgKHN0cmV0Y2guaW5kZXhPZignbWluV2lkdGgnKSAhPT0gLTEpIHtcbiAgICAgICAgc2l6ZVN0eWxlLm1pbldpZHRoID0gdGFyZ2V0V2lkdGg7XG4gICAgICB9XG5cbiAgICAgIC8vIERlbGF5IGZvcmNlIGFsaWduIHRvIG1ha2VzIHVpIHNtb290aFxuICAgICAgaWYgKCFzdHJldGNoQ2hlY2tlZCkge1xuICAgICAgICBzaXplU3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMyLmFsaWduSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIF90aGlzMi5hbGlnbkluc3RhbmNlLmZvcmNlQWxpZ24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBuZXdTdHlsZSA9IF9leHRlbmRzKHt9LCBzaXplU3R5bGUsIHN0eWxlLCB0aGlzLmdldFpJbmRleFN0eWxlKCkpO1xuXG4gICAgdmFyIHBvcHVwSW5uZXJQcm9wcyA9IHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICByZWY6IHNhdmVQb3B1cFJlZixcbiAgICAgIG9uTW91c2VFbnRlcjogb25Nb3VzZUVudGVyLFxuICAgICAgb25Nb3VzZUxlYXZlOiBvbk1vdXNlTGVhdmUsXG4gICAgICBvbk1vdXNlRG93bjogb25Nb3VzZURvd24sXG4gICAgICBvblRvdWNoU3RhcnQ6IG9uVG91Y2hTdGFydCxcbiAgICAgIHN0eWxlOiBuZXdTdHlsZVxuICAgIH07XG4gICAgaWYgKGRlc3Ryb3lQb3B1cE9uSGlkZSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIEFuaW1hdGUsXG4gICAgICAgIHtcbiAgICAgICAgICBjb21wb25lbnQ6ICcnLFxuICAgICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICB0cmFuc2l0aW9uQXBwZWFyOiB0cnVlLFxuICAgICAgICAgIHRyYW5zaXRpb25OYW1lOiB0aGlzLmdldFRyYW5zaXRpb25OYW1lKClcbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgQWxpZ24sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmdldEFsaWduVGFyZ2V0KCksXG4gICAgICAgICAgICBrZXk6ICdwb3B1cCcsXG4gICAgICAgICAgICByZWY6IHRoaXMuc2F2ZUFsaWduUmVmLFxuICAgICAgICAgICAgbW9uaXRvcldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWduOiBhbGlnbixcbiAgICAgICAgICAgIG9uQWxpZ246IHRoaXMub25BbGlnblxuICAgICAgICAgIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFBvcHVwSW5uZXIsXG4gICAgICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgICAgICAgIH0sIHBvcHVwSW5uZXJQcm9wcyksXG4gICAgICAgICAgICBjaGlsZHJlblxuICAgICAgICAgIClcbiAgICAgICAgKSA6IG51bGxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBBbmltYXRlLFxuICAgICAge1xuICAgICAgICBjb21wb25lbnQ6ICcnLFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIHRyYW5zaXRpb25BcHBlYXI6IHRydWUsXG4gICAgICAgIHRyYW5zaXRpb25OYW1lOiB0aGlzLmdldFRyYW5zaXRpb25OYW1lKCksXG4gICAgICAgIHNob3dQcm9wOiAneFZpc2libGUnXG4gICAgICB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgQWxpZ24sXG4gICAgICAgIHtcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMuZ2V0QWxpZ25UYXJnZXQoKSxcbiAgICAgICAgICBrZXk6ICdwb3B1cCcsXG4gICAgICAgICAgcmVmOiB0aGlzLnNhdmVBbGlnblJlZixcbiAgICAgICAgICBtb25pdG9yV2luZG93UmVzaXplOiB0cnVlLFxuICAgICAgICAgIHhWaXNpYmxlOiB2aXNpYmxlLFxuICAgICAgICAgIGNoaWxkcmVuUHJvcHM6IHsgdmlzaWJsZTogJ3hWaXNpYmxlJyB9LFxuICAgICAgICAgIGRpc2FibGVkOiAhdmlzaWJsZSxcbiAgICAgICAgICBhbGlnbjogYWxpZ24sXG4gICAgICAgICAgb25BbGlnbjogdGhpcy5vbkFsaWduXG4gICAgICAgIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgUG9wdXBJbm5lcixcbiAgICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBoaWRkZW5DbGFzc05hbWU6IGhpZGRlbkNsYXNzTmFtZVxuICAgICAgICAgIH0sIHBvcHVwSW5uZXJQcm9wcyksXG4gICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgUG9wdXAucHJvdG90eXBlLmdldFpJbmRleFN0eWxlID0gZnVuY3Rpb24gZ2V0WkluZGV4U3R5bGUoKSB7XG4gICAgdmFyIHN0eWxlID0ge307XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICBpZiAocHJvcHMuekluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlLnpJbmRleCA9IHByb3BzLnpJbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9O1xuXG4gIFBvcHVwLnByb3RvdHlwZS5nZXRNYXNrRWxlbWVudCA9IGZ1bmN0aW9uIGdldE1hc2tFbGVtZW50KCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIG1hc2tFbGVtZW50ID0gdm9pZCAwO1xuICAgIGlmIChwcm9wcy5tYXNrKSB7XG4gICAgICB2YXIgbWFza1RyYW5zaXRpb24gPSB0aGlzLmdldE1hc2tUcmFuc2l0aW9uTmFtZSgpO1xuICAgICAgbWFza0VsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KExhenlSZW5kZXJCb3gsIHtcbiAgICAgICAgc3R5bGU6IHRoaXMuZ2V0WkluZGV4U3R5bGUoKSxcbiAgICAgICAga2V5OiAnbWFzaycsXG4gICAgICAgIGNsYXNzTmFtZTogcHJvcHMucHJlZml4Q2xzICsgJy1tYXNrJyxcbiAgICAgICAgaGlkZGVuQ2xhc3NOYW1lOiBwcm9wcy5wcmVmaXhDbHMgKyAnLW1hc2staGlkZGVuJyxcbiAgICAgICAgdmlzaWJsZTogcHJvcHMudmlzaWJsZVxuICAgICAgfSk7XG4gICAgICBpZiAobWFza1RyYW5zaXRpb24pIHtcbiAgICAgICAgbWFza0VsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEFuaW1hdGUsXG4gICAgICAgICAge1xuICAgICAgICAgICAga2V5OiAnbWFzaycsXG4gICAgICAgICAgICBzaG93UHJvcDogJ3Zpc2libGUnLFxuICAgICAgICAgICAgdHJhbnNpdGlvbkFwcGVhcjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJycsXG4gICAgICAgICAgICB0cmFuc2l0aW9uTmFtZTogbWFza1RyYW5zaXRpb25cbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hc2tFbGVtZW50XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrRWxlbWVudDtcbiAgfTtcblxuICBQb3B1cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5nZXRNYXNrRWxlbWVudCgpLFxuICAgICAgdGhpcy5nZXRQb3B1cEVsZW1lbnQoKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFBvcHVwO1xufShDb21wb25lbnQpO1xuXG5Qb3B1cC5wcm9wVHlwZXMgPSB7XG4gIHZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgZ2V0Q2xhc3NOYW1lRnJvbUFsaWduOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25BbGlnbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGdldFJvb3REb21Ob2RlOiBQcm9wVHlwZXMuZnVuYyxcbiAgYWxpZ246IFByb3BUeXBlcy5hbnksXG4gIGRlc3Ryb3lQb3B1cE9uSGlkZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG4gIHN0cmV0Y2g6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgcG9pbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGFnZVg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgcGFnZVk6IFByb3BUeXBlcy5udW1iZXJcbiAgfSlcbn07XG5cbnZhciBfaW5pdGlhbGlzZVByb3BzID0gZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpIHtcbiAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgdGhpcy5vbkFsaWduID0gZnVuY3Rpb24gKHBvcHVwRG9tTm9kZSwgYWxpZ24pIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczMucHJvcHM7XG4gICAgdmFyIGN1cnJlbnRBbGlnbkNsYXNzTmFtZSA9IHByb3BzLmdldENsYXNzTmFtZUZyb21BbGlnbihhbGlnbik7XG4gICAgLy8gRklYOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3RyaWdnZXIvaXNzdWVzLzU2XG4gICAgLy8gRklYOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3Rvb2x0aXAvaXNzdWVzLzc5XG4gICAgaWYgKF90aGlzMy5jdXJyZW50QWxpZ25DbGFzc05hbWUgIT09IGN1cnJlbnRBbGlnbkNsYXNzTmFtZSkge1xuICAgICAgX3RoaXMzLmN1cnJlbnRBbGlnbkNsYXNzTmFtZSA9IGN1cnJlbnRBbGlnbkNsYXNzTmFtZTtcbiAgICAgIHBvcHVwRG9tTm9kZS5jbGFzc05hbWUgPSBfdGhpczMuZ2V0Q2xhc3NOYW1lKGN1cnJlbnRBbGlnbkNsYXNzTmFtZSk7XG4gICAgfVxuICAgIHByb3BzLm9uQWxpZ24ocG9wdXBEb21Ob2RlLCBhbGlnbik7XG4gIH07XG5cbiAgdGhpcy5zZXRTdHJldGNoU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3BzMiA9IF90aGlzMy5wcm9wcyxcbiAgICAgICAgc3RyZXRjaCA9IF9wcm9wczIuc3RyZXRjaCxcbiAgICAgICAgZ2V0Um9vdERvbU5vZGUgPSBfcHJvcHMyLmdldFJvb3REb21Ob2RlLFxuICAgICAgICB2aXNpYmxlID0gX3Byb3BzMi52aXNpYmxlO1xuICAgIHZhciBfc3RhdGUyID0gX3RoaXMzLnN0YXRlLFxuICAgICAgICBzdHJldGNoQ2hlY2tlZCA9IF9zdGF0ZTIuc3RyZXRjaENoZWNrZWQsXG4gICAgICAgIHRhcmdldEhlaWdodCA9IF9zdGF0ZTIudGFyZ2V0SGVpZ2h0LFxuICAgICAgICB0YXJnZXRXaWR0aCA9IF9zdGF0ZTIudGFyZ2V0V2lkdGg7XG5cblxuICAgIGlmICghc3RyZXRjaCB8fCAhdmlzaWJsZSkge1xuICAgICAgaWYgKHN0cmV0Y2hDaGVja2VkKSB7XG4gICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7IHN0cmV0Y2hDaGVja2VkOiBmYWxzZSB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgJGVsZSA9IGdldFJvb3REb21Ob2RlKCk7XG4gICAgaWYgKCEkZWxlKSByZXR1cm47XG5cbiAgICB2YXIgaGVpZ2h0ID0gJGVsZS5vZmZzZXRIZWlnaHQ7XG4gICAgdmFyIHdpZHRoID0gJGVsZS5vZmZzZXRXaWR0aDtcblxuICAgIGlmICh0YXJnZXRIZWlnaHQgIT09IGhlaWdodCB8fCB0YXJnZXRXaWR0aCAhPT0gd2lkdGggfHwgIXN0cmV0Y2hDaGVja2VkKSB7XG4gICAgICBfdGhpczMuc2V0U3RhdGUoe1xuICAgICAgICBzdHJldGNoQ2hlY2tlZDogdHJ1ZSxcbiAgICAgICAgdGFyZ2V0SGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHRhcmdldFdpZHRoOiB3aWR0aFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZ2V0VGFyZ2V0RWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMzLnByb3BzLmdldFJvb3REb21Ob2RlKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRBbGlnblRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9pbnQgPSBfdGhpczMucHJvcHMucG9pbnQ7XG5cbiAgICBpZiAocG9pbnQpIHtcbiAgICAgIHJldHVybiBwb2ludDtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzMy5nZXRUYXJnZXRFbGVtZW50O1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9wdXA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGZpbmRET01Ob2RlLCBjcmVhdGVQb3J0YWwgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gJ3JjLXV0aWwvZXMvRG9tL2NvbnRhaW5zJztcbmltcG9ydCBhZGRFdmVudExpc3RlbmVyIGZyb20gJ3JjLXV0aWwvZXMvRG9tL2FkZEV2ZW50TGlzdGVuZXInO1xuaW1wb3J0IENvbnRhaW5lclJlbmRlciBmcm9tICdyYy11dGlsL2VzL0NvbnRhaW5lclJlbmRlcic7XG5pbXBvcnQgUG9ydGFsIGZyb20gJ3JjLXV0aWwvZXMvUG9ydGFsJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgeyBnZXRBbGlnbkZyb21QbGFjZW1lbnQsIGdldEFsaWduUG9wdXBDbGFzc05hbWUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBQb3B1cCBmcm9tICcuL1BvcHVwJztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIHJldHVybkVtcHR5U3RyaW5nKCkge1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHJldHVybkRvY3VtZW50KCkge1xuICByZXR1cm4gd2luZG93LmRvY3VtZW50O1xufVxuXG52YXIgQUxMX0hBTkRMRVJTID0gWydvbkNsaWNrJywgJ29uTW91c2VEb3duJywgJ29uVG91Y2hTdGFydCcsICdvbk1vdXNlRW50ZXInLCAnb25Nb3VzZUxlYXZlJywgJ29uRm9jdXMnLCAnb25CbHVyJywgJ29uQ29udGV4dE1lbnUnXTtcblxudmFyIElTX1JFQUNUXzE2ID0gISFjcmVhdGVQb3J0YWw7XG5cbnZhciBjb250ZXh0VHlwZXMgPSB7XG4gIHJjVHJpZ2dlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBvblBvcHVwTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuY1xuICB9KVxufTtcblxudmFyIFRyaWdnZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVHJpZ2dlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJpZ2dlcihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmlnZ2VyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKTtcblxuICAgIHZhciBwb3B1cFZpc2libGUgPSB2b2lkIDA7XG4gICAgaWYgKCdwb3B1cFZpc2libGUnIGluIHByb3BzKSB7XG4gICAgICBwb3B1cFZpc2libGUgPSAhIXByb3BzLnBvcHVwVmlzaWJsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9wdXBWaXNpYmxlID0gISFwcm9wcy5kZWZhdWx0UG9wdXBWaXNpYmxlO1xuICAgIH1cblxuICAgIF90aGlzLnByZXZQb3B1cFZpc2libGUgPSBwb3B1cFZpc2libGU7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHBvcHVwVmlzaWJsZTogcG9wdXBWaXNpYmxlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUcmlnZ2VyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJjVHJpZ2dlcjoge1xuICAgICAgICBvblBvcHVwTW91c2VEb3duOiB0aGlzLm9uUG9wdXBNb3VzZURvd25cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIEFMTF9IQU5ETEVSUy5mb3JFYWNoKGZ1bmN0aW9uIChoKSB7XG4gICAgICBfdGhpczJbJ2ZpcmUnICsgaF0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBfdGhpczIuZmlyZUV2ZW50cyhoLCBlKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSh7fSwge1xuICAgICAgcG9wdXBWaXNpYmxlOiB0aGlzLnN0YXRlLnBvcHVwVmlzaWJsZVxuICAgIH0pO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKF9yZWYpIHtcbiAgICB2YXIgcG9wdXBWaXNpYmxlID0gX3JlZi5wb3B1cFZpc2libGU7XG5cbiAgICBpZiAocG9wdXBWaXNpYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwb3B1cFZpc2libGU6IHBvcHVwVmlzaWJsZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShfLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdmFyIHRyaWdnZXJBZnRlclBvcHVwVmlzaWJsZUNoYW5nZSA9IGZ1bmN0aW9uIHRyaWdnZXJBZnRlclBvcHVwVmlzaWJsZUNoYW5nZSgpIHtcbiAgICAgIGlmIChwcmV2U3RhdGUucG9wdXBWaXNpYmxlICE9PSBzdGF0ZS5wb3B1cFZpc2libGUpIHtcbiAgICAgICAgcHJvcHMuYWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2Uoc3RhdGUucG9wdXBWaXNpYmxlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICghSVNfUkVBQ1RfMTYpIHtcbiAgICAgIHRoaXMucmVuZGVyQ29tcG9uZW50KG51bGwsIHRyaWdnZXJBZnRlclBvcHVwVmlzaWJsZUNoYW5nZSk7XG4gICAgfVxuXG4gICAgdGhpcy5wcmV2UG9wdXBWaXNpYmxlID0gcHJldlN0YXRlLnBvcHVwVmlzaWJsZTtcblxuICAgIC8vIFdlIG11c3QgbGlzdGVuIHRvIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCwgZWRnZSBjYXNlOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzU4MDRcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L2NhbGVuZGFyL2lzc3Vlcy8yNTBcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3RyaWdnZXIvaXNzdWVzLzUwXG4gICAgaWYgKHN0YXRlLnBvcHVwVmlzaWJsZSkge1xuICAgICAgdmFyIGN1cnJlbnREb2N1bWVudCA9IHZvaWQgMDtcbiAgICAgIGlmICghdGhpcy5jbGlja091dHNpZGVIYW5kbGVyICYmICh0aGlzLmlzQ2xpY2tUb0hpZGUoKSB8fCB0aGlzLmlzQ29udGV4dE1lbnVUb1Nob3coKSkpIHtcbiAgICAgICAgY3VycmVudERvY3VtZW50ID0gcHJvcHMuZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgdGhpcy5jbGlja091dHNpZGVIYW5kbGVyID0gYWRkRXZlbnRMaXN0ZW5lcihjdXJyZW50RG9jdW1lbnQsICdtb3VzZWRvd24nLCB0aGlzLm9uRG9jdW1lbnRDbGljayk7XG4gICAgICB9XG4gICAgICAvLyBhbHdheXMgaGlkZSBvbiBtb2JpbGVcbiAgICAgIGlmICghdGhpcy50b3VjaE91dHNpZGVIYW5kbGVyKSB7XG4gICAgICAgIGN1cnJlbnREb2N1bWVudCA9IGN1cnJlbnREb2N1bWVudCB8fCBwcm9wcy5nZXREb2N1bWVudCgpO1xuICAgICAgICB0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXIgPSBhZGRFdmVudExpc3RlbmVyKGN1cnJlbnREb2N1bWVudCwgJ3RvdWNoc3RhcnQnLCB0aGlzLm9uRG9jdW1lbnRDbGljayk7XG4gICAgICB9XG4gICAgICAvLyBjbG9zZSBwb3B1cCB3aGVuIHRyaWdnZXIgdHlwZSBjb250YWlucyAnb25Db250ZXh0TWVudScgYW5kIGRvY3VtZW50IGlzIHNjcm9sbGluZy5cbiAgICAgIGlmICghdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMSAmJiB0aGlzLmlzQ29udGV4dE1lbnVUb1Nob3coKSkge1xuICAgICAgICBjdXJyZW50RG9jdW1lbnQgPSBjdXJyZW50RG9jdW1lbnQgfHwgcHJvcHMuZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMSA9IGFkZEV2ZW50TGlzdGVuZXIoY3VycmVudERvY3VtZW50LCAnc2Nyb2xsJywgdGhpcy5vbkNvbnRleHRNZW51Q2xvc2UpO1xuICAgICAgfVxuICAgICAgLy8gY2xvc2UgcG9wdXAgd2hlbiB0cmlnZ2VyIHR5cGUgY29udGFpbnMgJ29uQ29udGV4dE1lbnUnIGFuZCB3aW5kb3cgaXMgYmx1ci5cbiAgICAgIGlmICghdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMiAmJiB0aGlzLmlzQ29udGV4dE1lbnVUb1Nob3coKSkge1xuICAgICAgICB0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIyID0gYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdibHVyJywgdGhpcy5vbkNvbnRleHRNZW51Q2xvc2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXJPdXRzaWRlSGFuZGxlcigpO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jbGVhckRlbGF5VGltZXIoKTtcbiAgICB0aGlzLmNsZWFyT3V0c2lkZUhhbmRsZXIoKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5tb3VzZURvd25UaW1lb3V0KTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5nZXRQb3B1cERvbU5vZGUgPSBmdW5jdGlvbiBnZXRQb3B1cERvbU5vZGUoKSB7XG4gICAgLy8gZm9yIHRlc3RcbiAgICBpZiAodGhpcy5fY29tcG9uZW50ICYmIHRoaXMuX2NvbXBvbmVudC5nZXRQb3B1cERvbU5vZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb21wb25lbnQuZ2V0UG9wdXBEb21Ob2RlKCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmdldFBvcHVwQWxpZ24gPSBmdW5jdGlvbiBnZXRQb3B1cEFsaWduKCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHBvcHVwUGxhY2VtZW50ID0gcHJvcHMucG9wdXBQbGFjZW1lbnQsXG4gICAgICAgIHBvcHVwQWxpZ24gPSBwcm9wcy5wb3B1cEFsaWduLFxuICAgICAgICBidWlsdGluUGxhY2VtZW50cyA9IHByb3BzLmJ1aWx0aW5QbGFjZW1lbnRzO1xuXG4gICAgaWYgKHBvcHVwUGxhY2VtZW50ICYmIGJ1aWx0aW5QbGFjZW1lbnRzKSB7XG4gICAgICByZXR1cm4gZ2V0QWxpZ25Gcm9tUGxhY2VtZW50KGJ1aWx0aW5QbGFjZW1lbnRzLCBwb3B1cFBsYWNlbWVudCwgcG9wdXBBbGlnbik7XG4gICAgfVxuICAgIHJldHVybiBwb3B1cEFsaWduO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gcG9wdXBWaXNpYmxlICAgIFNob3cgb3Igbm90IHRoZSBwb3B1cCBlbGVtZW50XG4gICAqIEBwYXJhbSBldmVudCAgICAgICAgICAgU3ludGhldGljRXZlbnQsIHVzZWQgZm9yIGBwb2ludEFsaWduYFxuICAgKi9cbiAgVHJpZ2dlci5wcm90b3R5cGUuc2V0UG9wdXBWaXNpYmxlID0gZnVuY3Rpb24gc2V0UG9wdXBWaXNpYmxlKHBvcHVwVmlzaWJsZSwgZXZlbnQpIHtcbiAgICB2YXIgYWxpZ25Qb2ludCA9IHRoaXMucHJvcHMuYWxpZ25Qb2ludDtcblxuXG4gICAgdGhpcy5jbGVhckRlbGF5VGltZXIoKTtcblxuICAgIGlmICh0aGlzLnN0YXRlLnBvcHVwVmlzaWJsZSAhPT0gcG9wdXBWaXNpYmxlKSB7XG4gICAgICBpZiAoISgncG9wdXBWaXNpYmxlJyBpbiB0aGlzLnByb3BzKSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcG9wdXBWaXNpYmxlOiBwb3B1cFZpc2libGUgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLnByb3BzLm9uUG9wdXBWaXNpYmxlQ2hhbmdlKHBvcHVwVmlzaWJsZSk7XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIHJlY29yZCB0aGUgcG9pbnQgcG9zaXRpb24gc2luY2UgbW91c2VFbnRlckRlbGF5IHdpbGwgZGVsYXkgdGhlIHNob3dcbiAgICBpZiAoYWxpZ25Qb2ludCAmJiBldmVudCkge1xuICAgICAgdGhpcy5zZXRQb2ludChldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmRlbGF5U2V0UG9wdXBWaXNpYmxlID0gZnVuY3Rpb24gZGVsYXlTZXRQb3B1cFZpc2libGUodmlzaWJsZSwgZGVsYXlTLCBldmVudCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGRlbGF5ID0gZGVsYXlTICogMTAwMDtcbiAgICB0aGlzLmNsZWFyRGVsYXlUaW1lcigpO1xuICAgIGlmIChkZWxheSkge1xuICAgICAgdmFyIHBvaW50ID0gZXZlbnQgPyB7IHBhZ2VYOiBldmVudC5wYWdlWCwgcGFnZVk6IGV2ZW50LnBhZ2VZIH0gOiBudWxsO1xuICAgICAgdGhpcy5kZWxheVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zZXRQb3B1cFZpc2libGUodmlzaWJsZSwgcG9pbnQpO1xuICAgICAgICBfdGhpczMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0UG9wdXBWaXNpYmxlKHZpc2libGUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuY2xlYXJEZWxheVRpbWVyID0gZnVuY3Rpb24gY2xlYXJEZWxheVRpbWVyKCkge1xuICAgIGlmICh0aGlzLmRlbGF5VGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlbGF5VGltZXIpO1xuICAgICAgdGhpcy5kZWxheVRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuY2xlYXJPdXRzaWRlSGFuZGxlciA9IGZ1bmN0aW9uIGNsZWFyT3V0c2lkZUhhbmRsZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xpY2tPdXRzaWRlSGFuZGxlcikge1xuICAgICAgdGhpcy5jbGlja091dHNpZGVIYW5kbGVyLnJlbW92ZSgpO1xuICAgICAgdGhpcy5jbGlja091dHNpZGVIYW5kbGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMSkge1xuICAgICAgdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMS5yZW1vdmUoKTtcbiAgICAgIHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjEgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIyKSB7XG4gICAgICB0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIyLnJlbW92ZSgpO1xuICAgICAgdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMiA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudG91Y2hPdXRzaWRlSGFuZGxlcikge1xuICAgICAgdGhpcy50b3VjaE91dHNpZGVIYW5kbGVyLnJlbW92ZSgpO1xuICAgICAgdGhpcy50b3VjaE91dHNpZGVIYW5kbGVyID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuY3JlYXRlVHdvQ2hhaW5zID0gZnVuY3Rpb24gY3JlYXRlVHdvQ2hhaW5zKGV2ZW50KSB7XG4gICAgdmFyIGNoaWxkUHJvcyA9IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHM7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICBpZiAoY2hpbGRQcm9zW2V2ZW50XSAmJiBwcm9wc1tldmVudF0pIHtcbiAgICAgIHJldHVybiB0aGlzWydmaXJlJyArIGV2ZW50XTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkUHJvc1tldmVudF0gfHwgcHJvcHNbZXZlbnRdO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmlzQ2xpY2tUb1Nob3cgPSBmdW5jdGlvbiBpc0NsaWNrVG9TaG93KCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3Rpb24gPSBfcHJvcHMuYWN0aW9uLFxuICAgICAgICBzaG93QWN0aW9uID0gX3Byb3BzLnNob3dBY3Rpb247XG5cbiAgICByZXR1cm4gYWN0aW9uLmluZGV4T2YoJ2NsaWNrJykgIT09IC0xIHx8IHNob3dBY3Rpb24uaW5kZXhPZignY2xpY2snKSAhPT0gLTE7XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuaXNDb250ZXh0TWVudVRvU2hvdyA9IGZ1bmN0aW9uIGlzQ29udGV4dE1lbnVUb1Nob3coKSB7XG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBhY3Rpb24gPSBfcHJvcHMyLmFjdGlvbixcbiAgICAgICAgc2hvd0FjdGlvbiA9IF9wcm9wczIuc2hvd0FjdGlvbjtcblxuICAgIHJldHVybiBhY3Rpb24uaW5kZXhPZignY29udGV4dE1lbnUnKSAhPT0gLTEgfHwgc2hvd0FjdGlvbi5pbmRleE9mKCdjb250ZXh0TWVudScpICE9PSAtMTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5pc0NsaWNrVG9IaWRlID0gZnVuY3Rpb24gaXNDbGlja1RvSGlkZSgpIHtcbiAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGlvbiA9IF9wcm9wczMuYWN0aW9uLFxuICAgICAgICBoaWRlQWN0aW9uID0gX3Byb3BzMy5oaWRlQWN0aW9uO1xuXG4gICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdjbGljaycpICE9PSAtMSB8fCBoaWRlQWN0aW9uLmluZGV4T2YoJ2NsaWNrJykgIT09IC0xO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmlzTW91c2VFbnRlclRvU2hvdyA9IGZ1bmN0aW9uIGlzTW91c2VFbnRlclRvU2hvdygpIHtcbiAgICB2YXIgX3Byb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGlvbiA9IF9wcm9wczQuYWN0aW9uLFxuICAgICAgICBzaG93QWN0aW9uID0gX3Byb3BzNC5zaG93QWN0aW9uO1xuXG4gICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdob3ZlcicpICE9PSAtMSB8fCBzaG93QWN0aW9uLmluZGV4T2YoJ21vdXNlRW50ZXInKSAhPT0gLTE7XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuaXNNb3VzZUxlYXZlVG9IaWRlID0gZnVuY3Rpb24gaXNNb3VzZUxlYXZlVG9IaWRlKCkge1xuICAgIHZhciBfcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYWN0aW9uID0gX3Byb3BzNS5hY3Rpb24sXG4gICAgICAgIGhpZGVBY3Rpb24gPSBfcHJvcHM1LmhpZGVBY3Rpb247XG5cbiAgICByZXR1cm4gYWN0aW9uLmluZGV4T2YoJ2hvdmVyJykgIT09IC0xIHx8IGhpZGVBY3Rpb24uaW5kZXhPZignbW91c2VMZWF2ZScpICE9PSAtMTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5pc0ZvY3VzVG9TaG93ID0gZnVuY3Rpb24gaXNGb2N1c1RvU2hvdygpIHtcbiAgICB2YXIgX3Byb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGlvbiA9IF9wcm9wczYuYWN0aW9uLFxuICAgICAgICBzaG93QWN0aW9uID0gX3Byb3BzNi5zaG93QWN0aW9uO1xuXG4gICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdmb2N1cycpICE9PSAtMSB8fCBzaG93QWN0aW9uLmluZGV4T2YoJ2ZvY3VzJykgIT09IC0xO1xuICB9O1xuXG4gIFRyaWdnZXIucHJvdG90eXBlLmlzQmx1clRvSGlkZSA9IGZ1bmN0aW9uIGlzQmx1clRvSGlkZSgpIHtcbiAgICB2YXIgX3Byb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGlvbiA9IF9wcm9wczcuYWN0aW9uLFxuICAgICAgICBoaWRlQWN0aW9uID0gX3Byb3BzNy5oaWRlQWN0aW9uO1xuXG4gICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdmb2N1cycpICE9PSAtMSB8fCBoaWRlQWN0aW9uLmluZGV4T2YoJ2JsdXInKSAhPT0gLTE7XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuZm9yY2VQb3B1cEFsaWduID0gZnVuY3Rpb24gZm9yY2VQb3B1cEFsaWduKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnBvcHVwVmlzaWJsZSAmJiB0aGlzLl9jb21wb25lbnQgJiYgdGhpcy5fY29tcG9uZW50LmFsaWduSW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuX2NvbXBvbmVudC5hbGlnbkluc3RhbmNlLmZvcmNlQWxpZ24oKTtcbiAgICB9XG4gIH07XG5cbiAgVHJpZ2dlci5wcm90b3R5cGUuZmlyZUV2ZW50cyA9IGZ1bmN0aW9uIGZpcmVFdmVudHModHlwZSwgZSkge1xuICAgIHZhciBjaGlsZENhbGxiYWNrID0gdGhpcy5wcm9wcy5jaGlsZHJlbi5wcm9wc1t0eXBlXTtcbiAgICBpZiAoY2hpbGRDYWxsYmFjaykge1xuICAgICAgY2hpbGRDYWxsYmFjayhlKTtcbiAgICB9XG4gICAgdmFyIGNhbGxiYWNrID0gdGhpcy5wcm9wc1t0eXBlXTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKGUpO1xuICAgIH1cbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIHRoaXMuc2V0UG9wdXBWaXNpYmxlKGZhbHNlKTtcbiAgfTtcblxuICBUcmlnZ2VyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgcG9wdXBWaXNpYmxlID0gdGhpcy5zdGF0ZS5wb3B1cFZpc2libGU7XG4gICAgdmFyIF9wcm9wczggPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczguY2hpbGRyZW4sXG4gICAgICAgIGZvcmNlUmVuZGVyID0gX3Byb3BzOC5mb3JjZVJlbmRlcixcbiAgICAgICAgYWxpZ25Qb2ludCA9IF9wcm9wczguYWxpZ25Qb2ludCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzOC5jbGFzc05hbWU7XG5cbiAgICB2YXIgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICB2YXIgbmV3Q2hpbGRQcm9wcyA9IHsga2V5OiAndHJpZ2dlcicgfTtcblxuICAgIGlmICh0aGlzLmlzQ29udGV4dE1lbnVUb1Nob3coKSkge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbkNvbnRleHRNZW51ID0gdGhpcy5vbkNvbnRleHRNZW51O1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uQ29udGV4dE1lbnUgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25Db250ZXh0TWVudScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzQ2xpY2tUb0hpZGUoKSB8fCB0aGlzLmlzQ2xpY2tUb1Nob3coKSkge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrO1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlRG93biA9IHRoaXMub25Nb3VzZURvd247XG4gICAgICBuZXdDaGlsZFByb3BzLm9uVG91Y2hTdGFydCA9IHRoaXMub25Ub3VjaFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uQ2xpY2sgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25DbGljaycpO1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlRG93biA9IHRoaXMuY3JlYXRlVHdvQ2hhaW5zKCdvbk1vdXNlRG93bicpO1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vblRvdWNoU3RhcnQgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25Ub3VjaFN0YXJ0Jyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzTW91c2VFbnRlclRvU2hvdygpKSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uTW91c2VFbnRlciA9IHRoaXMub25Nb3VzZUVudGVyO1xuICAgICAgaWYgKGFsaWduUG9pbnQpIHtcbiAgICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlTW92ZSA9IHRoaXMub25Nb3VzZU1vdmU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZUVudGVyID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uTW91c2VFbnRlcicpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc01vdXNlTGVhdmVUb0hpZGUoKSkge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlTGVhdmUgPSB0aGlzLm9uTW91c2VMZWF2ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlTGVhdmUgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25Nb3VzZUxlYXZlJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzRm9jdXNUb1Nob3coKSB8fCB0aGlzLmlzQmx1clRvSGlkZSgpKSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uRm9jdXMgPSB0aGlzLm9uRm9jdXM7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uQmx1ciA9IHRoaXMub25CbHVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uRm9jdXMgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25Gb2N1cycpO1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbkJsdXIgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25CbHVyJyk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuQ2xhc3NOYW1lID0gY2xhc3NOYW1lcyhjaGlsZCAmJiBjaGlsZC5wcm9wcyAmJiBjaGlsZC5wcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSk7XG4gICAgaWYgKGNoaWxkcmVuQ2xhc3NOYW1lKSB7XG4gICAgICBuZXdDaGlsZFByb3BzLmNsYXNzTmFtZSA9IGNoaWxkcmVuQ2xhc3NOYW1lO1xuICAgIH1cbiAgICB2YXIgdHJpZ2dlciA9IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG5cbiAgICBpZiAoIUlTX1JFQUNUXzE2KSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgQ29udGFpbmVyUmVuZGVyLFxuICAgICAgICB7XG4gICAgICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgICAgIHZpc2libGU6IHBvcHVwVmlzaWJsZSxcbiAgICAgICAgICBhdXRvTW91bnQ6IGZhbHNlLFxuICAgICAgICAgIGZvcmNlUmVuZGVyOiBmb3JjZVJlbmRlcixcbiAgICAgICAgICBnZXRDb21wb25lbnQ6IHRoaXMuZ2V0Q29tcG9uZW50LFxuICAgICAgICAgIGdldENvbnRhaW5lcjogdGhpcy5nZXRDb250YWluZXJcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIHJlbmRlckNvbXBvbmVudCA9IF9yZWYyLnJlbmRlckNvbXBvbmVudDtcblxuICAgICAgICAgIF90aGlzNC5yZW5kZXJDb21wb25lbnQgPSByZW5kZXJDb21wb25lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRyaWdnZXI7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHBvcnRhbCA9IHZvaWQgMDtcbiAgICAvLyBwcmV2ZW50IHVubW91bnRpbmcgYWZ0ZXIgaXQncyByZW5kZXJlZFxuICAgIGlmIChwb3B1cFZpc2libGUgfHwgdGhpcy5fY29tcG9uZW50IHx8IGZvcmNlUmVuZGVyKSB7XG4gICAgICBwb3J0YWwgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBQb3J0YWwsXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdwb3J0YWwnLFxuICAgICAgICAgIGdldENvbnRhaW5lcjogdGhpcy5nZXRDb250YWluZXIsXG4gICAgICAgICAgZGlkVXBkYXRlOiB0aGlzLmhhbmRsZVBvcnRhbFVwZGF0ZVxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmdldENvbXBvbmVudCgpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBbdHJpZ2dlciwgcG9ydGFsXTtcbiAgfTtcblxuICByZXR1cm4gVHJpZ2dlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJpZ2dlci5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBhY3Rpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gIHNob3dBY3Rpb246IFByb3BUeXBlcy5hbnksXG4gIGhpZGVBY3Rpb246IFByb3BUeXBlcy5hbnksXG4gIGdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduOiBQcm9wVHlwZXMuYW55LFxuICBvblBvcHVwVmlzaWJsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGFmdGVyUG9wdXBWaXNpYmxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgcG9wdXA6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWQsXG4gIHBvcHVwU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgcG9wdXBDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcG9wdXBQbGFjZW1lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJ1aWx0aW5QbGFjZW1lbnRzOiBQcm9wVHlwZXMub2JqZWN0LFxuICBwb3B1cFRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIHBvcHVwQW5pbWF0aW9uOiBQcm9wVHlwZXMuYW55LFxuICBtb3VzZUVudGVyRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIG1vdXNlTGVhdmVEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgekluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBmb2N1c0RlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICBibHVyRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFBvcHVwQ29udGFpbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgZ2V0RG9jdW1lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICBmb3JjZVJlbmRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGRlc3Ryb3lQb3B1cE9uSGlkZTogUHJvcFR5cGVzLmJvb2wsXG4gIG1hc2s6IFByb3BUeXBlcy5ib29sLFxuICBtYXNrQ2xvc2FibGU6IFByb3BUeXBlcy5ib29sLFxuICBvblBvcHVwQWxpZ246IFByb3BUeXBlcy5mdW5jLFxuICBwb3B1cEFsaWduOiBQcm9wVHlwZXMub2JqZWN0LFxuICBwb3B1cFZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICBkZWZhdWx0UG9wdXBWaXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWFza1RyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIG1hc2tBbmltYXRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIHN0cmV0Y2g6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFsaWduUG9pbnQ6IFByb3BUeXBlcy5ib29sIC8vIE1heWJlIHdlIGNhbiBzdXBwb3J0IHVzZXIgcGFzcyBwb3NpdGlvbiBpbiB0aGUgZnV0dXJlXG59O1xuVHJpZ2dlci5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG5UcmlnZ2VyLmNoaWxkQ29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuVHJpZ2dlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHByZWZpeENsczogJ3JjLXRyaWdnZXItcG9wdXAnLFxuICBnZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbjogcmV0dXJuRW1wdHlTdHJpbmcsXG4gIGdldERvY3VtZW50OiByZXR1cm5Eb2N1bWVudCxcbiAgb25Qb3B1cFZpc2libGVDaGFuZ2U6IG5vb3AsXG4gIGFmdGVyUG9wdXBWaXNpYmxlQ2hhbmdlOiBub29wLFxuICBvblBvcHVwQWxpZ246IG5vb3AsXG4gIHBvcHVwQ2xhc3NOYW1lOiAnJyxcbiAgbW91c2VFbnRlckRlbGF5OiAwLFxuICBtb3VzZUxlYXZlRGVsYXk6IDAuMSxcbiAgZm9jdXNEZWxheTogMCxcbiAgYmx1ckRlbGF5OiAwLjE1LFxuICBwb3B1cFN0eWxlOiB7fSxcbiAgZGVzdHJveVBvcHVwT25IaWRlOiBmYWxzZSxcbiAgcG9wdXBBbGlnbjoge30sXG4gIGRlZmF1bHRQb3B1cFZpc2libGU6IGZhbHNlLFxuICBtYXNrOiBmYWxzZSxcbiAgbWFza0Nsb3NhYmxlOiB0cnVlLFxuICBhY3Rpb246IFtdLFxuICBzaG93QWN0aW9uOiBbXSxcbiAgaGlkZUFjdGlvbjogW11cbn07XG5cbnZhciBfaW5pdGlhbGlzZVByb3BzID0gZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpIHtcbiAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgdGhpcy5vbk1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBtb3VzZUVudGVyRGVsYXkgPSBfdGhpczUucHJvcHMubW91c2VFbnRlckRlbGF5O1xuXG4gICAgX3RoaXM1LmZpcmVFdmVudHMoJ29uTW91c2VFbnRlcicsIGUpO1xuICAgIF90aGlzNS5kZWxheVNldFBvcHVwVmlzaWJsZSh0cnVlLCBtb3VzZUVudGVyRGVsYXksIG1vdXNlRW50ZXJEZWxheSA/IG51bGwgOiBlKTtcbiAgfTtcblxuICB0aGlzLm9uTW91c2VNb3ZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBfdGhpczUuZmlyZUV2ZW50cygnb25Nb3VzZU1vdmUnLCBlKTtcbiAgICBfdGhpczUuc2V0UG9pbnQoZSk7XG4gIH07XG5cbiAgdGhpcy5vbk1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzNS5maXJlRXZlbnRzKCdvbk1vdXNlTGVhdmUnLCBlKTtcbiAgICBfdGhpczUuZGVsYXlTZXRQb3B1cFZpc2libGUoZmFsc2UsIF90aGlzNS5wcm9wcy5tb3VzZUxlYXZlRGVsYXkpO1xuICB9O1xuXG4gIHRoaXMub25Qb3B1cE1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXM1LmNsZWFyRGVsYXlUaW1lcigpO1xuICB9O1xuXG4gIHRoaXMub25Qb3B1cE1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdHJpZ2dlci9wdWxsLzEzXG4gICAgLy8gcmVhY3QgYnVnP1xuICAgIGlmIChlLnJlbGF0ZWRUYXJnZXQgJiYgIWUucmVsYXRlZFRhcmdldC5zZXRUaW1lb3V0ICYmIF90aGlzNS5fY29tcG9uZW50ICYmIF90aGlzNS5fY29tcG9uZW50LmdldFBvcHVwRG9tTm9kZSAmJiBjb250YWlucyhfdGhpczUuX2NvbXBvbmVudC5nZXRQb3B1cERvbU5vZGUoKSwgZS5yZWxhdGVkVGFyZ2V0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfdGhpczUuZGVsYXlTZXRQb3B1cFZpc2libGUoZmFsc2UsIF90aGlzNS5wcm9wcy5tb3VzZUxlYXZlRGVsYXkpO1xuICB9O1xuXG4gIHRoaXMub25Gb2N1cyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgX3RoaXM1LmZpcmVFdmVudHMoJ29uRm9jdXMnLCBlKTtcbiAgICAvLyBpbmNhc2UgZm9jdXNpbiBhbmQgZm9jdXNvdXRcbiAgICBfdGhpczUuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgaWYgKF90aGlzNS5pc0ZvY3VzVG9TaG93KCkpIHtcbiAgICAgIF90aGlzNS5mb2N1c1RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgX3RoaXM1LmRlbGF5U2V0UG9wdXBWaXNpYmxlKHRydWUsIF90aGlzNS5wcm9wcy5mb2N1c0RlbGF5KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgX3RoaXM1LmZpcmVFdmVudHMoJ29uTW91c2VEb3duJywgZSk7XG4gICAgX3RoaXM1LnByZUNsaWNrVGltZSA9IERhdGUubm93KCk7XG4gIH07XG5cbiAgdGhpcy5vblRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzNS5maXJlRXZlbnRzKCdvblRvdWNoU3RhcnQnLCBlKTtcbiAgICBfdGhpczUucHJlVG91Y2hUaW1lID0gRGF0ZS5ub3coKTtcbiAgfTtcblxuICB0aGlzLm9uQmx1ciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgX3RoaXM1LmZpcmVFdmVudHMoJ29uQmx1cicsIGUpO1xuICAgIF90aGlzNS5jbGVhckRlbGF5VGltZXIoKTtcbiAgICBpZiAoX3RoaXM1LmlzQmx1clRvSGlkZSgpKSB7XG4gICAgICBfdGhpczUuZGVsYXlTZXRQb3B1cFZpc2libGUoZmFsc2UsIF90aGlzNS5wcm9wcy5ibHVyRGVsYXkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uQ29udGV4dE1lbnUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBfdGhpczUuZmlyZUV2ZW50cygnb25Db250ZXh0TWVudScsIGUpO1xuICAgIF90aGlzNS5zZXRQb3B1cFZpc2libGUodHJ1ZSwgZSk7XG4gIH07XG5cbiAgdGhpcy5vbkNvbnRleHRNZW51Q2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKF90aGlzNS5pc0NvbnRleHRNZW51VG9TaG93KCkpIHtcbiAgICAgIF90aGlzNS5jbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBfdGhpczUuZmlyZUV2ZW50cygnb25DbGljaycsIGV2ZW50KTtcbiAgICAvLyBmb2N1cyB3aWxsIHRyaWdnZXIgY2xpY2tcbiAgICBpZiAoX3RoaXM1LmZvY3VzVGltZSkge1xuICAgICAgdmFyIHByZVRpbWUgPSB2b2lkIDA7XG4gICAgICBpZiAoX3RoaXM1LnByZUNsaWNrVGltZSAmJiBfdGhpczUucHJlVG91Y2hUaW1lKSB7XG4gICAgICAgIHByZVRpbWUgPSBNYXRoLm1pbihfdGhpczUucHJlQ2xpY2tUaW1lLCBfdGhpczUucHJlVG91Y2hUaW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXM1LnByZUNsaWNrVGltZSkge1xuICAgICAgICBwcmVUaW1lID0gX3RoaXM1LnByZUNsaWNrVGltZTtcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXM1LnByZVRvdWNoVGltZSkge1xuICAgICAgICBwcmVUaW1lID0gX3RoaXM1LnByZVRvdWNoVGltZTtcbiAgICAgIH1cbiAgICAgIGlmIChNYXRoLmFicyhwcmVUaW1lIC0gX3RoaXM1LmZvY3VzVGltZSkgPCAyMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBfdGhpczUuZm9jdXNUaW1lID0gMDtcbiAgICB9XG4gICAgX3RoaXM1LnByZUNsaWNrVGltZSA9IDA7XG4gICAgX3RoaXM1LnByZVRvdWNoVGltZSA9IDA7XG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICB2YXIgbmV4dFZpc2libGUgPSAhX3RoaXM1LnN0YXRlLnBvcHVwVmlzaWJsZTtcbiAgICBpZiAoX3RoaXM1LmlzQ2xpY2tUb0hpZGUoKSAmJiAhbmV4dFZpc2libGUgfHwgbmV4dFZpc2libGUgJiYgX3RoaXM1LmlzQ2xpY2tUb1Nob3coKSkge1xuICAgICAgX3RoaXM1LnNldFBvcHVwVmlzaWJsZSghX3RoaXM1LnN0YXRlLnBvcHVwVmlzaWJsZSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uUG9wdXBNb3VzZURvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9jb250ZXh0JHJjVHJpZ2dlciA9IF90aGlzNS5jb250ZXh0LnJjVHJpZ2dlcixcbiAgICAgICAgcmNUcmlnZ2VyID0gX2NvbnRleHQkcmNUcmlnZ2VyID09PSB1bmRlZmluZWQgPyB7fSA6IF9jb250ZXh0JHJjVHJpZ2dlcjtcblxuICAgIF90aGlzNS5oYXNQb3B1cE1vdXNlRG93biA9IHRydWU7XG5cbiAgICBjbGVhclRpbWVvdXQoX3RoaXM1Lm1vdXNlRG93blRpbWVvdXQpO1xuICAgIF90aGlzNS5tb3VzZURvd25UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczUuaGFzUG9wdXBNb3VzZURvd24gPSBmYWxzZTtcbiAgICB9LCAwKTtcblxuICAgIGlmIChyY1RyaWdnZXIub25Qb3B1cE1vdXNlRG93bikge1xuICAgICAgcmNUcmlnZ2VyLm9uUG9wdXBNb3VzZURvd24uYXBwbHkocmNUcmlnZ2VyLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChfdGhpczUucHJvcHMubWFzayAmJiAhX3RoaXM1LnByb3BzLm1hc2tDbG9zYWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgdmFyIHJvb3QgPSBmaW5kRE9NTm9kZShfdGhpczUpO1xuICAgIGlmICghY29udGFpbnMocm9vdCwgdGFyZ2V0KSAmJiAhX3RoaXM1Lmhhc1BvcHVwTW91c2VEb3duKSB7XG4gICAgICBfdGhpczUuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5nZXRSb290RG9tTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmluZERPTU5vZGUoX3RoaXM1KTtcbiAgfTtcblxuICB0aGlzLmdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduID0gZnVuY3Rpb24gKGFsaWduKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IFtdO1xuICAgIHZhciBfcHJvcHM5ID0gX3RoaXM1LnByb3BzLFxuICAgICAgICBwb3B1cFBsYWNlbWVudCA9IF9wcm9wczkucG9wdXBQbGFjZW1lbnQsXG4gICAgICAgIGJ1aWx0aW5QbGFjZW1lbnRzID0gX3Byb3BzOS5idWlsdGluUGxhY2VtZW50cyxcbiAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzOS5wcmVmaXhDbHMsXG4gICAgICAgIGFsaWduUG9pbnQgPSBfcHJvcHM5LmFsaWduUG9pbnQsXG4gICAgICAgIGdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduID0gX3Byb3BzOS5nZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbjtcblxuICAgIGlmIChwb3B1cFBsYWNlbWVudCAmJiBidWlsdGluUGxhY2VtZW50cykge1xuICAgICAgY2xhc3NOYW1lLnB1c2goZ2V0QWxpZ25Qb3B1cENsYXNzTmFtZShidWlsdGluUGxhY2VtZW50cywgcHJlZml4Q2xzLCBhbGlnbiwgYWxpZ25Qb2ludCkpO1xuICAgIH1cbiAgICBpZiAoZ2V0UG9wdXBDbGFzc05hbWVGcm9tQWxpZ24pIHtcbiAgICAgIGNsYXNzTmFtZS5wdXNoKGdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduKGFsaWduKSk7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc05hbWUuam9pbignICcpO1xuICB9O1xuXG4gIHRoaXMuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvcHMxMCA9IF90aGlzNS5wcm9wcyxcbiAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzMTAucHJlZml4Q2xzLFxuICAgICAgICBkZXN0cm95UG9wdXBPbkhpZGUgPSBfcHJvcHMxMC5kZXN0cm95UG9wdXBPbkhpZGUsXG4gICAgICAgIHBvcHVwQ2xhc3NOYW1lID0gX3Byb3BzMTAucG9wdXBDbGFzc05hbWUsXG4gICAgICAgIGFjdGlvbiA9IF9wcm9wczEwLmFjdGlvbixcbiAgICAgICAgb25Qb3B1cEFsaWduID0gX3Byb3BzMTAub25Qb3B1cEFsaWduLFxuICAgICAgICBwb3B1cEFuaW1hdGlvbiA9IF9wcm9wczEwLnBvcHVwQW5pbWF0aW9uLFxuICAgICAgICBwb3B1cFRyYW5zaXRpb25OYW1lID0gX3Byb3BzMTAucG9wdXBUcmFuc2l0aW9uTmFtZSxcbiAgICAgICAgcG9wdXBTdHlsZSA9IF9wcm9wczEwLnBvcHVwU3R5bGUsXG4gICAgICAgIG1hc2sgPSBfcHJvcHMxMC5tYXNrLFxuICAgICAgICBtYXNrQW5pbWF0aW9uID0gX3Byb3BzMTAubWFza0FuaW1hdGlvbixcbiAgICAgICAgbWFza1RyYW5zaXRpb25OYW1lID0gX3Byb3BzMTAubWFza1RyYW5zaXRpb25OYW1lLFxuICAgICAgICB6SW5kZXggPSBfcHJvcHMxMC56SW5kZXgsXG4gICAgICAgIHBvcHVwID0gX3Byb3BzMTAucG9wdXAsXG4gICAgICAgIHN0cmV0Y2ggPSBfcHJvcHMxMC5zdHJldGNoLFxuICAgICAgICBhbGlnblBvaW50ID0gX3Byb3BzMTAuYWxpZ25Qb2ludDtcbiAgICB2YXIgX3N0YXRlID0gX3RoaXM1LnN0YXRlLFxuICAgICAgICBwb3B1cFZpc2libGUgPSBfc3RhdGUucG9wdXBWaXNpYmxlLFxuICAgICAgICBwb2ludCA9IF9zdGF0ZS5wb2ludDtcblxuXG4gICAgdmFyIGFsaWduID0gX3RoaXM1LmdldFBvcHVwQWxpZ24oKTtcblxuICAgIHZhciBtb3VzZVByb3BzID0ge307XG4gICAgaWYgKF90aGlzNS5pc01vdXNlRW50ZXJUb1Nob3coKSkge1xuICAgICAgbW91c2VQcm9wcy5vbk1vdXNlRW50ZXIgPSBfdGhpczUub25Qb3B1cE1vdXNlRW50ZXI7XG4gICAgfVxuICAgIGlmIChfdGhpczUuaXNNb3VzZUxlYXZlVG9IaWRlKCkpIHtcbiAgICAgIG1vdXNlUHJvcHMub25Nb3VzZUxlYXZlID0gX3RoaXM1Lm9uUG9wdXBNb3VzZUxlYXZlO1xuICAgIH1cblxuICAgIG1vdXNlUHJvcHMub25Nb3VzZURvd24gPSBfdGhpczUub25Qb3B1cE1vdXNlRG93bjtcbiAgICBtb3VzZVByb3BzLm9uVG91Y2hTdGFydCA9IF90aGlzNS5vblBvcHVwTW91c2VEb3duO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBQb3B1cCxcbiAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgIGRlc3Ryb3lQb3B1cE9uSGlkZTogZGVzdHJveVBvcHVwT25IaWRlLFxuICAgICAgICB2aXNpYmxlOiBwb3B1cFZpc2libGUsXG4gICAgICAgIHBvaW50OiBhbGlnblBvaW50ICYmIHBvaW50LFxuICAgICAgICBjbGFzc05hbWU6IHBvcHVwQ2xhc3NOYW1lLFxuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgYWxpZ246IGFsaWduLFxuICAgICAgICBvbkFsaWduOiBvblBvcHVwQWxpZ24sXG4gICAgICAgIGFuaW1hdGlvbjogcG9wdXBBbmltYXRpb24sXG4gICAgICAgIGdldENsYXNzTmFtZUZyb21BbGlnbjogX3RoaXM1LmdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduXG4gICAgICB9LCBtb3VzZVByb3BzLCB7XG4gICAgICAgIHN0cmV0Y2g6IHN0cmV0Y2gsXG4gICAgICAgIGdldFJvb3REb21Ob2RlOiBfdGhpczUuZ2V0Um9vdERvbU5vZGUsXG4gICAgICAgIHN0eWxlOiBwb3B1cFN0eWxlLFxuICAgICAgICBtYXNrOiBtYXNrLFxuICAgICAgICB6SW5kZXg6IHpJbmRleCxcbiAgICAgICAgdHJhbnNpdGlvbk5hbWU6IHBvcHVwVHJhbnNpdGlvbk5hbWUsXG4gICAgICAgIG1hc2tBbmltYXRpb246IG1hc2tBbmltYXRpb24sXG4gICAgICAgIG1hc2tUcmFuc2l0aW9uTmFtZTogbWFza1RyYW5zaXRpb25OYW1lLFxuICAgICAgICByZWY6IF90aGlzNS5zYXZlUG9wdXBcbiAgICAgIH0pLFxuICAgICAgdHlwZW9mIHBvcHVwID09PSAnZnVuY3Rpb24nID8gcG9wdXAoKSA6IHBvcHVwXG4gICAgKTtcbiAgfTtcblxuICB0aGlzLmdldENvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczUucHJvcHM7XG5cbiAgICB2YXIgcG9wdXBDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAvLyBNYWtlIHN1cmUgZGVmYXVsdCBwb3B1cCBjb250YWluZXIgd2lsbCBuZXZlciBjYXVzZSBzY3JvbGxiYXIgYXBwZWFyaW5nXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC90cmlnZ2VyL2lzc3Vlcy80MVxuICAgIHBvcHVwQ29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBwb3B1cENvbnRhaW5lci5zdHlsZS50b3AgPSAnMCc7XG4gICAgcG9wdXBDb250YWluZXIuc3R5bGUubGVmdCA9ICcwJztcbiAgICBwb3B1cENvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICB2YXIgbW91bnROb2RlID0gcHJvcHMuZ2V0UG9wdXBDb250YWluZXIgPyBwcm9wcy5nZXRQb3B1cENvbnRhaW5lcihmaW5kRE9NTm9kZShfdGhpczUpKSA6IHByb3BzLmdldERvY3VtZW50KCkuYm9keTtcbiAgICBtb3VudE5vZGUuYXBwZW5kQ2hpbGQocG9wdXBDb250YWluZXIpO1xuICAgIHJldHVybiBwb3B1cENvbnRhaW5lcjtcbiAgfTtcblxuICB0aGlzLnNldFBvaW50ID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgdmFyIGFsaWduUG9pbnQgPSBfdGhpczUucHJvcHMuYWxpZ25Qb2ludDtcblxuICAgIGlmICghYWxpZ25Qb2ludCB8fCAhcG9pbnQpIHJldHVybjtcblxuICAgIF90aGlzNS5zZXRTdGF0ZSh7XG4gICAgICBwb2ludDoge1xuICAgICAgICBwYWdlWDogcG9pbnQucGFnZVgsXG4gICAgICAgIHBhZ2VZOiBwb2ludC5wYWdlWVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlUG9ydGFsVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChfdGhpczUucHJldlBvcHVwVmlzaWJsZSAhPT0gX3RoaXM1LnN0YXRlLnBvcHVwVmlzaWJsZSkge1xuICAgICAgX3RoaXM1LnByb3BzLmFmdGVyUG9wdXBWaXNpYmxlQ2hhbmdlKF90aGlzNS5zdGF0ZS5wb3B1cFZpc2libGUpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnNhdmVQb3B1cCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgX3RoaXM1Ll9jb21wb25lbnQgPSBub2RlO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVHJpZ2dlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnN0b3JlU2hhcGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc3RvcmVTaGFwZSA9IGV4cG9ydHMuc3RvcmVTaGFwZSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICBzdWJzY3JpYmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICBzZXRTdGF0ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZFxufSk7IiwiaW1wb3J0IGFkZERPTUV2ZW50TGlzdGVuZXIgZnJvbSAnYWRkLWRvbS1ldmVudC1saXN0ZW5lcic7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcldyYXAodGFyZ2V0LCBldmVudFR5cGUsIGNiKSB7XG4gIC8qIGVzbGludCBjYW1lbGNhc2U6IDIgKi9cbiAgdmFyIGNhbGxiYWNrID0gUmVhY3RET00udW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPyBmdW5jdGlvbiBydW4oZSkge1xuICAgIFJlYWN0RE9NLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzKGNiLCBlKTtcbiAgfSA6IGNiO1xuICByZXR1cm4gYWRkRE9NRXZlbnRMaXN0ZW5lcih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgdmFyIHJldCA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldC5wdXNoKGMpO1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUHJvdmlkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQcm92aWRlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFByb3ZpZGVyLCBbe1xuICAgIGtleTogJ2dldENoaWxkQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1pbmlTdG9yZTogdGhpcy5wcm9wcy5zdG9yZVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICBzdG9yZTogX1Byb3BUeXBlcy5zdG9yZVNoYXBlLmlzUmVxdWlyZWRcbn07XG5Qcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgbWluaVN0b3JlOiBfUHJvcFR5cGVzLnN0b3JlU2hhcGUuaXNSZXF1aXJlZFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IFByb3ZpZGVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY29ubmVjdDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3NoYWxsb3dlcXVhbCA9IHJlcXVpcmUoJ3NoYWxsb3dlcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dlcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93ZXF1YWwpO1xuXG52YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzID0gcmVxdWlyZSgnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnKTtcblxudmFyIF9ob2lzdE5vblJlYWN0U3RhdGljczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ob2lzdE5vblJlYWN0U3RhdGljcyk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZSgncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgcmV0dXJuIFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xufVxuXG5mdW5jdGlvbiBpc1N0YXRlbGVzcyhDb21wb25lbnQpIHtcbiAgcmV0dXJuICFDb21wb25lbnQucHJvdG90eXBlLnJlbmRlcjtcbn1cblxudmFyIGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzKCkge1xuICByZXR1cm4ge307XG59O1xuXG5mdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykge1xuICB2YXIgc2hvdWxkU3Vic2NyaWJlID0gISFtYXBTdGF0ZVRvUHJvcHM7XG4gIHZhciBmaW5uYWxNYXBTdGF0ZVRvUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMgfHwgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcztcblxuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICB2YXIgQ29ubmVjdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHMoQ29ubmVjdCwgX0NvbXBvbmVudCk7XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhDb25uZWN0LCBudWxsLCBbe1xuICAgICAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgICAvLyB1c2luZyBvd25Qcm9wc1xuICAgICAgICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMgJiYgbWFwU3RhdGVUb1Byb3BzLmxlbmd0aCA9PT0gMiAmJiBwcm9wcyAhPT0gcHJldlN0YXRlLnByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBzdWJzY3JpYmVkOiBmaW5uYWxNYXBTdGF0ZVRvUHJvcHMocHJldlN0YXRlLnN0b3JlLmdldFN0YXRlKCksIHByb3BzKSxcbiAgICAgICAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBwcm9wczogcHJvcHMgfTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29ubmVjdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbm5lY3QpKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghX3RoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG5leHRTdGF0ZSA9IGZpbm5hbE1hcFN0YXRlVG9Qcm9wcyhfdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLCBfdGhpcy5wcm9wcyk7XG4gICAgICAgICAgaWYgKCEoMCwgX3NoYWxsb3dlcXVhbDIuZGVmYXVsdCkoX3RoaXMuc3RhdGUuc3Vic2NyaWJlZCwgbmV4dFN0YXRlKSkge1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBzdWJzY3JpYmVkOiBuZXh0U3RhdGUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLnN0b3JlID0gY29udGV4dC5taW5pU3RvcmU7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgIHN1YnNjcmliZWQ6IGZpbm5hbE1hcFN0YXRlVG9Qcm9wcyhfdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyksXG4gICAgICAgICAgc3RvcmU6IF90aGlzLnN0b3JlLFxuICAgICAgICAgIHByb3BzOiBwcm9wc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhDb25uZWN0LCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgIHRoaXMudHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICd0cnlTdWJzY3JpYmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgICAgICAgIGlmIChzaG91bGRTdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZUNoYW5nZSk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICd0cnlVbnN1YnNjcmliZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFdyYXBwZWRJbnN0YW5jZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRXcmFwcGVkSW5zdGFuY2UoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlZEluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZS5zdWJzY3JpYmVkLCB7XG4gICAgICAgICAgICBzdG9yZTogdGhpcy5zdG9yZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCFpc1N0YXRlbGVzcyhXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIud3JhcHBlZEluc3RhbmNlID0gYztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9ICdDb25uZWN0KCcgKyBnZXREaXNwbGF5TmFtZShXcmFwcGVkQ29tcG9uZW50KSArICcpJztcbiAgICBDb25uZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgICAgIG1pbmlTdG9yZTogX1Byb3BUeXBlcy5zdG9yZVNoYXBlLmlzUmVxdWlyZWRcbiAgICB9O1xuXG5cbiAgICAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoQ29ubmVjdCk7XG5cbiAgICByZXR1cm4gKDAsIF9ob2lzdE5vblJlYWN0U3RhdGljczIuZGVmYXVsdCkoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZTtcbmZ1bmN0aW9uIGNyZWF0ZShpbml0aWFsU3RhdGUpIHtcbiAgdmFyIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUocGFydGlhbCkge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCBwYXJ0aWFsKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0U3RhdGU6IHNldFN0YXRlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZVxuICB9O1xufSIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbigpIHtcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhcmdzW2ldICYmIGFyZ3NbaV0uYXBwbHkpIHtcbiAgICAgICAgYXJnc1tpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0iLCIvKipcclxuICogQSBjb2xsZWN0aW9uIG9mIHNoaW1zIHRoYXQgcHJvdmlkZSBtaW5pbWFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVTNiBjb2xsZWN0aW9ucy5cclxuICpcclxuICogVGhlc2UgaW1wbGVtZW50YXRpb25zIGFyZSBub3QgbWVhbnQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBSZXNpemVPYnNlcnZlclxyXG4gKiBtb2R1bGVzIGFzIHRoZXkgY292ZXIgb25seSBhIGxpbWl0ZWQgcmFuZ2Ugb2YgdXNlIGNhc2VzLlxyXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtanNkb2MsIHZhbGlkLWpzZG9jICovXG52YXIgTWFwU2hpbSA9IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBNYXA7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGluZGV4IGluIHByb3ZpZGVkIGFycmF5IHRoYXQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGtleS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PEFycmF5Pn0gYXJyXHJcbiAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEluZGV4KGFyciwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAtMTtcblxuICAgICAgICBhcnIuc29tZShmdW5jdGlvbiAoZW50cnksIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYW5vbnltb3VzKCkge1xuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgc2l6ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xuICAgICAgICBwcm90b3R5cGVBY2Nlc3NvcnMuc2l6ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2VudHJpZXNfXy5sZW5ndGg7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5fX2VudHJpZXNfX1tpbmRleF07XG5cbiAgICAgICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVsxXTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgodGhpcy5fX2VudHJpZXNfXywga2V5KTtcblxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX19baW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18ucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXG4gICAgICAgIGFub255bW91cy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLl9fZW50cmllc19fO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgoZW50cmllcywga2V5KTtcblxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xuICAgICAgICBhbm9ueW1vdXMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAhIX5nZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xuICAgICAgICBhbm9ueW1vdXMucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXy5zcGxpY2UoMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAgICAgKiBAcGFyYW0geyp9IFtjdHg9bnVsbF1cclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjdHgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCBjdHggPT09IHZvaWQgMCApIGN0eCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gdGhpcyQxLl9fZW50cmllc19fOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGxpc3RbaV07XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGN0eCwgZW50cnlbMV0sIGVudHJ5WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggYW5vbnltb3VzLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICAgICAgcmV0dXJuIGFub255bW91cztcbiAgICB9KCkpO1xufSkoKTtcblxuLyoqXHJcbiAqIERldGVjdHMgd2hldGhlciB3aW5kb3cgYW5kIGRvY3VtZW50IG9iamVjdHMgYXJlIGF2YWlsYWJsZSBpbiBjdXJyZW50IGVudmlyb25tZW50LlxyXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCA9PT0gZG9jdW1lbnQ7XG5cbi8vIFJldHVybnMgZ2xvYmFsIG9iamVjdCBvZiBhIGN1cnJlbnQgZW52aXJvbm1lbnQuXG52YXIgZ2xvYmFsJDEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwuTWF0aCA9PT0gTWF0aCkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PT0gTWF0aCkge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufSkoKTtcblxuLyoqXHJcbiAqIEEgc2hpbSBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB3aGljaCBmYWxscyBiYWNrIHRvIHRoZSBzZXRUaW1lb3V0IGlmXHJcbiAqIGZpcnN0IG9uZSBpcyBub3Qgc3VwcG9ydGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXF1ZXN0cycgaWRlbnRpZmllci5cclxuICovXG52YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIEl0J3MgcmVxdWlyZWQgdG8gdXNlIGEgYm91bmRlZCBmdW5jdGlvbiBiZWNhdXNlIElFIHNvbWV0aW1lcyB0aHJvd3NcbiAgICAgICAgLy8gYW4gXCJJbnZhbGlkIGNhbGxpbmcgb2JqZWN0XCIgZXJyb3IgaWYgckFGIGlzIGludm9rZWQgd2l0aG91dCB0aGUgZ2xvYmFsXG4gICAgICAgIC8vIG9iamVjdCBvbiB0aGUgbGVmdCBoYW5kIHNpZGUuXG4gICAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZChnbG9iYWwkMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjayhEYXRlLm5vdygpKTsgfSwgMTAwMCAvIDYwKTsgfTtcbn0pKCk7XG5cbi8vIERlZmluZXMgbWluaW11bSB0aW1lb3V0IGJlZm9yZSBhZGRpbmcgYSB0cmFpbGluZyBjYWxsLlxudmFyIHRyYWlsaW5nVGltZW91dCA9IDI7XG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBlbnN1cmVzIHRoYXQgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZVxyXG4gKiBpbnZva2VkIG9ubHkgb25jZSBkdXJpbmcgdGhlIHNwZWNpZmllZCBkZWxheSBwZXJpb2QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgZGVsYXkgcGVyaW9kLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBEZWxheSBhZnRlciB3aGljaCB0byBpbnZva2UgY2FsbGJhY2suXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICovXG52YXIgdGhyb3R0bGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgdmFyIGxlYWRpbmdDYWxsID0gZmFsc2UsXG4gICAgICAgIHRyYWlsaW5nQ2FsbCA9IGZhbHNlLFxuICAgICAgICBsYXN0Q2FsbFRpbWUgPSAwO1xuXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIHRoZSBvcmlnaW5hbCBjYWxsYmFjayBmdW5jdGlvbiBhbmQgc2NoZWR1bGVzIG5ldyBpbnZvY2F0aW9uIGlmXHJcbiAgICAgKiB0aGUgXCJwcm94eVwiIHdhcyBjYWxsZWQgZHVyaW5nIGN1cnJlbnQgcmVxdWVzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVQZW5kaW5nKCkge1xuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhaWxpbmdDYWxsKSB7XG4gICAgICAgICAgICBwcm94eSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXkuIEl0IHdpbGwgZnVydGhlciBwb3N0cG9uZVxyXG4gICAgICogaW52b2NhdGlvbiBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gZGVsZWdhdGluZyBpdCB0byB0aGVcclxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXRDYWxsYmFjaygpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEocmVzb2x2ZVBlbmRpbmcpO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGVzIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJveHkoKSB7XG4gICAgICAgIHZhciB0aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmIChsZWFkaW5nQ2FsbCkge1xuICAgICAgICAgICAgLy8gUmVqZWN0IGltbWVkaWF0ZWx5IGZvbGxvd2luZyBjYWxscy5cbiAgICAgICAgICAgIGlmICh0aW1lU3RhbXAgLSBsYXN0Q2FsbFRpbWUgPCB0cmFpbGluZ1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIG5ldyBjYWxsIHRvIGJlIGluIGludm9rZWQgd2hlbiB0aGUgcGVuZGluZyBvbmUgaXMgcmVzb2x2ZWQuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBmb3IgXCJ0cmFuc2l0aW9uc1wiIHdoaWNoIG5ldmVyIGFjdHVhbGx5IHN0YXJ0XG4gICAgICAgICAgICAvLyBpbW1lZGlhdGVseSBzbyB0aGVyZSBpcyBhIGNoYW5jZSB0aGF0IHdlIG1pZ2h0IG1pc3Mgb25lIGlmIGNoYW5nZVxuICAgICAgICAgICAgLy8gaGFwcGVucyBhbWlkcyB0aGUgcGVuZGluZyBpbnZvY2F0aW9uLlxuICAgICAgICAgICAgdHJhaWxpbmdDYWxsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYWlsaW5nQ2FsbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRpbWVvdXRDYWxsYmFjaywgZGVsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZVN0YW1wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm94eTtcbn07XG5cbi8vIE1pbmltdW0gZGVsYXkgYmVmb3JlIGludm9raW5nIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLlxudmFyIFJFRlJFU0hfREVMQVkgPSAyMDtcblxuLy8gQSBsaXN0IG9mIHN1YnN0cmluZ3Mgb2YgQ1NTIHByb3BlcnRpZXMgdXNlZCB0byBmaW5kIHRyYW5zaXRpb24gZXZlbnRzIHRoYXRcbi8vIG1pZ2h0IGFmZmVjdCBkaW1lbnNpb25zIG9mIG9ic2VydmVkIGVsZW1lbnRzLlxudmFyIHRyYW5zaXRpb25LZXlzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3NpemUnLCAnd2VpZ2h0J107XG5cbi8vIENoZWNrIGlmIE11dGF0aW9uT2JzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxudmFyIG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxyXG4gKiBTaW5nbGV0b24gY29udHJvbGxlciBjbGFzcyB3aGljaCBoYW5kbGVzIHVwZGF0ZXMgb2YgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2VzLlxyXG4gKi9cbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbiAgICB0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfID0gZmFsc2U7XG4gICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xuICAgIHRoaXMub2JzZXJ2ZXJzXyA9IFtdO1xuXG4gICAgdGhpcy5vblRyYW5zaXRpb25FbmRfID0gdGhpcy5vblRyYW5zaXRpb25FbmRfLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWZyZXNoID0gdGhyb3R0bGUodGhpcy5yZWZyZXNoLmJpbmQodGhpcyksIFJFRlJFU0hfREVMQVkpO1xufTtcblxuLyoqXHJcbiAqIEFkZHMgb2JzZXJ2ZXIgdG8gb2JzZXJ2ZXJzIGxpc3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJTUEl9IG9ic2VydmVyIC0gT2JzZXJ2ZXIgdG8gYmUgYWRkZWQuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblxuXG4vKipcclxuICogSG9sZHMgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyJ3MgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAqL1xuXG5cbi8qKlxyXG4gKiBLZWVwcyByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIE11dGF0aW9uT2JzZXJ2ZXIuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtNdXRhdGlvbk9ic2VydmVyfVxyXG4gKi9cblxuLyoqXHJcbiAqIEluZGljYXRlcyB3aGV0aGVyIERPTSBsaXN0ZW5lcnMgaGF2ZSBiZWVuIGFkZGVkLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmFkZE9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgaWYgKCF+dGhpcy5vYnNlcnZlcnNfLmluZGV4T2Yob2JzZXJ2ZXIpKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzXy5wdXNoKG9ic2VydmVyKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbGlzdGVuZXJzIGlmIHRoZXkgaGF2ZW4ndCBiZWVuIGFkZGVkIHlldC5cbiAgICBpZiAoIXRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICB0aGlzLmNvbm5lY3RfKCk7XG4gICAgfVxufTtcblxuLyoqXHJcbiAqIFJlbW92ZXMgb2JzZXJ2ZXIgZnJvbSBvYnNlcnZlcnMgbGlzdC5cclxuICpcclxuICogQHBhcmFtIHtSZXNpemVPYnNlcnZlclNQSX0gb2JzZXJ2ZXIgLSBPYnNlcnZlciB0byBiZSByZW1vdmVkLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXztcbiAgICB2YXIgaW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcik7XG5cbiAgICAvLyBSZW1vdmUgb2JzZXJ2ZXIgaWYgaXQncyBwcmVzZW50IGluIHJlZ2lzdHJ5LlxuICAgIGlmICh+aW5kZXgpIHtcbiAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGxpc3RlbmVycyBpZiBjb250cm9sbGVyIGhhcyBubyBjb25uZWN0ZWQgb2JzZXJ2ZXJzLlxuICAgIGlmICghb2JzZXJ2ZXJzLmxlbmd0aCAmJiB0aGlzLmNvbm5lY3RlZF8pIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0XygpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBJbnZva2VzIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLiBJdCB3aWxsIGNvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpbnNvZmFyXHJcbiAqIGl0IGRldGVjdHMgY2hhbmdlcy5cclxuICpcclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VzRGV0ZWN0ZWQgPSB0aGlzLnVwZGF0ZU9ic2VydmVyc18oKTtcblxuICAgIC8vIENvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpZiBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZCBhcyB0aGVyZSBtaWdodFxuICAgIC8vIGJlIGZ1dHVyZSBvbmVzIGNhdXNlZCBieSBDU1MgdHJhbnNpdGlvbnMuXG4gICAgaWYgKGNoYW5nZXNEZXRlY3RlZCkge1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG59O1xuXG4vKipcclxuICogVXBkYXRlcyBldmVyeSBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0IGFuZCBub3RpZmllcyB0aGVtIG9mIHF1ZXVlZFxyXG4gKiBlbnRyaWVzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBcInRydWVcIiBpZiBhbnkgb2JzZXJ2ZXIgaGFzIGRldGVjdGVkIGNoYW5nZXMgaW5cclxuICogIGRpbWVuc2lvbnMgb2YgaXQncyBlbGVtZW50cy5cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZU9ic2VydmVyc18gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ29sbGVjdCBvYnNlcnZlcnMgdGhhdCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXG4gICAgdmFyIGFjdGl2ZU9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXy5maWx0ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5nYXRoZXJBY3RpdmUoKSwgb2JzZXJ2ZXIuaGFzQWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBEZWxpdmVyIG5vdGlmaWNhdGlvbnMgaW4gYSBzZXBhcmF0ZSBjeWNsZSBpbiBvcmRlciB0byBhdm9pZCBhbnlcbiAgICAvLyBjb2xsaXNpb25zIGJldHdlZW4gb2JzZXJ2ZXJzLCBlLmcuIHdoZW4gbXVsdGlwbGUgaW5zdGFuY2VzIG9mXG4gICAgLy8gUmVzaXplT2JzZXJ2ZXIgYXJlIHRyYWNraW5nIHRoZSBzYW1lIGVsZW1lbnQgYW5kIHRoZSBjYWxsYmFjayBvZiBvbmVcbiAgICAvLyBvZiB0aGVtIGNoYW5nZXMgY29udGVudCBkaW1lbnNpb25zIG9mIHRoZSBvYnNlcnZlZCB0YXJnZXQuIFNvbWV0aW1lc1xuICAgIC8vIHRoaXMgbWF5IHJlc3VsdCBpbiBub3RpZmljYXRpb25zIGJlaW5nIGJsb2NrZWQgZm9yIHRoZSByZXN0IG9mIG9ic2VydmVycy5cbiAgICBhY3RpdmVPYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIG9ic2VydmVyLmJyb2FkY2FzdEFjdGl2ZSgpOyB9KTtcblxuICAgIHJldHVybiBhY3RpdmVPYnNlcnZlcnMubGVuZ3RoID4gMDtcbn07XG5cbi8qKlxyXG4gKiBJbml0aWFsaXplcyBET00gbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmNvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IGFkZGVkLlxuICAgIGlmICghaXNCcm93c2VyIHx8IHRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU3Vic2NyaXB0aW9uIHRvIHRoZSBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBpcyB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3JcbiAgICAvLyBkZWxheWVkIHRyYW5zaXRpb25zLiBUaGlzIHdheSBpdCdzIHBvc3NpYmxlIHRvIGNhcHR1cmUgYXQgbGVhc3QgdGhlXG4gICAgLy8gZmluYWwgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlZnJlc2gpO1xuXG4gICAgaWYgKG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlZnJlc2gpO1xuXG4gICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xuXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuY29ubmVjdGVkXyA9IHRydWU7XG59O1xuXG4vKipcclxuICogUmVtb3ZlcyBET00gbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmRpc2Nvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IHJlbW92ZWQuXG4gICAgaWYgKCFpc0Jyb3dzZXIgfHwgIXRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kXyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVmcmVzaCk7XG5cbiAgICBpZiAodGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8pIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8uZGlzY29ubmVjdCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMucmVmcmVzaCk7XG4gICAgfVxuXG4gICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xuICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcbiAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbn07XG5cbi8qKlxyXG4gKiBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBoYW5kbGVyLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge1RyYW5zaXRpb25FdmVudH0gZXZlbnRcclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmRfID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gcmVmLnByb3BlcnR5TmFtZTsgaWYgKCBwcm9wZXJ0eU5hbWUgPT09IHZvaWQgMCApIHByb3BlcnR5TmFtZSA9ICcnO1xuXG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgdHJhbnNpdGlvbiBtYXkgYWZmZWN0IGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudC5cbiAgICB2YXIgaXNSZWZsb3dQcm9wZXJ0eSA9IHRyYW5zaXRpb25LZXlzLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gISF+cHJvcGVydHlOYW1lLmluZGV4T2Yoa2V5KTtcbiAgICB9KTtcblxuICAgIGlmIChpc1JlZmxvd1Byb3BlcnR5KSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBSZXR1cm5zIGluc3RhbmNlIG9mIHRoZSBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZV8pIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZV8gPSBuZXcgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VfO1xufTtcblxuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmluc3RhbmNlXyA9IG51bGw7XG5cbi8qKlxyXG4gKiBEZWZpbmVzIG5vbi13cml0YWJsZS9lbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHByb3ZpZGVkIHRhcmdldCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgLSBPYmplY3QgZm9yIHdoaWNoIHRvIGRlZmluZSBwcm9wZXJ0aWVzLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBQcm9wZXJ0aWVzIHRvIGJlIGRlZmluZWQuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRhcmdldCBvYmplY3QuXHJcbiAqL1xudmFyIGRlZmluZUNvbmZpZ3VyYWJsZSA9IChmdW5jdGlvbiAodGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gT2JqZWN0LmtleXMocHJvcHMpOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIga2V5ID0gbGlzdFtpXTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wc1trZXldLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbn0pO1xuXG4vKipcclxuICogUmV0dXJucyB0aGUgZ2xvYmFsIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggcHJvdmlkZWQgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKi9cbnZhciBnZXRXaW5kb3dPZiA9IChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgLy8gQXNzdW1lIHRoYXQgdGhlIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgTm9kZSwgd2hpY2ggbWVhbnMgdGhhdCBpdFxuICAgIC8vIGhhcyB0aGUgXCJvd25lckRvY3VtZW50XCIgcHJvcGVydHkgZnJvbSB3aGljaCB3ZSBjYW4gcmV0cmlldmUgYVxuICAgIC8vIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9iamVjdC5cbiAgICB2YXIgb3duZXJHbG9iYWwgPSB0YXJnZXQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cbiAgICAvLyBSZXR1cm4gdGhlIGxvY2FsIGdsb2JhbCBvYmplY3QgaWYgaXQncyBub3QgcG9zc2libGUgZXh0cmFjdCBvbmUgZnJvbVxuICAgIC8vIHByb3ZpZGVkIGVsZW1lbnQuXG4gICAgcmV0dXJuIG93bmVyR2xvYmFsIHx8IGdsb2JhbCQxO1xufSk7XG5cbi8vIFBsYWNlaG9sZGVyIG9mIGFuIGVtcHR5IGNvbnRlbnQgcmVjdGFuZ2xlLlxudmFyIGVtcHR5UmVjdCA9IGNyZWF0ZVJlY3RJbml0KDAsIDAsIDAsIDApO1xuXG4vKipcclxuICogQ29udmVydHMgcHJvdmlkZWQgc3RyaW5nIHRvIGEgbnVtYmVyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xuZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xufVxuXG4vKipcclxuICogRXh0cmFjdHMgYm9yZGVycyBzaXplIGZyb20gcHJvdmlkZWQgc3R5bGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xyXG4gKiBAcGFyYW0gey4uLnN0cmluZ30gcG9zaXRpb25zIC0gQm9yZGVycyBwb3NpdGlvbnMgKHRvcCwgcmlnaHQsIC4uLilcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgcG9zaXRpb25zWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHNpemUsIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1snYm9yZGVyLScgKyBwb3NpdGlvbiArICctd2lkdGgnXTtcblxuICAgICAgICByZXR1cm4gc2l6ZSArIHRvRmxvYXQodmFsdWUpO1xuICAgIH0sIDApO1xufVxuXG4vKipcclxuICogRXh0cmFjdHMgcGFkZGluZ3Mgc2l6ZXMgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhZGRpbmdzIGJveC5cclxuICovXG5mdW5jdGlvbiBnZXRQYWRkaW5ncyhzdHlsZXMpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcbiAgICB2YXIgcGFkZGluZ3MgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcG9zaXRpb25zOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBsaXN0W2ldO1xuXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1sncGFkZGluZy0nICsgcG9zaXRpb25dO1xuXG4gICAgICAgIHBhZGRpbmdzW3Bvc2l0aW9uXSA9IHRvRmxvYXQodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBwYWRkaW5ncztcbn1cblxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgY29udGVudCByZWN0YW5nbGUgb2YgcHJvdmlkZWQgU1ZHIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U1ZHR3JhcGhpY3NFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHdoaWNoIG5lZWRzXHJcbiAqICAgICAgdG8gYmUgY2FsY3VsYXRlZC5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cbmZ1bmN0aW9uIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCkge1xuICAgIHZhciBiYm94ID0gdGFyZ2V0LmdldEJCb3goKTtcblxuICAgIHJldHVybiBjcmVhdGVSZWN0SW5pdCgwLCAwLCBiYm94LndpZHRoLCBiYm94LmhlaWdodCk7XG59XG5cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHByb3ZpZGVkIEhUTUxFbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGZvciB3aGljaCB0byBjYWxjdWxhdGUgdGhlIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpIHtcbiAgICAvLyBDbGllbnQgd2lkdGggJiBoZWlnaHQgcHJvcGVydGllcyBjYW4ndCBiZVxuICAgIC8vIHVzZWQgZXhjbHVzaXZlbHkgYXMgdGhleSBwcm92aWRlIHJvdW5kZWQgdmFsdWVzLlxuICAgIHZhciBjbGllbnRXaWR0aCA9IHRhcmdldC5jbGllbnRXaWR0aDtcbiAgICB2YXIgY2xpZW50SGVpZ2h0ID0gdGFyZ2V0LmNsaWVudEhlaWdodDtcblxuICAgIC8vIEJ5IHRoaXMgY29uZGl0aW9uIHdlIGNhbiBjYXRjaCBhbGwgbm9uLXJlcGxhY2VkIGlubGluZSwgaGlkZGVuIGFuZFxuICAgIC8vIGRldGFjaGVkIGVsZW1lbnRzLiBUaG91Z2ggZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGxlc3NcbiAgICAvLyB0aGFuIDAuNSB3aWxsIGJlIGRpc2NhcmRlZCBhcyB3ZWxsLlxuICAgIC8vXG4gICAgLy8gV2l0aG91dCBpdCB3ZSB3b3VsZCBuZWVkIHRvIGltcGxlbWVudCBzZXBhcmF0ZSBtZXRob2RzIGZvciBlYWNoIG9mXG4gICAgLy8gdGhvc2UgY2FzZXMgYW5kIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHBlcmZvcm0gYSBwcmVjaXNlIGFuZCBwZXJmb3JtYW5jZVxuICAgIC8vIGVmZmVjdGl2ZSB0ZXN0IGZvciBoaWRkZW4gZWxlbWVudHMuIEUuZy4gZXZlbiBqUXVlcnkncyAnOnZpc2libGUnIGZpbHRlclxuICAgIC8vIGdpdmVzIHdyb25nIHJlc3VsdHMgZm9yIGVsZW1lbnRzIHdpdGggd2lkdGggJiBoZWlnaHQgbGVzcyB0aGFuIDAuNS5cbiAgICBpZiAoIWNsaWVudFdpZHRoICYmICFjbGllbnRIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0gZ2V0V2luZG93T2YodGFyZ2V0KS5nZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XG4gICAgdmFyIHBhZGRpbmdzID0gZ2V0UGFkZGluZ3Moc3R5bGVzKTtcbiAgICB2YXIgaG9yaXpQYWQgPSBwYWRkaW5ncy5sZWZ0ICsgcGFkZGluZ3MucmlnaHQ7XG4gICAgdmFyIHZlcnRQYWQgPSBwYWRkaW5ncy50b3AgKyBwYWRkaW5ncy5ib3R0b207XG5cbiAgICAvLyBDb21wdXRlZCBzdHlsZXMgb2Ygd2lkdGggJiBoZWlnaHQgYXJlIGJlaW5nIHVzZWQgYmVjYXVzZSB0aGV5IGFyZSB0aGVcbiAgICAvLyBvbmx5IGRpbWVuc2lvbnMgYXZhaWxhYmxlIHRvIEpTIHRoYXQgY29udGFpbiBub24tcm91bmRlZCB2YWx1ZXMuIEl0IGNvdWxkXG4gICAgLy8gYmUgcG9zc2libGUgdG8gdXRpbGl6ZSB0aGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlmIG9ubHkgaXQncyBkYXRhIHdhc24ndFxuICAgIC8vIGFmZmVjdGVkIGJ5IENTUyB0cmFuc2Zvcm1hdGlvbnMgbGV0IGFsb25lIHBhZGRpbmdzLCBib3JkZXJzIGFuZCBzY3JvbGwgYmFycy5cbiAgICB2YXIgd2lkdGggPSB0b0Zsb2F0KHN0eWxlcy53aWR0aCksXG4gICAgICAgIGhlaWdodCA9IHRvRmxvYXQoc3R5bGVzLmhlaWdodCk7XG5cbiAgICAvLyBXaWR0aCAmIGhlaWdodCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHdoZW4gdGhlICdib3JkZXItYm94JyBib3hcbiAgICAvLyBtb2RlbCBpcyBhcHBsaWVkIChleGNlcHQgZm9yIElFKS5cbiAgICBpZiAoc3R5bGVzLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIC8vIEZvbGxvd2luZyBjb25kaXRpb25zIGFyZSByZXF1aXJlZCB0byBoYW5kbGUgSW50ZXJuZXQgRXhwbG9yZXIgd2hpY2hcbiAgICAgICAgLy8gZG9lc24ndCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHRvIGNvbXB1dGVkIENTUyBkaW1lbnNpb25zLlxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBjYW4gc2F5IHRoYXQgaWYgQ1NTIGRpbWVuc2lvbnMgKyBwYWRkaW5ncyBhcmUgZXF1YWwgdG8gdGhlIFwiY2xpZW50XCJcbiAgICAgICAgLy8gcHJvcGVydGllcyB0aGVuIGl0J3MgZWl0aGVyIElFLCBhbmQgdGh1cyB3ZSBkb24ndCBuZWVkIHRvIHN1YnRyYWN0XG4gICAgICAgIC8vIGFueXRoaW5nLCBvciBhbiBlbGVtZW50IG1lcmVseSBkb2Vzbid0IGhhdmUgcGFkZGluZ3MvYm9yZGVycyBzdHlsZXMuXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpICE9PSBjbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgd2lkdGggLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAnbGVmdCcsICdyaWdodCcpICsgaG9yaXpQYWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5yb3VuZChoZWlnaHQgKyB2ZXJ0UGFkKSAhPT0gY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICBoZWlnaHQgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAndG9wJywgJ2JvdHRvbScpICsgdmVydFBhZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvbGxvd2luZyBzdGVwcyBjYW4ndCBiZSBhcHBsaWVkIHRvIHRoZSBkb2N1bWVudCdzIHJvb3QgZWxlbWVudCBhcyBpdHNcbiAgICAvLyBjbGllbnRbV2lkdGgvSGVpZ2h0XSBwcm9wZXJ0aWVzIHJlcHJlc2VudCB2aWV3cG9ydCBhcmVhIG9mIHRoZSB3aW5kb3cuXG4gICAgLy8gQmVzaWRlcywgaXQncyBhcyB3ZWxsIG5vdCBuZWNlc3NhcnkgYXMgdGhlIDxodG1sPiBpdHNlbGYgbmVpdGhlciBoYXNcbiAgICAvLyByZW5kZXJlZCBzY3JvbGwgYmFycyBub3IgaXQgY2FuIGJlIGNsaXBwZWQuXG4gICAgaWYgKCFpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMgKG9ubHkgaW4gRmlyZWZveCwgYWN0dWFsbHkpIENTUyB3aWR0aCAmIGhlaWdodFxuICAgICAgICAvLyBpbmNsdWRlIHNjcm9sbCBiYXJzIHNpemUgd2hpY2ggY2FuIGJlIHJlbW92ZWQgYXQgdGhpcyBzdGVwIGFzIHNjcm9sbFxuICAgICAgICAvLyBiYXJzIGFyZSB0aGUgb25seSBkaWZmZXJlbmNlIGJldHdlZW4gcm91bmRlZCBkaW1lbnNpb25zICsgcGFkZGluZ3NcbiAgICAgICAgLy8gYW5kIFwiY2xpZW50XCIgcHJvcGVydGllcywgdGhvdWdoIHRoYXQgaXMgbm90IGFsd2F5cyB0cnVlIGluIENocm9tZS5cbiAgICAgICAgdmFyIHZlcnRTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpIC0gY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBob3JpelNjcm9sbGJhciA9IE1hdGgucm91bmQoaGVpZ2h0ICsgdmVydFBhZCkgLSBjbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgLy8gQ2hyb21lIGhhcyBhIHJhdGhlciB3ZWlyZCByb3VuZGluZyBvZiBcImNsaWVudFwiIHByb3BlcnRpZXMuXG4gICAgICAgIC8vIEUuZy4gZm9yIGFuIGVsZW1lbnQgd2l0aCBjb250ZW50IHdpZHRoIG9mIDMxNC4ycHggaXQgc29tZXRpbWVzIGdpdmVzXG4gICAgICAgIC8vIHRoZSBjbGllbnQgd2lkdGggb2YgMzE1cHggYW5kIGZvciB0aGUgd2lkdGggb2YgMzE0LjdweCBpdCBtYXkgZ2l2ZVxuICAgICAgICAvLyAzMTRweC4gQW5kIGl0IGRvZXNuJ3QgaGFwcGVuIGFsbCB0aGUgdGltZS4gU28ganVzdCBpZ25vcmUgdGhpcyBkZWx0YVxuICAgICAgICAvLyBhcyBhIG5vbi1yZWxldmFudC5cbiAgICAgICAgaWYgKE1hdGguYWJzKHZlcnRTY3JvbGxiYXIpICE9PSAxKSB7XG4gICAgICAgICAgICB3aWR0aCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKGhvcml6U2Nyb2xsYmFyKSAhPT0gMSkge1xuICAgICAgICAgICAgaGVpZ2h0IC09IGhvcml6U2Nyb2xsYmFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KHBhZGRpbmdzLmxlZnQsIHBhZGRpbmdzLnRvcCwgd2lkdGgsIGhlaWdodCk7XG59XG5cbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGFuIGluc3RhbmNlIG9mIHRoZSBTVkdHcmFwaGljc0VsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG52YXIgaXNTVkdHcmFwaGljc0VsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIFNvbWUgYnJvd3NlcnMsIG5hbWVseSBJRSBhbmQgRWRnZSwgZG9uJ3QgaGF2ZSB0aGUgU1ZHR3JhcGhpY3NFbGVtZW50XG4gICAgLy8gaW50ZXJmYWNlLlxuICAgIGlmICh0eXBlb2YgU1ZHR3JhcGhpY3NFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5TVkdHcmFwaGljc0VsZW1lbnQ7IH07XG4gICAgfVxuXG4gICAgLy8gSWYgaXQncyBzbywgdGhlbiBjaGVjayB0aGF0IGVsZW1lbnQgaXMgYXQgbGVhc3QgYW4gaW5zdGFuY2Ugb2YgdGhlXG4gICAgLy8gU1ZHRWxlbWVudCBhbmQgdGhhdCBpdCBoYXMgdGhlIFwiZ2V0QkJveFwiIG1ldGhvZC5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHRWxlbWVudCAmJiB0eXBlb2YgdGFyZ2V0LmdldEJCb3ggPT09ICdmdW5jdGlvbic7IH07XG59KSgpO1xuXG4vKipcclxuICogQ2hlY2tzIHdoZXRoZXIgcHJvdmlkZWQgZWxlbWVudCBpcyBhIGRvY3VtZW50IGVsZW1lbnQgKDxodG1sPikuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5mdW5jdGlvbiBpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0ID09PSBnZXRXaW5kb3dPZih0YXJnZXQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYW4gYXBwcm9wcmlhdGUgY29udGVudCByZWN0YW5nbGUgZm9yIHByb3ZpZGVkIGh0bWwgb3Igc3ZnIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkcyB0byBiZSBjYWxjdWxhdGVkLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gZ2V0Q29udGVudFJlY3QodGFyZ2V0KSB7XG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcbiAgICB9XG5cbiAgICBpZiAoaXNTVkdHcmFwaGljc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gZ2V0U1ZHQ29udGVudFJlY3QodGFyZ2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpO1xufVxuXG4vKipcclxuICogQ3JlYXRlcyByZWN0YW5nbGUgd2l0aCBhbiBpbnRlcmZhY2Ugb2YgdGhlIERPTVJlY3RSZWFkT25seS5cclxuICogU3BlYzogaHR0cHM6Ly9kcmFmdHMuZnh0Zi5vcmcvZ2VvbWV0cnkvI2RvbXJlY3RyZWFkb25seVxyXG4gKlxyXG4gKiBAcGFyYW0ge0RPTVJlY3RJbml0fSByZWN0SW5pdCAtIE9iamVjdCB3aXRoIHJlY3RhbmdsZSdzIHgveSBjb29yZGluYXRlcyBhbmQgZGltZW5zaW9ucy5cclxuICogQHJldHVybnMge0RPTVJlY3RSZWFkT25seX1cclxuICovXG5mdW5jdGlvbiBjcmVhdGVSZWFkT25seVJlY3QocmVmKSB7XG4gICAgdmFyIHggPSByZWYueDtcbiAgICB2YXIgeSA9IHJlZi55O1xuICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgIC8vIElmIERPTVJlY3RSZWFkT25seSBpcyBhdmFpbGFibGUgdXNlIGl0IGFzIGEgcHJvdG90eXBlIGZvciB0aGUgcmVjdGFuZ2xlLlxuICAgIHZhciBDb25zdHIgPSB0eXBlb2YgRE9NUmVjdFJlYWRPbmx5ICE9PSAndW5kZWZpbmVkJyA/IERPTVJlY3RSZWFkT25seSA6IE9iamVjdDtcbiAgICB2YXIgcmVjdCA9IE9iamVjdC5jcmVhdGUoQ29uc3RyLnByb3RvdHlwZSk7XG5cbiAgICAvLyBSZWN0YW5nbGUncyBwcm9wZXJ0aWVzIGFyZSBub3Qgd3JpdGFibGUgYW5kIG5vbi1lbnVtZXJhYmxlLlxuICAgIGRlZmluZUNvbmZpZ3VyYWJsZShyZWN0LCB7XG4gICAgICAgIHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHRvcDogeSxcbiAgICAgICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICAgICAgYm90dG9tOiBoZWlnaHQgKyB5LFxuICAgICAgICBsZWZ0OiB4XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVjdDtcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgRE9NUmVjdEluaXQgb2JqZWN0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkaW1lbnNpb25zIGFuZCB0aGUgeC95IGNvb3JkaW5hdGVzLlxyXG4gKiBTcGVjOiBodHRwczovL2RyYWZ0cy5meHRmLm9yZy9nZW9tZXRyeS8jZGljdGRlZi1kb21yZWN0aW5pdFxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFggY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZIGNvb3JkaW5hdGUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFJlY3RhbmdsZSdzIHdpZHRoLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gUmVjdGFuZ2xlJ3MgaGVpZ2h0LlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVjdEluaXQoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcbn1cblxuLyoqXHJcbiAqIENsYXNzIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGF0aW9ucyBvZiB0aGUgY29udGVudCByZWN0YW5nbGUgb2ZcclxuICogcHJvdmlkZWQgRE9NIGVsZW1lbnQgYW5kIGZvciBrZWVwaW5nIHRyYWNrIG9mIGl0J3MgY2hhbmdlcy5cclxuICovXG52YXIgUmVzaXplT2JzZXJ2YXRpb24gPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICB0aGlzLmJyb2FkY2FzdFdpZHRoID0gMDtcbiAgICB0aGlzLmJyb2FkY2FzdEhlaWdodCA9IDA7XG4gICAgdGhpcy5jb250ZW50UmVjdF8gPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcblxuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xufTtcblxuLyoqXHJcbiAqIFVwZGF0ZXMgY29udGVudCByZWN0YW5nbGUgYW5kIHRlbGxzIHdoZXRoZXIgaXQncyB3aWR0aCBvciBoZWlnaHQgcHJvcGVydGllc1xyXG4gKiBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYnJvYWRjYXN0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5cblxuLyoqXHJcbiAqIFJlZmVyZW5jZSB0byB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICpcclxuICogQHByaXZhdGUge0RPTVJlY3RJbml0fVxyXG4gKi9cblxuXG4vKipcclxuICogQnJvYWRjYXN0ZWQgd2lkdGggb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xuUmVzaXplT2JzZXJ2YXRpb24ucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q29udGVudFJlY3QodGhpcy50YXJnZXQpO1xuXG4gICAgdGhpcy5jb250ZW50UmVjdF8gPSByZWN0O1xuXG4gICAgcmV0dXJuIHJlY3Qud2lkdGggIT09IHRoaXMuYnJvYWRjYXN0V2lkdGggfHwgcmVjdC5oZWlnaHQgIT09IHRoaXMuYnJvYWRjYXN0SGVpZ2h0O1xufTtcblxuLyoqXHJcbiAqIFVwZGF0ZXMgJ2Jyb2FkY2FzdFdpZHRoJyBhbmQgJ2Jyb2FkY2FzdEhlaWdodCcgcHJvcGVydGllcyB3aXRoIGEgZGF0YVxyXG4gKiBmcm9tIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnRpZXMgb2YgdGhlIGxhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH0gTGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICovXG5SZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuYnJvYWRjYXN0UmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVjdCA9IHRoaXMuY29udGVudFJlY3RfO1xuXG4gICAgdGhpcy5icm9hZGNhc3RXaWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSByZWN0LmhlaWdodDtcblxuICAgIHJldHVybiByZWN0O1xufTtcblxudmFyIFJlc2l6ZU9ic2VydmVyRW50cnkgPSBmdW5jdGlvbih0YXJnZXQsIHJlY3RJbml0KSB7XG4gICAgdmFyIGNvbnRlbnRSZWN0ID0gY3JlYXRlUmVhZE9ubHlSZWN0KHJlY3RJbml0KTtcblxuICAgIC8vIEFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgbm90IHdyaXRhYmxlXG4gICAgLy8gYW5kIGFyZSBhbHNvIG5vdCBlbnVtZXJhYmxlIGluIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24uXG4gICAgLy9cbiAgICAvLyBQcm9wZXJ0eSBhY2Nlc3NvcnMgYXJlIG5vdCBiZWluZyB1c2VkIGFzIHRoZXknZCByZXF1aXJlIHRvIGRlZmluZSBhXG4gICAgLy8gcHJpdmF0ZSBXZWFrTWFwIHN0b3JhZ2Ugd2hpY2ggbWF5IGNhdXNlIG1lbW9yeSBsZWFrcyBpbiBicm93c2VycyB0aGF0XG4gICAgLy8gZG9uJ3Qgc3VwcG9ydCB0aGlzIHR5cGUgb2YgY29sbGVjdGlvbnMuXG4gICAgZGVmaW5lQ29uZmlndXJhYmxlKHRoaXMsIHsgdGFyZ2V0OiB0YXJnZXQsIGNvbnRlbnRSZWN0OiBjb250ZW50UmVjdCB9KTtcbn07XG5cbnZhciBSZXNpemVPYnNlcnZlclNQSSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250cm9sbGVyLCBjYWxsYmFja0N0eCkge1xuICAgIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXyA9IFtdO1xuICAgIHRoaXMub2JzZXJ2YXRpb25zXyA9IG5ldyBNYXBTaGltKCk7XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbGxiYWNrXyA9IGNhbGxiYWNrO1xuICAgIHRoaXMuY29udHJvbGxlcl8gPSBjb250cm9sbGVyO1xuICAgIHRoaXMuY2FsbGJhY2tDdHhfID0gY2FsbGJhY2tDdHg7XG59O1xuXG4vKipcclxuICogU3RhcnRzIG9ic2VydmluZyBwcm92aWRlZCBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgb2JzZXJ2ZWQuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblxuXG4vKipcclxuICogUmVnaXN0cnkgb2YgdGhlIFJlc2l6ZU9ic2VydmF0aW9uIGluc3RhbmNlcy5cclxuICpcclxuICogQHByaXZhdGUge01hcDxFbGVtZW50LCBSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAqL1xuXG5cbi8qKlxyXG4gKiBQdWJsaWMgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2Ugd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrXHJcbiAqIGZ1bmN0aW9uIGFuZCB1c2VkIGFzIGEgdmFsdWUgb2YgaXQncyBcInRoaXNcIiBiaW5kaW5nLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZSB7UmVzaXplT2JzZXJ2ZXJ9XHJcbiAqL1xuXG4vKipcclxuICogQ29sbGVjdGlvbiBvZiByZXNpemUgb2JzZXJ2YXRpb25zIHRoYXQgaGF2ZSBkZXRlY3RlZCBjaGFuZ2VzIGluIGRpbWVuc2lvbnNcclxuICogb2YgZWxlbWVudHMuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtBcnJheTxSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4nKTtcbiAgICB9XG5cbiAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cbiAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuRWxlbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgXCJFbGVtZW50XCIuJyk7XG4gICAgfVxuXG4gICAgdmFyIG9ic2VydmF0aW9ucyA9IHRoaXMub2JzZXJ2YXRpb25zXztcblxuICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIG9ic2VydmVkLlxuICAgIGlmIChvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9ic2VydmF0aW9ucy5zZXQodGFyZ2V0LCBuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0KSk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXJfLmFkZE9ic2VydmVyKHRoaXMpO1xuXG4gICAgLy8gRm9yY2UgdGhlIHVwZGF0ZSBvZiBvYnNlcnZhdGlvbnMuXG4gICAgdGhpcy5jb250cm9sbGVyXy5yZWZyZXNoKCk7XG59O1xuXG4vKipcclxuICogU3RvcHMgb2JzZXJ2aW5nIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBzdG9wIG9ic2VydmluZy5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xuICAgIH1cblxuICAgIC8vIERvIG5vdGhpbmcgaWYgY3VycmVudCBlbnZpcm9ubWVudCBkb2Vzbid0IGhhdmUgdGhlIEVsZW1lbnQgaW50ZXJmYWNlLlxuICAgIGlmICh0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgIShFbGVtZW50IGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5FbGVtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSBcIkVsZW1lbnRcIi4nKTtcbiAgICB9XG5cbiAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xuXG4gICAgLy8gRG8gbm90aGluZyBpZiBlbGVtZW50IGlzIG5vdCBiZWluZyBvYnNlcnZlZC5cbiAgICBpZiAoIW9ic2VydmF0aW9ucy5oYXModGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb2JzZXJ2YXRpb25zLmRlbGV0ZSh0YXJnZXQpO1xuXG4gICAgaWYgKCFvYnNlcnZhdGlvbnMuc2l6ZSkge1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBTdG9wcyBvYnNlcnZpbmcgYWxsIGVsZW1lbnRzLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XG4gICAgdGhpcy5vYnNlcnZhdGlvbnNfLmNsZWFyKCk7XG4gICAgdGhpcy5jb250cm9sbGVyXy5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbn07XG5cbi8qKlxyXG4gKiBDb2xsZWN0cyBvYnNlcnZhdGlvbiBpbnN0YW5jZXMgdGhlIGFzc29jaWF0ZWQgZWxlbWVudCBvZiB3aGljaCBoYXMgY2hhbmdlZFxyXG4gKiBpdCdzIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZ2F0aGVyQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcblxuICAgIHRoaXMub2JzZXJ2YXRpb25zXy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xuICAgICAgICBpZiAob2JzZXJ2YXRpb24uaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgdGhpcyQxLmFjdGl2ZU9ic2VydmF0aW9uc18ucHVzaChvYnNlcnZhdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbi8qKlxyXG4gKiBJbnZva2VzIGluaXRpYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBhIGxpc3Qgb2YgUmVzaXplT2JzZXJ2ZXJFbnRyeVxyXG4gKiBpbnN0YW5jZXMgY29sbGVjdGVkIGZyb20gYWN0aXZlIHJlc2l6ZSBvYnNlcnZhdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5icm9hZGNhc3RBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiBvYnNlcnZlciBkb2Vzbid0IGhhdmUgYWN0aXZlIG9ic2VydmF0aW9ucy5cbiAgICBpZiAoIXRoaXMuaGFzQWN0aXZlKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjdHggPSB0aGlzLmNhbGxiYWNrQ3R4XztcblxuICAgIC8vIENyZWF0ZSBSZXNpemVPYnNlcnZlckVudHJ5IGluc3RhbmNlIGZvciBldmVyeSBhY3RpdmUgb2JzZXJ2YXRpb24uXG4gICAgdmFyIGVudHJpZXMgPSB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubWFwKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob2JzZXJ2YXRpb24udGFyZ2V0LCBvYnNlcnZhdGlvbi5icm9hZGNhc3RSZWN0KCkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jYWxsYmFja18uY2FsbChjdHgsIGVudHJpZXMsIGN0eCk7XG4gICAgdGhpcy5jbGVhckFjdGl2ZSgpO1xufTtcblxuLyoqXHJcbiAqIENsZWFycyB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuY2xlYXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnNwbGljZSgwKTtcbn07XG5cbi8qKlxyXG4gKiBUZWxscyB3aGV0aGVyIG9ic2VydmVyIGhhcyBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuaGFzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubGVuZ3RoID4gMDtcbn07XG5cbi8vIFJlZ2lzdHJ5IG9mIGludGVybmFsIG9ic2VydmVycy4gSWYgV2Vha01hcCBpcyBub3QgYXZhaWxhYmxlIHVzZSBjdXJyZW50IHNoaW1cbi8vIGZvciB0aGUgTWFwIGNvbGxlY3Rpb24gYXMgaXQgaGFzIGFsbCByZXF1aXJlZCBtZXRob2RzIGFuZCBiZWNhdXNlIFdlYWtNYXBcbi8vIGNhbid0IGJlIGZ1bGx5IHBvbHlmaWxsZWQgYW55d2F5LlxudmFyIG9ic2VydmVycyA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyA/IG5ldyBXZWFrTWFwKCkgOiBuZXcgTWFwU2hpbSgpO1xuXG4vKipcclxuICogUmVzaXplT2JzZXJ2ZXIgQVBJLiBFbmNhcHN1bGF0ZXMgdGhlIFJlc2l6ZU9ic2VydmVyIFNQSSBpbXBsZW1lbnRhdGlvblxyXG4gKiBleHBvc2luZyBvbmx5IHRob3NlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgdGhhdCBhcmUgZGVmaW5lZCBpbiB0aGUgc3BlYy5cclxuICovXG52YXIgUmVzaXplT2JzZXJ2ZXIgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNpemVPYnNlcnZlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uLicpO1xuICAgIH1cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xuICAgIH1cblxuICAgIHZhciBjb250cm9sbGVyID0gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCB0aGlzKTtcblxuICAgIG9ic2VydmVycy5zZXQodGhpcywgb2JzZXJ2ZXIpO1xufTtcblxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzIG9mIFJlc2l6ZU9ic2VydmVyLlxuWydvYnNlcnZlJywgJ3Vub2JzZXJ2ZScsICdkaXNjb25uZWN0J10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAocmVmID0gb2JzZXJ2ZXJzLmdldCh0aGlzKSlbbWV0aG9kXS5hcHBseShyZWYsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciByZWY7XG4gICAgfTtcbn0pO1xuXG52YXIgaW5kZXggPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIEV4cG9ydCBleGlzdGluZyBpbXBsZW1lbnRhdGlvbiBpZiBhdmFpbGFibGUuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwkMS5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbCQxLlJlc2l6ZU9ic2VydmVyO1xuICAgIH1cblxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlcjtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocm9vdCwgbikge1xuICB2YXIgbm9kZSA9IG47XG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUgPT09IHJvb3QpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gYWRkRXZlbnRMaXN0ZW5lcjtcblxudmFyIF9FdmVudE9iamVjdCA9IHJlcXVpcmUoJy4vRXZlbnRPYmplY3QnKTtcblxudmFyIF9FdmVudE9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FdmVudE9iamVjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiB3cmFwQ2FsbGJhY2soZSkge1xuICAgIHZhciBuZSA9IG5ldyBfRXZlbnRPYmplY3QyW1wiZGVmYXVsdFwiXShlKTtcbiAgICBjYWxsYmFjay5jYWxsKHRhcmdldCwgbmUpO1xuICB9XG5cbiAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCB3cmFwQ2FsbGJhY2ssIGZhbHNlKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgd3JhcENhbGxiYWNrLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICB0YXJnZXQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgd3JhcENhbGxiYWNrKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCB3cmFwQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9FdmVudEJhc2VPYmplY3QgPSByZXF1aXJlKCcuL0V2ZW50QmFzZU9iamVjdCcpO1xuXG52YXIgX0V2ZW50QmFzZU9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FdmVudEJhc2VPYmplY3QpO1xuXG52YXIgX29iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIF9vYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0QXNzaWduKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbi8qKlxuICogQGlnbm9yZVxuICogZXZlbnQgb2JqZWN0IGZvciBkb21cbiAqIEBhdXRob3IgeWltaW5naGVAZ21haWwuY29tXG4gKi9cblxudmFyIFRSVUUgPSB0cnVlO1xudmFyIEZBTFNFID0gZmFsc2U7XG52YXIgY29tbW9uUHJvcHMgPSBbJ2FsdEtleScsICdidWJibGVzJywgJ2NhbmNlbGFibGUnLCAnY3RybEtleScsICdjdXJyZW50VGFyZ2V0JywgJ2V2ZW50UGhhc2UnLCAnbWV0YUtleScsICdzaGlmdEtleScsICd0YXJnZXQnLCAndGltZVN0YW1wJywgJ3ZpZXcnLCAndHlwZSddO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZCh3KSB7XG4gIHJldHVybiB3ID09PSBudWxsIHx8IHcgPT09IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50Tm9ybWFsaXplcnMgPSBbe1xuICByZWc6IC9ea2V5LyxcbiAgcHJvcHM6IFsnY2hhcicsICdjaGFyQ29kZScsICdrZXknLCAna2V5Q29kZScsICd3aGljaCddLFxuICBmaXg6IGZ1bmN0aW9uIGZpeChldmVudCwgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoZXZlbnQud2hpY2gpKSB7XG4gICAgICBldmVudC53aGljaCA9ICFpc051bGxPclVuZGVmaW5lZChuYXRpdmVFdmVudC5jaGFyQ29kZSkgPyBuYXRpdmVFdmVudC5jaGFyQ29kZSA6IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gICAgfVxuXG4gICAgLy8gYWRkIG1ldGFLZXkgdG8gbm9uLU1hYyBicm93c2VycyAodXNlIGN0cmwgZm9yIFBDICdzIGFuZCBNZXRhIGZvciBNYWNzKVxuICAgIGlmIChldmVudC5tZXRhS2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGV2ZW50Lm1ldGFLZXkgPSBldmVudC5jdHJsS2V5O1xuICAgIH1cbiAgfVxufSwge1xuICByZWc6IC9edG91Y2gvLFxuICBwcm9wczogWyd0b3VjaGVzJywgJ2NoYW5nZWRUb3VjaGVzJywgJ3RhcmdldFRvdWNoZXMnXVxufSwge1xuICByZWc6IC9eaGFzaGNoYW5nZSQvLFxuICBwcm9wczogWyduZXdVUkwnLCAnb2xkVVJMJ11cbn0sIHtcbiAgcmVnOiAvXmdlc3R1cmVjaGFuZ2UkL2ksXG4gIHByb3BzOiBbJ3JvdGF0aW9uJywgJ3NjYWxlJ11cbn0sIHtcbiAgcmVnOiAvXihtb3VzZXdoZWVsfERPTU1vdXNlU2Nyb2xsKSQvLFxuICBwcm9wczogW10sXG4gIGZpeDogZnVuY3Rpb24gZml4KGV2ZW50LCBuYXRpdmVFdmVudCkge1xuICAgIHZhciBkZWx0YVggPSB2b2lkIDA7XG4gICAgdmFyIGRlbHRhWSA9IHZvaWQgMDtcbiAgICB2YXIgZGVsdGEgPSB2b2lkIDA7XG4gICAgdmFyIHdoZWVsRGVsdGEgPSBuYXRpdmVFdmVudC53aGVlbERlbHRhO1xuICAgIHZhciBheGlzID0gbmF0aXZlRXZlbnQuYXhpcztcbiAgICB2YXIgd2hlZWxEZWx0YVkgPSBuYXRpdmVFdmVudC53aGVlbERlbHRhWTtcbiAgICB2YXIgd2hlZWxEZWx0YVggPSBuYXRpdmVFdmVudC53aGVlbERlbHRhWDtcbiAgICB2YXIgZGV0YWlsID0gbmF0aXZlRXZlbnQuZGV0YWlsO1xuXG4gICAgLy8gaWUvd2Via2l0XG4gICAgaWYgKHdoZWVsRGVsdGEpIHtcbiAgICAgIGRlbHRhID0gd2hlZWxEZWx0YSAvIDEyMDtcbiAgICB9XG5cbiAgICAvLyBnZWNrb1xuICAgIGlmIChkZXRhaWwpIHtcbiAgICAgIC8vIHByZXNzIGNvbnRyb2wgZS5kZXRhaWwgPT0gMSBlbHNlIGUuZGV0YWlsID09IDNcbiAgICAgIGRlbHRhID0gMCAtIChkZXRhaWwgJSAzID09PSAwID8gZGV0YWlsIC8gMyA6IGRldGFpbCk7XG4gICAgfVxuXG4gICAgLy8gR2Vja29cbiAgICBpZiAoYXhpcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYXhpcyA9PT0gZXZlbnQuSE9SSVpPTlRBTF9BWElTKSB7XG4gICAgICAgIGRlbHRhWSA9IDA7XG4gICAgICAgIGRlbHRhWCA9IDAgLSBkZWx0YTtcbiAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gZXZlbnQuVkVSVElDQUxfQVhJUykge1xuICAgICAgICBkZWx0YVggPSAwO1xuICAgICAgICBkZWx0YVkgPSBkZWx0YTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZWJraXRcbiAgICBpZiAod2hlZWxEZWx0YVkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVsdGFZID0gd2hlZWxEZWx0YVkgLyAxMjA7XG4gICAgfVxuICAgIGlmICh3aGVlbERlbHRhWCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWx0YVggPSAtMSAqIHdoZWVsRGVsdGFYIC8gMTIwO1xuICAgIH1cblxuICAgIC8vIOm7mOiupCBkZWx0YVkgKGllKVxuICAgIGlmICghZGVsdGFYICYmICFkZWx0YVkpIHtcbiAgICAgIGRlbHRhWSA9IGRlbHRhO1xuICAgIH1cblxuICAgIGlmIChkZWx0YVggIT09IHVuZGVmaW5lZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBkZWx0YVggb2YgbW91c2V3aGVlbCBldmVudFxuICAgICAgICogQHByb3BlcnR5IGRlbHRhWFxuICAgICAgICogQG1lbWJlciBFdmVudC5Eb21FdmVudC5PYmplY3RcbiAgICAgICAqL1xuICAgICAgZXZlbnQuZGVsdGFYID0gZGVsdGFYO1xuICAgIH1cblxuICAgIGlmIChkZWx0YVkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBkZWx0YVkgb2YgbW91c2V3aGVlbCBldmVudFxuICAgICAgICogQHByb3BlcnR5IGRlbHRhWVxuICAgICAgICogQG1lbWJlciBFdmVudC5Eb21FdmVudC5PYmplY3RcbiAgICAgICAqL1xuICAgICAgZXZlbnQuZGVsdGFZID0gZGVsdGFZO1xuICAgIH1cblxuICAgIGlmIChkZWx0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvKipcbiAgICAgICAqIGRlbHRhIG9mIG1vdXNld2hlZWwgZXZlbnRcbiAgICAgICAqIEBwcm9wZXJ0eSBkZWx0YVxuICAgICAgICogQG1lbWJlciBFdmVudC5Eb21FdmVudC5PYmplY3RcbiAgICAgICAqL1xuICAgICAgZXZlbnQuZGVsdGEgPSBkZWx0YTtcbiAgICB9XG4gIH1cbn0sIHtcbiAgcmVnOiAvXm1vdXNlfGNvbnRleHRtZW51fGNsaWNrfG1zcG9pbnRlcnwoXkRPTU1vdXNlU2Nyb2xsJCkvaSxcbiAgcHJvcHM6IFsnYnV0dG9ucycsICdjbGllbnRYJywgJ2NsaWVudFknLCAnYnV0dG9uJywgJ29mZnNldFgnLCAncmVsYXRlZFRhcmdldCcsICd3aGljaCcsICdmcm9tRWxlbWVudCcsICd0b0VsZW1lbnQnLCAnb2Zmc2V0WScsICdwYWdlWCcsICdwYWdlWScsICdzY3JlZW5YJywgJ3NjcmVlblknXSxcbiAgZml4OiBmdW5jdGlvbiBmaXgoZXZlbnQsIG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGV2ZW50RG9jID0gdm9pZCAwO1xuICAgIHZhciBkb2MgPSB2b2lkIDA7XG4gICAgdmFyIGJvZHkgPSB2b2lkIDA7XG4gICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICB2YXIgYnV0dG9uID0gbmF0aXZlRXZlbnQuYnV0dG9uO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxuICAgIGlmICh0YXJnZXQgJiYgaXNOdWxsT3JVbmRlZmluZWQoZXZlbnQucGFnZVgpICYmICFpc051bGxPclVuZGVmaW5lZChuYXRpdmVFdmVudC5jbGllbnRYKSkge1xuICAgICAgZXZlbnREb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbiAgICAgIGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIGJvZHkgPSBldmVudERvYy5ib2R5O1xuICAgICAgZXZlbnQucGFnZVggPSBuYXRpdmVFdmVudC5jbGllbnRYICsgKGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwKSAtIChkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCk7XG4gICAgICBldmVudC5wYWdlWSA9IG5hdGl2ZUV2ZW50LmNsaWVudFkgKyAoZG9jICYmIGRvYy5zY3JvbGxUb3AgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCB8fCAwKSAtIChkb2MgJiYgZG9jLmNsaWVudFRvcCB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wIHx8IDApO1xuICAgIH1cblxuICAgIC8vIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuICAgIC8vIGRvIG5vdCB1c2UgYnV0dG9uXG4gICAgaWYgKCFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGJ1dHRvbiAmIDEpIHtcbiAgICAgICAgZXZlbnQud2hpY2ggPSAxO1xuICAgICAgfSBlbHNlIGlmIChidXR0b24gJiAyKSB7XG4gICAgICAgIGV2ZW50LndoaWNoID0gMztcbiAgICAgIH0gZWxzZSBpZiAoYnV0dG9uICYgNCkge1xuICAgICAgICBldmVudC53aGljaCA9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC53aGljaCA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkIHJlbGF0ZWRUYXJnZXQsIGlmIG5lY2Vzc2FyeVxuICAgIGlmICghZXZlbnQucmVsYXRlZFRhcmdldCAmJiBldmVudC5mcm9tRWxlbWVudCkge1xuICAgICAgZXZlbnQucmVsYXRlZFRhcmdldCA9IGV2ZW50LmZyb21FbGVtZW50ID09PSB0YXJnZXQgPyBldmVudC50b0VsZW1lbnQgOiBldmVudC5mcm9tRWxlbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbn1dO1xuXG5mdW5jdGlvbiByZXRUcnVlKCkge1xuICByZXR1cm4gVFJVRTtcbn1cblxuZnVuY3Rpb24gcmV0RmFsc2UoKSB7XG4gIHJldHVybiBGQUxTRTtcbn1cblxuZnVuY3Rpb24gRG9tRXZlbnRPYmplY3QobmF0aXZlRXZlbnQpIHtcbiAgdmFyIHR5cGUgPSBuYXRpdmVFdmVudC50eXBlO1xuXG4gIHZhciBpc05hdGl2ZSA9IHR5cGVvZiBuYXRpdmVFdmVudC5zdG9wUHJvcGFnYXRpb24gPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIG5hdGl2ZUV2ZW50LmNhbmNlbEJ1YmJsZSA9PT0gJ2Jvb2xlYW4nO1xuXG4gIF9FdmVudEJhc2VPYmplY3QyW1wiZGVmYXVsdFwiXS5jYWxsKHRoaXMpO1xuXG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICAvLyBpbiBjYXNlIGRvbSBldmVudCBoYXMgYmVlbiBtYXJrIGFzIGRlZmF1bHQgcHJldmVudGVkIGJ5IGxvd2VyIGRvbSBub2RlXG4gIHZhciBpc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXRGYWxzZTtcbiAgaWYgKCdkZWZhdWx0UHJldmVudGVkJyBpbiBuYXRpdmVFdmVudCkge1xuICAgIGlzRGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPyByZXRUcnVlIDogcmV0RmFsc2U7XG4gIH0gZWxzZSBpZiAoJ2dldFByZXZlbnREZWZhdWx0JyBpbiBuYXRpdmVFdmVudCkge1xuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5MTE1MVxuICAgIGlzRGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LmdldFByZXZlbnREZWZhdWx0KCkgPyByZXRUcnVlIDogcmV0RmFsc2U7XG4gIH0gZWxzZSBpZiAoJ3JldHVyblZhbHVlJyBpbiBuYXRpdmVFdmVudCkge1xuICAgIGlzRGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBGQUxTRSA/IHJldFRydWUgOiByZXRGYWxzZTtcbiAgfVxuXG4gIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gaXNEZWZhdWx0UHJldmVudGVkO1xuXG4gIHZhciBmaXhGbnMgPSBbXTtcbiAgdmFyIGZpeEZuID0gdm9pZCAwO1xuICB2YXIgbCA9IHZvaWQgMDtcbiAgdmFyIHByb3AgPSB2b2lkIDA7XG4gIHZhciBwcm9wcyA9IGNvbW1vblByb3BzLmNvbmNhdCgpO1xuXG4gIGV2ZW50Tm9ybWFsaXplcnMuZm9yRWFjaChmdW5jdGlvbiAobm9ybWFsaXplcikge1xuICAgIGlmICh0eXBlLm1hdGNoKG5vcm1hbGl6ZXIucmVnKSkge1xuICAgICAgcHJvcHMgPSBwcm9wcy5jb25jYXQobm9ybWFsaXplci5wcm9wcyk7XG4gICAgICBpZiAobm9ybWFsaXplci5maXgpIHtcbiAgICAgICAgZml4Rm5zLnB1c2gobm9ybWFsaXplci5maXgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgbCA9IHByb3BzLmxlbmd0aDtcblxuICAvLyBjbG9uZSBwcm9wZXJ0aWVzIG9mIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgd2hpbGUgKGwpIHtcbiAgICBwcm9wID0gcHJvcHNbLS1sXTtcbiAgICB0aGlzW3Byb3BdID0gbmF0aXZlRXZlbnRbcHJvcF07XG4gIH1cblxuICAvLyBmaXggdGFyZ2V0IHByb3BlcnR5LCBpZiBuZWNlc3NhcnlcbiAgaWYgKCF0aGlzLnRhcmdldCAmJiBpc05hdGl2ZSkge1xuICAgIHRoaXMudGFyZ2V0ID0gbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCBkb2N1bWVudDsgLy8gc3JjRWxlbWVudCBtaWdodCBub3QgYmUgZGVmaW5lZCBlaXRoZXJcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIHRhcmdldCBpcyBhIHRleHQgbm9kZSAoc2FmYXJpKVxuICBpZiAodGhpcy50YXJnZXQgJiYgdGhpcy50YXJnZXQubm9kZVR5cGUgPT09IDMpIHtcbiAgICB0aGlzLnRhcmdldCA9IHRoaXMudGFyZ2V0LnBhcmVudE5vZGU7XG4gIH1cblxuICBsID0gZml4Rm5zLmxlbmd0aDtcblxuICB3aGlsZSAobCkge1xuICAgIGZpeEZuID0gZml4Rm5zWy0tbF07XG4gICAgZml4Rm4odGhpcywgbmF0aXZlRXZlbnQpO1xuICB9XG5cbiAgdGhpcy50aW1lU3RhbXAgPSBuYXRpdmVFdmVudC50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcbn1cblxudmFyIEV2ZW50QmFzZU9iamVjdFByb3RvID0gX0V2ZW50QmFzZU9iamVjdDJbXCJkZWZhdWx0XCJdLnByb3RvdHlwZTtcblxuKDAsIF9vYmplY3RBc3NpZ24yW1wiZGVmYXVsdFwiXSkoRG9tRXZlbnRPYmplY3QucHJvdG90eXBlLCBFdmVudEJhc2VPYmplY3RQcm90bywge1xuICBjb25zdHJ1Y3RvcjogRG9tRXZlbnRPYmplY3QsXG5cbiAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KCkge1xuICAgIHZhciBlID0gdGhpcy5uYXRpdmVFdmVudDtcblxuICAgIC8vIGlmIHByZXZlbnREZWZhdWx0IGV4aXN0cyBydW4gaXQgb24gdGhlIG9yaWdpbmFsIGV2ZW50XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gb3RoZXJ3aXNlIHNldCB0aGUgcmV0dXJuVmFsdWUgcHJvcGVydHkgb2YgdGhlIG9yaWdpbmFsIGV2ZW50IHRvIEZBTFNFIChJRSlcbiAgICAgIGUucmV0dXJuVmFsdWUgPSBGQUxTRTtcbiAgICB9XG5cbiAgICBFdmVudEJhc2VPYmplY3RQcm90by5wcmV2ZW50RGVmYXVsdC5jYWxsKHRoaXMpO1xuICB9LFxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgICB2YXIgZSA9IHRoaXMubmF0aXZlRXZlbnQ7XG5cbiAgICAvLyBpZiBzdG9wUHJvcGFnYXRpb24gZXhpc3RzIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnRcbiAgICBpZiAoZS5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBzZXQgdGhlIGNhbmNlbEJ1YmJsZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gVFJVRSAoSUUpXG4gICAgICBlLmNhbmNlbEJ1YmJsZSA9IFRSVUU7XG4gICAgfVxuXG4gICAgRXZlbnRCYXNlT2JqZWN0UHJvdG8uc3RvcFByb3BhZ2F0aW9uLmNhbGwodGhpcyk7XG4gIH1cbn0pO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IERvbUV2ZW50T2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcbiAqIEBpZ25vcmVcbiAqIGJhc2UgZXZlbnQgb2JqZWN0IGZvciBjdXN0b20gYW5kIGRvbSBldmVudC5cbiAqIEBhdXRob3IgeWltaW5naGVAZ21haWwuY29tXG4gKi9cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50QmFzZU9iamVjdCgpIHtcbiAgdGhpcy50aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuICB0aGlzLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5FdmVudEJhc2VPYmplY3QucHJvdG90eXBlID0ge1xuICBpc0V2ZW50T2JqZWN0OiAxLFxuXG4gIGNvbnN0cnVjdG9yOiBFdmVudEJhc2VPYmplY3QsXG5cbiAgaXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblxuICBpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cbiAgaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG4gIH0sXG4gIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuICB9LFxuICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICB0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcbiAgICAvLyBmaXhlZCAxLjJcbiAgICAvLyBjYWxsIHN0b3BQcm9wYWdhdGlvbiBpbXBsaWNpdGx5XG4gICAgdGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSxcbiAgaGFsdDogZnVuY3Rpb24gaGFsdChpbW1lZGlhdGUpIHtcbiAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICB0aGlzLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICB0aGlzLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn07XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gRXZlbnRCYXNlT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnZhciBDb250YWluZXJSZW5kZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ29udGFpbmVyUmVuZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb250YWluZXJSZW5kZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRhaW5lclJlbmRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gQ29udGFpbmVyUmVuZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29udGFpbmVyUmVuZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMucmVtb3ZlQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmNvbnRhaW5lcikge1xuICAgICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKF90aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIF90aGlzLmNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF90aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIF90aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgICB9XG4gICAgfSwgX3RoaXMucmVuZGVyQ29tcG9uZW50ID0gZnVuY3Rpb24gKHByb3BzLCByZWFkeSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdmlzaWJsZSA9IF90aGlzJHByb3BzLnZpc2libGUsXG4gICAgICAgICAgZ2V0Q29tcG9uZW50ID0gX3RoaXMkcHJvcHMuZ2V0Q29tcG9uZW50LFxuICAgICAgICAgIGZvcmNlUmVuZGVyID0gX3RoaXMkcHJvcHMuZm9yY2VSZW5kZXIsXG4gICAgICAgICAgZ2V0Q29udGFpbmVyID0gX3RoaXMkcHJvcHMuZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIHBhcmVudCA9IF90aGlzJHByb3BzLnBhcmVudDtcblxuICAgICAgaWYgKHZpc2libGUgfHwgcGFyZW50Ll9jb21wb25lbnQgfHwgZm9yY2VSZW5kZXIpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICBfdGhpcy5jb250YWluZXIgPSBnZXRDb250YWluZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBSZWFjdERPTS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnQsIGdldENvbXBvbmVudChwcm9wcyksIF90aGlzLmNvbnRhaW5lciwgZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgICAgaWYgKHJlYWR5KSB7XG4gICAgICAgICAgICByZWFkeS5jYWxsKHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29udGFpbmVyUmVuZGVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvTW91bnQpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJDb21wb25lbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvTW91bnQpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJDb21wb25lbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b0Rlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDb250YWluZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih7XG4gICAgICAgIHJlbmRlckNvbXBvbmVudDogdGhpcy5yZW5kZXJDb21wb25lbnQsXG4gICAgICAgIHJlbW92ZUNvbnRhaW5lcjogdGhpcy5yZW1vdmVDb250YWluZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb250YWluZXJSZW5kZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNvbnRhaW5lclJlbmRlci5wcm9wVHlwZXMgPSB7XG4gIGF1dG9Nb3VudDogUHJvcFR5cGVzLmJvb2wsXG4gIGF1dG9EZXN0cm95OiBQcm9wVHlwZXMuYm9vbCxcbiAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGZvcmNlUmVuZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgcGFyZW50OiBQcm9wVHlwZXMuYW55LFxuICBnZXRDb21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldENvbnRhaW5lcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn07XG5Db250YWluZXJSZW5kZXIuZGVmYXVsdFByb3BzID0ge1xuICBhdXRvTW91bnQ6IHRydWUsXG4gIGF1dG9EZXN0cm95OiB0cnVlLFxuICBmb3JjZVJlbmRlcjogZmFsc2Vcbn07XG5leHBvcnQgZGVmYXVsdCBDb250YWluZXJSZW5kZXI7IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnZhciBQb3J0YWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWwoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcnRhbCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBvcnRhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBvcnRhbCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvcnRhbCwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5jcmVhdGVDb250YWluZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgZGlkVXBkYXRlID0gdGhpcy5wcm9wcy5kaWRVcGRhdGU7XG5cbiAgICAgIGlmIChkaWRVcGRhdGUpIHtcbiAgICAgICAgZGlkVXBkYXRlKHByZXZQcm9wcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ29udGFpbmVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlQ29udGFpbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKCkge1xuICAgICAgdGhpcy5fY29udGFpbmVyID0gdGhpcy5wcm9wcy5nZXRDb250YWluZXIoKTtcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVDb250YWluZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVDb250YWluZXIoKSB7XG4gICAgICBpZiAodGhpcy5fY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKHRoaXMucHJvcHMuY2hpbGRyZW4sIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICBnZXRDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBkaWRVcGRhdGU6IFByb3BUeXBlcy5mdW5jXG59O1xuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsIi8vIG11dGF0aW9ub2JzZXJ2ZXItc2hpbSB2MC4zLjIgKGdpdGh1Yi5jb20vbWVnYXdhYy9NdXRhdGlvbk9ic2VydmVyLmpzKVxuLy8gQXV0aG9yczogR3JhZW1lIFllYXRlcyAoZ2l0aHViLmNvbS9tZWdhd2FjKSBcbndpbmRvdy5NdXRhdGlvbk9ic2VydmVyPXdpbmRvdy5NdXRhdGlvbk9ic2VydmVyfHxmdW5jdGlvbih3KXtmdW5jdGlvbiB2KGEpe3RoaXMuaT1bXTt0aGlzLm09YX1mdW5jdGlvbiBJKGEpeyhmdW5jdGlvbiBjKCl7dmFyIGQ9YS50YWtlUmVjb3JkcygpO2QubGVuZ3RoJiZhLm0oZCxhKTthLmg9c2V0VGltZW91dChjLHYuX3BlcmlvZCl9KSgpfWZ1bmN0aW9uIHAoYSl7dmFyIGI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxhZGRlZE5vZGVzOltdLHJlbW92ZWROb2RlczpbXSxwcmV2aW91c1NpYmxpbmc6bnVsbCxuZXh0U2libGluZzpudWxsLGF0dHJpYnV0ZU5hbWU6bnVsbCxhdHRyaWJ1dGVOYW1lc3BhY2U6bnVsbCxvbGRWYWx1ZTpudWxsfSxjO2ZvcihjIGluIGEpYltjXSE9PXcmJmFbY10hPT13JiYoYltjXT1hW2NdKTtyZXR1cm4gYn1mdW5jdGlvbiBKKGEsYil7dmFyIGM9QyhhLGIpO3JldHVybiBmdW5jdGlvbihkKXt2YXIgZj1kLmxlbmd0aCxuO2IuYSYmMz09PWEubm9kZVR5cGUmJlxuYS5ub2RlVmFsdWUhPT1jLmEmJmQucHVzaChuZXcgcCh7dHlwZTpcImNoYXJhY3RlckRhdGFcIix0YXJnZXQ6YSxvbGRWYWx1ZTpjLmF9KSk7Yi5iJiZjLmImJkEoZCxhLGMuYixiLmYpO2lmKGIuY3x8Yi5nKW49SyhkLGEsYyxiKTtpZihufHxkLmxlbmd0aCE9PWYpYz1DKGEsYil9fWZ1bmN0aW9uIEwoYSxiKXtyZXR1cm4gYi52YWx1ZX1mdW5jdGlvbiBNKGEsYil7cmV0dXJuXCJzdHlsZVwiIT09Yi5uYW1lP2IudmFsdWU6YS5zdHlsZS5jc3NUZXh0fWZ1bmN0aW9uIEEoYSxiLGMsZCl7Zm9yKHZhciBmPXt9LG49Yi5hdHRyaWJ1dGVzLGssZyx4PW4ubGVuZ3RoO3gtLTspaz1uW3hdLGc9ay5uYW1lLGQmJmRbZ109PT13fHwoRChiLGspIT09Y1tnXSYmYS5wdXNoKHAoe3R5cGU6XCJhdHRyaWJ1dGVzXCIsdGFyZ2V0OmIsYXR0cmlidXRlTmFtZTpnLG9sZFZhbHVlOmNbZ10sYXR0cmlidXRlTmFtZXNwYWNlOmsubmFtZXNwYWNlVVJJfSkpLGZbZ109ITApO2ZvcihnIGluIGMpZltnXXx8YS5wdXNoKHAoe3RhcmdldDpiLFxudHlwZTpcImF0dHJpYnV0ZXNcIixhdHRyaWJ1dGVOYW1lOmcsb2xkVmFsdWU6Y1tnXX0pKX1mdW5jdGlvbiBLKGEsYixjLGQpe2Z1bmN0aW9uIGYoYixjLGYsayx5KXt2YXIgZz1iLmxlbmd0aC0xO3k9LX4oKGcteSkvMik7Zm9yKHZhciBoLGwsZTtlPWIucG9wKCk7KWg9ZltlLmpdLGw9a1tlLmxdLGQuYyYmeSYmTWF0aC5hYnMoZS5qLWUubCk+PWcmJihhLnB1c2gocCh7dHlwZTpcImNoaWxkTGlzdFwiLHRhcmdldDpjLGFkZGVkTm9kZXM6W2hdLHJlbW92ZWROb2RlczpbaF0sbmV4dFNpYmxpbmc6aC5uZXh0U2libGluZyxwcmV2aW91c1NpYmxpbmc6aC5wcmV2aW91c1NpYmxpbmd9KSkseS0tKSxkLmImJmwuYiYmQShhLGgsbC5iLGQuZiksZC5hJiYzPT09aC5ub2RlVHlwZSYmaC5ub2RlVmFsdWUhPT1sLmEmJmEucHVzaChwKHt0eXBlOlwiY2hhcmFjdGVyRGF0YVwiLHRhcmdldDpoLG9sZFZhbHVlOmwuYX0pKSxkLmcmJm4oaCxsKX1mdW5jdGlvbiBuKGIsYyl7Zm9yKHZhciBnPWIuY2hpbGROb2RlcyxcbnE9Yy5jLHg9Zy5sZW5ndGgsdj1xP3EubGVuZ3RoOjAsaCxsLGUsbSx0LHo9MCx1PTAscj0wO3U8eHx8cjx2OyltPWdbdV0sdD0oZT1xW3JdKSYmZS5ub2RlLG09PT10PyhkLmImJmUuYiYmQShhLG0sZS5iLGQuZiksZC5hJiZlLmEhPT13JiZtLm5vZGVWYWx1ZSE9PWUuYSYmYS5wdXNoKHAoe3R5cGU6XCJjaGFyYWN0ZXJEYXRhXCIsdGFyZ2V0Om0sb2xkVmFsdWU6ZS5hfSkpLGwmJmYobCxiLGcscSx6KSxkLmcmJihtLmNoaWxkTm9kZXMubGVuZ3RofHxlLmMmJmUuYy5sZW5ndGgpJiZuKG0sZSksdSsrLHIrKyk6KGs9ITAsaHx8KGg9e30sbD1bXSksbSYmKGhbZT1FKG0pXXx8KGhbZV09ITAsLTE9PT0oZT1GKHEsbSxyLFwibm9kZVwiKSk/ZC5jJiYoYS5wdXNoKHAoe3R5cGU6XCJjaGlsZExpc3RcIix0YXJnZXQ6YixhZGRlZE5vZGVzOlttXSxuZXh0U2libGluZzptLm5leHRTaWJsaW5nLHByZXZpb3VzU2libGluZzptLnByZXZpb3VzU2libGluZ30pKSx6KyspOmwucHVzaCh7ajp1LGw6ZX0pKSxcbnUrKyksdCYmdCE9PWdbdV0mJihoW2U9RSh0KV18fChoW2VdPSEwLC0xPT09KGU9RihnLHQsdSkpP2QuYyYmKGEucHVzaChwKHt0eXBlOlwiY2hpbGRMaXN0XCIsdGFyZ2V0OmMubm9kZSxyZW1vdmVkTm9kZXM6W3RdLG5leHRTaWJsaW5nOnFbcisxXSxwcmV2aW91c1NpYmxpbmc6cVtyLTFdfSkpLHotLSk6bC5wdXNoKHtqOmUsbDpyfSkpLHIrKykpO2wmJmYobCxiLGcscSx6KX12YXIgaztuKGIsYyk7cmV0dXJuIGt9ZnVuY3Rpb24gQyhhLGIpe3ZhciBjPSEwO3JldHVybiBmdW5jdGlvbiBmKGEpe3ZhciBrPXtub2RlOmF9OyFiLmF8fDMhPT1hLm5vZGVUeXBlJiY4IT09YS5ub2RlVHlwZT8oYi5iJiZjJiYxPT09YS5ub2RlVHlwZSYmKGsuYj1HKGEuYXR0cmlidXRlcyxmdW5jdGlvbihjLGYpe2lmKCFiLmZ8fGIuZltmLm5hbWVdKWNbZi5uYW1lXT1EKGEsZik7cmV0dXJuIGN9KSksYyYmKGIuY3x8Yi5hfHxiLmImJmIuZykmJihrLmM9TihhLmNoaWxkTm9kZXMsZikpLGM9Yi5nKTprLmE9XG5hLm5vZGVWYWx1ZTtyZXR1cm4ga30oYSl9ZnVuY3Rpb24gRShhKXt0cnl7cmV0dXJuIGEuaWR8fChhLm1vX2lkPWEubW9faWR8fEgrKyl9Y2F0Y2goYil7dHJ5e3JldHVybiBhLm5vZGVWYWx1ZX1jYXRjaChjKXtyZXR1cm4gSCsrfX19ZnVuY3Rpb24gTihhLGIpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhLmxlbmd0aDtkKyspY1tkXT1iKGFbZF0sZCxhKTtyZXR1cm4gY31mdW5jdGlvbiBHKGEsYil7Zm9yKHZhciBjPXt9LGQ9MDtkPGEubGVuZ3RoO2QrKyljPWIoYyxhW2RdLGQsYSk7cmV0dXJuIGN9ZnVuY3Rpb24gRihhLGIsYyxkKXtmb3IoO2M8YS5sZW5ndGg7YysrKWlmKChkP2FbY11bZF06YVtjXSk9PT1iKXJldHVybiBjO3JldHVybi0xfXYuX3BlcmlvZD0zMDt2LnByb3RvdHlwZT17b2JzZXJ2ZTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz17YjohIShiLmF0dHJpYnV0ZXN8fGIuYXR0cmlidXRlRmlsdGVyfHxiLmF0dHJpYnV0ZU9sZFZhbHVlKSxjOiEhYi5jaGlsZExpc3QsZzohIWIuc3VidHJlZSxcbmE6ISghYi5jaGFyYWN0ZXJEYXRhJiYhYi5jaGFyYWN0ZXJEYXRhT2xkVmFsdWUpfSxkPXRoaXMuaSxmPTA7ZjxkLmxlbmd0aDtmKyspZFtmXS5zPT09YSYmZC5zcGxpY2UoZiwxKTtiLmF0dHJpYnV0ZUZpbHRlciYmKGMuZj1HKGIuYXR0cmlidXRlRmlsdGVyLGZ1bmN0aW9uKGEsYil7YVtiXT0hMDtyZXR1cm4gYX0pKTtkLnB1c2goe3M6YSxvOkooYSxjKX0pO3RoaXMuaHx8SSh0aGlzKX0sdGFrZVJlY29yZHM6ZnVuY3Rpb24oKXtmb3IodmFyIGE9W10sYj10aGlzLmksYz0wO2M8Yi5sZW5ndGg7YysrKWJbY10ubyhhKTtyZXR1cm4gYX0sZGlzY29ubmVjdDpmdW5jdGlvbigpe3RoaXMuaT1bXTtjbGVhclRpbWVvdXQodGhpcy5oKTt0aGlzLmg9bnVsbH19O3ZhciBCPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO0Iuc3R5bGUudG9wPTA7dmFyIEQ9KEI9XCJudWxsXCIhPUIuYXR0cmlidXRlcy5zdHlsZS52YWx1ZSk/TDpNLEg9MTtyZXR1cm4gdn0odm9pZCAwKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11dGF0aW9ub2JzZXJ2ZXIubWFwXG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIHRvZGF5OiAnVG9kYXknLFxuICBub3c6ICdOb3cnLFxuICBiYWNrVG9Ub2RheTogJ0JhY2sgdG8gdG9kYXknLFxuICBvazogJ09rJyxcbiAgY2xlYXI6ICdDbGVhcicsXG4gIG1vbnRoOiAnTW9udGgnLFxuICB5ZWFyOiAnWWVhcicsXG4gIHRpbWVTZWxlY3Q6ICdzZWxlY3QgdGltZScsXG4gIGRhdGVTZWxlY3Q6ICdzZWxlY3QgZGF0ZScsXG4gIHdlZWtTZWxlY3Q6ICdDaG9vc2UgYSB3ZWVrJyxcbiAgbW9udGhTZWxlY3Q6ICdDaG9vc2UgYSBtb250aCcsXG4gIHllYXJTZWxlY3Q6ICdDaG9vc2UgYSB5ZWFyJyxcbiAgZGVjYWRlU2VsZWN0OiAnQ2hvb3NlIGEgZGVjYWRlJyxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBkYXRlRm9ybWF0OiAnTS9EL1lZWVknLFxuICBkYXlGb3JtYXQ6ICdEJyxcbiAgZGF0ZVRpbWVGb3JtYXQ6ICdNL0QvWVlZWSBISDptbTpzcycsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZSxcbiAgcHJldmlvdXNNb250aDogJ1ByZXZpb3VzIG1vbnRoIChQYWdlVXApJyxcbiAgbmV4dE1vbnRoOiAnTmV4dCBtb250aCAoUGFnZURvd24pJyxcbiAgcHJldmlvdXNZZWFyOiAnTGFzdCB5ZWFyIChDb250cm9sICsgbGVmdCknLFxuICBuZXh0WWVhcjogJ05leHQgeWVhciAoQ29udHJvbCArIHJpZ2h0KScsXG4gIHByZXZpb3VzRGVjYWRlOiAnTGFzdCBkZWNhZGUnLFxuICBuZXh0RGVjYWRlOiAnTmV4dCBkZWNhZGUnLFxuICBwcmV2aW91c0NlbnR1cnk6ICdMYXN0IGNlbnR1cnknLFxuICBuZXh0Q2VudHVyeTogJ05leHQgY2VudHVyeSdcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2FybihzKSB7XG4gIGNvbnNvbGUud2FybignW3JlYWN0LWdhXScsIHMpO1xufSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuIGZyb20gJy4uL3V0aWxzL2NvbnNvbGUvd2Fybic7XG52YXIgTkVXVEFCID0gJ19ibGFuayc7XG52YXIgTUlERExFQ0xJQ0sgPSAxO1xuXG52YXIgT3V0Ym91bmRMaW5rID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhPdXRib3VuZExpbmssIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE91dGJvdW5kTGluaygpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdXRib3VuZExpbmspO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoT3V0Ym91bmRMaW5rKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB0YXJnZXQgPSBfdGhpcyRwcm9wcy50YXJnZXQsXG4gICAgICAgICAgZXZlbnRMYWJlbCA9IF90aGlzJHByb3BzLmV2ZW50TGFiZWwsXG4gICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50byxcbiAgICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljayxcbiAgICAgICAgICB0cmFja2VyTmFtZXMgPSBfdGhpcyRwcm9wcy50cmFja2VyTmFtZXM7XG4gICAgICB2YXIgZXZlbnRNZXRhID0ge1xuICAgICAgICBsYWJlbDogZXZlbnRMYWJlbFxuICAgICAgfTtcbiAgICAgIHZhciBzYW1lVGFyZ2V0ID0gdGFyZ2V0ICE9PSBORVdUQUI7XG4gICAgICB2YXIgbm9ybWFsQ2xpY2sgPSAhKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5idXR0b24gPT09IE1JRERMRUNMSUNLKTtcblxuICAgICAgaWYgKHNhbWVUYXJnZXQgJiYgbm9ybWFsQ2xpY2spIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgT3V0Ym91bmRMaW5rLnRyYWNrTGluayhldmVudE1ldGEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRvO1xuICAgICAgICB9LCB0cmFja2VyTmFtZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT3V0Ym91bmRMaW5rLnRyYWNrTGluayhldmVudE1ldGEsIGZ1bmN0aW9uICgpIHt9LCB0cmFja2VyTmFtZXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhPdXRib3VuZExpbmssIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBocmVmID0gX3RoaXMkcHJvcHMyLnRvLFxuICAgICAgICAgIG9sZFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzMiwgW1widG9cIl0pO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfb2JqZWN0U3ByZWFkKHt9LCBvbGRQcm9wcywge1xuICAgICAgICBocmVmOiBocmVmLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMudGFyZ2V0ID09PSBORVdUQUIpIHtcbiAgICAgICAgcHJvcHMucmVsID0gJ25vb3BlbmVyIG5vcmVmZXJyZXInO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgcHJvcHMuZXZlbnRMYWJlbDtcbiAgICAgIGRlbGV0ZSBwcm9wcy50cmFja2VyTmFtZXM7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnYScsIHByb3BzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT3V0Ym91bmRMaW5rO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoT3V0Ym91bmRMaW5rLCBcInRyYWNrTGlua1wiLCBmdW5jdGlvbiAoKSB7XG4gIHdhcm4oJ2dhIHRyYWNraW5nIG5vdCBlbmFibGVkJyk7XG59KTtcblxuX2RlZmluZVByb3BlcnR5KE91dGJvdW5kTGluaywgXCJwcm9wVHlwZXNcIiwge1xuICBldmVudExhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICB0cmFja2VyTmFtZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXG59KTtcblxuX2RlZmluZVByb3BlcnR5KE91dGJvdW5kTGluaywgXCJkZWZhdWx0UHJvcHNcIiwge1xuICB0YXJnZXQ6IG51bGwsXG4gIHRvOiBudWxsLFxuICBvbkNsaWNrOiBudWxsLFxuICB0cmFja2VyTmFtZXM6IG51bGxcbn0pO1xuXG5leHBvcnQgeyBPdXRib3VuZExpbmsgYXMgZGVmYXVsdCB9OyIsIi8vIEdBIHN0cmluZ3MgbmVlZCB0byBoYXZlIGxlYWRpbmcvdHJhaWxpbmcgd2hpdGVzcGFjZSB0cmltbWVkLCBhbmQgbm90IGFsbFxuLy8gYnJvd3NlcnMgaGF2ZSBTdHJpbmcucHJvdG90b3lwZS50cmltKCkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmltKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufSIsIi8qKlxuICogVG8gVGl0bGUgQ2FzZSAyLjEgLSBodHRwOi8vaW5kaXZpZGVkLmNvbS9jb2RlL3RvLXRpdGxlLWNhc2UvXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDEzIERhdmlkIEdvdWNoLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ291Y2gvdG8tdGl0bGUtY2FzZVxuICovXG5pbXBvcnQgdHJpbSBmcm9tICcuL3RyaW0nO1xudmFyIHNtYWxsV29yZHMgPSAvXihhfGFufGFuZHxhc3xhdHxidXR8Ynl8ZW58Zm9yfGlmfGlufG5vcnxvZnxvbnxvcnxwZXJ8dGhlfHRvfHZzP1xcLj98dmlhKSQvaTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvVGl0bGVDYXNlKHN0cmluZykge1xuICByZXR1cm4gdHJpbShzdHJpbmcpLnJlcGxhY2UoL1tBLVphLXowLTlcXHUwMEMwLVxcdTAwRkZdK1teXFxzLV0qL2csIGZ1bmN0aW9uIChtYXRjaCwgaW5kZXgsIHRpdGxlKSB7XG4gICAgaWYgKGluZGV4ID4gMCAmJiBpbmRleCArIG1hdGNoLmxlbmd0aCAhPT0gdGl0bGUubGVuZ3RoICYmIG1hdGNoLnNlYXJjaChzbWFsbFdvcmRzKSA+IC0xICYmIHRpdGxlLmNoYXJBdChpbmRleCAtIDIpICE9PSAnOicgJiYgKHRpdGxlLmNoYXJBdChpbmRleCArIG1hdGNoLmxlbmd0aCkgIT09ICctJyB8fCB0aXRsZS5jaGFyQXQoaW5kZXggLSAxKSA9PT0gJy0nKSAmJiB0aXRsZS5jaGFyQXQoaW5kZXggLSAxKS5zZWFyY2goL1teXFxzLV0vKSA8IDApIHtcbiAgICAgIHJldHVybiBtYXRjaC50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmIChtYXRjaC5zdWJzdHIoMSkuc2VhcmNoKC9bQS1aXXxcXC4uLykgPiAtMSkge1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG1hdGNoLnN1YnN0cigxKTtcbiAgfSk7XG59IiwiaW1wb3J0IG1pZ2h0QmVFbWFpbCBmcm9tICcuL21pZ2h0QmVFbWFpbCc7XG5pbXBvcnQgdG9UaXRsZUNhc2UgZnJvbSAnLi90b1RpdGxlQ2FzZSc7XG5pbXBvcnQgd2FybiBmcm9tICcuL2NvbnNvbGUvd2Fybic7XG52YXIgcmVkYWN0ZWQgPSAnUkVEQUNURUQgKFBvdGVudGlhbCBFbWFpbCBBZGRyZXNzKSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQocywgdGl0bGVDYXNlKSB7XG4gIGlmIChtaWdodEJlRW1haWwocykpIHtcbiAgICB3YXJuKCdUaGlzIGFyZyBsb29rcyBsaWtlIGFuIGVtYWlsIGFkZHJlc3MsIHJlZGFjdGluZy4nKTtcbiAgICByZXR1cm4gcmVkYWN0ZWQ7XG4gIH1cblxuICBpZiAodGl0bGVDYXNlKSB7XG4gICAgcmV0dXJuIHRvVGl0bGVDYXNlKHMpO1xuICB9XG5cbiAgcmV0dXJuIHM7XG59IiwiLy8gU2VlIGlmIHMgY291bGQgYmUgYW4gZW1haWwgYWRkcmVzcy4gV2UgZG9uJ3Qgd2FudCB0byBzZW5kIHBlcnNvbmFsIGRhdGEgbGlrZSBlbWFpbC5cbi8vIGh0dHBzOi8vc3VwcG9ydC5nb29nbGUuY29tL2FuYWx5dGljcy9hbnN3ZXIvMjc5NTk4Mz9obD1lblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWlnaHRCZUVtYWlsKHMpIHtcbiAgLy8gVGhlcmUncyBubyBwb2ludCB0cnlpbmcgdG8gdmFsaWRhdGUgcmZjODIyIGZ1bGx5LCBqdXN0IGxvb2sgZm9yIC4uLkAuLi5cbiAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJyAmJiBzLmluZGV4T2YoJ0AnKSAhPT0gLTE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIGdhQWRkcmVzcyA9ICdodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanMnO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2FBZGRyZXNzKSB7XG4gICAgZ2FBZGRyZXNzID0gb3B0aW9ucy5nYUFkZHJlc3M7XG4gIH0gZWxzZSBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnKSB7XG4gICAgZ2FBZGRyZXNzID0gJ2h0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljc19kZWJ1Zy5qcyc7XG4gIH0gLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2FuYWx5dGljc2pzL1xuXG4gIC8qIGVzbGludC1kaXNhYmxlICovXG5cblxuICAoZnVuY3Rpb24gKGksIHMsIG8sIGcsIHIsIGEsIG0pIHtcbiAgICBpWydHb29nbGVBbmFseXRpY3NPYmplY3QnXSA9IHI7XG4gICAgaVtyXSA9IGlbcl0gfHwgZnVuY3Rpb24gKCkge1xuICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpO1xuICAgIH0sIGlbcl0ubCA9IDEgKiBuZXcgRGF0ZSgpO1xuICAgIGEgPSBzLmNyZWF0ZUVsZW1lbnQobyksIG0gPSBzLmdldEVsZW1lbnRzQnlUYWdOYW1lKG8pWzBdO1xuICAgIGEuYXN5bmMgPSAxO1xuICAgIGEuc3JjID0gZztcbiAgICBtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIG0pO1xuICB9KSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgZ2FBZGRyZXNzLCAnZ2EnKTtcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9nKHMpIHtcbiAgY29uc29sZS5pbmZvKCdbcmVhY3QtZ2FdJywgcyk7XG59IiwiZXhwb3J0IHZhciBnYUNhbGxzID0gW107XG5leHBvcnQgZGVmYXVsdCB7XG4gIGNhbGxzOiBnYUNhbGxzLFxuICBnYTogZnVuY3Rpb24gZ2EoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGdhQ2FsbHMucHVzaChbXS5jb25jYXQoYXJncykpO1xuICB9LFxuICByZXNldENhbGxzOiBmdW5jdGlvbiByZXNldENhbGxzKCkge1xuICAgIGdhQ2FsbHMubGVuZ3RoID0gMDtcbiAgfVxufTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxuXG4vKipcbiAqIFJlYWN0IEdvb2dsZSBBbmFseXRpY3MgTW9kdWxlXG4gKlxuICogQHBhY2thZ2UgcmVhY3QtZ2FcbiAqIEBhdXRob3IgIEFkYW0gTG9mdGluZyA8YWRhbUBtb3ppbGxhZm91bmRhdGlvbi5vcmc+XG4gKiAgICAgICAgICBBdHVsIFZhcm1hIDxhdHVsQG1vemlsbGFmb3VuZGF0aW9uLm9yZz5cbiAqL1xuXG4vKipcbiAqIFV0aWxpdGllc1xuICovXG5pbXBvcnQgZm9ybWF0IGZyb20gJy4vdXRpbHMvZm9ybWF0JztcbmltcG9ydCByZW1vdmVMZWFkaW5nU2xhc2ggZnJvbSAnLi91dGlscy9yZW1vdmVMZWFkaW5nU2xhc2gnO1xuaW1wb3J0IHRyaW0gZnJvbSAnLi91dGlscy90cmltJztcbmltcG9ydCBsb2FkR0EgZnJvbSAnLi91dGlscy9sb2FkR0EnO1xuaW1wb3J0IHdhcm4gZnJvbSAnLi91dGlscy9jb25zb2xlL3dhcm4nO1xuaW1wb3J0IGxvZyBmcm9tICcuL3V0aWxzL2NvbnNvbGUvbG9nJztcbmltcG9ydCBUZXN0TW9kZUFQSSBmcm9tICcuL3V0aWxzL3Rlc3RNb2RlQVBJJztcblxudmFyIF9pc05vdEJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnO1xuXG52YXIgX2RlYnVnID0gZmFsc2U7XG52YXIgX3RpdGxlQ2FzZSA9IHRydWU7XG52YXIgX3Rlc3RNb2RlID0gZmFsc2U7XG52YXIgX2Fsd2F5c1NlbmRUb0RlZmF1bHRUcmFja2VyID0gdHJ1ZTtcblxudmFyIGludGVybmFsR2EgPSBmdW5jdGlvbiBpbnRlcm5hbEdhKCkge1xuICB2YXIgX3dpbmRvdztcblxuICBpZiAoX3Rlc3RNb2RlKSByZXR1cm4gVGVzdE1vZGVBUEkuZ2EuYXBwbHkoVGVzdE1vZGVBUEksIGFyZ3VtZW50cyk7XG4gIGlmIChfaXNOb3RCcm93c2VyKSByZXR1cm4gZmFsc2U7XG4gIGlmICghd2luZG93LmdhKSByZXR1cm4gd2FybignUmVhY3RHQS5pbml0aWFsaXplIG11c3QgYmUgY2FsbGVkIGZpcnN0IG9yIEdvb2dsZUFuYWx5dGljcyBzaG91bGQgYmUgbG9hZGVkIG1hbnVhbGx5Jyk7XG4gIHJldHVybiAoX3dpbmRvdyA9IHdpbmRvdykuZ2EuYXBwbHkoX3dpbmRvdywgYXJndW1lbnRzKTtcbn07XG5cbmZ1bmN0aW9uIF9mb3JtYXQocykge1xuICByZXR1cm4gZm9ybWF0KHMsIF90aXRsZUNhc2UpO1xufVxuXG5mdW5jdGlvbiBfZ2FDb21tYW5kKHRyYWNrZXJOYW1lcykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgY29tbWFuZCA9IGFyZ3NbMF07XG5cbiAgaWYgKHR5cGVvZiBpbnRlcm5hbEdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBjb21tYW5kICE9PSAnc3RyaW5nJykge1xuICAgICAgd2FybignZ2EgY29tbWFuZCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF9hbHdheXNTZW5kVG9EZWZhdWx0VHJhY2tlciB8fCAhQXJyYXkuaXNBcnJheSh0cmFja2VyTmFtZXMpKSBpbnRlcm5hbEdhLmFwcGx5KHZvaWQgMCwgYXJncyk7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0cmFja2VyTmFtZXMpKSB7XG4gICAgICB0cmFja2VyTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpbnRlcm5hbEdhLmFwcGx5KHZvaWQgMCwgX3RvQ29uc3VtYWJsZUFycmF5KFtcIlwiLmNvbmNhdChuYW1lLCBcIi5cIikuY29uY2F0KGNvbW1hbmQpXS5jb25jYXQoYXJncy5zbGljZSgxKSkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfaW5pdGlhbGl6ZShnYVRyYWNraW5nSUQsIG9wdGlvbnMpIHtcbiAgaWYgKCFnYVRyYWNraW5nSUQpIHtcbiAgICB3YXJuKCdnYVRyYWNraW5nSUQgaXMgcmVxdWlyZWQgaW4gaW5pdGlhbGl6ZSgpJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5kZWJ1ZyAmJiBvcHRpb25zLmRlYnVnID09PSB0cnVlKSB7XG4gICAgICBfZGVidWcgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnRpdGxlQ2FzZSA9PT0gZmFsc2UpIHtcbiAgICAgIF90aXRsZUNhc2UgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51c2VFeGlzdGluZ0dhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nYU9wdGlvbnMpIHtcbiAgICBpbnRlcm5hbEdhKCdjcmVhdGUnLCBnYVRyYWNraW5nSUQsIG9wdGlvbnMuZ2FPcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbEdhKCdjcmVhdGUnLCBnYVRyYWNraW5nSUQsICdhdXRvJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemUoY29uZmlnc09yVHJhY2tpbmdJZCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRlc3RNb2RlID09PSB0cnVlKSB7XG4gICAgX3Rlc3RNb2RlID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoX2lzTm90QnJvd3Nlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnN0YW5kYXJkSW1wbGVtZW50YXRpb24gIT09IHRydWUpIGxvYWRHQShvcHRpb25zKTtcbiAgfVxuXG4gIF9hbHdheXNTZW5kVG9EZWZhdWx0VHJhY2tlciA9IG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMuYWx3YXlzU2VuZFRvRGVmYXVsdFRyYWNrZXIgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuYWx3YXlzU2VuZFRvRGVmYXVsdFRyYWNrZXIgOiB0cnVlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZ3NPclRyYWNraW5nSWQpKSB7XG4gICAgY29uZmlnc09yVHJhY2tpbmdJZC5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgIGlmIChfdHlwZW9mKGNvbmZpZykgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHdhcm4oJ0FsbCBjb25maWdzIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX2luaXRpYWxpemUoY29uZmlnLnRyYWNraW5nSWQsIGNvbmZpZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgX2luaXRpYWxpemUoY29uZmlnc09yVHJhY2tpbmdJZCwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogZ2E6XG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBHQSBvYmplY3QuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdhKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XG4gICAgaW50ZXJuYWxHYS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuXG4gICAgaWYgKF9kZWJ1Zykge1xuICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnYXJndW1lbnRzXFwnKTsnKTtcbiAgICAgIGxvZyhcIndpdGggYXJndW1lbnRzOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoYXJncykpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd2luZG93LmdhO1xufVxuLyoqXG4gKiBzZXQ6XG4gKiBHQSB0cmFja2VyIHNldCBtZXRob2RcbiAqIEBwYXJhbSB7T2JqZWN0fSBmaWVsZHNPYmplY3QgLSBhIGZpZWxkL3ZhbHVlIHBhaXIgb3IgYSBncm91cCBvZiBmaWVsZC92YWx1ZSBwYWlycyBvbiB0aGUgdHJhY2tlclxuICogQHBhcmFtIHtBcnJheX0gdHJhY2tlck5hbWVzIC0gKG9wdGlvbmFsKSBhIGxpc3Qgb2YgZXh0cmEgdHJhY2tlcnMgdG8gcnVuIHRoZSBjb21tYW5kIG9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChmaWVsZHNPYmplY3QsIHRyYWNrZXJOYW1lcykge1xuICBpZiAoIWZpZWxkc09iamVjdCkge1xuICAgIHdhcm4oJ2BmaWVsZHNPYmplY3RgIGlzIHJlcXVpcmVkIGluIC5zZXQoKScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChfdHlwZW9mKGZpZWxkc09iamVjdCkgIT09ICdvYmplY3QnKSB7XG4gICAgd2FybignRXhwZWN0ZWQgYGZpZWxkc09iamVjdGAgYXJnIHRvIGJlIGFuIE9iamVjdCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhmaWVsZHNPYmplY3QpLmxlbmd0aCA9PT0gMCkge1xuICAgIHdhcm4oJ2VtcHR5IGBmaWVsZHNPYmplY3RgIGdpdmVuIHRvIC5zZXQoKScpO1xuICB9XG5cbiAgX2dhQ29tbWFuZCh0cmFja2VyTmFtZXMsICdzZXQnLCBmaWVsZHNPYmplY3QpO1xuXG4gIGlmIChfZGVidWcpIHtcbiAgICBsb2coJ2NhbGxlZCBnYShcXCdzZXRcXCcsIGZpZWxkc09iamVjdCk7Jyk7XG4gICAgbG9nKFwid2l0aCBmaWVsZHNPYmplY3Q6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShmaWVsZHNPYmplY3QpKSk7XG4gIH1cbn1cbi8qKlxuICogc2VuZDpcbiAqIENsb25lIG9mIHRoZSBsb3cgbGV2ZWwgYGdhLnNlbmRgIG1ldGhvZFxuICogV0FSTklORzogTm8gdmFsaWRhdGlvbnMgd2lsbCBiZSBhcHBsaWVkIHRvIHRoaXNcbiAqIEBwYXJhbSAge09iamVjdH0gZmllbGRPYmplY3QgLSBmaWVsZCBvYmplY3QgZm9yIHRyYWNraW5nIGRpZmZlcmVudCBhbmFseXRpY3NcbiAqIEBwYXJhbSAge0FycmF5fSB0cmFja2VyTmFtZXMgLSB0cmFja2VycyB0byBzZW5kIHRoZSBjb21tYW5kIHRvXG4gKiBAcGFyYW0ge0FycmF5fSB0cmFja2VyTmFtZXMgLSAob3B0aW9uYWwpIGEgbGlzdCBvZiBleHRyYSB0cmFja2VycyB0byBydW4gdGhlIGNvbW1hbmQgb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2VuZChmaWVsZE9iamVjdCwgdHJhY2tlck5hbWVzKSB7XG4gIF9nYUNvbW1hbmQodHJhY2tlck5hbWVzLCAnc2VuZCcsIGZpZWxkT2JqZWN0KTtcblxuICBpZiAoX2RlYnVnKSB7XG4gICAgbG9nKCdjYWxsZWQgZ2EoXFwnc2VuZFxcJywgZmllbGRPYmplY3QpOycpO1xuICAgIGxvZyhcIndpdGggZmllbGRPYmplY3Q6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShmaWVsZE9iamVjdCkpKTtcbiAgICBsb2coXCJ3aXRoIHRyYWNrZXJzOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkodHJhY2tlck5hbWVzKSkpO1xuICB9XG59XG4vKipcbiAqIHBhZ2V2aWV3OlxuICogQmFzaWMgR0EgcGFnZXZpZXcgdHJhY2tpbmdcbiAqIEBwYXJhbSAge1N0cmluZ30gcGF0aCAtIHRoZSBjdXJyZW50IHBhZ2UgcGFnZSBlLmcuICcvYWJvdXQnXG4gKiBAcGFyYW0ge0FycmF5fSB0cmFja2VyTmFtZXMgLSAob3B0aW9uYWwpIGEgbGlzdCBvZiBleHRyYSB0cmFja2VycyB0byBydW4gdGhlIGNvbW1hbmQgb25cbiAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZSAtIChvcHRpb25hbCkgdGhlIHBhZ2UgdGl0bGUgZS4gZy4gJ015IFdlYnNpdGUnXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhZ2V2aWV3KHJhd1BhdGgsIHRyYWNrZXJOYW1lcywgdGl0bGUpIHtcbiAgaWYgKCFyYXdQYXRoKSB7XG4gICAgd2FybigncGF0aCBpcyByZXF1aXJlZCBpbiAucGFnZXZpZXcoKScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYXRoID0gdHJpbShyYXdQYXRoKTtcblxuICBpZiAocGF0aCA9PT0gJycpIHtcbiAgICB3YXJuKCdwYXRoIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcgaW4gLnBhZ2V2aWV3KCknKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZXh0cmFGaWVsZHMgPSB7fTtcblxuICBpZiAodGl0bGUpIHtcbiAgICBleHRyYUZpZWxkcy50aXRsZSA9IHRpdGxlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIF9nYUNvbW1hbmQodHJhY2tlck5hbWVzLCAnc2VuZCcsIF9vYmplY3RTcHJlYWQoe1xuICAgICAgaGl0VHlwZTogJ3BhZ2V2aWV3JyxcbiAgICAgIHBhZ2U6IHBhdGhcbiAgICB9LCBleHRyYUZpZWxkcykpO1xuXG4gICAgaWYgKF9kZWJ1Zykge1xuICAgICAgbG9nKCdjYWxsZWQgZ2EoXFwnc2VuZFxcJywgXFwncGFnZXZpZXdcXCcsIHBhdGgpOycpO1xuICAgICAgdmFyIGV4dHJhTG9nID0gJyc7XG5cbiAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICBleHRyYUxvZyA9IFwiIGFuZCB0aXRsZTogXCIuY29uY2F0KHRpdGxlKTtcbiAgICAgIH1cblxuICAgICAgbG9nKFwid2l0aCBwYXRoOiBcIi5jb25jYXQocGF0aCkuY29uY2F0KGV4dHJhTG9nKSk7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIG1vZGFsdmlldzpcbiAqIGEgcHJveHkgdG8gYmFzaWMgR0EgcGFnZXZpZXcgdHJhY2tpbmcgdG8gY29uc2lzdGVudGx5IHRyYWNrXG4gKiBtb2RhbCB2aWV3cyB0aGF0IGFyZSBhbiBlcXVpdmFsZW50IFVYIHRvIGEgdHJhZGl0aW9uYWwgcGFnZXZpZXdcbiAqIEBwYXJhbSAge1N0cmluZ30gbW9kYWxOYW1lIGUuZy4gJ2FkZC1vci1lZGl0LWNsdWInXG4gKiBAcGFyYW0ge0FycmF5fSB0cmFja2VyTmFtZXMgLSAob3B0aW9uYWwpIGEgbGlzdCBvZiBleHRyYSB0cmFja2VycyB0byBydW4gdGhlIGNvbW1hbmQgb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbW9kYWx2aWV3KHJhd01vZGFsTmFtZSwgdHJhY2tlck5hbWVzKSB7XG4gIGlmICghcmF3TW9kYWxOYW1lKSB7XG4gICAgd2FybignbW9kYWxOYW1lIGlzIHJlcXVpcmVkIGluIC5tb2RhbHZpZXcobW9kYWxOYW1lKScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtb2RhbE5hbWUgPSByZW1vdmVMZWFkaW5nU2xhc2godHJpbShyYXdNb2RhbE5hbWUpKTtcblxuICBpZiAobW9kYWxOYW1lID09PSAnJykge1xuICAgIHdhcm4oJ21vZGFsTmFtZSBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nIG9yIGEgc2luZ2xlIC8gaW4gLm1vZGFsdmlldygpJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBwYXRoID0gXCIvbW9kYWwvXCIuY29uY2F0KG1vZGFsTmFtZSk7XG5cbiAgICBfZ2FDb21tYW5kKHRyYWNrZXJOYW1lcywgJ3NlbmQnLCAncGFnZXZpZXcnLCBwYXRoKTtcblxuICAgIGlmIChfZGVidWcpIHtcbiAgICAgIGxvZygnY2FsbGVkIGdhKFxcJ3NlbmRcXCcsIFxcJ3BhZ2V2aWV3XFwnLCBwYXRoKTsnKTtcbiAgICAgIGxvZyhcIndpdGggcGF0aDogXCIuY29uY2F0KHBhdGgpKTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogdGltaW5nOlxuICogR0EgdGltaW5nXG4gKiBAcGFyYW0gYXJncy5jYXRlZ29yeSB7U3RyaW5nfSByZXF1aXJlZFxuICogQHBhcmFtIGFyZ3MudmFyaWFibGUge1N0cmluZ30gcmVxdWlyZWRcbiAqIEBwYXJhbSBhcmdzLnZhbHVlICB7SW50fSAgcmVxdWlyZWRcbiAqIEBwYXJhbSBhcmdzLmxhYmVsICB7U3RyaW5nfSByZXF1aXJlZFxuICogQHBhcmFtIHtBcnJheX0gdHJhY2tlck5hbWVzIC0gKG9wdGlvbmFsKSBhIGxpc3Qgb2YgZXh0cmEgdHJhY2tlcnMgdG8gcnVuIHRoZSBjb21tYW5kIG9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWluZygpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgY2F0ZWdvcnkgPSBfcmVmLmNhdGVnb3J5LFxuICAgICAgdmFyaWFibGUgPSBfcmVmLnZhcmlhYmxlLFxuICAgICAgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgbGFiZWwgPSBfcmVmLmxhYmVsO1xuXG4gIHZhciB0cmFja2VyTmFtZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKCFjYXRlZ29yeSB8fCAhdmFyaWFibGUgfHwgIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHdhcm4oJ2FyZ3MuY2F0ZWdvcnksIGFyZ3MudmFyaWFibGUgJyArICdBTkQgYXJncy52YWx1ZSBhcmUgcmVxdWlyZWQgaW4gdGltaW5nKCkgJyArICdBTkQgYXJncy52YWx1ZSBoYXMgdG8gYmUgYSBudW1iZXInKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFJlcXVpcmVkIEZpZWxkc1xuXG5cbiAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICBoaXRUeXBlOiAndGltaW5nJyxcbiAgICAgIHRpbWluZ0NhdGVnb3J5OiBfZm9ybWF0KGNhdGVnb3J5KSxcbiAgICAgIHRpbWluZ1ZhcjogX2Zvcm1hdCh2YXJpYWJsZSksXG4gICAgICB0aW1pbmdWYWx1ZTogdmFsdWVcbiAgICB9O1xuXG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICBmaWVsZE9iamVjdC50aW1pbmdMYWJlbCA9IF9mb3JtYXQobGFiZWwpO1xuICAgIH1cblxuICAgIHNlbmQoZmllbGRPYmplY3QsIHRyYWNrZXJOYW1lcyk7XG4gIH1cbn1cbi8qKlxuICogZXZlbnQ6XG4gKiBHQSBldmVudCB0cmFja2luZ1xuICogQHBhcmFtIGFyZ3MuY2F0ZWdvcnkge1N0cmluZ30gcmVxdWlyZWRcbiAqIEBwYXJhbSBhcmdzLmFjdGlvbiB7U3RyaW5nfSByZXF1aXJlZFxuICogQHBhcmFtIGFyZ3MubGFiZWwge1N0cmluZ30gb3B0aW9uYWxcbiAqIEBwYXJhbSBhcmdzLnZhbHVlIHtJbnR9IG9wdGlvbmFsXG4gKiBAcGFyYW0gYXJncy5ub25JbnRlcmFjdGlvbiB7Ym9vbGVhbn0gb3B0aW9uYWxcbiAqIEBwYXJhbSBhcmdzLnRyYW5zcG9ydCB7c3RyaW5nfSBvcHRpb25hbFxuICogQHBhcmFtIHtBcnJheX0gdHJhY2tlck5hbWVzIC0gKG9wdGlvbmFsKSBhIGxpc3Qgb2YgZXh0cmEgdHJhY2tlcnMgdG8gcnVuIHRoZSBjb21tYW5kIG9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50KCkge1xuICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgY2F0ZWdvcnkgPSBfcmVmMi5jYXRlZ29yeSxcbiAgICAgIGFjdGlvbiA9IF9yZWYyLmFjdGlvbixcbiAgICAgIGxhYmVsID0gX3JlZjIubGFiZWwsXG4gICAgICB2YWx1ZSA9IF9yZWYyLnZhbHVlLFxuICAgICAgbm9uSW50ZXJhY3Rpb24gPSBfcmVmMi5ub25JbnRlcmFjdGlvbixcbiAgICAgIHRyYW5zcG9ydCA9IF9yZWYyLnRyYW5zcG9ydCxcbiAgICAgIGFyZ3MgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFtcImNhdGVnb3J5XCIsIFwiYWN0aW9uXCIsIFwibGFiZWxcIiwgXCJ2YWx1ZVwiLCBcIm5vbkludGVyYWN0aW9uXCIsIFwidHJhbnNwb3J0XCJdKTtcblxuICB2YXIgdHJhY2tlck5hbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFNpbXBsZSBWYWxpZGF0aW9uXG4gICAgaWYgKCFjYXRlZ29yeSB8fCAhYWN0aW9uKSB7XG4gICAgICB3YXJuKCdhcmdzLmNhdGVnb3J5IEFORCBhcmdzLmFjdGlvbiBhcmUgcmVxdWlyZWQgaW4gZXZlbnQoKScpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUmVxdWlyZWQgRmllbGRzXG5cblxuICAgIHZhciBmaWVsZE9iamVjdCA9IHtcbiAgICAgIGhpdFR5cGU6ICdldmVudCcsXG4gICAgICBldmVudENhdGVnb3J5OiBfZm9ybWF0KGNhdGVnb3J5KSxcbiAgICAgIGV2ZW50QWN0aW9uOiBfZm9ybWF0KGFjdGlvbilcbiAgICB9OyAvLyBPcHRpb25hbCBGaWVsZHNcblxuICAgIGlmIChsYWJlbCkge1xuICAgICAgZmllbGRPYmplY3QuZXZlbnRMYWJlbCA9IF9mb3JtYXQobGFiZWwpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICB3YXJuKCdFeHBlY3RlZCBgYXJncy52YWx1ZWAgYXJnIHRvIGJlIGEgTnVtYmVyLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRPYmplY3QuZXZlbnRWYWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygbm9uSW50ZXJhY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIG5vbkludGVyYWN0aW9uICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgd2FybignYGFyZ3Mubm9uSW50ZXJhY3Rpb25gIG11c3QgYmUgYSBib29sZWFuLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRPYmplY3Qubm9uSW50ZXJhY3Rpb24gPSBub25JbnRlcmFjdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRyYW5zcG9ydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdHJhbnNwb3J0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB3YXJuKCdgYXJncy50cmFuc3BvcnRgIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoWydiZWFjb24nLCAneGhyJywgJ2ltYWdlJ10uaW5kZXhPZih0cmFuc3BvcnQpID09PSAtMSkge1xuICAgICAgICAgIHdhcm4oJ2BhcmdzLnRyYW5zcG9ydGAgbXVzdCBiZSBlaXRoZXIgb25lIG9mIHRoZXNlIHZhbHVlczogYGJlYWNvbmAsIGB4aHJgIG9yIGBpbWFnZWAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpZWxkT2JqZWN0LnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhhcmdzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGtleS5zdWJzdHIoMCwgJ2RpbWVuc2lvbicubGVuZ3RoKSA9PT0gJ2RpbWVuc2lvbic7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBmaWVsZE9iamVjdFtrZXldID0gYXJnc1trZXldO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKGFyZ3MpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5LnN1YnN0cigwLCAnbWV0cmljJy5sZW5ndGgpID09PSAnbWV0cmljJztcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGZpZWxkT2JqZWN0W2tleV0gPSBhcmdzW2tleV07XG4gICAgfSk7IC8vIFNlbmQgdG8gR0FcblxuICAgIHNlbmQoZmllbGRPYmplY3QsIHRyYWNrZXJOYW1lcyk7XG4gIH1cbn1cbi8qKlxuICogZXhjZXB0aW9uOlxuICogR0EgZXhjZXB0aW9uIHRyYWNraW5nXG4gKiBAcGFyYW0gYXJncy5kZXNjcmlwdGlvbiB7U3RyaW5nfSBvcHRpb25hbFxuICogQHBhcmFtIGFyZ3MuZmF0YWwge2Jvb2xlYW59IG9wdGlvbmFsXG4gKiBAcGFyYW0ge0FycmF5fSB0cmFja2VyTmFtZXMgLSAob3B0aW9uYWwpIGEgbGlzdCBvZiBleHRyYSB0cmFja2VycyB0byBydW4gdGhlIGNvbW1hbmQgb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhjZXB0aW9uKF9yZWYzLCB0cmFja2VyTmFtZXMpIHtcbiAgdmFyIGRlc2NyaXB0aW9uID0gX3JlZjMuZGVzY3JpcHRpb24sXG4gICAgICBmYXRhbCA9IF9yZWYzLmZhdGFsO1xuXG4gIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBSZXF1aXJlZCBGaWVsZHNcbiAgICB2YXIgZmllbGRPYmplY3QgPSB7XG4gICAgICBoaXRUeXBlOiAnZXhjZXB0aW9uJ1xuICAgIH07IC8vIE9wdGlvbmFsIEZpZWxkc1xuXG4gICAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgICBmaWVsZE9iamVjdC5leERlc2NyaXB0aW9uID0gX2Zvcm1hdChkZXNjcmlwdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBmYXRhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2YgZmF0YWwgIT09ICdib29sZWFuJykge1xuICAgICAgICB3YXJuKCdgYXJncy5mYXRhbGAgbXVzdCBiZSBhIGJvb2xlYW4uJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZE9iamVjdC5leEZhdGFsID0gZmF0YWw7XG4gICAgICB9XG4gICAgfSAvLyBTZW5kIHRvIEdBXG5cblxuICAgIHNlbmQoZmllbGRPYmplY3QsIHRyYWNrZXJOYW1lcyk7XG4gIH1cbn1cbmV4cG9ydCB2YXIgcGx1Z2luID0ge1xuICAvKipcbiAgICogcmVxdWlyZTpcbiAgICogR0EgcmVxdWlyZXMgYSBwbHVnaW5cbiAgICogQHBhcmFtIG5hbWUge1N0cmluZ30gZS5nLiAnZWNvbW1lcmNlJyBvciAnbXlwbHVnaW4nXG4gICAqIEBwYXJhbSBvcHRpb25zIHtPYmplY3R9IG9wdGlvbmFsIGUuZyB7cGF0aDogJy9sb2cnLCBkZWJ1ZzogdHJ1ZX1cbiAgICogQHBhcmFtIHRyYWNrZXJOYW1lIHtTdHJpbmd9IG9wdGlvbmFsIGUuZyAndHJhY2tlck5hbWUnXG4gICAqL1xuICByZXF1aXJlOiBmdW5jdGlvbiByZXF1aXJlKHJhd05hbWUsIG9wdGlvbnMsIHRyYWNrZXJOYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBnYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gUmVxdWlyZWQgRmllbGRzXG4gICAgICBpZiAoIXJhd05hbWUpIHtcbiAgICAgICAgd2FybignYG5hbWVgIGlzIHJlcXVpcmVkIGluIC5yZXF1aXJlKCknKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmFtZSA9IHRyaW0ocmF3TmFtZSk7XG5cbiAgICAgIGlmIChuYW1lID09PSAnJykge1xuICAgICAgICB3YXJuKCdgbmFtZWAgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZyBpbiAucmVxdWlyZSgpJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlcXVpcmVTdHJpbmcgPSB0cmFja2VyTmFtZSA/IFwiXCIuY29uY2F0KHRyYWNrZXJOYW1lLCBcIi5yZXF1aXJlXCIpIDogJ3JlcXVpcmUnOyAvLyBPcHRpb25hbCBGaWVsZHNcblxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKF90eXBlb2Yob3B0aW9ucykgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgd2FybignRXhwZWN0ZWQgYG9wdGlvbnNgIGFyZyB0byBiZSBhbiBPYmplY3QnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgd2FybignRW1wdHkgYG9wdGlvbnNgIGdpdmVuIHRvIC5yZXF1aXJlKCknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdhKHJlcXVpcmVTdHJpbmcsIG5hbWUsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgICBsb2coXCJjYWxsZWQgZ2EoJ3JlcXVpcmUnLCAnXCIuY29uY2F0KG5hbWUsIFwiJywgXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShvcHRpb25zKSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnYShyZXF1aXJlU3RyaW5nLCBuYW1lKTtcblxuICAgICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgICAgbG9nKFwiY2FsbGVkIGdhKCdyZXF1aXJlJywgJ1wiLmNvbmNhdChuYW1lLCBcIicpO1wiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIGV4ZWN1dGU6XG4gICAqIEdBIGV4ZWN1dGUgYWN0aW9uIGZvciBwbHVnaW5cbiAgICogVGFrZXMgdmFyaWFibGUgbnVtYmVyIG9mIGFyZ3VtZW50c1xuICAgKiBAcGFyYW0gcGx1Z2luTmFtZSB7U3RyaW5nfSBlLmcuICdlY29tbWVyY2UnIG9yICdteXBsdWdpbidcbiAgICogQHBhcmFtIGFjdGlvbiB7U3RyaW5nfSBlLmcuICdhZGRJdGVtJyBvciAnbXlDdXN0b21BY3Rpb24nXG4gICAqIEBwYXJhbSBhY3Rpb25UeXBlIHtTdHJpbmd9IG9wdGlvbmFsIGUuZy4gJ2RldGFpbCdcbiAgICogQHBhcmFtIHBheWxvYWQge09iamVjdH0gb3B0aW9uYWwgZS5nIHsgaWQ6ICcxeDVlJywgbmFtZSA6ICdNeSBwcm9kdWN0IHRvIHRyYWNrJyB9XG4gICAqL1xuICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKHBsdWdpbk5hbWUsIGFjdGlvbikge1xuICAgIHZhciBwYXlsb2FkO1xuICAgIHZhciBhY3Rpb25UeXBlO1xuXG4gICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyAwIDogYXJndW1lbnRzLmxlbmd0aCAtIDIpID09PSAxKSB7XG4gICAgICBwYXlsb2FkID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb25UeXBlID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdO1xuICAgICAgcGF5bG9hZCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbk5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHdhcm4oJ0V4cGVjdGVkIGBwbHVnaW5OYW1lYCBhcmcgdG8gYmUgYSBTdHJpbmcuJyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhY3Rpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHdhcm4oJ0V4cGVjdGVkIGBhY3Rpb25gIGFyZyB0byBiZSBhIFN0cmluZy4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjb21tYW5kID0gXCJcIi5jb25jYXQocGx1Z2luTmFtZSwgXCI6XCIpLmNvbmNhdChhY3Rpb24pO1xuICAgICAgICBwYXlsb2FkID0gcGF5bG9hZCB8fCBudWxsO1xuXG4gICAgICAgIGlmIChhY3Rpb25UeXBlICYmIHBheWxvYWQpIHtcbiAgICAgICAgICBnYShjb21tYW5kLCBhY3Rpb25UeXBlLCBwYXlsb2FkKTtcblxuICAgICAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgICAgIGxvZyhcImNhbGxlZCBnYSgnXCIuY29uY2F0KGNvbW1hbmQsIFwiJyk7XCIpKTtcbiAgICAgICAgICAgIGxvZyhcImFjdGlvblR5cGU6IFxcXCJcIi5jb25jYXQoYWN0aW9uVHlwZSwgXCJcXFwiIHdpdGggcGF5bG9hZDogXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShwYXlsb2FkKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwYXlsb2FkKSB7XG4gICAgICAgICAgZ2EoY29tbWFuZCwgcGF5bG9hZCk7XG5cbiAgICAgICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgICAgICBsb2coXCJjYWxsZWQgZ2EoJ1wiLmNvbmNhdChjb21tYW5kLCBcIicpO1wiKSk7XG4gICAgICAgICAgICBsb2coXCJ3aXRoIHBheWxvYWQ6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShwYXlsb2FkKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnYShjb21tYW5kKTtcblxuICAgICAgICAgIGlmIChfZGVidWcpIHtcbiAgICAgICAgICAgIGxvZyhcImNhbGxlZCBnYSgnXCIuY29uY2F0KGNvbW1hbmQsIFwiJyk7XCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIG91dGJvdW5kTGluazpcbiAqIEdBIG91dGJvdW5kTGluayB0cmFja2luZ1xuICogQHBhcmFtIGFyZ3MubGFiZWwge1N0cmluZ30gZS5nLiB1cmwsIG9yICdDcmVhdGUgYW4gQWNjb3VudCdcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGhpdENhbGxiYWNrIC0gQ2FsbGVkIGFmdGVyIHByb2Nlc3NpbmcgYSBoaXQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG91dGJvdW5kTGluayhhcmdzLCBoaXRDYWxsYmFjaywgdHJhY2tlck5hbWVzKSB7XG4gIGlmICh0eXBlb2YgaGl0Q2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB3YXJuKCdoaXRDYWxsYmFjayBmdW5jdGlvbiBpcyByZXF1aXJlZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZ2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBTaW1wbGUgVmFsaWRhdGlvblxuICAgIGlmICghYXJncyB8fCAhYXJncy5sYWJlbCkge1xuICAgICAgd2FybignYXJncy5sYWJlbCBpcyByZXF1aXJlZCBpbiBvdXRib3VuZExpbmsoKScpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUmVxdWlyZWQgRmllbGRzXG5cblxuICAgIHZhciBmaWVsZE9iamVjdCA9IHtcbiAgICAgIGhpdFR5cGU6ICdldmVudCcsXG4gICAgICBldmVudENhdGVnb3J5OiAnT3V0Ym91bmQnLFxuICAgICAgZXZlbnRBY3Rpb246ICdDbGljaycsXG4gICAgICBldmVudExhYmVsOiBfZm9ybWF0KGFyZ3MubGFiZWwpXG4gICAgfTtcbiAgICB2YXIgc2FmZXR5Q2FsbGJhY2tDYWxsZWQgPSBmYWxzZTtcblxuICAgIHZhciBzYWZldHlDYWxsYmFjayA9IGZ1bmN0aW9uIHNhZmV0eUNhbGxiYWNrKCkge1xuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBhIGRlbGF5ZWQgcmVzcG9uc2UgZnJvbSBHQVxuICAgICAgLy8gY2F1c2luZyBoaXRDYWxsYmFjayBmcm9tIGJlaW5nIGZpcmVkIHR3aWNlXG4gICAgICBzYWZldHlDYWxsYmFja0NhbGxlZCA9IHRydWU7XG4gICAgICBoaXRDYWxsYmFjaygpO1xuICAgIH07IC8vIFVzaW5nIGEgdGltZW91dCB0byBlbnN1cmUgdGhlIGV4ZWN1dGlvbiBvZiBjcml0aWNhbCBhcHBsaWNhdGlvbiBjb2RlXG4gICAgLy8gaW4gdGhlIGNhc2Ugd2hlbiB0aGUgR0Egc2VydmVyIG1pZ2h0IGJlIGRvd25cbiAgICAvLyBvciBhbiBhZCBibG9ja2VyIHByZXZlbnRzIHNlbmRpbmcgdGhlIGRhdGFcbiAgICAvLyByZWdpc3RlciBzYWZldHkgbmV0IHRpbWVvdXQ6XG5cblxuICAgIHZhciB0ID0gc2V0VGltZW91dChzYWZldHlDYWxsYmFjaywgMjUwKTtcblxuICAgIHZhciBjbGVhcmFibGVDYWxsYmFja0ZvckdBID0gZnVuY3Rpb24gY2xlYXJhYmxlQ2FsbGJhY2tGb3JHQSgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0KTtcblxuICAgICAgaWYgKCFzYWZldHlDYWxsYmFja0NhbGxlZCkge1xuICAgICAgICBoaXRDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmaWVsZE9iamVjdC5oaXRDYWxsYmFjayA9IGNsZWFyYWJsZUNhbGxiYWNrRm9yR0E7IC8vIFNlbmQgdG8gR0FcblxuICAgIHNlbmQoZmllbGRPYmplY3QsIHRyYWNrZXJOYW1lcyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgZ2EgaXMgbm90IGRlZmluZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgc28gdGhlIGFwcGxpY2F0aW9uXG4gICAgLy8gY29udGludWVzIHRvIHdvcmsgYXMgZXhwZWN0ZWRcbiAgICBzZXRUaW1lb3V0KGhpdENhbGxiYWNrLCAwKTtcbiAgfVxufVxuZXhwb3J0IHZhciB0ZXN0TW9kZUFQSSA9IFRlc3RNb2RlQVBJO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0aWFsaXplOiBpbml0aWFsaXplLFxuICBnYTogZ2EsXG4gIHNldDogc2V0LFxuICBzZW5kOiBzZW5kLFxuICBwYWdldmlldzogcGFnZXZpZXcsXG4gIG1vZGFsdmlldzogbW9kYWx2aWV3LFxuICB0aW1pbmc6IHRpbWluZyxcbiAgZXZlbnQ6IGV2ZW50LFxuICBleGNlcHRpb246IGV4Y2VwdGlvbixcbiAgcGx1Z2luOiBwbHVnaW4sXG4gIG91dGJvdW5kTGluazogb3V0Ym91bmRMaW5rLFxuICB0ZXN0TW9kZUFQSTogVGVzdE1vZGVBUElcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlTGVhZGluZ1NsYXNoKHN0cmluZykge1xuICBpZiAoc3RyaW5nLnN1YnN0cmluZygwLCAxKSA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zdWJzdHJpbmcoMSk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufSIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBVbmJvdW5kT3V0Ym91bmRMaW5rIGZyb20gJy4vY29tcG9uZW50cy9PdXRib3VuZExpbmsnO1xuaW1wb3J0ICogYXMgRGVmYXVsdHMgZnJvbSAnLi9jb3JlJztcbmV4cG9ydCB2YXIgaW5pdGlhbGl6ZSA9IERlZmF1bHRzLmluaXRpYWxpemU7XG5leHBvcnQgdmFyIGdhID0gRGVmYXVsdHMuZ2E7XG5leHBvcnQgdmFyIHNldCA9IERlZmF1bHRzLnNldDtcbmV4cG9ydCB2YXIgc2VuZCA9IERlZmF1bHRzLnNlbmQ7XG5leHBvcnQgdmFyIHBhZ2V2aWV3ID0gRGVmYXVsdHMucGFnZXZpZXc7XG5leHBvcnQgdmFyIG1vZGFsdmlldyA9IERlZmF1bHRzLm1vZGFsdmlldztcbmV4cG9ydCB2YXIgdGltaW5nID0gRGVmYXVsdHMudGltaW5nO1xuZXhwb3J0IHZhciBldmVudCA9IERlZmF1bHRzLmV2ZW50O1xuZXhwb3J0IHZhciBleGNlcHRpb24gPSBEZWZhdWx0cy5leGNlcHRpb247XG5leHBvcnQgdmFyIHBsdWdpbiA9IERlZmF1bHRzLnBsdWdpbjtcbmV4cG9ydCB2YXIgb3V0Ym91bmRMaW5rID0gRGVmYXVsdHMub3V0Ym91bmRMaW5rO1xuZXhwb3J0IHZhciB0ZXN0TW9kZUFQSSA9IERlZmF1bHRzLnRlc3RNb2RlQVBJO1xuVW5ib3VuZE91dGJvdW5kTGluay5vcmlnVHJhY2tMaW5rID0gVW5ib3VuZE91dGJvdW5kTGluay50cmFja0xpbms7XG5VbmJvdW5kT3V0Ym91bmRMaW5rLnRyYWNrTGluayA9IERlZmF1bHRzLm91dGJvdW5kTGluaztcbmV4cG9ydCB2YXIgT3V0Ym91bmRMaW5rID0gVW5ib3VuZE91dGJvdW5kTGluaztcbmV4cG9ydCBkZWZhdWx0IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHRzLCB7XG4gIE91dGJvdW5kTGluazogT3V0Ym91bmRMaW5rXG59KTsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnZhciBPcHRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoT3B0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBPcHRpb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9wdGlvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBPcHRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk9wdGlvbi5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSlcbn07XG5PcHRpb24uaXNTZWxlY3RPcHRpb24gPSB0cnVlO1xuZXhwb3J0IGRlZmF1bHQgT3B0aW9uOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1RpdGxlKHRpdGxlKSB7XG4gIGlmICh0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHRpdGxlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVQcm9wVmFsdWUoY2hpbGQpIHtcbiAgaWYgKCFjaGlsZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHByb3BzID0gY2hpbGQucHJvcHM7XG4gIGlmICgndmFsdWUnIGluIHByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzLnZhbHVlO1xuICB9XG4gIGlmIChjaGlsZC5rZXkpIHtcbiAgICByZXR1cm4gY2hpbGQua2V5O1xuICB9XG4gIGlmIChjaGlsZC50eXBlICYmIGNoaWxkLnR5cGUuaXNTZWxlY3RPcHRHcm91cCAmJiBwcm9wcy5sYWJlbCkge1xuICAgIHJldHVybiBwcm9wcy5sYWJlbDtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ05lZWQgYXQgbGVhc3QgYSBrZXkgb3IgYSB2YWx1ZSBvciBhIGxhYmVsIChvbmx5IGZvciBPcHRHcm91cCkgZm9yICcgKyBjaGlsZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9wVmFsdWUoY2hpbGQsIHByb3ApIHtcbiAgaWYgKHByb3AgPT09ICd2YWx1ZScpIHtcbiAgICByZXR1cm4gZ2V0VmFsdWVQcm9wVmFsdWUoY2hpbGQpO1xuICB9XG4gIHJldHVybiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTXVsdGlwbGUocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLm11bHRpcGxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21ib2JveChwcm9wcykge1xuICByZXR1cm4gcHJvcHMuY29tYm9ib3g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc011bHRpcGxlT3JUYWdzKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5tdWx0aXBsZSB8fCBwcm9wcy50YWdzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNdWx0aXBsZU9yVGFnc09yQ29tYm9ib3gocHJvcHMpIHtcbiAgcmV0dXJuIGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpIHx8IGlzQ29tYm9ib3gocHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTaW5nbGVNb2RlKHByb3BzKSB7XG4gIHJldHVybiAhaXNNdWx0aXBsZU9yVGFnc09yQ29tYm9ib3gocHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICB2YXIgcmV0ID0gdmFsdWU7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0ID0gW107XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0ID0gW3ZhbHVlXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFwS2V5KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgKyAnLScgKyB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0RXZlbnQoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kSW5kZXhJblZhbHVlQnlTaW5nbGVWYWx1ZSh2YWx1ZSwgc2luZ2xlVmFsdWUpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodmFsdWVbaV0gPT09IHNpbmdsZVZhbHVlKSB7XG4gICAgICBpbmRleCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFiZWxGcm9tUHJvcHNWYWx1ZSh2YWx1ZSwga2V5KSB7XG4gIHZhciBsYWJlbCA9IHZvaWQgMDtcbiAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgIGlmICh2YWx1ZVtpXS5rZXkgPT09IGtleSkge1xuICAgICAgbGFiZWwgPSB2YWx1ZVtpXS5sYWJlbDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGFiZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3RLZXlzKG1lbnVJdGVtcywgdmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHNlbGVjdGVkS2V5cyA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKG1lbnVJdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbS50eXBlLmlzTWVudUl0ZW1Hcm91cCkge1xuICAgICAgc2VsZWN0ZWRLZXlzID0gc2VsZWN0ZWRLZXlzLmNvbmNhdChnZXRTZWxlY3RLZXlzKGl0ZW0ucHJvcHMuY2hpbGRyZW4sIHZhbHVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpdGVtVmFsdWUgPSBnZXRWYWx1ZVByb3BWYWx1ZShpdGVtKTtcbiAgICAgIHZhciBpdGVtS2V5ID0gaXRlbS5rZXk7XG4gICAgICBpZiAoZmluZEluZGV4SW5WYWx1ZUJ5U2luZ2xlVmFsdWUodmFsdWUsIGl0ZW1WYWx1ZSkgIT09IC0xICYmIGl0ZW1LZXkpIHtcbiAgICAgICAgc2VsZWN0ZWRLZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlbGVjdGVkS2V5cztcbn1cblxuZXhwb3J0IHZhciBVTlNFTEVDVEFCTEVfU1RZTEUgPSB7XG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgV2Via2l0VXNlclNlbGVjdDogJ25vbmUnXG59O1xuXG5leHBvcnQgdmFyIFVOU0VMRUNUQUJMRV9BVFRSSUJVVEUgPSB7XG4gIHVuc2VsZWN0YWJsZTogJ29uJ1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRGaXJzdE1lbnVJdGVtKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoY2hpbGQudHlwZS5pc01lbnVJdGVtR3JvdXApIHtcbiAgICAgIHZhciBmb3VuZCA9IGZpbmRGaXJzdE1lbnVJdGVtKGNoaWxkLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghY2hpbGQucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmNsdWRlc1NlcGFyYXRvcnMoc3RyaW5nLCBzZXBhcmF0b3JzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VwYXJhdG9ycy5sZW5ndGg7ICsraSkge1xuICAgIGlmIChzdHJpbmcubGFzdEluZGV4T2Yoc2VwYXJhdG9yc1tpXSkgPiAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRCeVNlcGFyYXRvcnMoc3RyaW5nLCBzZXBhcmF0b3JzKSB7XG4gIHZhciByZWcgPSBuZXcgUmVnRXhwKCdbJyArIHNlcGFyYXRvcnMuam9pbigpICsgJ10nKTtcbiAgcmV0dXJuIHN0cmluZy5zcGxpdChyZWcpLmZpbHRlcihmdW5jdGlvbiAodG9rZW4pIHtcbiAgICByZXR1cm4gdG9rZW47XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEZpbHRlckZuKGlucHV0LCBjaGlsZCkge1xuICBpZiAoY2hpbGQucHJvcHMuZGlzYWJsZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbHVlID0gdG9BcnJheShnZXRQcm9wVmFsdWUoY2hpbGQsIHRoaXMucHJvcHMub3B0aW9uRmlsdGVyUHJvcCkpLmpvaW4oJycpO1xuICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKGlucHV0LnRvTG93ZXJDYXNlKCkpID4gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvblZhbHVlKHZhbHVlLCBwcm9wcykge1xuICBpZiAoaXNTaW5nbGVNb2RlKHByb3BzKSB8fCBpc011bHRpcGxlKHByb3BzKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBgdmFsdWVgIG9mIHR5cGUgYCcgKyB0eXBlb2YgdmFsdWUgKyAnYCBzdXBwbGllZCB0byBPcHRpb24sICcgKyAnZXhwZWN0ZWQgYHN0cmluZ2Agd2hlbiBgdGFncy9jb21ib2JveGAgaXMgYHRydWVgLicpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlUmVmKGluc3RhbmNlLCBuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgIGluc3RhbmNlW25hbWVdID0gbm9kZTtcbiAgfTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHRvQXJyYXkgZnJvbSAncmMtdXRpbC9lcy9DaGlsZHJlbi90b0FycmF5JztcbmltcG9ydCBNZW51IGZyb20gJ3JjLW1lbnUnO1xuaW1wb3J0IHNjcm9sbEludG9WaWV3IGZyb20gJ2RvbS1zY3JvbGwtaW50by12aWV3JztcbmltcG9ydCByYWYgZnJvbSAncmFmJztcbmltcG9ydCB7IGdldFNlbGVjdEtleXMsIHByZXZlbnREZWZhdWx0RXZlbnQsIHNhdmVSZWYgfSBmcm9tICcuL3V0aWwnO1xuXG52YXIgRHJvcGRvd25NZW51ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyb3Bkb3duTWVudSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd25NZW51KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyb3Bkb3duTWVudSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnNjcm9sbEFjdGl2ZUl0ZW1Ub1ZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzY3JvbGwgaW50byB2aWV3XG4gICAgICB2YXIgaXRlbUNvbXBvbmVudCA9IGZpbmRET01Ob2RlKF90aGlzLmZpcnN0QWN0aXZlSXRlbSk7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlLFxuICAgICAgICAgIHZpc2libGUgPSBfdGhpcyRwcm9wcy52aXNpYmxlLFxuICAgICAgICAgIGZpcnN0QWN0aXZlVmFsdWUgPSBfdGhpcyRwcm9wcy5maXJzdEFjdGl2ZVZhbHVlO1xuXG5cbiAgICAgIGlmICghaXRlbUNvbXBvbmVudCB8fCAhdmlzaWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc2Nyb2xsSW50b1ZpZXdPcHRzID0ge1xuICAgICAgICBvbmx5U2Nyb2xsSWZOZWVkZWQ6IHRydWVcbiAgICAgIH07XG4gICAgICBpZiAoKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApICYmIGZpcnN0QWN0aXZlVmFsdWUpIHtcbiAgICAgICAgc2Nyb2xsSW50b1ZpZXdPcHRzLmFsaWduV2l0aFRvcCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIERlbGF5IHRvIHNjcm9sbCBzaW5jZSBjdXJyZW50IGZyYW1lIGl0ZW0gcG9zaXRpb24gaXMgbm90IHJlYWR5IHdoZW4gcHJlIHZpZXcgaXMgYnkgZmlsdGVyXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xMTI2OCNpc3N1ZWNvbW1lbnQtNDA2NjM0NDYyXG4gICAgICBfdGhpcy5yYWZJbnN0YW5jZSA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjcm9sbEludG9WaWV3KGl0ZW1Db21wb25lbnQsIGZpbmRET01Ob2RlKF90aGlzLm1lbnVSZWYpLCBzY3JvbGxJbnRvVmlld09wdHMpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmxhc3RJbnB1dFZhbHVlID0gcHJvcHMuaW5wdXRWYWx1ZTtcbiAgICBfdGhpcy5zYXZlTWVudVJlZiA9IHNhdmVSZWYoX3RoaXMsICdtZW51UmVmJyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgRHJvcGRvd25NZW51LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc2Nyb2xsQWN0aXZlSXRlbVRvVmlldygpO1xuICAgIHRoaXMubGFzdFZpc2libGUgPSB0aGlzLnByb3BzLnZpc2libGU7XG4gIH07XG5cbiAgRHJvcGRvd25NZW51LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgaWYgKCFuZXh0UHJvcHMudmlzaWJsZSkge1xuICAgICAgdGhpcy5sYXN0VmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBmcmVlemUgd2hlbiBoaWRlXG4gICAgcmV0dXJuIG5leHRQcm9wcy52aXNpYmxlIHx8IG5leHRQcm9wcy5pbnB1dFZhbHVlICE9PSB0aGlzLnByb3BzLmlucHV0VmFsdWU7XG4gIH07XG5cbiAgRHJvcGRvd25NZW51LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIXByZXZQcm9wcy52aXNpYmxlICYmIHByb3BzLnZpc2libGUpIHtcbiAgICAgIHRoaXMuc2Nyb2xsQWN0aXZlSXRlbVRvVmlldygpO1xuICAgIH1cbiAgICB0aGlzLmxhc3RWaXNpYmxlID0gcHJvcHMudmlzaWJsZTtcbiAgICB0aGlzLmxhc3RJbnB1dFZhbHVlID0gcHJvcHMuaW5wdXRWYWx1ZTtcbiAgfTtcblxuICBEcm9wZG93bk1lbnUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucmFmSW5zdGFuY2UgJiYgdGhpcy5yYWZJbnN0YW5jZS5jYW5jZWwpIHtcbiAgICAgIHRoaXMucmFmSW5zdGFuY2UuY2FuY2VsKCk7XG4gICAgfVxuICB9O1xuXG4gIERyb3Bkb3duTWVudS5wcm90b3R5cGUucmVuZGVyTWVudSA9IGZ1bmN0aW9uIHJlbmRlck1lbnUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBtZW51SXRlbXMgPSBwcm9wcy5tZW51SXRlbXMsXG4gICAgICAgIG1lbnVJdGVtU2VsZWN0ZWRJY29uID0gcHJvcHMubWVudUl0ZW1TZWxlY3RlZEljb24sXG4gICAgICAgIGRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbiA9IHByb3BzLmRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbixcbiAgICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgICAgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlLFxuICAgICAgICBvbk1lbnVTZWxlY3QgPSBwcm9wcy5vbk1lbnVTZWxlY3QsXG4gICAgICAgIGlucHV0VmFsdWUgPSBwcm9wcy5pbnB1dFZhbHVlLFxuICAgICAgICBmaXJzdEFjdGl2ZVZhbHVlID0gcHJvcHMuZmlyc3RBY3RpdmVWYWx1ZSxcbiAgICAgICAgYmFja2ZpbGxWYWx1ZSA9IHByb3BzLmJhY2tmaWxsVmFsdWU7XG5cbiAgICBpZiAobWVudUl0ZW1zICYmIG1lbnVJdGVtcy5sZW5ndGgpIHtcbiAgICAgIHZhciBtZW51UHJvcHMgPSB7fTtcbiAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICBtZW51UHJvcHMub25EZXNlbGVjdCA9IHByb3BzLm9uTWVudURlc2VsZWN0O1xuICAgICAgICBtZW51UHJvcHMub25TZWxlY3QgPSBvbk1lbnVTZWxlY3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZW51UHJvcHMub25DbGljayA9IG9uTWVudVNlbGVjdDtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlbGVjdGVkS2V5cyA9IGdldFNlbGVjdEtleXMobWVudUl0ZW1zLCB2YWx1ZSk7XG4gICAgICB2YXIgYWN0aXZlS2V5UHJvcHMgPSB7fTtcblxuICAgICAgdmFyIGNsb25lZE1lbnVJdGVtcyA9IG1lbnVJdGVtcztcbiAgICAgIGlmIChzZWxlY3RlZEtleXMubGVuZ3RoIHx8IGZpcnN0QWN0aXZlVmFsdWUpIHtcbiAgICAgICAgaWYgKHByb3BzLnZpc2libGUgJiYgIXRoaXMubGFzdFZpc2libGUpIHtcbiAgICAgICAgICBhY3RpdmVLZXlQcm9wcy5hY3RpdmVLZXkgPSBzZWxlY3RlZEtleXNbMF0gfHwgZmlyc3RBY3RpdmVWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm91bmRGaXJzdCA9IGZhbHNlO1xuICAgICAgICAvLyBzZXQgZmlyc3RBY3RpdmVJdGVtIHZpYSBjbG9uaW5nIG1lbnVzXG4gICAgICAgIC8vIGZvciBzY3JvbGwgaW50byB2aWV3XG4gICAgICAgIHZhciBjbG9uZSA9IGZ1bmN0aW9uIGNsb25lKGl0ZW0pIHtcbiAgICAgICAgICBpZiAoIWZvdW5kRmlyc3QgJiYgc2VsZWN0ZWRLZXlzLmluZGV4T2YoaXRlbS5rZXkpICE9PSAtMSB8fCAhZm91bmRGaXJzdCAmJiAhc2VsZWN0ZWRLZXlzLmxlbmd0aCAmJiBmaXJzdEFjdGl2ZVZhbHVlLmluZGV4T2YoaXRlbS5rZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgZm91bmRGaXJzdCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGl0ZW0sIHtcbiAgICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgICAgICAgIF90aGlzMi5maXJzdEFjdGl2ZUl0ZW0gPSBfcmVmO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH07XG5cbiAgICAgICAgY2xvbmVkTWVudUl0ZW1zID0gbWVudUl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGlmIChpdGVtLnR5cGUuaXNNZW51SXRlbUdyb3VwKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0b0FycmF5KGl0ZW0ucHJvcHMuY2hpbGRyZW4pLm1hcChjbG9uZSk7XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGl0ZW0sIHt9LCBjaGlsZHJlbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjbG9uZShpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDbGVhciBmaXJzdEFjdGl2ZUl0ZW0gd2hlbiBkcm9wZG93biBtZW51IGl0ZW1zIHdhcyBlbXB0eVxuICAgICAgICAvLyBBdm9pZCBgVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50YFxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xMDc3NFxuICAgICAgICB0aGlzLmZpcnN0QWN0aXZlSXRlbSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIGNsZWFyIGFjdGl2ZUtleSB3aGVuIGlucHV0VmFsdWUgY2hhbmdlXG4gICAgICB2YXIgbGFzdFZhbHVlID0gdmFsdWUgJiYgdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoaW5wdXRWYWx1ZSAhPT0gdGhpcy5sYXN0SW5wdXRWYWx1ZSAmJiAoIWxhc3RWYWx1ZSB8fCBsYXN0VmFsdWUgIT09IGJhY2tmaWxsVmFsdWUpKSB7XG4gICAgICAgIGFjdGl2ZUtleVByb3BzLmFjdGl2ZUtleSA9ICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIE1lbnUsXG4gICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICByZWY6IHRoaXMuc2F2ZU1lbnVSZWYsXG4gICAgICAgICAgc3R5bGU6IHRoaXMucHJvcHMuZHJvcGRvd25NZW51U3R5bGUsXG4gICAgICAgICAgZGVmYXVsdEFjdGl2ZUZpcnN0OiBkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24sXG4gICAgICAgICAgcm9sZTogJ2xpc3Rib3gnLFxuICAgICAgICAgIGl0ZW1JY29uOiBtdWx0aXBsZSA/IG1lbnVJdGVtU2VsZWN0ZWRJY29uIDogbnVsbFxuICAgICAgICB9LCBhY3RpdmVLZXlQcm9wcywge1xuICAgICAgICAgIG11bHRpcGxlOiBtdWx0aXBsZVxuICAgICAgICB9LCBtZW51UHJvcHMsIHtcbiAgICAgICAgICBzZWxlY3RlZEtleXM6IHNlbGVjdGVkS2V5cyxcbiAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyArICctbWVudSdcbiAgICAgICAgfSksXG4gICAgICAgIGNsb25lZE1lbnVJdGVtc1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgRHJvcGRvd25NZW51LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHJlbmRlck1lbnUgPSB0aGlzLnJlbmRlck1lbnUoKTtcbiAgICByZXR1cm4gcmVuZGVyTWVudSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknXG4gICAgICAgIH0sXG4gICAgICAgIG9uRm9jdXM6IHRoaXMucHJvcHMub25Qb3B1cEZvY3VzLFxuICAgICAgICBvbk1vdXNlRG93bjogcHJldmVudERlZmF1bHRFdmVudCxcbiAgICAgICAgb25TY3JvbGw6IHRoaXMucHJvcHMub25Qb3B1cFNjcm9sbFxuICAgICAgfSxcbiAgICAgIHJlbmRlck1lbnVcbiAgICApIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd25NZW51O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93bk1lbnUuZGlzcGxheU5hbWUgPSAnRHJvcGRvd25NZW51JztcbkRyb3Bkb3duTWVudS5wcm9wVHlwZXMgPSB7XG4gIGRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICBkcm9wZG93bk1lbnVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuICBvblBvcHVwRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICBvblBvcHVwU2Nyb2xsOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25NZW51RGVTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1lbnVTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1lbnVJdGVtczogUHJvcFR5cGVzLmFueSxcbiAgaW5wdXRWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGZpcnN0QWN0aXZlVmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1lbnVJdGVtU2VsZWN0ZWRJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKVxufTtcbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duTWVudTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBUcmlnZ2VyIGZyb20gJ3JjLXRyaWdnZXInO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBEcm9wZG93bk1lbnUgZnJvbSAnLi9Ecm9wZG93bk1lbnUnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBpc1NpbmdsZU1vZGUsIHNhdmVSZWYgfSBmcm9tICcuL3V0aWwnO1xuXG5UcmlnZ2VyLmRpc3BsYXlOYW1lID0gJ1RyaWdnZXInO1xuXG52YXIgQlVJTFRfSU5fUExBQ0VNRU5UUyA9IHtcbiAgYm90dG9tTGVmdDoge1xuICAgIHBvaW50czogWyd0bCcsICdibCddLFxuICAgIG9mZnNldDogWzAsIDRdLFxuICAgIG92ZXJmbG93OiB7XG4gICAgICBhZGp1c3RYOiAwLFxuICAgICAgYWRqdXN0WTogMVxuICAgIH1cbiAgfSxcbiAgdG9wTGVmdDoge1xuICAgIHBvaW50czogWydibCcsICd0bCddLFxuICAgIG9mZnNldDogWzAsIC00XSxcbiAgICBvdmVyZmxvdzoge1xuICAgICAgYWRqdXN0WDogMCxcbiAgICAgIGFkanVzdFk6IDFcbiAgICB9XG4gIH1cbn07XG5cbnZhciBTZWxlY3RUcmlnZ2VyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNlbGVjdFRyaWdnZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNlbGVjdFRyaWdnZXIocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0VHJpZ2dlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICBfdGhpcy5zYXZlRHJvcGRvd25NZW51UmVmID0gc2F2ZVJlZihfdGhpcywgJ2Ryb3Bkb3duTWVudVJlZicpO1xuICAgIF90aGlzLnNhdmVUcmlnZ2VyUmVmID0gc2F2ZVJlZihfdGhpcywgJ3RyaWdnZXJSZWYnKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZHJvcGRvd25XaWR0aDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgU2VsZWN0VHJpZ2dlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNldERyb3Bkb3duV2lkdGgoKTtcbiAgfTtcblxuICBTZWxlY3RUcmlnZ2VyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5zZXREcm9wZG93bldpZHRoKCk7XG4gIH07XG5cbiAgU2VsZWN0VHJpZ2dlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcG9wdXBDbGFzc05hbWU7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25Qb3B1cEZvY3VzID0gX3Byb3BzLm9uUG9wdXBGb2N1cyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ29uUG9wdXBGb2N1cyddKTtcblxuICAgIHZhciBtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlLFxuICAgICAgICB2aXNpYmxlID0gcHJvcHMudmlzaWJsZSxcbiAgICAgICAgaW5wdXRWYWx1ZSA9IHByb3BzLmlucHV0VmFsdWUsXG4gICAgICAgIGRyb3Bkb3duQWxpZ24gPSBwcm9wcy5kcm9wZG93bkFsaWduLFxuICAgICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgICBzaG93U2VhcmNoID0gcHJvcHMuc2hvd1NlYXJjaCxcbiAgICAgICAgZHJvcGRvd25DbGFzc05hbWUgPSBwcm9wcy5kcm9wZG93bkNsYXNzTmFtZSxcbiAgICAgICAgZHJvcGRvd25TdHlsZSA9IHByb3BzLmRyb3Bkb3duU3R5bGUsXG4gICAgICAgIGRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aCA9IHByb3BzLmRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aDtcblxuICAgIHZhciBkcm9wZG93blByZWZpeENscyA9IHRoaXMuZ2V0RHJvcGRvd25QcmVmaXhDbHMoKTtcbiAgICB2YXIgcG9wdXBDbGFzc05hbWUgPSAoX3BvcHVwQ2xhc3NOYW1lID0ge30sIF9wb3B1cENsYXNzTmFtZVtkcm9wZG93bkNsYXNzTmFtZV0gPSAhIWRyb3Bkb3duQ2xhc3NOYW1lLCBfcG9wdXBDbGFzc05hbWVbZHJvcGRvd25QcmVmaXhDbHMgKyAnLS0nICsgKG11bHRpcGxlID8gJ211bHRpcGxlJyA6ICdzaW5nbGUnKV0gPSAxLCBfcG9wdXBDbGFzc05hbWUpO1xuICAgIHZhciBwb3B1cEVsZW1lbnQgPSB0aGlzLmdldERyb3Bkb3duRWxlbWVudCh7XG4gICAgICBtZW51SXRlbXM6IHByb3BzLm9wdGlvbnMsXG4gICAgICBvblBvcHVwRm9jdXM6IG9uUG9wdXBGb2N1cyxcbiAgICAgIG11bHRpcGxlOiBtdWx0aXBsZSxcbiAgICAgIGlucHV0VmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgfSk7XG4gICAgdmFyIGhpZGVBY3Rpb24gPSB2b2lkIDA7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBoaWRlQWN0aW9uID0gW107XG4gICAgfSBlbHNlIGlmIChpc1NpbmdsZU1vZGUocHJvcHMpICYmICFzaG93U2VhcmNoKSB7XG4gICAgICBoaWRlQWN0aW9uID0gWydjbGljayddO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaWRlQWN0aW9uID0gWydibHVyJ107XG4gICAgfVxuICAgIHZhciBwb3B1cFN0eWxlID0gX2V4dGVuZHMoe30sIGRyb3Bkb3duU3R5bGUpO1xuICAgIHZhciB3aWR0aFByb3AgPSBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGggPyAnd2lkdGgnIDogJ21pbldpZHRoJztcbiAgICBpZiAodGhpcy5zdGF0ZS5kcm9wZG93bldpZHRoKSB7XG4gICAgICBwb3B1cFN0eWxlW3dpZHRoUHJvcF0gPSB0aGlzLnN0YXRlLmRyb3Bkb3duV2lkdGggKyAncHgnO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVHJpZ2dlcixcbiAgICAgIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBzaG93QWN0aW9uOiBkaXNhYmxlZCA/IFtdIDogdGhpcy5wcm9wcy5zaG93QWN0aW9uLFxuICAgICAgICBoaWRlQWN0aW9uOiBoaWRlQWN0aW9uLFxuICAgICAgICByZWY6IHRoaXMuc2F2ZVRyaWdnZXJSZWYsXG4gICAgICAgIHBvcHVwUGxhY2VtZW50OiAnYm90dG9tTGVmdCcsXG4gICAgICAgIGJ1aWx0aW5QbGFjZW1lbnRzOiBCVUlMVF9JTl9QTEFDRU1FTlRTLFxuICAgICAgICBwcmVmaXhDbHM6IGRyb3Bkb3duUHJlZml4Q2xzLFxuICAgICAgICBwb3B1cFRyYW5zaXRpb25OYW1lOiB0aGlzLmdldERyb3Bkb3duVHJhbnNpdGlvbk5hbWUoKSxcbiAgICAgICAgb25Qb3B1cFZpc2libGVDaGFuZ2U6IHByb3BzLm9uRHJvcGRvd25WaXNpYmxlQ2hhbmdlLFxuICAgICAgICBwb3B1cDogcG9wdXBFbGVtZW50LFxuICAgICAgICBwb3B1cEFsaWduOiBkcm9wZG93bkFsaWduLFxuICAgICAgICBwb3B1cFZpc2libGU6IHZpc2libGUsXG4gICAgICAgIGdldFBvcHVwQ29udGFpbmVyOiBwcm9wcy5nZXRQb3B1cENvbnRhaW5lcixcbiAgICAgICAgcG9wdXBDbGFzc05hbWU6IGNsYXNzbmFtZXMocG9wdXBDbGFzc05hbWUpLFxuICAgICAgICBwb3B1cFN0eWxlOiBwb3B1cFN0eWxlXG4gICAgICB9KSxcbiAgICAgIHByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gU2VsZWN0VHJpZ2dlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU2VsZWN0VHJpZ2dlci5wcm9wVHlwZXMgPSB7XG4gIG9uUG9wdXBGb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUG9wdXBTY3JvbGw6IFByb3BUeXBlcy5mdW5jLFxuICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICBkcm9wZG93bkFsaWduOiBQcm9wVHlwZXMub2JqZWN0LFxuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBzaG93U2VhcmNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZHJvcGRvd25DbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgaW5wdXRWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZmlsdGVyT3B0aW9uOiBQcm9wVHlwZXMuYW55LFxuICBvcHRpb25zOiBQcm9wVHlwZXMuYW55LFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHBvcHVwQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgc2hvd0FjdGlvbjogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIG1lbnVJdGVtU2VsZWN0ZWRJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKVxufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICB0aGlzLnNldERyb3Bkb3duV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhpczIucHJvcHMuZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB3aWR0aCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF90aGlzMikub2Zmc2V0V2lkdGg7XG4gICAgaWYgKHdpZHRoICE9PSBfdGhpczIuc3RhdGUuZHJvcGRvd25XaWR0aCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHsgZHJvcGRvd25XaWR0aDogd2lkdGggfSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZ2V0SW5uZXJNZW51ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczIuZHJvcGRvd25NZW51UmVmICYmIF90aGlzMi5kcm9wZG93bk1lbnVSZWYubWVudVJlZjtcbiAgfTtcblxuICB0aGlzLmdldFBvcHVwRE9NTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMyLnRyaWdnZXJSZWYuZ2V0UG9wdXBEb21Ob2RlKCk7XG4gIH07XG5cbiAgdGhpcy5nZXREcm9wZG93bkVsZW1lbnQgPSBmdW5jdGlvbiAobmV3UHJvcHMpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHM7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd25NZW51LCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IF90aGlzMi5zYXZlRHJvcGRvd25NZW51UmVmXG4gICAgfSwgbmV3UHJvcHMsIHtcbiAgICAgIHByZWZpeENsczogX3RoaXMyLmdldERyb3Bkb3duUHJlZml4Q2xzKCksXG4gICAgICBvbk1lbnVTZWxlY3Q6IHByb3BzLm9uTWVudVNlbGVjdCxcbiAgICAgIG9uTWVudURlc2VsZWN0OiBwcm9wcy5vbk1lbnVEZXNlbGVjdCxcbiAgICAgIG9uUG9wdXBTY3JvbGw6IHByb3BzLm9uUG9wdXBTY3JvbGwsXG4gICAgICB2YWx1ZTogcHJvcHMudmFsdWUsXG4gICAgICBiYWNrZmlsbFZhbHVlOiBwcm9wcy5iYWNrZmlsbFZhbHVlLFxuICAgICAgZmlyc3RBY3RpdmVWYWx1ZTogcHJvcHMuZmlyc3RBY3RpdmVWYWx1ZSxcbiAgICAgIGRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbjogcHJvcHMuZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uLFxuICAgICAgZHJvcGRvd25NZW51U3R5bGU6IHByb3BzLmRyb3Bkb3duTWVudVN0eWxlLFxuICAgICAgbWVudUl0ZW1TZWxlY3RlZEljb246IHByb3BzLm1lbnVJdGVtU2VsZWN0ZWRJY29uXG4gICAgfSkpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RHJvcGRvd25UcmFuc2l0aW9uTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHM7XG4gICAgdmFyIHRyYW5zaXRpb25OYW1lID0gcHJvcHMudHJhbnNpdGlvbk5hbWU7XG4gICAgaWYgKCF0cmFuc2l0aW9uTmFtZSAmJiBwcm9wcy5hbmltYXRpb24pIHtcbiAgICAgIHRyYW5zaXRpb25OYW1lID0gX3RoaXMyLmdldERyb3Bkb3duUHJlZml4Q2xzKCkgKyAnLScgKyBwcm9wcy5hbmltYXRpb247XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2l0aW9uTmFtZTtcbiAgfTtcblxuICB0aGlzLmdldERyb3Bkb3duUHJlZml4Q2xzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczIucHJvcHMucHJlZml4Q2xzICsgJy1kcm9wZG93bic7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RUcmlnZ2VyO1xuXG5cblNlbGVjdFRyaWdnZXIuZGlzcGxheU5hbWUgPSAnU2VsZWN0VHJpZ2dlcic7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZnVuY3Rpb24gdmFsdWVUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICB2YXIgYmFzaWNUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pO1xuXG4gIHZhciBsYWJlbEluVmFsdWVTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gICAga2V5OiBiYXNpY1R5cGUuaXNSZXF1aXJlZCxcbiAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGVcbiAgfSk7XG4gIGlmIChwcm9wcy5sYWJlbEluVmFsdWUpIHtcbiAgICB2YXIgdmFsaWRhdGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihsYWJlbEluVmFsdWVTaGFwZSksIGxhYmVsSW5WYWx1ZVNoYXBlXSk7XG4gICAgdmFyIGVycm9yID0gdmFsaWRhdGUuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBwcm9wIGAnICsgcHJvcE5hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgJyArICgnd2hlbiB5b3Ugc2V0IGBsYWJlbEluVmFsdWVgIHRvIGB0cnVlYCwgYCcgKyBwcm9wTmFtZSArICdgIHNob3VsZCBpbiAnKSArICdzaGFwZSBvZiBgeyBrZXk6IHN0cmluZyB8IG51bWJlciwgbGFiZWw/OiBSZWFjdE5vZGUgfWAuJyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKChwcm9wcy5tb2RlID09PSAnbXVsdGlwbGUnIHx8IHByb3BzLm1vZGUgPT09ICd0YWdzJyB8fCBwcm9wcy5tdWx0aXBsZSB8fCBwcm9wcy50YWdzKSAmJiBwcm9wc1twcm9wTmFtZV0gPT09ICcnKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBwcm9wIGAnICsgcHJvcE5hbWUgKyAnYCBvZiB0eXBlIGBzdHJpbmdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCAnICsgJ2V4cGVjdGVkIGBhcnJheWAgd2hlbiBgbXVsdGlwbGVgIG9yIGB0YWdzYCBpcyBgdHJ1ZWAuJyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF92YWxpZGF0ZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKGJhc2ljVHlwZSksIGJhc2ljVHlwZV0pO1xuICAgIHJldHVybiBfdmFsaWRhdGUuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmV4cG9ydCB2YXIgU2VsZWN0UHJvcFR5cGVzID0ge1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuICBmaWx0ZXJPcHRpb246IFByb3BUeXBlcy5hbnksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBzaG93U2VhcmNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBhbGxvd0NsZWFyOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd0Fycm93OiBQcm9wVHlwZXMuYm9vbCxcbiAgdGFnczogUHJvcFR5cGVzLmJvb2wsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0cmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb3B0aW9uTGFiZWxQcm9wOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvcHRpb25GaWx0ZXJQcm9wOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhbmltYXRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNob2ljZVRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2VhcmNoOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Qb3B1cFNjcm9sbDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uSW5wdXRLZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5hbnksXG4gIG9uRGVzZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBsYWJlbEluVmFsdWU6IFByb3BUeXBlcy5ib29sLFxuICB2YWx1ZTogdmFsdWVUeXBlLFxuICBkZWZhdWx0VmFsdWU6IHZhbHVlVHlwZSxcbiAgZHJvcGRvd25TdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgbWF4VGFnVGV4dExlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgbWF4VGFnQ291bnQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIG1heFRhZ1BsYWNlaG9sZGVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgdG9rZW5TZXBhcmF0b3JzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgZ2V0SW5wdXRFbGVtZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgc2hvd0FjdGlvbjogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIGNsZWFySWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIGlucHV0SWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIHJlbW92ZUljb246IFByb3BUeXBlcy5ub2RlLFxuICBtZW51SXRlbVNlbGVjdGVkSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSlcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG4vKiBlc2xpbnQgZnVuYy1uYW1lczogMSAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5pbXBvcnQgS2V5Q29kZSBmcm9tICdyYy11dGlsL2VzL0tleUNvZGUnO1xuaW1wb3J0IGNoaWxkcmVuVG9BcnJheSBmcm9tICdyYy11dGlsL2VzL0NoaWxkcmVuL3RvQXJyYXknO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQW5pbWF0ZSBmcm9tICdyYy1hbmltYXRlJztcbmltcG9ydCBjbGFzc2VzIGZyb20gJ2NvbXBvbmVudC1jbGFzc2VzJztcbmltcG9ydCB7IEl0ZW0gYXMgTWVudUl0ZW0sIEl0ZW1Hcm91cCBhcyBNZW51SXRlbUdyb3VwIH0gZnJvbSAncmMtbWVudSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBPcHRpb24gZnJvbSAnLi9PcHRpb24nO1xuXG5pbXBvcnQgeyBnZXRQcm9wVmFsdWUsIGdldFZhbHVlUHJvcFZhbHVlLCBpc0NvbWJvYm94LCBpc011bHRpcGxlT3JUYWdzLCBpc011bHRpcGxlT3JUYWdzT3JDb21ib2JveCwgaXNTaW5nbGVNb2RlLCB0b0FycmF5LCBnZXRNYXBLZXksIGZpbmRJbmRleEluVmFsdWVCeVNpbmdsZVZhbHVlLCBnZXRMYWJlbEZyb21Qcm9wc1ZhbHVlLCBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLCBVTlNFTEVDVEFCTEVfU1RZTEUsIHByZXZlbnREZWZhdWx0RXZlbnQsIGZpbmRGaXJzdE1lbnVJdGVtLCBpbmNsdWRlc1NlcGFyYXRvcnMsIHNwbGl0QnlTZXBhcmF0b3JzLCBkZWZhdWx0RmlsdGVyRm4sIHZhbGlkYXRlT3B0aW9uVmFsdWUsIHNhdmVSZWYsIHRvVGl0bGUgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IFNlbGVjdFRyaWdnZXIgZnJvbSAnLi9TZWxlY3RUcmlnZ2VyJztcbmltcG9ydCB7IFNlbGVjdFByb3BUeXBlcyB9IGZyb20gJy4vUHJvcFR5cGVzJztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGNoYWluaW5nKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZm5zID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZm5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChmbnNbaV0gJiYgdHlwZW9mIGZuc1tpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmbnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG52YXIgU2VsZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNlbGVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2VsZWN0KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICB2YXIgb3B0aW9uc0luZm8gPSBTZWxlY3QuZ2V0T3B0aW9uc0luZm9Gcm9tUHJvcHMocHJvcHMpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IFNlbGVjdC5nZXRWYWx1ZUZyb21Qcm9wcyhwcm9wcywgdHJ1ZSksIC8vIHRydWU6IHVzZSBkZWZhdWx0IHZhbHVlXG4gICAgICBpbnB1dFZhbHVlOiBwcm9wcy5jb21ib2JveCA/IFNlbGVjdC5nZXRJbnB1dFZhbHVlRm9yQ29tYm9ib3gocHJvcHMsIG9wdGlvbnNJbmZvLCB0cnVlIC8vIHVzZSBkZWZhdWx0IHZhbHVlXG4gICAgICApIDogJycsXG4gICAgICBvcGVuOiBwcm9wcy5kZWZhdWx0T3BlbixcbiAgICAgIG9wdGlvbnNJbmZvOiBvcHRpb25zSW5mbyxcbiAgICAgIC8vIGEgZmxhZyBmb3IgYXZpb2QgcmVkdW5kYW50IGdldE9wdGlvbnNJbmZvRnJvbVByb3BzIGNhbGxcbiAgICAgIHNraXBCdWlsZE9wdGlvbnNJbmZvOiB0cnVlXG4gICAgfTtcblxuICAgIF90aGlzLnNhdmVJbnB1dFJlZiA9IHNhdmVSZWYoX3RoaXMsICdpbnB1dFJlZicpO1xuICAgIF90aGlzLnNhdmVJbnB1dE1pcnJvclJlZiA9IHNhdmVSZWYoX3RoaXMsICdpbnB1dE1pcnJvclJlZicpO1xuICAgIF90aGlzLnNhdmVUb3BDdHJsUmVmID0gc2F2ZVJlZihfdGhpcywgJ3RvcEN0cmxSZWYnKTtcbiAgICBfdGhpcy5zYXZlU2VsZWN0VHJpZ2dlclJlZiA9IHNhdmVSZWYoX3RoaXMsICdzZWxlY3RUcmlnZ2VyUmVmJyk7XG4gICAgX3RoaXMuc2F2ZVJvb3RSZWYgPSBzYXZlUmVmKF90aGlzLCAncm9vdFJlZicpO1xuICAgIF90aGlzLnNhdmVTZWxlY3Rpb25SZWYgPSBzYXZlUmVmKF90aGlzLCAnc2VsZWN0aW9uUmVmJyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgU2VsZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBTZWxlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAoaXNNdWx0aXBsZU9yVGFncyh0aGlzLnByb3BzKSkge1xuICAgICAgdmFyIGlucHV0Tm9kZSA9IHRoaXMuZ2V0SW5wdXRET01Ob2RlKCk7XG4gICAgICB2YXIgbWlycm9yTm9kZSA9IHRoaXMuZ2V0SW5wdXRNaXJyb3JET01Ob2RlKCk7XG4gICAgICBpZiAoaW5wdXROb2RlLnZhbHVlKSB7XG4gICAgICAgIGlucHV0Tm9kZS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgICBpbnB1dE5vZGUuc3R5bGUud2lkdGggPSBtaXJyb3JOb2RlLmNsaWVudFdpZHRoICsgJ3B4JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0Tm9kZS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmZvcmNlUG9wdXBBbGlnbigpO1xuICB9O1xuXG4gIFNlbGVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNsZWFyRm9jdXNUaW1lKCk7XG4gICAgdGhpcy5jbGVhckJsdXJUaW1lKCk7XG4gICAgaWYgKHRoaXMuZHJvcGRvd25Db250YWluZXIpIHtcbiAgICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUodGhpcy5kcm9wZG93bkNvbnRhaW5lcik7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuZHJvcGRvd25Db250YWluZXIpO1xuICAgICAgdGhpcy5kcm9wZG93bkNvbnRhaW5lciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIC8vIGNvbWJvYm94IGlnbm9yZVxuXG5cbiAgU2VsZWN0LnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIGlmIChpc1NpbmdsZU1vZGUodGhpcy5wcm9wcykpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uUmVmLmZvY3VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2V0SW5wdXRET01Ob2RlKCkuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgU2VsZWN0LnByb3RvdHlwZS5ibHVyID0gZnVuY3Rpb24gYmx1cigpIHtcbiAgICBpZiAoaXNTaW5nbGVNb2RlKHRoaXMucHJvcHMpKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvblJlZi5ibHVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2V0SW5wdXRET01Ob2RlKCkuYmx1cigpO1xuICAgIH1cbiAgfTtcblxuICBTZWxlY3QucHJvdG90eXBlLnJlbmRlckNsZWFyID0gZnVuY3Rpb24gcmVuZGVyQ2xlYXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgIGFsbG93Q2xlYXIgPSBfcHJvcHMuYWxsb3dDbGVhcixcbiAgICAgICAgY2xlYXJJY29uID0gX3Byb3BzLmNsZWFySWNvbjtcbiAgICB2YXIgX3N0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgdmFsdWUgPSBfc3RhdGUudmFsdWUsXG4gICAgICAgIGlucHV0VmFsdWUgPSBfc3RhdGUuaW5wdXRWYWx1ZTtcblxuICAgIHZhciBjbGVhciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnc3BhbicsXG4gICAgICBfZXh0ZW5kcyh7XG4gICAgICAgIGtleTogJ2NsZWFyJyxcbiAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvbl9fY2xlYXInLFxuICAgICAgICBvbk1vdXNlRG93bjogcHJldmVudERlZmF1bHRFdmVudCxcbiAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRVxuICAgICAgfSwgVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSwge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQ2xlYXJTZWxlY3Rpb25cbiAgICAgIH0pLFxuICAgICAgY2xlYXJJY29uIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdpJyxcbiAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctc2VsZWN0aW9uX19jbGVhci1pY29uJyB9LFxuICAgICAgICAnXFx4RDcnXG4gICAgICApXG4gICAgKTtcbiAgICBpZiAoIWFsbG93Q2xlYXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNDb21ib2JveCh0aGlzLnByb3BzKSkge1xuICAgICAgaWYgKGlucHV0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpbnB1dFZhbHVlIHx8IHZhbHVlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNsZWFyO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBTZWxlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Jvb3RDbHM7XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBtdWx0aXBsZSA9IGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpO1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBpbnB1dEljb24gPSBwcm9wcy5pbnB1dEljb247XG5cbiAgICB2YXIgY3RybE5vZGUgPSB0aGlzLnJlbmRlclRvcENvbnRyb2xOb2RlKCk7XG4gICAgdmFyIG9wZW4gPSB0aGlzLnN0YXRlLm9wZW47XG5cbiAgICBpZiAob3Blbikge1xuICAgICAgdGhpcy5fb3B0aW9ucyA9IHRoaXMucmVuZGVyRmlsdGVyT3B0aW9ucygpO1xuICAgIH1cbiAgICB2YXIgcmVhbE9wZW4gPSB0aGlzLmdldFJlYWxPcGVuU3RhdGUoKTtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnMgfHwgW107XG4gICAgdmFyIGRhdGFPckFyaWFBdHRyaWJ1dGVQcm9wcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGtleSkgJiYgKGtleS5zdWJzdHIoMCwgNSkgPT09ICdkYXRhLScgfHwga2V5LnN1YnN0cigwLCA1KSA9PT0gJ2FyaWEtJyB8fCBrZXkgPT09ICdyb2xlJykpIHtcbiAgICAgICAgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZXh0cmFTZWxlY3Rpb25Qcm9wcyA9IF9leHRlbmRzKHt9LCBkYXRhT3JBcmlhQXR0cmlidXRlUHJvcHMpO1xuICAgIGlmICghaXNNdWx0aXBsZU9yVGFnc09yQ29tYm9ib3gocHJvcHMpKSB7XG4gICAgICBleHRyYVNlbGVjdGlvblByb3BzID0gX2V4dGVuZHMoe30sIGV4dHJhU2VsZWN0aW9uUHJvcHMsIHtcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5RG93bixcbiAgICAgICAgdGFiSW5kZXg6IHByb3BzLmRpc2FibGVkID8gLTEgOiAwXG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIHJvb3RDbHMgPSAoX3Jvb3RDbHMgPSB7fSwgX3Jvb3RDbHNbY2xhc3NOYW1lXSA9ICEhY2xhc3NOYW1lLCBfcm9vdENsc1twcmVmaXhDbHNdID0gMSwgX3Jvb3RDbHNbcHJlZml4Q2xzICsgJy1vcGVuJ10gPSBvcGVuLCBfcm9vdENsc1twcmVmaXhDbHMgKyAnLWZvY3VzZWQnXSA9IG9wZW4gfHwgISF0aGlzLl9mb2N1c2VkLCBfcm9vdENsc1twcmVmaXhDbHMgKyAnLWNvbWJvYm94J10gPSBpc0NvbWJvYm94KHByb3BzKSwgX3Jvb3RDbHNbcHJlZml4Q2xzICsgJy1kaXNhYmxlZCddID0gZGlzYWJsZWQsIF9yb290Q2xzW3ByZWZpeENscyArICctZW5hYmxlZCddID0gIWRpc2FibGVkLCBfcm9vdENsc1twcmVmaXhDbHMgKyAnLWFsbG93LWNsZWFyJ10gPSAhIXByb3BzLmFsbG93Q2xlYXIsIF9yb290Q2xzW3ByZWZpeENscyArICctbm8tYXJyb3cnXSA9ICFwcm9wcy5zaG93QXJyb3csIF9yb290Q2xzKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFNlbGVjdFRyaWdnZXIsXG4gICAgICB7XG4gICAgICAgIG9uUG9wdXBGb2N1czogdGhpcy5vblBvcHVwRm9jdXMsXG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICAgIGRyb3Bkb3duQWxpZ246IHByb3BzLmRyb3Bkb3duQWxpZ24sXG4gICAgICAgIGRyb3Bkb3duQ2xhc3NOYW1lOiBwcm9wcy5kcm9wZG93bkNsYXNzTmFtZSxcbiAgICAgICAgZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoOiBwcm9wcy5kcm9wZG93bk1hdGNoU2VsZWN0V2lkdGgsXG4gICAgICAgIGRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbjogcHJvcHMuZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uLFxuICAgICAgICBkcm9wZG93bk1lbnVTdHlsZTogcHJvcHMuZHJvcGRvd25NZW51U3R5bGUsXG4gICAgICAgIHRyYW5zaXRpb25OYW1lOiBwcm9wcy50cmFuc2l0aW9uTmFtZSxcbiAgICAgICAgYW5pbWF0aW9uOiBwcm9wcy5hbmltYXRpb24sXG4gICAgICAgIHByZWZpeENsczogcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBkcm9wZG93blN0eWxlOiBwcm9wcy5kcm9wZG93blN0eWxlLFxuICAgICAgICBjb21ib2JveDogcHJvcHMuY29tYm9ib3gsXG4gICAgICAgIHNob3dTZWFyY2g6IHByb3BzLnNob3dTZWFyY2gsXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgIG11bHRpcGxlOiBtdWx0aXBsZSxcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICB2aXNpYmxlOiByZWFsT3BlbixcbiAgICAgICAgaW5wdXRWYWx1ZTogc3RhdGUuaW5wdXRWYWx1ZSxcbiAgICAgICAgdmFsdWU6IHN0YXRlLnZhbHVlLFxuICAgICAgICBiYWNrZmlsbFZhbHVlOiBzdGF0ZS5iYWNrZmlsbFZhbHVlLFxuICAgICAgICBmaXJzdEFjdGl2ZVZhbHVlOiBwcm9wcy5maXJzdEFjdGl2ZVZhbHVlLFxuICAgICAgICBvbkRyb3Bkb3duVmlzaWJsZUNoYW5nZTogdGhpcy5vbkRyb3Bkb3duVmlzaWJsZUNoYW5nZSxcbiAgICAgICAgZ2V0UG9wdXBDb250YWluZXI6IHByb3BzLmdldFBvcHVwQ29udGFpbmVyLFxuICAgICAgICBvbk1lbnVTZWxlY3Q6IHRoaXMub25NZW51U2VsZWN0LFxuICAgICAgICBvbk1lbnVEZXNlbGVjdDogdGhpcy5vbk1lbnVEZXNlbGVjdCxcbiAgICAgICAgb25Qb3B1cFNjcm9sbDogcHJvcHMub25Qb3B1cFNjcm9sbCxcbiAgICAgICAgc2hvd0FjdGlvbjogcHJvcHMuc2hvd0FjdGlvbixcbiAgICAgICAgcmVmOiB0aGlzLnNhdmVTZWxlY3RUcmlnZ2VyUmVmLFxuICAgICAgICBtZW51SXRlbVNlbGVjdGVkSWNvbjogcHJvcHMubWVudUl0ZW1TZWxlY3RlZEljb25cbiAgICAgIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiBwcm9wcy5pZCxcbiAgICAgICAgICBzdHlsZTogcHJvcHMuc3R5bGUsXG4gICAgICAgICAgcmVmOiB0aGlzLnNhdmVSb290UmVmLFxuICAgICAgICAgIG9uQmx1cjogdGhpcy5vbk91dGVyQmx1cixcbiAgICAgICAgICBvbkZvY3VzOiB0aGlzLm9uT3V0ZXJGb2N1cyxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzbmFtZXMocm9vdENscylcbiAgICAgICAgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgICByZWY6IHRoaXMuc2F2ZVNlbGVjdGlvblJlZixcbiAgICAgICAgICAgIGtleTogJ3NlbGVjdGlvbicsXG4gICAgICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctc2VsZWN0aW9uXFxuICAgICAgICAgICAgJyArIHByZWZpeENscyArICctc2VsZWN0aW9uLS0nICsgKG11bHRpcGxlID8gJ211bHRpcGxlJyA6ICdzaW5nbGUnKSxcbiAgICAgICAgICAgIHJvbGU6ICdjb21ib2JveCcsXG4gICAgICAgICAgICAnYXJpYS1hdXRvY29tcGxldGUnOiAnbGlzdCcsXG4gICAgICAgICAgICAnYXJpYS1oYXNwb3B1cCc6ICd0cnVlJyxcbiAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogcmVhbE9wZW5cbiAgICAgICAgICB9LCBleHRyYVNlbGVjdGlvblByb3BzKSxcbiAgICAgICAgICBjdHJsTm9kZSxcbiAgICAgICAgICB0aGlzLnJlbmRlckNsZWFyKCksXG4gICAgICAgICAgbXVsdGlwbGUgfHwgIXByb3BzLnNob3dBcnJvdyA/IG51bGwgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgICAgICBrZXk6ICdhcnJvdycsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1hcnJvdycsXG4gICAgICAgICAgICAgIHN0eWxlOiBVTlNFTEVDVEFCTEVfU1RZTEVcbiAgICAgICAgICAgIH0sIFVOU0VMRUNUQUJMRV9BVFRSSUJVVEUsIHtcbiAgICAgICAgICAgICAgb25DbGljazogdGhpcy5vbkFycm93Q2xpY2tcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5wdXRJY29uIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2knLCB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1hcnJvdy1pY29uJyB9KVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFNlbGVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU2VsZWN0LnByb3BUeXBlcyA9IFNlbGVjdFByb3BUeXBlcztcblNlbGVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHByZWZpeENsczogJ3JjLXNlbGVjdCcsXG4gIGRlZmF1bHRPcGVuOiBmYWxzZSxcbiAgbGFiZWxJblZhbHVlOiBmYWxzZSxcbiAgZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uOiB0cnVlLFxuICBzaG93U2VhcmNoOiB0cnVlLFxuICBhbGxvd0NsZWFyOiBmYWxzZSxcbiAgcGxhY2Vob2xkZXI6ICcnLFxuICBvbkNoYW5nZTogbm9vcCxcbiAgb25Gb2N1czogbm9vcCxcbiAgb25CbHVyOiBub29wLFxuICBvblNlbGVjdDogbm9vcCxcbiAgb25TZWFyY2g6IG5vb3AsXG4gIG9uRGVzZWxlY3Q6IG5vb3AsXG4gIG9uSW5wdXRLZXlEb3duOiBub29wLFxuICBzaG93QXJyb3c6IHRydWUsXG4gIGRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aDogdHJ1ZSxcbiAgZHJvcGRvd25TdHlsZToge30sXG4gIGRyb3Bkb3duTWVudVN0eWxlOiB7fSxcbiAgb3B0aW9uRmlsdGVyUHJvcDogJ3ZhbHVlJyxcbiAgb3B0aW9uTGFiZWxQcm9wOiAndmFsdWUnLFxuICBub3RGb3VuZENvbnRlbnQ6ICdOb3QgRm91bmQnLFxuICBiYWNrZmlsbDogZmFsc2UsXG4gIHNob3dBY3Rpb246IFsnY2xpY2snXSxcbiAgdG9rZW5TZXBhcmF0b3JzOiBbXSxcbiAgYXV0b0NsZWFyU2VhcmNoVmFsdWU6IHRydWVcbn07XG5cblNlbGVjdC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgdmFyIG9wdGlvbnNJbmZvID0gcHJldlN0YXRlLnNraXBCdWlsZE9wdGlvbnNJbmZvID8gcHJldlN0YXRlLm9wdGlvbnNJbmZvIDogU2VsZWN0LmdldE9wdGlvbnNJbmZvRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcblxuICB2YXIgbmV3U3RhdGUgPSB7XG4gICAgb3B0aW9uc0luZm86IG9wdGlvbnNJbmZvLFxuICAgIHNraXBCdWlsZE9wdGlvbnNJbmZvOiBmYWxzZVxuICB9O1xuXG4gIGlmICgnb3BlbicgaW4gbmV4dFByb3BzKSB7XG4gICAgbmV3U3RhdGUub3BlbiA9IG5leHRQcm9wcy5vcGVuO1xuICB9XG5cbiAgaWYgKCd2YWx1ZScgaW4gbmV4dFByb3BzKSB7XG4gICAgdmFyIHZhbHVlID0gU2VsZWN0LmdldFZhbHVlRnJvbVByb3BzKG5leHRQcm9wcyk7XG4gICAgbmV3U3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAobmV4dFByb3BzLmNvbWJvYm94KSB7XG4gICAgICBuZXdTdGF0ZS5pbnB1dFZhbHVlID0gU2VsZWN0LmdldElucHV0VmFsdWVGb3JDb21ib2JveChuZXh0UHJvcHMsIG9wdGlvbnNJbmZvKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld1N0YXRlO1xufTtcblxuU2VsZWN0LmdldE9wdGlvbnNGcm9tQ2hpbGRyZW4gPSBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNoaWxkLnR5cGUuaXNTZWxlY3RPcHRHcm91cCkge1xuICAgICAgU2VsZWN0LmdldE9wdGlvbnNGcm9tQ2hpbGRyZW4oY2hpbGQucHJvcHMuY2hpbGRyZW4sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuU2VsZWN0LmdldElucHV0VmFsdWVGb3JDb21ib2JveCA9IGZ1bmN0aW9uIChwcm9wcywgb3B0aW9uc0luZm8sIHVzZURlZmF1bHRWYWx1ZSkge1xuICB2YXIgdmFsdWUgPSBbXTtcbiAgaWYgKCd2YWx1ZScgaW4gcHJvcHMgJiYgIXVzZURlZmF1bHRWYWx1ZSkge1xuICAgIHZhbHVlID0gdG9BcnJheShwcm9wcy52YWx1ZSk7XG4gIH1cbiAgaWYgKCdkZWZhdWx0VmFsdWUnIGluIHByb3BzICYmIHVzZURlZmF1bHRWYWx1ZSkge1xuICAgIHZhbHVlID0gdG9BcnJheShwcm9wcy5kZWZhdWx0VmFsdWUpO1xuICB9XG4gIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICB2YWx1ZSA9IHZhbHVlWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgbGFiZWwgPSB2YWx1ZTtcbiAgaWYgKHByb3BzLmxhYmVsSW5WYWx1ZSkge1xuICAgIGxhYmVsID0gdmFsdWUubGFiZWw7XG4gIH0gZWxzZSBpZiAob3B0aW9uc0luZm9bZ2V0TWFwS2V5KHZhbHVlKV0pIHtcbiAgICBsYWJlbCA9IG9wdGlvbnNJbmZvW2dldE1hcEtleSh2YWx1ZSldLmxhYmVsO1xuICB9XG4gIGlmIChsYWJlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGFiZWwgPSAnJztcbiAgfVxuICByZXR1cm4gbGFiZWw7XG59O1xuXG5TZWxlY3QuZ2V0TGFiZWxGcm9tT3B0aW9uID0gZnVuY3Rpb24gKHByb3BzLCBvcHRpb24pIHtcbiAgcmV0dXJuIGdldFByb3BWYWx1ZShvcHRpb24sIHByb3BzLm9wdGlvbkxhYmVsUHJvcCk7XG59O1xuXG5TZWxlY3QuZ2V0T3B0aW9uc0luZm9Gcm9tUHJvcHMgPSBmdW5jdGlvbiAocHJvcHMsIHByZVN0YXRlKSB7XG4gIHZhciBvcHRpb25zID0gU2VsZWN0LmdldE9wdGlvbnNGcm9tQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgb3B0aW9uc0luZm8gPSB7fTtcbiAgb3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICB2YXIgc2luZ2xlVmFsdWUgPSBnZXRWYWx1ZVByb3BWYWx1ZShvcHRpb24pO1xuICAgIG9wdGlvbnNJbmZvW2dldE1hcEtleShzaW5nbGVWYWx1ZSldID0ge1xuICAgICAgb3B0aW9uOiBvcHRpb24sXG4gICAgICB2YWx1ZTogc2luZ2xlVmFsdWUsXG4gICAgICBsYWJlbDogU2VsZWN0LmdldExhYmVsRnJvbU9wdGlvbihwcm9wcywgb3B0aW9uKSxcbiAgICAgIHRpdGxlOiBvcHRpb24ucHJvcHMudGl0bGVcbiAgICB9O1xuICB9KTtcbiAgaWYgKHByZVN0YXRlKSB7XG4gICAgLy8ga2VlcCBvcHRpb24gaW5mbyBpbiBwcmUgc3RhdGUgdmFsdWUuXG4gICAgdmFyIG9sZE9wdGlvbnNJbmZvID0gcHJlU3RhdGUub3B0aW9uc0luZm87XG4gICAgdmFyIHZhbHVlID0gcHJlU3RhdGUudmFsdWU7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgdmFyIGtleSA9IGdldE1hcEtleSh2KTtcbiAgICAgIGlmICghb3B0aW9uc0luZm9ba2V5XSAmJiBvbGRPcHRpb25zSW5mb1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0aW9uc0luZm9ba2V5XSA9IG9sZE9wdGlvbnNJbmZvW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNJbmZvO1xufTtcblxuU2VsZWN0LmdldFZhbHVlRnJvbVByb3BzID0gZnVuY3Rpb24gKHByb3BzLCB1c2VEZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHZhbHVlID0gW107XG4gIGlmICgndmFsdWUnIGluIHByb3BzICYmICF1c2VEZWZhdWx0VmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvQXJyYXkocHJvcHMudmFsdWUpO1xuICB9XG4gIGlmICgnZGVmYXVsdFZhbHVlJyBpbiBwcm9wcyAmJiB1c2VEZWZhdWx0VmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvQXJyYXkocHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgfVxuICBpZiAocHJvcHMubGFiZWxJblZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiB2LmtleTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIHRoaXMub25JbnB1dENoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB0b2tlblNlcGFyYXRvcnMgPSBfdGhpczIucHJvcHMudG9rZW5TZXBhcmF0b3JzO1xuXG4gICAgdmFyIHZhbCA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICBpZiAoaXNNdWx0aXBsZU9yVGFncyhfdGhpczIucHJvcHMpICYmIHRva2VuU2VwYXJhdG9ycy5sZW5ndGggJiYgaW5jbHVkZXNTZXBhcmF0b3JzKHZhbCwgdG9rZW5TZXBhcmF0b3JzKSkge1xuICAgICAgdmFyIG5leHRWYWx1ZSA9IF90aGlzMi5nZXRWYWx1ZUJ5SW5wdXQodmFsKTtcbiAgICAgIGlmIChuZXh0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBfdGhpczIuZmlyZUNoYW5nZShuZXh0VmFsdWUpO1xuICAgICAgfVxuICAgICAgX3RoaXMyLnNldE9wZW5TdGF0ZShmYWxzZSwgdHJ1ZSk7XG4gICAgICBfdGhpczIuc2V0SW5wdXRWYWx1ZSgnJywgZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfdGhpczIuc2V0SW5wdXRWYWx1ZSh2YWwpO1xuICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICBvcGVuOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKGlzQ29tYm9ib3goX3RoaXMyLnByb3BzKSkge1xuICAgICAgX3RoaXMyLmZpcmVDaGFuZ2UoW3ZhbF0pO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uRHJvcGRvd25WaXNpYmxlQ2hhbmdlID0gZnVuY3Rpb24gKG9wZW4pIHtcbiAgICBpZiAob3BlbiAmJiAhX3RoaXMyLl9mb2N1c2VkKSB7XG4gICAgICBfdGhpczIuY2xlYXJCbHVyVGltZSgpO1xuICAgICAgX3RoaXMyLnRpbWVvdXRGb2N1cygpO1xuICAgICAgX3RoaXMyLl9mb2N1c2VkID0gdHJ1ZTtcbiAgICAgIF90aGlzMi51cGRhdGVGb2N1c0NsYXNzTmFtZSgpO1xuICAgIH1cbiAgICBfdGhpczIuc2V0T3BlblN0YXRlKG9wZW4pO1xuICB9O1xuXG4gIHRoaXMub25LZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIG9wZW4gPSBfdGhpczIuc3RhdGUub3BlbjtcbiAgICB2YXIgZGlzYWJsZWQgPSBfdGhpczIucHJvcHMuZGlzYWJsZWQ7XG5cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGtleUNvZGUgPSBldmVudC5rZXlDb2RlO1xuICAgIGlmIChvcGVuICYmICFfdGhpczIuZ2V0SW5wdXRET01Ob2RlKCkpIHtcbiAgICAgIF90aGlzMi5vbklucHV0S2V5RG93bihldmVudCk7XG4gICAgfSBlbHNlIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLkVOVEVSIHx8IGtleUNvZGUgPT09IEtleUNvZGUuRE9XTikge1xuICAgICAgaWYgKCFvcGVuKSBfdGhpczIuc2V0T3BlblN0YXRlKHRydWUpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbklucHV0S2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHN0YXRlID0gX3RoaXMyLnN0YXRlO1xuICAgIHZhciBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICBpZiAoaXNNdWx0aXBsZU9yVGFncyhwcm9wcykgJiYgIWV2ZW50LnRhcmdldC52YWx1ZSAmJiBrZXlDb2RlID09PSBLZXlDb2RlLkJBQ0tTUEFDRSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuXG4gICAgICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIF90aGlzMi5yZW1vdmVTZWxlY3RlZCh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLkRPV04pIHtcbiAgICAgIGlmICghc3RhdGUub3Blbikge1xuICAgICAgICBfdGhpczIub3BlbklmSGFzQ2hpbGRyZW4oKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IEtleUNvZGUuRU5URVIgJiYgc3RhdGUub3Blbikge1xuICAgICAgLy8gQXZpb2QgdHJpZ2dlciBmb3JtIHN1Ym1pdCB3aGVuIHNlbGVjdCBpdGVtXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xMDg2MVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IEtleUNvZGUuRVNDKSB7XG4gICAgICBpZiAoc3RhdGUub3Blbikge1xuICAgICAgICBfdGhpczIuc2V0T3BlblN0YXRlKGZhbHNlKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF90aGlzMi5nZXRSZWFsT3BlblN0YXRlKHN0YXRlKSkge1xuICAgICAgdmFyIG1lbnUgPSBfdGhpczIuc2VsZWN0VHJpZ2dlclJlZi5nZXRJbm5lck1lbnUoKTtcbiAgICAgIGlmIChtZW51ICYmIG1lbnUub25LZXlEb3duKGV2ZW50LCBfdGhpczIuaGFuZGxlQmFja2ZpbGwpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uTWVudVNlbGVjdCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGl0ZW0gPSBfcmVmLml0ZW07XG5cbiAgICBpZiAoIWl0ZW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBfdGhpczIuc3RhdGUudmFsdWU7XG4gICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzO1xuICAgIHZhciBzZWxlY3RlZFZhbHVlID0gZ2V0VmFsdWVQcm9wVmFsdWUoaXRlbSk7XG4gICAgdmFyIGxhc3RWYWx1ZSA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdO1xuICAgIF90aGlzMi5maXJlU2VsZWN0KHNlbGVjdGVkVmFsdWUpO1xuICAgIGlmIChpc011bHRpcGxlT3JUYWdzKHByb3BzKSkge1xuICAgICAgaWYgKGZpbmRJbmRleEluVmFsdWVCeVNpbmdsZVZhbHVlKHZhbHVlLCBzZWxlY3RlZFZhbHVlKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5jb25jYXQoW3NlbGVjdGVkVmFsdWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxhc3RWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIGxhc3RWYWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZSAmJiBzZWxlY3RlZFZhbHVlICE9PSBfdGhpczIuc3RhdGUuYmFja2ZpbGxWYWx1ZSkge1xuICAgICAgICBfdGhpczIuc2V0T3BlblN0YXRlKGZhbHNlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBbc2VsZWN0ZWRWYWx1ZV07XG4gICAgICBfdGhpczIuc2V0T3BlblN0YXRlKGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gICAgX3RoaXMyLmZpcmVDaGFuZ2UodmFsdWUpO1xuICAgIHZhciBpbnB1dFZhbHVlID0gdm9pZCAwO1xuICAgIGlmIChpc0NvbWJvYm94KHByb3BzKSkge1xuICAgICAgaW5wdXRWYWx1ZSA9IGdldFByb3BWYWx1ZShpdGVtLCBwcm9wcy5vcHRpb25MYWJlbFByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFZhbHVlID0gJyc7XG4gICAgfVxuICAgIGlmIChwcm9wcy5hdXRvQ2xlYXJTZWFyY2hWYWx1ZSkge1xuICAgICAgX3RoaXMyLnNldElucHV0VmFsdWUoaW5wdXRWYWx1ZSwgZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uTWVudURlc2VsZWN0ID0gZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIGl0ZW0gPSBfcmVmMi5pdGVtLFxuICAgICAgICBkb21FdmVudCA9IF9yZWYyLmRvbUV2ZW50O1xuXG4gICAgaWYgKGRvbUV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyAmJiBkb21FdmVudC5rZXlDb2RlID09PSBLZXlDb2RlLkVOVEVSKSB7XG4gICAgICBfdGhpczIucmVtb3ZlU2VsZWN0ZWQoZ2V0VmFsdWVQcm9wVmFsdWUoaXRlbSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZG9tRXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgX3RoaXMyLnJlbW92ZVNlbGVjdGVkKGdldFZhbHVlUHJvcFZhbHVlKGl0ZW0pKTtcbiAgICB9XG4gICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzO1xuXG4gICAgaWYgKHByb3BzLmF1dG9DbGVhclNlYXJjaFZhbHVlKSB7XG4gICAgICBfdGhpczIuc2V0SW5wdXRWYWx1ZSgnJywgZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uQXJyb3dDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKCFfdGhpczIucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIF90aGlzMi5zZXRPcGVuU3RhdGUoIV90aGlzMi5zdGF0ZS5vcGVuLCAhX3RoaXMyLnN0YXRlLm9wZW4pO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uUGxhY2Vob2xkZXJDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX3RoaXMyLmdldElucHV0RE9NTm9kZSgpKSB7XG4gICAgICBfdGhpczIuZ2V0SW5wdXRET01Ob2RlKCkuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbk91dGVyRm9jdXMgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChfdGhpczIucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3RoaXMyLmNsZWFyQmx1clRpbWUoKTtcbiAgICBpZiAoIWlzTXVsdGlwbGVPclRhZ3NPckNvbWJvYm94KF90aGlzMi5wcm9wcykgJiYgZS50YXJnZXQgPT09IF90aGlzMi5nZXRJbnB1dERPTU5vZGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoX3RoaXMyLl9mb2N1c2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF90aGlzMi5fZm9jdXNlZCA9IHRydWU7XG4gICAgX3RoaXMyLnVwZGF0ZUZvY3VzQ2xhc3NOYW1lKCk7XG4gICAgX3RoaXMyLnRpbWVvdXRGb2N1cygpO1xuICB9O1xuXG4gIHRoaXMub25Qb3B1cEZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGZpeCBpZSBzY3JvbGxiYXIsIGZvY3VzIGVsZW1lbnQgYWdhaW5cbiAgICBfdGhpczIubWF5YmVGb2N1cyh0cnVlLCB0cnVlKTtcbiAgfTtcblxuICB0aGlzLm9uT3V0ZXJCbHVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoX3RoaXMyLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF90aGlzMi5ibHVyVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5fZm9jdXNlZCA9IGZhbHNlO1xuICAgICAgX3RoaXMyLnVwZGF0ZUZvY3VzQ2xhc3NOYW1lKCk7XG4gICAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHM7XG4gICAgICB2YXIgdmFsdWUgPSBfdGhpczIuc3RhdGUudmFsdWU7XG4gICAgICB2YXIgaW5wdXRWYWx1ZSA9IF90aGlzMi5zdGF0ZS5pbnB1dFZhbHVlO1xuXG4gICAgICBpZiAoaXNTaW5nbGVNb2RlKHByb3BzKSAmJiBwcm9wcy5zaG93U2VhcmNoICYmIGlucHV0VmFsdWUgJiYgcHJvcHMuZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gX3RoaXMyLl9vcHRpb25zIHx8IFtdO1xuICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZmlyc3RPcHRpb24gPSBmaW5kRmlyc3RNZW51SXRlbShvcHRpb25zKTtcbiAgICAgICAgICBpZiAoZmlyc3RPcHRpb24pIHtcbiAgICAgICAgICAgIHZhbHVlID0gW2dldFZhbHVlUHJvcFZhbHVlKGZpcnN0T3B0aW9uKV07XG4gICAgICAgICAgICBfdGhpczIuZmlyZUNoYW5nZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpICYmIGlucHV0VmFsdWUpIHtcbiAgICAgICAgLy8gd2h5IG5vdCB1c2Ugc2V0U3RhdGU/XG4gICAgICAgIF90aGlzMi5zdGF0ZS5pbnB1dFZhbHVlID0gX3RoaXMyLmdldElucHV0RE9NTm9kZSgpLnZhbHVlID0gJyc7XG5cbiAgICAgICAgdmFsdWUgPSBfdGhpczIuZ2V0VmFsdWVCeUlucHV0KGlucHV0VmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIF90aGlzMi5maXJlQ2hhbmdlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3RoaXMyLnNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgICBwcm9wcy5vbkJsdXIoX3RoaXMyLmdldFZMRm9yT25DaGFuZ2UodmFsdWUpKTtcbiAgICB9LCAxMCk7XG4gIH07XG5cbiAgdGhpcy5vbkNsZWFyU2VsZWN0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzO1xuICAgIHZhciBzdGF0ZSA9IF90aGlzMi5zdGF0ZTtcbiAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGlucHV0VmFsdWUgPSBzdGF0ZS5pbnB1dFZhbHVlLFxuICAgICAgICB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKGlucHV0VmFsdWUgfHwgdmFsdWUubGVuZ3RoKSB7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIF90aGlzMi5maXJlQ2hhbmdlKFtdKTtcbiAgICAgIH1cbiAgICAgIF90aGlzMi5zZXRPcGVuU3RhdGUoZmFsc2UsIHRydWUpO1xuICAgICAgaWYgKGlucHV0VmFsdWUpIHtcbiAgICAgICAgX3RoaXMyLnNldElucHV0VmFsdWUoJycpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uQ2hvaWNlQW5pbWF0aW9uTGVhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMyLmZvcmNlUG9wdXBBbGlnbigpO1xuICB9O1xuXG4gIHRoaXMuZ2V0T3B0aW9uSW5mb0J5U2luZ2xlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnNJbmZvKSB7XG4gICAgdmFyIGluZm8gPSB2b2lkIDA7XG4gICAgb3B0aW9uc0luZm8gPSBvcHRpb25zSW5mbyB8fCBfdGhpczIuc3RhdGUub3B0aW9uc0luZm87XG4gICAgaWYgKG9wdGlvbnNJbmZvW2dldE1hcEtleSh2YWx1ZSldKSB7XG4gICAgICBpbmZvID0gb3B0aW9uc0luZm9bZ2V0TWFwS2V5KHZhbHVlKV07XG4gICAgfVxuICAgIGlmIChpbmZvKSB7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gICAgdmFyIGRlZmF1bHRMYWJlbCA9IHZhbHVlO1xuICAgIGlmIChfdGhpczIucHJvcHMubGFiZWxJblZhbHVlKSB7XG4gICAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbEZyb21Qcm9wc1ZhbHVlKF90aGlzMi5wcm9wcy52YWx1ZSwgdmFsdWUpO1xuICAgICAgaWYgKGxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVmYXVsdExhYmVsID0gbGFiZWw7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBkZWZhdWx0SW5mbyA9IHtcbiAgICAgIG9wdGlvbjogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgT3B0aW9uLFxuICAgICAgICB7IHZhbHVlOiB2YWx1ZSwga2V5OiB2YWx1ZSB9LFxuICAgICAgICB2YWx1ZVxuICAgICAgKSxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGxhYmVsOiBkZWZhdWx0TGFiZWxcbiAgICB9O1xuICAgIHJldHVybiBkZWZhdWx0SW5mbztcbiAgfTtcblxuICB0aGlzLmdldE9wdGlvbkJ5U2luZ2xlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgX2dldE9wdGlvbkluZm9CeVNpbmdsID0gX3RoaXMyLmdldE9wdGlvbkluZm9CeVNpbmdsZVZhbHVlKHZhbHVlKSxcbiAgICAgICAgb3B0aW9uID0gX2dldE9wdGlvbkluZm9CeVNpbmdsLm9wdGlvbjtcblxuICAgIHJldHVybiBvcHRpb247XG4gIH07XG5cbiAgdGhpcy5nZXRPcHRpb25zQnlTaW5nbGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICByZXR1cm4gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBfdGhpczIuZ2V0T3B0aW9uQnlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5nZXRWYWx1ZUJ5TGFiZWwgPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICBpZiAobGFiZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IG51bGw7XG4gICAgT2JqZWN0LmtleXMoX3RoaXMyLnN0YXRlLm9wdGlvbnNJbmZvKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBpbmZvID0gX3RoaXMyLnN0YXRlLm9wdGlvbnNJbmZvW2tleV07XG4gICAgICBpZiAodG9BcnJheShpbmZvLmxhYmVsKS5qb2luKCcnKSA9PT0gbGFiZWwpIHtcbiAgICAgICAgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICB0aGlzLmdldFZMQnlTaW5nbGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChfdGhpczIucHJvcHMubGFiZWxJblZhbHVlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IHZhbHVlLFxuICAgICAgICBsYWJlbDogX3RoaXMyLmdldExhYmVsQnlTaW5nbGVWYWx1ZSh2YWx1ZSlcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICB0aGlzLmdldFZMRm9yT25DaGFuZ2UgPSBmdW5jdGlvbiAodmxzXykge1xuICAgIHZhciB2bHMgPSB2bHNfO1xuICAgIGlmICh2bHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFfdGhpczIucHJvcHMubGFiZWxJblZhbHVlKSB7XG4gICAgICAgIHZscyA9IHZscy5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bHMgPSB2bHMubWFwKGZ1bmN0aW9uICh2bCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IHZsLFxuICAgICAgICAgICAgbGFiZWw6IF90aGlzMi5nZXRMYWJlbEJ5U2luZ2xlVmFsdWUodmwpXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNNdWx0aXBsZU9yVGFncyhfdGhpczIucHJvcHMpID8gdmxzIDogdmxzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gdmxzO1xuICB9O1xuXG4gIHRoaXMuZ2V0TGFiZWxCeVNpbmdsZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zSW5mbykge1xuICAgIHZhciBfZ2V0T3B0aW9uSW5mb0J5U2luZ2wyID0gX3RoaXMyLmdldE9wdGlvbkluZm9CeVNpbmdsZVZhbHVlKHZhbHVlLCBvcHRpb25zSW5mbyksXG4gICAgICAgIGxhYmVsID0gX2dldE9wdGlvbkluZm9CeVNpbmdsMi5sYWJlbDtcblxuICAgIHJldHVybiBsYWJlbDtcbiAgfTtcblxuICB0aGlzLmdldERyb3Bkb3duQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3RoaXMyLmRyb3Bkb3duQ29udGFpbmVyKSB7XG4gICAgICBfdGhpczIuZHJvcGRvd25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoX3RoaXMyLmRyb3Bkb3duQ29udGFpbmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzMi5kcm9wZG93bkNvbnRhaW5lcjtcbiAgfTtcblxuICB0aGlzLmdldFBsYWNlaG9sZGVyRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHMsXG4gICAgICAgIHN0YXRlID0gX3RoaXMyLnN0YXRlO1xuXG4gICAgdmFyIGhpZGRlbiA9IGZhbHNlO1xuICAgIGlmIChzdGF0ZS5pbnB1dFZhbHVlKSB7XG4gICAgICBoaWRkZW4gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoc3RhdGUudmFsdWUubGVuZ3RoKSB7XG4gICAgICBoaWRkZW4gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNDb21ib2JveChwcm9wcykgJiYgc3RhdGUudmFsdWUubGVuZ3RoID09PSAxICYmICFzdGF0ZS52YWx1ZVswXSkge1xuICAgICAgaGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICAgIHZhciBwbGFjZWhvbGRlciA9IHByb3BzLnBsYWNlaG9sZGVyO1xuICAgIGlmIChwbGFjZWhvbGRlcikge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgb25Nb3VzZURvd246IHByZXZlbnREZWZhdWx0RXZlbnQsXG4gICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGhpZGRlbiA/ICdub25lJyA6ICdibG9jaydcbiAgICAgICAgICB9LCBVTlNFTEVDVEFCTEVfU1RZTEUpXG4gICAgICAgIH0sIFVOU0VMRUNUQUJMRV9BVFRSSUJVVEUsIHtcbiAgICAgICAgICBvbkNsaWNrOiBfdGhpczIub25QbGFjZWhvbGRlckNsaWNrLFxuICAgICAgICAgIGNsYXNzTmFtZTogcHJvcHMucHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX3BsYWNlaG9sZGVyJ1xuICAgICAgICB9KSxcbiAgICAgICAgcGxhY2Vob2xkZXJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHRoaXMuZ2V0SW5wdXRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY2xhc3NuYW1lcztcblxuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICB2YXIgaW5wdXRFbGVtZW50ID0gcHJvcHMuZ2V0SW5wdXRFbGVtZW50ID8gcHJvcHMuZ2V0SW5wdXRFbGVtZW50KCkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgaWQ6IHByb3BzLmlkLCBhdXRvQ29tcGxldGU6ICdvZmYnIH0pO1xuICAgIHZhciBpbnB1dENscyA9IGNsYXNzbmFtZXMoaW5wdXRFbGVtZW50LnByb3BzLmNsYXNzTmFtZSwgKF9jbGFzc25hbWVzID0ge30sIF9jbGFzc25hbWVzW3Byb3BzLnByZWZpeENscyArICctc2VhcmNoX19maWVsZCddID0gdHJ1ZSwgX2NsYXNzbmFtZXMpKTtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy80OTkyI2lzc3VlY29tbWVudC0yODE1NDIxNTlcbiAgICAvLyBBZGQgc3BhY2UgdG8gdGhlIGVuZCBvZiB0aGUgaW5wdXRWYWx1ZSBhcyB0aGUgd2lkdGggbWVhc3VyZW1lbnQgdG9sZXJhbmNlXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiBwcm9wcy5wcmVmaXhDbHMgKyAnLXNlYXJjaF9fZmllbGRfX3dyYXAnIH0sXG4gICAgICBSZWFjdC5jbG9uZUVsZW1lbnQoaW5wdXRFbGVtZW50LCB7XG4gICAgICAgIHJlZjogX3RoaXMyLnNhdmVJbnB1dFJlZixcbiAgICAgICAgb25DaGFuZ2U6IF90aGlzMi5vbklucHV0Q2hhbmdlLFxuICAgICAgICBvbktleURvd246IGNoYWluaW5nKF90aGlzMi5vbklucHV0S2V5RG93biwgaW5wdXRFbGVtZW50LnByb3BzLm9uS2V5RG93biwgX3RoaXMyLnByb3BzLm9uSW5wdXRLZXlEb3duKSxcbiAgICAgICAgdmFsdWU6IF90aGlzMi5zdGF0ZS5pbnB1dFZhbHVlLFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGNsYXNzTmFtZTogaW5wdXRDbHNcbiAgICAgIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7XG4gICAgICAgICAgcmVmOiBfdGhpczIuc2F2ZUlucHV0TWlycm9yUmVmLFxuICAgICAgICAgIGNsYXNzTmFtZTogcHJvcHMucHJlZml4Q2xzICsgJy1zZWFyY2hfX2ZpZWxkX19taXJyb3InXG4gICAgICAgIH0sXG4gICAgICAgIF90aGlzMi5zdGF0ZS5pbnB1dFZhbHVlLFxuICAgICAgICAnXFx4QTAnXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICB0aGlzLmdldElucHV0RE9NTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RoaXMyLnRvcEN0cmxSZWYgPyBfdGhpczIudG9wQ3RybFJlZi5xdWVyeVNlbGVjdG9yKCdpbnB1dCx0ZXh0YXJlYSxkaXZbY29udGVudEVkaXRhYmxlXScpIDogX3RoaXMyLmlucHV0UmVmO1xuICB9O1xuXG4gIHRoaXMuZ2V0SW5wdXRNaXJyb3JET01Ob2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczIuaW5wdXRNaXJyb3JSZWY7XG4gIH07XG5cbiAgdGhpcy5nZXRQb3B1cERPTU5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzMi5zZWxlY3RUcmlnZ2VyUmVmLmdldFBvcHVwRE9NTm9kZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0UG9wdXBNZW51Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczIuc2VsZWN0VHJpZ2dlclJlZi5nZXRJbm5lck1lbnUoKTtcbiAgfTtcblxuICB0aGlzLnNldE9wZW5TdGF0ZSA9IGZ1bmN0aW9uIChvcGVuLCBuZWVkRm9jdXMpIHtcbiAgICB2YXIgcHJvcHMgPSBfdGhpczIucHJvcHMsXG4gICAgICAgIHN0YXRlID0gX3RoaXMyLnN0YXRlO1xuXG4gICAgaWYgKHN0YXRlLm9wZW4gPT09IG9wZW4pIHtcbiAgICAgIF90aGlzMi5tYXliZUZvY3VzKG9wZW4sIG5lZWRGb2N1cyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF90aGlzMi5wcm9wcy5vbkRyb3Bkb3duVmlzaWJsZUNoYW5nZSkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRHJvcGRvd25WaXNpYmxlQ2hhbmdlKG9wZW4pO1xuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdGUgPSB7XG4gICAgICBvcGVuOiBvcGVuLFxuICAgICAgYmFja2ZpbGxWYWx1ZTogdW5kZWZpbmVkXG4gICAgfTtcbiAgICAvLyBjbGVhciBzZWFyY2ggaW5wdXQgdmFsdWUgd2hlbiBvcGVuIGlzIGZhbHNlIGluIHNpbmdsZU1vZGUuXG4gICAgaWYgKCFvcGVuICYmIGlzU2luZ2xlTW9kZShwcm9wcykgJiYgcHJvcHMuc2hvd1NlYXJjaCkge1xuICAgICAgX3RoaXMyLnNldElucHV0VmFsdWUoJycsIGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICBfdGhpczIubWF5YmVGb2N1cyhvcGVuLCBuZWVkRm9jdXMpO1xuICAgIH1cbiAgICBfdGhpczIuc2V0U3RhdGUobmV4dFN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAob3Blbikge1xuICAgICAgICBfdGhpczIubWF5YmVGb2N1cyhvcGVuLCBuZWVkRm9jdXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuc2V0SW5wdXRWYWx1ZSA9IGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7XG4gICAgdmFyIGZpcmVTZWFyY2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICBpZiAoaW5wdXRWYWx1ZSAhPT0gX3RoaXMyLnN0YXRlLmlucHV0VmFsdWUpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIGlucHV0VmFsdWU6IGlucHV0VmFsdWVcbiAgICAgIH0sIF90aGlzMi5mb3JjZVBvcHVwQWxpZ24pO1xuICAgICAgaWYgKGZpcmVTZWFyY2gpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uU2VhcmNoKGlucHV0VmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldFZhbHVlQnlJbnB1dCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgX3Byb3BzMiA9IF90aGlzMi5wcm9wcyxcbiAgICAgICAgbXVsdGlwbGUgPSBfcHJvcHMyLm11bHRpcGxlLFxuICAgICAgICB0b2tlblNlcGFyYXRvcnMgPSBfcHJvcHMyLnRva2VuU2VwYXJhdG9ycztcblxuICAgIHZhciBuZXh0VmFsdWUgPSBfdGhpczIuc3RhdGUudmFsdWU7XG4gICAgdmFyIGhhc05ld1ZhbHVlID0gZmFsc2U7XG4gICAgc3BsaXRCeVNlcGFyYXRvcnMoc3RyaW5nLCB0b2tlblNlcGFyYXRvcnMpLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRWYWx1ZSA9IFtsYWJlbF07XG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMyLmdldFZhbHVlQnlMYWJlbChsYWJlbCk7XG4gICAgICAgIGlmICh2YWx1ZSAmJiBmaW5kSW5kZXhJblZhbHVlQnlTaW5nbGVWYWx1ZShuZXh0VmFsdWUsIHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgICAgICBuZXh0VmFsdWUgPSBuZXh0VmFsdWUuY29uY2F0KHZhbHVlKTtcbiAgICAgICAgICBoYXNOZXdWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgX3RoaXMyLmZpcmVTZWxlY3QodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0YWdcbiAgICAgICAgaWYgKGZpbmRJbmRleEluVmFsdWVCeVNpbmdsZVZhbHVlKG5leHRWYWx1ZSwgbGFiZWwpID09PSAtMSkge1xuICAgICAgICAgIG5leHRWYWx1ZSA9IG5leHRWYWx1ZS5jb25jYXQoc2VsZWN0ZWRWYWx1ZSk7XG4gICAgICAgICAgaGFzTmV3VmFsdWUgPSB0cnVlO1xuICAgICAgICAgIF90aGlzMi5maXJlU2VsZWN0KGxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBoYXNOZXdWYWx1ZSA/IG5leHRWYWx1ZSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLmdldFJlYWxPcGVuU3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB2YXIgb3BlbiA9IChzdGF0ZSB8fCBfdGhpczIuc3RhdGUpLm9wZW47XG4gICAgdmFyIG9wdGlvbnMgPSBfdGhpczIuX29wdGlvbnMgfHwgW107XG4gICAgaWYgKGlzTXVsdGlwbGVPclRhZ3NPckNvbWJvYm94KF90aGlzMi5wcm9wcykgfHwgIV90aGlzMi5wcm9wcy5zaG93U2VhcmNoKSB7XG4gICAgICBpZiAob3BlbiAmJiAhb3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgb3BlbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3BlbjtcbiAgfTtcblxuICB0aGlzLmhhbmRsZUJhY2tmaWxsID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoIV90aGlzMi5wcm9wcy5iYWNrZmlsbCB8fCAhKGlzU2luZ2xlTW9kZShfdGhpczIucHJvcHMpIHx8IGlzQ29tYm9ib3goX3RoaXMyLnByb3BzKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gZ2V0VmFsdWVQcm9wVmFsdWUoaXRlbSk7XG5cbiAgICBpZiAoaXNDb21ib2JveChfdGhpczIucHJvcHMpKSB7XG4gICAgICBfdGhpczIuc2V0SW5wdXRWYWx1ZShrZXksIGZhbHNlKTtcbiAgICB9XG5cbiAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgdmFsdWU6IFtrZXldLFxuICAgICAgYmFja2ZpbGxWYWx1ZToga2V5XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5maWx0ZXJPcHRpb24gPSBmdW5jdGlvbiAoaW5wdXQsIGNoaWxkKSB7XG4gICAgdmFyIGRlZmF1bHRGaWx0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGRlZmF1bHRGaWx0ZXJGbjtcbiAgICB2YXIgdmFsdWUgPSBfdGhpczIuc3RhdGUudmFsdWU7XG5cbiAgICB2YXIgbGFzdFZhbHVlID0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV07XG4gICAgaWYgKCFpbnB1dCB8fCBsYXN0VmFsdWUgJiYgbGFzdFZhbHVlID09PSBfdGhpczIuc3RhdGUuYmFja2ZpbGxWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBmaWx0ZXJGbiA9IF90aGlzMi5wcm9wcy5maWx0ZXJPcHRpb247XG4gICAgaWYgKCdmaWx0ZXJPcHRpb24nIGluIF90aGlzMi5wcm9wcykge1xuICAgICAgaWYgKF90aGlzMi5wcm9wcy5maWx0ZXJPcHRpb24gPT09IHRydWUpIHtcbiAgICAgICAgZmlsdGVyRm4gPSBkZWZhdWx0RmlsdGVyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmaWx0ZXJGbiA9IGRlZmF1bHRGaWx0ZXI7XG4gICAgfVxuXG4gICAgaWYgKCFmaWx0ZXJGbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZmlsdGVyRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBmaWx0ZXJGbi5jYWxsKF90aGlzMiwgaW5wdXQsIGNoaWxkKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIHRoaXMudGltZW91dEZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChfdGhpczIuZm9jdXNUaW1lcikge1xuICAgICAgX3RoaXMyLmNsZWFyRm9jdXNUaW1lKCk7XG4gICAgfVxuICAgIF90aGlzMi5mb2N1c1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25Gb2N1cygpO1xuICAgIH0sIDEwKTtcbiAgfTtcblxuICB0aGlzLmNsZWFyRm9jdXNUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChfdGhpczIuZm9jdXNUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMi5mb2N1c1RpbWVyKTtcbiAgICAgIF90aGlzMi5mb2N1c1RpbWVyID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jbGVhckJsdXJUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChfdGhpczIuYmx1clRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMyLmJsdXJUaW1lcik7XG4gICAgICBfdGhpczIuYmx1clRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy51cGRhdGVGb2N1c0NsYXNzTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcm9vdFJlZiA9IF90aGlzMi5yb290UmVmLFxuICAgICAgICBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICAvLyBhdm9pZCBzZXRTdGF0ZSBhbmQgaXRzIHNpZGUgZWZmZWN0XG5cbiAgICBpZiAoX3RoaXMyLl9mb2N1c2VkKSB7XG4gICAgICBjbGFzc2VzKHJvb3RSZWYpLmFkZChwcm9wcy5wcmVmaXhDbHMgKyAnLWZvY3VzZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xhc3Nlcyhyb290UmVmKS5yZW1vdmUocHJvcHMucHJlZml4Q2xzICsgJy1mb2N1c2VkJyk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMubWF5YmVGb2N1cyA9IGZ1bmN0aW9uIChvcGVuLCBuZWVkRm9jdXMpIHtcbiAgICBpZiAobmVlZEZvY3VzIHx8IG9wZW4pIHtcbiAgICAgIHZhciBpbnB1dCA9IF90aGlzMi5nZXRJbnB1dERPTU5vZGUoKTtcbiAgICAgIHZhciBfZG9jdW1lbnQgPSBkb2N1bWVudCxcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gX2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cbiAgICAgIGlmIChpbnB1dCAmJiAob3BlbiB8fCBpc011bHRpcGxlT3JUYWdzT3JDb21ib2JveChfdGhpczIucHJvcHMpKSkge1xuICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgICAgIF90aGlzMi5fZm9jdXNlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhY3RpdmVFbGVtZW50ICE9PSBfdGhpczIuc2VsZWN0aW9uUmVmKSB7XG4gICAgICAgICAgX3RoaXMyLnNlbGVjdGlvblJlZi5mb2N1cygpO1xuICAgICAgICAgIF90aGlzMi5fZm9jdXNlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5yZW1vdmVTZWxlY3RlZCA9IGZ1bmN0aW9uIChzZWxlY3RlZEtleSwgZSkge1xuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICBpZiAocHJvcHMuZGlzYWJsZWQgfHwgX3RoaXMyLmlzQ2hpbGREaXNhYmxlZChzZWxlY3RlZEtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEbyBub3QgdHJpZ2dlciBUcmlnZ2VyIHBvcHVwXG4gICAgaWYgKGUgJiYgZS5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gX3RoaXMyLnN0YXRlLnZhbHVlLmZpbHRlcihmdW5jdGlvbiAoc2luZ2xlVmFsdWUpIHtcbiAgICAgIHJldHVybiBzaW5nbGVWYWx1ZSAhPT0gc2VsZWN0ZWRLZXk7XG4gICAgfSk7XG4gICAgdmFyIGNhbk11bHRpcGxlID0gaXNNdWx0aXBsZU9yVGFncyhwcm9wcyk7XG5cbiAgICBpZiAoY2FuTXVsdGlwbGUpIHtcbiAgICAgIHZhciBldmVudCA9IHNlbGVjdGVkS2V5O1xuICAgICAgaWYgKHByb3BzLmxhYmVsSW5WYWx1ZSkge1xuICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICBrZXk6IHNlbGVjdGVkS2V5LFxuICAgICAgICAgIGxhYmVsOiBfdGhpczIuZ2V0TGFiZWxCeVNpbmdsZVZhbHVlKHNlbGVjdGVkS2V5KVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcHJvcHMub25EZXNlbGVjdChldmVudCwgX3RoaXMyLmdldE9wdGlvbkJ5U2luZ2xlVmFsdWUoc2VsZWN0ZWRLZXkpKTtcbiAgICB9XG4gICAgX3RoaXMyLmZpcmVDaGFuZ2UodmFsdWUpO1xuICB9O1xuXG4gIHRoaXMub3BlbklmSGFzQ2hpbGRyZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzO1xuICAgIGlmIChSZWFjdC5DaGlsZHJlbi5jb3VudChwcm9wcy5jaGlsZHJlbikgfHwgaXNTaW5nbGVNb2RlKHByb3BzKSkge1xuICAgICAgX3RoaXMyLnNldE9wZW5TdGF0ZSh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5maXJlU2VsZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgX3RoaXMyLnByb3BzLm9uU2VsZWN0KF90aGlzMi5nZXRWTEJ5U2luZ2xlVmFsdWUodmFsdWUpLCBfdGhpczIuZ2V0T3B0aW9uQnlTaW5nbGVWYWx1ZSh2YWx1ZSkpO1xuICB9O1xuXG4gIHRoaXMuZmlyZUNoYW5nZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICBpZiAoISgndmFsdWUnIGluIHByb3BzKSkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9LCBfdGhpczIuZm9yY2VQb3B1cEFsaWduKTtcbiAgICB9XG4gICAgdmFyIHZscyA9IF90aGlzMi5nZXRWTEZvck9uQ2hhbmdlKHZhbHVlKTtcbiAgICB2YXIgb3B0aW9ucyA9IF90aGlzMi5nZXRPcHRpb25zQnlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG4gICAgcHJvcHMub25DaGFuZ2UodmxzLCBpc011bHRpcGxlT3JUYWdzKF90aGlzMi5wcm9wcykgPyBvcHRpb25zIDogb3B0aW9uc1swXSk7XG4gIH07XG5cbiAgdGhpcy5pc0NoaWxkRGlzYWJsZWQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuVG9BcnJheShfdGhpczIucHJvcHMuY2hpbGRyZW4pLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRWYWx1ZSA9IGdldFZhbHVlUHJvcFZhbHVlKGNoaWxkKTtcbiAgICAgIHJldHVybiBjaGlsZFZhbHVlID09PSBrZXkgJiYgY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMuZGlzYWJsZWQ7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5mb3JjZVBvcHVwQWxpZ24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhpczIuc3RhdGUub3Blbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfdGhpczIuc2VsZWN0VHJpZ2dlclJlZi50cmlnZ2VyUmVmLmZvcmNlUG9wdXBBbGlnbigpO1xuICB9O1xuXG4gIHRoaXMucmVuZGVyRmlsdGVyT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5wdXRWYWx1ZSA9IF90aGlzMi5zdGF0ZS5pbnB1dFZhbHVlO1xuICAgIHZhciBfcHJvcHMzID0gX3RoaXMyLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczMuY2hpbGRyZW4sXG4gICAgICAgIHRhZ3MgPSBfcHJvcHMzLnRhZ3MsXG4gICAgICAgIGZpbHRlck9wdGlvbiA9IF9wcm9wczMuZmlsdGVyT3B0aW9uLFxuICAgICAgICBub3RGb3VuZENvbnRlbnQgPSBfcHJvcHMzLm5vdEZvdW5kQ29udGVudDtcblxuICAgIHZhciBtZW51SXRlbXMgPSBbXTtcbiAgICB2YXIgY2hpbGRyZW5LZXlzID0gW107XG4gICAgdmFyIG9wdGlvbnMgPSBfdGhpczIucmVuZGVyRmlsdGVyT3B0aW9uc0Zyb21DaGlsZHJlbihjaGlsZHJlbiwgY2hpbGRyZW5LZXlzLCBtZW51SXRlbXMpO1xuICAgIGlmICh0YWdzKSB7XG4gICAgICAvLyB0YWdzIHZhbHVlIG11c3QgYmUgc3RyaW5nXG4gICAgICB2YXIgdmFsdWUgPSBfdGhpczIuc3RhdGUudmFsdWU7XG4gICAgICB2YWx1ZSA9IHZhbHVlLmZpbHRlcihmdW5jdGlvbiAoc2luZ2xlVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuS2V5cy5pbmRleE9mKHNpbmdsZVZhbHVlKSA9PT0gLTEgJiYgKCFpbnB1dFZhbHVlIHx8IFN0cmluZyhzaW5nbGVWYWx1ZSkuaW5kZXhPZihTdHJpbmcoaW5wdXRWYWx1ZSkpID4gLTEpO1xuICAgICAgfSk7XG4gICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChzaW5nbGVWYWx1ZSkge1xuICAgICAgICB2YXIga2V5ID0gc2luZ2xlVmFsdWU7XG4gICAgICAgIHZhciBtZW51SXRlbSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgTWVudUl0ZW0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRSxcbiAgICAgICAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgICAgICAgYXR0cmlidXRlOiBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLFxuICAgICAgICAgICAgdmFsdWU6IGtleSxcbiAgICAgICAgICAgIGtleToga2V5XG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXlcbiAgICAgICAgKTtcbiAgICAgICAgb3B0aW9ucy5wdXNoKG1lbnVJdGVtKTtcbiAgICAgICAgbWVudUl0ZW1zLnB1c2gobWVudUl0ZW0pO1xuICAgICAgfSk7XG4gICAgICBpZiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICB2YXIgbm90RmluZElucHV0SXRlbSA9IG1lbnVJdGVtcy5ldmVyeShmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgLy8gdGhpcy5maWx0ZXJPcHRpb24gcmV0dXJuIHRydWUgaGFzIHR3byBtZWFuaW5nLFxuICAgICAgICAgIC8vIDEsIHNvbWUgb25lIGV4aXN0cyBhZnRlciBmaWx0ZXJpbmdcbiAgICAgICAgICAvLyAyLCBmaWx0ZXJPcHRpb24gaXMgc2V0IHRvIGZhbHNlXG4gICAgICAgICAgLy8gY29uZGl0aW9uIDIgZG9lcyBub3QgbWVhbiB0aGUgb3B0aW9uIGhhcyBzYW1lIHZhbHVlIHdpdGggaW5wdXRWYWx1ZVxuICAgICAgICAgIHZhciBmaWx0ZXJGbiA9IGZ1bmN0aW9uIGZpbHRlckZuKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlUHJvcFZhbHVlKG9wdGlvbikgPT09IGlucHV0VmFsdWU7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoZmlsdGVyT3B0aW9uICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuICFfdGhpczIuZmlsdGVyT3B0aW9uLmNhbGwoX3RoaXMyLCBpbnB1dFZhbHVlLCBvcHRpb24sIGZpbHRlckZuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICFmaWx0ZXJGbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG5vdEZpbmRJbnB1dEl0ZW0pIHtcbiAgICAgICAgICBvcHRpb25zLnVuc2hpZnQoUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIE1lbnVJdGVtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdHlsZTogVU5TRUxFQ1RBQkxFX1NUWUxFLFxuICAgICAgICAgICAgICByb2xlOiAnb3B0aW9uJyxcbiAgICAgICAgICAgICAgYXR0cmlidXRlOiBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLFxuICAgICAgICAgICAgICB2YWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgICAga2V5OiBpbnB1dFZhbHVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXRWYWx1ZVxuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLmxlbmd0aCAmJiBub3RGb3VuZENvbnRlbnQpIHtcbiAgICAgIG9wdGlvbnMgPSBbUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgTWVudUl0ZW0sXG4gICAgICAgIHtcbiAgICAgICAgICBzdHlsZTogVU5TRUxFQ1RBQkxFX1NUWUxFLFxuICAgICAgICAgIGF0dHJpYnV0ZTogVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSxcbiAgICAgICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgICAgICByb2xlOiAnb3B0aW9uJyxcbiAgICAgICAgICB2YWx1ZTogJ05PVF9GT1VORCcsXG4gICAgICAgICAga2V5OiAnTk9UX0ZPVU5EJ1xuICAgICAgICB9LFxuICAgICAgICBub3RGb3VuZENvbnRlbnRcbiAgICAgICldO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfTtcblxuICB0aGlzLnJlbmRlckZpbHRlck9wdGlvbnNGcm9tQ2hpbGRyZW4gPSBmdW5jdGlvbiAoY2hpbGRyZW4sIGNoaWxkcmVuS2V5cywgbWVudUl0ZW1zKSB7XG4gICAgdmFyIHNlbCA9IFtdO1xuICAgIHZhciBwcm9wcyA9IF90aGlzMi5wcm9wcztcbiAgICB2YXIgaW5wdXRWYWx1ZSA9IF90aGlzMi5zdGF0ZS5pbnB1dFZhbHVlO1xuXG4gICAgdmFyIHRhZ3MgPSBwcm9wcy50YWdzO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgaWYgKCFjaGlsZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY2hpbGQudHlwZS5pc1NlbGVjdE9wdEdyb3VwKSB7XG4gICAgICAgIHZhciBpbm5lckl0ZW1zID0gX3RoaXMyLnJlbmRlckZpbHRlck9wdGlvbnNGcm9tQ2hpbGRyZW4oY2hpbGQucHJvcHMuY2hpbGRyZW4sIGNoaWxkcmVuS2V5cywgbWVudUl0ZW1zKTtcbiAgICAgICAgaWYgKGlubmVySXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGxhYmVsID0gY2hpbGQucHJvcHMubGFiZWw7XG4gICAgICAgICAgdmFyIGtleSA9IGNoaWxkLmtleTtcbiAgICAgICAgICBpZiAoIWtleSAmJiB0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBrZXkgPSBsYWJlbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsYWJlbCAmJiBrZXkpIHtcbiAgICAgICAgICAgIGxhYmVsID0ga2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWwucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgTWVudUl0ZW1Hcm91cCxcbiAgICAgICAgICAgIHsga2V5OiBrZXksIHRpdGxlOiBsYWJlbCB9LFxuICAgICAgICAgICAgaW5uZXJJdGVtc1xuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgd2FybmluZyhjaGlsZC50eXBlLmlzU2VsZWN0T3B0aW9uLCAndGhlIGNoaWxkcmVuIG9mIGBTZWxlY3RgIHNob3VsZCBiZSBgU2VsZWN0Lk9wdGlvbmAgb3IgYFNlbGVjdC5PcHRHcm91cGAsICcgKyAoJ2luc3RlYWQgb2YgYCcgKyAoY2hpbGQudHlwZS5uYW1lIHx8IGNoaWxkLnR5cGUuZGlzcGxheU5hbWUgfHwgY2hpbGQudHlwZSkgKyAnYC4nKSk7XG5cbiAgICAgIHZhciBjaGlsZFZhbHVlID0gZ2V0VmFsdWVQcm9wVmFsdWUoY2hpbGQpO1xuXG4gICAgICB2YWxpZGF0ZU9wdGlvblZhbHVlKGNoaWxkVmFsdWUsIF90aGlzMi5wcm9wcyk7XG5cbiAgICAgIGlmIChfdGhpczIuZmlsdGVyT3B0aW9uKGlucHV0VmFsdWUsIGNoaWxkKSkge1xuICAgICAgICB2YXIgbWVudUl0ZW0gPSBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnVJdGVtLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRSxcbiAgICAgICAgICBhdHRyaWJ1dGU6IFVOU0VMRUNUQUJMRV9BVFRSSUJVVEUsXG4gICAgICAgICAgdmFsdWU6IGNoaWxkVmFsdWUsXG4gICAgICAgICAga2V5OiBjaGlsZFZhbHVlLFxuICAgICAgICAgIHJvbGU6ICdvcHRpb24nXG4gICAgICAgIH0sIGNoaWxkLnByb3BzKSk7XG4gICAgICAgIHNlbC5wdXNoKG1lbnVJdGVtKTtcbiAgICAgICAgbWVudUl0ZW1zLnB1c2gobWVudUl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFncykge1xuICAgICAgICBjaGlsZHJlbktleXMucHVzaChjaGlsZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzZWw7XG4gIH07XG5cbiAgdGhpcy5yZW5kZXJUb3BDb250cm9sTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3N0YXRlMiA9IF90aGlzMi5zdGF0ZSxcbiAgICAgICAgdmFsdWUgPSBfc3RhdGUyLnZhbHVlLFxuICAgICAgICBvcGVuID0gX3N0YXRlMi5vcGVuLFxuICAgICAgICBpbnB1dFZhbHVlID0gX3N0YXRlMi5pbnB1dFZhbHVlO1xuXG4gICAgdmFyIHByb3BzID0gX3RoaXMyLnByb3BzO1xuICAgIHZhciBjaG9pY2VUcmFuc2l0aW9uTmFtZSA9IHByb3BzLmNob2ljZVRyYW5zaXRpb25OYW1lLFxuICAgICAgICBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgIG1heFRhZ1RleHRMZW5ndGggPSBwcm9wcy5tYXhUYWdUZXh0TGVuZ3RoLFxuICAgICAgICBtYXhUYWdDb3VudCA9IHByb3BzLm1heFRhZ0NvdW50LFxuICAgICAgICBtYXhUYWdQbGFjZWhvbGRlciA9IHByb3BzLm1heFRhZ1BsYWNlaG9sZGVyLFxuICAgICAgICBzaG93U2VhcmNoID0gcHJvcHMuc2hvd1NlYXJjaCxcbiAgICAgICAgcmVtb3ZlSWNvbiA9IHByb3BzLnJlbW92ZUljb247XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX3JlbmRlcmVkJztcbiAgICAvLyBzZWFyY2ggaW5wdXQgaXMgaW5zaWRlIHRvcENvbnRyb2xOb2RlIGluIHNpbmdsZSwgbXVsdGlwbGUgJiBjb21ib2JveC4gMjAxNi8wNC8xM1xuICAgIHZhciBpbm5lck5vZGUgPSBudWxsO1xuICAgIGlmIChpc1NpbmdsZU1vZGUocHJvcHMpKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRWYWx1ZSA9IG51bGw7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhciBzaG93U2VsZWN0ZWRWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgb3BhY2l0eSA9IDE7XG4gICAgICAgIGlmICghc2hvd1NlYXJjaCkge1xuICAgICAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgICAgc2hvd1NlbGVjdGVkVmFsdWUgPSAhaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIGlmIChzaG93U2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICBvcGFjaXR5ID0gMC40O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93U2VsZWN0ZWRWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzaW5nbGVWYWx1ZSA9IHZhbHVlWzBdO1xuXG4gICAgICAgIHZhciBfZ2V0T3B0aW9uSW5mb0J5U2luZ2wzID0gX3RoaXMyLmdldE9wdGlvbkluZm9CeVNpbmdsZVZhbHVlKHNpbmdsZVZhbHVlKSxcbiAgICAgICAgICAgIGxhYmVsID0gX2dldE9wdGlvbkluZm9CeVNpbmdsMy5sYWJlbCxcbiAgICAgICAgICAgIHRpdGxlID0gX2dldE9wdGlvbkluZm9CeVNpbmdsMy50aXRsZTtcblxuICAgICAgICBzZWxlY3RlZFZhbHVlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICd2YWx1ZScsXG4gICAgICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctc2VsZWN0aW9uLXNlbGVjdGVkLXZhbHVlJyxcbiAgICAgICAgICAgIHRpdGxlOiB0b1RpdGxlKHRpdGxlIHx8IGxhYmVsKSxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IHNob3dTZWxlY3RlZFZhbHVlID8gJ2Jsb2NrJyA6ICdub25lJyxcbiAgICAgICAgICAgICAgb3BhY2l0eTogb3BhY2l0eVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGFiZWxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICghc2hvd1NlYXJjaCkge1xuICAgICAgICBpbm5lck5vZGUgPSBbc2VsZWN0ZWRWYWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbm5lck5vZGUgPSBbc2VsZWN0ZWRWYWx1ZSwgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctc2VhcmNoICcgKyBwcmVmaXhDbHMgKyAnLXNlYXJjaC0taW5saW5lJyxcbiAgICAgICAgICAgIGtleTogJ2lucHV0JyxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IG9wZW4gPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBfdGhpczIuZ2V0SW5wdXRFbGVtZW50KClcbiAgICAgICAgKV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzZWxlY3RlZFZhbHVlTm9kZXMgPSBbXTtcbiAgICAgIHZhciBsaW1pdGVkQ291bnRWYWx1ZSA9IHZhbHVlO1xuICAgICAgdmFyIG1heFRhZ1BsYWNlaG9sZGVyRWwgPSB2b2lkIDA7XG4gICAgICBpZiAobWF4VGFnQ291bnQgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS5sZW5ndGggPiBtYXhUYWdDb3VudCkge1xuICAgICAgICBsaW1pdGVkQ291bnRWYWx1ZSA9IGxpbWl0ZWRDb3VudFZhbHVlLnNsaWNlKDAsIG1heFRhZ0NvdW50KTtcbiAgICAgICAgdmFyIG9taXR0ZWRWYWx1ZXMgPSBfdGhpczIuZ2V0VkxGb3JPbkNoYW5nZSh2YWx1ZS5zbGljZShtYXhUYWdDb3VudCwgdmFsdWUubGVuZ3RoKSk7XG4gICAgICAgIHZhciBjb250ZW50ID0gJysgJyArICh2YWx1ZS5sZW5ndGggLSBtYXhUYWdDb3VudCkgKyAnIC4uLic7XG4gICAgICAgIGlmIChtYXhUYWdQbGFjZWhvbGRlcikge1xuICAgICAgICAgIGNvbnRlbnQgPSB0eXBlb2YgbWF4VGFnUGxhY2Vob2xkZXIgPT09ICdmdW5jdGlvbicgPyBtYXhUYWdQbGFjZWhvbGRlcihvbWl0dGVkVmFsdWVzKSA6IG1heFRhZ1BsYWNlaG9sZGVyO1xuICAgICAgICB9XG4gICAgICAgIG1heFRhZ1BsYWNlaG9sZGVyRWwgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdsaScsXG4gICAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRVxuICAgICAgICAgIH0sIFVOU0VMRUNUQUJMRV9BVFRSSUJVVEUsIHtcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiBwcmV2ZW50RGVmYXVsdEV2ZW50LFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvbl9fY2hvaWNlICcgKyBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvbl9fY2hvaWNlX19kaXNhYmxlZCcsXG4gICAgICAgICAgICBrZXk6ICdtYXhUYWdQbGFjZWhvbGRlcicsXG4gICAgICAgICAgICB0aXRsZTogdG9UaXRsZShjb250ZW50KVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvbl9fY2hvaWNlX19jb250ZW50JyB9LFxuICAgICAgICAgICAgY29udGVudFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc011bHRpcGxlT3JUYWdzKHByb3BzKSkge1xuICAgICAgICBzZWxlY3RlZFZhbHVlTm9kZXMgPSBsaW1pdGVkQ291bnRWYWx1ZS5tYXAoZnVuY3Rpb24gKHNpbmdsZVZhbHVlKSB7XG4gICAgICAgICAgdmFyIGluZm8gPSBfdGhpczIuZ2V0T3B0aW9uSW5mb0J5U2luZ2xlVmFsdWUoc2luZ2xlVmFsdWUpO1xuICAgICAgICAgIHZhciBjb250ZW50ID0gaW5mby5sYWJlbDtcbiAgICAgICAgICB2YXIgdGl0bGUgPSBpbmZvLnRpdGxlIHx8IGNvbnRlbnQ7XG4gICAgICAgICAgaWYgKG1heFRhZ1RleHRMZW5ndGggJiYgdHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnICYmIGNvbnRlbnQubGVuZ3RoID4gbWF4VGFnVGV4dExlbmd0aCkge1xuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMCwgbWF4VGFnVGV4dExlbmd0aCkgKyAnLi4uJztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGRpc2FibGVkID0gX3RoaXMyLmlzQ2hpbGREaXNhYmxlZChzaW5nbGVWYWx1ZSk7XG4gICAgICAgICAgdmFyIGNob2ljZUNsYXNzTmFtZSA9IGRpc2FibGVkID8gcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX2Nob2ljZSAnICsgcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX2Nob2ljZV9fZGlzYWJsZWQnIDogcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX2Nob2ljZSc7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgICAgICBzdHlsZTogVU5TRUxFQ1RBQkxFX1NUWUxFXG4gICAgICAgICAgICB9LCBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLCB7XG4gICAgICAgICAgICAgIG9uTW91c2VEb3duOiBwcmV2ZW50RGVmYXVsdEV2ZW50LFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNob2ljZUNsYXNzTmFtZSxcbiAgICAgICAgICAgICAga2V5OiBzaW5nbGVWYWx1ZSxcbiAgICAgICAgICAgICAgdGl0bGU6IHRvVGl0bGUodGl0bGUpXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1zZWxlY3Rpb25fX2Nob2ljZV9fY29udGVudCcgfSxcbiAgICAgICAgICAgICAgY29udGVudFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGRpc2FibGVkID8gbnVsbCA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzMi5yZW1vdmVTZWxlY3RlZChzaW5nbGVWYWx1ZSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlbGVjdGlvbl9fY2hvaWNlX19yZW1vdmUnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJlbW92ZUljb24gfHwgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnaScsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctc2VsZWN0aW9uX19jaG9pY2VfX3JlbW92ZS1pY29uJyB9LFxuICAgICAgICAgICAgICAgICdcXHhENydcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKG1heFRhZ1BsYWNlaG9sZGVyRWwpIHtcbiAgICAgICAgc2VsZWN0ZWRWYWx1ZU5vZGVzLnB1c2gobWF4VGFnUGxhY2Vob2xkZXJFbCk7XG4gICAgICB9XG4gICAgICBzZWxlY3RlZFZhbHVlTm9kZXMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnbGknLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNlYXJjaCAnICsgcHJlZml4Q2xzICsgJy1zZWFyY2gtLWlubGluZScsXG4gICAgICAgICAga2V5OiAnX19pbnB1dCdcbiAgICAgICAgfSxcbiAgICAgICAgX3RoaXMyLmdldElucHV0RWxlbWVudCgpXG4gICAgICApKTtcblxuICAgICAgaWYgKGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpICYmIGNob2ljZVRyYW5zaXRpb25OYW1lKSB7XG4gICAgICAgIGlubmVyTm9kZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgQW5pbWF0ZSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBvbkxlYXZlOiBfdGhpczIub25DaG9pY2VBbmltYXRpb25MZWF2ZSxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ3VsJyxcbiAgICAgICAgICAgIHRyYW5zaXRpb25OYW1lOiBjaG9pY2VUcmFuc2l0aW9uTmFtZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VsZWN0ZWRWYWx1ZU5vZGVzXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbm5lck5vZGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICd1bCcsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBzZWxlY3RlZFZhbHVlTm9kZXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHJlZjogX3RoaXMyLnNhdmVUb3BDdHJsUmVmIH0sXG4gICAgICBfdGhpczIuZ2V0UGxhY2Vob2xkZXJFbGVtZW50KCksXG4gICAgICBpbm5lck5vZGVcbiAgICApO1xuICB9O1xufTtcblxuU2VsZWN0LmRpc3BsYXlOYW1lID0gJ1NlbGVjdCc7XG5cbnBvbHlmaWxsKFNlbGVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIE9wdEdyb3VwID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE9wdEdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBPcHRHcm91cCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3B0R3JvdXApO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gT3B0R3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk9wdEdyb3VwLmlzU2VsZWN0T3B0R3JvdXAgPSB0cnVlO1xuZXhwb3J0IGRlZmF1bHQgT3B0R3JvdXA7IiwiaW1wb3J0IFNlbGVjdCBmcm9tICcuL1NlbGVjdCc7XG5pbXBvcnQgT3B0aW9uIGZyb20gJy4vT3B0aW9uJztcbmltcG9ydCB7IFNlbGVjdFByb3BUeXBlcyB9IGZyb20gJy4vUHJvcFR5cGVzJztcbmltcG9ydCBPcHRHcm91cCBmcm9tICcuL09wdEdyb3VwJztcblNlbGVjdC5PcHRpb24gPSBPcHRpb247XG5TZWxlY3QuT3B0R3JvdXAgPSBPcHRHcm91cDtcbmV4cG9ydCB7IE9wdGlvbiwgT3B0R3JvdXAsIFNlbGVjdFByb3BUeXBlcyB9O1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgTG9jYWxlUmVjZWl2ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2NhbGVSZWNlaXZlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2NhbGVSZWNlaXZlcigpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvY2FsZVJlY2VpdmVyKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExvY2FsZVJlY2VpdmVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9jYWxlUmVjZWl2ZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9jYWxlUmVjZWl2ZXIsIFt7XG4gICAgICAgIGtleTogJ2dldExvY2FsZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMb2NhbGUoKSB7XG4gICAgICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICBjb21wb25lbnROYW1lID0gX3Byb3BzLmNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdExvY2FsZSA9IF9wcm9wcy5kZWZhdWx0TG9jYWxlO1xuICAgICAgICAgICAgdmFyIGFudExvY2FsZSA9IHRoaXMuY29udGV4dC5hbnRMb2NhbGU7XG5cbiAgICAgICAgICAgIHZhciBsb2NhbGVGcm9tQ29udGV4dCA9IGFudExvY2FsZSAmJiBhbnRMb2NhbGVbY29tcG9uZW50TmFtZV07XG4gICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHR5cGVvZiBkZWZhdWx0TG9jYWxlID09PSAnZnVuY3Rpb24nID8gZGVmYXVsdExvY2FsZSgpIDogZGVmYXVsdExvY2FsZSwgbG9jYWxlRnJvbUNvbnRleHQgfHwge30pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRMb2NhbGVDb2RlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExvY2FsZUNvZGUoKSB7XG4gICAgICAgICAgICB2YXIgYW50TG9jYWxlID0gdGhpcy5jb250ZXh0LmFudExvY2FsZTtcblxuICAgICAgICAgICAgdmFyIGxvY2FsZUNvZGUgPSBhbnRMb2NhbGUgJiYgYW50TG9jYWxlLmxvY2FsZTtcbiAgICAgICAgICAgIC8vIEhhZCB1c2UgTG9jYWxlUHJvdmlkZSBidXQgZGlkbid0IHNldCBsb2NhbGVcbiAgICAgICAgICAgIGlmIChhbnRMb2NhbGUgJiYgYW50TG9jYWxlLmV4aXN0ICYmICFsb2NhbGVDb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbi11cyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlQ29kZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuZ2V0TG9jYWxlKCksIHRoaXMuZ2V0TG9jYWxlQ29kZSgpKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2NhbGVSZWNlaXZlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgTG9jYWxlUmVjZWl2ZXI7XG5cbkxvY2FsZVJlY2VpdmVyLmNvbnRleHRUeXBlcyA9IHtcbiAgICBhbnRMb2NhbGU6IFByb3BUeXBlcy5vYmplY3Rcbn07IiwiZXhwb3J0IGRlZmF1bHQge1xuICAvLyBPcHRpb25zLmpzeFxuICBpdGVtc19wZXJfcGFnZTogJy8gcGFnZScsXG4gIGp1bXBfdG86ICdHb3RvJyxcbiAganVtcF90b19jb25maXJtOiAnY29uZmlybScsXG4gIHBhZ2U6ICcnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ1ByZXZpb3VzIFBhZ2UnLFxuICBuZXh0X3BhZ2U6ICdOZXh0IFBhZ2UnLFxuICBwcmV2XzU6ICdQcmV2aW91cyA1IFBhZ2VzJyxcbiAgbmV4dF81OiAnTmV4dCA1IFBhZ2VzJyxcbiAgcHJldl8zOiAnUHJldmlvdXMgMyBQYWdlcycsXG4gIG5leHRfMzogJ05leHQgMyBQYWdlcydcbn07IiwidmFyIGxvY2FsZSA9IHtcbiAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCB0aW1lJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IENhbGVuZGFyTG9jYWxlIGZyb20gJ3JjLWNhbGVuZGFyL2VzL2xvY2FsZS9lbl9VUyc7XG5pbXBvcnQgVGltZVBpY2tlckxvY2FsZSBmcm9tICcuLi8uLi90aW1lLXBpY2tlci9sb2NhbGUvZW5fVVMnO1xuLy8gTWVyZ2UgaW50byBhIGxvY2FsZSBvYmplY3RcbnZhciBsb2NhbGUgPSB7XG4gICAgbGFuZzogX2V4dGVuZHMoeyBwbGFjZWhvbGRlcjogJ1NlbGVjdCBkYXRlJywgcmFuZ2VQbGFjZWhvbGRlcjogWydTdGFydCBkYXRlJywgJ0VuZCBkYXRlJ10gfSwgQ2FsZW5kYXJMb2NhbGUpLFxuICAgIHRpbWVQaWNrZXJMb2NhbGU6IF9leHRlbmRzKHt9LCBUaW1lUGlja2VyTG9jYWxlKVxufTtcbi8vIEFsbCBzZXR0aW5ncyBhdDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vYmxvYi9tYXN0ZXIvY29tcG9uZW50cy9kYXRlLXBpY2tlci9sb2NhbGUvZXhhbXBsZS5qc29uXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAncmMtcGFnaW5hdGlvbi9lcy9sb2NhbGUvZW5fVVMnO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi4vZGF0ZS1waWNrZXIvbG9jYWxlL2VuX1VTJztcbmltcG9ydCBUaW1lUGlja2VyIGZyb20gJy4uL3RpbWUtcGlja2VyL2xvY2FsZS9lbl9VUyc7XG5pbXBvcnQgQ2FsZW5kYXIgZnJvbSAnLi4vY2FsZW5kYXIvbG9jYWxlL2VuX1VTJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBsb2NhbGU6ICdlbicsXG4gICAgUGFnaW5hdGlvbjogUGFnaW5hdGlvbixcbiAgICBEYXRlUGlja2VyOiBEYXRlUGlja2VyLFxuICAgIFRpbWVQaWNrZXI6IFRpbWVQaWNrZXIsXG4gICAgQ2FsZW5kYXI6IENhbGVuZGFyLFxuICAgIFRhYmxlOiB7XG4gICAgICAgIGZpbHRlclRpdGxlOiAnRmlsdGVyIG1lbnUnLFxuICAgICAgICBmaWx0ZXJDb25maXJtOiAnT0snLFxuICAgICAgICBmaWx0ZXJSZXNldDogJ1Jlc2V0JyxcbiAgICAgICAgZW1wdHlUZXh0OiAnTm8gZGF0YScsXG4gICAgICAgIHNlbGVjdEFsbDogJ1NlbGVjdCBjdXJyZW50IHBhZ2UnLFxuICAgICAgICBzZWxlY3RJbnZlcnQ6ICdJbnZlcnQgY3VycmVudCBwYWdlJ1xuICAgIH0sXG4gICAgTW9kYWw6IHtcbiAgICAgICAgb2tUZXh0OiAnT0snLFxuICAgICAgICBjYW5jZWxUZXh0OiAnQ2FuY2VsJyxcbiAgICAgICAganVzdE9rVGV4dDogJ09LJ1xuICAgIH0sXG4gICAgUG9wY29uZmlybToge1xuICAgICAgICBva1RleHQ6ICdPSycsXG4gICAgICAgIGNhbmNlbFRleHQ6ICdDYW5jZWwnXG4gICAgfSxcbiAgICBUcmFuc2Zlcjoge1xuICAgICAgICB0aXRsZXM6IFsnJywgJyddLFxuICAgICAgICBub3RGb3VuZENvbnRlbnQ6ICdOb3QgRm91bmQnLFxuICAgICAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ1NlYXJjaCBoZXJlJyxcbiAgICAgICAgaXRlbVVuaXQ6ICdpdGVtJyxcbiAgICAgICAgaXRlbXNVbml0OiAnaXRlbXMnXG4gICAgfSxcbiAgICBTZWxlY3Q6IHtcbiAgICAgICAgbm90Rm91bmRDb250ZW50OiAnTm90IEZvdW5kJ1xuICAgIH0sXG4gICAgVXBsb2FkOiB7XG4gICAgICAgIHVwbG9hZGluZzogJ1VwbG9hZGluZy4uLicsXG4gICAgICAgIHJlbW92ZUZpbGU6ICdSZW1vdmUgZmlsZScsXG4gICAgICAgIHVwbG9hZEVycm9yOiAnVXBsb2FkIGVycm9yJyxcbiAgICAgICAgcHJldmlld0ZpbGU6ICdQcmV2aWV3IGZpbGUnXG4gICAgfVxufTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbnZhciBfX3Jlc3QgPSB0aGlzICYmIHRoaXMuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgICB9aWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgICB9cmV0dXJuIHQ7XG59O1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJjU2VsZWN0LCB7IE9wdGlvbiwgT3B0R3JvdXAgfSBmcm9tICdyYy1zZWxlY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgTG9jYWxlUmVjZWl2ZXIgZnJvbSAnLi4vbG9jYWxlLXByb3ZpZGVyL0xvY2FsZVJlY2VpdmVyJztcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gJy4uL2xvY2FsZS1wcm92aWRlci9kZWZhdWx0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbic7XG52YXIgU2VsZWN0UHJvcFR5cGVzID0ge1xuICAgIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdsYXJnZScsICdzbWFsbCddKSxcbiAgICBub3RGb3VuZENvbnRlbnQ6IFByb3BUeXBlcy5hbnksXG4gICAgc2hvd1NlYXJjaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgb3B0aW9uTGFiZWxQcm9wOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNob2ljZVRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuLy8gPT4gSXQgaXMgbmVlZGxlc3MgdG8gZXhwb3J0IHRoZSBkZWNsYXJhdGlvbiBvZiBiZWxvdyB0d28gaW5uZXIgY29tcG9uZW50cy5cbi8vIGV4cG9ydCB7IE9wdGlvbiwgT3B0R3JvdXAgfTtcblxudmFyIFNlbGVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFNlbGVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBTZWxlY3QocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNlbGVjdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNlbGVjdCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zYXZlU2VsZWN0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIF90aGlzLnJjU2VsZWN0ID0gbm9kZTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMucmVuZGVyU2VsZWN0ID0gZnVuY3Rpb24gKGxvY2FsZSkge1xuICAgICAgICAgICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICBwcmVmaXhDbHMgPSBfYS5wcmVmaXhDbHMsXG4gICAgICAgICAgICAgICAgX2EkY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IF9hJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfYSRjbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgc2l6ZSA9IF9hLnNpemUsXG4gICAgICAgICAgICAgICAgbW9kZSA9IF9hLm1vZGUsXG4gICAgICAgICAgICAgICAgcmVzdFByb3BzID0gX19yZXN0KF9hLCBbXCJwcmVmaXhDbHNcIiwgXCJjbGFzc05hbWVcIiwgXCJzaXplXCIsIFwibW9kZVwiXSk7XG4gICAgICAgICAgICB2YXIgY2xzID0gY2xhc3NOYW1lcygoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBwcmVmaXhDbHMgKyAnLWxnJywgc2l6ZSA9PT0gJ2xhcmdlJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgcHJlZml4Q2xzICsgJy1zbScsIHNpemUgPT09ICdzbWFsbCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB2YXIgb3B0aW9uTGFiZWxQcm9wID0gX3RoaXMucHJvcHMub3B0aW9uTGFiZWxQcm9wO1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNDb21ib2JveCgpKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hpbGRyZW4g5bimIGRvbSDnu5PmnoTml7bvvIzml6Dms5XloavlhaXovpPlhaXmoYZcbiAgICAgICAgICAgICAgICBvcHRpb25MYWJlbFByb3AgPSBvcHRpb25MYWJlbFByb3AgfHwgJ3ZhbHVlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtb2RlQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgIG11bHRpcGxlOiBtb2RlID09PSAnbXVsdGlwbGUnLFxuICAgICAgICAgICAgICAgIHRhZ3M6IG1vZGUgPT09ICd0YWdzJyxcbiAgICAgICAgICAgICAgICBjb21ib2JveDogX3RoaXMuaXNDb21ib2JveCgpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGlucHV0SWNvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyB0eXBlOiAnZG93bicsIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1hcnJvdy1pY29uJyB9KTtcbiAgICAgICAgICAgIHZhciByZW1vdmVJY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IHR5cGU6ICdjbG9zZScsIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1yZW1vdmUtaWNvbicgfSk7XG4gICAgICAgICAgICB2YXIgY2xlYXJJY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IHR5cGU6ICdjbG9zZS1jaXJjbGUnLCB0aGVtZTogJ2ZpbGxlZCcsIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1jbGVhci1pY29uJyB9KTtcbiAgICAgICAgICAgIHZhciBtZW51SXRlbVNlbGVjdGVkSWNvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyB0eXBlOiAnY2hlY2snLCBjbGFzc05hbWU6IHByZWZpeENscyArICctc2VsZWN0ZWQtaWNvbicgfSk7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSY1NlbGVjdCwgX2V4dGVuZHMoeyBpbnB1dEljb246IGlucHV0SWNvbiwgcmVtb3ZlSWNvbjogcmVtb3ZlSWNvbiwgY2xlYXJJY29uOiBjbGVhckljb24sIG1lbnVJdGVtU2VsZWN0ZWRJY29uOiBtZW51SXRlbVNlbGVjdGVkSWNvbiB9LCByZXN0UHJvcHMsIG1vZGVDb25maWcsIHsgcHJlZml4Q2xzOiBwcmVmaXhDbHMsIGNsYXNzTmFtZTogY2xzLCBvcHRpb25MYWJlbFByb3A6IG9wdGlvbkxhYmVsUHJvcCB8fCAnY2hpbGRyZW4nLCBub3RGb3VuZENvbnRlbnQ6IF90aGlzLmdldE5vdEZvdW5kQ29udGVudChsb2NhbGUpLCByZWY6IF90aGlzLnNhdmVTZWxlY3QgfSkpO1xuICAgICAgICB9O1xuICAgICAgICB3YXJuaW5nKHByb3BzLm1vZGUgIT09ICdjb21ib2JveCcsICdUaGUgY29tYm9ib3ggbW9kZSBvZiBTZWxlY3QgaXMgZGVwcmVjYXRlZCwnICsgJ2l0IHdpbGwgYmUgcmVtb3ZlZCBpbiBuZXh0IG1ham9yIHZlcnNpb24sJyArICdwbGVhc2UgdXNlIEF1dG9Db21wbGV0ZSBpbnN0ZWFkJyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2VsZWN0LCBbe1xuICAgICAgICBrZXk6ICdmb2N1cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgICAgIHRoaXMucmNTZWxlY3QuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYmx1cicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgICAgICAgdGhpcy5yY1NlbGVjdC5ibHVyKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldE5vdEZvdW5kQ29udGVudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROb3RGb3VuZENvbnRlbnQobG9jYWxlKSB7XG4gICAgICAgICAgICB2YXIgbm90Rm91bmRDb250ZW50ID0gdGhpcy5wcm9wcy5ub3RGb3VuZENvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tYm9ib3goKSkge1xuICAgICAgICAgICAgICAgIC8vIEF1dG9Db21wbGV0ZSBkb24ndCBoYXZlIG5vdEZvdW5kQ29udGVudCBkZWZhdWx0bHlcbiAgICAgICAgICAgICAgICByZXR1cm4gbm90Rm91bmRDb250ZW50ID09PSB1bmRlZmluZWQgPyBudWxsIDogbm90Rm91bmRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vdEZvdW5kQ29udGVudCA9PT0gdW5kZWZpbmVkID8gbG9jYWxlLm5vdEZvdW5kQ29udGVudCA6IG5vdEZvdW5kQ29udGVudDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaXNDb21ib2JveCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NvbWJvYm94KCkge1xuICAgICAgICAgICAgdmFyIG1vZGUgPSB0aGlzLnByb3BzLm1vZGU7XG5cbiAgICAgICAgICAgIHJldHVybiBtb2RlID09PSAnY29tYm9ib3gnIHx8IG1vZGUgPT09IFNlbGVjdC5TRUNSRVRfQ09NQk9CT1hfTU9ERV9ET19OT1RfVVNFO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgTG9jYWxlUmVjZWl2ZXIsXG4gICAgICAgICAgICAgICAgeyBjb21wb25lbnROYW1lOiAnU2VsZWN0JywgZGVmYXVsdExvY2FsZTogZGVmYXVsdExvY2FsZS5TZWxlY3QgfSxcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclNlbGVjdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTZWxlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDtcblxuU2VsZWN0Lk9wdGlvbiA9IE9wdGlvbjtcblNlbGVjdC5PcHRHcm91cCA9IE9wdEdyb3VwO1xuU2VsZWN0LlNFQ1JFVF9DT01CT0JPWF9NT0RFX0RPX05PVF9VU0UgPSAnU0VDUkVUX0NPTUJPQk9YX01PREVfRE9fTk9UX1VTRSc7XG5TZWxlY3QuZGVmYXVsdFByb3BzID0ge1xuICAgIHByZWZpeENsczogJ2FudC1zZWxlY3QnLFxuICAgIHNob3dTZWFyY2g6IGZhbHNlLFxuICAgIHRyYW5zaXRpb25OYW1lOiAnc2xpZGUtdXAnLFxuICAgIGNob2ljZVRyYW5zaXRpb25OYW1lOiAnem9vbSdcbn07XG5TZWxlY3QucHJvcFR5cGVzID0gU2VsZWN0UHJvcFR5cGVzOyIsImltcG9ydCBjc3NBbmltYXRpb24gZnJvbSAnY3NzLWFuaW1hdGlvbic7XG5pbXBvcnQgcmFmIGZyb20gJ3JhZic7XG5mdW5jdGlvbiBhbmltYXRlKG5vZGUsIHNob3csIGRvbmUpIHtcbiAgICB2YXIgaGVpZ2h0ID0gdm9pZCAwO1xuICAgIHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCA9IHZvaWQgMDtcbiAgICByZXR1cm4gY3NzQW5pbWF0aW9uKG5vZGUsICdhbnQtbW90aW9uLWNvbGxhcHNlJywge1xuICAgICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgICAgICBpZiAoIXNob3cpIHtcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IG5vZGUub2Zmc2V0SGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IG5vZGUub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gJzBweCc7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhY3RpdmU6IGZ1bmN0aW9uIGFjdGl2ZSgpIHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCkge1xuICAgICAgICAgICAgICAgIHJhZi5jYW5jZWwocmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gKHNob3cgPyBoZWlnaHQgOiAwKSArICdweCc7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gc2hvdyA/ICcxJyA6ICcwJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBlbmQ6IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCkge1xuICAgICAgICAgICAgICAgIHJhZi5jYW5jZWwocmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9ICcnO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG52YXIgYW5pbWF0aW9uID0ge1xuICAgIGVudGVyOiBmdW5jdGlvbiBlbnRlcihub2RlLCBkb25lKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRlKG5vZGUsIHRydWUsIGRvbmUpO1xuICAgIH0sXG4gICAgbGVhdmU6IGZ1bmN0aW9uIGxlYXZlKG5vZGUsIGRvbmUpIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGUobm9kZSwgZmFsc2UsIGRvbmUpO1xuICAgIH0sXG4gICAgYXBwZWFyOiBmdW5jdGlvbiBhcHBlYXIobm9kZSwgZG9uZSkge1xuICAgICAgICByZXR1cm4gYW5pbWF0ZShub2RlLCB0cnVlLCBkb25lKTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgYW5pbWF0aW9uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgU3ViTWVudSBhcyBSY1N1Yk1lbnUgfSBmcm9tICdyYy1tZW51JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG52YXIgU3ViTWVudSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFN1Yk1lbnUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gU3ViTWVudSgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1Yk1lbnUpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTdWJNZW51Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3ViTWVudSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXG4gICAgICAgIF90aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpcy5zdWJNZW51Lm9uS2V5RG93bihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc2F2ZVN1Yk1lbnUgPSBmdW5jdGlvbiAoc3ViTWVudSkge1xuICAgICAgICAgICAgX3RoaXMuc3ViTWVudSA9IHN1Yk1lbnU7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU3ViTWVudSwgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIHJvb3RQcmVmaXhDbHMgPSBfcHJvcHMucm9vdFByZWZpeENscyxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lO1xuXG4gICAgICAgICAgICB2YXIgdGhlbWUgPSB0aGlzLmNvbnRleHQuYW50ZE1lbnVUaGVtZTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJjU3ViTWVudSwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgcmVmOiB0aGlzLnNhdmVTdWJNZW51LCBwb3B1cENsYXNzTmFtZTogY2xhc3NOYW1lcyhyb290UHJlZml4Q2xzICsgJy0nICsgdGhlbWUsIGNsYXNzTmFtZSkgfSkpO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFN1Yk1lbnU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN1Yk1lbnUuY29udGV4dFR5cGVzID0ge1xuICAgIGFudGRNZW51VGhlbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG4vLyBmaXggaXNzdWU6aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvODY2NlxuU3ViTWVudS5pc1N1Yk1lbnUgPSAxO1xuZXhwb3J0IGRlZmF1bHQgU3ViTWVudTsiLCJ2YXIgYXV0b0FkanVzdE92ZXJmbG93ID0ge1xuICBhZGp1c3RYOiAxLFxuICBhZGp1c3RZOiAxXG59O1xuXG52YXIgdGFyZ2V0T2Zmc2V0ID0gWzAsIDBdO1xuXG5leHBvcnQgdmFyIHBsYWNlbWVudHMgPSB7XG4gIGxlZnQ6IHtcbiAgICBwb2ludHM6IFsnY3InLCAnY2wnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWy00LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICByaWdodDoge1xuICAgIHBvaW50czogWydjbCcsICdjciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgdG9wOiB7XG4gICAgcG9pbnRzOiBbJ2JjJywgJ3RjJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCAtNF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgYm90dG9tOiB7XG4gICAgcG9pbnRzOiBbJ3RjJywgJ2JjJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCA0XSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICB0b3BMZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ2JsJywgJ3RsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCAtNF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgbGVmdFRvcDoge1xuICAgIHBvaW50czogWyd0cicsICd0bCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbLTQsIDBdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIHRvcFJpZ2h0OiB7XG4gICAgcG9pbnRzOiBbJ2JyJywgJ3RyJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCAtNF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgcmlnaHRUb3A6IHtcbiAgICBwb2ludHM6IFsndGwnLCAndHInXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzQsIDBdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH0sXG4gIGJvdHRvbVJpZ2h0OiB7XG4gICAgcG9pbnRzOiBbJ3RyJywgJ2JyJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCA0XSxcbiAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9LFxuICByaWdodEJvdHRvbToge1xuICAgIHBvaW50czogWydibCcsICdiciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgYm90dG9tTGVmdDoge1xuICAgIHBvaW50czogWyd0bCcsICdibCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXRcbiAgfSxcbiAgbGVmdEJvdHRvbToge1xuICAgIHBvaW50czogWydicicsICdibCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbLTQsIDBdLFxuICAgIHRhcmdldE9mZnNldDogdGFyZ2V0T2Zmc2V0XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBsYWNlbWVudHM7IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgQ29udGVudCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDb250ZW50LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb250ZW50KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250ZW50KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgQ29udGVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHZhciB0cmlnZ2VyID0gdGhpcy5wcm9wcy50cmlnZ2VyO1xuXG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIHRyaWdnZXIuZm9yY2VQb3B1cEFsaWduKCk7XG4gICAgfVxuICB9O1xuXG4gIENvbnRlbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb3ZlcmxheSA9IF9wcm9wcy5vdmVybGF5LFxuICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBpZCA9IF9wcm9wcy5pZDtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1pbm5lcicsIGlkOiBpZCwgcm9sZTogJ3Rvb2x0aXAnIH0sXG4gICAgICB0eXBlb2Ygb3ZlcmxheSA9PT0gJ2Z1bmN0aW9uJyA/IG92ZXJsYXkoKSA6IG92ZXJsYXlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBDb250ZW50O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Db250ZW50LnByb3BUeXBlcyA9IHtcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvdmVybGF5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkLFxuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgdHJpZ2dlcjogUHJvcFR5cGVzLmFueVxufTtcbmV4cG9ydCBkZWZhdWx0IENvbnRlbnQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUcmlnZ2VyIGZyb20gJ3JjLXRyaWdnZXInO1xuaW1wb3J0IHsgcGxhY2VtZW50cyB9IGZyb20gJy4vcGxhY2VtZW50cyc7XG5pbXBvcnQgQ29udGVudCBmcm9tICcuL0NvbnRlbnQnO1xuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUb29sdGlwLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb29sdGlwKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbHRpcCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbC5hcHBseShfQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuZ2V0UG9wdXBFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYXJyb3dDb250ZW50ID0gX3RoaXMkcHJvcHMuYXJyb3dDb250ZW50LFxuICAgICAgICAgIG92ZXJsYXkgPSBfdGhpcyRwcm9wcy5vdmVybGF5LFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkO1xuXG4gICAgICByZXR1cm4gW1JlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1hcnJvdycsIGtleTogJ2Fycm93JyB9LFxuICAgICAgICBhcnJvd0NvbnRlbnRcbiAgICAgICksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGVudCwge1xuICAgICAgICBrZXk6ICdjb250ZW50JyxcbiAgICAgICAgdHJpZ2dlcjogX3RoaXMudHJpZ2dlcixcbiAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgb3ZlcmxheTogb3ZlcmxheVxuICAgICAgfSldO1xuICAgIH0sIF90aGlzLnNhdmVUcmlnZ2VyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLnRyaWdnZXIgPSBub2RlO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0UG9wdXBEb21Ob2RlID0gZnVuY3Rpb24gZ2V0UG9wdXBEb21Ob2RlKCkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIuZ2V0UG9wdXBEb21Ob2RlKCk7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvdmVybGF5Q2xhc3NOYW1lID0gX3Byb3BzLm92ZXJsYXlDbGFzc05hbWUsXG4gICAgICAgIHRyaWdnZXIgPSBfcHJvcHMudHJpZ2dlcixcbiAgICAgICAgbW91c2VFbnRlckRlbGF5ID0gX3Byb3BzLm1vdXNlRW50ZXJEZWxheSxcbiAgICAgICAgbW91c2VMZWF2ZURlbGF5ID0gX3Byb3BzLm1vdXNlTGVhdmVEZWxheSxcbiAgICAgICAgb3ZlcmxheVN0eWxlID0gX3Byb3BzLm92ZXJsYXlTdHlsZSxcbiAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzLnByZWZpeENscyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG9uVmlzaWJsZUNoYW5nZSA9IF9wcm9wcy5vblZpc2libGVDaGFuZ2UsXG4gICAgICAgIGFmdGVyVmlzaWJsZUNoYW5nZSA9IF9wcm9wcy5hZnRlclZpc2libGVDaGFuZ2UsXG4gICAgICAgIHRyYW5zaXRpb25OYW1lID0gX3Byb3BzLnRyYW5zaXRpb25OYW1lLFxuICAgICAgICBhbmltYXRpb24gPSBfcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICBwbGFjZW1lbnQgPSBfcHJvcHMucGxhY2VtZW50LFxuICAgICAgICBhbGlnbiA9IF9wcm9wcy5hbGlnbixcbiAgICAgICAgZGVzdHJveVRvb2x0aXBPbkhpZGUgPSBfcHJvcHMuZGVzdHJveVRvb2x0aXBPbkhpZGUsXG4gICAgICAgIGRlZmF1bHRWaXNpYmxlID0gX3Byb3BzLmRlZmF1bHRWaXNpYmxlLFxuICAgICAgICBnZXRUb29sdGlwQ29udGFpbmVyID0gX3Byb3BzLmdldFRvb2x0aXBDb250YWluZXIsXG4gICAgICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnb3ZlcmxheUNsYXNzTmFtZScsICd0cmlnZ2VyJywgJ21vdXNlRW50ZXJEZWxheScsICdtb3VzZUxlYXZlRGVsYXknLCAnb3ZlcmxheVN0eWxlJywgJ3ByZWZpeENscycsICdjaGlsZHJlbicsICdvblZpc2libGVDaGFuZ2UnLCAnYWZ0ZXJWaXNpYmxlQ2hhbmdlJywgJ3RyYW5zaXRpb25OYW1lJywgJ2FuaW1hdGlvbicsICdwbGFjZW1lbnQnLCAnYWxpZ24nLCAnZGVzdHJveVRvb2x0aXBPbkhpZGUnLCAnZGVmYXVsdFZpc2libGUnLCAnZ2V0VG9vbHRpcENvbnRhaW5lciddKTtcblxuICAgIHZhciBleHRyYVByb3BzID0gX2V4dGVuZHMoe30sIHJlc3RQcm9wcyk7XG4gICAgaWYgKCd2aXNpYmxlJyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICBleHRyYVByb3BzLnBvcHVwVmlzaWJsZSA9IHRoaXMucHJvcHMudmlzaWJsZTtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUcmlnZ2VyLFxuICAgICAgX2V4dGVuZHMoe1xuICAgICAgICBwb3B1cENsYXNzTmFtZTogb3ZlcmxheUNsYXNzTmFtZSxcbiAgICAgICAgcmVmOiB0aGlzLnNhdmVUcmlnZ2VyLFxuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgcG9wdXA6IHRoaXMuZ2V0UG9wdXBFbGVtZW50LFxuICAgICAgICBhY3Rpb246IHRyaWdnZXIsXG4gICAgICAgIGJ1aWx0aW5QbGFjZW1lbnRzOiBwbGFjZW1lbnRzLFxuICAgICAgICBwb3B1cFBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgICBwb3B1cEFsaWduOiBhbGlnbixcbiAgICAgICAgZ2V0UG9wdXBDb250YWluZXI6IGdldFRvb2x0aXBDb250YWluZXIsXG4gICAgICAgIG9uUG9wdXBWaXNpYmxlQ2hhbmdlOiBvblZpc2libGVDaGFuZ2UsXG4gICAgICAgIGFmdGVyUG9wdXBWaXNpYmxlQ2hhbmdlOiBhZnRlclZpc2libGVDaGFuZ2UsXG4gICAgICAgIHBvcHVwVHJhbnNpdGlvbk5hbWU6IHRyYW5zaXRpb25OYW1lLFxuICAgICAgICBwb3B1cEFuaW1hdGlvbjogYW5pbWF0aW9uLFxuICAgICAgICBkZWZhdWx0UG9wdXBWaXNpYmxlOiBkZWZhdWx0VmlzaWJsZSxcbiAgICAgICAgZGVzdHJveVBvcHVwT25IaWRlOiBkZXN0cm95VG9vbHRpcE9uSGlkZSxcbiAgICAgICAgbW91c2VMZWF2ZURlbGF5OiBtb3VzZUxlYXZlRGVsYXksXG4gICAgICAgIHBvcHVwU3R5bGU6IG92ZXJsYXlTdHlsZSxcbiAgICAgICAgbW91c2VFbnRlckRlbGF5OiBtb3VzZUVudGVyRGVsYXlcbiAgICAgIH0sIGV4dHJhUHJvcHMpLFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUb29sdGlwO1xufShDb21wb25lbnQpO1xuXG5Ub29sdGlwLnByb3BUeXBlcyA9IHtcbiAgdHJpZ2dlcjogUHJvcFR5cGVzLmFueSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIGRlZmF1bHRWaXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLnN0cmluZyxcbiAgdHJhbnNpdGlvbk5hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgYW5pbWF0aW9uOiBQcm9wVHlwZXMuYW55LFxuICBvblZpc2libGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBhZnRlclZpc2libGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvdmVybGF5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkLFxuICBvdmVybGF5U3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIG92ZXJsYXlDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgbW91c2VFbnRlckRlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICBtb3VzZUxlYXZlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFRvb2x0aXBDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICBkZXN0cm95VG9vbHRpcE9uSGlkZTogUHJvcFR5cGVzLmJvb2wsXG4gIGFsaWduOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhcnJvd0NvbnRlbnQ6IFByb3BUeXBlcy5hbnksXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuVG9vbHRpcC5kZWZhdWx0UHJvcHMgPSB7XG4gIHByZWZpeENsczogJ3JjLXRvb2x0aXAnLFxuICBtb3VzZUVudGVyRGVsYXk6IDAsXG4gIGRlc3Ryb3lUb29sdGlwT25IaWRlOiBmYWxzZSxcbiAgbW91c2VMZWF2ZURlbGF5OiAwLjEsXG4gIGFsaWduOiB7fSxcbiAgcGxhY2VtZW50OiAncmlnaHQnLFxuICB0cmlnZ2VyOiBbJ2hvdmVyJ10sXG4gIGFycm93Q29udGVudDogbnVsbFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwOyIsImltcG9ydCBUb29sdGlwIGZyb20gJy4vVG9vbHRpcCc7XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCB7IHBsYWNlbWVudHMgYXMgcmNQbGFjZW1lbnRzIH0gZnJvbSAncmMtdG9vbHRpcC9lcy9wbGFjZW1lbnRzJztcbnZhciBhdXRvQWRqdXN0T3ZlcmZsb3dFbmFibGVkID0ge1xuICAgIGFkanVzdFg6IDEsXG4gICAgYWRqdXN0WTogMVxufTtcbnZhciBhdXRvQWRqdXN0T3ZlcmZsb3dEaXNhYmxlZCA9IHtcbiAgICBhZGp1c3RYOiAwLFxuICAgIGFkanVzdFk6IDBcbn07XG52YXIgdGFyZ2V0T2Zmc2V0ID0gWzAsIDBdO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE92ZXJmbG93T3B0aW9ucyhhdXRvQWRqdXN0T3ZlcmZsb3cpIHtcbiAgICBpZiAodHlwZW9mIGF1dG9BZGp1c3RPdmVyZmxvdyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBhdXRvQWRqdXN0T3ZlcmZsb3cgPyBhdXRvQWRqdXN0T3ZlcmZsb3dFbmFibGVkIDogYXV0b0FkanVzdE92ZXJmbG93RGlzYWJsZWQ7XG4gICAgfVxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXV0b0FkanVzdE92ZXJmbG93RGlzYWJsZWQsIGF1dG9BZGp1c3RPdmVyZmxvdyk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQbGFjZW1lbnRzKCkge1xuICAgIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBfY29uZmlnJGFycm93V2lkdGggPSBjb25maWcuYXJyb3dXaWR0aCxcbiAgICAgICAgYXJyb3dXaWR0aCA9IF9jb25maWckYXJyb3dXaWR0aCA9PT0gdW5kZWZpbmVkID8gNSA6IF9jb25maWckYXJyb3dXaWR0aCxcbiAgICAgICAgX2NvbmZpZyRob3Jpem9udGFsQXJyID0gY29uZmlnLmhvcml6b250YWxBcnJvd1NoaWZ0LFxuICAgICAgICBob3Jpem9udGFsQXJyb3dTaGlmdCA9IF9jb25maWckaG9yaXpvbnRhbEFyciA9PT0gdW5kZWZpbmVkID8gMTYgOiBfY29uZmlnJGhvcml6b250YWxBcnIsXG4gICAgICAgIF9jb25maWckdmVydGljYWxBcnJvdyA9IGNvbmZpZy52ZXJ0aWNhbEFycm93U2hpZnQsXG4gICAgICAgIHZlcnRpY2FsQXJyb3dTaGlmdCA9IF9jb25maWckdmVydGljYWxBcnJvdyA9PT0gdW5kZWZpbmVkID8gMTIgOiBfY29uZmlnJHZlcnRpY2FsQXJyb3csXG4gICAgICAgIF9jb25maWckYXV0b0FkanVzdE92ZSA9IGNvbmZpZy5hdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgICAgIGF1dG9BZGp1c3RPdmVyZmxvdyA9IF9jb25maWckYXV0b0FkanVzdE92ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9jb25maWckYXV0b0FkanVzdE92ZTtcblxuICAgIHZhciBwbGFjZW1lbnRNYXAgPSB7XG4gICAgICAgIGxlZnQ6IHtcbiAgICAgICAgICAgIHBvaW50czogWydjcicsICdjbCddLFxuICAgICAgICAgICAgb2Zmc2V0OiBbLTQsIDBdXG4gICAgICAgIH0sXG4gICAgICAgIHJpZ2h0OiB7XG4gICAgICAgICAgICBwb2ludHM6IFsnY2wnLCAnY3InXSxcbiAgICAgICAgICAgIG9mZnNldDogWzQsIDBdXG4gICAgICAgIH0sXG4gICAgICAgIHRvcDoge1xuICAgICAgICAgICAgcG9pbnRzOiBbJ2JjJywgJ3RjJ10sXG4gICAgICAgICAgICBvZmZzZXQ6IFswLCAtNF1cbiAgICAgICAgfSxcbiAgICAgICAgYm90dG9tOiB7XG4gICAgICAgICAgICBwb2ludHM6IFsndGMnLCAnYmMnXSxcbiAgICAgICAgICAgIG9mZnNldDogWzAsIDRdXG4gICAgICAgIH0sXG4gICAgICAgIHRvcExlZnQ6IHtcbiAgICAgICAgICAgIHBvaW50czogWydibCcsICd0YyddLFxuICAgICAgICAgICAgb2Zmc2V0OiBbLShob3Jpem9udGFsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpLCAtNF1cbiAgICAgICAgfSxcbiAgICAgICAgbGVmdFRvcDoge1xuICAgICAgICAgICAgcG9pbnRzOiBbJ3RyJywgJ2NsJ10sXG4gICAgICAgICAgICBvZmZzZXQ6IFstNCwgLSh2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKV1cbiAgICAgICAgfSxcbiAgICAgICAgdG9wUmlnaHQ6IHtcbiAgICAgICAgICAgIHBvaW50czogWydicicsICd0YyddLFxuICAgICAgICAgICAgb2Zmc2V0OiBbaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoLCAtNF1cbiAgICAgICAgfSxcbiAgICAgICAgcmlnaHRUb3A6IHtcbiAgICAgICAgICAgIHBvaW50czogWyd0bCcsICdjciddLFxuICAgICAgICAgICAgb2Zmc2V0OiBbNCwgLSh2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKV1cbiAgICAgICAgfSxcbiAgICAgICAgYm90dG9tUmlnaHQ6IHtcbiAgICAgICAgICAgIHBvaW50czogWyd0cicsICdiYyddLFxuICAgICAgICAgICAgb2Zmc2V0OiBbaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoLCA0XVxuICAgICAgICB9LFxuICAgICAgICByaWdodEJvdHRvbToge1xuICAgICAgICAgICAgcG9pbnRzOiBbJ2JsJywgJ2NyJ10sXG4gICAgICAgICAgICBvZmZzZXQ6IFs0LCB2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoXVxuICAgICAgICB9LFxuICAgICAgICBib3R0b21MZWZ0OiB7XG4gICAgICAgICAgICBwb2ludHM6IFsndGwnLCAnYmMnXSxcbiAgICAgICAgICAgIG9mZnNldDogWy0oaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKSwgNF1cbiAgICAgICAgfSxcbiAgICAgICAgbGVmdEJvdHRvbToge1xuICAgICAgICAgICAgcG9pbnRzOiBbJ2JyJywgJ2NsJ10sXG4gICAgICAgICAgICBvZmZzZXQ6IFstNCwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF1cbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmtleXMocGxhY2VtZW50TWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcGxhY2VtZW50TWFwW2tleV0gPSBjb25maWcuYXJyb3dQb2ludEF0Q2VudGVyID8gX2V4dGVuZHMoe30sIHBsYWNlbWVudE1hcFtrZXldLCB7IG92ZXJmbG93OiBnZXRPdmVyZmxvd09wdGlvbnMoYXV0b0FkanVzdE92ZXJmbG93KSwgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXQgfSkgOiBfZXh0ZW5kcyh7fSwgcmNQbGFjZW1lbnRzW2tleV0sIHsgb3ZlcmZsb3c6IGdldE92ZXJmbG93T3B0aW9ucyhhdXRvQWRqdXN0T3ZlcmZsb3cpIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBwbGFjZW1lbnRNYXA7XG59IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjbG9uZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwb2x5ZmlsbCB9IGZyb20gJ3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0JztcbmltcG9ydCBSY1Rvb2x0aXAgZnJvbSAncmMtdG9vbHRpcCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBfZ2V0UGxhY2VtZW50cyBmcm9tICcuL3BsYWNlbWVudHMnO1xudmFyIHNwbGl0T2JqZWN0ID0gZnVuY3Rpb24gc3BsaXRPYmplY3Qob2JqLCBrZXlzKSB7XG4gICAgdmFyIHBpY2tlZCA9IHt9O1xuICAgIHZhciBvbWl0dGVkID0gX2V4dGVuZHMoe30sIG9iaik7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKG9iaiAmJiBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBwaWNrZWRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgZGVsZXRlIG9taXR0ZWRba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7IHBpY2tlZDogcGlja2VkLCBvbWl0dGVkOiBvbWl0dGVkIH07XG59O1xuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFRvb2x0aXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gVG9vbHRpcChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbHRpcCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRvb2x0aXAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb29sdGlwKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLm9uVmlzaWJsZUNoYW5nZSA9IGZ1bmN0aW9uICh2aXNpYmxlKSB7XG4gICAgICAgICAgICB2YXIgb25WaXNpYmxlQ2hhbmdlID0gX3RoaXMucHJvcHMub25WaXNpYmxlQ2hhbmdlO1xuXG4gICAgICAgICAgICBpZiAoISgndmlzaWJsZScgaW4gX3RoaXMucHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyB2aXNpYmxlOiBfdGhpcy5pc05vVGl0bGUoKSA/IGZhbHNlIDogdmlzaWJsZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvblZpc2libGVDaGFuZ2UgJiYgIV90aGlzLmlzTm9UaXRsZSgpKSB7XG4gICAgICAgICAgICAgICAgb25WaXNpYmxlQ2hhbmdlKHZpc2libGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyDliqjmgIHorr7nva7liqjnlLvngrlcbiAgICAgICAgX3RoaXMub25Qb3B1cEFsaWduID0gZnVuY3Rpb24gKGRvbU5vZGUsIGFsaWduKSB7XG4gICAgICAgICAgICB2YXIgcGxhY2VtZW50cyA9IF90aGlzLmdldFBsYWNlbWVudHMoKTtcbiAgICAgICAgICAgIC8vIOW9k+WJjei/lOWbnueahOS9jee9rlxuICAgICAgICAgICAgdmFyIHBsYWNlbWVudCA9IE9iamVjdC5rZXlzKHBsYWNlbWVudHMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlbWVudHNba2V5XS5wb2ludHNbMF0gPT09IGFsaWduLnBvaW50c1swXSAmJiBwbGFjZW1lbnRzW2tleV0ucG9pbnRzWzFdID09PSBhbGlnbi5wb2ludHNbMV07XG4gICAgICAgICAgICB9KVswXTtcbiAgICAgICAgICAgIGlmICghcGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g5qC55o2u5b2T5YmN5Z2Q5qCH6K6+572u5Yqo55S754K5XG4gICAgICAgICAgICB2YXIgcmVjdCA9IGRvbU5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtT3JpZ2luID0ge1xuICAgICAgICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgICAgICAgbGVmdDogJzUwJSdcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ3RvcCcpID49IDAgfHwgcGxhY2VtZW50LmluZGV4T2YoJ0JvdHRvbScpID49IDApIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW4udG9wID0gcmVjdC5oZWlnaHQgLSBhbGlnbi5vZmZzZXRbMV0gKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwbGFjZW1lbnQuaW5kZXhPZignVG9wJykgPj0gMCB8fCBwbGFjZW1lbnQuaW5kZXhPZignYm90dG9tJykgPj0gMCkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbi50b3AgPSAtYWxpZ24ub2Zmc2V0WzFdICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwbGFjZW1lbnQuaW5kZXhPZignbGVmdCcpID49IDAgfHwgcGxhY2VtZW50LmluZGV4T2YoJ1JpZ2h0JykgPj0gMCkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbi5sZWZ0ID0gcmVjdC53aWR0aCAtIGFsaWduLm9mZnNldFswXSArICdweCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdyaWdodCcpID49IDAgfHwgcGxhY2VtZW50LmluZGV4T2YoJ0xlZnQnKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luLmxlZnQgPSAtYWxpZ24ub2Zmc2V0WzBdICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbU5vZGUuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gdHJhbnNmb3JtT3JpZ2luLmxlZnQgKyAnICcgKyB0cmFuc2Zvcm1PcmlnaW4udG9wO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zYXZlVG9vbHRpcCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBfdGhpcy50b29sdGlwID0gbm9kZTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB2aXNpYmxlOiAhIXByb3BzLnZpc2libGUgfHwgISFwcm9wcy5kZWZhdWx0VmlzaWJsZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIFt7XG4gICAgICAgIGtleTogJ2dldFBvcHVwRG9tTm9kZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb3B1cERvbU5vZGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwLmdldFBvcHVwRG9tTm9kZSgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRQbGFjZW1lbnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBsYWNlbWVudHMoKSB7XG4gICAgICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICBidWlsdGluUGxhY2VtZW50cyA9IF9wcm9wcy5idWlsdGluUGxhY2VtZW50cyxcbiAgICAgICAgICAgICAgICBhcnJvd1BvaW50QXRDZW50ZXIgPSBfcHJvcHMuYXJyb3dQb2ludEF0Q2VudGVyLFxuICAgICAgICAgICAgICAgIGF1dG9BZGp1c3RPdmVyZmxvdyA9IF9wcm9wcy5hdXRvQWRqdXN0T3ZlcmZsb3c7XG5cbiAgICAgICAgICAgIHJldHVybiBidWlsdGluUGxhY2VtZW50cyB8fCBfZ2V0UGxhY2VtZW50cyh7XG4gICAgICAgICAgICAgICAgYXJyb3dQb2ludEF0Q2VudGVyOiBhcnJvd1BvaW50QXRDZW50ZXIsXG4gICAgICAgICAgICAgICAgdmVydGljYWxBcnJvd1NoaWZ0OiA4LFxuICAgICAgICAgICAgICAgIGF1dG9BZGp1c3RPdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaXNIb3ZlclRyaWdnZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNIb3ZlclRyaWdnZXIoKSB7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlciA9IHRoaXMucHJvcHMudHJpZ2dlcjtcblxuICAgICAgICAgICAgaWYgKCF0cmlnZ2VyIHx8IHRyaWdnZXIgPT09ICdob3ZlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRyaWdnZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXIuaW5kZXhPZignaG92ZXInKSA+PSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpeCBUb29sdGlwIHdvbid0IGhpZGUgYXQgZGlzYWJsZWQgYnV0dG9uXG4gICAgICAgIC8vIG1vdXNlIGV2ZW50cyBkb24ndCB0cmlnZ2VyIGF0IGRpc2FibGVkIGJ1dHRvbiBpbiBDaHJvbWVcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC90b29sdGlwL2lzc3Vlcy8xOFxuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXREaXNhYmxlZENvbXBhdGlibGVDaGlsZHJlbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREaXNhYmxlZENvbXBhdGlibGVDaGlsZHJlbihlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoKGVsZW1lbnQudHlwZS5fX0FOVF9CVVRUT04gfHwgZWxlbWVudC50eXBlID09PSAnYnV0dG9uJykgJiYgZWxlbWVudC5wcm9wcy5kaXNhYmxlZCAmJiB0aGlzLmlzSG92ZXJUcmlnZ2VyKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBQaWNrIHNvbWUgbGF5b3V0IHJlbGF0ZWQgc3R5bGUgcHJvcGVydGllcyB1cCB0byBzcGFuXG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCBsYXlvdXQgYnVncyBsaWtlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzUyNTRcbiAgICAgICAgICAgICAgICB2YXIgX3NwbGl0T2JqZWN0ID0gc3BsaXRPYmplY3QoZWxlbWVudC5wcm9wcy5zdHlsZSwgWydwb3NpdGlvbicsICdsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nLCAnZmxvYXQnLCAnZGlzcGxheScsICd6SW5kZXgnXSksXG4gICAgICAgICAgICAgICAgICAgIHBpY2tlZCA9IF9zcGxpdE9iamVjdC5waWNrZWQsXG4gICAgICAgICAgICAgICAgICAgIG9taXR0ZWQgPSBfc3BsaXRPYmplY3Qub21pdHRlZDtcblxuICAgICAgICAgICAgICAgIHZhciBzcGFuU3R5bGUgPSBfZXh0ZW5kcyh7IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snIH0sIHBpY2tlZCwgeyBjdXJzb3I6ICdub3QtYWxsb3dlZCcgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGJ1dHRvblN0eWxlID0gX2V4dGVuZHMoe30sIG9taXR0ZWQsIHsgcG9pbnRlckV2ZW50czogJ25vbmUnIH0pO1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBidXR0b25TdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBudWxsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3BhblN0eWxlLCBjbGFzc05hbWU6IGVsZW1lbnQucHJvcHMuY2xhc3NOYW1lIH0sXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdpc05vVGl0bGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNOb1RpdGxlKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIHRpdGxlID0gX3Byb3BzMi50aXRsZSxcbiAgICAgICAgICAgICAgICBvdmVybGF5ID0gX3Byb3BzMi5vdmVybGF5O1xuXG4gICAgICAgICAgICByZXR1cm4gIXRpdGxlICYmICFvdmVybGF5OyAvLyBvdmVybGF5IGZvciBvbGQgdmVyc2lvbiBjb21wYXRpYmlsaXR5XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIHZhciBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgICAgICAgdGl0bGUgPSBwcm9wcy50aXRsZSxcbiAgICAgICAgICAgICAgICBvdmVybGF5ID0gcHJvcHMub3ZlcmxheSxcbiAgICAgICAgICAgICAgICBvcGVuQ2xhc3NOYW1lID0gcHJvcHMub3BlbkNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lciA9IHByb3BzLmdldFBvcHVwQ29udGFpbmVyLFxuICAgICAgICAgICAgICAgIGdldFRvb2x0aXBDb250YWluZXIgPSBwcm9wcy5nZXRUb29sdGlwQ29udGFpbmVyO1xuXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgICAgIHZhciB2aXNpYmxlID0gc3RhdGUudmlzaWJsZTtcbiAgICAgICAgICAgIC8vIEhpZGUgdG9vbHRpcCB3aGVuIHRoZXJlIGlzIG5vIHRpdGxlXG4gICAgICAgICAgICBpZiAoISgndmlzaWJsZScgaW4gcHJvcHMpICYmIHRoaXMuaXNOb1RpdGxlKCkpIHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmdldERpc2FibGVkQ29tcGF0aWJsZUNoaWxkcmVuKFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBjaGlsZHJlblxuICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICB2YXIgY2hpbGRQcm9wcyA9IGNoaWxkLnByb3BzO1xuICAgICAgICAgICAgdmFyIGNoaWxkQ2xzID0gY2xhc3NOYW1lcyhjaGlsZFByb3BzLmNsYXNzTmFtZSwgX2RlZmluZVByb3BlcnR5KHt9LCBvcGVuQ2xhc3NOYW1lIHx8IHByZWZpeENscyArICctb3BlbicsIHRydWUpKTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIFJjVG9vbHRpcCxcbiAgICAgICAgICAgICAgICBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgeyBnZXRUb29sdGlwQ29udGFpbmVyOiBnZXRQb3B1cENvbnRhaW5lciB8fCBnZXRUb29sdGlwQ29udGFpbmVyLCByZWY6IHRoaXMuc2F2ZVRvb2x0aXAsIGJ1aWx0aW5QbGFjZW1lbnRzOiB0aGlzLmdldFBsYWNlbWVudHMoKSwgb3ZlcmxheTogb3ZlcmxheSB8fCB0aXRsZSB8fCAnJywgdmlzaWJsZTogdmlzaWJsZSwgb25WaXNpYmxlQ2hhbmdlOiB0aGlzLm9uVmlzaWJsZUNoYW5nZSwgb25Qb3B1cEFsaWduOiB0aGlzLm9uUG9wdXBBbGlnbiB9KSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlID8gY2xvbmVFbGVtZW50KGNoaWxkLCB7IGNsYXNzTmFtZTogY2hpbGRDbHMgfSkgOiBjaGlsZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICAgICAgaWYgKCd2aXNpYmxlJyBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2aXNpYmxlOiBuZXh0UHJvcHMudmlzaWJsZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVG9vbHRpcDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVG9vbHRpcC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcHJlZml4Q2xzOiAnYW50LXRvb2x0aXAnLFxuICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgdHJhbnNpdGlvbk5hbWU6ICd6b29tLWJpZy1mYXN0JyxcbiAgICBtb3VzZUVudGVyRGVsYXk6IDAuMSxcbiAgICBtb3VzZUxlYXZlRGVsYXk6IDAuMSxcbiAgICBhcnJvd1BvaW50QXRDZW50ZXI6IGZhbHNlLFxuICAgIGF1dG9BZGp1c3RPdmVyZmxvdzogdHJ1ZVxufTtcbnBvbHlmaWxsKFRvb2x0aXApO1xuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEl0ZW0gfSBmcm9tICdyYy1tZW51JztcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUb29sdGlwIGZyb20gJy4uL3Rvb2x0aXAnO1xuXG52YXIgTWVudUl0ZW0gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhNZW51SXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBNZW51SXRlbSgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnVJdGVtKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTWVudUl0ZW0uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNZW51SXRlbSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXG4gICAgICAgIF90aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpcy5tZW51SXRlbS5vbktleURvd24oZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNhdmVNZW51SXRlbSA9IGZ1bmN0aW9uIChtZW51SXRlbSkge1xuICAgICAgICAgICAgX3RoaXMubWVudUl0ZW0gPSBtZW51SXRlbTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhNZW51SXRlbSwgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBpbmxpbmVDb2xsYXBzZWQgPSB0aGlzLmNvbnRleHQuaW5saW5lQ29sbGFwc2VkO1xuXG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgVG9vbHRpcCxcbiAgICAgICAgICAgICAgICB7IHRpdGxlOiBpbmxpbmVDb2xsYXBzZWQgJiYgcHJvcHMubGV2ZWwgPT09IDEgPyBwcm9wcy5jaGlsZHJlbiA6ICcnLCBwbGFjZW1lbnQ6ICdyaWdodCcsIG92ZXJsYXlDbGFzc05hbWU6IHByb3BzLnJvb3RQcmVmaXhDbHMgKyAnLWlubGluZS1jb2xsYXBzZWQtdG9vbHRpcCcgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW0sIF9leHRlbmRzKHt9LCBwcm9wcywgeyByZWY6IHRoaXMuc2F2ZU1lbnVJdGVtIH0pKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNZW51SXRlbTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVudUl0ZW0uY29udGV4dFR5cGVzID0ge1xuICAgIGlubGluZUNvbGxhcHNlZDogUHJvcFR5cGVzLmJvb2xcbn07XG5NZW51SXRlbS5pc01lbnVJdGVtID0gMTtcbmV4cG9ydCBkZWZhdWx0IE1lbnVJdGVtOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFJjTWVudSwgeyBEaXZpZGVyLCBJdGVtR3JvdXAgfSBmcm9tICdyYy1tZW51JztcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGFuaW1hdGlvbiBmcm9tICcuLi9fdXRpbC9vcGVuQW5pbWF0aW9uJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL191dGlsL3dhcm5pbmcnO1xuaW1wb3J0IFN1Yk1lbnUgZnJvbSAnLi9TdWJNZW51JztcbmltcG9ydCBJdGVtIGZyb20gJy4vTWVudUl0ZW0nO1xuXG52YXIgTWVudSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKE1lbnUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTWVudShwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVudSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1lbnUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNZW51KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLmlubGluZU9wZW5LZXlzID0gW107XG4gICAgICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZU9wZW5DaGFuZ2UoW10pO1xuICAgICAgICAgICAgdmFyIG9uQ2xpY2sgPSBfdGhpcy5wcm9wcy5vbkNsaWNrO1xuXG4gICAgICAgICAgICBpZiAob25DbGljaykge1xuICAgICAgICAgICAgICAgIG9uQ2xpY2soZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZU9wZW5DaGFuZ2UgPSBmdW5jdGlvbiAob3BlbktleXMpIHtcbiAgICAgICAgICAgIF90aGlzLnNldE9wZW5LZXlzKG9wZW5LZXlzKTtcbiAgICAgICAgICAgIHZhciBvbk9wZW5DaGFuZ2UgPSBfdGhpcy5wcm9wcy5vbk9wZW5DaGFuZ2U7XG5cbiAgICAgICAgICAgIGlmIChvbk9wZW5DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICBvbk9wZW5DaGFuZ2Uob3BlbktleXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB3YXJuaW5nKCEoJ29uT3BlbicgaW4gcHJvcHMgfHwgJ29uQ2xvc2UnIGluIHByb3BzKSwgJ2Bvbk9wZW5gIGFuZCBgb25DbG9zZWAgYXJlIHJlbW92ZWQsIHBsZWFzZSB1c2UgYG9uT3BlbkNoYW5nZWAgaW5zdGVhZCwgJyArICdzZWU6IGh0dHBzOi8vdS5hbnQuZGVzaWduL21lbnUtb24tb3Blbi1jaGFuZ2UuJyk7XG4gICAgICAgIHdhcm5pbmcoISgnaW5saW5lQ29sbGFwc2VkJyBpbiBwcm9wcyAmJiBwcm9wcy5tb2RlICE9PSAnaW5saW5lJyksICdgaW5saW5lQ29sbGFwc2VkYCBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4gTWVudVxcJ3MgYG1vZGVgIGlzIGlubGluZS4nKTtcbiAgICAgICAgdmFyIG9wZW5LZXlzID0gdm9pZCAwO1xuICAgICAgICBpZiAoJ29wZW5LZXlzJyBpbiBwcm9wcykge1xuICAgICAgICAgICAgb3BlbktleXMgPSBwcm9wcy5vcGVuS2V5cztcbiAgICAgICAgfSBlbHNlIGlmICgnZGVmYXVsdE9wZW5LZXlzJyBpbiBwcm9wcykge1xuICAgICAgICAgICAgb3BlbktleXMgPSBwcm9wcy5kZWZhdWx0T3BlbktleXM7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBvcGVuS2V5czogb3BlbktleXMgfHwgW11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhNZW51LCBbe1xuICAgICAgICBrZXk6ICdnZXRDaGlsZENvbnRleHQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbmxpbmVDb2xsYXBzZWQ6IHRoaXMuZ2V0SW5saW5lQ29sbGFwc2VkKCksXG4gICAgICAgICAgICAgICAgYW50ZE1lbnVUaGVtZTogdGhpcy5wcm9wcy50aGVtZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBwcmVmaXhDbHMgPSB0aGlzLnByb3BzLnByZWZpeENscztcblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PT0gJ2lubGluZScgJiYgbmV4dFByb3BzLm1vZGUgIT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zd2l0Y2hNb2RlRnJvbUlubGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ29wZW5LZXlzJyBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbktleXM6IG5leHRQcm9wcy5vcGVuS2V5cyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLmlubGluZUNvbGxhcHNlZCAmJiAhdGhpcy5wcm9wcy5pbmxpbmVDb2xsYXBzZWQgfHwgbmV4dENvbnRleHQuc2lkZXJDb2xsYXBzZWQgJiYgIXRoaXMuY29udGV4dC5zaWRlckNvbGxhcHNlZCkge1xuICAgICAgICAgICAgICAgIHZhciBtZW51Tm9kZSA9IGZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoTW9kZUZyb21JbmxpbmUgPSAhIXRoaXMuc3RhdGUub3BlbktleXMubGVuZ3RoICYmICEhbWVudU5vZGUucXVlcnlTZWxlY3RvckFsbCgnLicgKyBwcmVmaXhDbHMgKyAnLXN1Ym1lbnUtb3BlbicpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmlubGluZU9wZW5LZXlzID0gdGhpcy5zdGF0ZS5vcGVuS2V5cztcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbktleXM6IFtdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFuZXh0UHJvcHMuaW5saW5lQ29sbGFwc2VkICYmIHRoaXMucHJvcHMuaW5saW5lQ29sbGFwc2VkIHx8ICFuZXh0Q29udGV4dC5zaWRlckNvbGxhcHNlZCAmJiB0aGlzLmNvbnRleHQuc2lkZXJDb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbktleXM6IHRoaXMuaW5saW5lT3BlbktleXMgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmxpbmVPcGVuS2V5cyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXRPcGVuS2V5cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcGVuS2V5cyhvcGVuS2V5cykge1xuICAgICAgICAgICAgaWYgKCEoJ29wZW5LZXlzJyBpbiB0aGlzLnByb3BzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuS2V5czogb3BlbktleXMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFJlYWxNZW51TW9kZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWFsTWVudU1vZGUoKSB7XG4gICAgICAgICAgICB2YXIgaW5saW5lQ29sbGFwc2VkID0gdGhpcy5nZXRJbmxpbmVDb2xsYXBzZWQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN3aXRjaE1vZGVGcm9tSW5saW5lICYmIGlubGluZUNvbGxhcHNlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnaW5saW5lJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtb2RlID0gdGhpcy5wcm9wcy5tb2RlO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5saW5lQ29sbGFwc2VkID8gJ3ZlcnRpY2FsJyA6IG1vZGU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldElubGluZUNvbGxhcHNlZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbmxpbmVDb2xsYXBzZWQoKSB7XG4gICAgICAgICAgICB2YXIgaW5saW5lQ29sbGFwc2VkID0gdGhpcy5wcm9wcy5pbmxpbmVDb2xsYXBzZWQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc2lkZXJDb2xsYXBzZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuc2lkZXJDb2xsYXBzZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5saW5lQ29sbGFwc2VkO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRNZW51T3BlbkFuaW1hdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNZW51T3BlbkFuaW1hdGlvbihtZW51TW9kZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIG9wZW5BbmltYXRpb24gPSBfcHJvcHMub3BlbkFuaW1hdGlvbixcbiAgICAgICAgICAgICAgICBvcGVuVHJhbnNpdGlvbk5hbWUgPSBfcHJvcHMub3BlblRyYW5zaXRpb25OYW1lO1xuXG4gICAgICAgICAgICB2YXIgbWVudU9wZW5BbmltYXRpb24gPSBvcGVuQW5pbWF0aW9uIHx8IG9wZW5UcmFuc2l0aW9uTmFtZTtcbiAgICAgICAgICAgIGlmIChvcGVuQW5pbWF0aW9uID09PSB1bmRlZmluZWQgJiYgb3BlblRyYW5zaXRpb25OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1lbnVNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hvcml6b250YWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVudU9wZW5BbmltYXRpb24gPSAnc2xpZGUtdXAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZlcnRpY2FsJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmVydGljYWwtbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZlcnRpY2FsLXJpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gbW9kZSBzd2l0Y2ggZnJvbSBpbmxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1Ym1lbnUgc2hvdWxkIGhpZGUgd2l0aG91dCBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN3aXRjaE1vZGVGcm9tSW5saW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudU9wZW5BbmltYXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3aXRjaE1vZGVGcm9tSW5saW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVPcGVuQW5pbWF0aW9uID0gJ3pvb20tYmlnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpbmxpbmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVudU9wZW5BbmltYXRpb24gPSBfZXh0ZW5kcyh7fSwgYW5pbWF0aW9uLCB7IGxlYXZlOiBmdW5jdGlvbiBsZWF2ZShub2RlLCBkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmltYXRpb24ubGVhdmUobm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIGlubGluZSBtZW51IGxlYXZlIGFuaW1hdGlvbiBmaW5pc2hlZCBiZWZvcmUgbW9kZSBpcyBzd2l0Y2hlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnN3aXRjaE1vZGVGcm9tSW5saW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBpbmxpbmVDb2xsYXBzZWQgY2hhbmdlIGZhbHNlIHRvIHRydWUsIGFsbCBzdWJtZW51IHdpbGwgYmUgdW5tb3VudGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gdGhhdCB3ZSBkb24ndCBuZWVkIGhhbmRsZSBhbmltYXRpb24gbGVhdmluZy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczIuZ2V0UmVhbE1lbnVNb2RlKCkgPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVudU9wZW5BbmltYXRpb247XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzMi5wcmVmaXhDbHMsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgdGhlbWUgPSBfcHJvcHMyLnRoZW1lO1xuXG4gICAgICAgICAgICB2YXIgbWVudU1vZGUgPSB0aGlzLmdldFJlYWxNZW51TW9kZSgpO1xuICAgICAgICAgICAgdmFyIG1lbnVPcGVuQW5pbWF0aW9uID0gdGhpcy5nZXRNZW51T3BlbkFuaW1hdGlvbihtZW51TW9kZSk7XG4gICAgICAgICAgICB2YXIgbWVudUNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBwcmVmaXhDbHMgKyAnLScgKyB0aGVtZSwgX2RlZmluZVByb3BlcnR5KHt9LCBwcmVmaXhDbHMgKyAnLWlubGluZS1jb2xsYXBzZWQnLCB0aGlzLmdldElubGluZUNvbGxhcHNlZCgpKSk7XG4gICAgICAgICAgICB2YXIgbWVudVByb3BzID0ge1xuICAgICAgICAgICAgICAgIG9wZW5LZXlzOiB0aGlzLnN0YXRlLm9wZW5LZXlzLFxuICAgICAgICAgICAgICAgIG9uT3BlbkNoYW5nZTogdGhpcy5oYW5kbGVPcGVuQ2hhbmdlLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogbWVudUNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBtb2RlOiBtZW51TW9kZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChtZW51TW9kZSAhPT0gJ2lubGluZScpIHtcbiAgICAgICAgICAgICAgICAvLyBjbG9zaW5nIHZlcnRpY2FsIHBvcHVwIHN1Ym1lbnUgYWZ0ZXIgY2xpY2sgaXRcbiAgICAgICAgICAgICAgICBtZW51UHJvcHMub25DbGljayA9IHRoaXMuaGFuZGxlQ2xpY2s7XG4gICAgICAgICAgICAgICAgbWVudVByb3BzLm9wZW5UcmFuc2l0aW9uTmFtZSA9IG1lbnVPcGVuQW5pbWF0aW9uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZW51UHJvcHMub3BlbkFuaW1hdGlvbiA9IG1lbnVPcGVuQW5pbWF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvODU4N1xuICAgICAgICAgICAgdmFyIGNvbGxhcHNlZFdpZHRoID0gdGhpcy5jb250ZXh0LmNvbGxhcHNlZFdpZHRoO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5nZXRJbmxpbmVDb2xsYXBzZWQoKSAmJiAoY29sbGFwc2VkV2lkdGggPT09IDAgfHwgY29sbGFwc2VkV2lkdGggPT09ICcwJyB8fCBjb2xsYXBzZWRXaWR0aCA9PT0gJzBweCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSY01lbnUsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCBtZW51UHJvcHMpKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNZW51O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBNZW51O1xuXG5NZW51LkRpdmlkZXIgPSBEaXZpZGVyO1xuTWVudS5JdGVtID0gSXRlbTtcbk1lbnUuU3ViTWVudSA9IFN1Yk1lbnU7XG5NZW51Lkl0ZW1Hcm91cCA9IEl0ZW1Hcm91cDtcbk1lbnUuZGVmYXVsdFByb3BzID0ge1xuICAgIHByZWZpeENsczogJ2FudC1tZW51JyxcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIHRoZW1lOiAnbGlnaHQnLFxuICAgIGZvY3VzYWJsZTogZmFsc2Vcbn07XG5NZW51LmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAgIGlubGluZUNvbGxhcHNlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgYW50ZE1lbnVUaGVtZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcbk1lbnUuY29udGV4dFR5cGVzID0ge1xuICAgIHNpZGVyQ29sbGFwc2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjb2xsYXBzZWRXaWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59OyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xudmFyIF9fcmVzdCA9IHRoaXMgJiYgdGhpcy5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICAgIH1pZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDApIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgIH1yZXR1cm4gdDtcbn07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmZ1bmN0aW9uIGdlbmVyYXRvcihwcm9wcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoQmFzaWNDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgICAgICAgICBfaW5oZXJpdHMoQWRhcHRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIEFkYXB0ZXIoKSB7XG4gICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFkYXB0ZXIpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChBZGFwdGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQWRhcHRlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfY3JlYXRlQ2xhc3MoQWRhcHRlciwgW3tcbiAgICAgICAgICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQmFzaWNDb21wb25lbnQsIF9leHRlbmRzKHsgcHJlZml4Q2xzOiBwcmVmaXhDbHMgfSwgdGhpcy5wcm9wcykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dKTtcblxuICAgICAgICAgICAgcmV0dXJuIEFkYXB0ZXI7XG4gICAgICAgIH0oUmVhY3QuQ29tcG9uZW50KTtcbiAgICB9O1xufVxuXG52YXIgQmFzaWMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHMoQmFzaWMsIF9SZWFjdCRDb21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIEJhc2ljKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzaWMpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQmFzaWMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCYXNpYykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCYXNpYywgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgcHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLFxuICAgICAgICAgICAgICAgIG90aGVycyA9IF9fcmVzdChfYSwgW1wicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuICAgICAgICAgICAgdmFyIGRpdkNscyA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBwcmVmaXhDbHMpO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgX2V4dGVuZHMoeyBjbGFzc05hbWU6IGRpdkNscyB9LCBvdGhlcnMpLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJhc2ljO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG52YXIgQmFzaWNMYXlvdXQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudDMpIHtcbiAgICBfaW5oZXJpdHMoQmFzaWNMYXlvdXQsIF9SZWFjdCRDb21wb25lbnQzKTtcblxuICAgIGZ1bmN0aW9uIEJhc2ljTGF5b3V0KCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzaWNMYXlvdXQpO1xuXG4gICAgICAgIHZhciBfdGhpczMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQmFzaWNMYXlvdXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCYXNpY0xheW91dCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXG4gICAgICAgIF90aGlzMy5zdGF0ZSA9IHsgc2lkZXJzOiBbXSB9O1xuICAgICAgICByZXR1cm4gX3RoaXMzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCYXNpY0xheW91dCwgW3tcbiAgICAgICAga2V5OiAnZ2V0Q2hpbGRDb250ZXh0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNpZGVySG9vazoge1xuICAgICAgICAgICAgICAgICAgICBhZGRTaWRlcjogZnVuY3Rpb24gYWRkU2lkZXIoaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZXJzOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KF90aGlzNC5zdGF0ZS5zaWRlcnMpLCBbaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVNpZGVyOiBmdW5jdGlvbiByZW1vdmVTaWRlcihpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM0LnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlcnM6IF90aGlzNC5zdGF0ZS5zaWRlcnMuZmlsdGVyKGZ1bmN0aW9uIChjdXJyZW50SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJZCAhPT0gaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgcHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLFxuICAgICAgICAgICAgICAgIGhhc1NpZGVyID0gX2EuaGFzU2lkZXIsXG4gICAgICAgICAgICAgICAgb3RoZXJzID0gX19yZXN0KF9hLCBbXCJwcmVmaXhDbHNcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcImhhc1NpZGVyXCJdKTtcbiAgICAgICAgICAgIHZhciBkaXZDbHMgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcHJlZml4Q2xzLCBfZGVmaW5lUHJvcGVydHkoe30sIHByZWZpeENscyArICctaGFzLXNpZGVyJywgaGFzU2lkZXIgfHwgdGhpcy5zdGF0ZS5zaWRlcnMubGVuZ3RoID4gMCkpO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgX2V4dGVuZHMoeyBjbGFzc05hbWU6IGRpdkNscyB9LCBvdGhlcnMpLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJhc2ljTGF5b3V0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CYXNpY0xheW91dC5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgICBzaWRlckhvb2s6IFByb3BUeXBlcy5vYmplY3Rcbn07XG52YXIgTGF5b3V0ID0gZ2VuZXJhdG9yKHtcbiAgICBwcmVmaXhDbHM6ICdhbnQtbGF5b3V0J1xufSkoQmFzaWNMYXlvdXQpO1xudmFyIEhlYWRlciA9IGdlbmVyYXRvcih7XG4gICAgcHJlZml4Q2xzOiAnYW50LWxheW91dC1oZWFkZXInXG59KShCYXNpYyk7XG52YXIgRm9vdGVyID0gZ2VuZXJhdG9yKHtcbiAgICBwcmVmaXhDbHM6ICdhbnQtbGF5b3V0LWZvb3Rlcidcbn0pKEJhc2ljKTtcbnZhciBDb250ZW50ID0gZ2VuZXJhdG9yKHtcbiAgICBwcmVmaXhDbHM6ICdhbnQtbGF5b3V0LWNvbnRlbnQnXG59KShCYXNpYyk7XG5MYXlvdXQuSGVhZGVyID0gSGVhZGVyO1xuTGF5b3V0LkZvb3RlciA9IEZvb3RlcjtcbkxheW91dC5Db250ZW50ID0gQ29udGVudDtcbmV4cG9ydCBkZWZhdWx0IExheW91dDsiLCJ2YXIgaXNOdW1lcmljID0gZnVuY3Rpb24gaXNOdW1lcmljKHZhbHVlKSB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSkgJiYgaXNGaW5pdGUodmFsdWUpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGlzTnVtZXJpYzsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbnZhciBfX3Jlc3QgPSB0aGlzICYmIHRoaXMuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgICB9aWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgICB9cmV0dXJuIHQ7XG59O1xuLy8gbWF0Y2hNZWRpYSBwb2x5ZmlsbCBmb3Jcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XaWNreU5pbGxpYW1zL2VucXVpcmUuanMvaXNzdWVzLzgyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbWF0Y2hNZWRpYVBvbHlmaWxsID0gZnVuY3Rpb24gbWF0Y2hNZWRpYVBvbHlmaWxsKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1lZGlhOiBtZWRpYVF1ZXJ5LFxuICAgICAgICAgICAgbWF0Y2hlczogZmFsc2UsXG4gICAgICAgICAgICBhZGRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkTGlzdGVuZXIoKSB7fSxcbiAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcigpIHt9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB3aW5kb3cubWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhIHx8IG1hdGNoTWVkaWFQb2x5ZmlsbDtcbn1cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHBvbHlmaWxsIH0gZnJvbSAncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb21pdCBmcm9tICdvbWl0LmpzJztcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb24nO1xuaW1wb3J0IGlzTnVtZXJpYyBmcm9tICcuLi9fdXRpbC9pc051bWVyaWMnO1xudmFyIGRpbWVuc2lvbk1hcCA9IHtcbiAgICB4czogJzQ4MHB4JyxcbiAgICBzbTogJzU3NnB4JyxcbiAgICBtZDogJzc2OHB4JyxcbiAgICBsZzogJzk5MnB4JyxcbiAgICB4bDogJzEyMDBweCcsXG4gICAgeHhsOiAnMTYwMHB4J1xufTtcbnZhciBnZW5lcmF0ZUlkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gMDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJlZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcblxuICAgICAgICBpICs9IDE7XG4gICAgICAgIHJldHVybiAnJyArIHByZWZpeCArIGk7XG4gICAgfTtcbn0oKTtcblxudmFyIFNpZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoU2lkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gU2lkZXIocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpZGVyKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2lkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTaWRlcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5yZXNwb25zaXZlSGFuZGxlciA9IGZ1bmN0aW9uIChtcWwpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgYmVsb3c6IG1xbC5tYXRjaGVzIH0pO1xuICAgICAgICAgICAgdmFyIG9uQnJlYWtwb2ludCA9IF90aGlzLnByb3BzLm9uQnJlYWtwb2ludDtcblxuICAgICAgICAgICAgaWYgKG9uQnJlYWtwb2ludCkge1xuICAgICAgICAgICAgICAgIG9uQnJlYWtwb2ludChtcWwubWF0Y2hlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuc3RhdGUuY29sbGFwc2VkICE9PSBtcWwubWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldENvbGxhcHNlZChtcWwubWF0Y2hlcywgJ3Jlc3BvbnNpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc2V0Q29sbGFwc2VkID0gZnVuY3Rpb24gKGNvbGxhcHNlZCwgdHlwZSkge1xuICAgICAgICAgICAgaWYgKCEoJ2NvbGxhcHNlZCcgaW4gX3RoaXMucHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZWQ6IGNvbGxhcHNlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9uQ29sbGFwc2UgPSBfdGhpcy5wcm9wcy5vbkNvbGxhcHNlO1xuXG4gICAgICAgICAgICBpZiAob25Db2xsYXBzZSkge1xuICAgICAgICAgICAgICAgIG9uQ29sbGFwc2UoY29sbGFwc2VkLCB0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbGxhcHNlZCA9ICFfdGhpcy5zdGF0ZS5jb2xsYXBzZWQ7XG4gICAgICAgICAgICBfdGhpcy5zZXRDb2xsYXBzZWQoY29sbGFwc2VkLCAnY2xpY2tUcmlnZ2VyJyk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmJlbG93U2hvd0NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgYmVsb3dTaG93OiAhX3RoaXMuc3RhdGUuYmVsb3dTaG93IH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy51bmlxdWVJZCA9IGdlbmVyYXRlSWQoJ2FudC1zaWRlci0nKTtcbiAgICAgICAgdmFyIG1hdGNoTWVkaWEgPSB2b2lkIDA7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaE1lZGlhICYmIHByb3BzLmJyZWFrcG9pbnQgJiYgcHJvcHMuYnJlYWtwb2ludCBpbiBkaW1lbnNpb25NYXApIHtcbiAgICAgICAgICAgIF90aGlzLm1xbCA9IG1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6ICcgKyBkaW1lbnNpb25NYXBbcHJvcHMuYnJlYWtwb2ludF0gKyAnKScpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2xsYXBzZWQgPSB2b2lkIDA7XG4gICAgICAgIGlmICgnY29sbGFwc2VkJyBpbiBwcm9wcykge1xuICAgICAgICAgICAgY29sbGFwc2VkID0gcHJvcHMuY29sbGFwc2VkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sbGFwc2VkID0gcHJvcHMuZGVmYXVsdENvbGxhcHNlZDtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbGxhcHNlZDogY29sbGFwc2VkLFxuICAgICAgICAgICAgYmVsb3c6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2lkZXIsIFt7XG4gICAgICAgIGtleTogJ2dldENoaWxkQ29udGV4dCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNpZGVyQ29sbGFwc2VkOiB0aGlzLnN0YXRlLmNvbGxhcHNlZCxcbiAgICAgICAgICAgICAgICBjb2xsYXBzZWRXaWR0aDogdGhpcy5wcm9wcy5jb2xsYXBzZWRXaWR0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tcWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1xbC5hZGRMaXN0ZW5lcih0aGlzLnJlc3BvbnNpdmVIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNpdmVIYW5kbGVyKHRoaXMubXFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc2lkZXJIb29rKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LnNpZGVySG9vay5hZGRTaWRlcih0aGlzLnVuaXF1ZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tcWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1xbC5yZW1vdmVMaXN0ZW5lcih0aGlzLnJlc3BvbnNpdmVIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc2lkZXJIb29rKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LnNpZGVySG9vay5yZW1vdmVTaWRlcih0aGlzLnVuaXF1ZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICBwcmVmaXhDbHMgPSBfYS5wcmVmaXhDbHMsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIHRoZW1lID0gX2EudGhlbWUsXG4gICAgICAgICAgICAgICAgY29sbGFwc2libGUgPSBfYS5jb2xsYXBzaWJsZSxcbiAgICAgICAgICAgICAgICByZXZlcnNlQXJyb3cgPSBfYS5yZXZlcnNlQXJyb3csXG4gICAgICAgICAgICAgICAgdHJpZ2dlciA9IF9hLnRyaWdnZXIsXG4gICAgICAgICAgICAgICAgc3R5bGUgPSBfYS5zdHlsZSxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IF9hLndpZHRoLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNlZFdpZHRoID0gX2EuY29sbGFwc2VkV2lkdGgsXG4gICAgICAgICAgICAgICAgb3RoZXJzID0gX19yZXN0KF9hLCBbXCJwcmVmaXhDbHNcIiwgXCJjbGFzc05hbWVcIiwgXCJ0aGVtZVwiLCBcImNvbGxhcHNpYmxlXCIsIFwicmV2ZXJzZUFycm93XCIsIFwidHJpZ2dlclwiLCBcInN0eWxlXCIsIFwid2lkdGhcIiwgXCJjb2xsYXBzZWRXaWR0aFwiXSk7XG4gICAgICAgICAgICB2YXIgZGl2UHJvcHMgPSBvbWl0KG90aGVycywgWydjb2xsYXBzZWQnLCAnZGVmYXVsdENvbGxhcHNlZCcsICdvbkNvbGxhcHNlJywgJ2JyZWFrcG9pbnQnLCAnb25CcmVha3BvaW50J10pO1xuICAgICAgICAgICAgdmFyIHJhd1dpZHRoID0gdGhpcy5zdGF0ZS5jb2xsYXBzZWQgPyBjb2xsYXBzZWRXaWR0aCA6IHdpZHRoO1xuICAgICAgICAgICAgLy8gdXNlIFwicHhcIiBhcyBmYWxsYmFjayB1bml0IGZvciB3aWR0aFxuICAgICAgICAgICAgdmFyIHNpZGVyV2lkdGggPSBpc051bWVyaWMocmF3V2lkdGgpID8gcmF3V2lkdGggKyAncHgnIDogU3RyaW5nKHJhd1dpZHRoKTtcbiAgICAgICAgICAgIC8vIHNwZWNpYWwgdHJpZ2dlciB3aGVuIGNvbGxhcHNlZFdpZHRoID09IDBcbiAgICAgICAgICAgIHZhciB6ZXJvV2lkdGhUcmlnZ2VyID0gcGFyc2VGbG9hdChTdHJpbmcoY29sbGFwc2VkV2lkdGggfHwgMCkpID09PSAwID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgeyBvbkNsaWNrOiB0aGlzLnRvZ2dsZSwgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXplcm8td2lkdGgtdHJpZ2dlcicgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgdHlwZTogJ2JhcnMnIH0pXG4gICAgICAgICAgICApIDogbnVsbDtcbiAgICAgICAgICAgIHZhciBpY29uT2JqID0ge1xuICAgICAgICAgICAgICAgICdleHBhbmRlZCc6IHJldmVyc2VBcnJvdyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyB0eXBlOiAncmlnaHQnIH0pIDogUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IHR5cGU6ICdsZWZ0JyB9KSxcbiAgICAgICAgICAgICAgICAnY29sbGFwc2VkJzogcmV2ZXJzZUFycm93ID8gUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IHR5cGU6ICdsZWZ0JyB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyB0eXBlOiAncmlnaHQnIH0pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuY29sbGFwc2VkID8gJ2NvbGxhcHNlZCcgOiAnZXhwYW5kZWQnO1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRUcmlnZ2VyID0gaWNvbk9ialtzdGF0dXNdO1xuICAgICAgICAgICAgdmFyIHRyaWdnZXJEb20gPSB0cmlnZ2VyICE9PSBudWxsID8gemVyb1dpZHRoVHJpZ2dlciB8fCBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXRyaWdnZXInLCBvbkNsaWNrOiB0aGlzLnRvZ2dsZSwgc3R5bGU6IHsgd2lkdGg6IHNpZGVyV2lkdGggfSB9LFxuICAgICAgICAgICAgICAgIHRyaWdnZXIgfHwgZGVmYXVsdFRyaWdnZXJcbiAgICAgICAgICAgICkgOiBudWxsO1xuICAgICAgICAgICAgdmFyIGRpdlN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCB7IGZsZXg6ICcwIDAgJyArIHNpZGVyV2lkdGgsIG1heFdpZHRoOiBzaWRlcldpZHRoLCBtaW5XaWR0aDogc2lkZXJXaWR0aCwgd2lkdGg6IHNpZGVyV2lkdGggfSk7XG4gICAgICAgICAgICB2YXIgc2lkZXJDbHMgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcHJlZml4Q2xzLCBwcmVmaXhDbHMgKyAnLScgKyB0aGVtZSwgKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgcHJlZml4Q2xzICsgJy1jb2xsYXBzZWQnLCAhIXRoaXMuc3RhdGUuY29sbGFwc2VkKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBwcmVmaXhDbHMgKyAnLWhhcy10cmlnZ2VyJywgY29sbGFwc2libGUgJiYgdHJpZ2dlciAhPT0gbnVsbCAmJiAhemVyb1dpZHRoVHJpZ2dlciksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgcHJlZml4Q2xzICsgJy1iZWxvdycsICEhdGhpcy5zdGF0ZS5iZWxvdyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgcHJlZml4Q2xzICsgJy16ZXJvLXdpZHRoJywgcGFyc2VGbG9hdChzaWRlcldpZHRoKSA9PT0gMCksIF9jbGFzc05hbWVzKSk7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBfZXh0ZW5kcyh7IGNsYXNzTmFtZTogc2lkZXJDbHMgfSwgZGl2UHJvcHMsIHsgc3R5bGU6IGRpdlN0eWxlIH0pLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1jaGlsZHJlbicgfSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgY29sbGFwc2libGUgfHwgdGhpcy5zdGF0ZS5iZWxvdyAmJiB6ZXJvV2lkdGhUcmlnZ2VyID8gdHJpZ2dlckRvbSA6IG51bGxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIGlmICgnY29sbGFwc2VkJyBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZWQ6IG5leHRQcm9wcy5jb2xsYXBzZWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2lkZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblNpZGVyLl9fQU5UX0xBWU9VVF9TSURFUiA9IHRydWU7XG5TaWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcHJlZml4Q2xzOiAnYW50LWxheW91dC1zaWRlcicsXG4gICAgY29sbGFwc2libGU6IGZhbHNlLFxuICAgIGRlZmF1bHRDb2xsYXBzZWQ6IGZhbHNlLFxuICAgIHJldmVyc2VBcnJvdzogZmFsc2UsXG4gICAgd2lkdGg6IDIwMCxcbiAgICBjb2xsYXBzZWRXaWR0aDogODAsXG4gICAgc3R5bGU6IHt9LFxuICAgIHRoZW1lOiAnZGFyaydcbn07XG5TaWRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgICBzaWRlckNvbGxhcHNlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgY29sbGFwc2VkV2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufTtcblNpZGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgICBzaWRlckhvb2s6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5wb2x5ZmlsbChTaWRlcik7XG5leHBvcnQgZGVmYXVsdCBTaWRlcjsiLCJpbXBvcnQgTGF5b3V0IGZyb20gJy4vbGF5b3V0JztcbmltcG9ydCBTaWRlciBmcm9tICcuL1NpZGVyJztcbkxheW91dC5TaWRlciA9IFNpZGVyO1xuZXhwb3J0IGRlZmF1bHQgTGF5b3V0OyJdLCJzb3VyY2VSb290IjoiIn0=